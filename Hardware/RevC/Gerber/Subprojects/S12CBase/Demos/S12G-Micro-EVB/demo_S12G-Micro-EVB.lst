                                      ;###############################################################################
                                      ;# S12CBase - Demo (S12G-Micro-EVB)                                              #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
??????        -> $0001                CLOCK_CPMU              EQU     1               ;CPMU
??????        -> $0001                CLOCK_IRC               EQU     1               ;use IRC
??????        -> $F4240               CLOCK_OSC_FREQ          EQU      1000000        ; 1 MHz IRC frequency
??????        -> $17D7840             CLOCK_BUS_FREQ          EQU     25000000        ; 25 MHz bus frequency
??????        -> $F4240               CLOCK_REF_FREQ          EQU      1000000        ; 1 MHz reference clock frequency
??????        -> $0001                CLOCK_VCOFRQ            EQU     $1              ; 10 MHz VCO frequency
??????        -> $0000                CLOCK_REFFRQ            EQU     $0              ;  1 MHz reference clock frequency
                                      ;# Memory map:
??????        -> $0001                MMAP_S12G128            EQU     1               ;S12G128
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;# Interrupt stack
??????        -> $0001                ISTACK_LEVELS           EQU     1               ;interrupt nesting not guaranteed
??????        -> $0001                ISTACK_DEBUG            EQU     1               ;don't enter wait mode
                                      ;# Subroutine stack
??????        -> $001B                SSTACK_DEPTH            EQU     27              ;no interrupt nesting
??????        -> $0001                SSTACK_DEBUG            EQU     1               ;debug behavior
                                      ;# COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;# RESET
??????        -> $2B44                RESET_WELCOME           EQU     DEMO_WELCOME    ;welcome message
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# SCI
??????        -> $0001                SCI_FC_RTSCTS           EQU     1               ;RTS/CTS flow control
??????        -> $0250                SCI_RTS_PORT            EQU     PTM             ;PTM
??????        -> $0001                SCI_RTS_PIN             EQU     PM0             ;PM0
??????        -> $0250                SCI_CTS_PORT            EQU     PTM             ;PTM
??????        -> $0002                SCI_CTS_PIN             EQU     PM1             ;PM1
??????        -> $0001                SCI_HANDLE_BREAK        EQU     1               ;react to BREAK symbol
??????        -> $0001                SCI_HANDLE_SUSPEND      EQU     1               ;react to SUSPEND symbol
??????        -> $0001                SCI_BD_ON               EQU     1               ;use baud rate detection
??????        -> $0001                SCI_BD_TIM              EQU     1               ;TIM
??????        -> $0000                SCI_BD_ICPE             EQU     0               ;IC0
??????        -> $0001                SCI_BD_ICNE             EQU     1               ;IC1
??????        -> $0002                SCI_BD_OC               EQU     2               ;OC2
??????        -> $0001                SCI_BD_LOG_ON           EQU     1               ;log captured BD pulses
??????        -> $0003                SCI_DLY_OC              EQU     3               ;OC3
??????        -> $0001                SCI_ERRSIG_ON           EQU     1               ;signal errors
??????        -> $0001                SCI_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
002000 0F6000                                                 ORG     MMAP_RAM_START
                                      ;Code
002000 0F6000 -> $2000                START_OF_CODE           EQU     *
002000 0F6000 -> $2000                DEMO_CODE_START         EQU     *
002000 0F6000 -> $F6000               DEMO_CODE_START_LIN     EQU     @
002000 0F6000 -> $240A                BASE_CODE_START         EQU     DEMO_CODE_END
002000 0F6000 -> $F640A               BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Variables
002000 0F6000 -> $2A6A                DEMO_VARS_START         EQU     BASE_CODE_END
002000 0F6000 -> $F6A6A               DEMO_VARS_START_LIN     EQU     BASE_CODE_END_LIN
002000 0F6000 -> $2A6A                BASE_VARS_START         EQU     DEMO_VARS_END
002000 0F6000 -> $F6A6A               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
                                      ;Tables
002000 0F6000 -> $2B44                DEMO_TABS_START         EQU     BASE_VARS_END
002000 0F6000 -> $F6B44               DEMO_TABS_START_LIN     EQU     BASE_VARS_END_LIN
002000 0F6000 -> $2BB8                BASE_TABS_START         EQU     DEMO_TABS_END
002000 0F6000 -> $F6BB8               BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (S12G-Micro-EVB)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 20, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
002000 0F6000 -> $0001                CLOCK_CPMU              EQU     1               ;CPMU
                                      ;# SCI
002000 0F6000 -> $0001                SCI_RXTX_ACTHI          EQU     1               ;RXD/TXD are inverted (active high)
002000 0F6000 -> $0001                SCI_FC_RTS_CTS          EQU     1               ;RTS/CTS flow control
002000 0F6000 -> $0250                SCI_RTS_PORT            EQU     PTM             ;PTM
002000 0F6000 -> $0001                SCI_RTS_PIN             EQU     PM0             ;PM0
002000 0F6000 -> $0250                SCI_CTS_PORT            EQU     PTM             ;PTM
002000 0F6000 -> $0002                SCI_CTS_PIN             EQU     PM1             ;PM1
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
002A6A 0F6A6A -> $2A6A                GPIO_VARS_START         EQU     *
002A6A 0F6A6A -> $F6A6A               GPIO_VARS_START_LIN     EQU     @
002A6A 0F6A6A -> $2A6A                MMAP_VARS_START         EQU     GPIO_VARS_END
002A6A 0F6A6A -> $F6A6A               MMAP_VARS_START_LIN     EQU     GPIO_VARS_END_LIN
002A6A 0F6A6A -> $2A6A                SSTACK_VARS_START       EQU     MMAP_VARS_END
002A6A 0F6A6A -> $F6A6A               SSTACK_VARS_START_LIN   EQU     MMAP_VARS_END_LIN
002A6A 0F6A6A -> $2A6A                ISTACK_VARS_START       EQU     SSTACK_VARS_END
002A6A 0F6A6A -> $F6A6A               ISTACK_VARS_START_LIN   EQU     SSTACK_VARS_END_LIN
002A6A 0F6A6A -> $2A8E                CLOCK_VARS_START        EQU     ISTACK_VARS_END
002A6A 0F6A6A -> $F6A8E               CLOCK_VARS_START_LIN    EQU     ISTACK_VARS_END_LIN
002A6A 0F6A6A -> $2A8E                COP_VARS_START          EQU     CLOCK_VARS_END
002A6A 0F6A6A -> $F6A8E               COP_VARS_START_LIN      EQU     CLOCK_VARS_END_LIN
002A6A 0F6A6A -> $2A8E                TIM_VARS_START          EQU     COP_VARS_END
002A6A 0F6A6A -> $F6A8E               TIM_VARS_START_LIN      EQU     COP_VARS_END_LIN
002A6A 0F6A6A -> $2A8E                LED_VARS_START          EQU     TIM_VARS_END
002A6A 0F6A6A -> $F6A8E               LED_VARS_START_LIN      EQU     TIM_VARS_END_LIN
002A6A 0F6A6A -> $2A8E                SCI_VARS_START          EQU     LED_VARS_END
002A6A 0F6A6A -> $F6A8E               SCI_VARS_START_LIN      EQU     LED_VARS_END_LIN
002A6A 0F6A6A -> $2B40                STRING_VARS_START       EQU     SCI_VARS_END
002A6A 0F6A6A -> $F6B40               STRING_VARS_START_LIN   EQU     SCI_VARS_END_LIN
002A6A 0F6A6A -> $2B40                RESET_VARS_START        EQU     STRING_VARS_END
002A6A 0F6A6A -> $F6B40               RESET_VARS_START_LIN    EQU     STRING_VARS_END_LIN
002A6A 0F6A6A -> $2B44                NUM_VARS_START          EQU     RESET_VARS_END
002A6A 0F6A6A -> $F6B44               NUM_VARS_START_LIN      EQU     RESET_VARS_END_LIN
002A6A 0F6A6A -> $2B44                NVM_VARS_START          EQU     NUM_VARS_END
002A6A 0F6A6A -> $F6B44               NVM_VARS_START_LIN      EQU     NUM_VARS_END_LIN
002A6A 0F6A6A -> $2B44                VECTAB_VARS_START       EQU     NVM_VARS_END
002A6A 0F6A6A -> $F6B44               VECTAB_VARS_START_LIN   EQU     NVM_VARS_END_LIN
002A6A 0F6A6A -> $2B44                BASE_VARS_END           EQU     VECTAB_VARS_START
002A6A 0F6A6A -> $F6B44               BASE_VARS_END_LIN       EQU     VECTAB_VARS_START_LIN
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
00240A 0F640A -> $240A                GPIO_CODE_START         EQU     *
00240A 0F640A -> $F640A               GPIO_CODE_START_LIN     EQU     @
00240A 0F640A -> $240A                MMAP_CODE_START         EQU     GPIO_CODE_END
00240A 0F640A -> $F640A               MMAP_CODE_START_LIN     EQU     GPIO_CODE_END_LIN
00240A 0F640A -> $240A                SSTACK_CODE_START       EQU     MMAP_CODE_END
00240A 0F640A -> $F640A               SSTACK_CODE_START_LIN   EQU     MMAP_CODE_END_LIN
00240A 0F640A -> $240A                ISTACK_CODE_START       EQU     SSTACK_CODE_END
00240A 0F640A -> $F640A               ISTACK_CODE_START_LIN   EQU     SSTACK_CODE_END_LIN
00240A 0F640A -> $240A                CLOCK_CODE_START        EQU     ISTACK_CODE_END
00240A 0F640A -> $F640A               CLOCK_CODE_START_LIN    EQU     ISTACK_CODE_END_LIN
00240A 0F640A -> $240A                COP_CODE_START          EQU     CLOCK_CODE_END
00240A 0F640A -> $F640A               COP_CODE_START_LIN      EQU     CLOCK_CODE_END_LIN
00240A 0F640A -> $240A                TIM_CODE_START          EQU     COP_CODE_END
00240A 0F640A -> $F640A               TIM_CODE_START_LIN      EQU     COP_CODE_END_LIN
00240A 0F640A -> $240A                LED_CODE_START          EQU     TIM_CODE_END
00240A 0F640A -> $F640A               LED_CODE_START_LIN      EQU     TIM_CODE_END_LIN
00240A 0F640A -> $240A                SCI_CODE_START          EQU     LED_CODE_END
00240A 0F640A -> $F640A               SCI_CODE_START_LIN      EQU     LED_CODE_END_LIN
00240A 0F640A -> $28A7                STRING_CODE_START       EQU     SCI_CODE_END
00240A 0F640A -> $F68A7               STRING_CODE_START_LIN   EQU     SCI_CODE_END_LIN
00240A 0F640A -> $290B                RESET_CODE_START        EQU     STRING_CODE_END
00240A 0F640A -> $F690B               RESET_CODE_START_LIN    EQU     STRING_CODE_END_LIN
00240A 0F640A -> $296A                NUM_CODE_START          EQU     RESET_CODE_END
00240A 0F640A -> $F696A               NUM_CODE_START_LIN      EQU     RESET_CODE_END_LIN
00240A 0F640A -> $2A6A                NVM_CODE_START          EQU     NUM_CODE_END
00240A 0F640A -> $F6A6A               NVM_CODE_START_LIN      EQU     NUM_CODE_END_LIN
00240A 0F640A -> $2A6A                VECTAB_CODE_START       EQU     NVM_CODE_END
00240A 0F640A -> $F6A6A               VECTAB_CODE_START_LIN   EQU     NVM_CODE_END_LIN
00240A 0F640A -> $2A6A                BASE_CODE_END           EQU     VECTAB_CODE_START
00240A 0F640A -> $F6A6A               BASE_CODE_END_LIN       EQU     VECTAB_CODE_START_LIN
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                GPIO_TABS_START         EQU     *
002BB8 0F6BB8 -> $F6BB8               GPIO_TABS_START_LIN     EQU     @
002BB8 0F6BB8 -> $2BB8                MMAP_TABS_START         EQU     GPIO_TABS_END
002BB8 0F6BB8 -> $F6BB8               MMAP_TABS_START_LIN     EQU     GPIO_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                SSTACK_TABS_START       EQU     MMAP_TABS_END
002BB8 0F6BB8 -> $F6BB8               SSTACK_TABS_START_LIN   EQU     MMAP_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                ISTACK_TABS_START       EQU     SSTACK_TABS_END
002BB8 0F6BB8 -> $F6BB8               ISTACK_TABS_START_LIN   EQU     SSTACK_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                CLOCK_TABS_START        EQU     ISTACK_TABS_END
002BB8 0F6BB8 -> $F6BB8               CLOCK_TABS_START_LIN    EQU     ISTACK_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                COP_TABS_START          EQU     CLOCK_TABS_END
002BB8 0F6BB8 -> $F6BB8               COP_TABS_START_LIN      EQU     CLOCK_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                TIM_TABS_START          EQU     COP_TABS_END
002BB8 0F6BB8 -> $F6BB8               TIM_TABS_START_LIN      EQU     COP_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                LED_TABS_START          EQU     TIM_TABS_END
002BB8 0F6BB8 -> $F6BB8               LED_TABS_START_LIN      EQU     TIM_TABS_END_LIN
002BB8 0F6BB8 -> $2BB8                SCI_TABS_START          EQU     LED_TABS_END
002BB8 0F6BB8 -> $F6BB8               SCI_TABS_START_LIN      EQU     LED_TABS_END_LIN
002BB8 0F6BB8 -> $2FF8                STRING_TABS_START       EQU     SCI_TABS_END
002BB8 0F6BB8 -> $F6FF8               STRING_TABS_START_LIN   EQU     SCI_TABS_END_LIN
002BB8 0F6BB8 -> $2FFB                RESET_TABS_START        EQU     STRING_TABS_END
002BB8 0F6BB8 -> $F6FFB               RESET_TABS_START_LIN    EQU     STRING_TABS_END_LIN
002BB8 0F6BB8 -> $303A                NUM_TABS_START          EQU     RESET_TABS_END
002BB8 0F6BB8 -> $F703A               NUM_TABS_START_LIN      EQU     RESET_TABS_END_LIN
002BB8 0F6BB8 -> $304B                NVM_TABS_START          EQU     NUM_TABS_END
002BB8 0F6BB8 -> $F704B               NVM_TABS_START_LIN      EQU     NUM_TABS_END_LIN
002BB8 0F6BB8 -> $304B                VECTAB_TABS_START       EQU     NVM_TABS_END
002BB8 0F6BB8 -> $F704B               VECTAB_TABS_START_LIN   EQU     NVM_TABS_END_LIN
002BB8 0F6BB8 -> $304B                BASE_TABS_END           EQU     VECTAB_TABS_START
002BB8 0F6BB8 -> $F704B               BASE_TABS_END_LIN       EQU     VECTAB_TABS_START_LIN
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (S12G-Micro-EVB)                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12G-family.                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr 1, 2010                                                              #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;#############################
                                      ;# S12G Register Definitions #
                                      ;#############################
002BB8 0F6BB8 -> $0000                PORTA           EQU     $0000
002BB8 0F6BB8 -> $0080                PTA7            EQU     $80
002BB8 0F6BB8 -> $0040                PTA6            EQU     $40
002BB8 0F6BB8 -> $0020                PTA5            EQU     $20
002BB8 0F6BB8 -> $0010                PTA4            EQU     $10
002BB8 0F6BB8 -> $0008                PTA3            EQU     $08
002BB8 0F6BB8 -> $0004                PTA2            EQU     $04
002BB8 0F6BB8 -> $0002                PTA1            EQU     $02
002BB8 0F6BB8 -> $0001                PTA0            EQU     $01
002BB8 0F6BB8 -> $0080                PA7             EQU     $80
002BB8 0F6BB8 -> $0040                PA6             EQU     $40
002BB8 0F6BB8 -> $0020                PA5             EQU     $20
002BB8 0F6BB8 -> $0010                PA4             EQU     $10
002BB8 0F6BB8 -> $0008                PA3             EQU     $08
002BB8 0F6BB8 -> $0004                PA2             EQU     $04
002BB8 0F6BB8 -> $0002                PA1             EQU     $02
002BB8 0F6BB8 -> $0001                PA0             EQU     $01
002BB8 0F6BB8 -> $0001                PORTB           EQU     $0001
002BB8 0F6BB8 -> $0080                PTB7            EQU     $80
002BB8 0F6BB8 -> $0040                PTB6            EQU     $40
002BB8 0F6BB8 -> $0020                PTB5            EQU     $20
002BB8 0F6BB8 -> $0010                PTB4            EQU     $10
002BB8 0F6BB8 -> $0008                PTB3            EQU     $08
002BB8 0F6BB8 -> $0004                PTB2            EQU     $04
002BB8 0F6BB8 -> $0002                PTB1            EQU     $02
002BB8 0F6BB8 -> $0001                PTB0            EQU     $01
002BB8 0F6BB8 -> $0080                PB7             EQU     $80
002BB8 0F6BB8 -> $0040                PB6             EQU     $40
002BB8 0F6BB8 -> $0020                PB5             EQU     $20
002BB8 0F6BB8 -> $0010                PB4             EQU     $10
002BB8 0F6BB8 -> $0008                PB3             EQU     $08
002BB8 0F6BB8 -> $0004                PB2             EQU     $04
002BB8 0F6BB8 -> $0002                PB1             EQU     $02
002BB8 0F6BB8 -> $0001                PB0             EQU     $01
002BB8 0F6BB8 -> $0002                DDRA            EQU     $0002
002BB8 0F6BB8 -> $0080                DDRA7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRA6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRA5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRA4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRA3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRA2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRA1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRA0           EQU     $01
002BB8 0F6BB8 -> $0003                DDRB            EQU     $0003
002BB8 0F6BB8 -> $0080                DDRB7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRB6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRB5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRB4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRB3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRB2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRB1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRB0           EQU     $01
002BB8 0F6BB8 -> $0004                PORTC           EQU     $0004
002BB8 0F6BB8 -> $0080                PTC7            EQU     $80
002BB8 0F6BB8 -> $0040                PTC6            EQU     $40
002BB8 0F6BB8 -> $0020                PTC5            EQU     $20
002BB8 0F6BB8 -> $0010                PTC4            EQU     $10
002BB8 0F6BB8 -> $0008                PTC3            EQU     $08
002BB8 0F6BB8 -> $0004                PTC2            EQU     $04
002BB8 0F6BB8 -> $0002                PTC1            EQU     $02
002BB8 0F6BB8 -> $0001                PTC0            EQU     $01
002BB8 0F6BB8 -> $0080                PC7             EQU     $80
002BB8 0F6BB8 -> $0040                PC6             EQU     $40
002BB8 0F6BB8 -> $0020                PC5             EQU     $20
002BB8 0F6BB8 -> $0010                PC4             EQU     $10
002BB8 0F6BB8 -> $0008                PC3             EQU     $08
002BB8 0F6BB8 -> $0004                PC2             EQU     $04
002BB8 0F6BB8 -> $0002                PC1             EQU     $02
002BB8 0F6BB8 -> $0001                PC0             EQU     $01
002BB8 0F6BB8 -> $0005                PORTD           EQU     $0005
002BB8 0F6BB8 -> $0080                PTD7            EQU     $80
002BB8 0F6BB8 -> $0040                PTD6            EQU     $40
002BB8 0F6BB8 -> $0020                PTD5            EQU     $20
002BB8 0F6BB8 -> $0010                PTD4            EQU     $10
002BB8 0F6BB8 -> $0008                PTD3            EQU     $08
002BB8 0F6BB8 -> $0004                PTD2            EQU     $04
002BB8 0F6BB8 -> $0002                PTD1            EQU     $02
002BB8 0F6BB8 -> $0001                PTD0            EQU     $01
002BB8 0F6BB8 -> $0080                PD7             EQU     $80
002BB8 0F6BB8 -> $0040                PD6             EQU     $40
002BB8 0F6BB8 -> $0020                PD5             EQU     $20
002BB8 0F6BB8 -> $0010                PD4             EQU     $10
002BB8 0F6BB8 -> $0008                PD3             EQU     $08
002BB8 0F6BB8 -> $0004                PD2             EQU     $04
002BB8 0F6BB8 -> $0002                PD1             EQU     $02
002BB8 0F6BB8 -> $0001                PD0             EQU     $01
002BB8 0F6BB8 -> $0006                DDRC            EQU     $0006
002BB8 0F6BB8 -> $0080                DDRC7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRC6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRC5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRC4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRC3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRC2           EQU     $04
002BB8 0F6BB8 -> $0007                DDRD            EQU     $0007
002BB8 0F6BB8 -> $0080                DDRD7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRD6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRD5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRD4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRD3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRD2           EQU     $04
002BB8 0F6BB8 -> $0008                PORTE           EQU     $0008
002BB8 0F6BB8 -> $0002                PTE1            EQU     $02
002BB8 0F6BB8 -> $0001                PTE0            EQU     $01
002BB8 0F6BB8 -> $0002                PE1             EQU     $02
002BB8 0F6BB8 -> $0001                PE0             EQU     $01
002BB8 0F6BB8 -> $0009                DDRE            EQU     $0009
002BB8 0F6BB8 -> $0002                DDRE1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRE0           EQU     $01
                                      ;$000A reserved
002BB8 0F6BB8 -> $000B                MODE            EQU     $000B
002BB8 0F6BB8 -> $0080                MODC            EQU     $80
002BB8 0F6BB8 -> $000C                PUCR            EQU     $000C
002BB8 0F6BB8 -> $0040                BKPUE           EQU     $40
002BB8 0F6BB8 -> $0010                PUPEE           EQU     $10
002BB8 0F6BB8 -> $0008                PUPDE           EQU     $08
002BB8 0F6BB8 -> $0004                PUPCE           EQU     $04
002BB8 0F6BB8 -> $0002                PUPBE           EQU     $02
002BB8 0F6BB8 -> $0001                PUPAE           EQU     $01
                                      ;$000D to $0010 reserved
002BB8 0F6BB8 -> $0011                DIRECT          EQU     $0011
002BB8 0F6BB8 -> $0080                DP15            EQU     $80
002BB8 0F6BB8 -> $0040                DP14            EQU     $40
002BB8 0F6BB8 -> $0020                DP13            EQU     $20
002BB8 0F6BB8 -> $0010                DP12            EQU     $10
002BB8 0F6BB8 -> $0008                DP11            EQU     $08
002BB8 0F6BB8 -> $0004                DP10            EQU     $04
002BB8 0F6BB8 -> $0002                DP9             EQU     $02
002BB8 0F6BB8 -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
002BB8 0F6BB8 -> $0013                MMCCTL          EQU     $0013
002BB8 0F6BB8 -> $0001                NVMRES           EQU     $01
                                      ;$0014 reserved
002BB8 0F6BB8 -> $0015                PPAGE           EQU     $0015
002BB8 0F6BB8 -> $0008                PIX3            EQU     $08
002BB8 0F6BB8 -> $0004                PIX2            EQU     $04
002BB8 0F6BB8 -> $0002                PIX1            EQU     $02
002BB8 0F6BB8 -> $0001                PIX0            EQU     $01
                                      ;$0006 to $0019 reserved
002BB8 0F6BB8 -> $001A                PARTIDH         EQU     $001A
002BB8 0F6BB8 -> $0080                ID15            EQU     $80
002BB8 0F6BB8 -> $0040                ID14            EQU     $40
002BB8 0F6BB8 -> $0020                ID13            EQU     $20
002BB8 0F6BB8 -> $0010                ID12            EQU     $10
002BB8 0F6BB8 -> $0008                ID11            EQU     $08
002BB8 0F6BB8 -> $0004                ID10            EQU     $04
002BB8 0F6BB8 -> $0002                ID9             EQU     $02
002BB8 0F6BB8 -> $0001                ID8             EQU     $01
002BB8 0F6BB8 -> $001B                PARTIDL         EQU     $001B
002BB8 0F6BB8 -> $0080                ID7             EQU     $80
002BB8 0F6BB8 -> $0040                ID6             EQU     $40
002BB8 0F6BB8 -> $0020                ID5             EQU     $20
002BB8 0F6BB8 -> $0010                ID4             EQU     $10
002BB8 0F6BB8 -> $0008                ID3             EQU     $08
002BB8 0F6BB8 -> $0004                ID2             EQU     $04
002BB8 0F6BB8 -> $0002                ID1             EQU     $02
002BB8 0F6BB8 -> $0001                ID0             EQU     $01
002BB8 0F6BB8 -> $001C                ECLKCTL         EQU     $001C
002BB8 0F6BB8 -> $0080                NECLK           EQU     $80
002BB8 0F6BB8 -> $0040                NCLKX2          EQU     $40
002BB8 0F6BB8 -> $0020                DIV16           EQU     $20
002BB8 0F6BB8 -> $0010                EDIV4           EQU     $10
002BB8 0F6BB8 -> $0008                EDIV3           EQU     $08
002BB8 0F6BB8 -> $0004                EDIV2           EQU     $04
002BB8 0F6BB8 -> $0002                EDIV1           EQU     $02
002BB8 0F6BB8 -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
002BB8 0F6BB8 -> $001E                IRQCR           EQU     $001E
002BB8 0F6BB8 -> $0080                IRQE            EQU     $80
002BB8 0F6BB8 -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
002BB8 0F6BB8 -> $0020                DBGC1           EQU     $0020
002BB8 0F6BB8 -> $0080                ARM             EQU     $80
002BB8 0F6BB8 -> $0040                TRIG            EQU     $40
002BB8 0F6BB8 -> $0010                BDM             EQU     $10
002BB8 0F6BB8 -> $0004                DBGBRK          EQU     $04
002BB8 0F6BB8 -> $0003                COMRV           EQU     $03
002BB8 0F6BB8 -> $0021                DBGSR           EQU     $0021
002BB8 0F6BB8 -> $0080                TBF             EQU     $80
002BB8 0F6BB8 -> $0004                SSF2            EQU     $04
002BB8 0F6BB8 -> $0002                SSF1            EQU     $02
002BB8 0F6BB8 -> $0001                SSF0            EQU     $01
002BB8 0F6BB8 -> $0022                DBGTCR          EQU     $0022
002BB8 0F6BB8 -> $0040                TSOURCE         EQU     $40
002BB8 0F6BB8 -> $000C                TRCMOD          EQU     $0C
002BB8 0F6BB8 -> $0001                TALIGN          EQU     $01
002BB8 0F6BB8 -> $0023                DBGC2           EQU     $0023
002BB8 0F6BB8 -> $0003                ABCM            EQU     $03
002BB8 0F6BB8 -> $0024                DBGTBH          EQU     $0024
002BB8 0F6BB8 -> $0080                DBGTB15         EQU     $80
002BB8 0F6BB8 -> $0040                DBGTB14         EQU     $40
002BB8 0F6BB8 -> $0020                DBGTB13         EQU     $20
002BB8 0F6BB8 -> $0010                DBGTB12         EQU     $10
002BB8 0F6BB8 -> $0008                DBGTB11         EQU     $08
002BB8 0F6BB8 -> $0004                DBGTB10         EQU     $04
002BB8 0F6BB8 -> $0002                DBGTB9          EQU     $02
002BB8 0F6BB8 -> $0001                DBGTB8          EQU     $01
002BB8 0F6BB8 -> $0025                DBGTBL          EQU     $0025
002BB8 0F6BB8 -> $0080                DBGTB7          EQU     $80
002BB8 0F6BB8 -> $0040                DBGTB6          EQU     $40
002BB8 0F6BB8 -> $0020                DBGTB5          EQU     $20
002BB8 0F6BB8 -> $0010                DBGTB4          EQU     $10
002BB8 0F6BB8 -> $0008                DBGTB3          EQU     $08
002BB8 0F6BB8 -> $0004                DBGTB2          EQU     $04
002BB8 0F6BB8 -> $0002                DBGTB1          EQU     $02
002BB8 0F6BB8 -> $0001                DBGTB0          EQU     $01
002BB8 0F6BB8 -> $0026                DBGCNT          EQU     $0026
002BB8 0F6BB8 -> $0080                TBF             EQU     $80
002BB8 0F6BB8 -> $007F                CNT             EQU     $7F
002BB8 0F6BB8 -> $0027                DBGSCRX         EQU     $0027
002BB8 0F6BB8 -> $0008                SC3             EQU     $08
002BB8 0F6BB8 -> $0004                SC2             EQU     $04
002BB8 0F6BB8 -> $0002                SC1             EQU     $02
002BB8 0F6BB8 -> $0001                SC0             EQU     $01
002BB8 0F6BB8 -> $0027                DBGMFR          EQU     $0027
002BB8 0F6BB8 -> $0004                MC2             EQU     $04
002BB8 0F6BB8 -> $0002                MC1             EQU     $02
002BB8 0F6BB8 -> $0001                MC0             EQU     $01
002BB8 0F6BB8 -> $0028                DBGXCTL         EQU     $0028
002BB8 0F6BB8 -> $0080                SZE             EQU     $80
002BB8 0F6BB8 -> $0040                SZ              EQU     $40
002BB8 0F6BB8 -> $0020                TAG             EQU     $20
002BB8 0F6BB8 -> $0010                BRK             EQU     $10
002BB8 0F6BB8 -> $0008                RW              EQU     $08
002BB8 0F6BB8 -> $0004                RWE             EQU     $04
002BB8 0F6BB8 -> $0002                NDB             EQU     $02
002BB8 0F6BB8 -> $0001                COMPE           EQU     $01
002BB8 0F6BB8 -> $0029                DBGXAH          EQU    $0029
002BB8 0F6BB8 -> $0002                DBGXA17         EQU    $02
002BB8 0F6BB8 -> $0001                DBGXA16         EQU    $01
002BB8 0F6BB8 -> $002A                DBGXAM          EQU     $002A
002BB8 0F6BB8 -> $0080                DBGXA15         EQU     $80
002BB8 0F6BB8 -> $0040                DBGXA14         EQU     $40
002BB8 0F6BB8 -> $0020                DBGXA13         EQU     $20
002BB8 0F6BB8 -> $0010                DBGXA12         EQU     $10
002BB8 0F6BB8 -> $0008                DBGXA11         EQU     $08
002BB8 0F6BB8 -> $0004                DBGXA10         EQU     $04
002BB8 0F6BB8 -> $0002                DBGXA9          EQU     $02
002BB8 0F6BB8 -> $0001                DBGXA8          EQU     $01
002BB8 0F6BB8 -> $002B                DBGXAL          EQU     $002B
002BB8 0F6BB8 -> $0080                DBGXA7          EQU     $80
002BB8 0F6BB8 -> $0040                DBGXA6          EQU     $40
002BB8 0F6BB8 -> $0020                DBGXA5          EQU     $20
002BB8 0F6BB8 -> $0010                DBGXA4          EQU     $10
002BB8 0F6BB8 -> $0008                DBGXA3          EQU     $08
002BB8 0F6BB8 -> $0004                DBGXA2          EQU     $04
002BB8 0F6BB8 -> $0002                DBGXA1          EQU     $02
002BB8 0F6BB8 -> $0001                DBGXA0          EQU     $01
002BB8 0F6BB8 -> $002C                DBGADH          EQU     $002C
002BB8 0F6BB8 -> $0080                DBGAD15         EQU     $80
002BB8 0F6BB8 -> $0040                DBGAD14         EQU     $40
002BB8 0F6BB8 -> $0020                DBGAD13         EQU     $20
002BB8 0F6BB8 -> $0010                DBGAD12         EQU     $10
002BB8 0F6BB8 -> $0008                DBGAD11         EQU     $08
002BB8 0F6BB8 -> $0004                DBGAD10         EQU     $04
002BB8 0F6BB8 -> $0002                DBGAD9          EQU     $02
002BB8 0F6BB8 -> $0001                DBGAD8          EQU     $01
002BB8 0F6BB8 -> $002D                DBGADL          EQU     $002D
002BB8 0F6BB8 -> $0080                DBGAD7          EQU     $80
002BB8 0F6BB8 -> $0040                DBGAD6          EQU     $40
002BB8 0F6BB8 -> $0020                DBGAD5          EQU     $20
002BB8 0F6BB8 -> $0010                DBGAD4          EQU     $10
002BB8 0F6BB8 -> $0008                DBGAD3          EQU     $08
002BB8 0F6BB8 -> $0004                DBGAD2          EQU     $04
002BB8 0F6BB8 -> $0002                DBGAD1          EQU     $02
002BB8 0F6BB8 -> $0001                DBGAD0          EQU     $01
002BB8 0F6BB8 -> $002E                DBGADHM         EQU     $002E
002BB8 0F6BB8 -> $0080                DBGADM15        EQU     $80
002BB8 0F6BB8 -> $0040                DBGADM14        EQU     $40
002BB8 0F6BB8 -> $0020                DBGADM13        EQU     $20
002BB8 0F6BB8 -> $0010                DBGADM12        EQU     $10
002BB8 0F6BB8 -> $0008                DBGADM11        EQU     $08
002BB8 0F6BB8 -> $0004                DBGADM10        EQU     $04
002BB8 0F6BB8 -> $0002                DBGADM9         EQU     $02
002BB8 0F6BB8 -> $0001                DBGADM8         EQU     $01
002BB8 0F6BB8 -> $002F                DBGADLM         EQU     $002F
002BB8 0F6BB8 -> $0080                DBGADM7         EQU     $80
002BB8 0F6BB8 -> $0040                DBGADM6         EQU     $40
002BB8 0F6BB8 -> $0020                DBGADM5         EQU     $20
002BB8 0F6BB8 -> $0010                DBGADM4         EQU     $10
002BB8 0F6BB8 -> $0008                DBGADM3         EQU     $08
002BB8 0F6BB8 -> $0004                DBGADM2         EQU     $04
002BB8 0F6BB8 -> $0002                DBGADM1         EQU     $02
002BB8 0F6BB8 -> $0001                DBGADM0         EQU     $01
                                      ;$0030 to $0033 reserved
002BB8 0F6BB8 -> $0034                CPMUSYNR        EQU     $0034
002BB8 0F6BB8 -> $0034                SYNR            EQU     $0034
002BB8 0F6BB8 -> $0080                VCOFRQ1         EQU     $80
002BB8 0F6BB8 -> $0040                VCOFRQ0         EQU     $40
002BB8 0F6BB8 -> $0020                SYNDIV5         EQU     $20
002BB8 0F6BB8 -> $0010                SYNDIV4         EQU     $10
002BB8 0F6BB8 -> $0008                SYNDIV3         EQU     $08
002BB8 0F6BB8 -> $0004                SYNDIV2         EQU     $04
002BB8 0F6BB8 -> $0002                SYNDIV1         EQU     $02
002BB8 0F6BB8 -> $0001                SYNDIV0         EQU     $01
002BB8 0F6BB8 -> $0035                CPMUREFDV       EQU     $0035
002BB8 0F6BB8 -> $0035                REFDV           EQU     $0035
002BB8 0F6BB8 -> $0080                REFFRQ1         EQU     $80
002BB8 0F6BB8 -> $0040                REFFRQ0         EQU     $40
002BB8 0F6BB8 -> $0008                REFDIV3         EQU     $08
002BB8 0F6BB8 -> $0004                REFDIV2         EQU     $04
002BB8 0F6BB8 -> $0002                REFDIV1         EQU     $02
002BB8 0F6BB8 -> $0001                REFDIV0         EQU     $01
002BB8 0F6BB8 -> $0036                CPMUPOSTDIV     EQU     $0036
002BB8 0F6BB8 -> $0036                POSTDIV         EQU     $0036
002BB8 0F6BB8 -> $0010                POSTDIV4        EQU     $10
002BB8 0F6BB8 -> $0008                POSTDIV3        EQU     $08
002BB8 0F6BB8 -> $0004                POSTDIV2        EQU     $04
002BB8 0F6BB8 -> $0002                POSTDIV1        EQU     $02
002BB8 0F6BB8 -> $0001                POSTDIV0        EQU     $01
002BB8 0F6BB8 -> $0037                CPMUFLG         EQU     $0037
002BB8 0F6BB8 -> $0080                RTIF            EQU     $80
002BB8 0F6BB8 -> $0040                PORF            EQU     $40
002BB8 0F6BB8 -> $0020                LVRF            EQU     $20
002BB8 0F6BB8 -> $0010                LOCKIF          EQU     $10
002BB8 0F6BB8 -> $0008                LOCK            EQU     $08
002BB8 0F6BB8 -> $0004                ILAF            EQU     $04
002BB8 0F6BB8 -> $0002                OSCIF           EQU     $02
002BB8 0F6BB8 -> $0001                UPOSC           EQU     $01
002BB8 0F6BB8 -> $0038                CPMUINT         EQU     $0038
002BB8 0F6BB8 -> $0080                RTIE            EQU     $80
002BB8 0F6BB8 -> $0010                LOCKIE          EQU     $10
002BB8 0F6BB8 -> $0002                OSCIE           EQU     $02
002BB8 0F6BB8 -> $0039                CPMUCLKS        EQU     $0039
002BB8 0F6BB8 -> $0080                PLLSEL          EQU     $80
002BB8 0F6BB8 -> $0040                PSTP            EQU     $40
002BB8 0F6BB8 -> $0008                PRE             EQU     $08
002BB8 0F6BB8 -> $0004                PCE             EQU     $04
002BB8 0F6BB8 -> $0002                RTIOSCSEL       EQU     $02
002BB8 0F6BB8 -> $0001                COPOSCSEL       EQU     $01
002BB8 0F6BB8 -> $003A                CPMUPLL         EQU     $003A
002BB8 0F6BB8 -> $0020                FM1             EQU     $20
002BB8 0F6BB8 -> $0010                FM0             EQU     $10
002BB8 0F6BB8 -> $003B                CPMURTI         EQU     $003B
002BB8 0F6BB8 -> $0080                RTDEC           EQU     $80
002BB8 0F6BB8 -> $0040                RTR6            EQU     $40
002BB8 0F6BB8 -> $0020                RTR5            EQU     $20
002BB8 0F6BB8 -> $0010                RTR4            EQU     $10
002BB8 0F6BB8 -> $0008                RTR3            EQU     $08
002BB8 0F6BB8 -> $0004                RTR2            EQU     $04
002BB8 0F6BB8 -> $0002                RTR1            EQU     $02
002BB8 0F6BB8 -> $0001                RTR0            EQU     $01
002BB8 0F6BB8 -> $003C                CPMUCOP         EQU     $003C
002BB8 0F6BB8 -> $0080                WCOP            EQU     $80
002BB8 0F6BB8 -> $0040                RSBCK           EQU     $40
002BB8 0F6BB8 -> $0020                WRTMASK         EQU     $20
002BB8 0F6BB8 -> $0004                CR2             EQU     $04
002BB8 0F6BB8 -> $0002                CR1             EQU     $02
002BB8 0F6BB8 -> $0001                CR0             EQU     $01
                                      ;$003D to $003E reserved
002BB8 0F6BB8 -> $003F                CPMUARMCOP      EQU     $003F
002BB8 0F6BB8 -> $003F                ARMCOP          EQU     $003F
002BB8 0F6BB8 -> $0040                TIOS            EQU     $0040
002BB8 0F6BB8 -> $0080                IOS7            EQU     $80
002BB8 0F6BB8 -> $0040                IOS6            EQU     $40
002BB8 0F6BB8 -> $0020                IOS5            EQU     $20
002BB8 0F6BB8 -> $0010                IOS4            EQU     $10
002BB8 0F6BB8 -> $0008                IOS3            EQU     $08
002BB8 0F6BB8 -> $0004                IOS2            EQU     $04
002BB8 0F6BB8 -> $0002                IOS1            EQU     $02
002BB8 0F6BB8 -> $0001                IOS0            EQU     $01
002BB8 0F6BB8 -> $0041                TCFORC          EQU     $0041
002BB8 0F6BB8 -> $0080                FOC7            EQU     $80
002BB8 0F6BB8 -> $0040                FOC6            EQU     $40
002BB8 0F6BB8 -> $0020                FOC5            EQU     $20
002BB8 0F6BB8 -> $0010                FOC4            EQU     $10
002BB8 0F6BB8 -> $0008                FOC3            EQU     $08
002BB8 0F6BB8 -> $0004                FOC2            EQU     $04
002BB8 0F6BB8 -> $0002                FOC1            EQU     $02
002BB8 0F6BB8 -> $0001                FOC0            EQU     $01
002BB8 0F6BB8 -> $0042                TOC7M           EQU     $0042
002BB8 0F6BB8 -> $0080                OC7M7           EQU     $80
002BB8 0F6BB8 -> $0040                OC7M6           EQU     $40
002BB8 0F6BB8 -> $0020                OC7M5           EQU     $20
002BB8 0F6BB8 -> $0010                OC7M4           EQU     $10
002BB8 0F6BB8 -> $0008                OC7M3           EQU     $08
002BB8 0F6BB8 -> $0004                OC7M2           EQU     $04
002BB8 0F6BB8 -> $0002                OC7M1           EQU     $02
002BB8 0F6BB8 -> $0001                OC7M0           EQU     $01
002BB8 0F6BB8 -> $0043                TOC7D           EQU     $0043
002BB8 0F6BB8 -> $0080                OC7D7           EQU     $80
002BB8 0F6BB8 -> $0040                OC7D6           EQU     $40
002BB8 0F6BB8 -> $0020                OC7D5           EQU     $20
002BB8 0F6BB8 -> $0010                OC7D4           EQU     $10
002BB8 0F6BB8 -> $0008                OC7D3           EQU     $08
002BB8 0F6BB8 -> $0004                OC7D2           EQU     $04
002BB8 0F6BB8 -> $0002                OC7D1           EQU     $02
002BB8 0F6BB8 -> $0001                OC7D0           EQU     $01
002BB8 0F6BB8 -> $0044                TCNT            EQU     $0044
002BB8 0F6BB8 -> $0046                TSCR1           EQU     $0046
002BB8 0F6BB8 -> $0080                TEN             EQU     $80
002BB8 0F6BB8 -> $0040                TSWAI           EQU     $40
002BB8 0F6BB8 -> $0020                TSFRZ           EQU     $20
002BB8 0F6BB8 -> $0010                TFFCA           EQU     $10
002BB8 0F6BB8 -> $0008                PRNT            EQU     $08
002BB8 0F6BB8 -> $0047                TTOV            EQU     $0047
002BB8 0F6BB8 -> $0080                TOV7            EQU     $80
002BB8 0F6BB8 -> $0040                TOV6            EQU     $40
002BB8 0F6BB8 -> $0020                TOV5            EQU     $20
002BB8 0F6BB8 -> $0010                TOV4            EQU     $10
002BB8 0F6BB8 -> $0008                TOV3            EQU     $08
002BB8 0F6BB8 -> $0004                TOV2            EQU     $04
002BB8 0F6BB8 -> $0002                TOV1            EQU     $02
002BB8 0F6BB8 -> $0001                TOV0            EQU     $01
002BB8 0F6BB8 -> $0048                TCTL1           EQU     $0048
002BB8 0F6BB8 -> $0080                OM7             EQU     $80
002BB8 0F6BB8 -> $0040                OL7             EQU     $40
002BB8 0F6BB8 -> $0020                OM6             EQU     $20
002BB8 0F6BB8 -> $0010                OL6             EQU     $10
002BB8 0F6BB8 -> $0008                OM5             EQU     $08
002BB8 0F6BB8 -> $0004                OL5             EQU     $04
002BB8 0F6BB8 -> $0002                OM4             EQU     $02
002BB8 0F6BB8 -> $0001                OL4             EQU     $01
002BB8 0F6BB8 -> $0049                TCTL2           EQU     $0049
002BB8 0F6BB8 -> $0080                OM3             EQU     $80
002BB8 0F6BB8 -> $0040                OL3             EQU     $40
002BB8 0F6BB8 -> $0020                OM2             EQU     $20
002BB8 0F6BB8 -> $0010                OL2             EQU     $10
002BB8 0F6BB8 -> $0008                OM1             EQU     $08
002BB8 0F6BB8 -> $0004                OL1             EQU     $04
002BB8 0F6BB8 -> $0002                OM0             EQU     $02
002BB8 0F6BB8 -> $0001                OL0             EQU     $01
002BB8 0F6BB8 -> $004A                TCTL3           EQU     $004A
002BB8 0F6BB8 -> $0080                EDG7B           EQU     $80
002BB8 0F6BB8 -> $0040                EDG7A           EQU     $40
002BB8 0F6BB8 -> $0020                EDG6B           EQU     $20
002BB8 0F6BB8 -> $0010                EDG6A           EQU     $10
002BB8 0F6BB8 -> $0008                EDG5B           EQU     $08
002BB8 0F6BB8 -> $0004                EDG5A           EQU     $04
002BB8 0F6BB8 -> $0002                EDG4B           EQU     $02
002BB8 0F6BB8 -> $0001                EDG4A           EQU     $01
002BB8 0F6BB8 -> $004B                TCTL4           EQU     $004B
002BB8 0F6BB8 -> $0080                EDG3B           EQU     $80
002BB8 0F6BB8 -> $0040                EDG3A           EQU     $40
002BB8 0F6BB8 -> $0020                EDG2B           EQU     $20
002BB8 0F6BB8 -> $0010                EDG2A           EQU     $10
002BB8 0F6BB8 -> $0008                EDG1B           EQU     $08
002BB8 0F6BB8 -> $0004                EDG1A           EQU     $04
002BB8 0F6BB8 -> $0002                EDG0B           EQU     $02
002BB8 0F6BB8 -> $0001                EDG0A           EQU     $01
002BB8 0F6BB8 -> $004C                TIE             EQU     $004C
002BB8 0F6BB8 -> $0080                C7I             EQU     $80
002BB8 0F6BB8 -> $0040                C6I             EQU     $40
002BB8 0F6BB8 -> $0020                C5I             EQU     $20
002BB8 0F6BB8 -> $0010                C4I             EQU     $10
002BB8 0F6BB8 -> $0008                C3I             EQU     $08
002BB8 0F6BB8 -> $0004                C2I             EQU     $04
002BB8 0F6BB8 -> $0002                C1I             EQU     $02
002BB8 0F6BB8 -> $0001                C0I             EQU     $01
002BB8 0F6BB8 -> $004D                TSCR2           EQU     $004D
002BB8 0F6BB8 -> $0080                TOI             EQU     $80
002BB8 0F6BB8 -> $0008                TCRE            EQU     $08
002BB8 0F6BB8 -> $0004                PR2             EQU     $04
002BB8 0F6BB8 -> $0002                PR1             EQU     $02
002BB8 0F6BB8 -> $0001                PR0             EQU     $01
002BB8 0F6BB8 -> $004E                TFLG1           EQU     $004E
002BB8 0F6BB8 -> $0080                C7F             EQU     $80
002BB8 0F6BB8 -> $0040                C6F             EQU     $40
002BB8 0F6BB8 -> $0020                C5F             EQU     $20
002BB8 0F6BB8 -> $0010                C4F             EQU     $10
002BB8 0F6BB8 -> $0008                C3F             EQU     $08
002BB8 0F6BB8 -> $0004                C2F             EQU     $04
002BB8 0F6BB8 -> $0002                C1F             EQU     $02
002BB8 0F6BB8 -> $0001                C0F             EQU     $01
002BB8 0F6BB8 -> $004F                TFLG2           EQU     $004F
002BB8 0F6BB8 -> $0080                TOF             EQU     $80
002BB8 0F6BB8 -> $0050                TC0             EQU     $0050
002BB8 0F6BB8 -> $0052                TC1             EQU     $0052
002BB8 0F6BB8 -> $0054                TC2             EQU     $0054
002BB8 0F6BB8 -> $0056                TC3             EQU     $0056
002BB8 0F6BB8 -> $0058                TC4             EQU     $0058
002BB8 0F6BB8 -> $005A                TC5             EQU     $005A
002BB8 0F6BB8 -> $005C                TC6             EQU     $005C
002BB8 0F6BB8 -> $005E                TC7             EQU     $005E
002BB8 0F6BB8 -> $0060                PACTL           EQU     $0060
002BB8 0F6BB8 -> $0040                PAEN            EQU     $40
002BB8 0F6BB8 -> $0020                PAMOD           EQU     $20
002BB8 0F6BB8 -> $0010                PEDGE           EQU     $10
002BB8 0F6BB8 -> $0008                CLK1            EQU     $08
002BB8 0F6BB8 -> $0004                CLK0            EQU     $04
002BB8 0F6BB8 -> $0002                PAOVI           EQU     $02
002BB8 0F6BB8 -> $0001                PAI             EQU     $01
002BB8 0F6BB8 -> $0061                PAFLG           EQU     $0061
002BB8 0F6BB8 -> $0002                PAOVF           EQU     $02
002BB8 0F6BB8 -> $0001                PAIF            EQU     $01
002BB8 0F6BB8 -> $0062                PACNT           EQU     $0062
                                      ;$0064 to $006B reserved
002BB8 0F6BB8 -> $006C                OCPD            EQU     $006C
002BB8 0F6BB8 -> $0080                OCPD7           EQU     $80
002BB8 0F6BB8 -> $0040                OCPD6           EQU     $40
002BB8 0F6BB8 -> $0020                OCPD5           EQU     $20
002BB8 0F6BB8 -> $0010                OCPD4           EQU     $10
002BB8 0F6BB8 -> $0008                OCPD3           EQU     $08
002BB8 0F6BB8 -> $0004                OCPD2           EQU     $04
002BB8 0F6BB8 -> $0002                OCPD1           EQU     $02
002BB8 0F6BB8 -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
002BB8 0F6BB8 -> $006E                PTPSR           EQU     $006E
002BB8 0F6BB8 -> $0080                PTPS7           EQU     $80
002BB8 0F6BB8 -> $0040                PTPS6           EQU     $40
002BB8 0F6BB8 -> $0020                PTPS5           EQU     $20
002BB8 0F6BB8 -> $0010                PTPS4           EQU     $10
002BB8 0F6BB8 -> $0008                PTPS3           EQU     $08
002BB8 0F6BB8 -> $0004                PTPS2           EQU     $04
002BB8 0F6BB8 -> $0002                PTPS1           EQU     $02
002BB8 0F6BB8 -> $0001                PTPS0           EQU     $01
                                      ;$006F reserved
002BB8 0F6BB8 -> $0070                ATDCTL0         EQU     $0070
002BB8 0F6BB8 -> $0008                WRAP3           EQU     $08
002BB8 0F6BB8 -> $0004                WRAP2           EQU     $04
002BB8 0F6BB8 -> $0002                WRAP1           EQU     $02
002BB8 0F6BB8 -> $0001                WRAP0           EQU     $01
002BB8 0F6BB8 -> $0071                ATDCTL1         EQU     $0071
002BB8 0F6BB8 -> $0080                ETRIGSEL        EQU     $80
002BB8 0F6BB8 -> $0040                SRES1           EQU     $40
002BB8 0F6BB8 -> $0020                SRES0           EQU     $20
002BB8 0F6BB8 -> $0010                DIS             EQU     $10
002BB8 0F6BB8 -> $0008                ETRIGCH3        EQU     $08
002BB8 0F6BB8 -> $0004                ETRIGCH2        EQU     $04
002BB8 0F6BB8 -> $0002                ETRIGCH1        EQU     $02
002BB8 0F6BB8 -> $0001                ETRIGCH0        EQU     $01
002BB8 0F6BB8 -> $0072                ATDCTL2         EQU     $0072
002BB8 0F6BB8 -> $0040                AFFC            EQU     $40
002BB8 0F6BB8 -> $0010                ETRIGLE         EQU     $10
002BB8 0F6BB8 -> $0008                ETRIGP          EQU     $08
002BB8 0F6BB8 -> $0004                ETRIGE          EQU     $04
002BB8 0F6BB8 -> $0002                ASCIE           EQU     $02
002BB8 0F6BB8 -> $0001                ASCIF           EQU     $01
002BB8 0F6BB8 -> $0073                ATDCTL3         EQU     $0073
002BB8 0F6BB8 -> $0080                DJM             EQU     $80
002BB8 0F6BB8 -> $0040                S8C             EQU     $40
002BB8 0F6BB8 -> $0020                S4C             EQU     $20
002BB8 0F6BB8 -> $0010                S2C             EQU     $10
002BB8 0F6BB8 -> $0008                S1C             EQU     $08
002BB8 0F6BB8 -> $0004                FIFO            EQU     $04
002BB8 0F6BB8 -> $0002                FRZ1            EQU     $02
002BB8 0F6BB8 -> $0001                FRZ0            EQU     $01
002BB8 0F6BB8 -> $0074                ATDCTL4         EQU     $0074
002BB8 0F6BB8 -> $0080                SMP2            EQU     $80
002BB8 0F6BB8 -> $0040                SMP1            EQU     $40
002BB8 0F6BB8 -> $0020                SMP0            EQU     $20
002BB8 0F6BB8 -> $0010                PRS4            EQU     $10
002BB8 0F6BB8 -> $0008                PRS3            EQU     $08
002BB8 0F6BB8 -> $0004                PRS2            EQU     $04
002BB8 0F6BB8 -> $0002                PRS1            EQU     $02
002BB8 0F6BB8 -> $0001                PRS0            EQU     $01
002BB8 0F6BB8 -> $0075                ATDCTL5         EQU     $0075
002BB8 0F6BB8 -> $0040                SC              EQU     $40
002BB8 0F6BB8 -> $0020                SCAN            EQU     $20
002BB8 0F6BB8 -> $0010                MULT            EQU     $10
002BB8 0F6BB8 -> $0008                CD              EQU     $08
002BB8 0F6BB8 -> $0004                CC              EQU     $04
002BB8 0F6BB8 -> $0002                CB              EQU     $02
002BB8 0F6BB8 -> $0001                CA              EQU     $01
002BB8 0F6BB8 -> $0076                ATDSTAT0        EQU     $0076
002BB8 0F6BB8 -> $0080                SCF             EQU     $80
002BB8 0F6BB8 -> $0020                ETORF           EQU     $20
002BB8 0F6BB8 -> $0010                FIFOR           EQU     $10
002BB8 0F6BB8 -> $0004                CC3             EQU     $04
002BB8 0F6BB8 -> $0004                CC2             EQU     $04
002BB8 0F6BB8 -> $0002                CC1             EQU     $02
002BB8 0F6BB8 -> $0001                CC0             EQU     $01
                                      ;$0077 reserved
002BB8 0F6BB8 -> $0078                ATDCMPEH        EQU     $0078
002BB8 0F6BB8 -> $0080                CMPE15          EQU     $80
002BB8 0F6BB8 -> $0040                CMPE14          EQU     $40
002BB8 0F6BB8 -> $0020                CMPE13          EQU     $20
002BB8 0F6BB8 -> $0010                CMPE12          EQU     $10
002BB8 0F6BB8 -> $0008                CMPE11          EQU     $08
002BB8 0F6BB8 -> $0004                CMPE10          EQU     $04
002BB8 0F6BB8 -> $0002                CMPE9           EQU     $02
002BB8 0F6BB8 -> $0001                CMPE8           EQU     $01
002BB8 0F6BB8 -> $0079                ATDCMPEL        EQU     $0079
002BB8 0F6BB8 -> $0080                CMPE7           EQU     $80
002BB8 0F6BB8 -> $0040                CMPE6           EQU     $40
002BB8 0F6BB8 -> $0020                CMPE5           EQU     $20
002BB8 0F6BB8 -> $0010                CMPE4           EQU     $10
002BB8 0F6BB8 -> $0008                CMPE3           EQU     $08
002BB8 0F6BB8 -> $0004                CMPE2           EQU     $04
002BB8 0F6BB8 -> $0002                CMPE1           EQU     $02
002BB8 0F6BB8 -> $0001                CMPE0           EQU     $01
002BB8 0F6BB8 -> $007A                ATDSTAT2H       EQU     $007A
002BB8 0F6BB8 -> $0080                CCF15           EQU     $80
002BB8 0F6BB8 -> $0040                CCF14           EQU     $40
002BB8 0F6BB8 -> $0020                CCF13           EQU     $20
002BB8 0F6BB8 -> $0010                CCF12           EQU     $10
002BB8 0F6BB8 -> $0008                CCF11           EQU     $08
002BB8 0F6BB8 -> $0004                CCF10           EQU     $04
002BB8 0F6BB8 -> $0002                CCF9            EQU     $02
002BB8 0F6BB8 -> $0001                CCF8            EQU     $01
002BB8 0F6BB8 -> $007B                ATDSTAT2L       EQU     $007B
002BB8 0F6BB8 -> $0080                CCF7            EQU     $80
002BB8 0F6BB8 -> $0040                CCF6            EQU     $40
002BB8 0F6BB8 -> $0020                CCF5            EQU     $20
002BB8 0F6BB8 -> $0010                CCF4            EQU     $10
002BB8 0F6BB8 -> $0008                CCF3            EQU     $08
002BB8 0F6BB8 -> $0004                CCF2            EQU     $04
002BB8 0F6BB8 -> $0002                CCF1            EQU     $02
002BB8 0F6BB8 -> $0001                CCF0            EQU     $01
002BB8 0F6BB8 -> $007C                ATDDIENH        EQU     $007C
002BB8 0F6BB8 -> $007C                ATDDIEN         EQU     $007C
002BB8 0F6BB8 -> $0080                IEN15           EQU     $80
002BB8 0F6BB8 -> $0040                IEN14           EQU     $40
002BB8 0F6BB8 -> $0020                IEN13           EQU     $20
002BB8 0F6BB8 -> $0010                IEN12           EQU     $10
002BB8 0F6BB8 -> $0008                IEN11           EQU     $08
002BB8 0F6BB8 -> $0004                IEN10           EQU     $04
002BB8 0F6BB8 -> $0002                IEN9            EQU     $02
002BB8 0F6BB8 -> $0001                IEN8            EQU     $01
002BB8 0F6BB8 -> $007D                ATDDIENL        EQU     $007D
002BB8 0F6BB8 -> $0080                IEN7            EQU     $80
002BB8 0F6BB8 -> $0040                IEN6            EQU     $40
002BB8 0F6BB8 -> $0020                IEN5            EQU     $20
002BB8 0F6BB8 -> $0010                IEN4            EQU     $10
002BB8 0F6BB8 -> $0008                IEN3            EQU     $08
002BB8 0F6BB8 -> $0004                IEN2            EQU     $04
002BB8 0F6BB8 -> $0002                IEN1            EQU     $02
002BB8 0F6BB8 -> $0001                IEN0            EQU     $01
002BB8 0F6BB8 -> $007E                ATDCMPHTH       EQU     $007E
002BB8 0F6BB8 -> $0080                CMPHT15         EQU     $80
002BB8 0F6BB8 -> $0040                CMPHT14         EQU     $40
002BB8 0F6BB8 -> $0020                CMPHT13         EQU     $20
002BB8 0F6BB8 -> $0010                CMPHT12         EQU     $10
002BB8 0F6BB8 -> $0008                CMPHT11         EQU     $08
002BB8 0F6BB8 -> $0004                CMPHT10         EQU     $04
002BB8 0F6BB8 -> $0002                CMPHT9          EQU     $02
002BB8 0F6BB8 -> $0001                CMPHT8          EQU     $01
002BB8 0F6BB8 -> $007F                ATDCMPHTL       EQU     $007F
002BB8 0F6BB8 -> $0001                CMPHT0          EQU     $01
002BB8 0F6BB8 -> $0002                CMPHT1          EQU     $02
002BB8 0F6BB8 -> $0004                CMPHT2          EQU     $04
002BB8 0F6BB8 -> $0008                CMPHT3          EQU     $08
002BB8 0F6BB8 -> $0010                CMPHT4          EQU     $10
002BB8 0F6BB8 -> $0020                CMPHT5          EQU     $20
002BB8 0F6BB8 -> $0040                CMPHT6          EQU     $40
002BB8 0F6BB8 -> $0080                CMPHT7          EQU     $80
002BB8 0F6BB8 -> $0080                ATDDR0          EQU     $0080
002BB8 0F6BB8 -> $0080                ATDDR0H         EQU     $0080
002BB8 0F6BB8 -> $0081                ATDDR0L         EQU     $0081
002BB8 0F6BB8 -> $0082                ATDDR1          EQU     $0082
002BB8 0F6BB8 -> $0082                ATDDR1H         EQU     $0082
002BB8 0F6BB8 -> $0083                ATDDR1L         EQU     $0083
002BB8 0F6BB8 -> $0084                ATDDR2          EQU     $0084
002BB8 0F6BB8 -> $0084                ATDDR2H         EQU     $0084
002BB8 0F6BB8 -> $0085                ATDDR2L         EQU     $0085
002BB8 0F6BB8 -> $0086                ATDDR3          EQU     $0086
002BB8 0F6BB8 -> $0086                ATDDR3H         EQU     $0086
002BB8 0F6BB8 -> $0087                ATDDR3L         EQU     $0087
002BB8 0F6BB8 -> $0088                ATDDR4          EQU     $0088
002BB8 0F6BB8 -> $0088                ATDDR4H         EQU     $0088
002BB8 0F6BB8 -> $0089                ATDDR4L         EQU     $0089
002BB8 0F6BB8 -> $008A                ATDDR5          EQU     $008A
002BB8 0F6BB8 -> $008A                ATDDR5H         EQU     $008A
002BB8 0F6BB8 -> $008B                ATDDR5L         EQU     $008B
002BB8 0F6BB8 -> $008C                ATDDR6          EQU     $008C
002BB8 0F6BB8 -> $008C                ATDDR6H         EQU     $008C
002BB8 0F6BB8 -> $008D                ATDDR6L         EQU     $008D
002BB8 0F6BB8 -> $008E                ATDDR7          EQU     $008E
002BB8 0F6BB8 -> $008E                ATDDR7H         EQU     $008E
002BB8 0F6BB8 -> $008F                ATDDR7L         EQU     $008F
002BB8 0F6BB8 -> $0090                ATDDR8          EQU     $0090
002BB8 0F6BB8 -> $0090                ATDDR8H         EQU     $0090
002BB8 0F6BB8 -> $0091                ATDDR8L         EQU     $0091
002BB8 0F6BB8 -> $0092                ATDDR9          EQU     $0092
002BB8 0F6BB8 -> $0092                ATDDR9H         EQU     $0092
002BB8 0F6BB8 -> $0093                ATDDR9L         EQU     $0093
002BB8 0F6BB8 -> $0093                ATDDR10         EQU     $0093
002BB8 0F6BB8 -> $0093                ATDDR10H        EQU     $0093
002BB8 0F6BB8 -> $0095                ATDDR10L        EQU     $0095
002BB8 0F6BB8 -> $0096                ATDDR11         EQU     $0096
002BB8 0F6BB8 -> $0096                ATDDR11H        EQU     $0096
002BB8 0F6BB8 -> $0097                ATDDR11L        EQU     $0097
002BB8 0F6BB8 -> $0098                ATDDR12         EQU     $0098
002BB8 0F6BB8 -> $0098                ATDDR12H        EQU     $0098
002BB8 0F6BB8 -> $0099                ATDDR12L        EQU     $0099
002BB8 0F6BB8 -> $009A                ATDDR13         EQU     $009A
002BB8 0F6BB8 -> $009A                ATDDR13H        EQU     $009A
002BB8 0F6BB8 -> $009B                ATDDR13L        EQU     $009B
002BB8 0F6BB8 -> $009C                ATDDR14         EQU     $009C
002BB8 0F6BB8 -> $009C                ATDDR14H        EQU     $009C
002BB8 0F6BB8 -> $009D                ATDDR14L        EQU     $009D
002BB8 0F6BB8 -> $009E                ATDDR15         EQU     $009E
002BB8 0F6BB8 -> $009E                ATDDR15H        EQU     $009E
002BB8 0F6BB8 -> $009F                ATDDR15L        EQU     $009F
002BB8 0F6BB8 -> $00A0                PWME            EQU     $00A0
002BB8 0F6BB8 -> $0080                PWME7           EQU     $80
002BB8 0F6BB8 -> $0040                PWME6           EQU     $40
002BB8 0F6BB8 -> $0020                PWME5           EQU     $20
002BB8 0F6BB8 -> $0010                PWME4           EQU     $10
002BB8 0F6BB8 -> $0008                PWME3           EQU     $08
002BB8 0F6BB8 -> $0004                PWME2           EQU     $04
002BB8 0F6BB8 -> $0002                PWME1           EQU     $02
002BB8 0F6BB8 -> $0001                PWME0           EQU     $01
002BB8 0F6BB8 -> $00A1                PWMPOL          EQU     $00A1
002BB8 0F6BB8 -> $0080                PPOL7           EQU     $80
002BB8 0F6BB8 -> $0040                PPOL6           EQU     $40
002BB8 0F6BB8 -> $0020                PPOL5           EQU     $20
002BB8 0F6BB8 -> $0010                PPOL4           EQU     $10
002BB8 0F6BB8 -> $0008                PPOL3           EQU     $08
002BB8 0F6BB8 -> $0004                PPOL2           EQU     $04
002BB8 0F6BB8 -> $0002                PPOL1           EQU     $02
002BB8 0F6BB8 -> $0001                PPOL0           EQU     $01
002BB8 0F6BB8 -> $00A2                PWMCLK          EQU     $00A2
002BB8 0F6BB8 -> $0080                PCLK7           EQU     $80
002BB8 0F6BB8 -> $0040                PCLK6           EQU     $40
002BB8 0F6BB8 -> $0020                PCLK5           EQU     $20
002BB8 0F6BB8 -> $0010                PCLK4           EQU     $10
002BB8 0F6BB8 -> $0008                PCLK3           EQU     $08
002BB8 0F6BB8 -> $0004                PCLK2           EQU     $04
002BB8 0F6BB8 -> $0002                PCLK1           EQU     $02
002BB8 0F6BB8 -> $0001                PCLK0           EQU     $01
002BB8 0F6BB8 -> $00A3                PWMPRCLK        EQU     $00A3
002BB8 0F6BB8 -> $0040                PCKB2           EQU     $40
002BB8 0F6BB8 -> $0020                PCKB1           EQU     $20
002BB8 0F6BB8 -> $0010                PCKB0           EQU     $10
002BB8 0F6BB8 -> $0004                PCKA2           EQU     $04
002BB8 0F6BB8 -> $0002                PCKA1           EQU     $02
002BB8 0F6BB8 -> $0001                PCKA0           EQU     $01
002BB8 0F6BB8 -> $00A4                PWMCAE          EQU     $00A4
002BB8 0F6BB8 -> $0080                CAE7            EQU     $80
002BB8 0F6BB8 -> $0040                CAE6            EQU     $40
002BB8 0F6BB8 -> $0020                CAE5            EQU     $20
002BB8 0F6BB8 -> $0010                CAE4            EQU     $10
002BB8 0F6BB8 -> $0008                CAE3            EQU     $08
002BB8 0F6BB8 -> $0004                CAE2            EQU     $04
002BB8 0F6BB8 -> $0002                CAE1            EQU     $02
002BB8 0F6BB8 -> $0001                CAE0            EQU     $01
002BB8 0F6BB8 -> $00A5                PWMCTL          EQU     $00A5
002BB8 0F6BB8 -> $0080                CON67           EQU     $80
002BB8 0F6BB8 -> $0040                CON45           EQU     $40
002BB8 0F6BB8 -> $0020                CON23           EQU     $20
002BB8 0F6BB8 -> $0010                CON01           EQU     $10
002BB8 0F6BB8 -> $0008                PSWAI           EQU     $08
002BB8 0F6BB8 -> $0004                PFRZ            EQU     $04
002BB8 0F6BB8 -> $00A6                PWMCLKAB        EQU     $00A6
002BB8 0F6BB8 -> $0080                PCLKAB7         EQU     $80
002BB8 0F6BB8 -> $0040                PCLKAB6         EQU     $40
002BB8 0F6BB8 -> $0020                PCLKAB5         EQU     $20
002BB8 0F6BB8 -> $0010                PCLKAB4         EQU     $10
002BB8 0F6BB8 -> $0008                PCLKAB3         EQU     $08
002BB8 0F6BB8 -> $0004                PCLKAB2         EQU     $04
002BB8 0F6BB8 -> $0002                PCLKAB1         EQU     $02
002BB8 0F6BB8 -> $0001                PCLKAB0         EQU     $01
                                      ;$00A7 reserved
002BB8 0F6BB8 -> $00A8                PWMSCNTA        EQU     $00A8
002BB8 0F6BB8 -> $00A9                PWMSCNTB        EQU     $00A9
                                      ;$00AA to $00AB reserved
002BB8 0F6BB8 -> $00AC                PWMCNT0         EQU     $00AC
002BB8 0F6BB8 -> $00AD                PWMCNT1         EQU     $00AD
002BB8 0F6BB8 -> $00AE                PWMCNT2         EQU     $00AE
002BB8 0F6BB8 -> $00AF                PWMCNT3         EQU     $00AF
002BB8 0F6BB8 -> $00B0                PWMCNT4         EQU     $00B0
002BB8 0F6BB8 -> $00B1                PWMCNT5         EQU     $00B1
002BB8 0F6BB8 -> $00B2                PWMCNT6         EQU     $00B2
002BB8 0F6BB8 -> $00B3                PWMCNT7         EQU     $00B3
002BB8 0F6BB8 -> $00B4                PWMPER0         EQU     $00B4
002BB8 0F6BB8 -> $00B5                PWMPER1         EQU     $00B5
002BB8 0F6BB8 -> $00B6                PWMPER2         EQU     $00B6
002BB8 0F6BB8 -> $00B7                PWMPER3         EQU     $00B7
002BB8 0F6BB8 -> $00B8                PWMPER4         EQU     $00B8
002BB8 0F6BB8 -> $00B9                PWMPER5         EQU     $00B9
002BB8 0F6BB8 -> $00BA                PWMPER6         EQU     $00BA
002BB8 0F6BB8 -> $00BB                PWMPER7         EQU     $00BB
002BB8 0F6BB8 -> $00BC                PWMDTY0         EQU     $00BC
002BB8 0F6BB8 -> $00BD                PWMDTY1         EQU     $00BD
002BB8 0F6BB8 -> $00BE                PWMDTY2         EQU     $00BE
002BB8 0F6BB8 -> $00BF                PWMDTY3         EQU     $00BF
002BB8 0F6BB8 -> $00C0                PWMDTY4         EQU     $00C0
002BB8 0F6BB8 -> $00C1                PWMDTY5         EQU     $00C1
002BB8 0F6BB8 -> $00C2                PWMDTY6         EQU     $00C2
002BB8 0F6BB8 -> $00C3                PWMDTY7         EQU     $00C3
                                      ;$00C4 to $00C7 reserved
002BB8 0F6BB8 -> $00C8                SCIBDH          EQU     $00C8
002BB8 0F6BB8 -> $00C8                SCI0BDH         EQU     $00C8
002BB8 0F6BB8 -> $0080                IREN            EQU     $80
002BB8 0F6BB8 -> $0040                TNP1            EQU     $40
002BB8 0F6BB8 -> $0020                TNP0            EQU     $20
002BB8 0F6BB8 -> $0010                SBR12           EQU     $10
002BB8 0F6BB8 -> $0008                SBR11           EQU     $08
002BB8 0F6BB8 -> $0004                SBR10           EQU     $04
002BB8 0F6BB8 -> $0002                SBR9            EQU     $02
002BB8 0F6BB8 -> $0001                SBR8            EQU     $01
002BB8 0F6BB8 -> $00C9                SCI0ASR1        EQU     $00C9
002BB8 0F6BB8 -> $0080                RXEDGIF         EQU     $80
002BB8 0F6BB8 -> $0004                BERRV           EQU     $04
002BB8 0F6BB8 -> $0002                BERRIF          EQU     $02
002BB8 0F6BB8 -> $0001                BKDIF           EQU     $01
002BB8 0F6BB8 -> $00C9                SCIBDL          EQU     $00C9
002BB8 0F6BB8 -> $00C9                SCI0BDL         EQU     $00C9
002BB8 0F6BB8 -> $0080                SBR7            EQU     $80
002BB8 0F6BB8 -> $0040                SBR6            EQU     $40
002BB8 0F6BB8 -> $0020                SBR5            EQU     $20
002BB8 0F6BB8 -> $0010                SBR4            EQU     $10
002BB8 0F6BB8 -> $0008                SBR3            EQU     $08
002BB8 0F6BB8 -> $0004                SBR2            EQU     $04
002BB8 0F6BB8 -> $0002                SBR1            EQU     $02
002BB8 0F6BB8 -> $0001                SBR0            EQU     $01
002BB8 0F6BB8 -> $00C9                SCI0ACR1        EQU     $00C9
002BB8 0F6BB8 -> $0080                RXEDGIE         EQU     $80
002BB8 0F6BB8 -> $0002                BERRIE          EQU     $02
002BB8 0F6BB8 -> $0001                BKDIE           EQU     $01
002BB8 0F6BB8 -> $00CA                SCICR1          EQU     $00CA
002BB8 0F6BB8 -> $00CA                SCI0CR1         EQU     $00CA
002BB8 0F6BB8 -> $0080                LOOPS           EQU     $80
002BB8 0F6BB8 -> $0040                SCISWAI         EQU     $40
002BB8 0F6BB8 -> $0020                RSRC            EQU     $20
002BB8 0F6BB8 -> $0010                M               EQU     $10
002BB8 0F6BB8 -> $0008                WAKE            EQU     $08
002BB8 0F6BB8 -> $0004                ILT             EQU     $04
002BB8 0F6BB8 -> $0002                PE              EQU     $02
002BB8 0F6BB8 -> $0001                PT              EQU     $01
002BB8 0F6BB8 -> $00CA                SCI0ACR2        EQU     $00CA
002BB8 0F6BB8 -> $0004                BERRM1          EQU     $04
002BB8 0F6BB8 -> $0002                BERRM0          EQU     $02
002BB8 0F6BB8 -> $0001                BKDFE           EQU     $01
002BB8 0F6BB8 -> $00CB                SCICR2          EQU     $00CB
002BB8 0F6BB8 -> $00CB                SCI0CR2         EQU     $00CB
002BB8 0F6BB8 -> $0080                TXIE            EQU     $80
002BB8 0F6BB8 -> $0040                TCIE            EQU     $40
002BB8 0F6BB8 -> $0020                RIE             EQU     $20
002BB8 0F6BB8 -> $0010                ILIE            EQU     $10
002BB8 0F6BB8 -> $0008                TE              EQU     $08
002BB8 0F6BB8 -> $0004                RE              EQU     $04
002BB8 0F6BB8 -> $0002                RWU             EQU     $02
002BB8 0F6BB8 -> $0001                SBK             EQU     $01
002BB8 0F6BB8 -> $00CC                SCISR1          EQU     $00CC
002BB8 0F6BB8 -> $00CC                SCI0SR1         EQU     $00CC
002BB8 0F6BB8 -> $0080                TDRE            EQU     $80
002BB8 0F6BB8 -> $0040                TC              EQU     $40
002BB8 0F6BB8 -> $0020                RDRFF           EQU     $20
002BB8 0F6BB8 -> $0010                IDLE            EQU     $10
002BB8 0F6BB8 -> $0008                OR              EQU     $08
002BB8 0F6BB8 -> $0004                NF              EQU     $04
002BB8 0F6BB8 -> $0002                FE              EQU     $02
002BB8 0F6BB8 -> $0001                PF              EQU     $01
002BB8 0F6BB8 -> $00CD                SCISR2          EQU     $00CD
002BB8 0F6BB8 -> $00CD                SCI0SR2         EQU     $00CD
002BB8 0F6BB8 -> $0008                AMAP            EQU     $08
002BB8 0F6BB8 -> $0010                TXPOL           EQU     $10
002BB8 0F6BB8 -> $0008                RXPOL           EQU     $08
002BB8 0F6BB8 -> $0004                BRK13           EQU     $04
002BB8 0F6BB8 -> $0002                TXDIR           EQU     $02
002BB8 0F6BB8 -> $0001                RAF             EQU     $01
002BB8 0F6BB8 -> $00CE                SCIDRH          EQU     $00CE
002BB8 0F6BB8 -> $00CE                SCI0DRH         EQU     $00CE
002BB8 0F6BB8 -> $0080                R8              EQU     $80
002BB8 0F6BB8 -> $0040                T8              EQU     $40
002BB8 0F6BB8 -> $00CF                SCIDRL          EQU     $00CF
002BB8 0F6BB8 -> $00CF                SCI0DRL         EQU     $00CF
002BB8 0F6BB8 -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
002BB8 0F6BB8 -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
002BB8 0F6BB8 -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
002BB8 0F6BB8 -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
002BB8 0F6BB8 -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
002BB8 0F6BB8 -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
002BB8 0F6BB8 -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
002BB8 0F6BB8 -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
002BB8 0F6BB8 -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
002BB8 0F6BB8 -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
002BB8 0F6BB8 -> $00D7                SCI1DRL         EQU     $00D7
002BB8 0F6BB8 -> $00D8                SPICR1          EQU     $00D8
002BB8 0F6BB8 -> $00D8                SPI0CR1         EQU     $00D8
002BB8 0F6BB8 -> $0080                SPIE            EQU     $80
002BB8 0F6BB8 -> $0040                SPE             EQU     $40
002BB8 0F6BB8 -> $0020                SPTIE           EQU     $20
002BB8 0F6BB8 -> $0010                MSTR            EQU     $10
002BB8 0F6BB8 -> $0008                CPOL            EQU     $08
002BB8 0F6BB8 -> $0004                CPHA            EQU     $04
002BB8 0F6BB8 -> $0002                SSOE            EQU     $02
002BB8 0F6BB8 -> $0001                LSBFE           EQU     $01
002BB8 0F6BB8 -> $00D9                SPICR2          EQU     $00D9
002BB8 0F6BB8 -> $00D9                SPI0CR2         EQU     $00D9
002BB8 0F6BB8 -> $0040                XFRW            EQU     $40
002BB8 0F6BB8 -> $0010                MODFEN          EQU     $10
002BB8 0F6BB8 -> $0008                BIDIROE         EQU     $08
002BB8 0F6BB8 -> $0002                SPISWAI         EQU     $02
002BB8 0F6BB8 -> $0001                SPC0            EQU     $01
002BB8 0F6BB8 -> $00DA                SPIBR           EQU     $00DA
002BB8 0F6BB8 -> $00DA                SPI0BR          EQU     $00DA
002BB8 0F6BB8 -> $0040                SPPR2           EQU     $40
002BB8 0F6BB8 -> $0020                SPPR1           EQU     $20
002BB8 0F6BB8 -> $0010                SPPR0           EQU     $10
002BB8 0F6BB8 -> $0004                SPR2            EQU     $04
002BB8 0F6BB8 -> $0002                SPR1            EQU     $02
002BB8 0F6BB8 -> $0001                SPR0            EQU     $01
002BB8 0F6BB8 -> $00DB                SPISR           EQU     $00DB
002BB8 0F6BB8 -> $00DB                SPI0SR          EQU     $00DB
002BB8 0F6BB8 -> $0080                SPIF            EQU     $80
002BB8 0F6BB8 -> $0020                SPTEF           EQU     $20
002BB8 0F6BB8 -> $0010                MODF            EQU     $10
002BB8 0F6BB8 -> $00DC                SPIDRH          EQU     $00DC
002BB8 0F6BB8 -> $00DC                SPI0DRH         EQU     $00DC
002BB8 0F6BB8 -> $00DD                SPIDRL          EQU     $00DD
002BB8 0F6BB8 -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00E7 reserved
002BB8 0F6BB8 -> $00E8                SCI2BDH         EQU     $00E8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
002BB8 0F6BB8 -> $00E8                SCI2ASR1        EQU     $00E8
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
002BB8 0F6BB8 -> $00E9                SCI2BDL         EQU     $00E9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
002BB8 0F6BB8 -> $00E9                SCI2ACR1        EQU     $00E9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
002BB8 0F6BB8 -> $00EA                SCI2CR1         EQU     $00EA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
002BB8 0F6BB8 -> $00EA                SCI2ACR2        EQU     $00EA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
002BB8 0F6BB8 -> $00EB                SCI2CR2         EQU     $00EB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
002BB8 0F6BB8 -> $00EC                SCI2SR1         EQU     $00EC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
002BB8 0F6BB8 -> $00ED                SCI2SR2         EQU     $00ED
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
002BB8 0F6BB8 -> $00EE                SCI2DRH         EQU     $00EE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
002BB8 0F6BB8 -> $00EF                SCI2DRL         EQU     $00EF
002BB8 0F6BB8 -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
002BB8 0F6BB8 -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
002BB8 0F6BB8 -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
002BB8 0F6BB8 -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
002BB8 0F6BB8 -> $00F4                SPI1DRH         EQU     $00F4
002BB8 0F6BB8 -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
002BB8 0F6BB8 -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
002BB8 0F6BB8 -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
002BB8 0F6BB8 -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
002BB8 0F6BB8 -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
002BB8 0F6BB8 -> $00FC                SPI2DRH         EQU     $00FC
002BB8 0F6BB8 -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
002BB8 0F6BB8 -> $0100                FCLKDIV         EQU     $0100
002BB8 0F6BB8 -> $0080                FDIVLD          EQU     $80
002BB8 0F6BB8 -> $0040                FDIV6           EQU     $40
002BB8 0F6BB8 -> $0020                FDIV5           EQU     $20
002BB8 0F6BB8 -> $0010                FDIV4           EQU     $10
002BB8 0F6BB8 -> $0008                FDIV3           EQU     $08
002BB8 0F6BB8 -> $0004                FDIV2           EQU     $04
002BB8 0F6BB8 -> $0002                FDIV1           EQU     $02
002BB8 0F6BB8 -> $0001                FDIV0           EQU     $01
002BB8 0F6BB8 -> $0101                FSEC            EQU     $0101
002BB8 0F6BB8 -> $0080                KEYEN1          EQU     $80
002BB8 0F6BB8 -> $0040                KEYEN2          EQU     $40
002BB8 0F6BB8 -> $0020                RNV5            EQU     $20
002BB8 0F6BB8 -> $0010                RNV4            EQU     $10
002BB8 0F6BB8 -> $0008                RNV3            EQU     $08
002BB8 0F6BB8 -> $0004                RNV2            EQU     $04
002BB8 0F6BB8 -> $0002                SEC1            EQU     $02
002BB8 0F6BB8 -> $0001                SEC0            EQU     $01
002BB8 0F6BB8 -> $0102                FCCOBIX         EQU     $0102
002BB8 0F6BB8 -> $0004                CCOBIX2         EQU     $04
002BB8 0F6BB8 -> $0002                CCOBIX1         EQU     $02
002BB8 0F6BB8 -> $0001                CCOBIX0         EQU     $01
                                      ;$0103 reserved
002BB8 0F6BB8 -> $0104                FCNFG           EQU     $0104
002BB8 0F6BB8 -> $0080                CCIE            EQU     $80
002BB8 0F6BB8 -> $0010                IGNSF           EQU     $10
002BB8 0F6BB8 -> $0002                FDFD            EQU     $02
002BB8 0F6BB8 -> $0001                FSFD            EQU     $01
002BB8 0F6BB8 -> $0105                FERCNFG         EQU     $0105
002BB8 0F6BB8 -> $0002                DFDIE           EQU     $02
002BB8 0F6BB8 -> $0001                SFDIE           EQU     $01
002BB8 0F6BB8 -> $0106                FSTAT           EQU     $0106
002BB8 0F6BB8 -> $0080                CCIF            EQU     $80
002BB8 0F6BB8 -> $0020                ACCERR          EQU     $20
002BB8 0F6BB8 -> $0010                FPVIOL          EQU     $10
002BB8 0F6BB8 -> $0008                MGBUSY          EQU     $08
002BB8 0F6BB8 -> $0002                MGSTAT1         EQU     $02
002BB8 0F6BB8 -> $0001                MGSTAT0         EQU     $01
002BB8 0F6BB8 -> $0107                FERSTAT         EQU     $0107
002BB8 0F6BB8 -> $0002                DFDIF           EQU     $02
002BB8 0F6BB8 -> $0001                SFDIF           EQU     $01
002BB8 0F6BB8 -> $0108                FPROT           EQU     $0108
002BB8 0F6BB8 -> $0080                FPOPEN          EQU     $80
002BB8 0F6BB8 -> $0040                RNV6            EQU     $40
002BB8 0F6BB8 -> $0020                FPHDIS          EQU     $20
002BB8 0F6BB8 -> $0010                FPHS1           EQU     $10
002BB8 0F6BB8 -> $0008                FPHS0           EQU     $08
002BB8 0F6BB8 -> $0004                FPLDIS          EQU     $04
002BB8 0F6BB8 -> $0002                FPLS1           EQU     $02
002BB8 0F6BB8 -> $0001                FPLS0           EQU     $01
002BB8 0F6BB8 -> $0109                DPROT           EQU     $0109
002BB8 0F6BB8 -> $0109                EPROT           EQU     $0109
002BB8 0F6BB8 -> $0080                DPOPEN          EQU     $80
002BB8 0F6BB8 -> $0080                EPOPEN          EQU     $80
002BB8 0F6BB8 -> $0008                EPDIS           EQU     $08
002BB8 0F6BB8 -> $0004                EPS2            EQU     $04
002BB8 0F6BB8 -> $0002                EPS1            EQU     $02
002BB8 0F6BB8 -> $0001                EPS0            EQU     $01
002BB8 0F6BB8 -> $010A                FCCOBHI         EQU     $010A
002BB8 0F6BB8 -> $0080                CCOB15          EQU     $80
002BB8 0F6BB8 -> $0040                CCOB14          EQU     $40
002BB8 0F6BB8 -> $0020                CCOB13          EQU     $20
002BB8 0F6BB8 -> $0010                CCOB12          EQU     $10
002BB8 0F6BB8 -> $0008                CCOB11          EQU     $08
002BB8 0F6BB8 -> $0004                CCOB10          EQU     $04
002BB8 0F6BB8 -> $0002                CCOB9           EQU     $02
002BB8 0F6BB8 -> $0001                CCOB8           EQU     $01
002BB8 0F6BB8 -> $010B                FCCOBLO         EQU     $010B
002BB8 0F6BB8 -> $0080                CCOB7           EQU     $80
002BB8 0F6BB8 -> $0040                CCOB6           EQU     $40
002BB8 0F6BB8 -> $0020                CCOB5           EQU     $20
002BB8 0F6BB8 -> $0010                CCOB4           EQU     $10
002BB8 0F6BB8 -> $0008                CCOB3           EQU     $08
002BB8 0F6BB8 -> $0004                CCOB2           EQU     $04
002BB8 0F6BB8 -> $0002                CCOB1           EQU     $02
002BB8 0F6BB8 -> $0001                CCOB0           EQU     $01
                                      ;$010C to $010F reserved
002BB8 0F6BB8 -> $0110                FOPT            EQU     $0110
002BB8 0F6BB8 -> $0080                NV7             EQU     $80
002BB8 0F6BB8 -> $0040                NV6             EQU     $40
002BB8 0F6BB8 -> $0020                NV5             EQU     $20
002BB8 0F6BB8 -> $0010                NV4             EQU     $10
002BB8 0F6BB8 -> $0008                NV3             EQU     $08
002BB8 0F6BB8 -> $0004                NV2             EQU     $04
002BB8 0F6BB8 -> $0002                NV1             EQU     $02
002BB8 0F6BB8 -> $0001                NV0             EQU     $01
                                      ;$0111 to $011F reserved
002BB8 0F6BB8 -> $0120                IVBR            EQU     $0120
                                      ;$0121 to $013F reserved
002BB8 0F6BB8 -> $0140                CANCTL0         EQU     $0140
002BB8 0F6BB8 -> $0080                RXFRM           EQU     $80
002BB8 0F6BB8 -> $0040                RXACT           EQU     $40
002BB8 0F6BB8 -> $0020                CSWAI           EQU     $20
002BB8 0F6BB8 -> $0010                SYNCH           EQU     $10
002BB8 0F6BB8 -> $0008                TIMEN           EQU     $08 ;RENAMED
002BB8 0F6BB8 -> $0004                WUPE            EQU     $04
002BB8 0F6BB8 -> $0002                SLPRQ           EQU     $02
002BB8 0F6BB8 -> $0001                INITRQ          EQU     $01
002BB8 0F6BB8 -> $0141                CANCTL1         EQU     $0141
002BB8 0F6BB8 -> $0080                CANE            EQU     $80
002BB8 0F6BB8 -> $0040                CLKSRC          EQU     $40
002BB8 0F6BB8 -> $0020                LOOPB           EQU     $20
002BB8 0F6BB8 -> $0010                LISTEN          EQU     $10
002BB8 0F6BB8 -> $0004                WUPM            EQU     $04
002BB8 0F6BB8 -> $0002                SLPAK           EQU     $02
002BB8 0F6BB8 -> $0001                INITAK          EQU     $01
002BB8 0F6BB8 -> $0142                CANBTR0         EQU     $0142
002BB8 0F6BB8 -> $0080                SJW1            EQU     $80
002BB8 0F6BB8 -> $0040                SJW0            EQU     $40
002BB8 0F6BB8 -> $0020                BRP5            EQU     $20
002BB8 0F6BB8 -> $0010                BRP4            EQU     $10
002BB8 0F6BB8 -> $0008                BRP3            EQU     $08
002BB8 0F6BB8 -> $0004                BRP2            EQU     $04
002BB8 0F6BB8 -> $0002                BRP1            EQU     $02
002BB8 0F6BB8 -> $0001                BRP0            EQU     $01
002BB8 0F6BB8 -> $0143                CANBTR1         EQU     $0143
002BB8 0F6BB8 -> $0080                SAMP            EQU     $80
002BB8 0F6BB8 -> $0040                TSEG22          EQU     $40
002BB8 0F6BB8 -> $0020                TSEG21          EQU     $20
002BB8 0F6BB8 -> $0010                TSEG20          EQU     $10
002BB8 0F6BB8 -> $0008                TSEG13          EQU     $08
002BB8 0F6BB8 -> $0004                TSEG12          EQU     $04
002BB8 0F6BB8 -> $0002                TSEG11          EQU     $02
002BB8 0F6BB8 -> $0001                TESG10          EQU     $01
002BB8 0F6BB8 -> $0144                CANRFLG         EQU     $0144
002BB8 0F6BB8 -> $0080                WUPIF           EQU     $80
002BB8 0F6BB8 -> $0040                CSCIF           EQU     $40
002BB8 0F6BB8 -> $0020                RSTAT1          EQU     $20
002BB8 0F6BB8 -> $0010                RSTAT0          EQU     $10
002BB8 0F6BB8 -> $0008                TSTAT1          EQU     $08
002BB8 0F6BB8 -> $0004                TSTAT0          EQU     $04
002BB8 0F6BB8 -> $0002                OVRIF           EQU     $02
002BB8 0F6BB8 -> $0001                RXF             EQU     $01
002BB8 0F6BB8 -> $0145                CANRIER         EQU     $0145
002BB8 0F6BB8 -> $0080                WUPIE           EQU     $80
002BB8 0F6BB8 -> $0040                CSCIE           EQU     $40
002BB8 0F6BB8 -> $0020                RSTATE1         EQU     $20
002BB8 0F6BB8 -> $0010                RSTATE0         EQU     $10
002BB8 0F6BB8 -> $0008                TSTATE1         EQU     $08
002BB8 0F6BB8 -> $0004                TSTATE0         EQU     $04
002BB8 0F6BB8 -> $0002                OVRIE           EQU     $02
002BB8 0F6BB8 -> $0001                RXFIE           EQU     $01
002BB8 0F6BB8 -> $0146                CANTFLG         EQU     $0146
002BB8 0F6BB8 -> $0004                TXE2            EQU     $04
002BB8 0F6BB8 -> $0002                TXE1            EQU     $02
002BB8 0F6BB8 -> $0001                TXE0            EQU     $01
002BB8 0F6BB8 -> $0147                CANTIER         EQU     $0147
002BB8 0F6BB8 -> $0004                TXEIE2          EQU     $04
002BB8 0F6BB8 -> $0002                TXEIE1          EQU     $02
002BB8 0F6BB8 -> $0001                TXEIE0          EQU     $01
002BB8 0F6BB8 -> $0148                CANTARQ         EQU     $0148
002BB8 0F6BB8 -> $0004                ABTRQ2          EQU     $04
002BB8 0F6BB8 -> $0002                ABTRQ1          EQU     $02
002BB8 0F6BB8 -> $0001                ABTRQ0          EQU     $01
002BB8 0F6BB8 -> $0149                CANTAAK         EQU     $0149
002BB8 0F6BB8 -> $0004                ABTAK2          EQU     $04
002BB8 0F6BB8 -> $0002                ABTAK1          EQU     $02
002BB8 0F6BB8 -> $0001                ABTAK0          EQU     $01
002BB8 0F6BB8 -> $014A                CANTBSEL        EQU     $014A
002BB8 0F6BB8 -> $0004                TX2             EQU     $04
002BB8 0F6BB8 -> $0002                TX1             EQU     $02
002BB8 0F6BB8 -> $0001                TX0             EQU     $01
002BB8 0F6BB8 -> $014B                CANIDAC         EQU     $014B
002BB8 0F6BB8 -> $0020                IDAM1           EQU     $20
002BB8 0F6BB8 -> $0010                IDAM0           EQU     $10
002BB8 0F6BB8 -> $0004                IDHIT2          EQU     $04
002BB8 0F6BB8 -> $0002                IDHIT1          EQU     $02
002BB8 0F6BB8 -> $0001                IDHIT0          EQU     $01
                                      ; $14c and $14d reserved
002BB8 0F6BB8 -> $014E                CANRXERR        EQU     $014E
002BB8 0F6BB8 -> $014F                CANTXERR        EQU     $014F
002BB8 0F6BB8 -> $0150                CANIDAR0        EQU     $0150
002BB8 0F6BB8 -> $0151                CANIDAR1        EQU     $0151
002BB8 0F6BB8 -> $0152                CANIDAR2        EQU     $0152
002BB8 0F6BB8 -> $0153                CANIDAR3        EQU     $0153
002BB8 0F6BB8 -> $0154                CANIDMR0        EQU     $0154
002BB8 0F6BB8 -> $0155                CANIDMR1        EQU     $0155
002BB8 0F6BB8 -> $0156                CANIDMR2        EQU     $0156
002BB8 0F6BB8 -> $0157                CANIDMR3        EQU     $0157
002BB8 0F6BB8 -> $0158                CANIDAR4        EQU     $0158
002BB8 0F6BB8 -> $0159                CANIDAR5        EQU     $0159
002BB8 0F6BB8 -> $015A                CANIDAR6        EQU     $015A
002BB8 0F6BB8 -> $015B                CANIDAR7        EQU     $015B
002BB8 0F6BB8 -> $015C                CANIDMR4        EQU     $015C
002BB8 0F6BB8 -> $015D                CANIDMR5        EQU     $015D
002BB8 0F6BB8 -> $015E                CANIDMR6        EQU     $015E
002BB8 0F6BB8 -> $015F                CANIDMR7        EQU     $015F
002BB8 0F6BB8 -> $0160                CANRXIDR0       EQU     $0160
002BB8 0F6BB8 -> $0161                CANRXIDR1       EQU     $0161
002BB8 0F6BB8 -> $0162                CANRXIDR2       EQU     $0162
002BB8 0F6BB8 -> $0163                CANRXIDR3       EQU     $0163
002BB8 0F6BB8 -> $0164                CANRXDSR0       EQU     $0164
002BB8 0F6BB8 -> $0165                CANRXDSR1       EQU     $0165
002BB8 0F6BB8 -> $0166                CANRXDSR2       EQU     $0166
002BB8 0F6BB8 -> $0167                CANRXDSR3       EQU     $0167
002BB8 0F6BB8 -> $0168                CANRXDSR4       EQU     $0168
002BB8 0F6BB8 -> $0169                CANRXDSR5       EQU     $0169
002BB8 0F6BB8 -> $016A                CANRXDSR6       EQU     $016A
002BB8 0F6BB8 -> $016B                CANRXDSR7       EQU     $016B
002BB8 0F6BB8 -> $016C                CANRXDLR        EQU     $016C
                                      ;$016D reserved
002BB8 0F6BB8 -> $016E                CANRTSRH        EQU     $016E
002BB8 0F6BB8 -> $016F                CANRTSRL        EQU     $016F
002BB8 0F6BB8 -> $0170                CANTXIDR0       EQU     $0170
002BB8 0F6BB8 -> $0171                CANTXIDR1       EQU     $0171
002BB8 0F6BB8 -> $0172                CANTXIDR2       EQU     $0172
002BB8 0F6BB8 -> $0173                CANTXIDR3       EQU     $0173
002BB8 0F6BB8 -> $0174                CANTXDSR0       EQU     $0174
002BB8 0F6BB8 -> $0175                CANTXDSR1       EQU     $0175
002BB8 0F6BB8 -> $0176                CANTXDSR2       EQU     $0176
002BB8 0F6BB8 -> $0177                CANTXDSR3       EQU     $0177
002BB8 0F6BB8 -> $0178                CANTXDSR4       EQU     $0178
002BB8 0F6BB8 -> $0179                CANTXDSR5       EQU     $0179
002BB8 0F6BB8 -> $017A                CANTXDSR6       EQU     $017A
002BB8 0F6BB8 -> $017B                CANTXDSR7       EQU     $017B
002BB8 0F6BB8 -> $017C                CANTXDLR        EQU     $017C
002BB8 0F6BB8 -> $017D                CANTXTBPR       EQU     $017D
002BB8 0F6BB8 -> $017E                CANTXTSRH       EQU     $017E
002BB8 0F6BB8 -> $017F                CANTXTSRL       EQU     $017F
                                      ;$0180 to $023F reserved
002BB8 0F6BB8 -> $0240                PTT             EQU     $0240
002BB8 0F6BB8 -> $0080                PTT7            EQU     $80
002BB8 0F6BB8 -> $0040                PTT6            EQU     $40
002BB8 0F6BB8 -> $0020                PTT5            EQU     $20
002BB8 0F6BB8 -> $0010                PTT4            EQU     $10
002BB8 0F6BB8 -> $0008                PTT3            EQU     $08
002BB8 0F6BB8 -> $0004                PTT2            EQU     $04
002BB8 0F6BB8 -> $0002                PTT1            EQU     $02
002BB8 0F6BB8 -> $0001                PTT0            EQU     $01
002BB8 0F6BB8 -> $0080                PT7             EQU     $80
002BB8 0F6BB8 -> $0040                PT6             EQU     $40
002BB8 0F6BB8 -> $0020                PT5             EQU     $20
002BB8 0F6BB8 -> $0010                PT4             EQU     $10
002BB8 0F6BB8 -> $0008                PT3             EQU     $08
002BB8 0F6BB8 -> $0004                PT2             EQU     $04
002BB8 0F6BB8 -> $0002                PT1             EQU     $02
002BB8 0F6BB8 -> $0001                PT0             EQU     $01
002BB8 0F6BB8 -> $0241                PTIT            EQU     $0241
002BB8 0F6BB8 -> $0080                PTIT7           EQU     $80
002BB8 0F6BB8 -> $0040                PTIT6           EQU     $40
002BB8 0F6BB8 -> $0020                PTIT5           EQU     $20
002BB8 0F6BB8 -> $0010                PTIT4           EQU     $10
002BB8 0F6BB8 -> $0008                PTIT3           EQU     $08
002BB8 0F6BB8 -> $0004                PTIT2           EQU     $04
002BB8 0F6BB8 -> $0002                PTIT1           EQU     $02
002BB8 0F6BB8 -> $0001                PTIT0           EQU     $01
002BB8 0F6BB8 -> $0242                DDRT            EQU     $0242
002BB8 0F6BB8 -> $0080                DDRT7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRT6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRT5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRT4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRT3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRT2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRT1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRT0           EQU     $01
                                      ;$0243 reserved
002BB8 0F6BB8 -> $0244                PERT            EQU     $0244
002BB8 0F6BB8 -> $0080                PERT7           EQU     $80
002BB8 0F6BB8 -> $0040                PERT6           EQU     $40
002BB8 0F6BB8 -> $0020                PERT5           EQU     $20
002BB8 0F6BB8 -> $0010                PERT4           EQU     $10
002BB8 0F6BB8 -> $0008                PERT3           EQU     $08
002BB8 0F6BB8 -> $0004                PERT2           EQU     $04
002BB8 0F6BB8 -> $0002                PERT1           EQU     $02
002BB8 0F6BB8 -> $0001                PERT0           EQU     $01
002BB8 0F6BB8 -> $0245                PPST            EQU     $0245
002BB8 0F6BB8 -> $0080                PPST7           EQU     $80
002BB8 0F6BB8 -> $0040                PPST6           EQU     $40
002BB8 0F6BB8 -> $0020                PPST5           EQU     $20
002BB8 0F6BB8 -> $0010                PPST4           EQU     $10
002BB8 0F6BB8 -> $0008                PPST3           EQU     $08
002BB8 0F6BB8 -> $0004                PPST2           EQU     $04
002BB8 0F6BB8 -> $0002                PPST1           EQU     $02
002BB8 0F6BB8 -> $0001                PPST0           EQU     $01
                                      ;$0246 to 247 reserved
002BB8 0F6BB8 -> $0248                PTS             EQU     $0248
002BB8 0F6BB8 -> $0080                PTS7            EQU     $80
002BB8 0F6BB8 -> $0040                PTS6            EQU     $40
002BB8 0F6BB8 -> $0020                PTS5            EQU     $20
002BB8 0F6BB8 -> $0010                PTS4            EQU     $10
002BB8 0F6BB8 -> $0008                PTS3            EQU     $08
002BB8 0F6BB8 -> $0004                PTS2            EQU     $04
002BB8 0F6BB8 -> $0002                PTS1            EQU     $02
002BB8 0F6BB8 -> $0001                PTS0            EQU     $01
002BB8 0F6BB8 -> $0080                PS7             EQU     $80
002BB8 0F6BB8 -> $0040                PS6             EQU     $40
002BB8 0F6BB8 -> $0020                PS5             EQU     $20
002BB8 0F6BB8 -> $0010                PS4             EQU     $10
002BB8 0F6BB8 -> $0008                PS3             EQU     $08
002BB8 0F6BB8 -> $0004                PS2             EQU     $04
002BB8 0F6BB8 -> $0002                PS1             EQU     $02
002BB8 0F6BB8 -> $0001                PS0             EQU     $01
002BB8 0F6BB8 -> $0249                PTIS            EQU     $0249
002BB8 0F6BB8 -> $0080                PTIS7           EQU     $80
002BB8 0F6BB8 -> $0040                PTIS6           EQU     $40
002BB8 0F6BB8 -> $0020                PTIS5           EQU     $20
002BB8 0F6BB8 -> $0010                PTIS4           EQU     $10
002BB8 0F6BB8 -> $0008                PTIS3           EQU     $08
002BB8 0F6BB8 -> $0004                PTIS2           EQU     $04
002BB8 0F6BB8 -> $0002                PTIS1           EQU     $02
002BB8 0F6BB8 -> $0001                PTIS0           EQU     $01
002BB8 0F6BB8 -> $024A                DDRS            EQU     $024A
002BB8 0F6BB8 -> $0080                DDRS7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRS6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRS5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRS4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRS3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRS2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRS1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRS0           EQU     $01
                                      ;$024B reserved
002BB8 0F6BB8 -> $024C                PERS            EQU     $024C
002BB8 0F6BB8 -> $0080                PERS7           EQU     $80
002BB8 0F6BB8 -> $0040                PERS6           EQU     $40
002BB8 0F6BB8 -> $0020                PERS5           EQU     $20
002BB8 0F6BB8 -> $0010                PERS4           EQU     $10
002BB8 0F6BB8 -> $0008                PERS3           EQU     $08
002BB8 0F6BB8 -> $0004                PERS2           EQU     $04
002BB8 0F6BB8 -> $0002                PERS1           EQU     $02
002BB8 0F6BB8 -> $0001                PERS0           EQU     $01
002BB8 0F6BB8 -> $024D                PPSS            EQU     $024D
002BB8 0F6BB8 -> $0080                PPSS7           EQU     $80
002BB8 0F6BB8 -> $0040                PPSS6           EQU     $40
002BB8 0F6BB8 -> $0020                PPSS5           EQU     $20
002BB8 0F6BB8 -> $0010                PPSS4           EQU     $10
002BB8 0F6BB8 -> $0008                PPSS3           EQU     $08
002BB8 0F6BB8 -> $0004                PPSS2           EQU     $04
002BB8 0F6BB8 -> $0002                PPSS1           EQU     $02
002BB8 0F6BB8 -> $0001                PPSS0           EQU     $01
002BB8 0F6BB8 -> $024E                WOMS            EQU     $024E
002BB8 0F6BB8 -> $0080                WOMS7           EQU     $80
002BB8 0F6BB8 -> $0040                WOMS6           EQU     $40
002BB8 0F6BB8 -> $0020                WOMS5           EQU     $20
002BB8 0F6BB8 -> $0010                WOMS4           EQU     $10
002BB8 0F6BB8 -> $0008                WOMS3           EQU     $08
002BB8 0F6BB8 -> $0004                WOMS2           EQU     $04
002BB8 0F6BB8 -> $0002                WOMS1           EQU     $02
002BB8 0F6BB8 -> $0001                WOMS0           EQU     $01
002BB8 0F6BB8 -> $024F                PRR0            EQU     $024F
002BB8 0F6BB8 -> $0080                PRR0P3          EQU     $80
002BB8 0F6BB8 -> $0040                PRR0P2          EQU     $40
002BB8 0F6BB8 -> $0020                PRR0T31         EQU     $20
002BB8 0F6BB8 -> $0010                PRR0T30         EQU     $10
002BB8 0F6BB8 -> $0008                PRR0T21         EQU     $08
002BB8 0F6BB8 -> $0004                PRR0T20         EQU     $04
002BB8 0F6BB8 -> $0002                PRR0S1          EQU     $02
002BB8 0F6BB8 -> $0001                PRR0S0          EQU     $01
002BB8 0F6BB8 -> $0250                PTM             EQU     $0250
002BB8 0F6BB8 -> $0008                PTM3            EQU     $08
002BB8 0F6BB8 -> $0004                PTM2            EQU     $04
002BB8 0F6BB8 -> $0002                PTM1            EQU     $02
002BB8 0F6BB8 -> $0001                PTM0            EQU     $01
002BB8 0F6BB8 -> $0008                PM3             EQU     $08
002BB8 0F6BB8 -> $0004                PM2             EQU     $04
002BB8 0F6BB8 -> $0002                PM1             EQU     $02
002BB8 0F6BB8 -> $0001                PM0             EQU     $01
002BB8 0F6BB8 -> $0251                PTIM            EQU     $0251
002BB8 0F6BB8 -> $0008                PTIM3           EQU     $08
002BB8 0F6BB8 -> $0004                PTIM2           EQU     $04
002BB8 0F6BB8 -> $0002                PTIM1           EQU     $02
002BB8 0F6BB8 -> $0001                PTIM0           EQU     $01
002BB8 0F6BB8 -> $0252                DDRM            EQU     $0252
002BB8 0F6BB8 -> $0008                DDRM3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRM2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRM1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRM0           EQU     $01
                                      ;$0253 reserved
002BB8 0F6BB8 -> $0254                PERM            EQU     $0254
002BB8 0F6BB8 -> $0008                PERM3           EQU     $08
002BB8 0F6BB8 -> $0004                PERM2           EQU     $04
002BB8 0F6BB8 -> $0002                PERM1           EQU     $02
002BB8 0F6BB8 -> $0001                PERM0           EQU     $01
002BB8 0F6BB8 -> $0255                PPSM            EQU     $0255
002BB8 0F6BB8 -> $0008                PPSM3           EQU     $08
002BB8 0F6BB8 -> $0004                PPSM2           EQU     $04
002BB8 0F6BB8 -> $0002                PPSM1           EQU     $02
002BB8 0F6BB8 -> $0001                PPSM0           EQU     $01
002BB8 0F6BB8 -> $0256                WOMM            EQU     $0256
002BB8 0F6BB8 -> $0008                WOMM3           EQU     $08
002BB8 0F6BB8 -> $0004                WOMM2           EQU     $04
002BB8 0F6BB8 -> $0002                WOMM1           EQU     $02
002BB8 0F6BB8 -> $0001                WOMM0           EQU     $01
002BB8 0F6BB8 -> $0257                PKGCR           EQU     $0257
002BB8 0F6BB8 -> $0080                APICLKS7        EQU     $80
002BB8 0F6BB8 -> $0004                PKGCR2          EQU     $04
002BB8 0F6BB8 -> $0002                PKGCR1          EQU     $02
002BB8 0F6BB8 -> $0001                PKGCR0          EQU     $01
002BB8 0F6BB8 -> $0258                PTP             EQU     $0258
002BB8 0F6BB8 -> $0080                PTP7            EQU     $80
002BB8 0F6BB8 -> $0040                PTP6            EQU     $40
002BB8 0F6BB8 -> $0020                PTP5            EQU     $20
002BB8 0F6BB8 -> $0010                PTP4            EQU     $10
002BB8 0F6BB8 -> $0008                PTP3            EQU     $08
002BB8 0F6BB8 -> $0004                PTP2            EQU     $04
002BB8 0F6BB8 -> $0002                PTP1            EQU     $02
002BB8 0F6BB8 -> $0001                PTP0            EQU     $01
002BB8 0F6BB8 -> $0080                PP7             EQU     $80
002BB8 0F6BB8 -> $0040                PP6             EQU     $40
002BB8 0F6BB8 -> $0020                PP5             EQU     $20
002BB8 0F6BB8 -> $0010                PP4             EQU     $10
002BB8 0F6BB8 -> $0008                PP3             EQU     $08
002BB8 0F6BB8 -> $0004                PP2             EQU     $04
002BB8 0F6BB8 -> $0002                PP1             EQU     $02
002BB8 0F6BB8 -> $0001                PP0             EQU     $01
002BB8 0F6BB8 -> $0259                PTIP            EQU     $0259
002BB8 0F6BB8 -> $0080                PTIP7           EQU     $80
002BB8 0F6BB8 -> $0040                PTIP6           EQU     $40
002BB8 0F6BB8 -> $0020                PTIP5           EQU     $20
002BB8 0F6BB8 -> $0010                PTIP4           EQU     $10
002BB8 0F6BB8 -> $0008                PTIP3           EQU     $08
002BB8 0F6BB8 -> $0004                PTIP2           EQU     $04
002BB8 0F6BB8 -> $0002                PTIP1           EQU     $02
002BB8 0F6BB8 -> $0001                PTIP0           EQU     $01
002BB8 0F6BB8 -> $025A                DDRP            EQU     $025A
002BB8 0F6BB8 -> $0080                DDRP7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRP6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRP5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRP4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRP3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRP2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRP1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRP0           EQU     $01
                                      ;$025B reserved
002BB8 0F6BB8 -> $025C                PERP            EQU     $025C
002BB8 0F6BB8 -> $0080                PERP7           EQU     $80
002BB8 0F6BB8 -> $0040                PERP6           EQU     $40
002BB8 0F6BB8 -> $0020                PERP5           EQU     $20
002BB8 0F6BB8 -> $0010                PERP4           EQU     $10
002BB8 0F6BB8 -> $0008                PERP3           EQU     $08
002BB8 0F6BB8 -> $0004                PERP2           EQU     $04
002BB8 0F6BB8 -> $0002                PERP1           EQU     $02
002BB8 0F6BB8 -> $0001                PERP0           EQU     $01
002BB8 0F6BB8 -> $025D                PPSP            EQU     $025D
002BB8 0F6BB8 -> $0080                PPSP7           EQU     $80
002BB8 0F6BB8 -> $0040                PPSP6           EQU     $40
002BB8 0F6BB8 -> $0020                PPSP5           EQU     $20
002BB8 0F6BB8 -> $0010                PPSP4           EQU     $10
002BB8 0F6BB8 -> $0008                PPSP3           EQU     $08
002BB8 0F6BB8 -> $0004                PPSP2           EQU     $04
002BB8 0F6BB8 -> $0002                PPSP1           EQU     $02
002BB8 0F6BB8 -> $0001                PPSP0           EQU     $01
002BB8 0F6BB8 -> $025E                PIEP            EQU     $025E
002BB8 0F6BB8 -> $0080                PIEP7           EQU     $80
002BB8 0F6BB8 -> $0040                PIEP6           EQU     $40
002BB8 0F6BB8 -> $0020                PIEP5           EQU     $20
002BB8 0F6BB8 -> $0010                PIEP4           EQU     $10
002BB8 0F6BB8 -> $0008                PIEP3           EQU     $08
002BB8 0F6BB8 -> $0004                PIEP2           EQU     $04
002BB8 0F6BB8 -> $0002                PIEP1           EQU     $02
002BB8 0F6BB8 -> $0001                PIEP0           EQU     $01
002BB8 0F6BB8 -> $025F                PIFP            EQU     $025F
002BB8 0F6BB8 -> $0080                PIFP7           EQU     $80
002BB8 0F6BB8 -> $0040                PIFP6           EQU     $40
002BB8 0F6BB8 -> $0020                PIFP5           EQU     $20
002BB8 0F6BB8 -> $0010                PIFP4           EQU     $10
002BB8 0F6BB8 -> $0008                PIFP3           EQU     $08
002BB8 0F6BB8 -> $0004                PIFP2           EQU     $04
002BB8 0F6BB8 -> $0002                PIFP1           EQU     $02
002BB8 0F6BB8 -> $0001                PIFP0           EQU     $01
002BB8 0F6BB8 -> $0260                ACMPC           EQU     $260
002BB8 0F6BB8 -> $0080                ACIE            EQU     $80
002BB8 0F6BB8 -> $0040                ACOPE           EQU     $40
002BB8 0F6BB8 -> $0020                ACICE           EQU     $20
002BB8 0F6BB8 -> $0008                ACMOD1          EQU     $08
002BB8 0F6BB8 -> $0004                ACMOD0          EQU     $04
002BB8 0F6BB8 -> $0001                ACE             EQU     $01
002BB8 0F6BB8 -> $0261                ACMPS           EQU     $261
002BB8 0F6BB8 -> $0080                ACIF            EQU     $80
002BB8 0F6BB8 -> $0040                ACO             EQU     $40
                                      ;$0262 to $0267 reserved
002BB8 0F6BB8 -> $0268                PTJ             EQU     $0268
002BB8 0F6BB8 -> $0080                PTJ7            EQU     $80
002BB8 0F6BB8 -> $0040                PTJ6            EQU     $40
002BB8 0F6BB8 -> $0020                PTJ5            EQU     $20
002BB8 0F6BB8 -> $0010                PTJ4            EQU     $10
002BB8 0F6BB8 -> $0008                PTJ3            EQU     $08
002BB8 0F6BB8 -> $0004                PTJ2            EQU     $04
002BB8 0F6BB8 -> $0002                PTJ1            EQU     $02
002BB8 0F6BB8 -> $0001                PTJ0            EQU     $01
002BB8 0F6BB8 -> $0080                PJ7             EQU     $80
002BB8 0F6BB8 -> $0040                PJ6             EQU     $40
002BB8 0F6BB8 -> $0020                PJ5             EQU     $20
002BB8 0F6BB8 -> $0010                PJ4             EQU     $10
002BB8 0F6BB8 -> $0008                PJ3             EQU     $08
002BB8 0F6BB8 -> $0004                PJ2             EQU     $04
002BB8 0F6BB8 -> $0002                PJ1             EQU     $02
002BB8 0F6BB8 -> $0001                PJ0             EQU     $01
002BB8 0F6BB8 -> $0269                PTIJ            EQU     $0269
002BB8 0F6BB8 -> $0080                PTIJ7           EQU     $80
002BB8 0F6BB8 -> $0040                PTIJ6           EQU     $40
002BB8 0F6BB8 -> $0020                PTIJ5           EQU     $20
002BB8 0F6BB8 -> $0010                PTIJ4           EQU     $10
002BB8 0F6BB8 -> $0008                PTIJ3           EQU     $08
002BB8 0F6BB8 -> $0004                PTIJ2           EQU     $04
002BB8 0F6BB8 -> $0002                PTIJ1           EQU     $02
002BB8 0F6BB8 -> $0001                PTIJ0           EQU     $01
002BB8 0F6BB8 -> $026A                DDRJ            EQU     $026A
002BB8 0F6BB8 -> $0080                DDRJ7           EQU     $80
002BB8 0F6BB8 -> $0040                DDRJ6           EQU     $40
002BB8 0F6BB8 -> $0020                DDRJ5           EQU     $20
002BB8 0F6BB8 -> $0010                DDRJ4           EQU     $10
002BB8 0F6BB8 -> $0008                DDRJ3           EQU     $08
002BB8 0F6BB8 -> $0004                DDRJ2           EQU     $04
002BB8 0F6BB8 -> $0002                DDRJ1           EQU     $02
002BB8 0F6BB8 -> $0001                DDRJ0           EQU     $01
                                      ;$026B reserved
002BB8 0F6BB8 -> $026C                PERJ            EQU     $026C
002BB8 0F6BB8 -> $0080                PERJ7           EQU     $80
002BB8 0F6BB8 -> $0040                PERJ6           EQU     $40
002BB8 0F6BB8 -> $0020                PERJ5           EQU     $20
002BB8 0F6BB8 -> $0010                PERJ4           EQU     $10
002BB8 0F6BB8 -> $0008                PERJ3           EQU     $08
002BB8 0F6BB8 -> $0004                PERJ2           EQU     $04
002BB8 0F6BB8 -> $0002                PERJ1           EQU     $02
002BB8 0F6BB8 -> $0001                PERJ0           EQU     $01
002BB8 0F6BB8 -> $026D                PPSJ            EQU     $026D
002BB8 0F6BB8 -> $0080                PPSJ7           EQU     $80
002BB8 0F6BB8 -> $0040                PPSJ6           EQU     $40
002BB8 0F6BB8 -> $0020                PPSJ5           EQU     $20
002BB8 0F6BB8 -> $0010                PPSJ4           EQU     $10
002BB8 0F6BB8 -> $0008                PPSJ3           EQU     $08
002BB8 0F6BB8 -> $0004                PPSJ2           EQU     $04
002BB8 0F6BB8 -> $0002                PPSJ1           EQU     $02
002BB8 0F6BB8 -> $0001                PPSJ0           EQU     $01
002BB8 0F6BB8 -> $026E                PIEJ            EQU     $026E
002BB8 0F6BB8 -> $0080                PIEJ7           EQU     $80
002BB8 0F6BB8 -> $0040                PIEJ6           EQU     $40
002BB8 0F6BB8 -> $0020                PIEJ5           EQU     $20
002BB8 0F6BB8 -> $0010                PIEJ4           EQU     $10
002BB8 0F6BB8 -> $0008                PIEJ3           EQU     $08
002BB8 0F6BB8 -> $0004                PIEJ2           EQU     $04
002BB8 0F6BB8 -> $0002                PIEJ1           EQU     $02
002BB8 0F6BB8 -> $0001                PIEJ0           EQU     $01
002BB8 0F6BB8 -> $026F                PIFJ            EQU     $026F
002BB8 0F6BB8 -> $0080                PIFJ7           EQU     $80
002BB8 0F6BB8 -> $0040                PIFJ6           EQU     $40
002BB8 0F6BB8 -> $0020                PIFJ5           EQU     $20
002BB8 0F6BB8 -> $0010                PIFJ4           EQU     $10
002BB8 0F6BB8 -> $0008                PIFJ3           EQU     $08
002BB8 0F6BB8 -> $0004                PIFJ2           EQU     $04
002BB8 0F6BB8 -> $0002                PIFJ1           EQU     $02
002BB8 0F6BB8 -> $0001                PIFJ0           EQU     $01
002BB8 0F6BB8 -> $0270                PT0AD           EQU     $0270
002BB8 0F6BB8 -> $0080                PT0AD7          EQU     $80
002BB8 0F6BB8 -> $0040                PT0AD6          EQU     $40
002BB8 0F6BB8 -> $0020                PT0AD5          EQU     $20
002BB8 0F6BB8 -> $0010                PT0AD4          EQU     $10
002BB8 0F6BB8 -> $0008                PT0AD3          EQU     $08
002BB8 0F6BB8 -> $0004                PT0AD2          EQU     $04
002BB8 0F6BB8 -> $0002                PT0AD1          EQU     $02
002BB8 0F6BB8 -> $0001                PT0AD0          EQU     $01
002BB8 0F6BB8 -> $0271                PT1AD           EQU     $0271
002BB8 0F6BB8 -> $0080                PT1AD7          EQU     $80
002BB8 0F6BB8 -> $0040                PT1AD6          EQU     $40
002BB8 0F6BB8 -> $0020                PT1AD5          EQU     $20
002BB8 0F6BB8 -> $0010                PT1AD4          EQU     $10
002BB8 0F6BB8 -> $0008                PT1AD3          EQU     $08
002BB8 0F6BB8 -> $0004                PT1AD2          EQU     $04
002BB8 0F6BB8 -> $0002                PT1AD1          EQU     $02
002BB8 0F6BB8 -> $0001                PT1AD0          EQU     $01
002BB8 0F6BB8 -> $0272                PTI0AD          EQU     $0272
002BB8 0F6BB8 -> $0080                PTI0AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PTI0AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PTI0AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PTI0AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PTI0AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PTI0AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PTI0AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PTI0AD0         EQU     $01
002BB8 0F6BB8 -> $0273                PTI1AD          EQU     $0273
002BB8 0F6BB8 -> $0080                PTI1AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PTI1AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PTI1AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PTI1AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PTI1AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PTI1AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PTI1AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PTI1AD0         EQU     $01
002BB8 0F6BB8 -> $0274                DDR0AD          EQU     $0274
002BB8 0F6BB8 -> $0080                DDR0AD7         EQU     $80
002BB8 0F6BB8 -> $0040                DDR0AD6         EQU     $40
002BB8 0F6BB8 -> $0020                DDR0AD5         EQU     $20
002BB8 0F6BB8 -> $0010                DDR0AD4         EQU     $10
002BB8 0F6BB8 -> $0008                DDR0AD3         EQU     $08
002BB8 0F6BB8 -> $0004                DDR0AD2         EQU     $04
002BB8 0F6BB8 -> $0002                DDR0AD1         EQU     $02
002BB8 0F6BB8 -> $0001                DDR0AD0         EQU     $01
002BB8 0F6BB8 -> $0275                DDR1AD          EQU     $0275
002BB8 0F6BB8 -> $0080                DDR1AD7         EQU     $80
002BB8 0F6BB8 -> $0040                DDR1AD6         EQU     $40
002BB8 0F6BB8 -> $0020                DDR1AD5         EQU     $20
002BB8 0F6BB8 -> $0010                DDR1AD4         EQU     $10
002BB8 0F6BB8 -> $0008                DDR1AD3         EQU     $08
002BB8 0F6BB8 -> $0004                DDR1AD2         EQU     $04
002BB8 0F6BB8 -> $0002                DDR1AD1         EQU     $02
002BB8 0F6BB8 -> $0001                DDR1AD0         EQU     $01
002BB8 0F6BB8 -> $0276                RVACTL          EQU     $0276
002BB8 0F6BB8 -> $0001                RVAON           EQU     $01
002BB8 0F6BB8 -> $0277                PRR1            EQU     $0277
002BB8 0F6BB8 -> $0001                PRR1AN          EQU     $01
002BB8 0F6BB8 -> $0278                PER0AD          EQU     $0278
002BB8 0F6BB8 -> $0080                PER0AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PER0AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PER0AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PER0AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PER0AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PER0AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PER0AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PER0AD0         EQU     $01
002BB8 0F6BB8 -> $0279                PER1AD          EQU     $0279
002BB8 0F6BB8 -> $0080                PER1AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PER1AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PER1AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PER1AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PER1AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PER1AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PER1AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PER1AD0         EQU     $01
002BB8 0F6BB8 -> $027A                PPS0AD          EQU     $027A
002BB8 0F6BB8 -> $0080                PPS0AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PPS0AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PPS0AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PPS0AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PPS0AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PPS0AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PPS0AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PPS0AD0         EQU     $01
002BB8 0F6BB8 -> $027B                PPS1AD          EQU     $027B
002BB8 0F6BB8 -> $0080                PPS1AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PPS1AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PPS1AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PPS1AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PPS1AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PPS1AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PPS1AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PPS1AD0         EQU     $01
002BB8 0F6BB8 -> $027C                PIE0AD          EQU     $027C
002BB8 0F6BB8 -> $0080                PIE0AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PIE0AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PIE0AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PIE0AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PIE0AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PIE0AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PIE0AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PIE0AD0         EQU     $01
002BB8 0F6BB8 -> $027D                PIE1AD          EQU     $027D
002BB8 0F6BB8 -> $0080                PIE1AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PIE1AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PIE1AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PIE1AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PIE1AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PIE1AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PIE1AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PIE1AD0         EQU     $01
002BB8 0F6BB8 -> $027E                PIF0AD          EQU     $027E
002BB8 0F6BB8 -> $0080                PIF0AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PIF0AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PIF0AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PIF0AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PIF0AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PIF0AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PIF0AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PIF0AD0         EQU     $01
002BB8 0F6BB8 -> $027F                PIF1AD          EQU     $027F
002BB8 0F6BB8 -> $0080                PIF1AD7         EQU     $80
002BB8 0F6BB8 -> $0040                PIF1AD6         EQU     $40
002BB8 0F6BB8 -> $0020                PIF1AD5         EQU     $20
002BB8 0F6BB8 -> $0010                PIF1AD4         EQU     $10
002BB8 0F6BB8 -> $0008                PIF1AD3         EQU     $08
002BB8 0F6BB8 -> $0004                PIF1AD2         EQU     $04
002BB8 0F6BB8 -> $0002                PIF1AD1         EQU     $02
002BB8 0F6BB8 -> $0001                PIF1AD0         EQU     $01
                                      ;$0280 to $02F0 reserved
002BB8 0F6BB8 -> $02F1                CPMULVCTL       EQU     $02F1
002BB8 0F6BB8 -> $0004                LVDS            EQU     $04
002BB8 0F6BB8 -> $0002                LVIE            EQU     $02
002BB8 0F6BB8 -> $0001                LVIF            EQU     $01
002BB8 0F6BB8 -> $02F2                CPMUAPICTL      EQU     $02F2
002BB8 0F6BB8 -> $0080                APICLK          EQU     $80
002BB8 0F6BB8 -> $0010                APIES           EQU     $10
002BB8 0F6BB8 -> $0008                APIEA           EQU     $08
002BB8 0F6BB8 -> $0004                APIFE           EQU     $04
002BB8 0F6BB8 -> $0002                APIE            EQU     $02
002BB8 0F6BB8 -> $0001                APIF            EQU     $01
002BB8 0F6BB8 -> $02F3                CPMUAPITR       EQU     $02F3
002BB8 0F6BB8 -> $0080                APITR5          EQU     $80
002BB8 0F6BB8 -> $0040                APITR4          EQU     $40
002BB8 0F6BB8 -> $0020                APITR3          EQU     $20
002BB8 0F6BB8 -> $0010                APITR2          EQU     $10
002BB8 0F6BB8 -> $0008                APITR1          EQU     $08
002BB8 0F6BB8 -> $0004                APITR0          EQU     $04
002BB8 0F6BB8 -> $02F4                CPMUAPIRH       EQU     $02F4
002BB8 0F6BB8 -> $0080                APIR15          EQU     $80
002BB8 0F6BB8 -> $0040                APIR14          EQU     $40
002BB8 0F6BB8 -> $0020                APIR13          EQU     $20
002BB8 0F6BB8 -> $0010                APIR12          EQU     $10
002BB8 0F6BB8 -> $0008                APIR11          EQU     $08
002BB8 0F6BB8 -> $0004                APIR10          EQU     $04
002BB8 0F6BB8 -> $0002                APIR9           EQU     $02
002BB8 0F6BB8 -> $0001                APIR8           EQU     $01
002BB8 0F6BB8 -> $02F5                CPMUAPIRL       EQU     $02F5
002BB8 0F6BB8 -> $0080                APIR7           EQU     $80
002BB8 0F6BB8 -> $0040                APIR6           EQU     $40
002BB8 0F6BB8 -> $0020                APIR5           EQU     $20
002BB8 0F6BB8 -> $0010                APIR4           EQU     $10
002BB8 0F6BB8 -> $0008                APIR3           EQU     $08
002BB8 0F6BB8 -> $0004                APIR2           EQU     $04
002BB8 0F6BB8 -> $0002                APIR1           EQU     $02
002BB8 0F6BB8 -> $0001                APIR0           EQU     $01
                                      ;$02F6 to $02F7 reserved
002BB8 0F6BB8 -> $02F8                CPMUIRCTRIMH    EQU     $02F8
002BB8 0F6BB8 -> $0080                TCTRIM3         EQU     $80
002BB8 0F6BB8 -> $0040                TCTRIM2         EQU     $40
002BB8 0F6BB8 -> $0020                TCTRIM1         EQU     $20
002BB8 0F6BB8 -> $0010                TCTRIM0         EQU     $10
002BB8 0F6BB8 -> $0002                IRCTRIM9        EQU     $02
002BB8 0F6BB8 -> $0001                IRCTRIM8        EQU     $01
002BB8 0F6BB8 -> $02F9                CPMUIRCTRIML    EQU     $02F9
002BB8 0F6BB8 -> $0080                IRCTRIM7        EQU     $80
002BB8 0F6BB8 -> $0040                IRCTRIM6        EQU     $40
002BB8 0F6BB8 -> $0020                IRCTRIM5        EQU     $20
002BB8 0F6BB8 -> $0010                IRCTRIM4        EQU     $10
002BB8 0F6BB8 -> $0008                IRCTRIM3        EQU     $08
002BB8 0F6BB8 -> $0004                IRCTRIM2        EQU     $04
002BB8 0F6BB8 -> $0002                IRCTRIM1        EQU     $02
002BB8 0F6BB8 -> $0001                IRCTRIM0        EQU     $01
002BB8 0F6BB8 -> $02FA                CPMUOSC         EQU     $02FA
002BB8 0F6BB8 -> $0080                OSCE            EQU     $80
002BB8 0F6BB8 -> $0020                OSCPINS_EN      EQU     $20
002BB8 0F6BB8 -> $02FB                CPMUPROT        EQU     $02FB
002BB8 0F6BB8 -> $0001                PROT            EQU     $01
                                      ;$02FC to $03BF reserved
002BB8 0F6BB8 -> $03C0                DAC0CTL         EQU     $03C0
002BB8 0F6BB8 -> $0080                FVR             EQU     $80
002BB8 0F6BB8 -> $0040                DRIVE           EQU     $40
002BB8 0F6BB8 -> $0004                MODE2           EQU     $04
002BB8 0F6BB8 -> $0002                MODE1           EQU     $02
002BB8 0F6BB8 -> $0001                MODE0           EQU     $01
                                      ;$03C1 reserved
002BB8 0F6BB8 -> $03C2                DAC0VOLTAGE     EQU     $03C2
002BB8 0F6BB8 -> $0080                VOLTAGE7        EQU     $80
002BB8 0F6BB8 -> $0040                VOLTAGE6        EQU     $40
002BB8 0F6BB8 -> $0020                VOLTAGE5        EQU     $20
002BB8 0F6BB8 -> $0010                VOLTAGE4        EQU     $10
002BB8 0F6BB8 -> $0008                VOLTAGE3        EQU     $08
002BB8 0F6BB8 -> $0004                VOLTAGE2        EQU     $04
002BB8 0F6BB8 -> $0002                VOLTAGE1        EQU     $02
002BB8 0F6BB8 -> $0001                VOLTAGE0        EQU     $01
                                      ;$03C3 to $03C7 reserved
002BB8 0F6BB8 -> $03C8                DAC1CTL         EQU     $03C8
                                      ;FVR            EQU     $80
                                      ;DRIVE          EQU     $40
                                      ;MODE2          EQU     $04
                                      ;MODE1          EQU     $02
                                      ;MODE0          EQU     $01
                                      ;$03C9 reserved
002BB8 0F6BB8 -> $03CA                DAC1VOLTAGE     EQU     $03CA
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (S12G-Micro-EVB)                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports. The OpenBDM firmware      #
                                      ;#    assumes the following I/O pin configuration of the S12G128 MCU:          #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD0  - Vin                        (analog       no pull  )             #
                                      ;#     PAD1  - Keyboard row 6 (bottom)    (input        pull-up  )             #
                                      ;#     PAD2  - Keyboard row 5             (input        pull-up  )             #
                                      ;#     PAD3  - Keyboard row 4             (input        pull-up  )             #
                                      ;#     PAD4  - Keyboard row 3             (input        pull-up  )             #
                                      ;#     PAD5  - Keyboard row 2             (input        pull-up  )             #
                                      ;#     PAD6  - Keyboard row 1 (top)       (input        pull-up  )             #
                                      ;#     PAD7  - NC                         (input        pull-up  )             #
                                      ;#     PAD8  - NC                         (input        pull-up  )             #
                                      ;#     PAD9  - NC                         (input        pull-up  )             #
                                      ;#     PAD10 - NC                         (input        pull-up  )             #
                                      ;#     PAD11 - NC                         (input        pull-up  )             #
                                      ;#     PAD12 - NC                         (input        pull-up  )             #
                                      ;#     PAD13 - NC                         (input        pull-up  )             #
                                      ;#     PAD14 - NC                         (input        pull-up  )             #
                                      ;#     PAD15 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - NC                           (input        pull-up  )             #
                                      ;#     PA1 - NC                           (input        pull-up  )             #
                                      ;#     PA2 - NC                           (input        pull-up  )             #
                                      ;#     PA3 - NC                           (input        pull-up  )             #
                                      ;#     PA4 - NC                           (input        pull-up  )             #
                                      ;#     PA5 - NC                           (input        pull-up  )             #
                                      ;#     PA6 - NC                           (input        pull-up  )             #
                                      ;#     PA7 - NC                           (input        pull-up  )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - NC                           (input        pull-up  )             #
                                      ;#     PB1 - NC                           (input        pull-up  )             #
                                      ;#     PB2 - NC                           (input        pull-up  )             #
                                      ;#     PB3 - NC                           (input        pull-up  )             #
                                      ;#     PB4 - NC                           (input        pull-up  )             #
                                      ;#     PB5 - NC                           (input        pull-up  )             #
                                      ;#     PB6 - NC                           (input        pull-up  )             #
                                      ;#     PB7 - NC                           (input        pull-up  )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - LED (green)                  (output       high     )             #
                                      ;#     PE1 - LED (red)                    (output       high     )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - NC                           (input        pull-up  )             #
                                      ;#     PJ1 - NC                           (input        pull-up  )             #
                                      ;#     PJ2 - NC                           (input        pull-up  )             #
                                      ;#     PJ3 - NC                           (input        pull-up  )             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - NC                           (input        pull-up  )             #
                                      ;#     PJ7 - NC                           (input        pull-up  )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - RTS                          (input        pull_down)             #
                                      ;#     PM1 - CTS                          (output       low      )             #
                                      ;#     PM2 - NC                           (input        pull_up  )             #
                                      ;#     PM3 - NC                           (input        pull_up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - Keyboard column 1 (left)     (input        pull-up  )             #
                                      ;#     PP1 - Keyboard column 2            (input        pull-up  )             #
                                      ;#     PP2 - Keyboard column 3            (input        pull-up  )             #
                                      ;#     PP3 - Keyboard column 4            (input        pull-up  )             #
                                      ;#     PP4 - Keyboard column 5 (right)    (input        pull-up  )             #
                                      ;#     PP5 - NC                           (input        pull-up  )             #
                                      ;#     PP6 - NC                           (input        pull-up  )             #
                                      ;#     PP7 - NC                           (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI RX                       (input        pull-down)             #
                                      ;#     PS1 - SCI TX                       (output       no pull  )             #
                                      ;#     PS2 - NC                           (input        pull-up  )             #
                                      ;#     PS3 - NC                           (input        pull-up  )             #
                                      ;#     PS4 - Display A0                   (output       low      )             #
                                      ;#     PS5 - SPI MOSI                     (output       low      )             #
                                      ;#     PS6 - SPI SCK                      (output       low      )             #
                                      ;#     PS7 - /SS                          (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - SCI RX                       (input        no pull  )             #
                                      ;#     PT1 - SCI_RX                       (input        no pull  )             #
                                      ;#     PT2 - NC                           (input        pull-up  )             #
                                      ;#     PT3 - NC                           (input        pull-up  )             #
                                      ;#     PT4 - NC                           (input        pull-up  )             #
                                      ;#     PT5 - NC                           (input        pull-up  )             #
                                      ;#     PT6 - NC                           (input        pull-up  )             #
                                      ;#     PT7 - NC                           (input        pull-up  )             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
002A6A 0F6A6A -> $2A6A                GPIO_VARS_END           EQU     *
002A6A 0F6A6A -> $F6A6A               GPIO_VARS_END_LIN       EQU     @
                                                      ;MOVB   #$00,   PPST
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
00240A 0F640A -> $240A                GPIO_CODE_END           EQU     *
00240A 0F640A -> $F640A               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                GPIO_TABS_END           EQU     *
002BB8 0F6BB8 -> $F6BB8               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (S12G-Micro-EVB)                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module module performs all the necessary steps to initialize the    #
                                      ;#    device after each reset.                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Updated memory mapping                                               #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                      S12G
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |    EEPROM   |
                                      ;                +-------------+ $0400+EEPROM_SIZE
                                      ;                |/////////////|
                                      ;                +-------------+ $4000-RAM_SIZE
                                      ;                |     RAM     |
                                      ;                +-------------+ $4000
                                      ;                |             |
                                      ;                |    Flash    |
                                      ;                |   Page D    |
                                      ;                |             |
                                      ;                +-------------+ $8000
                                      ;                |             |
                                      ;                |    Flash    |
                                      ;                |   Page E/   |
                                      ;                |   window    |
                                      ;                +-------------+ $C000
                                      ;                |             |
                                      ;                |    Code     |
                                      ;                |   Page F    |
                                      ;                |             |
                                      ;                +-------------+ $10000
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                      S12G
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $4000-RAM_SIZE
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $3F80
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $4000
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;MCU (S12G32, S12G64, S12G128, or S12G240)
                                      ;RAM or flash
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                                              ;Set within bootloader code
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Sizes:
002BB8 0F6BB8 -> $0400                MMAP_REG_SIZE           EQU      $0400  ;  1k
002BB8 0F6BB8 -> $1000                MMAP_EEPROM_SIZE        EQU      $1000  ;  4k
002BB8 0F6BB8 -> $2000                MMAP_RAM_SIZE           EQU      $2000  ;  8k
002BB8 0F6BB8 -> $20000               MMAP_FLASH_SIZE         EQU     $20000  ;128k
                                      ;# Memory Locations
002BB8 0F6BB8 -> $0000                MMAP_REG_START          EQU     $0000
002BB8 0F6BB8 -> $0400                MMAP_REG_END            EQU     $0400
002BB8 0F6BB8 -> $0400                MMAP_EEPROM_START       EQU     $0400
002BB8 0F6BB8 -> $1400                MMAP_EEPROM_END         EQU     $0400+MMAP_EEPROM_SIZE
002BB8 0F6BB8 -> $2000                MMAP_RAM_START          EQU     $4000-MMAP_RAM_SIZE
002BB8 0F6BB8 -> $4000                MMAP_RAM_END            EQU     $4000
002BB8 0F6BB8 -> $4000                MMAP_FLASH_START        EQU     $4000
002BB8 0F6BB8 -> $10000               MMAP_FLASH_END          EQU     $10000
                                      ;# Vector table
002BB8 0F6BB8 -> $3F80                VECTAB_START            EQU     $3F80
002BB8 0F6BB8 -> $3F80                VECTAB_START_LIN        EQU     $003F80
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
002A6A 0F6A6A -> $2A6A                MMAP_VARS_END           EQU     *
002A6A 0F6A6A -> $F6A6A               MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
00240A 0F640A -> $240A                MMAP_CODE_END           EQU     *
00240A 0F640A -> $F640A               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                MMAP_TABS_END           EQU     *
002BB8 0F6BB8 -> $F6BB8               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
002BB8 0F6BB8 -> $2A73                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
002BB8 0F6BB8 -> $2A8E                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
002A6A 0F6A6A -> $2A6A                SSTACK_VARS_END         EQU     *
002A6A 0F6A6A -> $F6A6A               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
00240A 0F640A -> $240A                SSTACK_CODE_END         EQU     *
00240A 0F640A -> $F640A               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
002BB8 0F6BB8 -> $2BB8                SSTACK_TABS_END         EQU     *
002BB8 0F6BB8 -> $F6BB8               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
                                      ;CPU
002BB8 0F6BB8 -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
002BB8 0F6BB8 -> $0040                ISTACK_CCR              EQU     %0100_0000
002BB8 0F6BB8 -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
002A6A 0F6A6A -> $2A6A                ISTACK_TOP              EQU     *
002A6A 0F6A6A                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
002A73 0F6A73                                                 DS      SSTACK_DEPTH
002A8E 0F6A8E -> $2A8E                ISTACK_BOTTOM           EQU     *
002A8E 0F6A8E -> $2A8E                ISTACK_VARS_END         EQU     *
002A8E 0F6A8E -> $F6A8E               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
00240A 0F640A -> $240A                ISTACK_CODE_END         EQU     *
00240A 0F640A -> $F640A               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
002BB8 0F6BB8 -> $2BB8                ISTACK_TABS_END         EQU     *
002BB8 0F6BB8 -> $F6BB8               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
002BB8 0F6BB8 -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
002BB8 0F6BB8 -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
002BB8 0F6BB8 -> $5800                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A8E 0F6A8E                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
002A8E 0F6A8E -> $2A8E                CLOCK_VARS_END          EQU     *
002A8E 0F6A8E -> $F6A8E               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
00240A 0F640A -> $2965                CLOCK_ISR               EQU     RESET_ISR_FATAL
00240A 0F640A -> $240A                CLOCK_CODE_END          EQU     *
00240A 0F640A -> $F640A               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                CLOCK_TABS_END          EQU     *
002BB8 0F6BB8 -> $F6BB8               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
002BB8 0F6BB8 -> $003C                COP_CTLREG              EQU     CPMUCOP
                                      ;#Restart register
002BB8 0F6BB8 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A8E 0F6A8E                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
002A8E 0F6A8E -> $2A8E                COP_VARS_END            EQU     *
002A8E 0F6A8E -> $F6A8E               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00240A 0F640A -> $240A                COP_CODE_END            EQU     *
00240A 0F640A -> $F640A               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                COP_TABS_END            EQU     *
002BB8 0F6BB8 -> $F6BB8               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     unasigned                                                     #
                                      ;#      IC5:     BDM (capture posedges on BKGD pin)                            #
                                      ;#      IC6/OC5: BDM (capture negedges on BKGD pin/toggle BKGD pin)            #
                                      ;#      OC7:     BDM (toggle BKGD pin/timeouts)                                #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
002BB8 0F6BB8 -> $0001                TIM_DIV2_OFF            EQU     1       ;default no clock divider
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
002BB8 0F6BB8 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
002BB8 0F6BB8 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
002BB8 0F6BB8 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
002BB8 0F6BB8 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
002BB8 0F6BB8 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
002BB8 0F6BB8 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
002BB8 0F6BB8 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
002BB8 0F6BB8 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
002BB8 0F6BB8 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A8E 0F6A8E                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
002A8E 0F6A8E -> $2A8E                TIM_VARS_END            EQU     *
002A8E 0F6A8E -> $F6A8E               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00240A 0F640A -> $240A                TIM_CODE_END            EQU     *
00240A 0F640A -> $F640A               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                TIM_TABS_END            EQU     *
002BB8 0F6BB8 -> $F6BB8               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - LED - LED Driver (S12G-Micro-EVB)                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C(X) MCU  #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module controls the LED on the OpenBDM Pod.                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
002BB8 0F6BB8 -> $0008                LED_PORT                EQU     PORTE
002BB8 0F6BB8 -> $0002                LED_RED                 EQU     PE1
002BB8 0F6BB8 -> $0001                LED_GREEN               EQU     PE0
002BB8 0F6BB8 -> $0003                LED_ALL                 EQU     LED_GREEN|LED_RED
002BB8 0F6BB8 -> $0001                LED_BUSY                EQU     LED_GREEN
002BB8 0F6BB8 -> $0002                LED_COMERR              EQU     LED_RED
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A8E 0F6A8E                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
002A8E 0F6A8E -> $2A8E                LED_VARS_END            EQU     *
002A8E 0F6A8E -> $F6A8E               LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
00240A 0F640A -> $240A                LED_CODE_END            EQU     *
00240A 0F640A -> $F640A               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
002BB8 0F6BB8 -> $2BB8                LED_TABS_END            EQU     *
002BB8 0F6BB8 -> $F6BB8               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - The bus clock must be set to 24.576MHz                                 #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - changed selection of detectable baud rates                           #
                                      ;#      - stop baud rate detection when receiving a corret character           #
                                      ;#      - stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF reminder intervall
002BB8 0F6BB8 -> $0EE6                SCI_XONXOFF_REMINDER    EQU     (10*CLOCK_BUS_FREQ)/65536
                                      ;RTS/CTS pins
                                      ;Delay counter
                                      ;-------------
002BB8 0F6BB8 -> $0003                SCI_DLY_OC              EQU     $3              ;default is OC3
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character
                                      ;Detect SUSPEND character
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;ECT or TIM (SCI_BD_ECT or SCI_BD_TIM)
                                      ;Input capture channels
002BB8 0F6BB8 -> $0000                SCI_BD_ICPE             EQU     $0              ;default is IC0
002BB8 0F6BB8 -> $0001                SCI_BD_ICNE             EQU     $1              ;default is IC1
002BB8 0F6BB8 -> $0000                SCI_BD_IC               EQU     $0              ;default is IC0
                                      ;Output compare channels
                                      ;Log captured BD pulse length
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Enable error signaling (if enabled, macros SCI_ERRSIG_ON and SCI_ERRSIG_OFF must be defined)
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;.MC9S12DP25625 SCI IRQ workaround (MUCts00510)
                                      ;----------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
002BB8 0F6BB8 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
002BB8 0F6BB8 -> $0516                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
002BB8 0F6BB8 -> $028B                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
002BB8 0F6BB8 -> $0146                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
002BB8 0F6BB8 -> $00D9                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
002BB8 0F6BB8 -> $00A3                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
002BB8 0F6BB8 -> $006D                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
002BB8 0F6BB8 -> $0051                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
002BB8 0F6BB8 -> $0036                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
002BB8 0F6BB8 -> $0029                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
002BB8 0F6BB8 -> $001B                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
002BB8 0F6BB8 -> $0014                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
002BB8 0F6BB8 -> $000E                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
002BB8 0F6BB8 -> $000A                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
002BB8 0F6BB8 -> $00A3                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
002BB8 0F6BB8 -> $1999                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
002BB8 0F6BB8 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
002BB8 0F6BB8 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
002BB8 0F6BB8 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
002BB8 0F6BB8 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
002BB8 0F6BB8 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
002BB8 0F6BB8 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
002BB8 0F6BB8 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
002BB8 0F6BB8 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
002BB8 0F6BB8 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
002BB8 0F6BB8 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
002BB8 0F6BB8 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
002BB8 0F6BB8 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
002BB8 0F6BB8 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
002BB8 0F6BB8 -> $0007                SCI_TXBUF_MASK          EQU     $07             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
002BB8 0F6BB8 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
002BB8 0F6BB8 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
002BB8 0F6BB8 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
002BB8 0F6BB8 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
002BB8 0F6BB8 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
002BB8 0F6BB8 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
002BB8 0F6BB8 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
002BB8 0F6BB8 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup
002BB8 0F6BB8 -> $0001                SCI_SET_TIOS            EQU     1
002BB8 0F6BB8 -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
002BB8 0F6BB8 -> $0001                SCI_SET_TCTL3           EQU     1
002BB8 0F6BB8 -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
002BB8 0F6BB8 -> $0001                SCI_SET_TIOS            EQU     1
002BB8 0F6BB8 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
                                      ;#Baud rate detection
002BB8 0F6BB8 -> $0008                SCI_BD_RECOVCNT_INIT    EQU     8
002BB8 0F6BB8 -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A8E 0F6A8E                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
002A8E 0F6A8E -> $2A8E                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
002A8E 0F6A8E                                                 ALIGN   1
                                      ;#Receive buffer
002A8E 0F6A8E                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
002AAE 0F6AAE                         SCI_RXBUF_IN            DS      1               ;points to the next free space
002AAF 0F6AAF                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
002AB0 0F6AB0                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
002AB8 0F6AB8                         SCI_TXBUF_IN            DS      1               ;points to the next free space
002AB9 0F6AB9                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
002ABA 0F6ABA                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
002ABC 0F6ABC -> $2ABC                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
002ABD 0F6ABD                                                 UNALIGN 1
                                      ;#Flags
002ABD 0F6ABD -> $2ABC                SCI_FLGS                EQU     ((SCI_VARS_START&1)*SCI_AUTO_LOC1)+((~SCI_VARS_START&1)*SCI_AUTO_LOC2)
002ABD 0F6ABD                                                 UNALIGN (~SCI_AUTO_LOC1&1)
                                      ;#XON/XOFF reminder count
                                      ;#Baud rate detection registers
                                      ;SCI_BD_RECOVCNT        DS      1               ;recover counter
002ABD 0F6ABD                         SCI_BD_LIST             DS      1               ;list of potential baud rates
                                      ;#BD log buffer
002ABE 0F6ABE                         SCI_BD_LOG_IDX          DS      2
002AC0 0F6AC0                         SCI_BD_LOG_BUF          DS      4*32
002B40 0F6B40 -> $2B40                SCI_BD_LOG_BUF_END      EQU     *
002B40 0F6B40 -> $2B40                SCI_VARS_END            EQU     *
002B40 0F6B40 -> $F6B40               SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00240A 0F640A                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
00240A 0F640A -> $240A                SCI_TX_NB               EQU     *
                                                              ;Save registers (data in B)
00240A 0F640A 35                                              PSHY
00240B 0F640B 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
00240C 0F640C CD 2A B0                                        LDY     #SCI_TXBUF
00240F 0F640F B6 2A B8                                        LDAA    SCI_TXBUF_IN
002412 0F6412 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
002414 0F6414 42                                              INCA                                            ;increment index
002415 0F6415 84 07                                           ANDA    #SCI_TXBUF_MASK
002417 0F6417 B1 2A B9                                        CMPA    SCI_TXBUF_OUT
00241A 0F641A 27 1B                                           BEQ     SCI_TX_NB_1                             ;buffer is full
                                                              ;Update buffer
00241C 0F641C 7A 2A B8                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
00241F 0F641F 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
002424 0F6424 MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002424 0F6424 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002427 0F6427 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002429 0F6429 8F 2A 89                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00242C 0F642C 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00242E 0F642E 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002430 0F6430 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002431 0F6431 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002432 0F6432 -> $2432                DONE                    EQU     *                                                (SSTACK_PREPULL)
002432 0F6432 32                                              PULA
002433 0F6433 31                                              PULY
                                                              ;Signal success
002434 0F6434 14 01                                           SEC
                                                              ;Done
002436 0F6436 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
002437 0F6437 MACRO                   SCI_TX_NB_1             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002437 0F6437 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00243A 0F643A 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00243C 0F643C 8F 2A 89                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00243F 0F643F 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002441 0F6441 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002443 0F6443 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002444 0F6444 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002445 0F6445 -> $2445                DONE                    EQU     *                                                (SSTACK_PREPULL)
002445 0F6445 32                                              PULA
002446 0F6446 31                                              PULY
                                                              ;Signal failure
002447 0F6447 10 FE                                           CLC
                                                              ;Done
002449 0F6449 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
00244A 0F644A -> $244A                SCI_TX_BL               EQU     *
00244A 0F644A MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00244A 0F644A 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00244C 0F644C                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00244C 0F644C 07 BC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00244E 0F644E 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
002450 0F6450 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
002452 0F6452 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
002452 0F6452 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002455 0F6455 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002457 0F6457 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00245A 0F645A 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00245C 0F645C 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00245E 0F645E 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
00245F 0F645F 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
002460 0F6460 -> $2460                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPULL)
002460 0F6460 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
002461 0F6461 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
002461 0F6461 8F 2A 73                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
002464 0F6464 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
002466 0F6466 8F 2A 8E                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
002469 0F6469 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00246B 0F646B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00246B 0F646B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002470 0F6470 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002475 0F6475 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
002477 0F6477 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
002479 0F6479 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00247A 0F647A 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00247B 0F647B -> $247B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00247B 0F647B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00247B 0F647B 8F 2A 78                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00247E 0F647E 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002480 0F6480 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002483 0F6483 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002485 0F6485 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/SSTACK_PREPUSH)
002487 0F6487 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
002488 0F6488 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
002489 0F6489 -> $2489                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPUSH)
002489 0F6489 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissionsare complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00248B 0F648B -> $248B                SCI_TX_DONE_NB          EQU     *
                                                              ;Save registers
00248B 0F648B 3B                                              PSHD
                                                              ;Check TX queue
00248C 0F648C FC 2A B8                                        LDD     SCI_TXBUF_IN
00248F 0F648F 18 17                                           CBA
002491 0F6491 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
002493 0F6493 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2 ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
002497 0F6497 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002497 0F6497 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00249A 0F649A 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00249C 0F649C 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00249F 0F649F 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0024A1 0F64A1 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0024A3 0F64A3 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0024A4 0F64A4 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0024A5 0F64A5 -> $24A5                DONE                    EQU     *                                                (SSTACK_PREPULL)
0024A5 0F64A5 3A                                              PULD
                                                              ;Signal failure
0024A6 0F64A6 10 FE                                           CLC
                                                              ;Done
0024A8 0F64A8 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
0024A9 0F64A9 MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0024A9 0F64A9 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0024AC 0F64AC 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0024AE 0F64AE 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0024B1 0F64B1 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0024B3 0F64B3 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0024B5 0F64B5 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0024B6 0F64B6 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0024B7 0F64B7 -> $24B7                DONE                    EQU     *                                                (SSTACK_PREPULL)
0024B7 0F64B7 3A                                              PULD
                                                              ;Signal failure
0024B8 0F64B8 14 01                                           SEC
                                                              ;Done
0024BA 0F64BA 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0024BB 0F64BB -> $24BB                SCI_TX_DONE_BL          EQU     *
0024BB 0F64BB MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0024BB 0F64BB 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0024BD 0F64BD                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0024BD 0F64BD 07 CC                                           JOBSR   \1                                               (SCI_MAKE_BL)
0024BF 0F64BF 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0024C1 0F64C1 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0024C3 0F64C3 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0024C3 0F64C3 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0024C6 0F64C6 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0024C8 0F64C8 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0024CB 0F64CB 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0024CD 0F64CD 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0024CF 0F64CF 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
0024D0 0F64D0 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
0024D1 0F64D1 -> $24D1                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPULL)
0024D1 0F64D1 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0024D2 0F64D2 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0024D2 0F64D2 8F 2A 73                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0024D5 0F64D5 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0024D7 0F64D7 8F 2A 8E                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0024DA 0F64DA 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0024DC 0F64DC MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0024DC 0F64DC 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0024E1 0F64E1 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0024E6 0F64E6 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0024E8 0F64E8 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0024EA 0F64EA 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0024EB 0F64EB 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0024EC 0F64EC -> $24EC                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0024EC 0F64EC MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0024EC 0F64EC 8F 2A 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0024EF 0F64EF 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0024F1 0F64F1 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0024F4 0F64F4 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0024F6 0F64F6 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/SSTACK_PREPUSH)
0024F8 0F64F8 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
0024F9 0F64F9 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
0024FA 0F64FA -> $24FA                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPUSH)
0024FA 0F64FA 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
0024FC 0F64FC -> $24FC                SCI_TX_READY_NB         EQU     *
                                                              ;Save registers
0024FC 0F64FC 3B                                              PSHD
                                                              ;Check if there is room for this entry
0024FD 0F64FD FC 2A B8                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
002500 0F6500 42                                              INCA
002501 0F6501 84 07                                           ANDA    #SCI_TXBUF_MASK
002503 0F6503 B1 2A B9                                        CMPA    SCI_TXBUF_OUT
002506 0F6506 27 12                                           BEQ     SCI_TX_READY_NB_1                               ;buffer is full
                                                              ;Restore registers
002508 0F6508 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002508 0F6508 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00250B 0F650B 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00250D 0F650D 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002510 0F6510 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002512 0F6512 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002514 0F6514 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002515 0F6515 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002516 0F6516 -> $2516                DONE                    EQU     *                                                (SSTACK_PREPULL)
002516 0F6516 3A                                              PULD
                                                              ;Done
002517 0F6517 14 01                                           SEC
002519 0F6519 3D                                              RTS
                                                              ;TX buffer is full
00251A 0F651A MACRO                   SCI_TX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00251A 0F651A 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00251D 0F651D 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00251F 0F651F 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002522 0F6522 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002524 0F6524 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002526 0F6526 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002527 0F6527 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002528 0F6528 -> $2528                DONE                    EQU     *                                                (SSTACK_PREPULL)
002528 0F6528 3A                                              PULD
                                                              ;Done
002529 0F6529 10 FE                                           CLC
00252B 0F652B 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00252C 0F652C -> $252C                SCI_TX_READY_BL         EQU     *
00252C 0F652C MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00252C 0F652C 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00252E 0F652E                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00252E 0F652E 07 CC                                           JOBSR   \1                                               (SCI_MAKE_BL)
002530 0F6530 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
002532 0F6532 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
002534 0F6534 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
002534 0F6534 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002537 0F6537 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002539 0F6539 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00253C 0F653C 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00253E 0F653E 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002540 0F6540 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
002541 0F6541 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
002542 0F6542 -> $2542                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPULL)
002542 0F6542 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
002543 0F6543 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
002543 0F6543 8F 2A 73                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
002546 0F6546 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
002548 0F6548 8F 2A 8E                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00254B 0F654B 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00254D 0F654D MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00254D 0F654D 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002552 0F6552 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002557 0F6557 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
002559 0F6559 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00255B 0F655B 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00255C 0F655C 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00255D 0F655D -> $255D                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00255D 0F655D MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00255D 0F655D 8F 2A 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002560 0F6560 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002562 0F6562 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002565 0F6565 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002567 0F6567 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/SSTACK_PREPUSH)
002569 0F6569 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
00256A 0F656A 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
00256B 0F656B -> $256B                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPUSH)
00256B 0F656B 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
00256D 0F656D -> $256D                SCI_RX_NB               EQU     *
                                                              ;Save registers
00256D 0F656D 34                                              PSHX
                                                              ;Check if there is data in the RX queue
00256E 0F656E FC 2A AE                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
002571 0F6571 18 16                                           SBA                                             ;A=in-out
002573 0F6573 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
002575 0F6575 84 1F                                           ANDA    #SCI_RXBUF_MASK
002577 0F6577 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
002579 0F6579 27 32                                           BEQ     SCI_RX_NB_3                             ;unblock flow control
                                                              ;Pull entry from the RX queue (out-index in B)
00257B 0F657B CE 2A 8E                SCI_RX_NB_1             LDX     #SCI_RXBUF
00257E 0F657E EE E5                                           LDX     B,X
002580 0F6580 CB 02                                           ADDB    #$02                                    ;increment out pointer
002582 0F6582 C4 1F                                           ANDB    #SCI_RXBUF_MASK
002584 0F6584 7B 2A AF                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
002587 0F6587 B7 54                                           TFR     X, D
                                                              ;Restore registers
002589 0F6589 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002589 0F6589 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00258C 0F658C 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00258E 0F658E 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002591 0F6591 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002593 0F6593 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002595 0F6595 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002596 0F6596 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002597 0F6597 -> $2597                DONE                    EQU     *                                                (SSTACK_PREPULL)
002597 0F6597 30                                              PULX
                                                              ;Done
002598 0F6598 14 01                                           SEC
00259A 0F659A 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
00259B 0F659B MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00259B 0F659B 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00259E 0F659E 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0025A0 0F65A0 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0025A3 0F65A3 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0025A5 0F65A5 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0025A7 0F65A7 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0025A8 0F65A8 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0025A9 0F65A9 -> $25A9                DONE                    EQU     *                                                (SSTACK_PREPULL)
0025A9 0F65A9 30                                              PULX
                                                              ;Done
0025AA 0F65AA 10 FE                                           CLC
0025AC 0F65AC 3D                                              RTS
                                                              ;Unblock flow control (out-index in B, CCR in X)
0025AD 0F65AD -> $25AD                SCI_RX_NB_3             EQU     *
0025AD 0F65AD MACRO                                           SCI_ASSERT_CTS
                                      ;#Assert CTS (allow incoming data)                                               (SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_ASSERT_CTS)
0025AD 0F65AD 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (SCI_ASSERT_CTS)
0025B1 0F65B1 MACRO                                           SCI_SEND_XONXOFF
0025B1 0F65B1 20 C8                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
0025B3 0F65B3 -> $25B3                SCI_RX_BL               EQU     *
0025B3 0F65B3 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0025B3 0F65B3 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0025B5 0F65B5                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0025B5 0F65B5 07 B6                                           JOBSR   \1                                               (SCI_MAKE_BL)
0025B7 0F65B7 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0025B9 0F65B9 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0025BB 0F65BB MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0025BB 0F65BB 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0025BE 0F65BE 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0025C0 0F65C0 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0025C3 0F65C3 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0025C5 0F65C5 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0025C7 0F65C7 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
0025C8 0F65C8 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
0025C9 0F65C9 -> $25C9                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPULL)
0025C9 0F65C9 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0025CA 0F65CA MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0025CA 0F65CA 8F 2A 73                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0025CD 0F65CD 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0025CF 0F65CF 8F 2A 8E                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0025D2 0F65D2 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0025D4 0F65D4 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0025D4 0F65D4 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0025D9 0F65D9 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0025DE 0F65DE 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0025E0 0F65E0 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0025E2 0F65E2 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0025E3 0F65E3 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0025E4 0F65E4 -> $25E4                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0025E4 0F65E4 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0025E4 0F65E4 8F 2A 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0025E7 0F65E7 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0025E9 0F65E9 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0025EC 0F65EC 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0025EE 0F65EE 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/SSTACK_PREPUSH)
0025F0 0F65F0 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
0025F1 0F65F1 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
0025F2 0F65F2 -> $25F2                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPUSH)
0025F2 0F65F2 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
0025F4 0F65F4 -> $25F4                SCI_RX_READY_NB         EQU     *
                                                              ;Save registers
0025F4 0F65F4 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
0025F5 0F65F5 FC 2A AE                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
0025F8 0F65F8 18 17                                           CBA
0025FA 0F65FA 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
0025FC 0F65FC MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0025FC 0F65FC 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0025FF 0F65FF 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002601 0F6601 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002604 0F6604 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002606 0F6606 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002608 0F6608 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002609 0F6609 00                      OF                      BGND                                                     (SSTACK_PREPULL)
00260A 0F660A -> $260A                DONE                    EQU     *                                                (SSTACK_PREPULL)
00260A 0F660A 3A                                              PULD
                                                              ;Done
00260B 0F660B 14 01                                           SEC
00260D 0F660D 3D                                              RTS
                                                              ;RX buffer is empty
00260E 0F660E MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00260E 0F660E 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002611 0F6611 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002613 0F6613 8F 2A 8A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002616 0F6616 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002618 0F6618 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
00261A 0F661A 00                      UF                      BGND                                                     (SSTACK_PREPULL)
00261B 0F661B 00                      OF                      BGND                                                     (SSTACK_PREPULL)
00261C 0F661C -> $261C                DONE                    EQU     *                                                (SSTACK_PREPULL)
00261C 0F661C 3A                                              PULD
                                                              ;Done
00261D 0F661D 10 FE                                           CLC
00261F 0F661F 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
002620 0F6620 -> $2620                SCI_RX_READY_BL         EQU     *
002620 0F6620 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
002620 0F6620 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
002622 0F6622                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
002622 0F6622 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
002624 0F6624 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
002626 0F6626 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
002628 0F6628 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
002628 0F6628 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00262B 0F662B 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00262D 0F662D 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002630 0F6630 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002632 0F6632 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
002634 0F6634 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
002635 0F6635 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPULL)
002636 0F6636 -> $2636                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPULL)
002636 0F6636 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
002637 0F6637 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
002637 0F6637 8F 2A 73                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00263A 0F663A 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00263C 0F663C 8F 2A 8E                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00263F 0F663F 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
002641 0F6641 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002641 0F6641 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002646 0F6646 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00264B 0F664B 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00264D 0F664D 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00264F 0F664F 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
002650 0F6650 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
002651 0F6651 -> $2651                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
002651 0F6651 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
002651 0F6651 8F 2A 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002654 0F6654 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002656 0F6656 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
002659 0F6659 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00265B 0F665B 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/SSTACK_PREPUSH)
00265D 0F665D 00                      UF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
00265E 0F665E 00                      OF                      BGND                                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
00265F 0F665F -> $265F                DONE                    EQU     *                                                (SCI_MAKE_BL/SSTACK_PREPUSH)
00265F 0F665F 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
002661 0F6661 -> $2661                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
002661 0F6661 35                                              PSHY                                    ;push Y onto the SSTACK
002662 0F6662 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
002663 0F6663 5C C8                                           STD     SCIBDH                          ;set baud rate
002665 0F6665 CD 19 99                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
002668 0F6668 13                                              EMUL                                    ;D*Y -> Y:D
002669 0F6669 7C 2A BA                                        STD     SCI_BVAL
                                                              ;Clear input buffer
00266C 0F666C 18 03 00 00 2A AE                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
002672 0F6672 MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002672 0F6672 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002675 0F6675 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002677 0F6677 8F 2A 88                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00267A 0F667A 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00267C 0F667C 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
00267E 0F667E 00                      UF                      BGND                                                     (SSTACK_PREPULL)
00267F 0F667F 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002680 0F6680 -> $2680                DONE                    EQU     *                                                (SSTACK_PREPULL)
002680 0F6680 3A                                              PULD                                    ;pull D from the SSTACK
002681 0F6681 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
002682 0F6682 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTL polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
002683 0F6683 -> $2683                SCI_ISR_DELAY           EQU     *
002683 0F6683 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Poll RTS (retrigger request in C-flag)
002685 0F6685 1F 2A BC 40 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_POLL_RTS, SCI_ISR_DELAY_2            ;no polling required
                                                              ;BRSET  SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now set
00268A 0F668A 1F 02 50 01 04                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now set
00268F 0F668F 14 01                                           SEC                                                             ;retrigger
002691 0F6691 20 05                                           JOB     SCI_ISR_DELAY_2
002693 0F6693 18 0B AC 00 CB          SCI_ISR_DELAY_1         MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
002698 0F6698 -> $2698                SCI_ISR_DELAY_2         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
002698 0F6698 24 1E                                           BCC     SCI_ISR_DELAY_7
00269A 0F669A MACRO                                           SCI_RESET_DELAY
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
00269A 0F669A MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
00269A 0F669A MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00269A 0F669A 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00269F 0F669F DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
0026A1 0F66A1 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
0026A4 0F66A4 B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
0026A6 0F66A6 C7                                              CLRB                                                     (SCI_RESET_DELAY)
0026A7 0F66A7 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
0026A7 0F66A7 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
0026A9 0F66A9 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
0026AB 0F66AB -> $26AB                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
0026AB 0F66AB MACRO                   SCI_ISR_DELAY_6         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0026AB 0F66AB 8F 2A 6A                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
0026AE 0F66AE 25 06                                           BLO     OF                                               (ISTACK_RTI)
0026B0 0F66B0 8F 2A 85                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
0026B3 0F66B3 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0026B5 0F66B5 0B                                              RTI                                                      (ISTACK_RTI)
0026B6 0F66B6 00                      OF                      BGND                                                     (ISTACK_RTI)
0026B7 0F66B7 00                      UF                      BGND                                                     (ISTACK_RTI)
0026B8 0F66B8 MACRO                   SCI_ISR_DELAY_7         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
0026B8 0F66B8 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
0026B8 0F66B8 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
0026B8 0F66B8 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
0026BB 0F66BB 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
0026BD 0F66BD 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
0026C0 0F66C0 -> $26C0                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
0026C0 0F66C0 -> $26C0                                        EQU     *                                                (SCI_STOP_DELAY)
0026C0 0F66C0 20 E9                                           JOB     SCI_ISR_DELAY_6
                                                              ;#Transmit ISR (status flags in A)
0026C2 0F66C2 -> $26C2                SCI_ISR_TX              EQU     *
0026C2 0F66C2 85 80                                           BITA    #TDRE                                   ;check if SCI is ready for new TX data
0026C4 0F66C4 27 4B                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check RTS status
                                                              ;BRSET  SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
0026C6 0F66C6 1F 02 50 01 28                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
0026CB 0F66CB 1C 2A BC 40                                     BSET    SCI_FLGS, #SCI_FLG_POLL_RTS             ;request RTS polling
0026CF 0F66CF MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (approx. 2 SCI frames)                                             (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
0026CF 0F66CF 4E 4C 08 1E                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
0026D3 0F66D3 MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY)
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY)
0026D3 0F66D3 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
0026D3 0F66D3 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0026D3 0F66D3 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0026D8 0F66D8 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_RESET_DELAY)
0026DA 0F66DA 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_RESET_DELAY)
0026DD 0F66DD B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_RESET_DELAY)
0026DF 0F66DF C7                                              CLRB                                                     (SCI_START_DELAY/SCI_RESET_DELAY)
0026E0 0F66E0 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0026E0 0F66E0 D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0026E2 0F66E2 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0026E4 0F66E4 -> $26E4                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_RESET_DELAY)
0026E4 0F66E4 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN)
0026E4 0F66E4 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/TIM_EN)
                                      ;############################################################################### (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_0_0_1_1_1_0_0, TIOS         ;default setup   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  0=input capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  1=output compare (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_1_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0026E4 0F66E4 18 0B 08 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0026E9 0F66E9 4C 4C 08                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0026EC 0F66EC 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0026F1 0F66F1 -> $26F1                DONE                    EQU     *                                                (SCI_START_DELAY)
0026F1 0F66F1 20 19                                           JOB     SCI_ISR_TX_3                            ;stop transmitting
                                                              ;Check TX buffer
0026F3 0F66F3 FC 2A B8                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
0026F6 0F66F6 18 17                                           CBA
0026F8 0F66F8 27 12                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
0026FA 0F66FA CD 2A B0                                        LDY     #SCI_TXBUF
0026FD 0F66FD 18 0D ED 00 CF                                  MOVB    B,Y ,SCIDRL
                                                              ;Increment index
002702 0F6702 52                                              INCB
002703 0F6703 C4 07                                           ANDB    #SCI_TXBUF_MASK
002705 0F6705 7B 2A B9                                        STAB    SCI_TXBUF_OUT
002708 0F6708 18 17                                           CBA
00270A 0F670A 26 05                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
00270C 0F670C -> $270C                SCI_ISR_TX_3            EQU     *
00270C 0F670C 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
002711 0F6711 MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
002711 0F6711 8F 2A 6A                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
002714 0F6714 25 06                                           BLO     OF                                               (ISTACK_RTI)
002716 0F6716 8F 2A 85                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
002719 0F6719 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00271B 0F671B 0B                                              RTI                                                      (ISTACK_RTI)
00271C 0F671C 00                      OF                      BGND                                                     (ISTACK_RTI)
00271D 0F671D 00                      UF                      BGND                                                     (ISTACK_RTI)
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
00271E 0F671E -> $271E                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
00271E 0F671E 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
002720 0F6720 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
002722 0F6722 27 9E                                           BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
002724 0F6724 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
002726 0F6726 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
002728 0F6728 1F 2A BC 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
00272D 0F672D 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
00272F 0F672F 1D 2A BC 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
002733 0F6733 -> $2733                SCI_ISR_RX_1            EQU     *
                                                              ;Check for RX errors (status flags in A, RX data in B)
002733 0F6733 85 07                                           BITA    #(NF|FE|PF)                             ;check for: noise, frame errors, parity errors
002735 0F6735 26 37                                           BNE     <SCI_ISR_RX_8                           ;RX error detected (skip special caracter detection)
                                                              ;No RX error detected (status flags in A, RX data in B)
                                      ;                       DEC     SCI_BD_RECOVCNT                         ;decrement recovery count if >$00
                                      ;                       BCS     <SCI_ISR_RX_2                           ;keep recovery count at $00
                                      ;                       BNE     <SCI_ISR_RX_3                           ;baud rate detection is ongoing
                                      ;                       ;Auto-recover from baud rate detection (status flags in A, RX data in B)
                                      ;                       SCI_ERRSIG_OFF                                  ;clear error signal
                                      ;                       SCI_STOP_BD                                     ;disable baud rate detection
                                      ;SCI_ISR_RX_2           EQU     *-6
                                                              ;Check for control characters (status flags in A, RX data in B)
002737 0F6737 -> $2737                SCI_ISR_RX_3            EQU     *
002737 0F6737 1E 2A BC 04 04                                  BRSET   SCI_FLGS, #SCI_FLG_RX_ESC, SCI_ISR_RX_4 ;charakter is escaped (skip detection)
00273C 0F673C C1 1A                                           CMPB    #SCI_SUSPEND
                                                              ;BLE    <SCI_ISR_RX_11                          ;determine control signal
00273E 0F673E 2F 78                                           BLE     SCI_ISR_RX_11                           ;determine control signal
002740 0F6740 1D 2A BC 04             SCI_ISR_RX_4            BCLR    SCI_FLGS, #SCI_FLG_RX_ESC               ;clear escape marker
                                                              ;Place data into RX queue (status flags in A, RX data in B)
002744 0F6744 B7 46                   SCI_ISR_RX_5            TFR     D, Y                                    ;flags:data -> Y
002746 0F6746 CE 2A 8E                                        LDX     #SCI_RXBUF
002749 0F6749 FC 2A AE                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00274C 0F674C 6D E4                                           STY     A,X
00274E 0F674E 8B 02                                           ADDA    #2
002750 0F6750 84 1F                                           ANDA    #SCI_RXBUF_MASK
002752 0F6752 18 17                                           CBA
002754 0F6754 27 56                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
002756 0F6756 7A 2A AE                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check flow control threshold (in:out in D)
002759 0F6759 18 16                                           SBA
00275B 0F675B 84 1F                                           ANDA    #SCI_RXBUF_MASK
00275D 0F675D 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00275F 0F675F 24 51                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
002761 0F6761 -> $2761                SCI_ISR_RX_6            EQU     *
002761 0F6761 -> $2761                SCI_ISR_RX_7            EQU     *
                                                              ;Done
002761 0F6761 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
002761 0F6761 8F 2A 6A                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
002764 0F6764 25 06                                           BLO     OF                                               (ISTACK_RTI)
002766 0F6766 8F 2A 85                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
002769 0F6769 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00276B 0F676B 0B                                              RTI                                                      (ISTACK_RTI)
00276C 0F676C 00                      OF                      BGND                                                     (ISTACK_RTI)
00276D 0F676D 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;RX error detected (status flags in A, RX data in B)
00276E 0F676E MACRO                   SCI_ISR_RX_8            SCI_ERRSIG_ON
                                      ;#Turn on error signaling                                                        (SCI_ERRSIG_ON)
                                      ; args:   none                                                                   (SCI_ERRSIG_ON)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_ON)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_ON)
00276E 0F676E MACRO                                           LED_COMERR_ON                                            (SCI_ERRSIG_ON)
                                      ;#Start signaling communication error                                            (SCI_ERRSIG_ON/LED_COMERR_ON)
00276E 0F676E 4D 08 02                                        BCLR    LED_PORT, #LED_COMERR                            (SCI_ERRSIG_ON/LED_COMERR_ON)
002771 0F6771 MACRO                                           SCI_START_BD
                                      ;Start baud rate detection (I-bit must be set)                                   (SCI_START_BD)
                                      ; args:   none                                                                   (SCI_START_BD)
                                      ; SSTACK: none                                                                   (SCI_START_BD)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD)
002771 0F6771 F7 2A BD                                        TST     SCI_BD_LIST                                      (SCI_START_BD)
002774 0F6774 26 34                                           BNE     DONE                                    ;baud rate detection is already running (SCI_START_BD)
                                                              ;Clear BD log                                            (SCI_START_BD)
002776 0F6776 MACRO                                           SCI_BD_CLEAR_LOG                                         (SCI_START_BD)
                                      ;Clear BD pulse log                                                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                      ; args:   none                                                                   (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                      ; SSTACK: none                                                                   (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/SCI_BD_CLEAR_LOG)
002776 0F6776 B7 64                                           TFR     Y,D                                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
002778 0F6778 CD 2A C0                                        LDY     #SCI_BD_LOG_BUF                                  (SCI_START_BD/SCI_BD_CLEAR_LOG)
00277B 0F677B 7D 2A BE                                        STY     SCI_BD_LOG_IDX                                   (SCI_START_BD/SCI_BD_CLEAR_LOG)
00277E 0F677E 18 00 71 00 00          LOOP                    MOVW    #$0000, 2,Y+                                     (SCI_START_BD/SCI_BD_CLEAR_LOG)
002783 0F6783 8D 2B 40                                        CPY     #SCI_BD_LOG_BUF_END                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
002786 0F6786 25 F6                                           BLO     LOOP                                             (SCI_START_BD/SCI_BD_CLEAR_LOG)
002788 0F6788 B7 46                                           TFR     D,Y                                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                                              ;Enable timer                                            (SCI_START_BD)
00278A 0F678A MACRO                                           TIM_MULT_EN     ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE))      (SCI_START_BD)
                                      ;############################################################################### (SCI_START_BD/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_BD/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_BD/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%1_0_0_1_1_1_0_0, TIOS         ;default setup   (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  0=input capture (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  1=output compare (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%0_1_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_BD/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_BD/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_BD/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_BD/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_BD/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_BD/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_BD/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_BD/TIM_MULT_EN)
00278A 0F678A 18 0B 03 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_BD/TIM_MULT_EN)
00278F 0F678F 4C 4C 03                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_BD/TIM_MULT_EN)
002792 0F6792 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_BD/TIM_MULT_EN)
                                                              ;Make sure that the timeout bit is set                   (SCI_START_BD)
002797 0F6797 4E 4E 04 07                                     BRSET   TFLG1, #(1<<SCI_BD_OC), SKIP                     (SCI_START_BD)
                                                              ;SEI                                                     (SCI_START_BD)
00279B 0F679B MACRO                                           TIM_SET_DLY_IMM SCI_BD_OC, 6                             (SCI_START_BD)
                                      ;#Setup timer delay                                                              (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ; args: 1: channel number                                                        (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ;       2: delay (in bus cycles)                                                 (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ; SSTACK: none                                                                   (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/TIM_SET_DLY_IMM)
00279B 0F679B CC 00 06                                        LDD     #\2                                              (SCI_START_BD/TIM_SET_DLY_IMM)
00279E 0F679E D3 44                                           ADDD    TCNT            ;RPO                             (SCI_START_BD/TIM_SET_DLY_IMM)
0027A0 0F67A0 5C 54                                           STD     (TC0+(2*\1))    ;PWO                             (SCI_START_BD/TIM_SET_DLY_IMM)
                                                              ;CLI                                                     (SCI_START_BD)
0027A2 0F67A2 -> $27A2                SKIP                    EQU     *                                                (SCI_START_BD)
                                                              ;Reset baud rate list and recover counter                (SCI_START_BD)
0027A2 0F67A2 18 0B FF 2A BD                                  MOVB    #SCI_BD_LIST_INIT, SCI_BD_LIST                   (SCI_START_BD)
                                                              ;Start edge detection                                    (SCI_START_BD)
0027A7 0F67A7 MACRO                                           SCI_BD_START_EDGE_DETECT                                 (SCI_START_BD)
                                      ;Start edge detection                                                            (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;start edge detection (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
0027A7 0F67A7 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ;DONE                   MOVB    #SCI_BD_RECOVCNT_INIT, SCI_BD_RECOVCNT           (SCI_START_BD)
0027AA 0F67AA -> $27AA                DONE                    EQU     *                                                (SCI_START_BD)
0027AA 0F67AA 20 94                                           JOB     SCI_ISR_RX_4                            ;queue RX data
                                                              ;Buffer overflow
0027AC 0F67AC 1C 2A BC 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
0027B0 0F67B0 20 AF                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;RX buffer is getting full
0027B2 0F67B2 MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
0027B2 0F67B2 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (allow RX data) (SCI_DEASSERT_CTS)
0027B6 0F67B6 MACRO                                           SCI_SEND_XONXOFF
0027B6 0F67B6 20 A9                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;Determine control signal (status flags in A, RX data in B)
0027B8 0F67B8 -> $27B8                SCI_ISR_RX_11           EQU     *
                                                              ;Check for SUSPEND (status flags in A, RX data in B)
0027B8 0F67B8 C1 1A                                           CMPB    #SCI_SUSPEND
0027BA 0F67BA 26 05                                           BNE     <SCI_ISR_RX_14                          ;determine control signal
0027BC 0F67BC MACRO                                           SCI_SUSPEND_ACTION
                                      ;Suspend handler                                                                 (SCI_SUSPEND_ACTION)
0027BC 0F67BC MACRO                                           LED_BUSY_OFF                                             (SCI_SUSPEND_ACTION)
                                      ;#Stop busy signal                                                               (SCI_SUSPEND_ACTION/LED_BUSY_OFF)
0027BC 0F67BC 4C 08 01                                        BSET    LED_PORT, #LED_BUSY                              (SCI_SUSPEND_ACTION/LED_BUSY_OFF)
0027BF 0F67BF 20 A0                                           JOB     SCI_ISR_RX_6                            ;done
0027C1 0F67C1 -> $27C1                SCI_ISR_RX_14           EQU     *
                                                              ;Check for BREAK (status flags in A, RX data in B)
0027C1 0F67C1 C1 03                                           CMPB    #SCI_BREAK
0027C3 0F67C3 26 03                                           BNE     <SCI_ISR_RX_15                          ;determine control signal
0027C5 0F67C5 MACRO                                           SCI_BREAK_ACTION
                                      ;############################################################################### (SCI_BREAK_ACTION)
                                      ;# Macros                                                                      # (SCI_BREAK_ACTION)
                                      ;############################################################################### (SCI_BREAK_ACTION)
                                      ;Break handler                                                                   (SCI_BREAK_ACTION)
0027C5 0F67C5 MACRO                                           LED_BUSY_ON                                              (SCI_BREAK_ACTION)
                                      ;#Start busy signal                                                              (SCI_BREAK_ACTION/LED_BUSY_ON)
0027C5 0F67C5 4D 08 01                                        BCLR    LED_PORT, #LED_BUSY                              (SCI_BREAK_ACTION/LED_BUSY_ON)
0027C8 0F67C8 C1 10                   SCI_ISR_RX_15           CMPB    #SCI_DLE
0027CA 0F67CA 26 04                                           BNE     <SCI_ISR_RX_16                          ;done
0027CC 0F67CC 1C 2A BC 04                                     BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;set escape marker
0027D0 0F67D0 20 8F                   SCI_ISR_RX_16           JOB     SCI_ISR_RX_6                            ;done
                                      ;#BD negedge ISR (default IC1)
0027D2 0F67D2 -> $27D2                SCI_ISR_BD_NE           EQU     *
                                                              ;Clear ICNE interrupt
0027D2 0F67D2 MACRO                                           TIM_CLRIF       SCI_BD_ICNE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0027D2 0F67D2 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0027D2 0F67D2 18 0B 02 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
0027D7 0F67D7 DE 52                                           LDX     (TC0+(2*SCI_BD_ICNE))                   ;capture current edge (posedge)
0027D9 0F67D9 DD 50                                           LDY     (TC0+(2*SCI_BD_ICPE))                   ;capture previous edge (posedge)
0027DB 0F67DB D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
0027DD 0F67DD 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
0027DF 0F67DF MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0027DF 0F67DF MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0027DF 0F67DF 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
0027E4 0F67E4 MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
0027E4 0F67E4 8F 2A 85                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
0027E7 0F67E7 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
0027E9 0F67E9 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
0027EB 0F67EB -> $27EB                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
0027EB 0F67EB C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
0027ED 0F67ED 26 70                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
0027EF 0F67EF CC FF FF                                        LDD     #-1
0027F2 0F67F2 18 13                                           EMULS                                           ;-1 * Y => Y:D
0027F4 0F67F4 1A E6                                           LEAX    D,X                                     ;subtract timestamps
                                                              ;Select search tree tree (pulse length in X)
0027F6 0F67F6 CD 2F C0                                        LDY     #SCI_BD_HIGH_PULSE_TREE
0027F9 0F67F9 04 65 2E                                        TBNE    X, SCI_ISR_BD_NEPE_2                    ;parse search tree if pulse length is > 0
0027FC 0F67FC 20 61                                           JOB     SCI_ISR_BD_NEPE_4                       ;discard zero-length pulses (for whatever reasson they may occur)
                                      ;#BD posedge ISR (default IC0)
0027FE 0F67FE -> $27FE                SCI_ISR_BD_PE           EQU     *
                                                              ;Clear ICNE interrupt
0027FE 0F67FE MACRO                                           TIM_CLRIF       SCI_BD_ICPE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0027FE 0F67FE MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0027FE 0F67FE 18 0B 01 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
002803 0F6803 DE 50                                           LDX     (TC0+(2*SCI_BD_ICPE))                   ;capture current edge (posedge)
002805 0F6805 DD 52                                           LDY     (TC0+(2*SCI_BD_ICNE))                   ;capture previous edge (posedge)
002807 0F6807 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
002809 0F6809 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
00280B 0F680B MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00280B 0F680B MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00280B 0F680B 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
002810 0F6810 MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
002810 0F6810 8F 2A 85                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
002813 0F6813 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
002815 0F6815 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
002817 0F6817 -> $2817                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
002817 0F6817 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
002819 0F6819 26 44                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
00281B 0F681B CC FF FF                                        LDD     #-1
00281E 0F681E 18 13                                           EMULS                                           ;-1 * Y => Y:D
002820 0F6820 1A E6                                           LEAX    D,X                                     ;subtract timestamps
002822 0F6822 04 45 3A                                        TBEQ    X, SCI_ISR_BD_NEPE_4                    ;discard zero-length pulses (for whatever reasson they may occur)
                                                              ;Select search tree tree (pulse length in X)
002825 0F6825 CD 2B C8                                        LDY     #SCI_BD_LOW_PULSE_TREE
002828 0F6828 20 00                                           JOB     SCI_ISR_BD_NEPE_2                       ;parse search tree
                                                              ;Log pluse length for debuging (pulse length in X, search tree in Y)
00282A 0F682A MACRO                   SCI_ISR_BD_NEPE_2       SCI_BD_LOG
                                      ;Log BD pulse length                                                             (SCI_BD_LOG)
                                      ; args: X: pulse length                                                          (SCI_BD_LOG)
                                      ;       Y: search tree pointer                                                   (SCI_BD_LOG)
                                      ; SSTACK: none                                                                   (SCI_BD_LOG)
                                      ;         X, and Y are preserved                                                 (SCI_BD_LOG)
00282A 0F682A B7 64                                   TFR     Y,D                                                      (SCI_BD_LOG)
00282C 0F682C FD 2A BE                                LDY     SCI_BD_LOG_IDX                                           (SCI_BD_LOG)
00282F 0F682F 8D 2B 40                                CPY     #SCI_BD_LOG_BUF_END                                      (SCI_BD_LOG)
002832 0F6832 24 07                                   BHS     DONE                                                     (SCI_BD_LOG)
002834 0F6834 6C 71                                   STD     2,Y+                                                     (SCI_BD_LOG)
002836 0F6836 6E 71                                   STX     2,Y+                                                     (SCI_BD_LOG)
002838 0F6838 7D 2A BE                                STY     SCI_BD_LOG_IDX                                           (SCI_BD_LOG)
00283B 0F683B B7 46                   DONE            TFR     D,Y                                                      (SCI_BD_LOG)
                                                              ;Parse tree  (pulse length in X, search tree in Y)
00283D 0F683D MACRO                                           SCI_BD_PARSE
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;# Parse routine                                                               # (SCI_BD_PARSE)
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;#Parse search tree for detected pulse length                                    (SCI_BD_PARSE)
                                      ; args:   Y: root of the search tree                                             (SCI_BD_PARSE)
                                      ;         X: pulse length                                                        (SCI_BD_PARSE)
                                      ; result: D: list of matching baud rates (mirrored in high and low byte)         (SCI_BD_PARSE)
                                      ; SSTACK: 0 bytes                                                                (SCI_BD_PARSE)
                                      ;         X is preserved                                                         (SCI_BD_PARSE)
00283D 0F683D CC 00 00                                LDD     #$0000          ;  2 cycs       ;initialize X            (SCI_BD_PARSE)
002840 0F6840 E7 40                   LOOP            TST     0,Y             ;  3 cycs       ;check if lower boundary exists (SCI_BD_PARSE)
002842 0F6842 27 0A                                   BEQ     DONE            ;1/3 cycs       ;search done             (SCI_BD_PARSE)
002844 0F6844 AE 75                                   CPX     6,Y+            ;  3 cycs       ;check if pulse length is shorter than lower boundary (SCI_BD_PARSE)
002846 0F6846 25 F8                                   BLO     LOOP            ;1/3 cycs       ;pulse length is shorter than lower boundary -> try a shorter range (SCI_BD_PARSE)
002848 0F6848 EC 5C                                   LDD     -4,Y            ;  3 cycs       ;new lowest boundary found -> store valid baud rate field in index X (SCI_BD_PARSE)
00284A 0F684A ED 5E                                   LDY     -2,Y            ;  3 cycs       ;switch to the branch with higher compare values (SCI_BD_PARSE)
00284C 0F684C 26 F2                                   BNE     LOOP            ;1/3 cycs       ;parse branch if it exists (SCI_BD_PARSE)
00284E 0F684E -> $284E                DONE            EQU     *                               ;done, result in X       (SCI_BD_PARSE)
                                                              ;Update list of potential batd rates (matching baud rates in D)
00284E 0F684E 14 10                                           SEI
002850 0F6850 F4 2A BD                                        ANDB    SCI_BD_LIST                             ;remove mismatching baud rates from the list
002853 0F6853 27 17                                           BEQ     SCI_ISR_BD_NEPE_5                       ;no valid baud rate found
002855 0F6855 7B 2A BD                                        STAB    SCI_BD_LIST
                                                              ;Check if baud rate has been determined (potential baud rates in B (not zero))
002858 0F6858 87                                              CLRA
002859 0F6859 42                      SCI_ISR_BD_NEPE_3       INCA
00285A 0F685A 54                                              LSRB
00285B 0F685B 24 FC                                           BCC     SCI_ISR_BD_NEPE_3
00285D 0F685D 27 19                                           BEQ     SCI_ISR_BD_NEPE_6                       ;new baud rate found (index in A)
                                                              ;Done
00285F 0F685F MACRO                   SCI_ISR_BD_NEPE_4       ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00285F 0F685F 8F 2A 6A                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
002862 0F6862 25 06                                           BLO     OF                                               (ISTACK_RTI)
002864 0F6864 8F 2A 85                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
002867 0F6867 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
002869 0F6869 0B                                              RTI                                                      (ISTACK_RTI)
00286A 0F686A 00                      OF                      BGND                                                     (ISTACK_RTI)
00286B 0F686B 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;No valid baud rate found
00286C 0F686C 1F 2A BD FF EE          SCI_ISR_BD_NEPE_5       BRCLR   SCI_BD_LIST, #$FF, SCI_ISR_BD_NEPE_4    ;done
                                                              ;Restart baud rate detection
002871 0F6871 18 0B FF 2A BD                                  MOVB    #$FF, SCI_BD_LIST
002876 0F6876 20 E7                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;New baud rate found (index+1 in A, $00 in B)
002878 0F6878 MACRO                   SCI_ISR_BD_NEPE_6       SCI_STOP_BD
                                      ;Stop baud rate detection                                                        (SCI_STOP_BD)
                                      ; args:   none                                                                   (SCI_STOP_BD)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD)
002878 0F6878 1F 2A BD FF 0E                                  BRCLR   SCI_BD_LIST, #$FF, DONE                 ;baud rate detection already inactive (SCI_STOP_BD)
                                                              ;Stop edge detection                                     (SCI_STOP_BD)
00287D 0F687D MACRO                                           SCI_BD_STOP_EDGE_DETECT                                  (SCI_STOP_BD)
                                      ;Stop edge detection                                                             (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;BCLR   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;stop edge detection (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
00287D 0F687D 4D 4B 09                                        BCLR    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;Disable timer                                           (SCI_STOP_BD)
002880 0F6880 MACRO                                           TIM_MULT_DIS    ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC)) (SCI_STOP_BD)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD/TIM_MULT_DIS)
002880 0F6880 4D 4C 07                                        BCLR    TIE, #\1                                         (SCI_STOP_BD/TIM_MULT_DIS)
002883 0F6883 26 03                                           BNE     DONE                                             (SCI_STOP_BD/TIM_MULT_DIS)
002885 0F6885 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_BD/TIM_MULT_DIS)
002888 0F6888 -> $2888                DONE                    EQU     *                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;                       MOVW    #$0000, SCI_BD_RECOVCNT                 ;clear recovery count and BD list (SCI_STOP_BD)
                                      ;                                                                       ;This must be the last instruction in the macro!!! (SCI_STOP_BD)
                                      ;                                                                       ;See  SCI_ISR_RX_2 (SCI_STOP_BD)
002888 0F6888 79 2A BD                                        CLR     SCI_BD_LIST                             ;clear check list (SCI_STOP_BD)
00288B 0F688B -> $288B                DONE                    EQU     *                                                (SCI_STOP_BD)
                                                              ;Set baud rate (index+1 in A, $00 in B)
00288B 0F688B 48                                              LSLA                                            ;index -> addess offset
00288C 0F688C CE 2B B6                                        LDX     #SCI_BTAB-2                             ;look up prescaler value
00288F 0F688F EC E4                                           LDD     A,X                                     ;look up divider value
002891 0F6891 MACRO                                           SCI_SET_BAUD
                                      ;#Set baud rate                                                                  (SCI_SET_BAUD)
                                      ; args:   D: new SCIBD value                                                     (SCI_SET_BAUD)
                                      ; result: none                                                                   (SCI_SET_BAUD)
                                      ; SSTACK: 6 bytes                                                                (SCI_SET_BAUD)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD)
002891 0F6891 MACRO                                           SSTACK_JOBSR    SCI_SET_BAUD, 6                          (SCI_SET_BAUD)
                                      ;#Check stack and call subroutine                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_SET_BAUD/SSTACK_JOBSR)
002891 0F6891 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
002891 0F6891 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
002894 0F6894 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
002896 0F6896 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
002899 0F6899 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00289B 0F689B 20 02                                           JOB     DONE                                             (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00289D 0F689D 00                      UF                      BGND                                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00289E 0F689E 00                      OF                      BGND                                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00289F 0F689F -> $289F                DONE                    EQU     *                                                (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00289F 0F689F 16 26 61                                        JOBSR   \1                                               (SCI_SET_BAUD/SSTACK_JOBSR)
                                                              ;Clear error signal
0028A2 0F68A2 MACRO                                           SCI_ERRSIG_OFF
                                      ;#Turn off error signaling                                                       (SCI_ERRSIG_OFF)
                                      ; args:   none                                                                   (SCI_ERRSIG_OFF)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_OFF)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_OFF)
0028A2 0F68A2 MACRO                                           LED_COMERR_OFF                                           (SCI_ERRSIG_OFF)
                                      ;#Stop signaling communication error                                             (SCI_ERRSIG_OFF/LED_COMERR_OFF)
0028A2 0F68A2 4C 08 02                                        BSET    LED_PORT, #LED_COMERR                            (SCI_ERRSIG_OFF/LED_COMERR_OFF)
0028A5 0F68A5 20 B8                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
0028A7 0F68A7 -> $28A7                SCI_CODE_END            EQU     *
0028A7 0F68A7 -> $F68A7               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002BB8 0F6BB8                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
002BB8 0F6BB8                                                 ALIGN   1
                                                              ;List of prescaler values
002BB8 0F6BB8 -> $2BB8                SCI_BTAB                EQU     *
002BB8 0F6BB8 01 46                                           DW      SCI_4800
002BBA 0F6BBA 00 D9                                           DW      SCI_7200
002BBC 0F6BBC 00 A3                                           DW      SCI_9600
002BBE 0F6BBE 00 6D                                           DW      SCI_14400
002BC0 0F6BC0 00 51                                           DW      SCI_19200
002BC2 0F6BC2 00 36                                           DW      SCI_28800
002BC4 0F6BC4 00 29                                           DW      SCI_38400
002BC6 0F6BC6 00 1B                                           DW      SCI_57600
002BC8 0F6BC8 -> $2BC8                SCI_BTAB_END            EQU     *
                                                              ;Search tree for low pulses
002BC8 0F6BC8 MACRO                   SCI_BD_LOW_PULSE_TREE   SCI_BD_LOW_PULSE_TREE
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# S12CBase - SCI Baud Detection Search Trees                                  # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Copyright 2009-2012 Dirk Heisswolf                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    families.                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    it under the terms of the GNU General Public License as published by     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    the Free Software Foundation, either version 3 of the License, or        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    (at your option) any later version.                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is distributed in the hope that it will be useful,              # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    GNU General Public License for more details.                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    You should have received a copy of the GNU General Public License        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Description:                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file contains the two search trees which are required for the SCI   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    modules baud rate detection.                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    One is used to determine the set of baud rates that are valid for a      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    certain high pulse.                                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The other one is used to determine the set of baud rates that are valid  # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    for a certain low pulse.                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Each table assigs a set of valid baud rates to a range of pulse lengths. # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    lower boundary <= pulse length < upper boundary -> set of baud rates     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The format of a node entry is the following:                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    start of entry -> | lower boundary  | value of lower boundary            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  BRs   |  BRs   | set of boud rates - twice          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   | pointer to node with longer        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+ boundary value                     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    node node with -> | lower boundary  |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    even lower        +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    boundary value    |  BRs   |  BRs   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Generated on Thu, Nov 15 2012                                               # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Bus clock:              25.00 MHz                                           # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Frame format:           8N1                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Supported baud rates:                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        4800 ( 146)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        7200 (  D9)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        9600 (  A3)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       14400 (  6D)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       19200 (  51)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       28800 (  36)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       38400 (  29)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       57600 (  1B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Low pulse search tree                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_LOW_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    271 ( 10F)      1 . . . . . . . (80)   2001      2       27                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    416 ( 1A0)      1 1 . . . . . . (C0)   1621      1       35                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    542 ( 21E)      1 1 1 . . . . . (E0)   1091      3       44                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    624 ( 270)      . 1 1 . . . . . (60)    428      2       52                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    705 ( 2C1)      2 1 1 . . . . . (E0)    379      4       69                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    813 ( 32D)      2 1 1 1 . . . . (F0)    248      5       86                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    959 ( 3BF)      2 . 1 1 . . . . (B0)     70      6       95                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1058 ( 422)      . . 1 1 . . . . (30)     24      3       99                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1083 ( 43B)      . 2 1 1 . . . . (70)     31      8      108                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1095 ( 447)      . 2 1 1 1 . . . (78)     38      7       98                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1139 ( 473)      3 2 1 1 1 . . . (F8)     36      6      106                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1248 ( 4E0)      3 2 . 1 1 . . . (D8)     15      8      123                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1410 ( 582)      3 2 2 1 1 . . . (F8)      9      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1492 ( 5D4)      . 2 2 1 1 . . . (78)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1573 ( 625)      4 2 2 1 1 . . . (F8)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1626 ( 65A)      4 . 2 1 1 . . . (B8)      4     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1637 ( 665)      4 . 2 1 1 1 . . (BC)      5      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1750 ( 6D6)      4 3 2 1 1 1 . . (FC)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1872 ( 750)      4 3 2 . 1 1 . . (EC)      5      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1926 ( 786)      . 3 2 . 1 1 . . (6C)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2007 ( 7D7)      5 3 2 . 1 1 . . (EC)      5      5      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2115 ( 843)      5 3 2 2 1 1 . . (FC)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2116 ( 844)      5 3 . 2 1 1 . . (DC)      5      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2170 ( 87A)      5 3 . 2 1 1 1 . (DE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2278 ( 8E6)      5 3 3 2 1 1 1 . (FE)      7      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2293 ( 8F5)      5 . 3 2 1 1 1 . (BE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2361 ( 939)      . . 3 2 1 1 1 . (3E)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2418 ( 972)      . 4 3 2 1 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2441 ( 989)      6 4 3 2 1 1 1 . (FE)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2519 ( 9D7)      6 4 3 2 . 1 1 . (F6)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2795 ( AEB)      . 4 3 2 . 1 1 . (76)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2847 ( B1F)      . 4 3 2 2 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2875 ( B3B)      7 4 3 2 2 1 1 . (FE)      7      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2960 ( B90)      7 . 3 2 2 1 1 . (BE)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2984 ( BA8)      7 . . 2 2 1 1 . (9E)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3085 ( C0D)      7 5 . 2 2 1 1 . (DE)      6      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3146 ( C4A)      7 5 4 2 2 1 1 . (FE)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3174 ( C66)      7 5 4 . 2 1 1 . (EE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3229 ( C9D)      . 5 4 . 2 1 1 . (6E)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3265 ( CC1)      . 5 4 . 2 1 1 1 (6F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3309 ( CED)      8 5 4 . 2 1 1 1 (EF)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3417 ( D59)      8 5 4 3 2 1 1 1 (FF)      8      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3628 ( E2C)      8 . 4 3 2 1 1 1 (BF)      7      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3663 ( E4F)      . . 4 3 2 1 1 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3743 ( E9F)      9 . 4 3 2 1 1 1 (BF)      7      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3752 ( EA8)      9 6 4 3 2 1 1 1 (FF)      8      8      137                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3767 ( EB7)      9 6 4 3 2 . 1 1 (FB)      7      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3852 ( F0C)      9 6 . 3 2 . 1 1 (DB)      6     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4014 ( FAE)      9 6 5 3 2 . 1 1 (FB)      7      4      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4097 (1001)      . 6 5 3 2 . 1 1 (7B)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4257 (10A1)      . 6 5 3 2 2 1 1 (7F)      7      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4271 (10AF)      . 6 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4295 (10C7)      . . 5 3 . 2 1 1 (37)      5      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4419 (1143)      . 7 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4476 (117C)      . 7 5 . . 2 1 1 (67)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4599 (11F7)      . 7 5 . 3 2 1 1 (6F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4720 (1270)      . 7 5 4 3 2 1 1 (7F)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4721 (1271)      . 7 . 4 3 2 1 1 (5F)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4882 (1312)      . 7 6 4 3 2 1 1 (7F)      7      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4962 (1362)      . . 6 4 3 2 1 1 (3F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4992 (1380)      . . 6 4 3 2 . 1 (3D)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5086 (13DE)      . 8 6 4 3 2 . 1 (7D)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5589 (15D5)      . 8 . 4 3 2 . 1 (5D)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5629 (15FD)      . . . 4 3 2 . 1 (1D)      4      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5642 (160A)      . . . 4 3 2 2 1 (1F)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5750 (1676)      . . 7 4 3 2 2 1 (3F)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5753 (1679)      . 9 7 4 3 2 2 1 (7F)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5778 (1692)      . 9 7 . 3 2 2 1 (6F)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6022 (1786)      . 9 7 5 3 2 2 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6023 (1787)      . 9 7 5 . 2 2 1 (77)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6296 (1898)      . . 7 5 . 2 2 1 (37)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6351 (18CF)      . . 7 5 4 2 2 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6387 (18F3)      . . 7 5 4 . 2 1 (3B)      5      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6457 (1939)      . . . 5 4 . 2 1 (1B)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6618 (19DA)      . . 8 5 4 . 2 1 (3B)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6877 (1ADD)      . . 8 5 4 3 2 1 (3F)      6      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7081 (1BA9)      . . 8 . 4 3 2 1 (2F)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7324 (1C9C)      . . 8 6 4 3 2 1 (3F)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7325 (1C9D)      . . . 6 4 3 2 1 (1F)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7486 (1D3E)      . . 9 6 4 3 2 1 (3F)      6      5      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7510 (1D56)      . . 9 6 4 3 2 . (3E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7775 (1E5F)      . . 9 6 . 3 2 . (36)      4      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8103 (1FA7)      . . 9 6 5 3 2 . (3E)      5     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8193 (2001)      . . . 6 5 3 2 . (1E)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8383 (20BF)      . . . . 5 3 2 . ( E)      3      8      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8464 (2110)      . . . . 5 3 . . ( C)      2     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8489 (2129)      . . . . 5 3 . 2 ( D)      3     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8626 (21B2)      . . . 7 5 3 . 2 (1D)      4      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9007 (232F)      . . . 7 5 . . 2 (19)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9114 (239A)      . . . 7 5 . 3 2 (1B)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9498 (251A)      . . . 7 5 4 3 2 (1F)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9528 (2538)      . . . 7 . 4 3 2 (17)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9685 (25D5)      . . . . . 4 3 2 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9855 (267F)      . . . . 6 4 3 2 ( F)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9928 (26C8)      . . . 8 6 4 3 2 (1F)      5     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  10987 (2AEB)      . . . . 6 4 3 2 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11230 (2BDE)      . . . 9 6 4 3 2 (1F)      5      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11280 (2C10)      . . . 9 . 4 3 2 (17)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11607 (2D57)      . . . 9 7 4 3 2 (1F)      5      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11627 (2D6B)      . . . 9 7 . 3 2 (1B)      4     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11936 (2EA0)      . . . 9 7 . . 2 (19)      3     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12118 (2F56)      . . . 9 7 5 . 2 (1D)      4      6      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12289 (3001)      . . . . 7 5 . 2 ( D)      3     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12586 (312A)      . . . . 7 5 4 2 ( F)      4     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12735 (31BF)      . . . . 7 5 4 . ( E)      3      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13032 (32E8)      . . . . . 5 4 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13359 (342F)      . . . . 8 5 4 . ( E)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13713 (3591)      . . . . 8 5 4 3 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14248 (37A8)      . . . . 8 . 4 3 ( B)      3      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14738 (3992)      . . . . 8 6 4 3 ( F)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14784 (39C0)      . . . . . 6 4 3 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15111 (3B07)      . . . . 9 6 4 3 ( F)      4      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15408 (3C30)      . . . . 9 6 . 3 ( D)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16059 (3EBB)      . . . . 9 6 5 3 ( F)      4     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16536 (4098)      . . . . . 6 5 3 ( 7)      3      7      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16868 (41E4)      . . . . . . 5 3 ( 3)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17358 (43CE)      . . . . . 7 5 3 ( 7)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17959 (4627)      . . . . . 7 5 . ( 6)      2     11      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18881 (49C1)      . . . . . 7 . . ( 4)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18938 (49FA)      . . . . . 7 . 4 ( 5)      2      9      174                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19488 (4C20)      . . . . . . . 4 ( 1)      1     12      183                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19531 (4C4B)      . . . . . . 6 4 ( 3)      2     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19978 (4E0A)      . . . . . 8 6 4 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22108 (565C)      . . . . . . 6 4 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22353 (5751)      . . . . . . . 4 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22598 (5846)      . . . . . 9 . 4 ( 5)      2      8      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23003 (59DB)      . . . . . 9 7 4 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23183 (5A8F)      . . . . . 9 7 . ( 6)      2     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24162 (5E62)      . . . . . 9 7 5 ( 7)      3     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24728 (6098)      . . . . . . 7 5 ( 3)      2     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  25825 (64E1)      . . . . . . . 5 ( 1)      1      9      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  26475 (676B)      . . . . . . 8 5 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28408 (6EF8)      . . . . . . 8 . ( 2)      1     12      215                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29297 (7271)      . . . . . . . . ( 0)      0     14      224                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29386 (72CA)      . . . . . . . 6 ( 1)      1     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29947 (74FB)      . . . . . . 9 6 ( 3)      2     10      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32770 (8002)      . . . . . . . 6 ( 1)      1     12      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  33632 (8360)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  34611 (8733)      . . . . . . . 7 ( 1)      1     11      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  38856 (97C8)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  39835 (9B9B)      . . . . . . . 8 ( 1)      1     12      222                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  44081 (AC31)      . . . . . . . . ( 0)      0     14      231                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  45059 (B003)      . . . . . . . 9 ( 1)      1     13      229                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  49305 (C099)      . . . . . . . . ( 0)      0     14      238                (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      1                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#+-----0-----+                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#1           2                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#0           7                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#F +---------0----------+                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  2                    4                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  1                    2                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  E +------------------2------------------+                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2                                     F                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    C                                     A                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    1            +------------------------E-----------------------+            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                |            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                1            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3            7                                                D            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2            D                                                3            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    D  +---------7--------+                        +--------------E---------------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        |                              | (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        1                              2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3  4                  C                        5                              F (SCI_BD_LOW_PULSE_TREE)
                                      ;#    B  7                  0                        F                              5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    F +3-+          +-----D-----+           +------D-----+               +--------6---------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           |            |               |                  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           1            1               2                  4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  6          9           E           2            8               5                  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  2          8           2           7            9               1                  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      7 +5-+     +--9---+     +-C--+     +--0--+      +--8---+       +---A---+        +-----8------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     |     |      |      |       |       |        |            | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     1     1      1      1       2       2        3            5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4 4  6     8      B     C    E     0     3      6      A       0       B        7            8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      3 E  D     E      3     C    A     C     6      9      D       B       D        A            4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      B 0 +6+  +-6-+   +B-+  +1-+ +8+  +-7-+  +2-+   +2-+  +-D-+   +-F-+   +-E-+   +--8--+     +---6---+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  |   |  |  |   |  |  |   |   |   |   |   |   |     |     |       | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  1   1  1  1   1  1  1   1   1   2   2   2   3     3     4       6 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7  8   9   A  B  C  D E E  0   1  3  3   6  7  8   C   E   1   6   D   1     B     9       4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        8 6 5  4   3   E  9  6  5 9 B  A   7  1  D   7  8  F   9   5   B   7   5   B     0     F       E (SCI_BD_LOW_PULSE_TREE)
                                      ;#        2 5 0 +4+ +9+ +B+ 0 +6+ 9 F 7 +1+ +C+ 2 +E+ +6+ 6 +3+ +C+ +F+ +2+ +F+ +7+ +F-+  +7+  +-A-+   +-1-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |  |  | |  |   |   |   | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3  3  3 3  4   4   5   7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7 8 8 8 9 9 B B C C C E F 0 0 1 1 2 3 5 6 6 7 8 9 B C D F 1 3 5 6 C D 1  4  9 E  3   E   A   4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        D 5 8 4 7 F 7 D 1 A 4 9 E 4 0 0 A 4 F 7 8 D 0 7 8 C D A 9 5 A 2 9 3 C 1 6 2  2  9 B  C   0   8   F (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4 A 6 3 A 5 2 7 F 8 A D D F C 1 F 3 7 1 0 5 A 9 7 F A 9 D 6 7 9 A 8 8 0 B A +F+ 2 B +E+ +A+ +F+ +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            |       | | | | |   | | | | | | | | | | | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            1       2 2 2 2 2   2 3 3 3 3 3 4 4 4 5 5 5 6  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       0 1 3 5 A   E 0 2 5 9 C 1 6 C 6 9 E 7  7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            3       0 1 2 D E   A 0 E 9 C 3 E 2 4 5 D 6 6  3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       1 0 F 5 B   0 1 8 1 0 0 4 7 B C B 2 B +3-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              | | |   | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              4 4 5   6 6 8  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              9 C 7   0 E 0  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              C 2 5   9 F 0  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              1 0 1   8 8 2 +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7 8 9  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2 3 7  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        C 6 C  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        A 0 8 +3+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        |     | | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     A C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2     C 0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     3 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        1     1 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
002BC8 0F6BC8 01 A0 C0 C0 2B D6       N__1A0          DW      $01A0   $C0C0   N__270          ;if pulse >= 416 then check N__270 else check N__10F (SCI_BD_LOW_PULSE_TREE)
002BCE 0F6BCE 01 0F 80 80 00 00       N__10F          DW      $010F   $8080   $0000           ;if pulse >= 271 then the result is 80 else the result is 00 (SCI_BD_LOW_PULSE_TREE)
002BD4 0F6BD4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BD6 0F6BD6 02 70 60 60 2B E4       N__270          DW      $0270   $6060   N__422          ;if pulse >= 624 then check N__422 else check N__21E (SCI_BD_LOW_PULSE_TREE)
002BDC 0F6BDC 02 1E E0 E0 00 00       N__21E          DW      $021E   $E0E0   $0000           ;if pulse >= 542 then the result is E0 else the result is C0 (SCI_BD_LOW_PULSE_TREE)
002BE2 0F6BE2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BE4 0F6BE4 04 22 30 30 2C 02       N__422          DW      $0422   $3030   N__FAE          ;if pulse >= 1058 then check N__FAE else check N__2C1 (SCI_BD_LOW_PULSE_TREE)
002BEA 0F6BEA 02 C1 E0 E0 2B F2       N__2C1          DW      $02C1   $E0E0   N__32D          ;if pulse >= 705 then check N__32D else the result is 60 (SCI_BD_LOW_PULSE_TREE)
002BF0 0F6BF0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BF2 0F6BF2 03 2D F0 F0 2B FA       N__32D          DW      $032D   $F0F0   N__3BF          ;if pulse >= 813 then check N__3BF else the result is E0 (SCI_BD_LOW_PULSE_TREE)
002BF8 0F6BF8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BFA 0F6BFA 03 BF B0 B0 00 00       N__3BF          DW      $03BF   $B0B0   $0000           ;if pulse >= 959 then the result is B0 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
002C00 0F6C00 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C02 0F6C02 0F AE FB FB 2D 22       N__FAE          DW      $0FAE   $FBFB   N_1D3E          ;if pulse >= 4014 then check N_1D3E else check N__7D7 (SCI_BD_LOW_PULSE_TREE)
002C08 0F6C08 07 D7 EC EC 2C 64       N__7D7          DW      $07D7   $ECEC   N__C0D          ;if pulse >= 2007 then check N__C0D else check N__473 (SCI_BD_LOW_PULSE_TREE)
002C0E 0F6C0E 04 73 F8 F8 2C 22       N__473          DW      $0473   $F8F8   N__625          ;if pulse >= 1139 then check N__625 else check N__447 (SCI_BD_LOW_PULSE_TREE)
002C14 0F6C14 04 47 78 78 00 00       N__447          DW      $0447   $7878   $0000           ;if pulse >= 1095 then the result is 78 else check N__43B (SCI_BD_LOW_PULSE_TREE)
002C1A 0F6C1A 04 3B 70 70 00 00       N__43B          DW      $043B   $7070   $0000           ;if pulse >= 1083 then the result is 70 else the result is 30 (SCI_BD_LOW_PULSE_TREE)
002C20 0F6C20 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C22 0F6C22 06 25 F8 F8 2C 40       N__625          DW      $0625   $F8F8   N__6D6          ;if pulse >= 1573 then check N__6D6 else check N__4E0 (SCI_BD_LOW_PULSE_TREE)
002C28 0F6C28 04 E0 D8 D8 2C 30       N__4E0          DW      $04E0   $D8D8   N__582          ;if pulse >= 1248 then check N__582 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
002C2E 0F6C2E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C30 0F6C30 05 82 F8 F8 2C 38       N__582          DW      $0582   $F8F8   N__5D4          ;if pulse >= 1410 then check N__5D4 else the result is D8 (SCI_BD_LOW_PULSE_TREE)
002C36 0F6C36 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C38 0F6C38 05 D4 78 78 00 00       N__5D4          DW      $05D4   $7878   $0000           ;if pulse >= 1492 then the result is 78 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
002C3E 0F6C3E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C40 0F6C40 06 D6 FC FC 2C 54       N__6D6          DW      $06D6   $FCFC   N__750          ;if pulse >= 1750 then check N__750 else check N__665 (SCI_BD_LOW_PULSE_TREE)
002C46 0F6C46 06 65 BC BC 00 00       N__665          DW      $0665   $BCBC   $0000           ;if pulse >= 1637 then the result is BC else check N__65A (SCI_BD_LOW_PULSE_TREE)
002C4C 0F6C4C 06 5A B8 B8 00 00       N__65A          DW      $065A   $B8B8   $0000           ;if pulse >= 1626 then the result is B8 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
002C52 0F6C52 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C54 0F6C54 07 50 EC EC 2C 5C       N__750          DW      $0750   $ECEC   N__786          ;if pulse >= 1872 then check N__786 else the result is FC (SCI_BD_LOW_PULSE_TREE)
002C5A 0F6C5A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C5C 0F6C5C 07 86 6C 6C 00 00       N__786          DW      $0786   $6C6C   $0000           ;if pulse >= 1926 then the result is 6C else the result is EC (SCI_BD_LOW_PULSE_TREE)
002C62 0F6C62 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C64 0F6C64 0C 0D DE DE 2C CE       N__C0D          DW      $0C0D   $DEDE   N__E2C          ;if pulse >= 3085 then check N__E2C else check N__989 (SCI_BD_LOW_PULSE_TREE)
002C6A 0F6C6A 09 89 FE FE 2C A2       N__989          DW      $0989   $FEFE   N__B3B          ;if pulse >= 2441 then check N__B3B else check N__8E6 (SCI_BD_LOW_PULSE_TREE)
002C70 0F6C70 08 E6 FE FE 2C 8C       N__8E6          DW      $08E6   $FEFE   N__939          ;if pulse >= 2278 then check N__939 else check N__844 (SCI_BD_LOW_PULSE_TREE)
002C76 0F6C76 08 44 DC DC 2C 84       N__844          DW      $0844   $DCDC   N__87A          ;if pulse >= 2116 then check N__87A else check N__843 (SCI_BD_LOW_PULSE_TREE)
002C7C 0F6C7C 08 43 FC FC 00 00       N__843          DW      $0843   $FCFC   $0000           ;if pulse >= 2115 then the result is FC else the result is EC (SCI_BD_LOW_PULSE_TREE)
002C82 0F6C82 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C84 0F6C84 08 7A DE DE 00 00       N__87A          DW      $087A   $DEDE   $0000           ;if pulse >= 2170 then the result is DE else the result is DC (SCI_BD_LOW_PULSE_TREE)
002C8A 0F6C8A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C8C 0F6C8C 09 39 3E 3E 2C 9A       N__939          DW      $0939   $3E3E   N__972          ;if pulse >= 2361 then check N__972 else check N__8F5 (SCI_BD_LOW_PULSE_TREE)
002C92 0F6C92 08 F5 BE BE 00 00       N__8F5          DW      $08F5   $BEBE   $0000           ;if pulse >= 2293 then the result is BE else the result is FE (SCI_BD_LOW_PULSE_TREE)
002C98 0F6C98 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C9A 0F6C9A 09 72 7E 7E 00 00       N__972          DW      $0972   $7E7E   $0000           ;if pulse >= 2418 then the result is 7E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
002CA0 0F6CA0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CA2 0F6CA2 0B 3B FE FE 2C BE       N__B3B          DW      $0B3B   $FEFE   N__B90          ;if pulse >= 2875 then check N__B90 else check N__AEB (SCI_BD_LOW_PULSE_TREE)
002CA8 0F6CA8 0A EB 76 76 2C B6       N__AEB          DW      $0AEB   $7676   N__B1F          ;if pulse >= 2795 then check N__B1F else check N__9D7 (SCI_BD_LOW_PULSE_TREE)
002CAE 0F6CAE 09 D7 F6 F6 00 00       N__9D7          DW      $09D7   $F6F6   $0000           ;if pulse >= 2519 then the result is F6 else the result is FE (SCI_BD_LOW_PULSE_TREE)
002CB4 0F6CB4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CB6 0F6CB6 0B 1F 7E 7E 00 00       N__B1F          DW      $0B1F   $7E7E   $0000           ;if pulse >= 2847 then the result is 7E else the result is 76 (SCI_BD_LOW_PULSE_TREE)
002CBC 0F6CBC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CBE 0F6CBE 0B 90 BE BE 2C C6       N__B90          DW      $0B90   $BEBE   N__BA8          ;if pulse >= 2960 then check N__BA8 else the result is FE (SCI_BD_LOW_PULSE_TREE)
002CC4 0F6CC4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CC6 0F6CC6 0B A8 9E 9E 00 00       N__BA8          DW      $0BA8   $9E9E   $0000           ;if pulse >= 2984 then the result is 9E else the result is BE (SCI_BD_LOW_PULSE_TREE)
002CCC 0F6CCC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CCE 0F6CCE 0E 2C BF BF 2C FE       N__E2C          DW      $0E2C   $BFBF   N__EA8          ;if pulse >= 3628 then check N__EA8 else check N__CC1 (SCI_BD_LOW_PULSE_TREE)
002CD4 0F6CD4 0C C1 6F 6F 2C F0       N__CC1          DW      $0CC1   $6F6F   N__D59          ;if pulse >= 3265 then check N__D59 else check N__C66 (SCI_BD_LOW_PULSE_TREE)
002CDA 0F6CDA 0C 66 EE EE 2C E8       N__C66          DW      $0C66   $EEEE   N__C9D          ;if pulse >= 3174 then check N__C9D else check N__C4A (SCI_BD_LOW_PULSE_TREE)
002CE0 0F6CE0 0C 4A FE FE 00 00       N__C4A          DW      $0C4A   $FEFE   $0000           ;if pulse >= 3146 then the result is FE else the result is DE (SCI_BD_LOW_PULSE_TREE)
002CE6 0F6CE6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CE8 0F6CE8 0C 9D 6E 6E 00 00       N__C9D          DW      $0C9D   $6E6E   $0000           ;if pulse >= 3229 then the result is 6E else the result is EE (SCI_BD_LOW_PULSE_TREE)
002CEE 0F6CEE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CF0 0F6CF0 0D 59 FF FF 00 00       N__D59          DW      $0D59   $FFFF   $0000           ;if pulse >= 3417 then the result is FF else check N__CED (SCI_BD_LOW_PULSE_TREE)
002CF6 0F6CF6 0C ED EF EF 00 00       N__CED          DW      $0CED   $EFEF   $0000           ;if pulse >= 3309 then the result is EF else the result is 6F (SCI_BD_LOW_PULSE_TREE)
002CFC 0F6CFC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CFE 0F6CFE 0E A8 FF FF 2D 12       N__EA8          DW      $0EA8   $FFFF   N__EB7          ;if pulse >= 3752 then check N__EB7 else check N__E9F (SCI_BD_LOW_PULSE_TREE)
002D04 0F6D04 0E 9F BF BF 00 00       N__E9F          DW      $0E9F   $BFBF   $0000           ;if pulse >= 3743 then the result is BF else check N__E4F (SCI_BD_LOW_PULSE_TREE)
002D0A 0F6D0A 0E 4F 3F 3F 00 00       N__E4F          DW      $0E4F   $3F3F   $0000           ;if pulse >= 3663 then the result is 3F else the result is BF (SCI_BD_LOW_PULSE_TREE)
002D10 0F6D10 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D12 0F6D12 0E B7 FB FB 2D 1A       N__EB7          DW      $0EB7   $FBFB   N__F0C          ;if pulse >= 3767 then check N__F0C else the result is FF (SCI_BD_LOW_PULSE_TREE)
002D18 0F6D18 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D1A 0F6D1A 0F 0C DB DB 00 00       N__F0C          DW      $0F0C   $DBDB   $0000           ;if pulse >= 3852 then the result is DB else the result is FB (SCI_BD_LOW_PULSE_TREE)
002D20 0F6D20 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D22 0F6D22 1D 3E 3F 3F 2D FA       N_1D3E          DW      $1D3E   $3F3F   N_2F56          ;if pulse >= 7486 then check N_2F56 else check N_15FD (SCI_BD_LOW_PULSE_TREE)
002D28 0F6D28 15 FD 1D 1D 2D 90       N_15FD          DW      $15FD   $1D1D   N_1898          ;if pulse >= 5629 then check N_1898 else check N_1270 (SCI_BD_LOW_PULSE_TREE)
002D2E 0F6D2E 12 70 7F 7F 2D 66       N_1270          DW      $1270   $7F7F   N_1362          ;if pulse >= 4720 then check N_1362 else check N_10C7 (SCI_BD_LOW_PULSE_TREE)
002D34 0F6D34 10 C7 37 37 2D 50       N_10C7          DW      $10C7   $3737   N_117C          ;if pulse >= 4295 then check N_117C else check N_10A1 (SCI_BD_LOW_PULSE_TREE)
002D3A 0F6D3A 10 A1 7F 7F 2D 48       N_10A1          DW      $10A1   $7F7F   N_10AF          ;if pulse >= 4257 then check N_10AF else check N_1001 (SCI_BD_LOW_PULSE_TREE)
002D40 0F6D40 10 01 7B 7B 00 00       N_1001          DW      $1001   $7B7B   $0000           ;if pulse >= 4097 then the result is 7B else the result is FB (SCI_BD_LOW_PULSE_TREE)
002D46 0F6D46 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D48 0F6D48 10 AF 77 77 00 00       N_10AF          DW      $10AF   $7777   $0000           ;if pulse >= 4271 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
002D4E 0F6D4E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D50 0F6D50 11 7C 67 67 2D 5E       N_117C          DW      $117C   $6767   N_11F7          ;if pulse >= 4476 then check N_11F7 else check N_1143 (SCI_BD_LOW_PULSE_TREE)
002D56 0F6D56 11 43 77 77 00 00       N_1143          DW      $1143   $7777   $0000           ;if pulse >= 4419 then the result is 77 else the result is 37 (SCI_BD_LOW_PULSE_TREE)
002D5C 0F6D5C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D5E 0F6D5E 11 F7 6F 6F 00 00       N_11F7          DW      $11F7   $6F6F   $0000           ;if pulse >= 4599 then the result is 6F else the result is 67 (SCI_BD_LOW_PULSE_TREE)
002D64 0F6D64 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D66 0F6D66 13 62 3F 3F 2D 7A       N_1362          DW      $1362   $3F3F   N_13DE          ;if pulse >= 4962 then check N_13DE else check N_1312 (SCI_BD_LOW_PULSE_TREE)
002D6C 0F6D6C 13 12 7F 7F 00 00       N_1312          DW      $1312   $7F7F   $0000           ;if pulse >= 4882 then the result is 7F else check N_1271 (SCI_BD_LOW_PULSE_TREE)
002D72 0F6D72 12 71 5F 5F 00 00       N_1271          DW      $1271   $5F5F   $0000           ;if pulse >= 4721 then the result is 5F else the result is 7F (SCI_BD_LOW_PULSE_TREE)
002D78 0F6D78 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D7A 0F6D7A 13 DE 7D 7D 2D 88       N_13DE          DW      $13DE   $7D7D   N_15D5          ;if pulse >= 5086 then check N_15D5 else check N_1380 (SCI_BD_LOW_PULSE_TREE)
002D80 0F6D80 13 80 3D 3D 00 00       N_1380          DW      $1380   $3D3D   $0000           ;if pulse >= 4992 then the result is 3D else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002D86 0F6D86 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D88 0F6D88 15 D5 5D 5D 00 00       N_15D5          DW      $15D5   $5D5D   $0000           ;if pulse >= 5589 then the result is 5D else the result is 7D (SCI_BD_LOW_PULSE_TREE)
002D8E 0F6D8E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002D90 0F6D90 18 98 37 37 2D C2       N_1898          DW      $1898   $3737   N_1ADD          ;if pulse >= 6296 then check N_1ADD else check N_1692 (SCI_BD_LOW_PULSE_TREE)
002D96 0F6D96 16 92 6F 6F 2D B2       N_1692          DW      $1692   $6F6F   N_1786          ;if pulse >= 5778 then check N_1786 else check N_1676 (SCI_BD_LOW_PULSE_TREE)
002D9C 0F6D9C 16 76 3F 3F 2D AA       N_1676          DW      $1676   $3F3F   N_1679          ;if pulse >= 5750 then check N_1679 else check N_160A (SCI_BD_LOW_PULSE_TREE)
002DA2 0F6DA2 16 0A 1F 1F 00 00       N_160A          DW      $160A   $1F1F   $0000           ;if pulse >= 5642 then the result is 1F else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002DA8 0F6DA8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DAA 0F6DAA 16 79 7F 7F 00 00       N_1679          DW      $1679   $7F7F   $0000           ;if pulse >= 5753 then the result is 7F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002DB0 0F6DB0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DB2 0F6DB2 17 86 7F 7F 2D BA       N_1786          DW      $1786   $7F7F   N_1787          ;if pulse >= 6022 then check N_1787 else the result is 6F (SCI_BD_LOW_PULSE_TREE)
002DB8 0F6DB8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DBA 0F6DBA 17 87 77 77 00 00       N_1787          DW      $1787   $7777   $0000           ;if pulse >= 6023 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
002DC0 0F6DC0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DC2 0F6DC2 1A DD 3F 3F 2D E4       N_1ADD          DW      $1ADD   $3F3F   N_1C9C          ;if pulse >= 6877 then check N_1C9C else check N_18F3 (SCI_BD_LOW_PULSE_TREE)
002DC8 0F6DC8 18 F3 3B 3B 2D D6       N_18F3          DW      $18F3   $3B3B   N_19DA          ;if pulse >= 6387 then check N_19DA else check N_18CF (SCI_BD_LOW_PULSE_TREE)
002DCE 0F6DCE 18 CF 3F 3F 00 00       N_18CF          DW      $18CF   $3F3F   $0000           ;if pulse >= 6351 then the result is 3F else the result is 37 (SCI_BD_LOW_PULSE_TREE)
002DD4 0F6DD4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DD6 0F6DD6 19 DA 3B 3B 00 00       N_19DA          DW      $19DA   $3B3B   $0000           ;if pulse >= 6618 then the result is 3B else check N_1939 (SCI_BD_LOW_PULSE_TREE)
002DDC 0F6DDC 19 39 1B 1B 00 00       N_1939          DW      $1939   $1B1B   $0000           ;if pulse >= 6457 then the result is 1B else the result is 3B (SCI_BD_LOW_PULSE_TREE)
002DE2 0F6DE2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DE4 0F6DE4 1C 9C 3F 3F 2D F2       N_1C9C          DW      $1C9C   $3F3F   N_1C9D          ;if pulse >= 7324 then check N_1C9D else check N_1BA9 (SCI_BD_LOW_PULSE_TREE)
002DEA 0F6DEA 1B A9 2F 2F 00 00       N_1BA9          DW      $1BA9   $2F2F   $0000           ;if pulse >= 7081 then the result is 2F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002DF0 0F6DF0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DF2 0F6DF2 1C 9D 1F 1F 00 00       N_1C9D          DW      $1C9D   $1F1F   $0000           ;if pulse >= 7325 then the result is 1F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002DF8 0F6DF8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002DFA 0F6DFA 2F 56 1D 1D 2E 96       N_2F56          DW      $2F56   $1D1D   N_4098          ;if pulse >= 12118 then check N_4098 else check N_251A (SCI_BD_LOW_PULSE_TREE)
002E00 0F6E00 25 1A 1F 1F 2E 4C       N_251A          DW      $251A   $1F1F   N_2BDE          ;if pulse >= 9498 then check N_2BDE else check N_20BF (SCI_BD_LOW_PULSE_TREE)
002E06 0F6E06 20 BF 0E 0E 2E 2A       N_20BF          DW      $20BF   $0E0E   N_21B2          ;if pulse >= 8383 then check N_21B2 else check N_1E5F (SCI_BD_LOW_PULSE_TREE)
002E0C 0F6E0C 1E 5F 36 36 2E 1A       N_1E5F          DW      $1E5F   $3636   N_1FA7          ;if pulse >= 7775 then check N_1FA7 else check N_1D56 (SCI_BD_LOW_PULSE_TREE)
002E12 0F6E12 1D 56 3E 3E 00 00       N_1D56          DW      $1D56   $3E3E   $0000           ;if pulse >= 7510 then the result is 3E else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002E18 0F6E18 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E1A 0F6E1A 1F A7 3E 3E 2E 22       N_1FA7          DW      $1FA7   $3E3E   N_2001          ;if pulse >= 8103 then check N_2001 else the result is 36 (SCI_BD_LOW_PULSE_TREE)
002E20 0F6E20 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E22 0F6E22 20 01 1E 1E 00 00       N_2001          DW      $2001   $1E1E   $0000           ;if pulse >= 8193 then the result is 1E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
002E28 0F6E28 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E2A 0F6E2A 21 B2 1D 1D 2E 3E       N_21B2          DW      $21B2   $1D1D   N_239A          ;if pulse >= 8626 then check N_239A else check N_2129 (SCI_BD_LOW_PULSE_TREE)
002E30 0F6E30 21 29 0D 0D 00 00       N_2129          DW      $2129   $0D0D   $0000           ;if pulse >= 8489 then the result is 0D else check N_2110 (SCI_BD_LOW_PULSE_TREE)
002E36 0F6E36 21 10 0C 0C 00 00       N_2110          DW      $2110   $0C0C   $0000           ;if pulse >= 8464 then the result is 0C else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002E3C 0F6E3C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E3E 0F6E3E 23 9A 1B 1B 00 00       N_239A          DW      $239A   $1B1B   $0000           ;if pulse >= 9114 then the result is 1B else check N_232F (SCI_BD_LOW_PULSE_TREE)
002E44 0F6E44 23 2F 19 19 00 00       N_232F          DW      $232F   $1919   $0000           ;if pulse >= 9007 then the result is 19 else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002E4A 0F6E4A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E4C 0F6E4C 2B DE 1F 1F 2E 78       N_2BDE          DW      $2BDE   $1F1F   N_2D57          ;if pulse >= 11230 then check N_2D57 else check N_267F (SCI_BD_LOW_PULSE_TREE)
002E52 0F6E52 26 7F 0F 0F 2E 68       N_267F          DW      $267F   $0F0F   N_26C8          ;if pulse >= 9855 then check N_26C8 else check N_2538 (SCI_BD_LOW_PULSE_TREE)
002E58 0F6E58 25 38 17 17 2E 60       N_2538          DW      $2538   $1717   N_25D5          ;if pulse >= 9528 then check N_25D5 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002E5E 0F6E5E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E60 0F6E60 25 D5 07 07 00 00       N_25D5          DW      $25D5   $0707   $0000           ;if pulse >= 9685 then the result is 07 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
002E66 0F6E66 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E68 0F6E68 26 C8 1F 1F 2E 70       N_26C8          DW      $26C8   $1F1F   N_2AEB          ;if pulse >= 9928 then check N_2AEB else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002E6E 0F6E6E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E70 0F6E70 2A EB 0F 0F 00 00       N_2AEB          DW      $2AEB   $0F0F   $0000           ;if pulse >= 10987 then the result is 0F else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002E76 0F6E76 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E78 0F6E78 2D 57 1F 1F 2E 86       N_2D57          DW      $2D57   $1F1F   N_2D6B          ;if pulse >= 11607 then check N_2D6B else check N_2C10 (SCI_BD_LOW_PULSE_TREE)
002E7E 0F6E7E 2C 10 17 17 00 00       N_2C10          DW      $2C10   $1717   $0000           ;if pulse >= 11280 then the result is 17 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002E84 0F6E84 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E86 0F6E86 2D 6B 1B 1B 2E 8E       N_2D6B          DW      $2D6B   $1B1B   N_2EA0          ;if pulse >= 11627 then check N_2EA0 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002E8C 0F6E8C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E8E 0F6E8E 2E A0 19 19 00 00       N_2EA0          DW      $2EA0   $1919   $0000           ;if pulse >= 11936 then the result is 19 else the result is 1B (SCI_BD_LOW_PULSE_TREE)
002E94 0F6E94 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002E96 0F6E96 40 98 07 07 2E F0       N_4098          DW      $4098   $0707   N_5846          ;if pulse >= 16536 then check N_5846 else check N_37A8 (SCI_BD_LOW_PULSE_TREE)
002E9C 0F6E9C 37 A8 0B 0B 2E CC       N_37A8          DW      $37A8   $0B0B   N_3B07          ;if pulse >= 14248 then check N_3B07 else check N_31BF (SCI_BD_LOW_PULSE_TREE)
002EA2 0F6EA2 31 BF 0E 0E 2E B6       N_31BF          DW      $31BF   $0E0E   N_342F          ;if pulse >= 12735 then check N_342F else check N_312A (SCI_BD_LOW_PULSE_TREE)
002EA8 0F6EA8 31 2A 0F 0F 00 00       N_312A          DW      $312A   $0F0F   $0000           ;if pulse >= 12586 then the result is 0F else check N_3001 (SCI_BD_LOW_PULSE_TREE)
002EAE 0F6EAE 30 01 0D 0D 00 00       N_3001          DW      $3001   $0D0D   $0000           ;if pulse >= 12289 then the result is 0D else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002EB4 0F6EB4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002EB6 0F6EB6 34 2F 0E 0E 2E C4       N_342F          DW      $342F   $0E0E   N_3591          ;if pulse >= 13359 then check N_3591 else check N_32E8 (SCI_BD_LOW_PULSE_TREE)
002EBC 0F6EBC 32 E8 06 06 00 00       N_32E8          DW      $32E8   $0606   $0000           ;if pulse >= 13032 then the result is 06 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002EC2 0F6EC2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002EC4 0F6EC4 35 91 0F 0F 00 00       N_3591          DW      $3591   $0F0F   $0000           ;if pulse >= 13713 then the result is 0F else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002ECA 0F6ECA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002ECC 0F6ECC 3B 07 0F 0F 2E E2       N_3B07          DW      $3B07   $0F0F   N_3EBB          ;if pulse >= 15111 then check N_3EBB else check N_3992 (SCI_BD_LOW_PULSE_TREE)
002ED2 0F6ED2 39 92 0F 0F 2E DA       N_3992          DW      $3992   $0F0F   N_39C0          ;if pulse >= 14738 then check N_39C0 else the result is 0B (SCI_BD_LOW_PULSE_TREE)
002ED8 0F6ED8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002EDA 0F6EDA 39 C0 07 07 00 00       N_39C0          DW      $39C0   $0707   $0000           ;if pulse >= 14784 then the result is 07 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002EE0 0F6EE0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002EE2 0F6EE2 3E BB 0F 0F 00 00       N_3EBB          DW      $3EBB   $0F0F   $0000           ;if pulse >= 16059 then the result is 0F else check N_3C30 (SCI_BD_LOW_PULSE_TREE)
002EE8 0F6EE8 3C 30 0D 0D 00 00       N_3C30          DW      $3C30   $0D0D   $0000           ;if pulse >= 15408 then the result is 0D else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002EEE 0F6EEE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002EF0 0F6EF0 58 46 05 05 2F 3E       N_5846          DW      $5846   $0505   N_64E1          ;if pulse >= 22598 then check N_64E1 else check N_49FA (SCI_BD_LOW_PULSE_TREE)
002EF6 0F6EF6 49 FA 05 05 2F 1A       N_49FA          DW      $49FA   $0505   N_4E0A          ;if pulse >= 18938 then check N_4E0A else check N_43CE (SCI_BD_LOW_PULSE_TREE)
002EFC 0F6EFC 43 CE 07 07 2F 0A       N_43CE          DW      $43CE   $0707   N_4627          ;if pulse >= 17358 then check N_4627 else check N_41E4 (SCI_BD_LOW_PULSE_TREE)
002F02 0F6F02 41 E4 03 03 00 00       N_41E4          DW      $41E4   $0303   $0000           ;if pulse >= 16868 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002F08 0F6F08 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F0A 0F6F0A 46 27 06 06 2F 12       N_4627          DW      $4627   $0606   N_49C1          ;if pulse >= 17959 then check N_49C1 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002F10 0F6F10 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F12 0F6F12 49 C1 04 04 00 00       N_49C1          DW      $49C1   $0404   $0000           ;if pulse >= 18881 then the result is 04 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
002F18 0F6F18 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F1A 0F6F1A 4E 0A 07 07 2F 2E       N_4E0A          DW      $4E0A   $0707   N_565C          ;if pulse >= 19978 then check N_565C else check N_4C4B (SCI_BD_LOW_PULSE_TREE)
002F20 0F6F20 4C 4B 03 03 00 00       N_4C4B          DW      $4C4B   $0303   $0000           ;if pulse >= 19531 then the result is 03 else check N_4C20 (SCI_BD_LOW_PULSE_TREE)
002F26 0F6F26 4C 20 01 01 00 00       N_4C20          DW      $4C20   $0101   $0000           ;if pulse >= 19488 then the result is 01 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
002F2C 0F6F2C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F2E 0F6F2E 56 5C 03 03 2F 36       N_565C          DW      $565C   $0303   N_5751          ;if pulse >= 22108 then check N_5751 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002F34 0F6F34 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F36 0F6F36 57 51 01 01 00 00       N_5751          DW      $5751   $0101   $0000           ;if pulse >= 22353 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002F3C 0F6F3C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F3E 0F6F3E 64 E1 01 01 2F 62       N_64E1          DW      $64E1   $0101   N_74FB          ;if pulse >= 25825 then check N_74FB else check N_5A8F (SCI_BD_LOW_PULSE_TREE)
002F44 0F6F44 5A 8F 06 06 2F 52       N_5A8F          DW      $5A8F   $0606   N_5E62          ;if pulse >= 23183 then check N_5E62 else check N_59DB (SCI_BD_LOW_PULSE_TREE)
002F4A 0F6F4A 59 DB 07 07 00 00       N_59DB          DW      $59DB   $0707   $0000           ;if pulse >= 23003 then the result is 07 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
002F50 0F6F50 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F52 0F6F52 5E 62 07 07 2F 5A       N_5E62          DW      $5E62   $0707   N_6098          ;if pulse >= 24162 then check N_6098 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
002F58 0F6F58 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F5A 0F6F5A 60 98 03 03 00 00       N_6098          DW      $6098   $0303   $0000           ;if pulse >= 24728 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002F60 0F6F60 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F62 0F6F62 74 FB 03 03 2F 86       N_74FB          DW      $74FB   $0303   N_8733          ;if pulse >= 29947 then check N_8733 else check N_676B (SCI_BD_LOW_PULSE_TREE)
002F68 0F6F68 67 6B 03 03 2F 70       N_676B          DW      $676B   $0303   N_6EF8          ;if pulse >= 26475 then check N_6EF8 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002F6E 0F6F6E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F70 0F6F70 6E F8 02 02 2F 78       N_6EF8          DW      $6EF8   $0202   N_72CA          ;if pulse >= 28408 then check N_72CA else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002F76 0F6F76 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F78 0F6F78 72 CA 01 01 00 00       N_72CA          DW      $72CA   $0101   $0000           ;if pulse >= 29386 then the result is 01 else check N_7271 (SCI_BD_LOW_PULSE_TREE)
002F7E 0F6F7E 72 71 00 00 00 00       N_7271          DW      $7271   $0000   $0000           ;if pulse >= 29297 then the result is 00 else the result is 02 (SCI_BD_LOW_PULSE_TREE)
002F84 0F6F84 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F86 0F6F86 87 33 01 01 2F 9C       N_8733          DW      $8733   $0101   N_9B9B          ;if pulse >= 34611 then check N_9B9B else check N_8002 (SCI_BD_LOW_PULSE_TREE)
002F8C 0F6F8C 80 02 01 01 2F 94       N_8002          DW      $8002   $0101   N_8360          ;if pulse >= 32770 then check N_8360 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002F92 0F6F92 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F94 0F6F94 83 60 00 00 00 00       N_8360          DW      $8360   $0000   $0000           ;if pulse >= 33632 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002F9A 0F6F9A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002F9C 0F6F9C 9B 9B 01 01 2F AA       N_9B9B          DW      $9B9B   $0101   N_B003          ;if pulse >= 39835 then check N_B003 else check N_97C8 (SCI_BD_LOW_PULSE_TREE)
002FA2 0F6FA2 97 C8 00 00 00 00       N_97C8          DW      $97C8   $0000   $0000           ;if pulse >= 38856 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002FA8 0F6FA8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002FAA 0F6FAA B0 03 01 01 2F B8       N_B003          DW      $B003   $0101   N_C099          ;if pulse >= 45059 then check N_C099 else check N_AC31 (SCI_BD_LOW_PULSE_TREE)
002FB0 0F6FB0 AC 31 00 00 00 00       N_AC31          DW      $AC31   $0000   $0000           ;if pulse >= 44081 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002FB6 0F6FB6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002FB8 0F6FB8 C0 99 00 00 00 00       N_C099          DW      $C099   $0000   $0000           ;if pulse >= 49305 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002FBE 0F6FBE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
                                                              ;Search tree for high pulses
002FC0 0F6FC0 MACRO                   SCI_BD_HIGH_PULSE_TREE  SCI_BD_HIGH_PULSE_TREE
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;# High pulse search tree                                                      # (SCI_BD_HIGH_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    412 ( 19C)      1 . . . . . . . (80)     11      3       37                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    633 ( 279)      1 1 . . . . . . (C0)     18      2       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    824 ( 338)      1 1 1 . . . . . (E0)     22      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1236 ( 4D4)      1 1 1 1 . . . . (F0)     19      1       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1664 ( 680)      1 1 1 1 1 . . . (F8)     14      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   2489 ( 9B9)      1 1 1 1 1 1 . . (FC)      6      2       52                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   3298 ( CE2)      1 1 1 1 1 1 1 . (FE)      7      4       61                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4963 (1363)      1 1 1 1 1 1 1 1 (FF)      8      3       51                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   D                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;# +-4-+                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 2   9                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 7   B                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;#+9+ +9+                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | 1                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#1 3 6 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#9 3 8 6                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#C 8 0 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      C                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      E                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      2                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
002FC0 0F6FC0 04 D4 F0 F0 2F DC       N__4D4          DW      $04D4   $F0F0   N__9B9          ;if pulse >= 1236 then check N__9B9 else check N__279 (SCI_BD_HIGH_PULSE_TREE)
002FC6 0F6FC6 02 79 C0 C0 2F D4       N__279          DW      $0279   $C0C0   N__338          ;if pulse >= 633 then check N__338 else check N__19C (SCI_BD_HIGH_PULSE_TREE)
002FCC 0F6FCC 01 9C 80 80 00 00       N__19C          DW      $019C   $8080   $0000           ;if pulse >= 412 then the result is 80 else the result is 00 (SCI_BD_HIGH_PULSE_TREE)
002FD2 0F6FD2 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002FD4 0F6FD4 03 38 E0 E0 00 00       N__338          DW      $0338   $E0E0   $0000           ;if pulse >= 824 then the result is E0 else the result is C0 (SCI_BD_HIGH_PULSE_TREE)
002FDA 0F6FDA 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002FDC 0F6FDC 09 B9 FC FC 2F EA       N__9B9          DW      $09B9   $FCFC   N_1363          ;if pulse >= 2489 then check N_1363 else check N__680 (SCI_BD_HIGH_PULSE_TREE)
002FE2 0F6FE2 06 80 F8 F8 00 00       N__680          DW      $0680   $F8F8   $0000           ;if pulse >= 1664 then the result is F8 else the result is F0 (SCI_BD_HIGH_PULSE_TREE)
002FE8 0F6FE8 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002FEA 0F6FEA 13 63 FF FF 00 00       N_1363          DW      $1363   $FFFF   $0000           ;if pulse >= 4963 then the result is FF else check N__CE2 (SCI_BD_HIGH_PULSE_TREE)
002FF0 0F6FF0 0C E2 FE FE 00 00       N__CE2          DW      $0CE2   $FEFE   $0000           ;if pulse >= 3298 then the result is FE else the result is FC (SCI_BD_HIGH_PULSE_TREE)
002FF6 0F6FF6 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002FF8 0F6FF8 -> $2FF8                SCI_TABS_END            EQU     *
002FF8 0F6FF8 -> $F6FF8               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB  - print a string (non-blocking)                         #
                                      ;#    STRING_PRINT_BL  - print a string (blocking)                             #
                                      ;#    STRING_FILL_NB   - print a number of filler characters (non-blocking)    #
                                      ;#    STRING_FILL_BL   - print a number of filler characters (blocking)        #
                                      ;#    STRING_UPPER_B   - convert a character to upper case                     #
                                      ;#    STRING_LOWER_B   - convert a character to lower case                     #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
002FF8 0F6FF8 -> $0001                STRING_BLOCKING_OFF     EQU     1       ;blocking functions disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
002FF8 0F6FF8 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
002FF8 0F6FF8 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
002FF8 0F6FF8 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
002FF8 0F6FF8 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
002FF8 0F6FF8 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
002FF8 0F6FF8 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
002FF8 0F6FF8 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
002FF8 0F6FF8 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
002FF8 0F6FF8 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002B40 0F6B40                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
002B40 0F6B40 -> $2B40                STRING_VARS_END         EQU     *
002B40 0F6B40 -> $F6B40               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0028A7 0F68A7                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
0028A7 0F68A7 -> $28A7                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
0028A7 0F68A7 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
0028A8 0F68A8 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
0028AA 0F68AA 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
0028AC 0F68AC 16 24 0A                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0028AF 0F68AF 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
0028B1 0F68B1 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
0028B3 0F68B3 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0028B3 0F68B3 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028B6 0F68B6 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028B8 0F68B8 8F 2A 8B                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028BB 0F68BB 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028BD 0F68BD 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0028BF 0F68BF 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0028C0 0F68C0 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0028C1 0F68C1 -> $28C1                DONE                    EQU     *                                                (SSTACK_PREPULL)
0028C1 0F68C1 33                                              PULB
                                                              ;Signal failure (string pointer in X)
0028C2 0F68C2 10 FE                                           CLC
                                                              ;Done
0028C4 0F68C4 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
0028C5 0F68C5 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
0028C7 0F68C7 16 24 0A                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0028CA 0F68CA 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
0028CC 0F68CC MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0028CC 0F68CC 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028CF 0F68CF 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028D1 0F68D1 8F 2A 8B                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028D4 0F68D4 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028D6 0F68D6 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0028D8 0F68D8 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0028D9 0F68D9 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0028DA 0F68DA -> $28DA                DONE                    EQU     *                                                (SSTACK_PREPULL)
0028DA 0F68DA 33                                              PULB
                                                              ;Signal success (next string pointer in X)
0028DB 0F68DB 14 01                                           SEC
                                                              ;Done
0028DD 0F68DD 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
                                      ;#Print a number of filler characters - non-blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
0028DE 0F68DE -> $28DE                STRING_FILL_NB  EQU     *
                                                              ;Print characters (requested spaces in A)
0028DE 0F68DE 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
0028E1 0F68E1 16 24 0A                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0028E4 0F68E4 24 14                                           BCC     STRING_FILL_NB_3        ;unsuccessful
0028E6 0F68E6 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
0028E9 0F68E9 MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0028E9 0F68E9 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028EC 0F68EC 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028EE 0F68EE 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028F1 0F68F1 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028F3 0F68F3 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0028F5 0F68F5 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0028F6 0F68F6 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0028F7 0F68F7 -> $28F7                DONE                    EQU     *                                                (SSTACK_PREPULL)
                                                              ;Signal success (remaining spaces in A)
0028F7 0F68F7 14 01                                           SEC
                                                              ;Done
0028F9 0F68F9 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
0028FA 0F68FA MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0028FA 0F68FA 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0028FD 0F68FD 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0028FF 0F68FF 8F 2A 8C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002902 0F6902 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002904 0F6904 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002906 0F6906 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002907 0F6907 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002908 0F6908 -> $2908                DONE                    EQU     *                                                (SSTACK_PREPULL)
                                                              ;Signal failure (remaining spaces in A)
002908 0F6908 10 FE                                           CLC
                                                              ;Done
00290A 0F690A 3D                                              RTS
                                      ;#Print a number of filler characters - blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
00290B 0F690B -> $290B                STRING_CODE_END         EQU     *
00290B 0F690B -> $F690B               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002FF8 0F6FF8                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
002FF8 0F6FF8 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
002FF9 0F6FF9 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
002FF9 0F6FF9 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002FFA 0F6FFA 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
002FFB 0F6FFB -> $2FFB                STRING_TABS_END         EQU     *
002FFB 0F6FFB -> $F6FFB               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING - String printing routines                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    COP    - Watchdog handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Error detection
                                      ;---------------
                                      ;COP detection
002FFB 0F6FFB -> $0001                RESET_COP_ON            EQU     1               ;default is RESET_COP_ON
                                      ;Clock failure detection
002FFB 0F6FFB -> $0001                RESET_CLKFAIL_ON        EQU     1               ;default is RESET_CLKFAIL_ON
                                      ;Power failure detection
002FFB 0F6FFB -> $0001                RESET_POWFAIL_ON        EQU     1               ;default is RESET_POWFAIL_ON
                                      ;Code runaway detection
002FFB 0F6FFB -> $0001                RESET_CODERUN_OFF       EQU     1               ;default is RESET_CODERUN_OFF
                                      ;Welcome message
                                      ;---------------
                                      ;RESET_WELCOME  FCS     "Hello, this is S12CBase!"
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Flags
002FFB 0F6FFB -> $0040                RESET_FLG_POR           EQU     $40             ;power on     (PORF)
002FFB 0F6FFB -> $0020                RESET_FLG_POWFAIL       EQU     $20             ;power loss   (LVRF)
002FFB 0F6FFB -> $0004                RESET_FLG_CODERUN       EQU     $04             ;code runaway (ILAF)
002FFB 0F6FFB -> $0002                RESET_FLG_COP           EQU     $02             ;watchdog timeout
002FFB 0F6FFB -> $0001                RESET_FLG_CLKFAIL       EQU     $01             ;clock faiure
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002B40 0F6B40                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
002B40 0F6B40 -> $2B40                RESET_AUTO_LOC1         EQU     *               ;1st auto-place location
002B40 0F6B40                                                 ALIGN   1
002B40 0F6B40                         RESET_MSG               DS      2               ;error message to be displayed
002B42 0F6B42                         RESET_MSG_CHKSUM        DS      1               ;checksum for the errormessage
002B43 0F6B43 -> $2B43                RESET_AUTO_LOC2         EQU     *               ;2nd auto-place location
002B43 0F6B43 -> $2B43                RESET_FLGS              EQU     ((RESET_VARS_START&1)*RESET_AUTO_LOC1)+((~(RESET_VARS_START)&1)*RESET_AUTO_LOC2)
002B43 0F6B43                                                 DS      (~(RESET_VARS_START)&1)
002B44 0F6B44 -> $2B44                RESET_VARS_END          EQU     *
002B44 0F6B44 -> $F6B44               RESET_VARS_END_LIN      EQU     @
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;         C-flag: set if message is valid
                                      ;         none of the registers are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00290B 0F690B                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#COP reset entry point
                                      ;----------------------
00290B 0F690B -> $290B                RESET_COP_ENTRY         EQU     *
                                                              ;Capture COP
00290B 0F690B 18 0B 02 2B 43                                  MOVB    #RESET_FLG_COP, RESET_FLGS
002910 0F6910 06 20 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset entry point
                                      ;--------------------------------
002913 0F6913 -> $2913                RESET_CM_ENTRY          EQU     *
                                                              ;Capture clock failure
002913 0F6913 18 0B 01 2B 43                                  MOVB    #RESET_FLG_CLKFAIL, RESET_FLGS
002918 0F6918 06 20 00                                        JOB     START_OF_CODE
                                      ;#External reset entry point
                                      ;---------------------------
00291B 0F691B -> $291B                RESET_EXT_ENTRY         EQU     *
                                                              ;Capture CRG/CPMU flags
00291B 0F691B 18 0C 00 37 2B 43                               MOVB    CPMUFLG, RESET_FLGS
002921 0F6921 06 20 00                                        JOB     START_OF_CODE
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
002924 0F6924 -> $2924                RESET_FATAL             EQU     *
002924 0F6924 7E 2B 40                                        STX     RESET_MSG
002927 0F6927 FD 29 54                                        LDY     RESET_FATAL_1
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;;        C-flag: set if message is valid
                                      ;         none of the registers are preserved
00292A 0F692A -> $292A                RESET_CALC_CHECKSUM     EQU     *
                                                              ;Initialize checksum generation
00292A 0F692A 87                                              CLRA
                                                              ;Get next character
00292B 0F692B E6 30                   RESET_CALC_CHECKSUM_1   LDAB    1,X+
00292D 0F692D 2B 0F                                           BMI     RESET_CALC_CHECKSUM_2   ;last charcter reached
00292F 0F692F C1 20                                           CMPB    #STRING_SYM_SPACE
002931 0F6931 25 1D                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
002933 0F6933 C1 7E                                           CMPB    #STRING_SYM_TILDE
002935 0F6935 22 19                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
002937 0F6937 18 06                                           ABA
002939 0F6939 45                                              ROLA
00293A 0F693A 89 00                                           ADCA    #$00
00293C 0F693C 20 ED                                           JOB     RESET_CALC_CHECKSUM_1
                                                              ;Last charcter reached
00293E 0F693E C1 A0                   RESET_CALC_CHECKSUM_2   CMPB    #(STRING_SYM_SPACE|$80)
002940 0F6940 25 0E                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
002942 0F6942 C1 7E                                           CMPB    #(STRING_SYM_TILDE|80)
002944 0F6944 22 0A                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
                                                              ;Message is valid
002946 0F6946 18 06                                           ABA
002948 0F6948 45                                              ROLA
002949 0F6949 89 00                                           ADCA    #$00
00294B 0F694B 41                                              COMA
00294C 0F694C 14 01                                           SEC
00294E 0F694E 05 40                                           JMP     0,Y
                                                              ;Message is invalid
002950 0F6950 10 FE                   RESET_CALC_CHECKSUM_3   CLC
002952 0F6952 05 40                                           JMP     0,Y
                                      ;#Perform a reset due to a fatal error...continued
                                                              ;Check if message is valid (checksum in A, valid/invalid in C-flag)
002954 0F6954 24 05                   RESET_FATAL_1           BCC     RESET_FATAL_3           ;clear message
002956 0F6956 7A 2B 42                                        STAA    RESET_MSG_CHKSUM
                                                              ;Trigger COP
002959 0F6959 MACRO                   RESET_FATAL_2           COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
002959 0F6959 20 B0                                           JOB     RESET_COP_ENTRY                                  (COP_RESET)
                                                              ;Clear message
00295B 0F695B 87                      RESET_FATAL_3           CLRA
00295C 0F695C C7                                              CLRB
00295D 0F695D 7C 2B 40                                        STD     RESET_MSG
002960 0F6960 7A 2B 42                                        STAA    RESET_MSG_CHKSUM
002963 0F6963 20 F4                                           JOB     RESET_FATAL_2           ;trigger COP
                                      ;#Trigger a fatal error if a reset accurs
002965 0F6965 -> $2965                RESET_ISR_FATAL         EQU     *
002965 0F6965 MACRO                                           RESET_FATAL     RESET_STR_ILLIRQ
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
002965 0F6965 CE 30 29                                        LDX     #\1                                              (RESET_FATAL)
002968 0F6968 MACRO                                           RESET_FATAL_X                                            (RESET_FATAL)
                                      ;#Perform a reset due to a fatal error (error code in X)                         (RESET_FATAL/RESET_FATAL_X)
                                      ; args: X: message pointer                                                       (RESET_FATAL/RESET_FATAL_X)
                                                              ;BGND                                                    (RESET_FATAL/RESET_FATAL_X)
002968 0F6968 20 BA                                           JOB     RESET_FATAL                                      (RESET_FATAL/RESET_FATAL_X)
00296A 0F696A -> $296A                RESET_CODE_END          EQU     *
00296A 0F696A -> $F696A               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002FFB 0F6FFB                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Welcome string
                                      ;#Error indicator
002FFB 0F6FFB 46 61 74 61 6C 21 A0    RESET_STR_FATAL         FCS     "Fatal! "
                                      ;#Error messages
003002 0F7002 57 61 74 63 68 64 6F 67 RESET_STR_COP           FCS     "Watchdog timeout"
              20 74 69 6D 65 6F 75 F4 
003012 0F7012 43 6C 6F 63 6B 20 66 61 RESET_STR_CLKFAIL       FCS     "Clock failure"
              69 6C 75 72 E5          
00301F 0F701F 50 6F 77 65 72 20 6C 6F RESET_STR_POWFAIL       FCS     "Power loss"
              73 F3                   
003029 0F7029 49 6C 6C 65 67 61 6C 20 RESET_STR_ILLIRQ        FCS     "Illegal interrupt"
              69 6E 74 65 72 72 75 70 
              F4                      
00303A 0F703A -> $303A                RESET_TABS_END          EQU     *
00303A 0F703A -> $F703A               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
00303A 0F703A -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
00303A 0F703A -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
00303A 0F703A -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002B44 0F6B44                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
002B44 0F6B44 -> $2B44                NUM_VARS_END            EQU     *
002B44 0F6B44 -> $F6B44               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00296A 0F696A                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
00296A 0F696A -> $296A                NUM_REVERSE             EQU     *
                                      ;Stack layout:
00296A 0F696A -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
00296A 0F696A -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
00296A 0F696A -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
00296A 0F696A -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
00296A 0F696A -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
00296A 0F696A -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
00296A 0F696A -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
00296A 0F696A -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
00296A 0F696A -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
00296A 0F696A -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
00296A 0F696A 87                                              CLRA
00296B 0F696B 18 02 80 AA                                     MOVW    0,SP, 6,-SP     ;move return address to SP+10
00296F 0F696F 6C 86                                           STD     6,SP            ;initialize reverse number
002971 0F6971 18 00 84 00 00                                  MOVW    #$0000, 4,SP    ;  reverse number = base
002976 0F6976 18 00 82 00 00                                  MOVW    #$0000, 2,SP
00297B 0F697B 34                                              PSHX                    ;store X at SP+8
00297C 0F697C 35                                              PSHY                    ;store Y at SP+6
00297D 0F697D 3B                                              PSHD                    ;store count:base at SP+4
00297E 0F697E 34                                              PSHX                    ;store double value at SP+0
00297F 0F697F 35                                              PSHY
                                                              ;Divide FHW by base
002980 0F6980 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
002982 0F6982 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
002984 0F6984 87                                              CLRA                            ;base => D
002985 0F6985 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
002987 0F6987 B7 D4                                           EXG     X, D
002989 0F6989 18 10                                           IDIV                            ;D / X => X,  D % X => D
00298B 0F698B 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
00298D 0F698D B7 45                                           TFR     D, X                    ;remainder => X
00298F 0F698F 87                      NUM_REVERSE_2           CLRA                            ;base => D
002990 0F6990 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
002992 0F6992 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
002994 0F6994 B7 D6                                           EXG     X, Y
002996 0F6996 B7 D4                                           EXG     X, D
002998 0F6998 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
002999 0F6999 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
00299B 0F699B E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
00299E 0F699E 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
0029A1 0F69A1 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
0029A3 0F69A3 C9 00                                           ADCB    #$00
0029A5 0F69A5 89 00                                           ADCA    #$00
0029A7 0F69A7 6C 8E                                           STD     NUM_REVERSE_RMW,SP
0029A9 0F69A9 EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
0029AB 0F69AB C9 00                                           ADCB    #$00
0029AD 0F69AD 89 00                                           ADCA    #$00
0029AF 0F69AF 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
0029B1 0F69B1 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
0029B3 0F69B3 EC 82                                           LDD     NUM_REVERSE_FLW,SP
0029B5 0F69B5 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
0029B7 0F69B7 EC 80                                           LDD     NUM_REVERSE_FHW,SP
0029B9 0F69B9 27 28                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
0029BB 0F69BB ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
0029BE 0F69BE 87                                              CLRA
0029BF 0F69BF E6 85                                           LDAB    NUM_REVERSE_BASE,SP
0029C1 0F69C1 13                                              EMUL                            ;Y * D => Y:D
0029C2 0F69C2 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
0029C5 0F69C5 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
0029C7 0F69C7 B7 C6                                           EXG     D, Y
0029C9 0F69C9 6C 8E                                           STD     NUM_REVERSE_RMW,SP
0029CB 0F69CB 87                                              CLRA
0029CC 0F69CC E6 85                                           LDAB    NUM_REVERSE_BASE,SP
0029CE 0F69CE 13                                              EMUL                            ;Y * D => Y:D
0029CF 0F69CF E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
0029D1 0F69D1 6C 8E                                           STD     NUM_REVERSE_RMW,SP
                                                              ;Multiply RHW by base (carry-over in Y)
0029D3 0F69D3 EC 8C                                           LDD     NUM_REVERSE_RHW,SP
0029D5 0F69D5 B7 C6                                           EXG     D, Y
0029D7 0F69D7 6C 8C                                           STD     NUM_REVERSE_RHW,SP
0029D9 0F69D9 87                                              CLRA
0029DA 0F69DA E6 85                                           LDAB    NUM_REVERSE_BASE,SP
0029DC 0F69DC 13                                              EMUL                            ;Y * D => Y:D
0029DD 0F69DD E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
0029DF 0F69DF 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
0029E1 0F69E1 20 9D                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
0029E3 0F69E3 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0029E3 0F69E3 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0029E6 0F69E6 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0029E8 0F69E8 8F 2A 7C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0029EB 0F69EB 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0029ED 0F69ED 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
0029EF 0F69EF 00                      UF                      BGND                                                     (SSTACK_PREPULL)
0029F0 0F69F0 00                      OF                      BGND                                                     (SSTACK_PREPULL)
0029F1 0F69F1 -> $29F1                DONE                    EQU     *                                                (SSTACK_PREPULL)
0029F1 0F69F1 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
0029F3 0F69F3 3A                                              PULD                            ;
0029F4 0F69F4 31                                              PULY
0029F5 0F69F5 30                                              PULX
                                                              ;Done
0029F6 0F69F6 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
0029F7 0F69F7 -> $29F7                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
0029F7 0F69F7 -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
0029F7 0F69F7 -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
0029F7 0F69F7 -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
0029F7 0F69F7 -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
0029F7 0F69F7 -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
0029F7 0F69F7 -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
0029F7 0F69F7 -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
0029F7 0F69F7 -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
0029F7 0F69F7 34                                              PSHX                                    ;store X at SP+8
0029F8 0F69F8 35                                              PSHY                                    ;store Y at SP+6
0029F9 0F69F9 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
0029FA 0F69FA MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
0029FA 0F69FA MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
0029FA 0F69FA MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
0029FA 0F69FA 8F 2A 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
0029FD 0F69FD 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
0029FF 0F69FF 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002A02 0F6A02 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002A04 0F6A04 20 02                                           JOB     DONE                                             (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002A06 0F6A06 00                      UF                      BGND                                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002A07 0F6A07 00                      OF                      BGND                                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002A08 0F6A08 -> $2A08                DONE                    EQU     *                                                (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002A08 0F6A08 16 24 FC                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
002A0B 0F6A0B 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
002A0F 0F6A0F ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
002A11 0F6A11 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
002A13 0F6A13 B7 65                                           TFR     Y, X
002A15 0F6A15 87                                              CLRA                            ;base => D
002A16 0F6A16 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
002A18 0F6A18 B7 D4                                           EXG     X, D
002A1A 0F6A1A 18 10                                           IDIV                            ;D / X => X,  D % X => D
002A1C 0F6A1C 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
002A1E 0F6A1E B7 46                                           TFR     D, Y                    ;remainder => Y
002A20 0F6A20 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
002A21 0F6A21 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
002A23 0F6A23 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
002A25 0F6A25 B7 C5                                           EXG     D, X
002A27 0F6A27 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
002A28 0F6A28 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
002A2A 0F6A2A B7 46                                           TFR     D, Y                    ;remainder => Y
002A2C 0F6A2C EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
002A2E 0F6A2E 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
002A2F 0F6A2F 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
002A31 0F6A31 CE 30 3A                                        LdX     #NUM_SYMTAB
002A34 0F6A34 E6 E5                                           LDAB    B,X
002A36 0F6A36 16 24 0A                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
002A39 0F6A39 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
002A3C 0F6A3C EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
002A3E 0F6A3E 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
002A40 0F6A40 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
002A42 0F6A42 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
002A44 0F6A44 MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002A44 0F6A44 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002A47 0F6A47 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002A49 0F6A49 8F 2A 80                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002A4C 0F6A4C 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002A4E 0F6A4E 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002A50 0F6A50 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002A51 0F6A51 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002A52 0F6A52 -> $2A52                DONE                    EQU     *                                                (SSTACK_PREPULL)
002A52 0F6A52 14 01                                           SEC
002A54 0F6A54 3A                      NUM_REVPRINT_NB_3       PULD
002A55 0F6A55 31                                              PULY
002A56 0F6A56 30                                              PULX
                                                              ;Done
002A57 0F6A57 3D                                              RTS
                                                              ;Printing incomplete
002A58 0F6A58 MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002A58 0F6A58 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002A5B 0F6A5B 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002A5D 0F6A5D 8F 2A 80                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
002A60 0F6A60 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
002A62 0F6A62 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (SSTACK_PREPULL)
002A64 0F6A64 00                      UF                      BGND                                                     (SSTACK_PREPULL)
002A65 0F6A65 00                      OF                      BGND                                                     (SSTACK_PREPULL)
002A66 0F6A66 -> $2A66                DONE                    EQU     *                                                (SSTACK_PREPULL)
002A66 0F6A66 10 FE                                           CLC
002A68 0F6A68 20 EA                                           JOB     NUM_REVPRINT_NB_3
002A6A 0F6A6A -> $2A6A                NUM_CODE_END            EQU     *
002A6A 0F6A6A -> $F6A6A               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00303A 0F703A                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
00303A 0F703A 30                      NUM_SYMTAB              DB      "0"
00303B 0F703B 31                                              DB      "1"
00303C 0F703C 32                                              DB      "2"
00303D 0F703D 33                                              DB      "3"
00303E 0F703E 34                                              DB      "4"
00303F 0F703F 35                                              DB      "5"
003040 0F7040 36                                              DB      "6"
003041 0F7041 37                                              DB      "7"
003042 0F7042 38                                              DB      "8"
003043 0F7043 39                                              DB      "9"
003044 0F7044 41                                              DB      "A"
003045 0F7045 42                                              DB      "B"
003046 0F7046 43                                              DB      "C"
003047 0F7047 44                                              DB      "D"
003048 0F7048 45                                              DB      "E"
003049 0F7049 46                                              DB      "F"
00304A 0F704A 4A                      NUM_SYMTAB_END  DB      *
00304B 0F704B -> $304B                NUM_TABS_END            EQU     *
00304B 0F704B -> $F704B               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - Non-Volatile Memory Driver (S12G-Micro-EVB)                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module erase and programing routines for the on-chip NVMs.          #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002B44 0F6B44                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
002B44 0F6B44 -> $2B44                NVM_VARS_END            EQU     *
002B44 0F6B44 -> $F6B44               NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
002A6A 0F6A6A -> $2A6A                NVM_CODE_END            EQU     *
002A6A 0F6A6A -> $F6A6A               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00304B 0F704B                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
00304B 0F704B -> $304B                NVM_TABS_END            EQU     *
00304B 0F704B -> $F704B               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (S12G-Micro-EVB)                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    KEYS    - Keypad controller                                              #
                                      ;#    BATMON  - Battery monitor                                                #
                                      ;#    SCI     - UART driver                                                    #
                                      ;#    DISP    - ST7565R display driver                                         #
                                      ;#    ERROR   - Error handler                                                  #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 14, 2012                                                           #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added dummy vectors                                                  #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Restructured table                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002B44 0F6B44                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
002B44 0F6B44 -> $2B44                VECTAB_VARS_END         EQU     *
002B44 0F6B44 -> $F6B44               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
002A6A 0F6A6A -> $2A6A                VECTAB_CODE_END         EQU     *
002A6A 0F6A6A -> $F6A6A               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00304B 0F704B                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
00304B 0F704B 00                      ISR_SPURIOUS            BGND                            ;vector base + $80
00304C 0F704C 00                      ISR_PAD                 BGND
00304D 0F704D 00                      ISR_ADCCOMP             BGND
00304E 0F704E 00                      ISR_RES86               BGND                            ;vector base + $86
00304F 0F704F 00                      ISR_API                 BGND                            ;vector base + $88
003050 0F7050 00                      ISR_LVI                 BGND                            ;vector base + $8A
003051 0F7051 00                      ISR_RES8C               BGND                            ;vector base + $8C
003052 0F7052 00                      ISR_PORTP               BGND
003053 0F7053 00                      ISR_RES90               BGND                            ;vector base + $90
003054 0F7054 00                      ISR_RES92               BGND                            ;vector base + $92
003055 0F7055 00                      ISR_RES94               BGND                            ;vector base + $94
003056 0F7056 00                      ISR_RES96               BGND                            ;vector base + $96
003057 0F7057 00                      ISR_RES98               BGND                            ;vector base + $98
003058 0F7058 00                      ISR_RES9A               BGND                            ;vector base + $9A
003059 0F7059 00                      ISR_RES9C               BGND                            ;vector base + $9C
00305A 0F705A 00                      ISR_RES9E               BGND                            ;vector base + $9E
00305B 0F705B 00                      ISR_RESA0               BGND                            ;vector base + $A0
00305C 0F705C 00                      ISR_RESA2               BGND                            ;vector base + $A2
00305D 0F705D 00                      ISR_RESA4               BGND                            ;vector base + $A4
00305E 0F705E 00                      ISR_RESA6               BGND                            ;vector base + $A6
00305F 0F705F 00                      ISR_RESA8               BGND                            ;vector base + $A8
003060 0F7060 00                      ISR_RESAA               BGND                            ;vector base + $AA
003061 0F7061 00                      ISR_RESAC               BGND                            ;vector base + $AC
003062 0F7062 00                      ISR_RESAE               BGND                            ;vector base + $AE
003063 0F7063 00                      ISR_CANTX               BGND                            ;vector base + $A0
003064 0F7064 00                      ISR_CANRX               BGND                            ;vector base + $B2
003065 0F7065 00                      ISR_CANERR              BGND                            ;vector base + $B4
003066 0F7066 00                      ISR_CANWUP              BGND                            ;vector base + $B6
003067 0F7067 00                      ISR_FLASH               BGND                            ;vector base + $B8
003068 0F7068 00                      ISR_FLASHFLT            BGND                            ;vector base + $BA
003069 0F7069 00                      ISR_SPI2                BGND                            ;vector base + $BC
00306A 0F706A 00                      ISR_SPI1                BGND                            ;vector base + $BE
00306B 0F706B 00                      ISR_RESC0               BGND                            ;vector base + $C0
00306C 0F706C 00                      ISR_SCI2                BGND                            ;vector base + $C2
00306D 0F706D 00                      ISR_RESC4               BGND                            ;vector base + $C4
00306E 0F706E 00                      ISR_PLLLOCK             BGND                            ;vector base + $C6
00306F 0F706F 00                      ISR_OSCSTAT             BGND                            ;vector base + $C8
003070 0F7070 00                      ISR_RESCA               BGND                            ;vector base + $CA
003071 0F7071 00                      ISR_ACMP                BGND                            ;vector base + $CC
003072 0F7072 00                      ISR_PORTJ               BGND                            ;vector base + $CC
003073 0F7073 00                      ISR_RESD0               BGND                            ;vector base + $D0
003074 0F7074 00                      ISR_ATD0                BGND                            ;vector base + $D2
003075 0F7075 00                      ISR_SCI1                BGND                            ;vector base + $D4
003076 0F7076 -> $271E                ISR_SCI0                EQU     SCI_ISR_RXTX
003076 0F7076 00                      ISR_SPI0                BGND
003077 0F7077 00                      ISR_TIM_PAIE            BGND                            ;vector base + $DA
003078 0F7078 00                      ISR_TIM_PAOV            BGND                            ;vector base + $DC
003079 0F7079 00                      ISR_TIM_TOV             BGND                            ;vector base + $DE
00307A 0F707A 00                      ISR_TIM_TC7             BGND                            ;vector base + $E0
00307B 0F707B 00                      ISR_TIM_TC6             BGND                            ;vector base + $E2
00307C 0F707C 00                      ISR_TIM_TC5             BGND                            ;vector base + $E4
00307D 0F707D 00                      ISR_TIM_TC4             BGND                            ;vector base + $E6
00307E 0F707E -> $2683                ISR_TIM_TC3             EQU     SCI_ISR_DELAY
00307E 0F707E 00                      ISR_TIM_TC2             BGND                            ;vector base + $EA
00307F 0F707F -> $27D2                ISR_TIM_TC1             EQU     SCI_ISR_BD_NE
00307F 0F707F -> $27FE                ISR_TIM_TC0             EQU     SCI_ISR_BD_PE
00307F 0F707F 00                      ISR_RTI                 BGND                            ;vector base + $F0
003080 0F7080 00                      ISR_IRQ                 BGND                            ;vector base + $F2
003081 0F7081 00                      ISR_XIRQ                BGND                            ;vector base + $F4
003082 0F7082 00                      ISR_SWI                 BGND                            ;vector base + $F6
003083 0F7083 00                      ISR_TRAP                BGND                            ;vector base + $F8
                                      ;#Code entry points
                                      ;#-----------------
003084 0F7084 -> $2000                RES_COP                 EQU     RES_EXT
003084 0F7084 -> $2000                RES_CM                  EQU     RES_EXT
003084 0F7084 -> $2000                RES_EXT                 EQU     START_OF_CODE
003084 0F7084 -> $3084                VECTAB_TABS_END         EQU     *
003084 0F7084 -> $F7084               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12G Vector Table                                                           #
                                      ;###############################################################################
003F80 003F80                                                 ORG     VECTAB_START, VECTAB_START_LIN
003F80 003F80 30 4B                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $80
003F82 003F82 30 4C                   VEC_PAD                 DW      ISR_PAD                 ;vector base + $82
003F84 003F84 30 4D                   VEC_ADCCOMP             DW      ISR_ADCCOMP             ;vector base + $84
003F86 003F86 30 4E                   VEC_RES86               DW      ISR_RES86               ;vector base + $86
003F88 003F88 30 4F                   VEC_API                 DW      ISR_API                 ;vector base + $88
003F8A 003F8A 30 50                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $8A
003F8C 003F8C 30 51                   VEC_RES8C               DW      ISR_RES8C               ;vector base + $8C
003F8E 003F8E 30 52                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
003F90 003F90 30 53                   VEC_RES90               DW      ISR_RES90               ;vector base + $90
003F92 003F92 30 54                   VEC_RES92               DW      ISR_RES92               ;vector base + $92
003F94 003F94 30 55                   VEC_RES94               DW      ISR_RES94               ;vector base + $94
003F96 003F96 30 56                   VEC_RES96               DW      ISR_RES96               ;vector base + $96
003F98 003F98 30 57                   VEC_RES98               DW      ISR_RES98               ;vector base + $98
003F9A 003F9A 30 58                   VEC_RES9A               DW      ISR_RES9A               ;vector base + $9A
003F9C 003F9C 30 59                   VEC_RES9C               DW      ISR_RES9C               ;vector base + $9C
003F9E 003F9E 30 5A                   VEC_RES9E               DW      ISR_RES9E               ;vector base + $9E
003FA0 003FA0 30 5B                   VEC_RESA0               DW      ISR_RESA0               ;vector base + $A0
003FA2 003FA2 30 5C                   VEC_RESA2               DW      ISR_RESA2               ;vector base + $A2
003FA4 003FA4 30 5D                   VEC_RESA4               DW      ISR_RESA4               ;vector base + $A4
003FA6 003FA6 30 5E                   VEC_RESA6               DW      ISR_RESA6               ;vector base + $A6
003FA8 003FA8 30 5F                   VEC_RESA8               DW      ISR_RESA8               ;vector base + $A8
003FAA 003FAA 30 60                   VEC_RESAA               DW      ISR_RESAA               ;vector base + $AA
003FAC 003FAC 30 61                   VEC_RESAC               DW      ISR_RESAC               ;vector base + $AC
003FAE 003FAE 30 62                   VEC_RESAE               DW      ISR_RESAE               ;vector base + $AE
003FB0 003FB0 30 63                   VEC_CANTX               DW      ISR_CANTX               ;vector base + $A0
003FB2 003FB2 30 64                   VEC_CANRX               DW      ISR_CANRX               ;vector base + $B2
003FB4 003FB4 30 65                   VEC_CANERR              DW      ISR_CANERR              ;vector base + $B4
003FB6 003FB6 30 66                   VEC_CANWUP              DW      ISR_CANWUP              ;vector base + $B6
003FB8 003FB8 30 67                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
003FBA 003FBA 30 68                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
003FBC 003FBC 30 69                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
003FBE 003FBE 30 6A                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
003FC0 003FC0 30 6B                   VEC_RESC0               DW      ISR_RESC0               ;vector base + $C0
003FC2 003FC2 30 6C                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $C2
003FC4 003FC4 30 6D                   VEC_RESC4               DW      ISR_RESC4               ;vector base + $C4
003FC6 003FC6 30 6E                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
003FC8 003FC8 30 6F                   VEC_OSCSTAT             DW      ISR_OSCSTAT             ;vector base + $C8
003FCA 003FCA 30 70                   VEC_RESCA               DW      ISR_RESCA               ;vector base + $CA
003FCC 003FCC 30 71                   VEC_ACMP                DW      ISR_ACMP                ;vector base + $CC
003FCE 003FCE 30 72                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CC
003FD0 003FD0 30 73                   VEC_RESD0               DW      ISR_RESD0               ;vector base + $D0
003FD2 003FD2 30 74                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
003FD4 003FD4 30 75                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
003FD6 003FD6 27 1E                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
003FD8 003FD8 30 76                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
003FDA 003FDA 30 77                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $DA
003FDC 003FDC 30 78                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $DC
003FDE 003FDE 30 79                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $DE
003FE0 003FE0 30 7A                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $E0
003FE2 003FE2 30 7B                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $E2
003FE4 003FE4 30 7C                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $E4
003FE6 003FE6 30 7D                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $E6
003FE8 003FE8 26 83                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $E8
003FEA 003FEA 30 7E                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $EA
003FEC 003FEC 27 D2                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $EC
003FEE 003FEE 27 FE                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $EE
003FF0 003FF0 30 7F                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
003FF2 003FF2 30 80                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
003FF4 003FF4 30 81                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
003FF6 003FF6 30 82                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
003FF8 003FF8 30 83                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
003FFA 003FFA 20 00                   VEC_RESET_COP           DW      RES_COP                 ;vector base + $FA
003FFC 003FFC 20 00                   VEC_RESET_CM            DW      RES_CM                  ;vector base + $FC
003FFE 003FFE 20 00                   VEC_RESET_EXT           DW      RES_EXT                 ;vector base + $FE
004000 004000                         V
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002A6A 0F6A6A                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
002A6A 0F6A6A -> $2A6A                DEMO_VARS_END           EQU     *
002A6A 0F6A6A -> $F6A6A               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
002000 0F6000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
002000 0F6000 MACRO                                           BASE_INIT
                                      ;############################################################################### (BASE_INIT)
                                      ;# Macros                                                                      # (BASE_INIT)
                                      ;############################################################################### (BASE_INIT)
                                      ;#Initialization                                                                 (BASE_INIT)
002000 0F6000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#Urgent initializations                                         (BASE_INIT/GPIO_INIT)
002000 0F6000 18 0B 03 02 4D                          MOVB    #03, PPSS                               ;switch to pull-downs on PS[1:0] (TX/RX) (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
002005 0F6005 86 80                                   LDAA    #MODC                                   ;lock MODE register into NSC mode (BASE_INIT/GPIO_INIT)
002007 0F6007 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
002009 0F6009 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
00200B 0F600B 18 03 FF FE 00 7C                       MOVW    #%1111_1111_1111_1110, ATDDIEN          ;switch unused pins to digital (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PT0AD                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDR0AD                                           (BASE_INIT/GPIO_INIT)
002011 0F6011 18 03 FF FE 02 78                       MOVW    #$FFFE, PER0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PPS0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PIE0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A, B, C, D, and E                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                           ;port A/B        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRA                            ;port A/B        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                           ;port C/D        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                            ;port C/D        (BASE_INIT/GPIO_INIT)
002017 0F6017 18 03 03 03 00 08                       MOVW    #$0303, PORTE                           ;port E (PORTE/DDRE) (BASE_INIT/GPIO_INIT)
00201D 0F601D 18 0B 4F 00 0C                          MOVB    #$4F,   PUCR                            ;BKPUE|~PDPEE|PUPDE|PUPCE|PUPBE|PUPAE (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$C0,   ECLKCTL                                          (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   IRQCR                                            (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTJ                                              (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   DDRJ                                             (BASE_INIT/GPIO_INIT)
002022 0F6022 18 0B FF 02 6C                          MOVB    #$FF    PERJ                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPSJ                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEJ                            ;PIEJ/PIFJ       (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTM                                              (BASE_INIT/GPIO_INIT)
002027 0F6027 18 0B 02 02 52                          MOVB    #$02,   DDRM                                             (BASE_INIT/GPIO_INIT)
00202C 0F602C 18 03 0D 01 02 54                       MOVW    #$0D01  PERM                            ;PERM/PPSM       (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMM                                             (BASE_INIT/GPIO_INIT)
002032 0F6032 18 0C 02 57 02 57                       MOVB    PKGCR, PKGCR                            ;lock PKGCR      (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTP                                              (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   DDRP                                             (BASE_INIT/GPIO_INIT)
002038 0F6038 18 0B FF 02 5C                          MOVB    #$FF    PERP                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPSP                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEP                            ;PIEP/PIFP       (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
00203D 0F603D 18 0B 80 02 48                          MOVB    #$80, PTS                                                (BASE_INIT/GPIO_INIT)
002042 0F6042 18 0B F2 02 4A                          MOVB    #$F2, DDRS                                               (BASE_INIT/GPIO_INIT)
002047 0F6047 18 03 00 01 02 4C                       MOVW    #$01, PERS                              ;PERS/PPSS       (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMS                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTT                                              (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   DDRT                                             (BASE_INIT/GPIO_INIT)
00204D 0F604D 18 0B FC 02 44                          MOVB    #$FC    PERT                                             (BASE_INIT/GPIO_INIT)
002052 0F6052 MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
002052 0F6052 18 0B FF 00 37                                  MOVB    #$FF, CPMUFLG                                   ;clear all flags (BASE_INIT/CLOCK_INIT)
002057 0F6057 18 03 58 00 00 34                               MOVW    #CLOCK_PLL_CONFIG, CPMUSYNR                     ;setup PLL (BASE_INIT/CLOCK_INIT)
00205D 0F605D 79 00 36                                        CLR     CPMUPOSTDIV                                     ;disable POSTDIV divider (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUINT                                         ;disable PLL lock interrupts (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #LOCKIE, CPMUINT                                ;enable PLL lock interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #PLLSEL, CPMUCLKS                               ;enable PLL (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUPLL                                         ;no frequency modulation (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMURTI                                         ;no real time interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #(RSBCK|CR1|CR2|CR3), CPMUCOP                   ;configure COP (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMULVCTL                                       ;no low-voltage interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPICTL                                      ;no API (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRH                                       ;no API (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRL                                       ;no API (BASE_INIT/CLOCK_INIT)
002060 0F6060 18 0B 01 02 FB                                  MOVB    #PROT, CPMUPROT                                 ;lock CPMU configuration (BASE_INIT/CLOCK_INIT)
002065 0F6065 MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
002065 0F6065 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
00206A 0F606A MACRO                                           MMAP_INIT                                                (BASE_INIT)
00206A 0F606A MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (BASE_INIT/VECTAB_INIT)
00206A 0F606A 18 0B 3F 01 20                                  MOVB    #(VECTAB_START>>8), IVBR                         (BASE_INIT/VECTAB_INIT)
00206F 0F606F MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
00206F 0F606F CF 2A 8E                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
002072 0F6072 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
002074 0F6074 MACRO                                           TIM_INIT                                                 (BASE_INIT)
002074 0F6074 MACRO                                           STRING_INIT                                              (BASE_INIT)
002074 0F6074 MACRO                                           NUM_INIT                                                 (BASE_INIT)
002074 0F6074 MACRO                                           NVM_INIT                                                 (BASE_INIT)
002074 0F6074 MACRO                                           LED_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/LED_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/LED_INIT)
002074 0F6074 MACRO                                           LED_OFF                                                  (BASE_INIT/LED_INIT)
                                      ;#Turn LED on (do nothing)                                                       (BASE_INIT/LED_INIT/LED_OFF)
                                      ;#Turn LED off (turn all LEDs off)                                               (BASE_INIT/LED_INIT/LED_OFF)
002074 0F6074 4C 08 03                                        BSET    LED_PORT, #(LED_ALL)                             (BASE_INIT/LED_INIT/LED_OFF)
002077 0F6077 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
002077 0F6077 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
002079 0F6079 4E 39 80 1C                             BRSET   CPMUCLKS, #PLLSEL, DONE                         ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00207D 0F607D MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00207D 0F607D 8F 2A 73                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002080 0F6080 25 13                                           BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002082 0F6082 8F 2A 8E                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002085 0F6085 22 0F                                           BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002087 0F6087 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
002087 0F6087 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00208C 0F608C 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
002091 0F6091 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002093 0F6093 20 02                                           JOB     DONE                                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002095 0F6095 00                      OF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002096 0F6096 00                      UF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002097 0F6097 -> $2097                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
002097 0F6097 20 DE                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
002099 0F6099 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00209B 0F609B MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_INIT)
00209B 0F609B CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_INIT)
00209E 0F609E 7C 2A B8                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_INIT)
0020A1 0F60A1 7C 2A AE                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_INIT)
0020A4 0F60A4 7A 2A BC                                        STAA    SCI_FLGS                                         (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                      ;                       STD     SCI_BD_RECOVCNT                         ;reset baud rate check list and recovery count (BASE_INIT/SCI_INIT)
0020A7 0F60A7 7A 2A BD                                        STAA    SCI_BD_LIST                             ;reset baud rate check list (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
0020AA 0F60AA 4C 40 0C                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
0020AD 0F60AD 18 0B 18 00 CD                                  MOVB    #(TXPOL|RXPOL), SCISR2                           (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
0020B2 0F60B2 FC 2A BA                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
0020B5 0F60B5 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
0020B7 0F60B7 CE 19 99                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
0020BA 0F60BA 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
0020BC 0F60BC 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
0020BF 0F60BF 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
0020C1 0F60C1 CD 2B B8                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
0020C4 0F60C4 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
0020C6 0F60C6 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
0020C8 0F60C8 8D 2B C8                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
0020CB 0F60CB 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
0020CD 0F60CD CE 00 A3                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
0020D0 0F60D0 18 03 4C 6B 2A BA                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
0020D6 0F60D6 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format and enable transmission                (BASE_INIT/SCI_INIT)
0020D8 0F60D8 18 03 04 2C 00 CA                               MOVW    #((SCI_8N1<<8)|RIE|TE|RE), SCICR1       ;8N1 (keep TX IRQs disabled) (BASE_INIT/SCI_INIT)
                                                              ;Initialize CTS                                          (BASE_INIT/SCI_INIT)
0020DE 0F60DE MACRO                                           SCI_ASSERT_CTS                                           (BASE_INIT/SCI_INIT)
                                      ;#Assert CTS (allow incoming data)                                               (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
0020DE 0F60DE 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)                    (BASE_INIT/SCI_INIT)
0020E2 0F60E2 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (BASE_INIT/SCI_INIT)
0020E5 0F60E5 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Check for POR                                           (BASE_INIT/RESET_INIT)
0020E5 0F60E5 B6 2B 43                                        LDAA    RESET_FLGS                                       (BASE_INIT/RESET_INIT)
0020E8 0F60E8 85 40                                           BITA    #RESET_FLG_POR                                   (BASE_INIT/RESET_INIT)
0020EA 0F60EA 26 53                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Check for power failure (flags in A)                    (BASE_INIT/RESET_INIT)
0020EC 0F60EC CD 30 1F                                        LDY     #RESET_STR_POWFAIL                               (BASE_INIT/RESET_INIT)
0020EF 0F60EF 85 20                                           BITA    #RESET_FLG_POWFAIL                               (BASE_INIT/RESET_INIT)
0020F1 0F60F1 26 21                                           BNE     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Check for clock failure (flags in A)                    (BASE_INIT/RESET_INIT)
0020F3 0F60F3 CD 30 12                                        LDY     #RESET_STR_CLKFAIL                               (BASE_INIT/RESET_INIT)
0020F6 0F60F6 85 01                                           BITA    #RESET_FLG_CLKFAIL                               (BASE_INIT/RESET_INIT)
0020F8 0F60F8 26 1A                                           BNE     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Check for code runaway (flags in A)                     (BASE_INIT/RESET_INIT)
                                                              ;Check for COP reset (flags in A)                        (BASE_INIT/RESET_INIT)
0020FA 0F60FA 85 02                                           BITA    #RESET_FLG_COP                                   (BASE_INIT/RESET_INIT)
0020FC 0F60FC 27 41                                           BEQ     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Check custom error                                      (BASE_INIT/RESET_INIT)
0020FE 0F60FE FE 2B 40                                        LDX     RESET_MSG                                        (BASE_INIT/RESET_INIT)
002101 0F6101 CD 21 07                                        LDY     #RESET_INIT_1                                    (BASE_INIT/RESET_INIT)
002104 0F6104 06 29 2A                                        JOB     RESET_CALC_CHECKSUM                              (BASE_INIT/RESET_INIT)
002107 0F6107 -> $2107                RESET_INIT_1            EQU     *                                                (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (checksum in A, valid/invalid in C) (BASE_INIT/RESET_INIT)
002107 0F6107 FD 30 02                                        LDY     RESET_STR_COP                                    (BASE_INIT/RESET_INIT)
00210A 0F610A 24 08                                           BCC     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Verify checksum (checksum in A)                         (BASE_INIT/RESET_INIT)
00210C 0F610C B1 2B 42                                        CMPA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
00210F 0F610F 26 2E                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
002111 0F6111 FD 2B 40                                        LDY     RESET_MSG                                        (BASE_INIT/RESET_INIT)
                                                              ;Print error message (error message in Y)                (BASE_INIT/RESET_INIT)
002114 0F6114 CE 2F FB                RESET_INIT_2            LDX     #RESET_STR_FATAL                                 (BASE_INIT/RESET_INIT)
002117 0F6117 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
002117 0F6117 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
002117 0F6117                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
002117 0F6117 MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
002117 0F6117 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
002117 0F6117 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002117 0F6117 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00211A 0F611A 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00211C 0F611C 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00211F 0F611F 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002121 0F6121 20 02                                           JOB     DONE                                             (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002123 0F6123 00                      UF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002124 0F6124 00                      OF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002125 0F6125 -> $2125                DONE                    EQU     *                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002125 0F6125 16 25 2C                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
002128 0F6128 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
002128 0F6128 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002128 0F6128 8F 2A 7B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00212B 0F612B 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00212D 0F612D 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002130 0F6130 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002132 0F6132 20 02                                           JOB     DONE                                             (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002134 0F6134 00                      UF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002135 0F6135 00                      OF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002136 0F6136 -> $2136                DONE                    EQU     *                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002136 0F6136 16 28 A7                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
002139 0F6139 24 DC                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00213B 0F613B B7 65                                           TFR     Y, X                                             (BASE_INIT/RESET_INIT)
00213D 0F613D 20 03                                           JOB     RESET_INIT_4                                     (BASE_INIT/RESET_INIT)
                                                              ;Print welcome message                                   (BASE_INIT/RESET_INIT)
00213F 0F613F CE 2B 44                RESET_INIT_3            LDX     #RESET_WELCOME                                   (BASE_INIT/RESET_INIT)
002142 0F6142 MACRO                   RESET_INIT_4            STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
002142 0F6142 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
002142 0F6142                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
002142 0F6142 MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
002142 0F6142 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
002142 0F6142 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002142 0F6142 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002145 0F6145 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002147 0F6147 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00214A 0F614A 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00214C 0F614C 20 02                                           JOB     DONE                                             (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00214E 0F614E 00                      UF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00214F 0F614F 00                      OF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002150 0F6150 -> $2150                DONE                    EQU     *                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002150 0F6150 16 25 2C                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
002153 0F6153 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
002153 0F6153 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002153 0F6153 8F 2A 7B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002156 0F6156 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002158 0F6158 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00215B 0F615B 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00215D 0F615D 20 02                                           JOB     DONE                                             (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00215F 0F615F 00                      UF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002160 0F6160 00                      OF                      BGND                                                     (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002161 0F6161 -> $2161                DONE                    EQU     *                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002161 0F6161 16 28 A7                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
002164 0F6164 24 DC                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                                              ;Print exlamation mark and new line                      (BASE_INIT/RESET_INIT)
                                                              ;LDX    #STRING_STR_EXCLAM_NL                            (BASE_INIT/RESET_INIT)
                                                              ;STRING_PRINT_BL                                         (BASE_INIT/RESET_INIT)
                                                              ;Remove custom error message                             (BASE_INIT/RESET_INIT)
002166 0F6166 DC 00                                           LDD     $0000                                            (BASE_INIT/RESET_INIT)
002168 0F6168 7C 2B 40                                        STD     RESET_MSG                                        (BASE_INIT/RESET_INIT)
00216B 0F616B 7A 2B 42                                        STAA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
                                                              ;Wait until message has been transmitted                 (BASE_INIT/RESET_INIT)
00216E 0F616E MACRO                                           SCI_TX_DONE_BL                                           (BASE_INIT/RESET_INIT)
                                      ;#Wait until all pending data is sent                                            (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; result: A: number of entries left in TX queue                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
00216E 0F616E MACRO                                           SSTACK_JOBSR    SCI_TX_DONE_BL, 6                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
00216E 0F616E MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00216E 0F616E 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002171 0F6171 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002173 0F6173 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002176 0F6176 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002178 0F6178 20 02                                           JOB     DONE                                             (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00217A 0F617A 00                      UF                      BGND                                                     (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00217B 0F617B 00                      OF                      BGND                                                     (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00217C 0F617C -> $217C                DONE                    EQU     *                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00217C 0F617C 16 24 BB                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;Application code
00217F 0F617F MACRO                   DEMO_LOOP               SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00217F 0F617F MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00217F 0F617F MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00217F 0F617F 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002182 0F6182 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002184 0F6184 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002187 0F6187 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002189 0F6189 20 02                                           JOB     DONE                                             (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00218B 0F618B 00                      UF                      BGND                                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00218C 0F618C 00                      OF                      BGND                                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00218D 0F618D -> $218D                DONE                    EQU     *                                                (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00218D 0F618D 16 25 B3                                        JOBSR   \1                                               (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors
002190 0F6190 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
002192 0F6192 26 EB                                           BNE     DEMO_LOOP
                                                              ;TBNE   A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
002194 0F6194 B7 45                                           TFR     D, X
002196 0F6196 86 04                                           LDAA    #4
002198 0F6198 C6 20                                           LDAB    #" "
00219A 0F619A MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00219A 0F619A MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00219A 0F619A                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00219A 0F619A MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00219A 0F619A MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00219A 0F619A MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00219A 0F619A 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00219D 0F619D 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00219F 0F619F 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021A2 0F61A2 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021A4 0F61A4 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021A6 0F61A6 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021A7 0F61A7 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021A8 0F61A8 -> $21A8                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021A8 0F61A8 16 25 2C                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
0021AB 0F61AB MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0021AB 0F61AB MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021AB 0F61AB 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021AE 0F61AE 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B0 0F61B0 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B3 0F61B3 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B5 0F61B5 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B7 0F61B7 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B8 0F61B8 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B9 0F61B9 -> $21B9                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021B9 0F61B9 16 28 DE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0021BC 0F61BC 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
0021BE 0F61BE B7 54                                           TFR     X, D
0021C0 0F61C0 87                                              CLRA
0021C1 0F61C1 MACRO                                           STRING_MAKE_PRINTABLE_B
                                      ;#Make ASCII character printable                                                 (STRING_MAKE_PRINTABLE_B)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_MAKE_PRINTABLE_B)
                                      ; result: B: printable ASCII character or "."                                    (STRING_MAKE_PRINTABLE_B)
                                      ; SSTACK: none                                                                   (STRING_MAKE_PRINTABLE_B)
                                      ;         X, Y, and A are preserved                                              (STRING_MAKE_PRINTABLE_B)
0021C1 0F61C1 C1 20                                           CMPB    #$20            ;" "                             (STRING_MAKE_PRINTABLE_B)
0021C3 0F61C3 25 04                                           BLO     ADJUST                                           (STRING_MAKE_PRINTABLE_B)
0021C5 0F61C5 C1 7E                                           CMPB    #$7E            ;"~"                             (STRING_MAKE_PRINTABLE_B)
0021C7 0F61C7 23 02                                           BLS     DONE                                             (STRING_MAKE_PRINTABLE_B)
0021C9 0F61C9 C6 2E                   ADJUST                  LDAB    #$2E            ;"."                             (STRING_MAKE_PRINTABLE_B)
0021CB 0F61CB -> $21CB                DONE                    EQU     *                                                (STRING_MAKE_PRINTABLE_B)
0021CB 0F61CB MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
0021CB 0F61CB MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 7                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
0021CB 0F61CB MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021CB 0F61CB 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021CE 0F61CE 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D0 0F61D0 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D3 0F61D3 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D5 0F61D5 20 02                                           JOB     DONE                                             (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D7 0F61D7 00                      UF                      BGND                                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D8 0F61D8 00                      OF                      BGND                                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D9 0F61D9 -> $21D9                DONE                    EQU     *                                                (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021D9 0F61D9 16 24 4A                                        JOBSR   \1                                               (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
0021DC 0F61DC CD 00 00                                        LDY     #$0000
0021DF 0F61DF C6 10                                           LDAB    #16
0021E1 0F61E1 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0021E1 0F61E1 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0021E1 0F61E1 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021E1 0F61E1 8F 2A 85                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021E4 0F61E4 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021E6 0F61E6 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021E9 0F61E9 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021EB 0F61EB 20 02                                           JOB     DONE                                             (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021ED 0F61ED 00                      UF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021EE 0F61EE 00                      OF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021EF 0F61EF -> $21EF                DONE                    EQU     *                                                (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0021EF 0F61EF 16 29 6A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0021F2 0F61F2 B7 76                                           TFR     SP, Y
0021F4 0F61F4 40                                              NEGA
0021F5 0F61F5 8B 05                                           ADDA    #5
0021F7 0F61F7 C6 20                                           LDAB    #" "
0021F9 0F61F9 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0021F9 0F61F9 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
0021F9 0F61F9                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
0021F9 0F61F9 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
0021F9 0F61F9 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0021F9 0F61F9 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021F9 0F61F9 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021FC 0F61FC 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0021FE 0F61FE 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002201 0F6201 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002203 0F6203 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002205 0F6205 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002206 0F6206 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002207 0F6207 -> $2207                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002207 0F6207 16 25 2C                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00220A 0F620A MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00220A 0F620A MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00220A 0F620A 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00220D 0F620D 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00220F 0F620F 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002212 0F6212 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002214 0F6214 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002216 0F6216 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002217 0F6217 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002218 0F6218 -> $2218                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002218 0F6218 16 28 DE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00221B 0F621B 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00221D 0F621D C6 10                                           LDAB    #16
00221F 0F621F MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00221F 0F621F MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00221F 0F621F                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00221F 0F621F MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00221F 0F621F MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00221F 0F621F MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00221F 0F621F 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002222 0F6222 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002224 0F6224 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002227 0F6227 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002229 0F6229 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00222B 0F622B 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00222C 0F622C 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00222D 0F622D -> $222D                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00222D 0F622D 16 25 2C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
002230 0F6230 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
002230 0F6230 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002230 0F6230 8F 2A 86                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002233 0F6233 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002235 0F6235 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002238 0F6238 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00223A 0F623A 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00223C 0F623C 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00223D 0F623D 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00223E 0F623E -> $223E                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00223E 0F623E 16 29 F7                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
002241 0F6241 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
002243 0F6243 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
002243 0F6243 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002243 0F6243 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002246 0F6246 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002248 0F6248 8F 2A 88                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00224B 0F624B 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00224D 0F624D 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00224F 0F624F 00                      UF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002250 0F6250 00                      OF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002251 0F6251 -> $2251                DONE                    EQU     *                                                (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002251 0F6251 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
002253 0F6253 CD 00 00                                        LDY     #$0000
002256 0F6256 C6 0A                                           LDAB    #10
002258 0F6258 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
002258 0F6258 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
002258 0F6258 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002258 0F6258 8F 2A 85                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00225B 0F625B 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00225D 0F625D 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002260 0F6260 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002262 0F6262 20 02                                           JOB     DONE                                             (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002264 0F6264 00                      UF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002265 0F6265 00                      OF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002266 0F6266 -> $2266                DONE                    EQU     *                                                (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002266 0F6266 16 29 6A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
002269 0F6269 B7 76                                           TFR     SP, Y
00226B 0F626B 40                                              NEGA
00226C 0F626C 8B 05                                           ADDA    #5
00226E 0F626E C6 20                                           LDAB    #" "
002270 0F6270 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
002270 0F6270 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
002270 0F6270                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
002270 0F6270 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
002270 0F6270 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
002270 0F6270 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002270 0F6270 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002273 0F6273 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002275 0F6275 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002278 0F6278 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00227A 0F627A 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00227C 0F627C 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00227D 0F627D 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00227E 0F627E -> $227E                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00227E 0F627E 16 25 2C                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
002281 0F6281 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
002281 0F6281 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002281 0F6281 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002284 0F6284 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002286 0F6286 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002289 0F6289 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00228B 0F628B 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00228D 0F628D 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00228E 0F628E 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00228F 0F628F -> $228F                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00228F 0F628F 16 28 DE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
002292 0F6292 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
002294 0F6294 C6 0A                                           LDAB    #10
002296 0F6296 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
002296 0F6296 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
002296 0F6296                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
002296 0F6296 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
002296 0F6296 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
002296 0F6296 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002296 0F6296 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002299 0F6299 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00229B 0F629B 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00229E 0F629E 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022A0 0F62A0 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022A2 0F62A2 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022A3 0F62A3 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022A4 0F62A4 -> $22A4                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022A4 0F62A4 16 25 2C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0022A7 0F62A7 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0022A7 0F62A7 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022A7 0F62A7 8F 2A 86                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022AA 0F62AA 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022AC 0F62AC 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022AF 0F62AF 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022B1 0F62B1 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022B3 0F62B3 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022B4 0F62B4 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022B5 0F62B5 -> $22B5                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022B5 0F62B5 16 29 F7                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0022B8 0F62B8 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0022BA 0F62BA MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
0022BA 0F62BA MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022BA 0F62BA 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022BD 0F62BD 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022BF 0F62BF 8F 2A 88                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022C2 0F62C2 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022C4 0F62C4 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022C6 0F62C6 00                      UF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022C7 0F62C7 00                      OF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022C8 0F62C8 -> $22C8                DONE                    EQU     *                                                (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0022C8 0F62C8 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
0022CA 0F62CA CD 00 00                                        LDY     #$0000
0022CD 0F62CD C6 08                                           LDAB    #8
0022CF 0F62CF MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0022CF 0F62CF MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0022CF 0F62CF MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022CF 0F62CF 8F 2A 85                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022D2 0F62D2 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022D4 0F62D4 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022D7 0F62D7 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022D9 0F62D9 20 02                                           JOB     DONE                                             (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022DB 0F62DB 00                      UF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022DC 0F62DC 00                      OF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022DD 0F62DD -> $22DD                DONE                    EQU     *                                                (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0022DD 0F62DD 16 29 6A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0022E0 0F62E0 B7 76                                           TFR     SP, Y
0022E2 0F62E2 40                                              NEGA
0022E3 0F62E3 8B 05                                           ADDA    #5
0022E5 0F62E5 C6 20                                           LDAB    #" "
0022E7 0F62E7 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0022E7 0F62E7 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
0022E7 0F62E7                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
0022E7 0F62E7 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
0022E7 0F62E7 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0022E7 0F62E7 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022E7 0F62E7 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022EA 0F62EA 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022EC 0F62EC 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022EF 0F62EF 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022F1 0F62F1 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022F3 0F62F3 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022F4 0F62F4 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022F5 0F62F5 -> $22F5                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022F5 0F62F5 16 25 2C                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
0022F8 0F62F8 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0022F8 0F62F8 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022F8 0F62F8 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022FB 0F62FB 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0022FD 0F62FD 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002300 0F6300 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002302 0F6302 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002304 0F6304 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002305 0F6305 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002306 0F6306 -> $2306                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002306 0F6306 16 28 DE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
002309 0F6309 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00230B 0F630B C6 08                                           LDAB    #8
00230D 0F630D MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00230D 0F630D MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00230D 0F630D                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00230D 0F630D MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00230D 0F630D MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00230D 0F630D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00230D 0F630D 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002310 0F6310 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002312 0F6312 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002315 0F6315 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002317 0F6317 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002319 0F6319 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00231A 0F631A 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00231B 0F631B -> $231B                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00231B 0F631B 16 25 2C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00231E 0F631E MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00231E 0F631E MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00231E 0F631E 8F 2A 86                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002321 0F6321 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002323 0F6323 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002326 0F6326 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002328 0F6328 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00232A 0F632A 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00232B 0F632B 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00232C 0F632C -> $232C                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00232C 0F632C 16 29 F7                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00232F 0F632F 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
002331 0F6331 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
002331 0F6331 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002331 0F6331 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002334 0F6334 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002336 0F6336 8F 2A 88                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
002339 0F6339 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00233B 0F633B 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00233D 0F633D 00                      UF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00233E 0F633E 00                      OF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00233F 0F633F -> $233F                DONE                    EQU     *                                                (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00233F 0F633F 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
002341 0F6341 86 02                                           LDAA    #2
002343 0F6343 C6 20                                           LDAB    #" "
002345 0F6345 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
002345 0F6345 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
002345 0F6345                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
002345 0F6345 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
002345 0F6345 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
002345 0F6345 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002345 0F6345 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002348 0F6348 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00234A 0F634A 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00234D 0F634D 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00234F 0F634F 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002351 0F6351 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002352 0F6352 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002353 0F6353 -> $2353                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002353 0F6353 16 25 2C                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
002356 0F6356 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
002356 0F6356 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002356 0F6356 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002359 0F6359 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00235B 0F635B 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00235E 0F635E 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002360 0F6360 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002362 0F6362 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002363 0F6363 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002364 0F6364 -> $2364                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002364 0F6364 16 28 DE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
002367 0F6367 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
002369 0F6369 CD 00 00                                        LDY     #$0000
00236C 0F636C C6 02                                           LDAB    #2
00236E 0F636E MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00236E 0F636E MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00236E 0F636E MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00236E 0F636E 8F 2A 85                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002371 0F6371 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002373 0F6373 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002376 0F6376 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
002378 0F6378 20 02                                           JOB     DONE                                             (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00237A 0F637A 00                      UF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00237B 0F637B 00                      OF                      BGND                                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00237C 0F637C -> $237C                DONE                    EQU     *                                                (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00237C 0F637C 16 29 6A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00237F 0F637F B7 76                                           TFR     SP, Y
002381 0F6381 40                                              NEGA
002382 0F6382 8B 08                                           ADDA    #8
002384 0F6384 C6 30                                           LDAB    #"0"
002386 0F6386 MACRO                                           STRING_fill_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
002386 0F6386 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
002386 0F6386                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
002386 0F6386 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
002386 0F6386 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
002386 0F6386 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002386 0F6386 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002389 0F6389 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00238B 0F638B 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00238E 0F638E 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002390 0F6390 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002392 0F6392 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002393 0F6393 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002394 0F6394 -> $2394                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002394 0F6394 16 25 2C                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
002397 0F6397 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
002397 0F6397 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002397 0F6397 8F 2A 7A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00239A 0F639A 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00239C 0F639C 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00239F 0F639F 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023A1 0F63A1 20 02                                           JOB     DONE                                             (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023A3 0F63A3 00                      UF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023A4 0F63A4 00                      OF                      BGND                                                     (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023A5 0F63A5 -> $23A5                DONE                    EQU     *                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023A5 0F63A5 16 28 DE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0023A8 0F63A8 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
0023AA 0F63AA C6 02                                           LDAB    #2
0023AC 0F63AC MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0023AC 0F63AC MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0023AC 0F63AC                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0023AC 0F63AC MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0023AC 0F63AC MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0023AC 0F63AC MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023AC 0F63AC 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023AF 0F63AF 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023B1 0F63B1 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023B4 0F63B4 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023B6 0F63B6 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023B8 0F63B8 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023B9 0F63B9 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023BA 0F63BA -> $23BA                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023BA 0F63BA 16 25 2C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0023BD 0F63BD MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0023BD 0F63BD MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023BD 0F63BD 8F 2A 86                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023C0 0F63C0 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023C2 0F63C2 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023C5 0F63C5 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023C7 0F63C7 20 02                                           JOB     DONE                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023C9 0F63C9 00                      UF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023CA 0F63CA 00                      OF                      BGND                                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023CB 0F63CB -> $23CB                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023CB 0F63CB 16 29 F7                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0023CE 0F63CE 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0023D0 0F63D0 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
0023D0 0F63D0 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023D0 0F63D0 8F 2A 73                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023D3 0F63D3 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023D5 0F63D5 8F 2A 88                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023D8 0F63D8 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023DA 0F63DA 20 02                                           JOB     DONE                    ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023DC 0F63DC 00                      UF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023DD 0F63DD 00                      OF                      BGND                                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023DE 0F63DE -> $23DE                DONE                    EQU     *                                                (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0023DE 0F63DE 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print new line
0023E0 0F63E0 CE 2F F9                                        LDX     #STRING_STR_NL
0023E3 0F63E3 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
0023E3 0F63E3 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_PRINT_BL/STRING_CALL_BL)
0023E3 0F63E3                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_PRINT_BL/STRING_CALL_BL)
0023E3 0F63E3 MACRO                                           SCI_TX_READY_BL                                          (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
0023E3 0F63E3 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0023E3 0F63E3 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023E3 0F63E3 8F 2A 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023E6 0F63E6 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023E8 0F63E8 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023EB 0F63EB 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023ED 0F63ED 20 02                                           JOB     DONE                                             (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023EF 0F63EF 00                      UF                      BGND                                                     (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023F0 0F63F0 00                      OF                      BGND                                                     (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023F1 0F63F1 -> $23F1                DONE                    EQU     *                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023F1 0F63F1 16 25 2C                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_PRINT_BL/STRING_CALL_BL)
0023F4 0F63F4 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
0023F4 0F63F4 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023F4 0F63F4 8F 2A 7B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023F7 0F63F7 25 08                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023F9 0F63F9 8F 2A 8E                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023FC 0F63FC 22 02                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0023FE 0F63FE 20 02                                           JOB     DONE                                             (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002400 0F6400 00                      UF                      BGND                                                     (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002401 0F6401 00                      OF                      BGND                                                     (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002402 0F6402 -> $2402                DONE                    EQU     *                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
002402 0F6402 16 28 A7                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
002405 0F6405 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_PRINT_BL/STRING_CALL_BL)
002407 0F6407 06 21 7F                                        JOB     DEMO_LOOP
00240A 0F640A -> $240A                DEMO_CODE_END           EQU     *
00240A 0F640A -> $F640A               DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002B44 0F6B44                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
002B44 0F6B44 54 68 69 73 20 69 73 20 DEMO_WELCOME            FCC     "This is the S12CBase Demo for the S12G-Micro-EVB"
              74 68 65 20 53 31 32 43 
              42 61 73 65 20 44 65 6D 
              6F 20 66 6F 72 20 74 68 
              65 20 53 31 32 47 2D 4D 
              69 63 72 6F 2D 45 56 42 
002B74 0F6B74 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
002B74 0F6B74 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
002B75 0F6B75 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
002B76 0F6B76 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
002B76 0F6B76 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
002B77 0F6B77 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
002B78 0F6B78 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
002B96 0F6B96 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
002B96 0F6B96 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
002B97 0F6B97 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
002B98 0F6B98 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
002BB6 0F6BB6 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
002BB6 0F6BB6 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002BB7 0F6BB7 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
002BB8 0F6BB8 -> $2BB8                DEMO_TABS_END           EQU     *
002BB8 0F6BB8 -> $F6BB8               DEMO_TABS_END_LIN       EQU     @
