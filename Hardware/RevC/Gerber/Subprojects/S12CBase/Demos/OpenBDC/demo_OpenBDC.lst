                                      ;###############################################################################
                                      ;# S12CBase - Demo (OpenBDC)                                              #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
??????        -> $0001                CLOCK_CRG               EQU     1               ;old CRG
??????        -> $3E8000              CLOCK_OSC_FREQ          EQU     4096000         ;4,096 MHz
??????        -> $1770000             CLOCK_BUS_FREQ          EQU     24576000        ;24,576 MHz
??????        -> $A6AAA               CLOCK_REF_FREQ          EQU     4096000/6       ;4,096/6 MHz
                                      ;# Memory map
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
??????        -> $0001                MMAP_S12C128            EQU     1               ;complie for S12S128
                                      ;MMAP_S12C32            EQU     1               ;complile for S12C32
                                      ;# Interrupt stack
??????        -> $0001                ISTACK_LEVELS           EQU     1               ;no interrupt nesting
                                      ;ISTACK_DEBUG           EQU     1               ;don't enter wait mode
??????        -> $0001                ISTACK_NO_WAI           EQU     1               ;keep WAIs out
??????        -> $0001                ISTACK_NO_CHECK         EQU     1               ;disable stack range checks
                                      ;# Subroutine stack
??????        -> $001B                SSTACK_DEPTH            EQU     27              ;no interrupt nesting
                                      ;SSTACK_DEBUG           EQU     1               ;debug behavior
??????        -> $0001                SSTACK_NO_CHECK         EQU     1               ;disable stack range checks
                                      ;# COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;# RESET
??????        -> $F762                RESET_WELCOME           EQU     DEMO_WELCOME    ;welcome message
??????        -> $0001                RESET_COP_OFF           EQU     1               ;disable COP detection
??????        -> $0001                RESET_CLKFAIL_OFF       EQU     1               ;disable clock fail detection
??????        -> $0001                RESET_POWFAIL_OFF       EQU     1               ;disable power fail detection
??????        -> $0001                RESET_CODERUN_OFF       EQU     1               ;disable code runaway detection
                                      ;# Vector table
                                      ;VECTAB_DEBUG           EQU     1               ;multiple dummy ISRs
                                      ;# SCI
??????        -> $0001                SCI_FC_RTSCTS           EQU     1               ;RTS/CTS flow control
??????        -> $0250                SCI_RTS_PORT            EQU     PTM             ;PTM
??????        -> $0001                SCI_RTS_PIN             EQU     PM0             ;PM0
??????        -> $0250                SCI_CTS_PORT            EQU     PTM             ;PTM
??????        -> $0002                SCI_CTS_PIN             EQU     PM1             ;PM1
??????        -> $0001                SCI_HANDLE_BREAK        EQU     1               ;react to BREAK symbol
??????        -> $0001                SCI_HANDLE_SUSPEND      EQU     1               ;react to SUSPEND symbol
                                      ;SCI_BD_OFF             EQU     1               ;don't use baud rate detection
??????        -> $0001                SCI_BD_ON               EQU     1               ;use baud rate detection
??????        -> $0001                SCI_BD_TIM              EQU     1               ;TIM
??????        -> $0000                SCI_BD_ICPE             EQU     0               ;IC0
??????        -> $0001                SCI_BD_ICNE             EQU     1               ;IC1
??????        -> $0002                SCI_BD_OC               EQU     2               ;OC2
??????        -> $0001                SCI_BD_LOG_ON           EQU     1               ;log captured BD pulses
                                      ;SCI_BD_FAKE            EQU     1               ;for debugging in limited RAM space
??????        -> $0003                SCI_DLY_OC              EQU     3               ;OC3
??????        -> $0001                SCI_ERRSIG_ON           EQU     1               ;signal errors
??????        -> $0001                SCI_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
00F000 0FF000                                                 ORG     MMAP_RAM_START
                                      ;Code
00F000 0FF000 -> $F000                START_OF_CODE           EQU     *
00F000 0FF000 -> $F000                DEMO_CODE_START         EQU     *
00F000 0FF000 -> $FF000               DEMO_CODE_START_LIN     EQU     @
00F000 0FF000 -> $F1DC                BASE_CODE_START         EQU     DEMO_CODE_END
00F000 0FF000 -> $FF1DC               BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Variables
00F000 0FF000 -> $F686                DEMO_VARS_START         EQU     BASE_CODE_END
00F000 0FF000 -> $FF686               DEMO_VARS_START_LIN     EQU     BASE_CODE_END_LIN
00F000 0FF000 -> $F686                BASE_VARS_START         EQU     DEMO_VARS_END
00F000 0FF000 -> $FF686               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
                                      ;Tables
00F000 0FF000 -> $F762                DEMO_TABS_START         EQU     BASE_VARS_END
00F000 0FF000 -> $FF762               DEMO_TABS_START_LIN     EQU     BASE_VARS_END_LIN
00F000 0FF000 -> $F7D3                BASE_TABS_START         EQU     DEMO_TABS_END
00F000 0FF000 -> $FF7D3               BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (OpenBDC)                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 20, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
00F000 0FF000 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
                                      ;# SCI
00F000 0FF000 -> $0001                SCI_FC_RTS_CTS          EQU     1               ;RTS/CTS flow control
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
00F686 0FF686 -> $F686                GPIO_VARS_START         EQU     *
00F686 0FF686 -> $FF686               GPIO_VARS_START_LIN     EQU     @
00F686 0FF686 -> $F686                MMAP_VARS_START         EQU     GPIO_VARS_END
00F686 0FF686 -> $FF686               MMAP_VARS_START_LIN     EQU     GPIO_VARS_END_LIN
00F686 0FF686 -> $F686                SSTACK_VARS_START       EQU     MMAP_VARS_END
00F686 0FF686 -> $FF686               SSTACK_VARS_START_LIN   EQU     MMAP_VARS_END_LIN
00F686 0FF686 -> $F686                ISTACK_VARS_START       EQU     SSTACK_VARS_END
00F686 0FF686 -> $FF686               ISTACK_VARS_START_LIN   EQU     SSTACK_VARS_END_LIN
00F686 0FF686 -> $F6AA                CLOCK_VARS_START        EQU     ISTACK_VARS_END
00F686 0FF686 -> $FF6AA               CLOCK_VARS_START_LIN    EQU     ISTACK_VARS_END_LIN
00F686 0FF686 -> $F6AA                COP_VARS_START          EQU     CLOCK_VARS_END
00F686 0FF686 -> $FF6AA               COP_VARS_START_LIN      EQU     CLOCK_VARS_END_LIN
00F686 0FF686 -> $F6AA                RTI_VARS_START          EQU     COP_VARS_END
00F686 0FF686 -> $FF6AA               RTI_VARS_START_LIN      EQU     COP_VARS_END_LIN
00F686 0FF686 -> $F6AA                LED_VARS_START          EQU     RTI_VARS_END
00F686 0FF686 -> $FF6AA               LED_VARS_START_LIN      EQU     RTI_VARS_END_LIN
00F686 0FF686 -> $F6AC                TIM_VARS_START          EQU     LED_VARS_END
00F686 0FF686 -> $FF6AC               TIM_VARS_START_LIN      EQU     LED_VARS_END_LIN
00F686 0FF686 -> $F6AC                SCI_VARS_START          EQU     TIM_VARS_END
00F686 0FF686 -> $FF6AC               SCI_VARS_START_LIN      EQU     TIM_VARS_END_LIN
00F686 0FF686 -> $F75E                STRING_VARS_START       EQU     SCI_VARS_END
00F686 0FF686 -> $FF75E               STRING_VARS_START_LIN   EQU     SCI_VARS_END_LIN
00F686 0FF686 -> $F75E                RESET_VARS_START        EQU     STRING_VARS_END
00F686 0FF686 -> $FF75E               RESET_VARS_START_LIN    EQU     STRING_VARS_END_LIN
00F686 0FF686 -> $F762                NUM_VARS_START          EQU     RESET_VARS_END
00F686 0FF686 -> $FF762               NUM_VARS_START_LIN      EQU     RESET_VARS_END_LIN
00F686 0FF686 -> $F762                NVM_VARS_START          EQU     NUM_VARS_END
00F686 0FF686 -> $FF762               NVM_VARS_START_LIN      EQU     NUM_VARS_END_LIN
00F686 0FF686 -> $F762                VECTAB_VARS_START       EQU     NVM_VARS_END
00F686 0FF686 -> $FF762               VECTAB_VARS_START_LIN   EQU     NVM_VARS_END_LIN
00F686 0FF686 -> $F762                BASE_VARS_END           EQU     VECTAB_VARS_START
00F686 0FF686 -> $FF762               BASE_VARS_END_LIN       EQU     VECTAB_VARS_START_LIN
                                      ;Fake baud rate detection for debugging in limited RAM space
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1DC 0FF1DC                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
00F1DC 0FF1DC -> $F1DC                GPIO_CODE_START         EQU     *
00F1DC 0FF1DC -> $FF1DC               GPIO_CODE_START_LIN     EQU     @
00F1DC 0FF1DC -> $F1DC                MMAP_CODE_START         EQU     GPIO_CODE_END
00F1DC 0FF1DC -> $FF1DC               MMAP_CODE_START_LIN     EQU     GPIO_CODE_END_LIN
00F1DC 0FF1DC -> $F1DC                SSTACK_CODE_START       EQU     MMAP_CODE_END
00F1DC 0FF1DC -> $FF1DC               SSTACK_CODE_START_LIN   EQU     MMAP_CODE_END_LIN
00F1DC 0FF1DC -> $F1DC                ISTACK_CODE_START       EQU     SSTACK_CODE_END
00F1DC 0FF1DC -> $FF1DC               ISTACK_CODE_START_LIN   EQU     SSTACK_CODE_END_LIN
00F1DC 0FF1DC -> $F1DC                CLOCK_CODE_START        EQU     ISTACK_CODE_END
00F1DC 0FF1DC -> $FF1DC               CLOCK_CODE_START_LIN    EQU     ISTACK_CODE_END_LIN
00F1DC 0FF1DC -> $F1E7                COP_CODE_START          EQU     CLOCK_CODE_END
00F1DC 0FF1DC -> $FF1E7               COP_CODE_START_LIN      EQU     CLOCK_CODE_END_LIN
00F1DC 0FF1DC -> $F1E7                RTI_CODE_START          EQU     COP_CODE_END
00F1DC 0FF1DC -> $FF1E7               RTI_CODE_START_LIN      EQU     COP_CODE_END_LIN
00F1DC 0FF1DC -> $F1E7                LED_CODE_START          EQU     RTI_CODE_END
00F1DC 0FF1DC -> $FF1E7               LED_CODE_START_LIN      EQU     RTI_CODE_END_LIN
00F1DC 0FF1DC -> $F234                TIM_CODE_START          EQU     LED_CODE_END
00F1DC 0FF1DC -> $FF234               TIM_CODE_START_LIN      EQU     LED_CODE_END_LIN
00F1DC 0FF1DC -> $F234                SCI_CODE_START          EQU     TIM_CODE_END
00F1DC 0FF1DC -> $FF234               SCI_CODE_START_LIN      EQU     TIM_CODE_END_LIN
00F1DC 0FF1DC -> $F543                STRING_CODE_START       EQU     SCI_CODE_END
00F1DC 0FF1DC -> $FF543               STRING_CODE_START_LIN   EQU     SCI_CODE_END_LIN
00F1DC 0FF1DC -> $F56F                RESET_CODE_START        EQU     STRING_CODE_END
00F1DC 0FF1DC -> $FF56F               RESET_CODE_START_LIN    EQU     STRING_CODE_END_LIN
00F1DC 0FF1DC -> $F5BE                NUM_CODE_START          EQU     RESET_CODE_END
00F1DC 0FF1DC -> $FF5BE               NUM_CODE_START_LIN      EQU     RESET_CODE_END_LIN
00F1DC 0FF1DC -> $F686                NVM_CODE_START          EQU     NUM_CODE_END
00F1DC 0FF1DC -> $FF686               NVM_CODE_START_LIN      EQU     NUM_CODE_END_LIN
00F1DC 0FF1DC -> $F686                VECTAB_CODE_START       EQU     NVM_CODE_END
00F1DC 0FF1DC -> $FF686               VECTAB_CODE_START_LIN   EQU     NVM_CODE_END_LIN
00F1DC 0FF1DC -> $F686                BASE_CODE_END           EQU     VECTAB_CODE_START
00F1DC 0FF1DC -> $FF686               BASE_CODE_END_LIN       EQU     VECTAB_CODE_START_LIN
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
00F7D3 0FF7D3 -> $F7D3                GPIO_TABS_START         EQU     *
00F7D3 0FF7D3 -> $FF7D3               GPIO_TABS_START_LIN     EQU     @
00F7D3 0FF7D3 -> $F7D3                MMAP_TABS_START         EQU     GPIO_TABS_END
00F7D3 0FF7D3 -> $FF7D3               MMAP_TABS_START_LIN     EQU     GPIO_TABS_END_LIN
00F7D3 0FF7D3 -> $F7D3                SSTACK_TABS_START       EQU     MMAP_TABS_END
00F7D3 0FF7D3 -> $FF7D3               SSTACK_TABS_START_LIN   EQU     MMAP_TABS_END_LIN
00F7D3 0FF7D3 -> $F7D3                ISTACK_TABS_START       EQU     SSTACK_TABS_END
00F7D3 0FF7D3 -> $FF7D3               ISTACK_TABS_START_LIN   EQU     SSTACK_TABS_END_LIN
00F7D3 0FF7D3 -> $F7D3                CLOCK_TABS_START        EQU     ISTACK_TABS_END
00F7D3 0FF7D3 -> $FF7D3               CLOCK_TABS_START_LIN    EQU     ISTACK_TABS_END_LIN
00F7D3 0FF7D3 -> $F7D3                COP_TABS_START          EQU     CLOCK_TABS_END
00F7D3 0FF7D3 -> $FF7D3               COP_TABS_START_LIN      EQU     CLOCK_TABS_END_LIN
00F7D3 0FF7D3 -> $F7D3                RTI_TABS_START          EQU     COP_TABS_END
00F7D3 0FF7D3 -> $FF7D3               RTI_TABS_START_LIN      EQU     COP_TABS_END_LIN
00F7D3 0FF7D3 -> $F7D3                LED_TABS_START          EQU     RTI_TABS_END
00F7D3 0FF7D3 -> $FF7D3               LED_TABS_START_LIN      EQU     RTI_TABS_END_LIN
00F7D3 0FF7D3 -> $F7F3                TIM_TABS_START          EQU     LED_TABS_END
00F7D3 0FF7D3 -> $FF7F3               TIM_TABS_START_LIN      EQU     LED_TABS_END_LIN
00F7D3 0FF7D3 -> $F7F3                SCI_TABS_START          EQU     TIM_TABS_END
00F7D3 0FF7D3 -> $FF7F3               SCI_TABS_START_LIN      EQU     TIM_TABS_END_LIN
00F7D3 0FF7D3 -> $FC34                STRING_TABS_START       EQU     SCI_TABS_END
00F7D3 0FF7D3 -> $FFC34               STRING_TABS_START_LIN   EQU     SCI_TABS_END_LIN
00F7D3 0FF7D3 -> $FC37                RESET_TABS_START        EQU     STRING_TABS_END
00F7D3 0FF7D3 -> $FFC37               RESET_TABS_START_LIN    EQU     STRING_TABS_END_LIN
00F7D3 0FF7D3 -> $FC4F                NUM_TABS_START          EQU     RESET_TABS_END
00F7D3 0FF7D3 -> $FFC4F               NUM_TABS_START_LIN      EQU     RESET_TABS_END_LIN
00F7D3 0FF7D3 -> $FC60                NVM_TABS_START          EQU     NUM_TABS_END
00F7D3 0FF7D3 -> $FFC60               NVM_TABS_START_LIN      EQU     NUM_TABS_END_LIN
00F7D3 0FF7D3 -> $FC60                VECTAB_TABS_START       EQU     NVM_TABS_END
00F7D3 0FF7D3 -> $FFC60               VECTAB_TABS_START_LIN   EQU     NVM_TABS_END_LIN
00F7D3 0FF7D3 -> $FC60                BASE_TABS_END           EQU     VECTAB_TABS_START
00F7D3 0FF7D3 -> $FFC60               BASE_TABS_END_LIN       EQU     VECTAB_TABS_START_LIN
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (OpenBDC)                          #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12C128.                     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr 1, 2010                                                              #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;################################
                                      ;# S12C128 Register Definitions #
                                      ;################################
00F7D3 0FF7D3 -> $0000                PORTA           EQU     $0000
00F7D3 0FF7D3 -> $0080                PTA7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTA6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTA5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTA4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTA3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTA2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTA1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTA0            EQU     $01
00F7D3 0FF7D3 -> $0080                PA7             EQU     $80
00F7D3 0FF7D3 -> $0040                PA6             EQU     $40
00F7D3 0FF7D3 -> $0020                PA5             EQU     $20
00F7D3 0FF7D3 -> $0010                PA4             EQU     $10
00F7D3 0FF7D3 -> $0008                PA3             EQU     $08
00F7D3 0FF7D3 -> $0004                PA2             EQU     $04
00F7D3 0FF7D3 -> $0002                PA1             EQU     $02
00F7D3 0FF7D3 -> $0001                PA0             EQU     $01
00F7D3 0FF7D3 -> $0001                PORTB           EQU     $0001
00F7D3 0FF7D3 -> $0080                PTB7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTB6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTB5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTB4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTB3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTB2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTB1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTB0            EQU     $01
00F7D3 0FF7D3 -> $0080                PB7             EQU     $80
00F7D3 0FF7D3 -> $0040                PB6             EQU     $40
00F7D3 0FF7D3 -> $0020                PB5             EQU     $20
00F7D3 0FF7D3 -> $0010                PB4             EQU     $10
00F7D3 0FF7D3 -> $0008                PB3             EQU     $08
00F7D3 0FF7D3 -> $0004                PB2             EQU     $04
00F7D3 0FF7D3 -> $0002                PB1             EQU     $02
00F7D3 0FF7D3 -> $0001                PB0             EQU     $01
00F7D3 0FF7D3 -> $0002                DDRA            EQU     $0002
00F7D3 0FF7D3 -> $0080                DDRA7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRA6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRA5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRA4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRA3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRA2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRA1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRA0           EQU     $01
00F7D3 0FF7D3 -> $0003                DDRB            EQU     $0003
00F7D3 0FF7D3 -> $0080                DDRB7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRB6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRB5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRB4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRB3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRB2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRB1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRB0           EQU     $01
                                      ;$0004 to $0007 reserved
00F7D3 0FF7D3 -> $0008                PORTE           EQU     $0008
00F7D3 0FF7D3 -> $0080                PTE7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTE6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTE5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTE4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTE3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTE2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTE1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTE0            EQU     $01
00F7D3 0FF7D3 -> $0080                PE7             EQU     $80
00F7D3 0FF7D3 -> $0040                PE6             EQU     $40
00F7D3 0FF7D3 -> $0020                PE5             EQU     $20
00F7D3 0FF7D3 -> $0010                PE4             EQU     $10
00F7D3 0FF7D3 -> $0008                PE3             EQU     $08
00F7D3 0FF7D3 -> $0004                PE2             EQU     $04
00F7D3 0FF7D3 -> $0002                PE1             EQU     $02
00F7D3 0FF7D3 -> $0001                PE0             EQU     $01
00F7D3 0FF7D3 -> $0009                DDRE            EQU     $0009
00F7D3 0FF7D3 -> $0080                DDRE7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRE6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRE5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRE4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRE3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRE2           EQU     $04
00F7D3 0FF7D3 -> $000A                PEAR            EQU     $000A
00F7D3 0FF7D3 -> $0080                NOACCE          EQU     $80
00F7D3 0FF7D3 -> $0020                PIPOE           EQU     $20
00F7D3 0FF7D3 -> $0010                NECLK           EQU     $10
00F7D3 0FF7D3 -> $0008                LSTRE           EQU     $08
00F7D3 0FF7D3 -> $0004                RDWE            EQU     $04
00F7D3 0FF7D3 -> $000B                MODE            EQU     $000B
00F7D3 0FF7D3 -> $0080                MODC            EQU     $80
00F7D3 0FF7D3 -> $0040                MODB            EQU     $40
00F7D3 0FF7D3 -> $0020                MODA            EQU     $20
00F7D3 0FF7D3 -> $0008                IVIS            EQU     $08
00F7D3 0FF7D3 -> $0002                EMK             EQU     $02
00F7D3 0FF7D3 -> $0001                EME             EQU     $01
00F7D3 0FF7D3 -> $000C                PUCR            EQU     $000C
00F7D3 0FF7D3 -> $0080                PUPKE           EQU     $80
00F7D3 0FF7D3 -> $0010                PUPEE           EQU     $10
00F7D3 0FF7D3 -> $0002                PUPBE           EQU     $02
00F7D3 0FF7D3 -> $0001                PUPAE           EQU     $01
00F7D3 0FF7D3 -> $000D                RDRIV           EQU     $000D
00F7D3 0FF7D3 -> $0080                RDPK            EQU     $80
00F7D3 0FF7D3 -> $0010                RDPE            EQU     $10
00F7D3 0FF7D3 -> $0002                RDPB            EQU     $02
00F7D3 0FF7D3 -> $0001                RDPA            EQU     $01
00F7D3 0FF7D3 -> $000E                EBICTL          EQU     $000E
00F7D3 0FF7D3 -> $0001                ESTR            EQU     $01
                                      ;$000F reserved
00F7D3 0FF7D3 -> $0010                INITRM          EQU     $0010
00F7D3 0FF7D3 -> $0080                RAM15           EQU     $80
00F7D3 0FF7D3 -> $0040                RAM14           EQU     $40
00F7D3 0FF7D3 -> $0020                RAM13           EQU     $20
00F7D3 0FF7D3 -> $0010                RAM12           EQU     $10
00F7D3 0FF7D3 -> $0008                RAM11           EQU     $08
00F7D3 0FF7D3 -> $0001                RAMHAL          EQU     $01
00F7D3 0FF7D3 -> $0011                INITRG          EQU     $0011
00F7D3 0FF7D3 -> $0040                REG14           EQU     $40
00F7D3 0FF7D3 -> $0020                REG13           EQU     $20
00F7D3 0FF7D3 -> $0010                REG12           EQU     $10
00F7D3 0FF7D3 -> $0008                REG11           EQU     $08
00F7D3 0FF7D3 -> $0012                INITEE          EQU     $0012
00F7D3 0FF7D3 -> $0080                EE15            EQU     $80
00F7D3 0FF7D3 -> $0040                EE14            EQU     $40
00F7D3 0FF7D3 -> $0020                EE13            EQU     $20
00F7D3 0FF7D3 -> $0010                EE12            EQU     $10
00F7D3 0FF7D3 -> $0001                EEON            EQU     $01
00F7D3 0FF7D3 -> $0013                MISC            EQU     $0013
00F7D3 0FF7D3 -> $0008                EXSTR1          EQU     $08
00F7D3 0FF7D3 -> $0004                EXSTR0          EQU     $04
00F7D3 0FF7D3 -> $0002                ROMHM           EQU     $02
00F7D3 0FF7D3 -> $0001                ROMON           EQU     $01
00F7D3 0FF7D3 -> $0014                MTST0           EQU     $0014
00F7D3 0FF7D3 -> $0015                ITCR            EQU     $0015
00F7D3 0FF7D3 -> $0010                WRINT           EQU     $10
00F7D3 0FF7D3 -> $0008                ADR3            EQU     $08
00F7D3 0FF7D3 -> $0004                ADR2            EQU     $04
00F7D3 0FF7D3 -> $0002                ADR1            EQU     $02
00F7D3 0FF7D3 -> $0001                ADR0            EQU     $01
00F7D3 0FF7D3 -> $0016                ITEST           EQU     $0016
00F7D3 0FF7D3 -> $0080                INTE            EQU     $80
00F7D3 0FF7D3 -> $0040                INTC            EQU     $40
00F7D3 0FF7D3 -> $0020                INTA            EQU     $20
00F7D3 0FF7D3 -> $0010                INT8            EQU     $10
00F7D3 0FF7D3 -> $0008                INT6            EQU     $08
00F7D3 0FF7D3 -> $0004                INT4            EQU     $04
00F7D3 0FF7D3 -> $0002                INT2            EQU     $02
00F7D3 0FF7D3 -> $0001                INT0            EQU     $01
00F7D3 0FF7D3 -> $0017                MTST1           EQU     $0017
                                      ;$0018 reserved
00F7D3 0FF7D3 -> $0019                VREGCTRL        EQU     $0019
00F7D3 0FF7D3 -> $0004                LDVS            EQU     $04
00F7D3 0FF7D3 -> $0002                LVIE            EQU     $02
00F7D3 0FF7D3 -> $0001                LVIF            EQU     $01
00F7D3 0FF7D3 -> $001A                PARTIDH         EQU     $001A
00F7D3 0FF7D3 -> $0080                ID15            EQU     $80
00F7D3 0FF7D3 -> $0040                ID14            EQU     $40
00F7D3 0FF7D3 -> $0020                ID13            EQU     $20
00F7D3 0FF7D3 -> $0010                ID12            EQU     $10
00F7D3 0FF7D3 -> $0008                ID11            EQU     $08
00F7D3 0FF7D3 -> $0004                ID10            EQU     $04
00F7D3 0FF7D3 -> $0002                ID9             EQU     $02
00F7D3 0FF7D3 -> $0001                ID8             EQU     $01
00F7D3 0FF7D3 -> $001B                PARTIDL         EQU     $001B
00F7D3 0FF7D3 -> $0080                ID7             EQU     $80
00F7D3 0FF7D3 -> $0040                ID6             EQU     $40
00F7D3 0FF7D3 -> $0020                ID5             EQU     $20
00F7D3 0FF7D3 -> $0010                ID4             EQU     $10
00F7D3 0FF7D3 -> $0008                ID3             EQU     $08
00F7D3 0FF7D3 -> $0004                ID2             EQU     $04
00F7D3 0FF7D3 -> $0002                ID1             EQU     $02
00F7D3 0FF7D3 -> $0001                ID0             EQU     $01
00F7D3 0FF7D3 -> $001C                MEMSIZ0         EQU     $001C
00F7D3 0FF7D3 -> $0080                REG_SW0         EQU     $80
00F7D3 0FF7D3 -> $0020                EEP_SW1         EQU     $20
00F7D3 0FF7D3 -> $0010                EEP_SW0         EQU     $10
00F7D3 0FF7D3 -> $0004                RAM_SW2         EQU     $04
00F7D3 0FF7D3 -> $0002                RAM_SW1         EQU     $02
00F7D3 0FF7D3 -> $0001                RAM_SW0         EQU     $01
00F7D3 0FF7D3 -> $001D                MEMSIZ1         EQU     $001D
00F7D3 0FF7D3 -> $0080                ROM_SW1         EQU     $80
00F7D3 0FF7D3 -> $0040                ROM_SW0         EQU     $40
00F7D3 0FF7D3 -> $0002                PAG_SW1         EQU     $02
00F7D3 0FF7D3 -> $0001                PAG_SW0         EQU     $01
00F7D3 0FF7D3 -> $001E                INTCR           EQU     $001E
00F7D3 0FF7D3 -> $0080                IRQE            EQU     $80
00F7D3 0FF7D3 -> $0040                IRQEN           EQU     $40
00F7D3 0FF7D3 -> $001F                HPRIO           EQU     $001F
00F7D3 0FF7D3 -> $0080                PSEL7           EQU     $80
00F7D3 0FF7D3 -> $0040                PSEL6           EQU     $40
00F7D3 0FF7D3 -> $0020                PSEL5           EQU     $20
00F7D3 0FF7D3 -> $0010                PSEL4           EQU     $10
00F7D3 0FF7D3 -> $0008                PSEL3           EQU     $08
00F7D3 0FF7D3 -> $0004                PSEL2           EQU     $04
00F7D3 0FF7D3 -> $0002                PSEL1           EQU     $02
00F7D3 0FF7D3 -> $0020                DBGC1           EQU     $0020
00F7D3 0FF7D3 -> $0080                DBGEN           EQU     $80
00F7D3 0FF7D3 -> $0040                ARM             EQU     $40
00F7D3 0FF7D3 -> $0020                TRGSEL          EQU     $20
00F7D3 0FF7D3 -> $0010                BEGIN           EQU     $10
00F7D3 0FF7D3 -> $0008                DBGBRK          EQU     $08
00F7D3 0FF7D3 -> $0002                CAPMOD1         EQU     $02
00F7D3 0FF7D3 -> $0001                CAPMOD0         EQU     $01
00F7D3 0FF7D3 -> $0021                DBGSC           EQU     $0021
00F7D3 0FF7D3 -> $0080                AF              EQU     $80
00F7D3 0FF7D3 -> $0040                BF              EQU     $40
00F7D3 0FF7D3 -> $0020                CF              EQU     $20
00F7D3 0FF7D3 -> $0008                TRG3            EQU     $08
00F7D3 0FF7D3 -> $0004                TRG2            EQU     $04
00F7D3 0FF7D3 -> $0002                TRG1            EQU     $02
00F7D3 0FF7D3 -> $0001                TRG0            EQU     $01
00F7D3 0FF7D3 -> $0022                DBGTBH          EQU     $0022
00F7D3 0FF7D3 -> $0023                DBGTBL          EQU     $0023
00F7D3 0FF7D3 -> $0024                DBGCNT          EQU     $0024
00F7D3 0FF7D3 -> $0080                TBF             EQU     $80
00F7D3 0FF7D3 -> $0020                CNT5            EQU     $20
00F7D3 0FF7D3 -> $0010                CNT4            EQU     $10
00F7D3 0FF7D3 -> $0008                CNT3            EQU     $08
00F7D3 0FF7D3 -> $0004                CNT2            EQU     $04
00F7D3 0FF7D3 -> $0002                CNT1            EQU     $02
00F7D3 0FF7D3 -> $0001                CNT0            EQU     $01
00F7D3 0FF7D3 -> $0025                DBGCCX          EQU     $0025
00F7D3 0FF7D3 -> $0080                PAGSEL1         EQU     $80
00F7D3 0FF7D3 -> $0040                PAGSEL0         EQU     $40
00F7D3 0FF7D3 -> $0020                EXTCMP5         EQU     $20
00F7D3 0FF7D3 -> $0010                EXTCMP4         EQU     $10
00F7D3 0FF7D3 -> $0008                EXTCMP3         EQU     $08
00F7D3 0FF7D3 -> $0004                EXTCMP2         EQU     $04
00F7D3 0FF7D3 -> $0002                EXTCMP1         EQU     $02
00F7D3 0FF7D3 -> $0001                EXTCMP0         EQU     $01
00F7D3 0FF7D3 -> $0026                DBGCCH          EQU     $0026
00F7D3 0FF7D3 -> $0027                DBGCCL          EQU     $0027
00F7D3 0FF7D3 -> $0028                DBGC2           EQU     $0028
00F7D3 0FF7D3 -> $0028                BKPCT0          EQU     $0028
00F7D3 0FF7D3 -> $0080                BKABEN          EQU     $80
00F7D3 0FF7D3 -> $0040                FULL            EQU     $40
00F7D3 0FF7D3 -> $0020                BDM             EQU     $20
00F7D3 0FF7D3 -> $0010                TAGAB           EQU     $10
00F7D3 0FF7D3 -> $0008                BKCEN           EQU     $08
00F7D3 0FF7D3 -> $0004                TAGC            EQU     $04
00F7D3 0FF7D3 -> $0002                RWCEN           EQU     $02
00F7D3 0FF7D3 -> $0001                RWC             EQU     $01
00F7D3 0FF7D3 -> $0029                DBGC3           EQU     $0029
00F7D3 0FF7D3 -> $0029                BKPCT1          EQU     $0029
00F7D3 0FF7D3 -> $0080                BKAMBH          EQU     $80
00F7D3 0FF7D3 -> $0040                BKAMBL          EQU     $40
00F7D3 0FF7D3 -> $0020                BKBMBH          EQU     $20
00F7D3 0FF7D3 -> $0010                BKBMBL          EQU     $10
00F7D3 0FF7D3 -> $0008                RWAEN           EQU     $08
00F7D3 0FF7D3 -> $0004                RWA             EQU     $04
00F7D3 0FF7D3 -> $0002                RWBEN           EQU     $02
00F7D3 0FF7D3 -> $0001                RWB             EQU     $01
00F7D3 0FF7D3 -> $002A                DBGCAX          EQU     $002A
00F7D3 0FF7D3 -> $002A                BKP0X           EQU     $002A
00F7D3 0FF7D3 -> $002B                DBGCAH          EQU     $002B
00F7D3 0FF7D3 -> $002C                DBGCAL          EQU     $002C
00F7D3 0FF7D3 -> $002B                BKP0H           EQU     $002B
00F7D3 0FF7D3 -> $002C                BKP0L           EQU     $002C
00F7D3 0FF7D3 -> $002D                DBGCBX          EQU     $002D
00F7D3 0FF7D3 -> $002E                DBGCBH          EQU     $002E
00F7D3 0FF7D3 -> $002F                DBGCBL          EQU     $002F
00F7D3 0FF7D3 -> $002E                BKP1H           EQU     $002E
00F7D3 0FF7D3 -> $002F                BKP1L           EQU     $002F
00F7D3 0FF7D3 -> $0030                PPAGE           EQU     $0030
00F7D3 0FF7D3 -> $0020                PIX5            EQU     $20
00F7D3 0FF7D3 -> $0010                PIX4            EQU     $10
00F7D3 0FF7D3 -> $0008                PIX3            EQU     $08
00F7D3 0FF7D3 -> $0004                PIX2            EQU     $04
00F7D3 0FF7D3 -> $0002                PIX1            EQU     $02
00F7D3 0FF7D3 -> $0001                PIX0            EQU     $01
                                      ;$0031 reserved
00F7D3 0FF7D3 -> $0032                PORTK           EQU     $0032
00F7D3 0FF7D3 -> $0080                PTK7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTK6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTK5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTK4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTK3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTK2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTK1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTK0            EQU     $01
00F7D3 0FF7D3 -> $0080                PK7             EQU     $80
00F7D3 0FF7D3 -> $0040                PK6             EQU     $40
00F7D3 0FF7D3 -> $0020                PK5             EQU     $20
00F7D3 0FF7D3 -> $0010                PK4             EQU     $10
00F7D3 0FF7D3 -> $0008                PK3             EQU     $08
00F7D3 0FF7D3 -> $0004                PK2             EQU     $04
00F7D3 0FF7D3 -> $0002                PK1             EQU     $02
00F7D3 0FF7D3 -> $0001                PK0             EQU     $01
00F7D3 0FF7D3 -> $0033                DDRK            EQU     $0033
00F7D3 0FF7D3 -> $0080                DDRK7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRK6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRK5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRK4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRK3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRK2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRK1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRK0           EQU     $01
00F7D3 0FF7D3 -> $0034                SYNR            EQU     $0034
00F7D3 0FF7D3 -> $0020                SYN5            EQU     $20
00F7D3 0FF7D3 -> $0010                SYN4            EQU     $10
00F7D3 0FF7D3 -> $0008                SYN3            EQU     $08
00F7D3 0FF7D3 -> $0004                SYN2            EQU     $04
00F7D3 0FF7D3 -> $0002                SYN1            EQU     $02
00F7D3 0FF7D3 -> $0001                SYN0            EQU     $01
00F7D3 0FF7D3 -> $0035                REFDV           EQU     $0035
00F7D3 0FF7D3 -> $0008                REFDV3          EQU     $08
00F7D3 0FF7D3 -> $0004                REFDV2          EQU     $04
00F7D3 0FF7D3 -> $0002                REFDV1          EQU     $02
00F7D3 0FF7D3 -> $0001                REFDV0          EQU     $01
00F7D3 0FF7D3 -> $0036                CTFLG           EQU     $0036
00F7D3 0FF7D3 -> $0080                TOUT7           EQU     $80
00F7D3 0FF7D3 -> $0040                TOUT6           EQU     $40
00F7D3 0FF7D3 -> $0020                TOUT5           EQU     $20
00F7D3 0FF7D3 -> $0010                TOUT4           EQU     $10
00F7D3 0FF7D3 -> $0008                TOUT3           EQU     $08
00F7D3 0FF7D3 -> $0004                TOUT2           EQU     $04
00F7D3 0FF7D3 -> $0002                TOUT1           EQU     $02
00F7D3 0FF7D3 -> $0001                TOUT0           EQU     $01
00F7D3 0FF7D3 -> $0037                CRGFLG          EQU     $0037
00F7D3 0FF7D3 -> $0080                RTIF            EQU     $80
00F7D3 0FF7D3 -> $0040                PORF            EQU     $40
00F7D3 0FF7D3 -> $0020                LVRF            EQU     $20
00F7D3 0FF7D3 -> $0010                LOCKIF          EQU     $10
00F7D3 0FF7D3 -> $0008                LOCK            EQU     $08
00F7D3 0FF7D3 -> $0004                TRACK           EQU     $04
00F7D3 0FF7D3 -> $0002                SCMIF           EQU     $02
00F7D3 0FF7D3 -> $0001                SCM             EQU     $01
00F7D3 0FF7D3 -> $0038                CRGINT          EQU     $0038
00F7D3 0FF7D3 -> $0080                RTIE            EQU     $80
00F7D3 0FF7D3 -> $0010                LOCKIE          EQU     $10
00F7D3 0FF7D3 -> $0002                SCMIE           EQU     $02
00F7D3 0FF7D3 -> $0039                CLKSEL          EQU     $0039
00F7D3 0FF7D3 -> $0080                PLLSEL          EQU     $80
00F7D3 0FF7D3 -> $0040                PSTP            EQU     $40
00F7D3 0FF7D3 -> $0020                SYSWAI          EQU     $20
00F7D3 0FF7D3 -> $0010                ROAWAI          EQU     $10
00F7D3 0FF7D3 -> $0008                PLLWAI          EQU     $08
00F7D3 0FF7D3 -> $0004                CWAI            EQU     $04
00F7D3 0FF7D3 -> $0002                RTIWAI          EQU     $02
00F7D3 0FF7D3 -> $0001                COPWAI          EQU     $01
00F7D3 0FF7D3 -> $003A                PLLCTL          EQU     $003A
00F7D3 0FF7D3 -> $0080                CME             EQU     $80
00F7D3 0FF7D3 -> $0040                PLLON           EQU     $40
00F7D3 0FF7D3 -> $0020                AUTO            EQU     $20
00F7D3 0FF7D3 -> $0010                ACQ             EQU     $10
00F7D3 0FF7D3 -> $0004                PRE             EQU     $04
00F7D3 0FF7D3 -> $0002                PCE             EQU     $02
00F7D3 0FF7D3 -> $0001                SCME            EQU     $01
00F7D3 0FF7D3 -> $003B                RTICTL          EQU     $003B
00F7D3 0FF7D3 -> $0040                RTR6            EQU     $40
00F7D3 0FF7D3 -> $0020                RTR5            EQU     $20
00F7D3 0FF7D3 -> $0010                RTR4            EQU     $10
00F7D3 0FF7D3 -> $0008                RTR3            EQU     $08
00F7D3 0FF7D3 -> $0004                RTR2            EQU     $04
00F7D3 0FF7D3 -> $0002                RTR1            EQU     $02
00F7D3 0FF7D3 -> $0001                RTR0            EQU     $01
00F7D3 0FF7D3 -> $003C                COPCTL          EQU     $003C
00F7D3 0FF7D3 -> $0080                WCOP            EQU     $80
00F7D3 0FF7D3 -> $0040                RSBCK           EQU     $40
00F7D3 0FF7D3 -> $0004                CR2             EQU     $04
00F7D3 0FF7D3 -> $0002                CR1             EQU     $02
00F7D3 0FF7D3 -> $0001                CR0             EQU     $01
00F7D3 0FF7D3 -> $003D                FORBYP          EQU     $003D
00F7D3 0FF7D3 -> $0080                RTIBYP          EQU     $80
00F7D3 0FF7D3 -> $0040                COPBYP          EQU     $40
00F7D3 0FF7D3 -> $0010                PLLBYP          EQU     $10
00F7D3 0FF7D3 -> $0002                FCM             EQU     $02
00F7D3 0FF7D3 -> $003E                CTCTL           EQU     $003E
00F7D3 0FF7D3 -> $003F                ARMCOP          EQU     $003F
00F7D3 0FF7D3 -> $0040                TIOS            EQU     $0040
00F7D3 0FF7D3 -> $0080                IOS7            EQU     $80
00F7D3 0FF7D3 -> $0040                IOS6            EQU     $40
00F7D3 0FF7D3 -> $0020                IOS5            EQU     $20
00F7D3 0FF7D3 -> $0010                IOS4            EQU     $10
00F7D3 0FF7D3 -> $0008                IOS3            EQU     $08
00F7D3 0FF7D3 -> $0004                IOS2            EQU     $04
00F7D3 0FF7D3 -> $0002                IOS1            EQU     $02
00F7D3 0FF7D3 -> $0001                IOS0            EQU     $01
00F7D3 0FF7D3 -> $0041                TCFORC          EQU     $0041
00F7D3 0FF7D3 -> $0080                FOC7            EQU     $80
00F7D3 0FF7D3 -> $0040                FOC6            EQU     $40
00F7D3 0FF7D3 -> $0020                FOC5            EQU     $20
00F7D3 0FF7D3 -> $0010                FOC4            EQU     $10
00F7D3 0FF7D3 -> $0008                FOC3            EQU     $08
00F7D3 0FF7D3 -> $0004                FOC2            EQU     $04
00F7D3 0FF7D3 -> $0002                FOC1            EQU     $02
00F7D3 0FF7D3 -> $0001                FOC0            EQU     $01
00F7D3 0FF7D3 -> $0042                TOC7M           EQU     $0042
00F7D3 0FF7D3 -> $0080                OC7M7           EQU     $80
00F7D3 0FF7D3 -> $0040                OC7M6           EQU     $40
00F7D3 0FF7D3 -> $0020                OC7M5           EQU     $20
00F7D3 0FF7D3 -> $0010                OC7M4           EQU     $10
00F7D3 0FF7D3 -> $0008                OC7M3           EQU     $08
00F7D3 0FF7D3 -> $0004                OC7M2           EQU     $04
00F7D3 0FF7D3 -> $0002                OC7M1           EQU     $02
00F7D3 0FF7D3 -> $0001                OC7M0           EQU     $01
00F7D3 0FF7D3 -> $0043                TOC7D           EQU     $0043
00F7D3 0FF7D3 -> $0080                OC7D7           EQU     $80
00F7D3 0FF7D3 -> $0040                OC7D6           EQU     $40
00F7D3 0FF7D3 -> $0020                OC7D5           EQU     $20
00F7D3 0FF7D3 -> $0010                OC7D4           EQU     $10
00F7D3 0FF7D3 -> $0008                OC7D3           EQU     $08
00F7D3 0FF7D3 -> $0004                OC7D2           EQU     $04
00F7D3 0FF7D3 -> $0002                OC7D1           EQU     $02
00F7D3 0FF7D3 -> $0001                OC7D0           EQU     $01
00F7D3 0FF7D3 -> $0044                TCNT            EQU     $0044
00F7D3 0FF7D3 -> $0046                TSCR1           EQU     $0046
00F7D3 0FF7D3 -> $0080                TEN             EQU     $80
00F7D3 0FF7D3 -> $0040                TSWAI           EQU     $40
00F7D3 0FF7D3 -> $0020                TSFRZ           EQU     $20
00F7D3 0FF7D3 -> $0010                TFFCA           EQU     $10
00F7D3 0FF7D3 -> $0047                TTOV            EQU     $0047
00F7D3 0FF7D3 -> $0080                TOV7            EQU     $80
00F7D3 0FF7D3 -> $0040                TOV6            EQU     $40
00F7D3 0FF7D3 -> $0020                TOV5            EQU     $20
00F7D3 0FF7D3 -> $0010                TOV4            EQU     $10
00F7D3 0FF7D3 -> $0008                TOV3            EQU     $08
00F7D3 0FF7D3 -> $0004                TOV2            EQU     $04
00F7D3 0FF7D3 -> $0002                TOV1            EQU     $02
00F7D3 0FF7D3 -> $0001                TOV0            EQU     $01
00F7D3 0FF7D3 -> $0048                TCTL1           EQU     $0048
00F7D3 0FF7D3 -> $0080                OM7             EQU     $80
00F7D3 0FF7D3 -> $0040                OL7             EQU     $40
00F7D3 0FF7D3 -> $0020                OM6             EQU     $20
00F7D3 0FF7D3 -> $0010                OL6             EQU     $10
00F7D3 0FF7D3 -> $0008                OM5             EQU     $08
00F7D3 0FF7D3 -> $0004                OL5             EQU     $04
00F7D3 0FF7D3 -> $0002                OM4             EQU     $02
00F7D3 0FF7D3 -> $0001                OL4             EQU     $01
00F7D3 0FF7D3 -> $0049                TCTL2           EQU     $0049
00F7D3 0FF7D3 -> $0080                OM3             EQU     $80
00F7D3 0FF7D3 -> $0040                OL3             EQU     $40
00F7D3 0FF7D3 -> $0020                OM2             EQU     $20
00F7D3 0FF7D3 -> $0010                OL2             EQU     $10
00F7D3 0FF7D3 -> $0008                OM1             EQU     $08
00F7D3 0FF7D3 -> $0004                OL1             EQU     $04
00F7D3 0FF7D3 -> $0002                OM0             EQU     $02
00F7D3 0FF7D3 -> $0001                OL0             EQU     $01
00F7D3 0FF7D3 -> $004A                TCTL3           EQU     $004A
00F7D3 0FF7D3 -> $0080                EDG7B           EQU     $80
00F7D3 0FF7D3 -> $0040                EDG7A           EQU     $40
00F7D3 0FF7D3 -> $0020                EDG6B           EQU     $20
00F7D3 0FF7D3 -> $0010                EDG6A           EQU     $10
00F7D3 0FF7D3 -> $0008                EDG5B           EQU     $08
00F7D3 0FF7D3 -> $0004                EDG5A           EQU     $04
00F7D3 0FF7D3 -> $0002                EDG4B           EQU     $02
00F7D3 0FF7D3 -> $0001                EDG4A           EQU     $01
00F7D3 0FF7D3 -> $004B                TCTL4           EQU     $004B
00F7D3 0FF7D3 -> $0080                EDG3B           EQU     $80
00F7D3 0FF7D3 -> $0040                EDG3A           EQU     $40
00F7D3 0FF7D3 -> $0020                EDG2B           EQU     $20
00F7D3 0FF7D3 -> $0010                EDG2A           EQU     $10
00F7D3 0FF7D3 -> $0008                EDG1B           EQU     $08
00F7D3 0FF7D3 -> $0004                EDG1A           EQU     $04
00F7D3 0FF7D3 -> $0002                EDG0B           EQU     $02
00F7D3 0FF7D3 -> $0001                EDG0A           EQU     $01
00F7D3 0FF7D3 -> $004C                TIE             EQU     $004C
00F7D3 0FF7D3 -> $0080                C7I             EQU     $80
00F7D3 0FF7D3 -> $0040                C6I             EQU     $40
00F7D3 0FF7D3 -> $0020                C5I             EQU     $20
00F7D3 0FF7D3 -> $0010                C4I             EQU     $10
00F7D3 0FF7D3 -> $0008                C3I             EQU     $08
00F7D3 0FF7D3 -> $0004                C2I             EQU     $04
00F7D3 0FF7D3 -> $0002                C1I             EQU     $02
00F7D3 0FF7D3 -> $0001                C0I             EQU     $01
00F7D3 0FF7D3 -> $004D                TSCR2           EQU     $004D
00F7D3 0FF7D3 -> $0080                TOI             EQU     $80
00F7D3 0FF7D3 -> $0008                TCRE            EQU     $08
00F7D3 0FF7D3 -> $0004                PR2             EQU     $04
00F7D3 0FF7D3 -> $0002                PR1             EQU     $02
00F7D3 0FF7D3 -> $0001                PR0             EQU     $01
00F7D3 0FF7D3 -> $004E                TFLG1           EQU     $004E
00F7D3 0FF7D3 -> $0080                C7F             EQU     $80
00F7D3 0FF7D3 -> $0040                C6F             EQU     $40
00F7D3 0FF7D3 -> $0020                C5F             EQU     $20
00F7D3 0FF7D3 -> $0010                C4F             EQU     $10
00F7D3 0FF7D3 -> $0008                C3F             EQU     $08
00F7D3 0FF7D3 -> $0004                C2F             EQU     $04
00F7D3 0FF7D3 -> $0002                C1F             EQU     $02
00F7D3 0FF7D3 -> $0001                C0F             EQU     $01
00F7D3 0FF7D3 -> $004F                TFLG2           EQU     $004F
00F7D3 0FF7D3 -> $0080                TOF             EQU     $80
00F7D3 0FF7D3 -> $0050                TC0             EQU     $0050
00F7D3 0FF7D3 -> $0052                TC1             EQU     $0052
00F7D3 0FF7D3 -> $0054                TC2             EQU     $0054
00F7D3 0FF7D3 -> $0056                TC3             EQU     $0056
00F7D3 0FF7D3 -> $0058                TC4             EQU     $0058
00F7D3 0FF7D3 -> $005A                TC5             EQU     $005A
00F7D3 0FF7D3 -> $005C                TC6             EQU     $005C
00F7D3 0FF7D3 -> $005E                TC7             EQU     $005E
00F7D3 0FF7D3 -> $0060                PACTL           EQU     $0060
00F7D3 0FF7D3 -> $0040                PAEN            EQU     $40
00F7D3 0FF7D3 -> $0020                PAMOD           EQU     $20
00F7D3 0FF7D3 -> $0010                PEDGE           EQU     $10
00F7D3 0FF7D3 -> $0008                CLK1            EQU     $08
00F7D3 0FF7D3 -> $0004                CLK0            EQU     $04
00F7D3 0FF7D3 -> $0002                PAOVI           EQU     $02
00F7D3 0FF7D3 -> $0001                PAI             EQU     $01
00F7D3 0FF7D3 -> $0061                PAFLG           EQU     $0061
00F7D3 0FF7D3 -> $0002                PAOVF           EQU     $02
00F7D3 0FF7D3 -> $0001                PAIF            EQU     $01
00F7D3 0FF7D3 -> $0062                PACNT           EQU     $0062
                                      ;$0064 to $007F reserved
00F7D3 0FF7D3 -> $0080                ATDCTL0         EQU     $0080
00F7D3 0FF7D3 -> $0081                ATDCTL1         EQU     $0081
00F7D3 0FF7D3 -> $0082                ATDCTL2         EQU     $0082
00F7D3 0FF7D3 -> $0080                ADPU            EQU     $80
00F7D3 0FF7D3 -> $0040                AFFC            EQU     $40
00F7D3 0FF7D3 -> $0020                AWAI            EQU     $20
00F7D3 0FF7D3 -> $0010                ETRIGLE         EQU     $10
00F7D3 0FF7D3 -> $0008                ETRIGP          EQU     $08
00F7D3 0FF7D3 -> $0004                ETRIG           EQU     $04
00F7D3 0FF7D3 -> $0002                ASCIE           EQU     $02
00F7D3 0FF7D3 -> $0001                ASCIF           EQU     $01
00F7D3 0FF7D3 -> $0083                ATDCTL3         EQU     $0083
00F7D3 0FF7D3 -> $0040                S8C             EQU     $40
00F7D3 0FF7D3 -> $0020                S4C             EQU     $20
00F7D3 0FF7D3 -> $0010                S2C             EQU     $10
00F7D3 0FF7D3 -> $0008                S1C             EQU     $08
00F7D3 0FF7D3 -> $0004                FIFO            EQU     $04
00F7D3 0FF7D3 -> $0002                FRZ1            EQU     $02
00F7D3 0FF7D3 -> $0001                FRZ0            EQU     $01
00F7D3 0FF7D3 -> $0084                ATDCTL4         EQU     $0084
00F7D3 0FF7D3 -> $0080                SRES8           EQU     $80
00F7D3 0FF7D3 -> $0040                SMP1            EQU     $40
00F7D3 0FF7D3 -> $0020                SMP0            EQU     $20
00F7D3 0FF7D3 -> $0010                PRS4            EQU     $10
00F7D3 0FF7D3 -> $0008                PRS3            EQU     $08
00F7D3 0FF7D3 -> $0004                PRS2            EQU     $04
00F7D3 0FF7D3 -> $0002                PRS1            EQU     $02
00F7D3 0FF7D3 -> $0001                PRS0            EQU     $01
00F7D3 0FF7D3 -> $0085                ATDCTL5         EQU     $0085
00F7D3 0FF7D3 -> $0080                DJM             EQU     $80
00F7D3 0FF7D3 -> $0040                DSGN            EQU     $40
00F7D3 0FF7D3 -> $0020                SCAN            EQU     $20
00F7D3 0FF7D3 -> $0010                MULT            EQU     $10
00F7D3 0FF7D3 -> $0004                CC              EQU     $04
00F7D3 0FF7D3 -> $0002                CB              EQU     $02
00F7D3 0FF7D3 -> $0001                CA              EQU     $01
00F7D3 0FF7D3 -> $0086                ATDSTAT0        EQU     $0086
00F7D3 0FF7D3 -> $0080                SCF             EQU     $80
00F7D3 0FF7D3 -> $0020                ETORF           EQU     $20
00F7D3 0FF7D3 -> $0010                FIFOR           EQU     $10
00F7D3 0FF7D3 -> $0004                CC2             EQU     $04
00F7D3 0FF7D3 -> $0002                CC1             EQU     $02
00F7D3 0FF7D3 -> $0001                CC0             EQU     $01
                                      ;$0087 reserved
00F7D3 0FF7D3 -> $0088                ATDTEST0        EQU     $0088
00F7D3 0FF7D3 -> $0080                SAR9            EQU     $80
00F7D3 0FF7D3 -> $0040                SAR8            EQU     $40
00F7D3 0FF7D3 -> $0020                SAR7            EQU     $20
00F7D3 0FF7D3 -> $0010                SAR6            EQU     $10
00F7D3 0FF7D3 -> $0008                SAR5            EQU     $08
00F7D3 0FF7D3 -> $0004                SAR4            EQU     $04
00F7D3 0FF7D3 -> $0002                SAR3            EQU     $02
00F7D3 0FF7D3 -> $0001                SAR2            EQU     $01
00F7D3 0FF7D3 -> $0089                ATDTEST1        EQU     $0089
00F7D3 0FF7D3 -> $0080                SAR1            EQU     $80
00F7D3 0FF7D3 -> $0040                SAR0            EQU     $40
00F7D3 0FF7D3 -> $0004                RST             EQU     $04
00F7D3 0FF7D3 -> $0001                SC              EQU     $01
                                      ;$008a reserved
00F7D3 0FF7D3 -> $008B                ATDSTAT1        EQU     $008B
00F7D3 0FF7D3 -> $0080                CCF7            EQU     $80
00F7D3 0FF7D3 -> $0040                CCF6            EQU     $40
00F7D3 0FF7D3 -> $0020                CCF5            EQU     $20
00F7D3 0FF7D3 -> $0010                CCF4            EQU     $10
00F7D3 0FF7D3 -> $0008                CCF3            EQU     $08
00F7D3 0FF7D3 -> $0004                CCF2            EQU     $04
00F7D3 0FF7D3 -> $0002                CCF1            EQU     $02
00F7D3 0FF7D3 -> $0001                CCF0            EQU     $01
                                      ;$008C reserved
00F7D3 0FF7D3 -> $008D                ATDDIEN         EQU     $008D
                                      ;$008E reserved
00F7D3 0FF7D3 -> $008F                PORTAD          EQU     $008F
00F7D3 0FF7D3 -> $0080                PTAD07          EQU     $80
00F7D3 0FF7D3 -> $0040                PTAD06          EQU     $40
00F7D3 0FF7D3 -> $0020                PTAD05          EQU     $20
00F7D3 0FF7D3 -> $0010                PTAD04          EQU     $10
00F7D3 0FF7D3 -> $0008                PTAD03          EQU     $08
00F7D3 0FF7D3 -> $0004                PTAD02          EQU     $04
00F7D3 0FF7D3 -> $0002                PTAD01          EQU     $02
00F7D3 0FF7D3 -> $0001                PTAD00          EQU     $01
00F7D3 0FF7D3 -> $0090                ATDDR0H         EQU     $0090
00F7D3 0FF7D3 -> $0091                ATDDR0L         EQU     $0091
00F7D3 0FF7D3 -> $0092                ATDDR1H         EQU     $0092
00F7D3 0FF7D3 -> $0093                ATDDR1L         EQU     $0093
00F7D3 0FF7D3 -> $0094                ATDDR2H         EQU     $0094
00F7D3 0FF7D3 -> $0095                ATDDR2L         EQU     $0095
00F7D3 0FF7D3 -> $0096                ATDDR3H         EQU     $0096
00F7D3 0FF7D3 -> $0097                ATDDR3L         EQU     $0097
00F7D3 0FF7D3 -> $0098                ATDDR4H         EQU     $0098
00F7D3 0FF7D3 -> $0099                ATDDR4L         EQU     $0099
00F7D3 0FF7D3 -> $009A                ATDDR5H         EQU     $009A
00F7D3 0FF7D3 -> $009B                ATDDR5L         EQU     $009B
00F7D3 0FF7D3 -> $009C                ATDDR6H         EQU     $009C
00F7D3 0FF7D3 -> $009D                ATDDR6L         EQU     $009D
00F7D3 0FF7D3 -> $009E                ATDDR7H         EQU     $009E
00F7D3 0FF7D3 -> $009F                ATDDR7L         EQU     $009F
                                      ;$00A0 to $00C7 reserved
00F7D3 0FF7D3 -> $00C8                SCIBDH          EQU     $00C8
00F7D3 0FF7D3 -> $0010                SBR12           EQU     $10
00F7D3 0FF7D3 -> $0008                SBR11           EQU     $08
00F7D3 0FF7D3 -> $0004                SBR10           EQU     $04
00F7D3 0FF7D3 -> $0002                SBR9            EQU     $02
00F7D3 0FF7D3 -> $0001                SBR8            EQU     $01
00F7D3 0FF7D3 -> $00C9                SCIBDL          EQU     $00C9
00F7D3 0FF7D3 -> $0080                SBR7            EQU     $80
00F7D3 0FF7D3 -> $0040                SBR6            EQU     $40
00F7D3 0FF7D3 -> $0020                SBR5            EQU     $20
00F7D3 0FF7D3 -> $0010                SBR4            EQU     $10
00F7D3 0FF7D3 -> $0008                SBR3            EQU     $08
00F7D3 0FF7D3 -> $0004                SBR2            EQU     $04
00F7D3 0FF7D3 -> $0002                SBR1            EQU     $02
00F7D3 0FF7D3 -> $0001                SBR0            EQU     $01
00F7D3 0FF7D3 -> $00CA                SCICR1          EQU     $00CA
00F7D3 0FF7D3 -> $0080                LOOPS           EQU     $80
00F7D3 0FF7D3 -> $0040                SCISWAI         EQU     $40
00F7D3 0FF7D3 -> $0020                RSRC            EQU     $20
00F7D3 0FF7D3 -> $0010                M               EQU     $10
00F7D3 0FF7D3 -> $0008                WAKE            EQU     $08
00F7D3 0FF7D3 -> $0004                ILT             EQU     $04
00F7D3 0FF7D3 -> $0002                PE              EQU     $02
00F7D3 0FF7D3 -> $0001                PT              EQU     $01
00F7D3 0FF7D3 -> $00CB                SCICR2          EQU     $00CB
00F7D3 0FF7D3 -> $0080                TXIE            EQU     $80  ;renamed to txie, not to clash with tie register
00F7D3 0FF7D3 -> $0040                TCIE            EQU     $40
00F7D3 0FF7D3 -> $0020                RIE             EQU     $20
00F7D3 0FF7D3 -> $0010                ILIE            EQU     $10
00F7D3 0FF7D3 -> $0008                TE              EQU     $08
00F7D3 0FF7D3 -> $0004                RE              EQU     $04
00F7D3 0FF7D3 -> $0002                RWU             EQU     $02
00F7D3 0FF7D3 -> $0001                SBK             EQU     $01
00F7D3 0FF7D3 -> $00CC                SCISR1          EQU     $00CC
00F7D3 0FF7D3 -> $0080                TDRE            EQU     $80
00F7D3 0FF7D3 -> $0040                TC              EQU     $40
00F7D3 0FF7D3 -> $0020                RDRF            EQU     $20
00F7D3 0FF7D3 -> $0010                IDLE            EQU     $10
00F7D3 0FF7D3 -> $0008                OR              EQU     $08
00F7D3 0FF7D3 -> $0004                NF              EQU     $04
00F7D3 0FF7D3 -> $0002                FE              EQU     $02
00F7D3 0FF7D3 -> $0001                PF              EQU     $01
00F7D3 0FF7D3 -> $00CD                SCISR2          EQU     $00CD
00F7D3 0FF7D3 -> $0004                BRK13           EQU     $04
00F7D3 0FF7D3 -> $0002                TXDIR           EQU     $02
00F7D3 0FF7D3 -> $0001                RAF             EQU     $01
00F7D3 0FF7D3 -> $00CE                SCIDRH          EQU     $00CE
00F7D3 0FF7D3 -> $0080                R8              EQU     $80
00F7D3 0FF7D3 -> $0040                T8              EQU     $40
00F7D3 0FF7D3 -> $00CF                SCIDRL          EQU     $00CF
                                      ;$00D0 to $00D7 reserved
00F7D3 0FF7D3 -> $00D8                SPICR1          EQU     $00D8
00F7D3 0FF7D3 -> $0080                SPIE            EQU     $80
00F7D3 0FF7D3 -> $0040                SPE             EQU     $40
00F7D3 0FF7D3 -> $0020                SPTIE           EQU     $20
00F7D3 0FF7D3 -> $0010                MSTR            EQU     $10
00F7D3 0FF7D3 -> $0008                CPOL            EQU     $08
00F7D3 0FF7D3 -> $0004                CPHA            EQU     $04
00F7D3 0FF7D3 -> $0002                SSOE            EQU     $02
00F7D3 0FF7D3 -> $0001                LSBFE           EQU     $01
00F7D3 0FF7D3 -> $00D9                SPICR2          EQU     $00D9
00F7D3 0FF7D3 -> $0010                MODFEN          EQU     $10
00F7D3 0FF7D3 -> $0008                BIDIROE         EQU     $08
00F7D3 0FF7D3 -> $0002                SPISWAI         EQU     $02
00F7D3 0FF7D3 -> $0001                SPC0            EQU     $01
00F7D3 0FF7D3 -> $00DA                SPIBR           EQU     $00DA
00F7D3 0FF7D3 -> $0040                SPPR2           EQU     $40
00F7D3 0FF7D3 -> $0020                SPPR1           EQU     $20
00F7D3 0FF7D3 -> $0010                SPPR0           EQU     $10
00F7D3 0FF7D3 -> $0004                SPR2            EQU     $04
00F7D3 0FF7D3 -> $0002                SPR1            EQU     $02
00F7D3 0FF7D3 -> $0001                SPR0            EQU     $01
00F7D3 0FF7D3 -> $00DB                SPISR           EQU     $00DB
00F7D3 0FF7D3 -> $0080                SPIF            EQU     $80
00F7D3 0FF7D3 -> $0020                SPTEF           EQU     $20
00F7D3 0FF7D3 -> $0010                MODF            EQU     $10
                                      ;$00DC reserved
00F7D3 0FF7D3 -> $00DD                SPIDR           EQU     $00DD
                                      ;$00DE and $00DF reserved
00F7D3 0FF7D3 -> $00E0                PWME            EQU     $00E0
00F7D3 0FF7D3 -> $0080                PWME7           EQU     $80
00F7D3 0FF7D3 -> $0040                PWME6           EQU     $40
00F7D3 0FF7D3 -> $0020                PWME5           EQU     $20
00F7D3 0FF7D3 -> $0010                PWME4           EQU     $10
00F7D3 0FF7D3 -> $0008                PWME3           EQU     $08
00F7D3 0FF7D3 -> $0004                PWME2           EQU     $04
00F7D3 0FF7D3 -> $0002                PWME1           EQU     $02
00F7D3 0FF7D3 -> $0001                PWME0           EQU     $01
00F7D3 0FF7D3 -> $00E1                PWMPOL          EQU     $00E1
00F7D3 0FF7D3 -> $0080                PPOL7           EQU     $80
00F7D3 0FF7D3 -> $0040                PPOL6           EQU     $40
00F7D3 0FF7D3 -> $0020                PPOL5           EQU     $20
00F7D3 0FF7D3 -> $0010                PPOL4           EQU     $10
00F7D3 0FF7D3 -> $0008                PPOL3           EQU     $08
00F7D3 0FF7D3 -> $0004                PPOL2           EQU     $04
00F7D3 0FF7D3 -> $0002                PPOL1           EQU     $02
00F7D3 0FF7D3 -> $0001                PPOL0           EQU     $01
00F7D3 0FF7D3 -> $00E2                PWMCLK          EQU     $00E2
00F7D3 0FF7D3 -> $0080                PCLK7           EQU     $80
00F7D3 0FF7D3 -> $0040                PCLK6           EQU     $40
00F7D3 0FF7D3 -> $0020                PCLK5           EQU     $20
00F7D3 0FF7D3 -> $0010                PCLK4           EQU     $10
00F7D3 0FF7D3 -> $0008                PCLK3           EQU     $08
00F7D3 0FF7D3 -> $0004                PCLK2           EQU     $04
00F7D3 0FF7D3 -> $0002                PCLK1           EQU     $02
00F7D3 0FF7D3 -> $0001                PCLK0           EQU     $01
00F7D3 0FF7D3 -> $00E3                PWMPRCLK        EQU     $00E3
00F7D3 0FF7D3 -> $0040                PCKB2           EQU     $40
00F7D3 0FF7D3 -> $0020                PCKB1           EQU     $20
00F7D3 0FF7D3 -> $0010                PCKB0           EQU     $10
00F7D3 0FF7D3 -> $0004                PCKA2           EQU     $04
00F7D3 0FF7D3 -> $0002                PCKA1           EQU     $02
00F7D3 0FF7D3 -> $0001                PCKA0           EQU     $01
00F7D3 0FF7D3 -> $00E4                PWMCAE          EQU     $00E4
00F7D3 0FF7D3 -> $0080                CAE7            EQU     $80
00F7D3 0FF7D3 -> $0040                CAE6            EQU     $40
00F7D3 0FF7D3 -> $0020                CAE5            EQU     $20
00F7D3 0FF7D3 -> $0010                CAE4            EQU     $10
00F7D3 0FF7D3 -> $0008                CAE3            EQU     $08
00F7D3 0FF7D3 -> $0004                CAE2            EQU     $04
00F7D3 0FF7D3 -> $0002                CAE1            EQU     $02
00F7D3 0FF7D3 -> $0001                CAE0            EQU     $01
00F7D3 0FF7D3 -> $00E5                PWMCTL          EQU     $00E5
00F7D3 0FF7D3 -> $0080                CON67           EQU     $80
00F7D3 0FF7D3 -> $0040                CON45           EQU     $40
00F7D3 0FF7D3 -> $0020                CON23           EQU     $20
00F7D3 0FF7D3 -> $0010                CON01           EQU     $10
00F7D3 0FF7D3 -> $0008                PSWAI           EQU     $08
00F7D3 0FF7D3 -> $0004                PFRZ            EQU     $04
00F7D3 0FF7D3 -> $00E6                PWMTST          EQU     $00E6
00F7D3 0FF7D3 -> $00E7                PWMPRSC         EQU     $00E7
00F7D3 0FF7D3 -> $00E8                PWMSCLA         EQU     $00E8
00F7D3 0FF7D3 -> $00E9                PWMSCLB         EQU     $00E9
00F7D3 0FF7D3 -> $00EA                PWMSCNTA        EQU     $00EA
00F7D3 0FF7D3 -> $00EB                PWMSCNTB        EQU     $00EB
00F7D3 0FF7D3 -> $00EC                PWMCNT0         EQU     $00EC
00F7D3 0FF7D3 -> $00ED                PWMCNT1         EQU     $00ED
00F7D3 0FF7D3 -> $00EE                PWMCNT2         EQU     $00EE
00F7D3 0FF7D3 -> $00EF                PWMCNT3         EQU     $00EF
00F7D3 0FF7D3 -> $00F0                PWMCNT4         EQU     $00F0
00F7D3 0FF7D3 -> $00F1                PWMCNT5         EQU     $00F1
00F7D3 0FF7D3 -> $00F2                PWMPER0         EQU     $00F2
00F7D3 0FF7D3 -> $00F3                PWMPER1         EQU     $00F3
00F7D3 0FF7D3 -> $00F4                PWMPER2         EQU     $00F4
00F7D3 0FF7D3 -> $00F5                PWMPER3         EQU     $00F5
00F7D3 0FF7D3 -> $00F6                PWMPER4         EQU     $00F6
00F7D3 0FF7D3 -> $00F7                PWMPER5         EQU     $00F7
00F7D3 0FF7D3 -> $00F8                PWMDTY0         EQU     $00F8
00F7D3 0FF7D3 -> $00F9                PWMDTY1         EQU     $00F9
00F7D3 0FF7D3 -> $00FA                PWMDTY2         EQU     $00FA
00F7D3 0FF7D3 -> $00FB                PWMDTY3         EQU     $00FB
00F7D3 0FF7D3 -> $00FC                PWMDTY4         EQU     $00FC
00F7D3 0FF7D3 -> $00FD                PWMDTY5         EQU     $00FD
                                      ;$00FE to $00FF reserved
00F7D3 0FF7D3 -> $0100                FCLKDIV         EQU     $0100
00F7D3 0FF7D3 -> $0080                FDIVLD          EQU     $80
00F7D3 0FF7D3 -> $0040                FDIV8           EQU     $40
00F7D3 0FF7D3 -> $0020                FDIV5           EQU     $20
00F7D3 0FF7D3 -> $0010                FDIV4           EQU     $10
00F7D3 0FF7D3 -> $0008                FDIV3           EQU     $08
00F7D3 0FF7D3 -> $0004                FDIV2           EQU     $04
00F7D3 0FF7D3 -> $0002                FDIV1           EQU     $02
00F7D3 0FF7D3 -> $0001                FDIV0           EQU     $01
00F7D3 0FF7D3 -> $0101                FSEC            EQU     $0101
00F7D3 0FF7D3 -> $0080                KEYEN           EQU     $80
00F7D3 0FF7D3 -> $0040                NV6             EQU     $40
00F7D3 0FF7D3 -> $0020                NV5             EQU     $20
00F7D3 0FF7D3 -> $0010                NV4             EQU     $10
00F7D3 0FF7D3 -> $0008                NV3             EQU     $08
00F7D3 0FF7D3 -> $0004                NV2             EQU     $04
00F7D3 0FF7D3 -> $0002                SEC01           EQU     $02
00F7D3 0FF7D3 -> $0001                SEC00           EQU     $01
00F7D3 0FF7D3 -> $0102                FTSTMOD         EQU     $0102
00F7D3 0FF7D3 -> $0080                BIST            EQU     $80
00F7D3 0FF7D3 -> $0040                HOLD            EQU     $40
00F7D3 0FF7D3 -> $0020                INVOKE          EQU     $20
00F7D3 0FF7D3 -> $0010                WRALL           EQU     $10
00F7D3 0FF7D3 -> $0001                DIRECT          EQU     $01
00F7D3 0FF7D3 -> $0103                FCNFG           EQU     $0103
00F7D3 0FF7D3 -> $0080                CBEIE           EQU     $80
00F7D3 0FF7D3 -> $0040                CCIE            EQU     $40
00F7D3 0FF7D3 -> $0020                KEYACC          EQU     $20
00F7D3 0FF7D3 -> $0002                BKSEL1          EQU     $02
00F7D3 0FF7D3 -> $0001                BKSEL0          EQU     $01
00F7D3 0FF7D3 -> $0104                FPROT           EQU     $0104
00F7D3 0FF7D3 -> $0080                FPOPEN          EQU     $80
00F7D3 0FF7D3 -> $0020                FPHDIS          EQU     $20
00F7D3 0FF7D3 -> $0010                FPHS1           EQU     $10
00F7D3 0FF7D3 -> $0008                FPHS0           EQU     $08
00F7D3 0FF7D3 -> $0004                FPLDIS          EQU     $04
00F7D3 0FF7D3 -> $0002                FPLS1           EQU     $02
00F7D3 0FF7D3 -> $0001                FPLS0           EQU     $01
00F7D3 0FF7D3 -> $0105                FSTAT           EQU     $0105
00F7D3 0FF7D3 -> $0080                CBEIF           EQU     $80
00F7D3 0FF7D3 -> $0040                CCIF            EQU     $40
00F7D3 0FF7D3 -> $0020                PVIOL           EQU     $20
00F7D3 0FF7D3 -> $0010                ACCERR          EQU     $10
00F7D3 0FF7D3 -> $0004                BLANK           EQU     $04
00F7D3 0FF7D3 -> $0106                FCMD            EQU     $0106
00F7D3 0FF7D3 -> $0040                ERASE           EQU     $40
00F7D3 0FF7D3 -> $0020                PROG            EQU     $20
00F7D3 0FF7D3 -> $0004                ERVR            EQU     $04
00F7D3 0FF7D3 -> $0001                MASS            EQU     $01
00F7D3 0FF7D3 -> $0107                FCTL            EQU     $0107
00F7D3 0FF7D3 -> $0080                TTMR            EQU     $80
00F7D3 0FF7D3 -> $0020                IFREN           EQU     $20
00F7D3 0FF7D3 -> $0010                NVSTR           EQU     $10
00F7D3 0FF7D3 -> $0008                XE              EQU     $08
00F7D3 0FF7D3 -> $0004                YE              EQU     $04
00F7D3 0FF7D3 -> $0002                SE              EQU     $02
00F7D3 0FF7D3 -> $0001                OE              EQU     $01
00F7D3 0FF7D3 -> $0108                FADDRHI         EQU     $0108
00F7D3 0FF7D3 -> $0109                FADDRLO         EQU     $0109
00F7D3 0FF7D3 -> $010A                FDATAHI         EQU     $010A
00F7D3 0FF7D3 -> $010B                FDATALO         EQU     $010B
                                      ;$010C to $013F reserved
00F7D3 0FF7D3 -> $0140                CANCTL0         EQU     $0140
00F7D3 0FF7D3 -> $0080                RXFRM           EQU     $80
00F7D3 0FF7D3 -> $0040                RXACT           EQU     $40
00F7D3 0FF7D3 -> $0020                CSWAI           EQU     $20
00F7D3 0FF7D3 -> $0010                SYNCH           EQU     $10
00F7D3 0FF7D3 -> $0008                TIMEN           EQU     $08 ;RENAMED
00F7D3 0FF7D3 -> $0004                WUPE            EQU     $04
00F7D3 0FF7D3 -> $0002                SLPRQ           EQU     $02
00F7D3 0FF7D3 -> $0001                INITRQ          EQU     $01
00F7D3 0FF7D3 -> $0141                CANCTL1         EQU     $0141
00F7D3 0FF7D3 -> $0080                CANE            EQU     $80
00F7D3 0FF7D3 -> $0040                CLKSRC          EQU     $40
00F7D3 0FF7D3 -> $0020                LOOPB           EQU     $20
00F7D3 0FF7D3 -> $0010                LISTEN          EQU     $10
00F7D3 0FF7D3 -> $0004                WUPM            EQU     $04
00F7D3 0FF7D3 -> $0002                SLPAK           EQU     $02
00F7D3 0FF7D3 -> $0001                INITAK          EQU     $01
00F7D3 0FF7D3 -> $0142                CANBTR0         EQU     $0142
00F7D3 0FF7D3 -> $0080                SJW1            EQU     $80
00F7D3 0FF7D3 -> $0040                SJW0            EQU     $40
00F7D3 0FF7D3 -> $0020                BRP5            EQU     $20
00F7D3 0FF7D3 -> $0010                BRP4            EQU     $10
00F7D3 0FF7D3 -> $0008                BRP3            EQU     $08
00F7D3 0FF7D3 -> $0004                BRP2            EQU     $04
00F7D3 0FF7D3 -> $0002                BRP1            EQU     $02
00F7D3 0FF7D3 -> $0001                BRP0            EQU     $01
00F7D3 0FF7D3 -> $0143                CANBTR1         EQU     $0143
00F7D3 0FF7D3 -> $0080                SAMP            EQU     $80
00F7D3 0FF7D3 -> $0040                TSEG22          EQU     $40
00F7D3 0FF7D3 -> $0020                TSEG21          EQU     $20
00F7D3 0FF7D3 -> $0010                TSEG20          EQU     $10
00F7D3 0FF7D3 -> $0008                TSEG13          EQU     $08
00F7D3 0FF7D3 -> $0004                TSEG12          EQU     $04
00F7D3 0FF7D3 -> $0002                TSEG11          EQU     $02
00F7D3 0FF7D3 -> $0001                TESG10          EQU     $01
00F7D3 0FF7D3 -> $0144                CANRFLG         EQU     $0144
00F7D3 0FF7D3 -> $0080                WUPIF           EQU     $80
00F7D3 0FF7D3 -> $0040                CSCIF           EQU     $40
00F7D3 0FF7D3 -> $0020                RSTAT1          EQU     $20
00F7D3 0FF7D3 -> $0010                RSTAT0          EQU     $10
00F7D3 0FF7D3 -> $0008                TSTAT1          EQU     $08
00F7D3 0FF7D3 -> $0004                TSTAT0          EQU     $04
00F7D3 0FF7D3 -> $0002                OVRIF           EQU     $02
00F7D3 0FF7D3 -> $0001                RXF             EQU     $01
00F7D3 0FF7D3 -> $0145                CANRIER         EQU     $0145
00F7D3 0FF7D3 -> $0080                WUPIE           EQU     $80
00F7D3 0FF7D3 -> $0040                CSCIE           EQU     $40
00F7D3 0FF7D3 -> $0020                RSTATE1         EQU     $20
00F7D3 0FF7D3 -> $0010                RSTATE0         EQU     $10
00F7D3 0FF7D3 -> $0008                TSTATE1         EQU     $08
00F7D3 0FF7D3 -> $0004                TSTATE0         EQU     $04
00F7D3 0FF7D3 -> $0002                OVRIE           EQU     $02
00F7D3 0FF7D3 -> $0001                RXFIE           EQU     $01
00F7D3 0FF7D3 -> $0146                CANTFLG         EQU     $0146
00F7D3 0FF7D3 -> $0004                TXE2            EQU     $04
00F7D3 0FF7D3 -> $0002                TXE1            EQU     $02
00F7D3 0FF7D3 -> $0001                TXE0            EQU     $01
00F7D3 0FF7D3 -> $0147                CANTIER         EQU     $0147
00F7D3 0FF7D3 -> $0004                TXEIE2          EQU     $04
00F7D3 0FF7D3 -> $0002                TXEIE1          EQU     $02
00F7D3 0FF7D3 -> $0001                TXEIE0          EQU     $01
00F7D3 0FF7D3 -> $0148                CANTARQ         EQU     $0148
00F7D3 0FF7D3 -> $0004                ABTRQ2          EQU     $04
00F7D3 0FF7D3 -> $0002                ABTRQ1          EQU     $02
00F7D3 0FF7D3 -> $0001                ABTRQ0          EQU     $01
00F7D3 0FF7D3 -> $0149                CANTAAK         EQU     $0149
00F7D3 0FF7D3 -> $0004                ABTAK2          EQU     $04
00F7D3 0FF7D3 -> $0002                ABTAK1          EQU     $02
00F7D3 0FF7D3 -> $0001                ABTAK0          EQU     $01
00F7D3 0FF7D3 -> $014A                CANTBSEL        EQU     $014A
00F7D3 0FF7D3 -> $0004                TX2             EQU     $04
00F7D3 0FF7D3 -> $0002                TX1             EQU     $02
00F7D3 0FF7D3 -> $0001                TX0             EQU     $01
00F7D3 0FF7D3 -> $014B                CANIDAC         EQU     $014B
00F7D3 0FF7D3 -> $0020                IDAM1           EQU     $20
00F7D3 0FF7D3 -> $0010                IDAM0           EQU     $10
00F7D3 0FF7D3 -> $0004                IDHIT2          EQU     $04
00F7D3 0FF7D3 -> $0002                IDHIT1          EQU     $02
00F7D3 0FF7D3 -> $0001                IDHIT0          EQU     $01
                                      ; $14c and $14d reserved
00F7D3 0FF7D3 -> $014E                CANRXERR        EQU     $014E
00F7D3 0FF7D3 -> $014F                CANTXERR        EQU     $014F
00F7D3 0FF7D3 -> $0150                CANIDAR0        EQU     $0150
00F7D3 0FF7D3 -> $0151                CANIDAR1        EQU     $0151
00F7D3 0FF7D3 -> $0152                CANIDAR2        EQU     $0152
00F7D3 0FF7D3 -> $0153                CANIDAR3        EQU     $0153
00F7D3 0FF7D3 -> $0154                CANIDMR0        EQU     $0154
00F7D3 0FF7D3 -> $0155                CANIDMR1        EQU     $0155
00F7D3 0FF7D3 -> $0156                CANIDMR2        EQU     $0156
00F7D3 0FF7D3 -> $0157                CANIDMR3        EQU     $0157
00F7D3 0FF7D3 -> $0158                CANIDAR4        EQU     $0158
00F7D3 0FF7D3 -> $0159                CANIDAR5        EQU     $0159
00F7D3 0FF7D3 -> $015A                CANIDAR6        EQU     $015A
00F7D3 0FF7D3 -> $015B                CANIDAR7        EQU     $015B
00F7D3 0FF7D3 -> $015C                CANIDMR4        EQU     $015C
00F7D3 0FF7D3 -> $015D                CANIDMR5        EQU     $015D
00F7D3 0FF7D3 -> $015E                CANIDMR6        EQU     $015E
00F7D3 0FF7D3 -> $015F                CANIDMR7        EQU     $015F
00F7D3 0FF7D3 -> $0160                CANRXIDR0       EQU     $0160
00F7D3 0FF7D3 -> $0161                CANRXIDR1       EQU     $0161
00F7D3 0FF7D3 -> $0162                CANRXIDR2       EQU     $0162
00F7D3 0FF7D3 -> $0163                CANRXIDR3       EQU     $0163
00F7D3 0FF7D3 -> $0164                CANRXDSR0       EQU     $0164
00F7D3 0FF7D3 -> $0165                CANRXDSR1       EQU     $0165
00F7D3 0FF7D3 -> $0166                CANRXDSR2       EQU     $0166
00F7D3 0FF7D3 -> $0167                CANRXDSR3       EQU     $0167
00F7D3 0FF7D3 -> $0168                CANRXDSR4       EQU     $0168
00F7D3 0FF7D3 -> $0169                CANRXDSR5       EQU     $0169
00F7D3 0FF7D3 -> $016A                CANRXDSR6       EQU     $016A
00F7D3 0FF7D3 -> $016B                CANRXDSR7       EQU     $016B
00F7D3 0FF7D3 -> $016C                CANRXDLR        EQU     $016C
                                      ;$016D reserved
00F7D3 0FF7D3 -> $016E                CANRTSRH        EQU     $016E
00F7D3 0FF7D3 -> $016F                CANRTSRL        EQU     $016F
00F7D3 0FF7D3 -> $0170                CANTXIDR0       EQU     $0170
00F7D3 0FF7D3 -> $0171                CANTXIDR1       EQU     $0171
00F7D3 0FF7D3 -> $0172                CANTXIDR2       EQU     $0172
00F7D3 0FF7D3 -> $0173                CANTXIDR3       EQU     $0173
00F7D3 0FF7D3 -> $0174                CANTXDSR0       EQU     $0174
00F7D3 0FF7D3 -> $0175                CANTXDSR1       EQU     $0175
00F7D3 0FF7D3 -> $0176                CANTXDSR2       EQU     $0176
00F7D3 0FF7D3 -> $0177                CANTXDSR3       EQU     $0177
00F7D3 0FF7D3 -> $0178                CANTXDSR4       EQU     $0178
00F7D3 0FF7D3 -> $0179                CANTXDSR5       EQU     $0179
00F7D3 0FF7D3 -> $017A                CANTXDSR6       EQU     $017A
00F7D3 0FF7D3 -> $017B                CANTXDSR7       EQU     $017B
00F7D3 0FF7D3 -> $017C                CANTXDLR        EQU     $017C
00F7D3 0FF7D3 -> $017D                CANTXTBPR       EQU     $017D
00F7D3 0FF7D3 -> $017E                CANTXTSRH       EQU     $017E
00F7D3 0FF7D3 -> $017F                CANTXTSRL       EQU     $017F
                                      ;$0180 to $013F reserved
00F7D3 0FF7D3 -> $0240                PTT             EQU     $0240
00F7D3 0FF7D3 -> $0080                PTT7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTT6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTT5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTT4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTT3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTT2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTT1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTT0            EQU     $01
00F7D3 0FF7D3 -> $0080                PT7             EQU     $80
00F7D3 0FF7D3 -> $0040                PT6             EQU     $40
00F7D3 0FF7D3 -> $0020                PT5             EQU     $20
00F7D3 0FF7D3 -> $0010                PT4             EQU     $10
00F7D3 0FF7D3 -> $0008                PT3             EQU     $08
00F7D3 0FF7D3 -> $0004                PT2             EQU     $04
00F7D3 0FF7D3 -> $0002                PT1             EQU     $02
00F7D3 0FF7D3 -> $0001                PT0             EQU     $01
00F7D3 0FF7D3 -> $0241                PTIT            EQU     $0241
00F7D3 0FF7D3 -> $0080                PTIT7           EQU     $80
00F7D3 0FF7D3 -> $0040                PTIT6           EQU     $40
00F7D3 0FF7D3 -> $0020                PTIT5           EQU     $20
00F7D3 0FF7D3 -> $0010                PTIT4           EQU     $10
00F7D3 0FF7D3 -> $0008                PTIT3           EQU     $08
00F7D3 0FF7D3 -> $0004                PTIT2           EQU     $04
00F7D3 0FF7D3 -> $0002                PTIT1           EQU     $02
00F7D3 0FF7D3 -> $0001                PTIT0           EQU     $01
00F7D3 0FF7D3 -> $0242                DDRT            EQU     $0242
00F7D3 0FF7D3 -> $0080                DDRT7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRT6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRT5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRT4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRT3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRT2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRT1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRT0           EQU     $01
00F7D3 0FF7D3 -> $0243                RDRT            EQU     $0243
00F7D3 0FF7D3 -> $0080                RDRT7           EQU     $80
00F7D3 0FF7D3 -> $0040                RDRT6           EQU     $40
00F7D3 0FF7D3 -> $0020                RDRT5           EQU     $20
00F7D3 0FF7D3 -> $0010                RDRT4           EQU     $10
00F7D3 0FF7D3 -> $0008                RDRT3           EQU     $08
00F7D3 0FF7D3 -> $0004                RDRT2           EQU     $04
00F7D3 0FF7D3 -> $0002                RDRT1           EQU     $02
00F7D3 0FF7D3 -> $0001                RDRT0           EQU     $01
00F7D3 0FF7D3 -> $0244                PERT            EQU     $0244
00F7D3 0FF7D3 -> $0080                PERT7           EQU     $80
00F7D3 0FF7D3 -> $0040                PERT6           EQU     $40
00F7D3 0FF7D3 -> $0020                PERT5           EQU     $20
00F7D3 0FF7D3 -> $0010                PERT4           EQU     $10
00F7D3 0FF7D3 -> $0008                PERT3           EQU     $08
00F7D3 0FF7D3 -> $0004                PERT2           EQU     $04
00F7D3 0FF7D3 -> $0002                PERT1           EQU     $02
00F7D3 0FF7D3 -> $0001                PERT0           EQU     $01
00F7D3 0FF7D3 -> $0245                PPST            EQU     $0245
00F7D3 0FF7D3 -> $0080                PPST7           EQU     $80
00F7D3 0FF7D3 -> $0040                PPST6           EQU     $40
00F7D3 0FF7D3 -> $0020                PPST5           EQU     $20
00F7D3 0FF7D3 -> $0010                PPST4           EQU     $10
00F7D3 0FF7D3 -> $0008                PPST3           EQU     $08
00F7D3 0FF7D3 -> $0004                PPST2           EQU     $04
00F7D3 0FF7D3 -> $0002                PPST1           EQU     $02
00F7D3 0FF7D3 -> $0001                PPST0           EQU     $01
                                      ;$0246 reserved
00F7D3 0FF7D3 -> $0247                MODRR           EQU     $0247
00F7D3 0FF7D3 -> $0010                MODRR4          EQU     $10
00F7D3 0FF7D3 -> $0008                MODRR3          EQU     $08
00F7D3 0FF7D3 -> $0004                MODRR2          EQU     $04
00F7D3 0FF7D3 -> $0002                MODRR1          EQU     $02
00F7D3 0FF7D3 -> $0001                MODRR0          EQU     $01
00F7D3 0FF7D3 -> $0248                PTS             EQU     $0248
00F7D3 0FF7D3 -> $0080                PTS7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTS6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTS5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTS4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTS3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTS2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTS1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTS0            EQU     $01
00F7D3 0FF7D3 -> $0080                PS7             EQU     $80
00F7D3 0FF7D3 -> $0040                PS6             EQU     $40
00F7D3 0FF7D3 -> $0020                PS5             EQU     $20
00F7D3 0FF7D3 -> $0010                PS4             EQU     $10
00F7D3 0FF7D3 -> $0008                PS3             EQU     $08
00F7D3 0FF7D3 -> $0004                PS2             EQU     $04
00F7D3 0FF7D3 -> $0002                PS1             EQU     $02
00F7D3 0FF7D3 -> $0001                PS0             EQU     $01
00F7D3 0FF7D3 -> $0249                PTIS            EQU     $0249
00F7D3 0FF7D3 -> $0080                PTIS7           EQU     $80
00F7D3 0FF7D3 -> $0040                PTIS6           EQU     $40
00F7D3 0FF7D3 -> $0020                PTIS5           EQU     $20
00F7D3 0FF7D3 -> $0010                PTIS4           EQU     $10
00F7D3 0FF7D3 -> $0008                PTIS3           EQU     $08
00F7D3 0FF7D3 -> $0004                PTIS2           EQU     $04
00F7D3 0FF7D3 -> $0002                PTIS1           EQU     $02
00F7D3 0FF7D3 -> $0001                PTIS0           EQU     $01
00F7D3 0FF7D3 -> $024A                DDRS            EQU     $024A
00F7D3 0FF7D3 -> $0080                DDRS7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRS6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRS5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRS4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRS3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRS2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRS1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRS0           EQU     $01
00F7D3 0FF7D3 -> $024B                RDRS            EQU     $024B
00F7D3 0FF7D3 -> $0080                RDRS7           EQU     $80
00F7D3 0FF7D3 -> $0040                RDRS6           EQU     $40
00F7D3 0FF7D3 -> $0020                RDRS5           EQU     $20
00F7D3 0FF7D3 -> $0010                RDRS4           EQU     $10
00F7D3 0FF7D3 -> $0008                RDRS3           EQU     $08
00F7D3 0FF7D3 -> $0004                RDRS2           EQU     $04
00F7D3 0FF7D3 -> $0002                RDRS1           EQU     $02
00F7D3 0FF7D3 -> $0001                RDRS0           EQU     $01
00F7D3 0FF7D3 -> $024C                PERS            EQU     $024C
00F7D3 0FF7D3 -> $0080                PERS7           EQU     $80
00F7D3 0FF7D3 -> $0040                PERS6           EQU     $40
00F7D3 0FF7D3 -> $0020                PERS5           EQU     $20
00F7D3 0FF7D3 -> $0010                PERS4           EQU     $10
00F7D3 0FF7D3 -> $0008                PERS3           EQU     $08
00F7D3 0FF7D3 -> $0004                PERS2           EQU     $04
00F7D3 0FF7D3 -> $0002                PERS1           EQU     $02
00F7D3 0FF7D3 -> $0001                PERS0           EQU     $01
00F7D3 0FF7D3 -> $024D                PPSS            EQU     $024D
00F7D3 0FF7D3 -> $0080                PPSS7           EQU     $80
00F7D3 0FF7D3 -> $0040                PPSS6           EQU     $40
00F7D3 0FF7D3 -> $0020                PPSS5           EQU     $20
00F7D3 0FF7D3 -> $0010                PPSS4           EQU     $10
00F7D3 0FF7D3 -> $0008                PPSS3           EQU     $08
00F7D3 0FF7D3 -> $0004                PPSS2           EQU     $04
00F7D3 0FF7D3 -> $0002                PPSS1           EQU     $02
00F7D3 0FF7D3 -> $0001                PPSS0           EQU     $01
00F7D3 0FF7D3 -> $024E                WOMS            EQU     $024E
00F7D3 0FF7D3 -> $0080                WOMS7           EQU     $80
00F7D3 0FF7D3 -> $0040                WOMS6           EQU     $40
00F7D3 0FF7D3 -> $0020                WOMS5           EQU     $20
00F7D3 0FF7D3 -> $0010                WOMS4           EQU     $10
00F7D3 0FF7D3 -> $0008                WOMS3           EQU     $08
00F7D3 0FF7D3 -> $0004                WOMS2           EQU     $04
00F7D3 0FF7D3 -> $0002                WOMS1           EQU     $02
00F7D3 0FF7D3 -> $0001                WOMS0           EQU     $01
                                      ;$024F reserved
00F7D3 0FF7D3 -> $0250                PTM             EQU     $0250
00F7D3 0FF7D3 -> $0080                PTM7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTM6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTM5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTM4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTM3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTM2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTM1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTM0            EQU     $01
00F7D3 0FF7D3 -> $0080                PM7             EQU     $80
00F7D3 0FF7D3 -> $0040                PM6             EQU     $40
00F7D3 0FF7D3 -> $0020                PM5             EQU     $20
00F7D3 0FF7D3 -> $0010                PM4             EQU     $10
00F7D3 0FF7D3 -> $0008                PM3             EQU     $08
00F7D3 0FF7D3 -> $0004                PM2             EQU     $04
00F7D3 0FF7D3 -> $0002                PM1             EQU     $02
00F7D3 0FF7D3 -> $0001                PM0             EQU     $01
00F7D3 0FF7D3 -> $0251                PTIM            EQU     $0251
00F7D3 0FF7D3 -> $0080                PTIM7           EQU     $80
00F7D3 0FF7D3 -> $0040                PTIM6           EQU     $40
00F7D3 0FF7D3 -> $0020                PTIM5           EQU     $20
00F7D3 0FF7D3 -> $0010                PTIM4           EQU     $10
00F7D3 0FF7D3 -> $0008                PTIM3           EQU     $08
00F7D3 0FF7D3 -> $0004                PTIM2           EQU     $04
00F7D3 0FF7D3 -> $0002                PTIM1           EQU     $02
00F7D3 0FF7D3 -> $0001                PTIM0           EQU     $01
00F7D3 0FF7D3 -> $0252                DDRM            EQU     $0252
00F7D3 0FF7D3 -> $0080                DDRM7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRM6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRM5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRM4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRM3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRM2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRM1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRM0           EQU     $01
00F7D3 0FF7D3 -> $0253                RDRM            EQU     $0253
00F7D3 0FF7D3 -> $0080                RDRM7           EQU     $80
00F7D3 0FF7D3 -> $0040                RDRM6           EQU     $40
00F7D3 0FF7D3 -> $0020                RDRM5           EQU     $20
00F7D3 0FF7D3 -> $0010                RDRM4           EQU     $10
00F7D3 0FF7D3 -> $0008                RDRM3           EQU     $08
00F7D3 0FF7D3 -> $0004                RDRM2           EQU     $04
00F7D3 0FF7D3 -> $0002                RDRM1           EQU     $02
00F7D3 0FF7D3 -> $0001                RDRM0           EQU     $01
00F7D3 0FF7D3 -> $0254                PERM            EQU     $0254
00F7D3 0FF7D3 -> $0080                PERM7           EQU     $80
00F7D3 0FF7D3 -> $0040                PERM6           EQU     $40
00F7D3 0FF7D3 -> $0020                PERM5           EQU     $20
00F7D3 0FF7D3 -> $0010                PERM4           EQU     $10
00F7D3 0FF7D3 -> $0008                PERM3           EQU     $08
00F7D3 0FF7D3 -> $0004                PERM2           EQU     $04
00F7D3 0FF7D3 -> $0002                PERM1           EQU     $02
00F7D3 0FF7D3 -> $0001                PERM0           EQU     $01
00F7D3 0FF7D3 -> $0255                PPSM            EQU     $0255
00F7D3 0FF7D3 -> $0080                PPSM7           EQU     $80
00F7D3 0FF7D3 -> $0040                PPSM6           EQU     $40
00F7D3 0FF7D3 -> $0020                PPSM5           EQU     $20
00F7D3 0FF7D3 -> $0010                PPSM4           EQU     $10
00F7D3 0FF7D3 -> $0008                PPSM3           EQU     $08
00F7D3 0FF7D3 -> $0004                PPSM2           EQU     $04
00F7D3 0FF7D3 -> $0002                PPSM1           EQU     $02
00F7D3 0FF7D3 -> $0001                PPSM0           EQU     $01
00F7D3 0FF7D3 -> $0256                WOMM            EQU     $0256
00F7D3 0FF7D3 -> $0080                WOMM7           EQU     $80
00F7D3 0FF7D3 -> $0040                WOMM6           EQU     $40
00F7D3 0FF7D3 -> $0020                WOMM5           EQU     $20
00F7D3 0FF7D3 -> $0010                WOMM4           EQU     $10
00F7D3 0FF7D3 -> $0008                WOMM3           EQU     $08
00F7D3 0FF7D3 -> $0004                WOMM2           EQU     $04
00F7D3 0FF7D3 -> $0002                WOMM1           EQU     $02
00F7D3 0FF7D3 -> $0001                WOMM0           EQU     $01
                                      ;$0257 reserved
00F7D3 0FF7D3 -> $0258                PTP             EQU     $0258
00F7D3 0FF7D3 -> $0080                PTP7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTP6            EQU     $40
00F7D3 0FF7D3 -> $0020                PTP5            EQU     $20
00F7D3 0FF7D3 -> $0010                PTP4            EQU     $10
00F7D3 0FF7D3 -> $0008                PTP3            EQU     $08
00F7D3 0FF7D3 -> $0004                PTP2            EQU     $04
00F7D3 0FF7D3 -> $0002                PTP1            EQU     $02
00F7D3 0FF7D3 -> $0001                PTP0            EQU     $01
00F7D3 0FF7D3 -> $0080                PP7             EQU     $80
00F7D3 0FF7D3 -> $0040                PP6             EQU     $40
00F7D3 0FF7D3 -> $0020                PP5             EQU     $20
00F7D3 0FF7D3 -> $0010                PP4             EQU     $10
00F7D3 0FF7D3 -> $0008                PP3             EQU     $08
00F7D3 0FF7D3 -> $0004                PP2             EQU     $04
00F7D3 0FF7D3 -> $0002                PP1             EQU     $02
00F7D3 0FF7D3 -> $0001                PP0             EQU     $01
00F7D3 0FF7D3 -> $0259                PTIP            EQU     $0259
00F7D3 0FF7D3 -> $0080                PTIP7           EQU     $80
00F7D3 0FF7D3 -> $0040                PTIP6           EQU     $40
00F7D3 0FF7D3 -> $0020                PTIP5           EQU     $20
00F7D3 0FF7D3 -> $0010                PTIP4           EQU     $10
00F7D3 0FF7D3 -> $0008                PTIP3           EQU     $08
00F7D3 0FF7D3 -> $0004                PTIP2           EQU     $04
00F7D3 0FF7D3 -> $0002                PTIP1           EQU     $02
00F7D3 0FF7D3 -> $0001                PTIP0           EQU     $01
00F7D3 0FF7D3 -> $025A                DDRP            EQU     $025A
00F7D3 0FF7D3 -> $0080                DDRP7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRP6           EQU     $40
00F7D3 0FF7D3 -> $0020                DDRP5           EQU     $20
00F7D3 0FF7D3 -> $0010                DDRP4           EQU     $10
00F7D3 0FF7D3 -> $0008                DDRP3           EQU     $08
00F7D3 0FF7D3 -> $0004                DDRP2           EQU     $04
00F7D3 0FF7D3 -> $0002                DDRP1           EQU     $02
00F7D3 0FF7D3 -> $0001                DDRP0           EQU     $01
00F7D3 0FF7D3 -> $025B                RDRP            EQU     $025B
00F7D3 0FF7D3 -> $0080                RDRP7           EQU     $80
00F7D3 0FF7D3 -> $0040                RDRP6           EQU     $40
00F7D3 0FF7D3 -> $0020                RDRP5           EQU     $20
00F7D3 0FF7D3 -> $0010                RDRP4           EQU     $10
00F7D3 0FF7D3 -> $0008                RDRP3           EQU     $08
00F7D3 0FF7D3 -> $0004                RDRP2           EQU     $04
00F7D3 0FF7D3 -> $0002                RDRP1           EQU     $02
00F7D3 0FF7D3 -> $0001                RDRP0           EQU     $01
00F7D3 0FF7D3 -> $025C                PERP            EQU     $025C
00F7D3 0FF7D3 -> $0080                PERP7           EQU     $80
00F7D3 0FF7D3 -> $0040                PERP6           EQU     $40
00F7D3 0FF7D3 -> $0020                PERP5           EQU     $20
00F7D3 0FF7D3 -> $0010                PERP4           EQU     $10
00F7D3 0FF7D3 -> $0008                PERP3           EQU     $08
00F7D3 0FF7D3 -> $0004                PERP2           EQU     $04
00F7D3 0FF7D3 -> $0002                PERP1           EQU     $02
00F7D3 0FF7D3 -> $0001                PERP0           EQU     $01
00F7D3 0FF7D3 -> $025D                PPSP            EQU     $025D
00F7D3 0FF7D3 -> $0080                PPSP7           EQU     $80
00F7D3 0FF7D3 -> $0040                PPSP6           EQU     $40
00F7D3 0FF7D3 -> $0020                PPSP5           EQU     $20
00F7D3 0FF7D3 -> $0010                PPSP4           EQU     $10
00F7D3 0FF7D3 -> $0008                PPSP3           EQU     $08
00F7D3 0FF7D3 -> $0004                PPSP2           EQU     $04
00F7D3 0FF7D3 -> $0002                PPSP1           EQU     $02
00F7D3 0FF7D3 -> $0001                PPSP0           EQU     $01
00F7D3 0FF7D3 -> $025E                PIEP            EQU     $025E
00F7D3 0FF7D3 -> $0080                PIEP7           EQU     $80
00F7D3 0FF7D3 -> $0040                PIEP6           EQU     $40
00F7D3 0FF7D3 -> $0020                PIEP5           EQU     $20
00F7D3 0FF7D3 -> $0010                PIEP4           EQU     $10
00F7D3 0FF7D3 -> $0008                PIEP3           EQU     $08
00F7D3 0FF7D3 -> $0004                PIEP2           EQU     $04
00F7D3 0FF7D3 -> $0002                PIEP1           EQU     $02
00F7D3 0FF7D3 -> $0001                PIEP0           EQU     $01
00F7D3 0FF7D3 -> $025F                PIFP            EQU     $025F
00F7D3 0FF7D3 -> $0080                PIFP7           EQU     $80
00F7D3 0FF7D3 -> $0040                PIFP6           EQU     $40
00F7D3 0FF7D3 -> $0020                PIFP5           EQU     $20
00F7D3 0FF7D3 -> $0010                PIFP4           EQU     $10
00F7D3 0FF7D3 -> $0008                PIFP3           EQU     $08
00F7D3 0FF7D3 -> $0004                PIFP2           EQU     $04
00F7D3 0FF7D3 -> $0002                PIFP1           EQU     $02
00F7D3 0FF7D3 -> $0001                PIFP0           EQU     $01
                                      ;$0260 to $0267 reserved
00F7D3 0FF7D3 -> $0268                PTJ             EQU     $0268
00F7D3 0FF7D3 -> $0080                PTJ7            EQU     $80
00F7D3 0FF7D3 -> $0040                PTJ6            EQU     $40
00F7D3 0FF7D3 -> $0080                PJ7             EQU     $80
00F7D3 0FF7D3 -> $0040                PJ6             EQU     $40
00F7D3 0FF7D3 -> $0269                PTIJ            EQU     $0269
00F7D3 0FF7D3 -> $0080                PTIJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                PTIJ6           EQU     $40
00F7D3 0FF7D3 -> $026A                DDRJ            EQU     $026A
00F7D3 0FF7D3 -> $0080                DDRJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                DDRJ6           EQU     $40
00F7D3 0FF7D3 -> $026B                RDRJ            EQU     $026B
00F7D3 0FF7D3 -> $0080                RDRJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                RDRJ6           EQU     $40
00F7D3 0FF7D3 -> $026C                PERJ            EQU     $026C
00F7D3 0FF7D3 -> $0080                PERJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                PERJ6           EQU     $40
00F7D3 0FF7D3 -> $026D                PPSJ            EQU     $026D
00F7D3 0FF7D3 -> $0080                PPSJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                PPSJ6           EQU     $40
00F7D3 0FF7D3 -> $026E                PIEJ            EQU     $026E
00F7D3 0FF7D3 -> $0080                PIEJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                PIEJ6           EQU     $40
00F7D3 0FF7D3 -> $026F                PIFJ            EQU     $026F
00F7D3 0FF7D3 -> $0080                PIFJ7           EQU     $80
00F7D3 0FF7D3 -> $0040                PIFJ6           EQU     $40
00F7D3 0FF7D3 -> $0270                PTAD            EQU     $0270
00F7D3 0FF7D3 -> $0080                PTAD7           EQU     $80
00F7D3 0FF7D3 -> $0040                PTAD6           EQU     $40
00F7D3 0FF7D3 -> $0020                PTAD5           EQU     $20
00F7D3 0FF7D3 -> $0010                PTAD4           EQU     $10
00F7D3 0FF7D3 -> $0008                PTAD3           EQU     $08
00F7D3 0FF7D3 -> $0004                PTAD2           EQU     $04
00F7D3 0FF7D3 -> $0002                PTAD1           EQU     $02
00F7D3 0FF7D3 -> $0001                PTAD0           EQU     $01
00F7D3 0FF7D3 -> $0080                PAD7            EQU     $80
00F7D3 0FF7D3 -> $0040                PAD6            EQU     $40
00F7D3 0FF7D3 -> $0020                PAD5            EQU     $20
00F7D3 0FF7D3 -> $0010                PAD4            EQU     $10
00F7D3 0FF7D3 -> $0008                PAD3            EQU     $08
00F7D3 0FF7D3 -> $0004                PAD2            EQU     $04
00F7D3 0FF7D3 -> $0002                PAD1            EQU     $02
00F7D3 0FF7D3 -> $0001                PAD0            EQU     $01
00F7D3 0FF7D3 -> $0271                PTIAD           EQU     $0271
00F7D3 0FF7D3 -> $0080                PTIAD7          EQU     $80
00F7D3 0FF7D3 -> $0040                PTIAD6          EQU     $40
00F7D3 0FF7D3 -> $0020                PTIAD5          EQU     $20
00F7D3 0FF7D3 -> $0010                PTIAD4          EQU     $10
00F7D3 0FF7D3 -> $0008                PTIAD3          EQU     $08
00F7D3 0FF7D3 -> $0004                PTIAD2          EQU     $04
00F7D3 0FF7D3 -> $0002                PTIAD1          EQU     $02
00F7D3 0FF7D3 -> $0001                PTIAD0          EQU     $01
00F7D3 0FF7D3 -> $0272                DDRAD           EQU     $0272
00F7D3 0FF7D3 -> $0080                DDRAD7          EQU     $80
00F7D3 0FF7D3 -> $0040                DDRAD6          EQU     $40
00F7D3 0FF7D3 -> $0020                DDRAD5          EQU     $20
00F7D3 0FF7D3 -> $0010                DDRAD4          EQU     $10
00F7D3 0FF7D3 -> $0008                DDRAD3          EQU     $08
00F7D3 0FF7D3 -> $0004                DDRAD2          EQU     $04
00F7D3 0FF7D3 -> $0002                DDRAD1          EQU     $02
00F7D3 0FF7D3 -> $0001                DDRAD0          EQU     $01
00F7D3 0FF7D3 -> $0273                RDRAD           EQU     $0273
00F7D3 0FF7D3 -> $0080                RDRAD7          EQU     $80
00F7D3 0FF7D3 -> $0040                RDRAD6          EQU     $40
00F7D3 0FF7D3 -> $0020                RDRAD5          EQU     $20
00F7D3 0FF7D3 -> $0010                RDRAD4          EQU     $10
00F7D3 0FF7D3 -> $0008                RDRAD3          EQU     $08
00F7D3 0FF7D3 -> $0004                RDRAD2          EQU     $04
00F7D3 0FF7D3 -> $0002                RDRAD1          EQU     $02
00F7D3 0FF7D3 -> $0001                RDRAD0          EQU     $01
00F7D3 0FF7D3 -> $0274                PERAD           EQU     $0274
00F7D3 0FF7D3 -> $0080                PERAD7          EQU     $80
00F7D3 0FF7D3 -> $0040                PERAD6          EQU     $40
00F7D3 0FF7D3 -> $0020                PERAD5          EQU     $20
00F7D3 0FF7D3 -> $0010                PERAD4          EQU     $10
00F7D3 0FF7D3 -> $0008                PERAD3          EQU     $08
00F7D3 0FF7D3 -> $0004                PERAD2          EQU     $04
00F7D3 0FF7D3 -> $0002                PERAD1          EQU     $02
00F7D3 0FF7D3 -> $0001                PERAD0          EQU     $01
00F7D3 0FF7D3 -> $0275                PPSAD           EQU     $0275
00F7D3 0FF7D3 -> $0080                PPSAD7          EQU     $80
00F7D3 0FF7D3 -> $0040                PPSAD6          EQU     $40
00F7D3 0FF7D3 -> $0020                PPSAD5          EQU     $20
00F7D3 0FF7D3 -> $0010                PPSAD4          EQU     $10
00F7D3 0FF7D3 -> $0008                PPSAD3          EQU     $08
00F7D3 0FF7D3 -> $0004                PPSAD2          EQU     $04
00F7D3 0FF7D3 -> $0002                PPSAD1          EQU     $02
00F7D3 0FF7D3 -> $0001                PPSAD0          EQU     $01
                                      ;$0276 to $027F reserved
00F7D3 0FF7D3 -> $0280                CAN4CTL0        EQU     $280
00F7D3 0FF7D3 -> $0281                CAN4CTL1        EQU     $281
00F7D3 0FF7D3 -> $0282                CAN4BTR0        EQU     $282
00F7D3 0FF7D3 -> $0283                CAN4BTR1        EQU     $283
00F7D3 0FF7D3 -> $0284                CAN4RFLG        EQU     $284
00F7D3 0FF7D3 -> $0285                CAN4RIER        EQU     $285
00F7D3 0FF7D3 -> $0286                CAN4TFLG        EQU     $286
00F7D3 0FF7D3 -> $0287                CAN4TIER        EQU     $287
00F7D3 0FF7D3 -> $0288                CAN4TARQ        EQU     $288
00F7D3 0FF7D3 -> $0289                CAN4TAAK        EQU     $289
00F7D3 0FF7D3 -> $028A                CAN4TBSEL       EQU     $28A
00F7D3 0FF7D3 -> $028B                CAN4IDAC        EQU     $28B
                                      ; can4 registers have the same bit definitions as can0, see above
                                      ; $28c and $28d reserved
00F7D3 0FF7D3 -> $028E                CAN4RXERR       EQU     $28E
00F7D3 0FF7D3 -> $028F                CAN4TXERR       EQU     $28F
00F7D3 0FF7D3 -> $0290                CAN4IDAR0       EQU     $290
00F7D3 0FF7D3 -> $0291                CAN4IDAR1       EQU     $291
00F7D3 0FF7D3 -> $0292                CAN4IDAR2       EQU     $292
00F7D3 0FF7D3 -> $0293                CAN4IDAR3       EQU     $293
00F7D3 0FF7D3 -> $0294                CAN4IDMR0       EQU     $294
00F7D3 0FF7D3 -> $0295                CAN4IDMR1       EQU     $295
00F7D3 0FF7D3 -> $0296                CAN4IDMR2       EQU     $296
00F7D3 0FF7D3 -> $0297                CAN4IDMR3       EQU     $297
00F7D3 0FF7D3 -> $0298                CAN4IDAR4       EQU     $298
00F7D3 0FF7D3 -> $0299                CAN4IDAR5       EQU     $299
00F7D3 0FF7D3 -> $029A                CAN4IDAR6       EQU     $29A
00F7D3 0FF7D3 -> $029B                CAN4IDAR7       EQU     $29B
00F7D3 0FF7D3 -> $029C                CAN4IDMR4       EQU     $29C
00F7D3 0FF7D3 -> $029D                CAN4IDMR5       EQU     $29D
00F7D3 0FF7D3 -> $029E                CAN4IDMR6       EQU     $29E
00F7D3 0FF7D3 -> $029F                CAN4IDMR7       EQU     $29F
00F7D3 0FF7D3 -> $02A0                CAN4RXIDR0      EQU     $2A0
00F7D3 0FF7D3 -> $02A1                CAN4RXIDR1      EQU     $2A1
00F7D3 0FF7D3 -> $02A2                CAN4RXIDR2      EQU     $2A2
00F7D3 0FF7D3 -> $02A3                CAN4RXIDR3      EQU     $2A3
00F7D3 0FF7D3 -> $02A4                CAN4RXDSR0      EQU     $2A4
00F7D3 0FF7D3 -> $02A5                CAN4RXDSR1      EQU     $2A5
00F7D3 0FF7D3 -> $02A6                CAN4RXDSR2      EQU     $2A6
00F7D3 0FF7D3 -> $02A7                CAN4RXDSR3      EQU     $2A7
00F7D3 0FF7D3 -> $02A8                CAN4RXDSR4      EQU     $2A8
00F7D3 0FF7D3 -> $02A9                CAN4RXDSR5      EQU     $2A9
00F7D3 0FF7D3 -> $02AA                CAN4RXDSR6      EQU     $2AA
00F7D3 0FF7D3 -> $02AB                CAN4RXDSR7      EQU     $2AB
00F7D3 0FF7D3 -> $02AC                CAN4RXDLR       EQU     $2AC
                                      ; $2ad to $2af reserved
00F7D3 0FF7D3 -> $02B1                CAN4TXIDR1      EQU     $2B1
00F7D3 0FF7D3 -> $02B2                CAN4TXIDR2      EQU     $2B2
00F7D3 0FF7D3 -> $02B3                CAN4TXIDR3      EQU     $2B3
00F7D3 0FF7D3 -> $02B4                CAN4TXDSR0      EQU     $2B4
00F7D3 0FF7D3 -> $02B5                CAN4TXDSR1      EQU     $2B5
00F7D3 0FF7D3 -> $02B6                CAN4TXDSR2      EQU     $2B6
00F7D3 0FF7D3 -> $02B7                CAN4TXDSR3      EQU     $2B7
00F7D3 0FF7D3 -> $02B8                CAN4TXDSR4      EQU     $2B8
00F7D3 0FF7D3 -> $02B9                CAN4TXDSR5      EQU     $2B9
00F7D3 0FF7D3 -> $02BA                CAN4TXDSR6      EQU     $2BA
00F7D3 0FF7D3 -> $02BB                CAN4TXDSR7      EQU     $2BB
00F7D3 0FF7D3 -> $02BC                CAN4TXDLR       EQU     $2BC
00F7D3 0FF7D3 -> $02BD                CAN4TXTBPR      EQU     $2BD
00F7D3 0FF7D3 -> $02BE                CAN4TXTSRH      EQU     $2BE
00F7D3 0FF7D3 -> $02BF                CAN4TXTSRL      EQU     $2BF
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (OpenBDC)                                    #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports. The OpenBDM firmware      #
                                      ;#    assumes the following I/O pin configuration of the S12C128 MCU:          #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - NC                           (input        pull-up)               #
                                      ;#     PA1 - NC                           (input        pull-up)               #
                                      ;#     PA2 - NC                           (input        pull-up)               #
                                      ;#     PA3 - NC                           (input        pull-up)               #
                                      ;#     PA4 - NC                           (input        pull-up)               #
                                      ;#     PA5 - NC                           (input        pull-up)               #
                                      ;#     PA6 - NC                           (input        pull-up)               #
                                      ;#     PA7 - NC                           (input        pull-up)               #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - NC                           (input        pull-up)               #
                                      ;#     PB1 - NC                           (input        pull-up)               #
                                      ;#     PB2 - NC                           (input        pull-up)               #
                                      ;#     PB3 - NC                           (input        pull-up)               #
                                      ;#     PB4 - BDM - BKGD output            (input/output pull-up)               #
                                      ;#     PB5 - NC                           (input        pull-up)               #
                                      ;#     PB6 - NC                           (input        pull-up)               #
                                      ;#     PB7 - NC                           (input        pull-up)               #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - NC                           (input        pull-up)               #
                                      ;#     PE1 - NC                           (input        pull-up)               #
                                      ;#     PE2 - NC                           (input        pull-up)               #
                                      ;#     PE3 - NC                           (input        pull-up)               #
                                      ;#     PE4 - NC                           (input        pull-up)               #
                                      ;#     PE5 - NC                           (input        pull-up)               #
                                      ;#     PE6 - NC                           (input        pull-up)               #
                                      ;#     PE7 - NC                           (input        pull-up)               #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ6 - NC                           (input        pull-up)               #
                                      ;#     PJ7 - NC                           (input        pull-up)               #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - SCI - RTS input              (input        no pull)               #
                                      ;#     PM1 - SCI - CTS output             (output       no pull)               #
                                      ;#     PM2 - NC                           (input        pull-up)               #
                                      ;#     PM3 - NC                           (input        pull-up)               #
                                      ;#     PM4 - NC                           (input        pull-up)               #
                                      ;#     PM5 - NC                           (input        pull-up)               #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - NC                           (input        pull-up)               #
                                      ;#     PP1 - NC                           (input        pull-up)               #
                                      ;#     PP2 - NC                           (input        pull-up)               #
                                      ;#     PP3 - NC                           (input        pull-up)               #
                                      ;#     PP4 - NC                           (input        pull-up)               #
                                      ;#     PP5 - BDM - RESET output           (input/output no pull)               #
                                      ;#     PP6 - NC                           (input        pull-up)               #
                                      ;#     PP7 - NC                           (input        pull-up)               #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI RX input                 (input        no pull)               #
                                      ;#     PS1 - SCI TX output                (output       no pull)               #
                                      ;#     PS2 - NC                           (input        pull-up)               #
                                      ;#     PS3 - NC                           (input        pull-up)               #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - SCI - RX posedge detection   (input        no pull)               #
                                      ;#     PT1 - SCI - RX negedge detection   (input        no pull)               #
                                      ;#     PT2 - NC                           (input        pull-up)               #
                                      ;#     PT3 - NC                           (input        pull-up)               #
                                      ;#     PT4 - NC                           (input        pull-up)               #
                                      ;#     PT5 - BDM - BKGD posedge detection (input        no pull)               #
                                      ;#     PT6 - BDM - BKGD negedge detection (input        no pull)               #
                                      ;#     PT7 - NC                           (input        pull-up)               #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD0 - NC                          (input        pull-up)               #
                                      ;#     PAD1 - NC                          (input        pull-up)               #
                                      ;#     PAD2 - NC                          (input        pull-up)               #
                                      ;#     PAD3 - NC                          (input        pull-up)               #
                                      ;#     PAD4 - NC                          (input        pull-up)               #
                                      ;#     PAD5 - NC                          (input        pull-up)               #
                                      ;#     PAD6 - NC                          (input        pull-up)               #
                                      ;#     PAD7 - LED - 1=on/0=off            (output       no pull)               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 10, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
00F686 0FF686 -> $F686                GPIO_VARS_END           EQU     *
00F686 0FF686 -> $FF686               GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1DC 0FF1DC                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
00F1DC 0FF1DC -> $F1DC                GPIO_CODE_END           EQU     *
00F1DC 0FF1DC -> $FF1DC               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
00F7D3 0FF7D3 -> $F7D3                GPIO_TABS_END           EQU     *
00F7D3 0FF7D3 -> $FF7D3               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (OpenBDC Pod)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module module performs all the necessary steps to initialize the    #
                                      ;#    device after each reset.                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 9, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Updated memory mapping                                               #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                    S12C128                              S12C32
                                      ;                +-------------+ $0000                +-------------+ $0000
                                      ;                |  Registers  |                      |  Registers  |
                                      ;                +-------------+ $0400                +-------------+ $0400
                                      ;                |/////////////|                    | |/////////////|
                                      ;         RAM->+ +-------------+ $1000         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |                    | |  Variables  |
                                      ;       FLASH->+ +-------------+ $2000              + +-------------+ $1800
                                      ;              | |             |                      |/////////////|
                                      ;              | |    Code     |             FLASH->+ +-------------+ $4000
                                      ;              | |             |                    | |    Code     |
                                      ;              | +-------------+                    | +-------------+
                                      ;              | |  Tables     |                    | |   Tables    |
                                      ;              | +-------------+                    | +-------------+
                                      ;              | |/////////////|                    | |/////////////|
                                      ;              | +-------------+ $FF80              | +-------------+ $FF80
                                      ;              | |  Vectors    |                    | |  Vectors    |
                                      ;              + +-------------+                    + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                    S12C128                              S12C32
                                      ;                +-------------+ $0000                +-------------+ $0000
                                      ;                |  Registers  |                      |  Registers  |
                                      ;                +-------------+ $0400                +-------------+ $0400
                                      ;                |/////////////|                      |/////////////|
                                      ;         RAM->+ +-------------+ $E000         RAM->+ +-------------+ $F800
                                      ;              | |  Variables  |                    | |  Variables  |
                                      ;              | +-------------+                    | +-------------+
                                      ;              | |    Code     |                    | |    Code     |
                                      ;              | +-------------+                    | +-------------+
                                      ;              | |   Tables    |                    | |   Tables    |
                                      ;              | +-------------+                    | +-------------+
                                      ;              | |/////////////|                    | |/////////////|
                                      ;              | +-------------+ $FF80              | +-------------+ $FF80
                                      ;              | |  Vectors    |                    | |  Vectors    |
                                      ;              + +-------------+                    + +-------------+
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Device selection
                                      ;RAM or flash
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory sizes
00F7D3 0FF7D3 -> $0400                MMAP_REG_SIZE           EQU     $0400
00F7D3 0FF7D3 -> $1000                MMAP_RAM_SIZE           EQU     $1000           ;S12C128 -> 4K
00F7D3 0FF7D3 -> $20000               MMAP_FLASH_SIZE         EQU     $20000          ;S12C128 -> 128K
                                      ;# Memory Locations
00F7D3 0FF7D3 -> $0000                MMAP_REG_START          EQU     $0000
00F7D3 0FF7D3 -> $0400                MMAP_REG_END            EQU     MMAP_REG_START+MMAP_REG_SIZE
00F7D3 0FF7D3 -> $10000               MMAP_RAM_END            EQU     $10000
00F7D3 0FF7D3 -> $F000                MMAP_RAM_START          EQU     MMAP_RAM_END-MMAP_RAM_SIZE
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
00F686 0FF686 -> $F686                MMAP_VARS_END           EQU     *
00F686 0FF686 -> $FF686               MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1DC 0FF1DC                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
00F1DC 0FF1DC -> $F1DC                MMAP_CODE_END           EQU     *
00F1DC 0FF1DC -> $FF1DC               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
00F7D3 0FF7D3 -> $F7D3                MMAP_TABS_END           EQU     *
00F7D3 0FF7D3 -> $FF7D3               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F7D3 0FF7D3 -> $F68F                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
00F7D3 0FF7D3 -> $F6AA                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
00F686 0FF686 -> $F686                SSTACK_VARS_END         EQU     *
00F686 0FF686 -> $FF686               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1DC 0FF1DC                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
00F1DC 0FF1DC -> $F1DC                SSTACK_CODE_END         EQU     *
00F1DC 0FF1DC -> $FF1DC               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
00F7D3 0FF7D3 -> $F7D3                SSTACK_TABS_END         EQU     *
00F7D3 0FF7D3 -> $FF7D3               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
                                      ;CPU
00F7D3 0FF7D3 -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F7D3 0FF7D3 -> $0040                ISTACK_CCR              EQU     %0100_0000
00F7D3 0FF7D3 -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
00F686 0FF686 -> $F686                ISTACK_TOP              EQU     *
00F686 0FF686                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
00F68F 0FF68F                                                 DS      SSTACK_DEPTH
00F6AA 0FF6AA -> $F6AA                ISTACK_BOTTOM           EQU     *
00F6AA 0FF6AA -> $F6AA                ISTACK_VARS_END         EQU     *
00F6AA 0FF6AA -> $FF6AA               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1DC 0FF1DC                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
00F1DC 0FF1DC -> $F1DC                ISTACK_CODE_END         EQU     *
00F1DC 0FF1DC -> $FF1DC               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
00F7D3 0FF7D3 -> $F7D3                ISTACK_TABS_END         EQU     *
00F7D3 0FF7D3 -> $FF7D3               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
00F7D3 0FF7D3 -> $0000                CLOCK_VCOFRQ            EQU     $0              ;0=[ 32MHz.. 48MHz],
                                                                                      ;1=[>48MHz.. 80MHz],
                                                                                      ;3=[>80MHz..120MHZ]
                                      ;#Reference clock frequency
00F7D3 0FF7D3 -> $0000                CLOCK_REFFRQ            EQU     $0              ;0=[  1MHz.. 2MHz],
                                                                                      ;1=[> 2MHz.. 6MHz],
                                                                                      ;2=[> 6MHz..12MHz],
                                                                                      ;3=[>12MHz..]
                                      ;#Reference clock divider
00F7D3 0FF7D3 -> $0005                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
00F7D3 0FF7D3 -> $0023                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
00F7D3 0FF7D3 -> $2305                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F6AA 0FF6AA                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
00F6AA 0FF6AA -> $F6AA                CLOCK_VARS_END          EQU     *
00F6AA 0FF6AA -> $FF6AA               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1DC 0FF1DC                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
00F1DC 0FF1DC -> $F1DC                CLOCK_ISR               EQU     *
00F1DC 0FF1DC 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
00F1E1 0FF1E1 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
00F1E6 0FF1E6 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F1E6 0FF1E6 0B                                              RTI                                                      (ISTACK_RTI)
00F1E7 0FF1E7 -> $F1E7                CLOCK_CODE_END          EQU     *
00F1E7 0FF1E7 -> $FF1E7               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
00F7D3 0FF7D3 -> $F7D3                CLOCK_TABS_END          EQU     *
00F7D3 0FF7D3 -> $FF7D3               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
00F7D3 0FF7D3 -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
00F7D3 0FF7D3 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F6AA 0FF6AA                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
00F6AA 0FF6AA -> $F6AA                COP_VARS_END            EQU     *
00F6AA 0FF6AA -> $FF6AA               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1E7 0FF1E7                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00F1E7 0FF1E7 -> $F1E7                COP_CODE_END            EQU     *
00F1E7 0FF1E7 -> $FF1E7               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
00F7D3 0FF7D3 -> $F7D3                COP_TABS_END            EQU     *
00F7D3 0FF7D3 -> $FF7D3               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RTI - Real-Time Interrupt Handler (OpenBDC)                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the real-time interrupt.                              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 9, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F7D3 0FF7D3 -> $006F                RTI_CFG                 EQU     $6F     ;RTI occurs every .512s
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F6AA 0FF6AA                                                 ORG     RTI_VARS_START, RTI_VARS_START_LIN
00F6AA 0FF6AA -> $F6AA                RTI_VARS_END            EQU     *
00F6AA 0FF6AA -> $FF6AA               RTI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1E7 0FF1E7                                                 ORG     RTI_CODE_START, RTI_CODE_START_LIN
00F1E7 0FF1E7 -> $F1E7                RTI_CODE_END            EQU     *
00F1E7 0FF1E7 -> $FF1E7               RTI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     RTI_TABS_START, RTI_TABS_START_LIN
00F7D3 0FF7D3 -> $F7D3                RTI_TABS_END            EQU     *
00F7D3 0FF7D3 -> $FF7D3               RTI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - LED - LED Driver (OpenBDC)                                       #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module controls the LED on the OpenBDM Pod.                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 9, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    RTI - Real Time Interrupt Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F7D3 0FF7D3 -> $0055                LED_PAT_COMERR          EQU     %0101_0101
00F7D3 0FF7D3 -> $00F5                LED_PAT_BUSY            EQU     %1111_0101
00F7D3 0FF7D3 -> $0010                LED_FLG_COMERR          EQU     $10     ;current COMERR state
00F7D3 0FF7D3 -> $0008                LED_FLG_COMERR_NXT      EQU     $08     ;next COMERR state
00F7D3 0FF7D3 -> $0004                LED_FLG_BUSY            EQU     $04     ;current BUSY state
00F7D3 0FF7D3 -> $0002                LED_FLG_BUSY_NXT        EQU     $02     ;next BUSY state
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F6AA 0FF6AA                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
00F6AA 0FF6AA                         LED_FLGS                DS      1               ;State that is currently signaled
00F6AB 0FF6AB                         LED_PAT                 DS      1               ;State of the current pattern (MSB will be displayed next)
00F6AC 0FF6AC -> $F6AC                LED_VARS_END            EQU     *
00F6AC 0FF6AC -> $FF6AC               LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F1E7 0FF1E7                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
                                      ;#Interrupt Service Routine
00F1E7 0FF1E7 -> $F1E7                LED_ISR                 EQU     *
                                                              ;Clear interupt flag
00F1E7 0FF1E7 18 0B 80 00 37                                  MOVB    #$80, CRGFLG
                                                              ;Use jump table
00F1EC 0FF1EC C6 1E                                           LDAB    #(LED_FLG_COMERR|LED_FLG_COMERR_NXT|LED_FLG_BUSY|LED_FLG_BUSY_NXT)
00F1EE 0FF1EE F4 F6 AA                                        ANDB    LED_FLGS
00F1F1 0FF1F1 B7 15                                           SEX     B, X
00F1F3 0FF1F3 05 E3 F7 D3                                     JMP     [LED_JMPTAB,X]
                                                              ;Deactivate all signals and disable timer
00F1F7 0FF1F7 -> $F1F7                LED_ISR_STOP_ALL        EQU     *
00F1F7 0FF1F7 MACRO                                           RTI_DISABLE                     ;stop the timer
                                      ;#Disable RTI                                                                    (RTI_DISABLE)
00F1F7 0FF1F7 79 00 3B                                        CLR     RTICTL                                           (RTI_DISABLE)
00F1FA 0FF1FA 4D 38 80                                        BCLR    CRGINT, #RTIE                                    (RTI_DISABLE)
00F1FD 0FF1FD 79 F6 AA                                        CLR     LED_FLGS                ;update state flags
00F200 0FF200 MACRO                                           LED_ON                          ;turn on LED
                                      ;#Turn LED on                                                                    (LED_ON)
00F200 0FF200 18 0B 80 02 70                          MOVB    #PAD7, PTAD                                              (LED_ON)
00F205 0FF205 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F205 0FF205 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Activate BUSY signal
00F206 0FF206 -> $F206                LED_ISR_START_BUSY      EQU     *
00F206 0FF206 18 0B F5 F6 AB                                  MOVB    #LED_PAT_BUSY, LED_PAT  ;switch signal pattern
00F20B 0FF20B 20 05                                           JOB     LED_ISR_ADVANCE         ;advance pattern
                                                              ;Activate COMERR signal
00F20D 0FF20D -> $F20D                LED_ISR_START_COMERR    EQU     *
00F20D 0FF20D 18 0B 55 F6 AB                                  MOVB    #LED_PAT_COMERR, LED_PAT;switch signal pattern
                                                              ;JOB    LED_ISR_ADVANCE         ;advance pattern
                                                              ;Advance signal pattern
00F212 0FF212 -> $F212                LED_ISR_ADVANCE         EQU     *
00F212 0FF212 B6 F6 AB                                        LDAA    LED_PAT                 ;drive MSB of signal pattern
00F215 0FF215 2B 05                                           BMI     LED_ISR_ADVANCE_4       ; to LED
00F217 0FF217 MACRO                                           LED_OFF
                                      ;#Turn LED off                                                                   (LED_OFF)
00F217 0FF217 79 02 70                                CLR     PTAD                                                     (LED_OFF)
00F21A 0FF21A 20 05                                           JOB     LED_ISR_ADVANCE_5
00F21C 0FF21C MACRO                   LED_ISR_ADVANCE_4       LED_ON
                                      ;#Turn LED on                                                                    (LED_ON)
00F21C 0FF21C 18 0B 80 02 70                          MOVB    #PAD7, PTAD                                              (LED_ON)
00F221 0FF221 48                      LED_ISR_ADVANCE_5       LSLA                            ;Rotate LED pattern left
00F222 0FF222 89 00                                           ADCA    #0
00F224 0FF224 7A F6 AB                                        STAA    LED_PAT
                                                              ;Advance flags (accu B contains flags)
00F227 0FF227 18 0F                                           TBA                             ;update flags
00F229 0FF229 48                                              LSLA                            ;current set to next, next remains
00F22A 0FF22A 84 14                                           ANDA    #(LED_FLG_BUSY|LED_FLG_COMERR)
00F22C 0FF22C C4 0A                                           ANDB    #(LED_FLG_BUSY_NXT|LED_FLG_COMERR_NXT)
00F22E 0FF22E 18 06                                           ABA
00F230 0FF230 7A F6 AA                                        STAA    LED_FLGS
00F233 0FF233 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F233 0FF233 0B                                              RTI                                                      (ISTACK_RTI)
00F234 0FF234 -> $F234                LED_CODE_END            EQU     *
00F234 0FF234 -> $FF234               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7D3 0FF7D3                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
                                      ;#Jump table to evaluate flag transitions
                                      ;                                               BUSY_NXT----.
                                      ;                                               BUSY-------.|
                                      ;                                               COMERR_NXT.||
                                      ;                                               COMERR---.|||
00F7D3 0FF7D3 -> $F7D3                LED_JMPTAB              EQU     *                       ;VVVV
00F7D3 0FF7D3 F1 F7                                           DW      LED_ISR_STOP_ALL        ;0000 stop signaling
00F7D5 0FF7D5 F2 06                                           DW      LED_ISR_START_BUSY      ;0001 set BUSY pattern
00F7D7 0FF7D7 F1 F7                                           DW      LED_ISR_STOP_ALL        ;0010 stop signaling
00F7D9 0FF7D9 F2 12                                           DW      LED_ISR_ADVANCE         ;0011 advance pattern
00F7DB 0FF7DB F2 0D                                           DW      LED_ISR_START_COMERR    ;0100 set COMERR pattern
00F7DD 0FF7DD F2 0D                                           DW      LED_ISR_START_COMERR    ;0101 set COMERR pattern
00F7DF 0FF7DF F2 0D                                           DW      LED_ISR_START_COMERR    ;0110 set COMERR pattern
00F7E1 0FF7E1 F2 0D                                           DW      LED_ISR_START_COMERR    ;0111 set COMERR pattern
00F7E3 0FF7E3 F1 F7                                           DW      LED_ISR_STOP_ALL        ;1000 stop signaling
00F7E5 0FF7E5 F2 06                                           DW      LED_ISR_START_BUSY      ;1001 set BUSY signal
00F7E7 0FF7E7 F1 F7                                           DW      LED_ISR_STOP_ALL        ;1010 stop signaling
00F7E9 0FF7E9 F2 06                                           DW      LED_ISR_START_BUSY      ;1011 set BUSY signal
00F7EB 0FF7EB F2 12                                           DW      LED_ISR_ADVANCE         ;1100 advance pattern
00F7ED 0FF7ED F2 12                                           DW      LED_ISR_ADVANCE         ;1101 advance pattern
00F7EF 0FF7EF F2 12                                           DW      LED_ISR_ADVANCE         ;1110 advance pattern
00F7F1 0FF7F1 F2 12                                           DW      LED_ISR_ADVANCE         ;1111 advance pattern
00F7F3 0FF7F3 -> $F7F3                LED_TABS_END            EQU     *
00F7F3 0FF7F3 -> $FF7F3               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     unasigned                                                     #
                                      ;#      IC5:     BDM (capture posedges on BKGD pin)                            #
                                      ;#      IC6/OC5: BDM (capture negedges on BKGD pin/toggle BKGD pin)            #
                                      ;#      OC7:     BDM (toggle BKGD pin/timeouts)                                #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
00F7F3 0FF7F3 -> $0001                TIM_DIV2_OFF            EQU     1       ;default no clock divider
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
00F7F3 0FF7F3 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
00F7F3 0FF7F3 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
00F7F3 0FF7F3 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
00F7F3 0FF7F3 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
00F7F3 0FF7F3 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
00F7F3 0FF7F3 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
00F7F3 0FF7F3 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
00F7F3 0FF7F3 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
00F7F3 0FF7F3 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F6AC 0FF6AC                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
00F6AC 0FF6AC -> $F6AC                TIM_VARS_END            EQU     *
00F6AC 0FF6AC -> $FF6AC               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F234 0FF234                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00F234 0FF234 -> $F234                TIM_CODE_END            EQU     *
00F234 0FF234 -> $FF234               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7F3 0FF7F3                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
00F7F3 0FF7F3 -> $F7F3                TIM_TABS_END            EQU     *
00F7F3 0FF7F3 -> $FF7F3               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - The bus clock must be set to 24.576MHz                                 #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - changed selection of detectable baud rates                           #
                                      ;#      - stop baud rate detection when receiving a corret character           #
                                      ;#      - stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
00F7F3 0FF7F3 -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF reminder intervall
00F7F3 0FF7F3 -> $0EA6                SCI_XONXOFF_REMINDER    EQU     (10*CLOCK_BUS_FREQ)/65536
                                      ;RTS/CTS pins
                                      ;Delay counter
                                      ;-------------
00F7F3 0FF7F3 -> $0003                SCI_DLY_OC              EQU     $3              ;default is OC3
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character
                                      ;Detect SUSPEND character
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;ECT or TIM (SCI_BD_ECT or SCI_BD_TIM)
                                      ;Input capture channels
00F7F3 0FF7F3 -> $0000                SCI_BD_ICPE             EQU     $0              ;default is IC0
00F7F3 0FF7F3 -> $0001                SCI_BD_ICNE             EQU     $1              ;default is IC1
00F7F3 0FF7F3 -> $0000                SCI_BD_IC               EQU     $0              ;default is IC0
                                      ;Output compare channels
                                      ;Log captured BD pulse length
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Enable error signaling (if enabled, macros SCI_ERRSIG_ON and SCI_ERRSIG_OFF must be defined)
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;.MC9S12DP25625 SCI IRQ workaround (MUCts00510)
                                      ;----------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
00F7F3 0FF7F3 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00F7F3 0FF7F3 -> $0500                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00F7F3 0FF7F3 -> $0280                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00F7F3 0FF7F3 -> $0140                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00F7F3 0FF7F3 -> $00D5                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00F7F3 0FF7F3 -> $00A0                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00F7F3 0FF7F3 -> $006B                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00F7F3 0FF7F3 -> $0050                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00F7F3 0FF7F3 -> $0035                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00F7F3 0FF7F3 -> $0028                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00F7F3 0FF7F3 -> $001B                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00F7F3 0FF7F3 -> $0014                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00F7F3 0FF7F3 -> $000D                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00F7F3 0FF7F3 -> $000A                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00F7F3 0FF7F3 -> $00A0                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00F7F3 0FF7F3 -> $1999                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00F7F3 0FF7F3 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00F7F3 0FF7F3 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00F7F3 0FF7F3 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00F7F3 0FF7F3 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00F7F3 0FF7F3 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00F7F3 0FF7F3 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00F7F3 0FF7F3 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00F7F3 0FF7F3 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00F7F3 0FF7F3 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00F7F3 0FF7F3 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00F7F3 0FF7F3 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00F7F3 0FF7F3 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
00F7F3 0FF7F3 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
00F7F3 0FF7F3 -> $0007                SCI_TXBUF_MASK          EQU     $07             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00F7F3 0FF7F3 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00F7F3 0FF7F3 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00F7F3 0FF7F3 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00F7F3 0FF7F3 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00F7F3 0FF7F3 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00F7F3 0FF7F3 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00F7F3 0FF7F3 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00F7F3 0FF7F3 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup
00F7F3 0FF7F3 -> $0001                SCI_SET_TIOS            EQU     1
00F7F3 0FF7F3 -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
00F7F3 0FF7F3 -> $0001                SCI_SET_TCTL3           EQU     1
00F7F3 0FF7F3 -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
00F7F3 0FF7F3 -> $0001                SCI_SET_TIOS            EQU     1
00F7F3 0FF7F3 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
                                      ;#Baud rate detection
00F7F3 0FF7F3 -> $0008                SCI_BD_RECOVCNT_INIT    EQU     8
00F7F3 0FF7F3 -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F6AC 0FF6AC                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
00F6AC 0FF6AC -> $F6AC                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
00F6AC 0FF6AC                                                 ALIGN   1
                                      ;#Receive buffer
00F6AC 0FF6AC                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
00F6CC 0FF6CC                         SCI_RXBUF_IN            DS      1               ;points to the next free space
00F6CD 0FF6CD                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
00F6CE 0FF6CE                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
00F6D6 0FF6D6                         SCI_TXBUF_IN            DS      1               ;points to the next free space
00F6D7 0FF6D7                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
00F6D8 0FF6D8                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
00F6DA 0FF6DA                         SCI_AUTO_LOC2           DS      1               ;2nd auto-place location
00F6DB 0FF6DB                                                 UNALIGN 1
                                      ;#Flags
00F6DB 0FF6DB -> $F6DA                SCI_FLGS                EQU     ((SCI_VARS_START&1)*SCI_AUTO_LOC1)+((~SCI_VARS_START&1)*SCI_AUTO_LOC2)
00F6DB 0FF6DB                                                 UNALIGN (~SCI_AUTO_LOC1&1)
                                      ;#XON/XOFF reminder count
                                      ;#Baud rate detection registers
                                      ;SCI_BD_RECOVCNT        DS      1               ;recover counter
00F6DB 0FF6DB                         SCI_BD_LIST             DS      1               ;list of potential baud rates
                                      ;#BD log buffer
00F6DC 0FF6DC                         SCI_BD_LOG_IDX          DS      2
00F6DE 0FF6DE                         SCI_BD_LOG_BUF          DS      4*32
00F75E 0FF75E -> $F75E                SCI_BD_LOG_BUF_END      EQU     *
00F75E 0FF75E -> $F75E                SCI_VARS_END            EQU     *
00F75E 0FF75E -> $FF75E               SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F234 0FF234                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
00F234 0FF234 -> $F234                SCI_TX_NB               EQU     *
                                                              ;Save registers (data in B)
00F234 0FF234 35                                              PSHY
00F235 0FF235 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
00F236 0FF236 CD F6 CE                                        LDY     #SCI_TXBUF
00F239 0FF239 B6 F6 D6                                        LDAA    SCI_TXBUF_IN
00F23C 0FF23C 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
00F23E 0FF23E 42                                              INCA                                            ;increment index
00F23F 0FF23F 84 07                                           ANDA    #SCI_TXBUF_MASK
00F241 0FF241 B1 F6 D7                                        CMPA    SCI_TXBUF_OUT
00F244 0FF244 27 0D                                           BEQ     SCI_TX_NB_1                             ;buffer is full
                                                              ;Update buffer
00F246 0FF246 7A F6 D6                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
00F249 0FF249 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
00F24E 0FF24E MACRO                                           SSTACK_PREPULL  5
00F24E 0FF24E 32                                              PULA
00F24F 0FF24F 31                                              PULY
                                                              ;Signal success
00F250 0FF250 14 01                                           SEC
                                                              ;Done
00F252 0FF252 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
00F253 0FF253 MACRO                   SCI_TX_NB_1             SSTACK_PREPULL  5
00F253 0FF253 32                                              PULA
00F254 0FF254 31                                              PULY
                                                              ;Signal failure
00F255 0FF255 10 FE                                           CLC
                                                              ;Done
00F257 0FF257 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
00F258 0FF258 -> $F258                SCI_TX_BL               EQU     *
00F258 0FF258 MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00F258 0FF258 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00F25A 0FF25A                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00F25A 0FF25A 07 D8                                           JOBSR   \1                                               (SCI_MAKE_BL)
00F25C 0FF25C 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00F25E 0FF25E 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00F260 0FF260 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
00F260 0FF260 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00F261 0FF261 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00F261 0FF261 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F261 0FF261 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F266 0FF266 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F26B 0FF26B 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00F26D 0FF26D -> $F26D                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00F26D 0FF26D MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
00F26D 0FF26D 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissionsare complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00F26F 0FF26F -> $F26F                SCI_TX_DONE_NB          EQU     *
                                                              ;Save registers
00F26F 0FF26F 3B                                              PSHD
                                                              ;Check TX queue
00F270 0FF270 FC F6 D6                                        LDD     SCI_TXBUF_IN
00F273 0FF273 18 17                                           CBA
00F275 0FF275 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
00F277 0FF277 4E CC C0 04                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2 ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
00F27B 0FF27B MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
00F27B 0FF27B 3A                                              PULD
                                                              ;Signal failure
00F27C 0FF27C 10 FE                                           CLC
                                                              ;Done
00F27E 0FF27E 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
00F27F 0FF27F MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
00F27F 0FF27F 3A                                              PULD
                                                              ;Signal failure
00F280 0FF280 14 01                                           SEC
                                                              ;Done
00F282 0FF282 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00F283 0FF283 -> $F283                SCI_TX_DONE_BL          EQU     *
00F283 0FF283 MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00F283 0FF283 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00F285 0FF285                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00F285 0FF285 07 E8                                           JOBSR   \1                                               (SCI_MAKE_BL)
00F287 0FF287 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00F289 0FF289 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00F28B 0FF28B MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
00F28B 0FF28B 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00F28C 0FF28C MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00F28C 0FF28C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F28C 0FF28C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F291 0FF291 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F296 0FF296 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00F298 0FF298 -> $F298                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00F298 0FF298 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
00F298 0FF298 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00F29A 0FF29A -> $F29A                SCI_TX_READY_NB         EQU     *
                                                              ;Save registers
00F29A 0FF29A 3B                                              PSHD
                                                              ;Check if there is room for this entry
00F29B 0FF29B FC F6 D6                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
00F29E 0FF29E 42                                              INCA
00F29F 0FF29F 84 07                                           ANDA    #SCI_TXBUF_MASK
00F2A1 0FF2A1 B1 F6 D7                                        CMPA    SCI_TXBUF_OUT
00F2A4 0FF2A4 27 04                                           BEQ     SCI_TX_READY_NB_1                               ;buffer is full
                                                              ;Restore registers
00F2A6 0FF2A6 MACRO                                           SSTACK_PREPULL  4
00F2A6 0FF2A6 3A                                              PULD
                                                              ;Done
00F2A7 0FF2A7 14 01                                           SEC
00F2A9 0FF2A9 3D                                              RTS
                                                              ;TX buffer is full
00F2AA 0FF2AA MACRO                   SCI_TX_READY_NB_1       SSTACK_PREPULL  4
00F2AA 0FF2AA 3A                                              PULD
                                                              ;Done
00F2AB 0FF2AB 10 FE                                           CLC
00F2AD 0FF2AD 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00F2AE 0FF2AE -> $F2AE                SCI_TX_READY_BL         EQU     *
00F2AE 0FF2AE MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00F2AE 0FF2AE 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00F2B0 0FF2B0                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00F2B0 0FF2B0 07 E8                                           JOBSR   \1                                               (SCI_MAKE_BL)
00F2B2 0FF2B2 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00F2B4 0FF2B4 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00F2B6 0FF2B6 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
00F2B6 0FF2B6 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00F2B7 0FF2B7 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00F2B7 0FF2B7 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F2B7 0FF2B7 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F2BC 0FF2BC 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F2C1 0FF2C1 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00F2C3 0FF2C3 -> $F2C3                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00F2C3 0FF2C3 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
00F2C3 0FF2C3 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
00F2C5 0FF2C5 -> $F2C5                SCI_RX_NB               EQU     *
                                                              ;Save registers
00F2C5 0FF2C5 34                                              PSHX
                                                              ;Check if there is data in the RX queue
00F2C6 0FF2C6 FC F6 CC                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
00F2C9 0FF2C9 18 16                                           SBA                                             ;A=in-out
00F2CB 0FF2CB 27 18                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
00F2CD 0FF2CD 84 1F                                           ANDA    #SCI_RXBUF_MASK
00F2CF 0FF2CF 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
00F2D1 0FF2D1 27 16                                           BEQ     SCI_RX_NB_3                             ;unblock flow control
                                                              ;Pull entry from the RX queue (out-index in B)
00F2D3 0FF2D3 CE F6 AC                SCI_RX_NB_1             LDX     #SCI_RXBUF
00F2D6 0FF2D6 EE E5                                           LDX     B,X
00F2D8 0FF2D8 CB 02                                           ADDB    #$02                                    ;increment out pointer
00F2DA 0FF2DA C4 1F                                           ANDB    #SCI_RXBUF_MASK
00F2DC 0FF2DC 7B F6 CD                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
00F2DF 0FF2DF B7 54                                           TFR     X, D
                                                              ;Restore registers
00F2E1 0FF2E1 MACRO                                           SSTACK_PREPULL  4
00F2E1 0FF2E1 30                                              PULX
                                                              ;Done
00F2E2 0FF2E2 14 01                                           SEC
00F2E4 0FF2E4 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
00F2E5 0FF2E5 MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
00F2E5 0FF2E5 30                                              PULX
                                                              ;Done
00F2E6 0FF2E6 10 FE                                           CLC
00F2E8 0FF2E8 3D                                              RTS
                                                              ;Unblock flow control (out-index in B, CCR in X)
00F2E9 0FF2E9 -> $F2E9                SCI_RX_NB_3             EQU     *
00F2E9 0FF2E9 MACRO                                           SCI_ASSERT_CTS
                                      ;#Assert CTS (allow incoming data)                                               (SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_ASSERT_CTS)
00F2E9 0FF2E9 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (SCI_ASSERT_CTS)
00F2ED 0FF2ED MACRO                                           SCI_SEND_XONXOFF
00F2ED 0FF2ED 20 E4                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
00F2EF 0FF2EF -> $F2EF                SCI_RX_BL               EQU     *
00F2EF 0FF2EF MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00F2EF 0FF2EF 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00F2F1 0FF2F1                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00F2F1 0FF2F1 07 D2                                           JOBSR   \1                                               (SCI_MAKE_BL)
00F2F3 0FF2F3 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00F2F5 0FF2F5 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00F2F7 0FF2F7 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
00F2F7 0FF2F7 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00F2F8 0FF2F8 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00F2F8 0FF2F8 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F2F8 0FF2F8 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F2FD 0FF2FD 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F302 0FF302 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00F304 0FF304 -> $F304                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00F304 0FF304 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
00F304 0FF304 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00F306 0FF306 -> $F306                SCI_RX_READY_NB         EQU     *
                                                              ;Save registers
00F306 0FF306 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
00F307 0FF307 FC F6 CC                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
00F30A 0FF30A 18 17                                           CBA
00F30C 0FF30C 27 04                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
00F30E 0FF30E MACRO                                           SSTACK_PREPULL  4
00F30E 0FF30E 3A                                              PULD
                                                              ;Done
00F30F 0FF30F 14 01                                           SEC
00F311 0FF311 3D                                              RTS
                                                              ;RX buffer is empty
00F312 0FF312 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
00F312 0FF312 3A                                              PULD
                                                              ;Done
00F313 0FF313 10 FE                                           CLC
00F315 0FF315 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00F316 0FF316 -> $F316                SCI_RX_READY_BL         EQU     *
00F316 0FF316 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00F316 0FF316 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00F318 0FF318                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00F318 0FF318 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00F31A 0FF31A 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00F31C 0FF31C 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00F31E 0FF31E MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
00F31E 0FF31E 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00F31F 0FF31F MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00F31F 0FF31F MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F31F 0FF31F 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F324 0FF324 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00F329 0FF329 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00F32B 0FF32B -> $F32B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00F32B 0FF32B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
00F32B 0FF32B 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00F32D 0FF32D -> $F32D                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
00F32D 0FF32D 35                                              PSHY                                    ;push Y onto the SSTACK
00F32E 0FF32E 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
00F32F 0FF32F 5C C8                                           STD     SCIBDH                          ;set baud rate
00F331 0FF331 CD 19 99                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
00F334 0FF334 13                                              EMUL                                    ;D*Y -> Y:D
00F335 0FF335 7C F6 D8                                        STD     SCI_BVAL
                                                              ;Clear input buffer
00F338 0FF338 18 03 00 00 F6 CC                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
00F33E 0FF33E MACRO                                           SSTACK_PREPULL  6
00F33E 0FF33E 3A                                              PULD                                    ;pull D from the SSTACK
00F33F 0FF33F 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
00F340 0FF340 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTL polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
00F341 0FF341 -> $F341                SCI_ISR_DELAY           EQU     *
00F341 0FF341 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Poll RTS (retrigger request in C-flag)
00F343 0FF343 1F F6 DA 40 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_POLL_RTS, SCI_ISR_DELAY_2            ;no polling required
                                                              ;BRSET  SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now set
00F348 0FF348 1F 02 50 01 04                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now set
00F34D 0FF34D 14 01                                           SEC                                                             ;retrigger
00F34F 0FF34F 20 05                                           JOB     SCI_ISR_DELAY_2
00F351 0FF351 18 0B AC 00 CB          SCI_ISR_DELAY_1         MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
00F356 0FF356 -> $F356                SCI_ISR_DELAY_2         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
00F356 0FF356 24 12                                           BCC     SCI_ISR_DELAY_7
00F358 0FF358 MACRO                                           SCI_RESET_DELAY
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
00F358 0FF358 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
00F358 0FF358 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00F358 0FF358 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00F35D 0FF35D DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
00F35F 0FF35F 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
00F362 0FF362 B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
00F364 0FF364 C7                                              CLRB                                                     (SCI_RESET_DELAY)
00F365 0FF365 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
00F365 0FF365 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
00F367 0FF367 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
00F369 0FF369 -> $F369                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
00F369 0FF369 MACRO                   SCI_ISR_DELAY_6         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F369 0FF369 0B                                              RTI                                                      (ISTACK_RTI)
00F36A 0FF36A MACRO                   SCI_ISR_DELAY_7         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
00F36A 0FF36A MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
00F36A 0FF36A MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00F36A 0FF36A 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00F36D 0FF36D 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00F36F 0FF36F 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00F372 0FF372 -> $F372                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00F372 0FF372 -> $F372                                        EQU     *                                                (SCI_STOP_DELAY)
00F372 0FF372 20 F5                                           JOB     SCI_ISR_DELAY_6
                                                              ;#Transmit ISR (status flags in A)
00F374 0FF374 -> $F374                SCI_ISR_TX              EQU     *
00F374 0FF374 85 80                                           BITA    #TDRE                                   ;check if SCI is ready for new TX data
00F376 0FF376 27 4B                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check RTS status
                                                              ;BRSET  SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
00F378 0FF378 1F 02 50 01 28                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
00F37D 0FF37D 1C F6 DA 40                                     BSET    SCI_FLGS, #SCI_FLG_POLL_RTS             ;request RTS polling
00F381 0FF381 MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (approx. 2 SCI frames)                                             (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
00F381 0FF381 4E 4C 08 1E                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
00F385 0FF385 MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY)
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY)
00F385 0FF385 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
00F385 0FF385 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00F385 0FF385 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00F38A 0FF38A DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_RESET_DELAY)
00F38C 0FF38C 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_RESET_DELAY)
00F38F 0FF38F B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_RESET_DELAY)
00F391 0FF391 C7                                              CLRB                                                     (SCI_START_DELAY/SCI_RESET_DELAY)
00F392 0FF392 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00F392 0FF392 D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00F394 0FF394 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00F396 0FF396 -> $F396                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_RESET_DELAY)
00F396 0FF396 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN)
00F396 0FF396 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/TIM_EN)
                                      ;############################################################################### (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_0_0_1_1_1_0_0, TIOS         ;default setup   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  0=input capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  1=output compare (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_1_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00F396 0FF396 18 0B 08 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00F39B 0FF39B 4C 4C 08                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00F39E 0FF39E 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00F3A3 0FF3A3 -> $F3A3                DONE                    EQU     *                                                (SCI_START_DELAY)
00F3A3 0FF3A3 20 19                                           JOB     SCI_ISR_TX_3                            ;stop transmitting
                                                              ;Check TX buffer
00F3A5 0FF3A5 FC F6 D6                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
00F3A8 0FF3A8 18 17                                           CBA
00F3AA 0FF3AA 27 12                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
00F3AC 0FF3AC CD F6 CE                                        LDY     #SCI_TXBUF
00F3AF 0FF3AF 18 0D ED 00 CF                                  MOVB    B,Y ,SCIDRL
                                                              ;Increment index
00F3B4 0FF3B4 52                                              INCB
00F3B5 0FF3B5 C4 07                                           ANDB    #SCI_TXBUF_MASK
00F3B7 0FF3B7 7B F6 D7                                        STAB    SCI_TXBUF_OUT
00F3BA 0FF3BA 18 17                                           CBA
00F3BC 0FF3BC 26 05                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
00F3BE 0FF3BE -> $F3BE                SCI_ISR_TX_3            EQU     *
00F3BE 0FF3BE 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
00F3C3 0FF3C3 MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F3C3 0FF3C3 0B                                              RTI                                                      (ISTACK_RTI)
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
00F3C4 0FF3C4 -> $F3C4                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
00F3C4 0FF3C4 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
00F3C6 0FF3C6 85 28                                           BITA    #(RDRF|OR)                              ;go to receive handler if receive buffer
00F3C8 0FF3C8 27 AA                                           BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
00F3CA 0FF3CA D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
00F3CC 0FF3CC 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
00F3CE 0FF3CE 1F F6 DA 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
00F3D3 0FF3D3 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
00F3D5 0FF3D5 1D F6 DA 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
00F3D9 0FF3D9 -> $F3D9                SCI_ISR_RX_1            EQU     *
                                                              ;Check for RX errors (status flags in A, RX data in B)
00F3D9 0FF3D9 85 07                                           BITA    #(NF|FE|PF)                             ;check for: noise, frame errors, parity errors
00F3DB 0FF3DB 26 2B                                           BNE     <SCI_ISR_RX_8                           ;RX error detected (skip special caracter detection)
                                                              ;No RX error detected (status flags in A, RX data in B)
                                      ;                       DEC     SCI_BD_RECOVCNT                         ;decrement recovery count if >$00
                                      ;                       BCS     <SCI_ISR_RX_2                           ;keep recovery count at $00
                                      ;                       BNE     <SCI_ISR_RX_3                           ;baud rate detection is ongoing
                                      ;                       ;Auto-recover from baud rate detection (status flags in A, RX data in B)
                                      ;                       SCI_ERRSIG_OFF                                  ;clear error signal
                                      ;                       SCI_STOP_BD                                     ;disable baud rate detection
                                      ;SCI_ISR_RX_2           EQU     *-6
                                                              ;Check for control characters (status flags in A, RX data in B)
00F3DD 0FF3DD -> $F3DD                SCI_ISR_RX_3            EQU     *
00F3DD 0FF3DD 1E F6 DA 04 04                                  BRSET   SCI_FLGS, #SCI_FLG_RX_ESC, SCI_ISR_RX_4 ;charakter is escaped (skip detection)
00F3E2 0FF3E2 C1 1A                                           CMPB    #SCI_SUSPEND
                                                              ;BLE    <SCI_ISR_RX_11                          ;determine control signal
00F3E4 0FF3E4 2F 79                                           BLE     SCI_ISR_RX_11                           ;determine control signal
00F3E6 0FF3E6 1D F6 DA 04             SCI_ISR_RX_4            BCLR    SCI_FLGS, #SCI_FLG_RX_ESC               ;clear escape marker
                                                              ;Place data into RX queue (status flags in A, RX data in B)
00F3EA 0FF3EA B7 46                   SCI_ISR_RX_5            TFR     D, Y                                    ;flags:data -> Y
00F3EC 0FF3EC CE F6 AC                                        LDX     #SCI_RXBUF
00F3EF 0FF3EF FC F6 CC                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00F3F2 0FF3F2 6D E4                                           STY     A,X
00F3F4 0FF3F4 8B 02                                           ADDA    #2
00F3F6 0FF3F6 84 1F                                           ANDA    #SCI_RXBUF_MASK
00F3F8 0FF3F8 18 17                                           CBA
00F3FA 0FF3FA 27 57                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
00F3FC 0FF3FC 7A F6 CC                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check flow control threshold (in:out in D)
00F3FF 0FF3FF 18 16                                           SBA
00F401 0FF401 84 1F                                           ANDA    #SCI_RXBUF_MASK
00F403 0FF403 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00F405 0FF405 24 52                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
00F407 0FF407 -> $F407                SCI_ISR_RX_6            EQU     *
00F407 0FF407 -> $F407                SCI_ISR_RX_7            EQU     *
                                                              ;Done
00F407 0FF407 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F407 0FF407 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;RX error detected (status flags in A, RX data in B)
00F408 0FF408 MACRO                   SCI_ISR_RX_8            SCI_ERRSIG_ON
                                      ;#Turn on error signaling                                                        (SCI_ERRSIG_ON)
                                      ; args:   none                                                                   (SCI_ERRSIG_ON)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_ON)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_ON)
00F408 0FF408 MACRO                                           LED_COMERR_ON                                            (SCI_ERRSIG_ON)
                                      ;#Start signaling communication error                                            (SCI_ERRSIG_ON/LED_COMERR_ON)
00F408 0FF408 1C F6 AA 08                                     BSET    LED_FLGS, #LED_FLG_COMERR_NXT   ;request signal change (SCI_ERRSIG_ON/LED_COMERR_ON)
00F40C 0FF40C MACRO                                           RTI_ENABLE                              ;start timer     (SCI_ERRSIG_ON/LED_COMERR_ON)
                                      ;############################################################################### (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
                                      ;# Macros                                                                      # (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
                                      ;############################################################################### (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
                                      ;#Initialization                                                                 (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
                                                              ;RTI_DISABLE                                             (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
                                      ;#Enable RTI                                                                     (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
00F40C 0FF40C 4E 3B 6F 08                                     BRSET   RTICTL, #RTI_CFG, LABEL                          (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
00F410 0FF410 18 0B 6F 00 3B                                  MOVB    #RTI_CFG, RTICTL                                 (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
00F415 0FF415 4C 38 80                                        BSET    CRGINT, #RTIE                                    (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
00F418 0FF418 -> $F418                LABEL                   EQU     *                                                (SCI_ERRSIG_ON/LED_COMERR_ON/RTI_ENABLE)
00F418 0FF418 MACRO                                           SCI_START_BD
                                      ;Start baud rate detection (I-bit must be set)                                   (SCI_START_BD)
                                      ; args:   none                                                                   (SCI_START_BD)
                                      ; SSTACK: none                                                                   (SCI_START_BD)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD)
00F418 0FF418 F7 F6 DB                                        TST     SCI_BD_LIST                                      (SCI_START_BD)
00F41B 0FF41B 26 34                                           BNE     DONE                                    ;baud rate detection is already running (SCI_START_BD)
                                                              ;Clear BD log                                            (SCI_START_BD)
00F41D 0FF41D MACRO                                           SCI_BD_CLEAR_LOG                                         (SCI_START_BD)
                                      ;Clear BD pulse log                                                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                      ; args:   none                                                                   (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                      ; SSTACK: none                                                                   (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F41D 0FF41D B7 64                                           TFR     Y,D                                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F41F 0FF41F CD F6 DE                                        LDY     #SCI_BD_LOG_BUF                                  (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F422 0FF422 7D F6 DC                                        STY     SCI_BD_LOG_IDX                                   (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F425 0FF425 18 00 71 00 00          LOOP                    MOVW    #$0000, 2,Y+                                     (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F42A 0FF42A 8D F7 5E                                        CPY     #SCI_BD_LOG_BUF_END                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F42D 0FF42D 25 F6                                           BLO     LOOP                                             (SCI_START_BD/SCI_BD_CLEAR_LOG)
00F42F 0FF42F B7 46                                           TFR     D,Y                                              (SCI_START_BD/SCI_BD_CLEAR_LOG)
                                                              ;Enable timer                                            (SCI_START_BD)
00F431 0FF431 MACRO                                           TIM_MULT_EN     ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE))      (SCI_START_BD)
                                      ;############################################################################### (SCI_START_BD/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_BD/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_BD/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%1_0_0_1_1_1_0_0, TIOS         ;default setup   (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  0=input capture (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  1=output compare (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%0_1_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_BD/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_BD/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_BD/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_BD/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_BD/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_BD/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_BD/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_BD/TIM_MULT_EN)
00F431 0FF431 18 0B 03 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_BD/TIM_MULT_EN)
00F436 0FF436 4C 4C 03                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_BD/TIM_MULT_EN)
00F439 0FF439 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_BD/TIM_MULT_EN)
                                                              ;Make sure that the timeout bit is set                   (SCI_START_BD)
00F43E 0FF43E 4E 4E 04 07                                     BRSET   TFLG1, #(1<<SCI_BD_OC), SKIP                     (SCI_START_BD)
                                                              ;SEI                                                     (SCI_START_BD)
00F442 0FF442 MACRO                                           TIM_SET_DLY_IMM SCI_BD_OC, 6                             (SCI_START_BD)
                                      ;#Setup timer delay                                                              (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ; args: 1: channel number                                                        (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ;       2: delay (in bus cycles)                                                 (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ; SSTACK: none                                                                   (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/TIM_SET_DLY_IMM)
00F442 0FF442 CC 00 06                                        LDD     #\2                                              (SCI_START_BD/TIM_SET_DLY_IMM)
00F445 0FF445 D3 44                                           ADDD    TCNT            ;RPO                             (SCI_START_BD/TIM_SET_DLY_IMM)
00F447 0FF447 5C 54                                           STD     (TC0+(2*\1))    ;PWO                             (SCI_START_BD/TIM_SET_DLY_IMM)
                                                              ;CLI                                                     (SCI_START_BD)
00F449 0FF449 -> $F449                SKIP                    EQU     *                                                (SCI_START_BD)
                                                              ;Reset baud rate list and recover counter                (SCI_START_BD)
00F449 0FF449 18 0B FF F6 DB                                  MOVB    #SCI_BD_LIST_INIT, SCI_BD_LIST                   (SCI_START_BD)
                                                              ;Start edge detection                                    (SCI_START_BD)
00F44E 0FF44E MACRO                                           SCI_BD_START_EDGE_DETECT                                 (SCI_START_BD)
                                      ;Start edge detection                                                            (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;start edge detection (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
00F44E 0FF44E 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ;DONE                   MOVB    #SCI_BD_RECOVCNT_INIT, SCI_BD_RECOVCNT           (SCI_START_BD)
00F451 0FF451 -> $F451                DONE                    EQU     *                                                (SCI_START_BD)
00F451 0FF451 20 93                                           JOB     SCI_ISR_RX_4                            ;queue RX data
                                                              ;Buffer overflow
00F453 0FF453 1C F6 DA 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
00F457 0FF457 20 AE                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;RX buffer is getting full
00F459 0FF459 MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
00F459 0FF459 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (allow RX data) (SCI_DEASSERT_CTS)
00F45D 0FF45D MACRO                                           SCI_SEND_XONXOFF
00F45D 0FF45D 20 A8                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;Determine control signal (status flags in A, RX data in B)
00F45F 0FF45F -> $F45F                SCI_ISR_RX_11           EQU     *
                                                              ;Check for SUSPEND (status flags in A, RX data in B)
00F45F 0FF45F C1 1A                                           CMPB    #SCI_SUSPEND
00F461 0FF461 26 06                                           BNE     <SCI_ISR_RX_14                          ;determine control signal
00F463 0FF463 MACRO                                           SCI_SUSPEND_ACTION
                                      ;Suspend handler                                                                 (SCI_SUSPEND_ACTION)
00F463 0FF463 MACRO                                           LED_BUSY_OFF                                             (SCI_SUSPEND_ACTION)
                                      ;#Stop busy signal                                                               (SCI_SUSPEND_ACTION/LED_BUSY_OFF)
00F463 0FF463 1D F6 AA 02                                     BCLR    LED_FLGS, #LED_FLG_BUSY_NXT     ;request signal change (SCI_SUSPEND_ACTION/LED_BUSY_OFF)
00F467 0FF467 20 9E                                           JOB     SCI_ISR_RX_6                            ;done
00F469 0FF469 -> $F469                SCI_ISR_RX_14           EQU     *
                                                              ;Check for BREAK (status flags in A, RX data in B)
00F469 0FF469 C1 03                                           CMPB    #SCI_BREAK
00F46B 0FF46B 26 10                                           BNE     <SCI_ISR_RX_15                          ;determine control signal
00F46D 0FF46D MACRO                                           SCI_BREAK_ACTION
                                      ;############################################################################### (SCI_BREAK_ACTION)
                                      ;# Macros                                                                      # (SCI_BREAK_ACTION)
                                      ;############################################################################### (SCI_BREAK_ACTION)
                                      ;Break handler                                                                   (SCI_BREAK_ACTION)
00F46D 0FF46D MACRO                                           LED_BUSY_ON                                              (SCI_BREAK_ACTION)
                                      ;#Start busy signal                                                              (SCI_BREAK_ACTION/LED_BUSY_ON)
00F46D 0FF46D 1C F6 AA 02                                     BSET    LED_FLGS, #LED_FLG_BUSY_NXT     ;request signal change (SCI_BREAK_ACTION/LED_BUSY_ON)
00F471 0FF471 MACRO                                           RTI_ENABLE                              ;start timer     (SCI_BREAK_ACTION/LED_BUSY_ON)
                                      ;############################################################################### (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
                                      ;# Macros                                                                      # (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
                                      ;############################################################################### (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
                                      ;#Initialization                                                                 (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
                                                              ;RTI_DISABLE                                             (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
                                      ;#Enable RTI                                                                     (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
00F471 0FF471 4E 3B 6F 08                                     BRSET   RTICTL, #RTI_CFG, LABEL                          (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
00F475 0FF475 18 0B 6F 00 3B                                  MOVB    #RTI_CFG, RTICTL                                 (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
00F47A 0FF47A 4C 38 80                                        BSET    CRGINT, #RTIE                                    (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
00F47D 0FF47D -> $F47D                LABEL                   EQU     *                                                (SCI_BREAK_ACTION/LED_BUSY_ON/RTI_ENABLE)
00F47D 0FF47D C1 10                   SCI_ISR_RX_15           CMPB    #SCI_DLE
00F47F 0FF47F 26 04                                           BNE     <SCI_ISR_RX_16                          ;done
00F481 0FF481 1C F6 DA 04                                     BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;set escape marker
00F485 0FF485 20 80                   SCI_ISR_RX_16           JOB     SCI_ISR_RX_6                            ;done
                                      ;#BD negedge ISR (default IC1)
00F487 0FF487 -> $F487                SCI_ISR_BD_NE           EQU     *
                                                              ;Clear ICNE interrupt
00F487 0FF487 MACRO                                           TIM_CLRIF       SCI_BD_ICNE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00F487 0FF487 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00F487 0FF487 18 0B 02 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
00F48C 0FF48C DE 52                                           LDX     (TC0+(2*SCI_BD_ICNE))                   ;capture current edge (posedge)
00F48E 0FF48E DD 50                                           LDY     (TC0+(2*SCI_BD_ICPE))                   ;capture previous edge (posedge)
00F490 0FF490 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
00F492 0FF492 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
00F494 0FF494 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00F494 0FF494 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00F494 0FF494 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
00F499 0FF499 MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
00F499 0FF499 8F F6 A1                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
00F49C 0FF49C 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
00F49E 0FF49E 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
00F4A0 0FF4A0 -> $F4A0                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
00F4A0 0FF4A0 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
00F4A2 0FF4A2 26 70                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
00F4A4 0FF4A4 CC FF FF                                        LDD     #-1
00F4A7 0FF4A7 18 13                                           EMULS                                           ;-1 * Y => Y:D
00F4A9 0FF4A9 1A E6                                           LEAX    D,X                                     ;subtract timestamps
                                                              ;Select search tree tree (pulse length in X)
00F4AB 0FF4AB CD FB FC                                        LDY     #SCI_BD_HIGH_PULSE_TREE
00F4AE 0FF4AE 04 65 2E                                        TBNE    X, SCI_ISR_BD_NEPE_2                    ;parse search tree if pulse length is > 0
00F4B1 0FF4B1 20 61                                           JOB     SCI_ISR_BD_NEPE_4                       ;discard zero-length pulses (for whatever reasson they may occur)
                                      ;#BD posedge ISR (default IC0)
00F4B3 0FF4B3 -> $F4B3                SCI_ISR_BD_PE           EQU     *
                                                              ;Clear ICNE interrupt
00F4B3 0FF4B3 MACRO                                           TIM_CLRIF       SCI_BD_ICPE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00F4B3 0FF4B3 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00F4B3 0FF4B3 18 0B 01 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
00F4B8 0FF4B8 DE 50                                           LDX     (TC0+(2*SCI_BD_ICPE))                   ;capture current edge (posedge)
00F4BA 0FF4BA DD 52                                           LDY     (TC0+(2*SCI_BD_ICNE))                   ;capture previous edge (posedge)
00F4BC 0FF4BC D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
00F4BE 0FF4BE 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
00F4C0 0FF4C0 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00F4C0 0FF4C0 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00F4C0 0FF4C0 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
00F4C5 0FF4C5 MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
00F4C5 0FF4C5 8F F6 A1                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
00F4C8 0FF4C8 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
00F4CA 0FF4CA 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
00F4CC 0FF4CC -> $F4CC                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
00F4CC 0FF4CC C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
00F4CE 0FF4CE 26 44                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
00F4D0 0FF4D0 CC FF FF                                        LDD     #-1
00F4D3 0FF4D3 18 13                                           EMULS                                           ;-1 * Y => Y:D
00F4D5 0FF4D5 1A E6                                           LEAX    D,X                                     ;subtract timestamps
00F4D7 0FF4D7 04 45 3A                                        TBEQ    X, SCI_ISR_BD_NEPE_4                    ;discard zero-length pulses (for whatever reasson they may occur)
                                                              ;Select search tree tree (pulse length in X)
00F4DA 0FF4DA CD F8 04                                        LDY     #SCI_BD_LOW_PULSE_TREE
00F4DD 0FF4DD 20 00                                           JOB     SCI_ISR_BD_NEPE_2                       ;parse search tree
                                                              ;Log pluse length for debuging (pulse length in X, search tree in Y)
00F4DF 0FF4DF MACRO                   SCI_ISR_BD_NEPE_2       SCI_BD_LOG
                                      ;Log BD pulse length                                                             (SCI_BD_LOG)
                                      ; args: X: pulse length                                                          (SCI_BD_LOG)
                                      ;       Y: search tree pointer                                                   (SCI_BD_LOG)
                                      ; SSTACK: none                                                                   (SCI_BD_LOG)
                                      ;         X, and Y are preserved                                                 (SCI_BD_LOG)
00F4DF 0FF4DF B7 64                                   TFR     Y,D                                                      (SCI_BD_LOG)
00F4E1 0FF4E1 FD F6 DC                                LDY     SCI_BD_LOG_IDX                                           (SCI_BD_LOG)
00F4E4 0FF4E4 8D F7 5E                                CPY     #SCI_BD_LOG_BUF_END                                      (SCI_BD_LOG)
00F4E7 0FF4E7 24 07                                   BHS     DONE                                                     (SCI_BD_LOG)
00F4E9 0FF4E9 6C 71                                   STD     2,Y+                                                     (SCI_BD_LOG)
00F4EB 0FF4EB 6E 71                                   STX     2,Y+                                                     (SCI_BD_LOG)
00F4ED 0FF4ED 7D F6 DC                                STY     SCI_BD_LOG_IDX                                           (SCI_BD_LOG)
00F4F0 0FF4F0 B7 46                   DONE            TFR     D,Y                                                      (SCI_BD_LOG)
                                                              ;Parse tree  (pulse length in X, search tree in Y)
00F4F2 0FF4F2 MACRO                                           SCI_BD_PARSE
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;# Parse routine                                                               # (SCI_BD_PARSE)
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;#Parse search tree for detected pulse length                                    (SCI_BD_PARSE)
                                      ; args:   Y: root of the search tree                                             (SCI_BD_PARSE)
                                      ;         X: pulse length                                                        (SCI_BD_PARSE)
                                      ; result: D: list of matching baud rates (mirrored in high and low byte)         (SCI_BD_PARSE)
                                      ; SSTACK: 0 bytes                                                                (SCI_BD_PARSE)
                                      ;         X is preserved                                                         (SCI_BD_PARSE)
00F4F2 0FF4F2 CC 00 00                                LDD     #$0000          ;  2 cycs       ;initialize X            (SCI_BD_PARSE)
00F4F5 0FF4F5 E7 40                   LOOP            TST     0,Y             ;  3 cycs       ;check if lower boundary exists (SCI_BD_PARSE)
00F4F7 0FF4F7 27 0A                                   BEQ     DONE            ;1/3 cycs       ;search done             (SCI_BD_PARSE)
00F4F9 0FF4F9 AE 75                                   CPX     6,Y+            ;  3 cycs       ;check if pulse length is shorter than lower boundary (SCI_BD_PARSE)
00F4FB 0FF4FB 25 F8                                   BLO     LOOP            ;1/3 cycs       ;pulse length is shorter than lower boundary -> try a shorter range (SCI_BD_PARSE)
00F4FD 0FF4FD EC 5C                                   LDD     -4,Y            ;  3 cycs       ;new lowest boundary found -> store valid baud rate field in index X (SCI_BD_PARSE)
00F4FF 0FF4FF ED 5E                                   LDY     -2,Y            ;  3 cycs       ;switch to the branch with higher compare values (SCI_BD_PARSE)
00F501 0FF501 26 F2                                   BNE     LOOP            ;1/3 cycs       ;parse branch if it exists (SCI_BD_PARSE)
00F503 0FF503 -> $F503                DONE            EQU     *                               ;done, result in X       (SCI_BD_PARSE)
                                                              ;Update list of potential batd rates (matching baud rates in D)
00F503 0FF503 14 10                                           SEI
00F505 0FF505 F4 F6 DB                                        ANDB    SCI_BD_LIST                             ;remove mismatching baud rates from the list
00F508 0FF508 27 0B                                           BEQ     SCI_ISR_BD_NEPE_5                       ;no valid baud rate found
00F50A 0FF50A 7B F6 DB                                        STAB    SCI_BD_LIST
                                                              ;Check if baud rate has been determined (potential baud rates in B (not zero))
00F50D 0FF50D 87                                              CLRA
00F50E 0FF50E 42                      SCI_ISR_BD_NEPE_3       INCA
00F50F 0FF50F 54                                              LSRB
00F510 0FF510 24 FC                                           BCC     SCI_ISR_BD_NEPE_3
00F512 0FF512 27 0D                                           BEQ     SCI_ISR_BD_NEPE_6                       ;new baud rate found (index in A)
                                                              ;Done
00F514 0FF514 MACRO                   SCI_ISR_BD_NEPE_4       ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F514 0FF514 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;No valid baud rate found
00F515 0FF515 1F F6 DB FF FA          SCI_ISR_BD_NEPE_5       BRCLR   SCI_BD_LIST, #$FF, SCI_ISR_BD_NEPE_4    ;done
                                                              ;Restart baud rate detection
00F51A 0FF51A 18 0B FF F6 DB                                  MOVB    #$FF, SCI_BD_LIST
00F51F 0FF51F 20 F3                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;New baud rate found (index+1 in A, $00 in B)
00F521 0FF521 MACRO                   SCI_ISR_BD_NEPE_6       SCI_STOP_BD
                                      ;Stop baud rate detection                                                        (SCI_STOP_BD)
                                      ; args:   none                                                                   (SCI_STOP_BD)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD)
00F521 0FF521 1F F6 DB FF 0E                                  BRCLR   SCI_BD_LIST, #$FF, DONE                 ;baud rate detection already inactive (SCI_STOP_BD)
                                                              ;Stop edge detection                                     (SCI_STOP_BD)
00F526 0FF526 MACRO                                           SCI_BD_STOP_EDGE_DETECT                                  (SCI_STOP_BD)
                                      ;Stop edge detection                                                             (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;BCLR   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;stop edge detection (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
00F526 0FF526 4D 4B 09                                        BCLR    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;Disable timer                                           (SCI_STOP_BD)
00F529 0FF529 MACRO                                           TIM_MULT_DIS    ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC)) (SCI_STOP_BD)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD/TIM_MULT_DIS)
00F529 0FF529 4D 4C 07                                        BCLR    TIE, #\1                                         (SCI_STOP_BD/TIM_MULT_DIS)
00F52C 0FF52C 26 03                                           BNE     DONE                                             (SCI_STOP_BD/TIM_MULT_DIS)
00F52E 0FF52E 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_BD/TIM_MULT_DIS)
00F531 0FF531 -> $F531                DONE                    EQU     *                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;                       MOVW    #$0000, SCI_BD_RECOVCNT                 ;clear recovery count and BD list (SCI_STOP_BD)
                                      ;                                                                       ;This must be the last instruction in the macro!!! (SCI_STOP_BD)
                                      ;                                                                       ;See  SCI_ISR_RX_2 (SCI_STOP_BD)
00F531 0FF531 79 F6 DB                                        CLR     SCI_BD_LIST                             ;clear check list (SCI_STOP_BD)
00F534 0FF534 -> $F534                DONE                    EQU     *                                                (SCI_STOP_BD)
                                                              ;Set baud rate (index+1 in A, $00 in B)
00F534 0FF534 48                                              LSLA                                            ;index -> addess offset
00F535 0FF535 CE F7 F2                                        LDX     #SCI_BTAB-2                             ;look up prescaler value
00F538 0FF538 EC E4                                           LDD     A,X                                     ;look up divider value
00F53A 0FF53A MACRO                                           SCI_SET_BAUD
                                      ;#Set baud rate                                                                  (SCI_SET_BAUD)
                                      ; args:   D: new SCIBD value                                                     (SCI_SET_BAUD)
                                      ; result: none                                                                   (SCI_SET_BAUD)
                                      ; SSTACK: 6 bytes                                                                (SCI_SET_BAUD)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD)
00F53A 0FF53A MACRO                                           SSTACK_JOBSR    SCI_SET_BAUD, 6                          (SCI_SET_BAUD)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_SET_BAUD/SSTACK_JOBSR)
00F53A 0FF53A MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_SET_BAUD/SSTACK_JOBSR)
00F53A 0FF53A 16 F3 2D                                        JOBSR   \1                                               (SCI_SET_BAUD/SSTACK_JOBSR)
                                                              ;Clear error signal
00F53D 0FF53D MACRO                                           SCI_ERRSIG_OFF
                                      ;#Turn off error signaling                                                       (SCI_ERRSIG_OFF)
                                      ; args:   none                                                                   (SCI_ERRSIG_OFF)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_OFF)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_OFF)
00F53D 0FF53D MACRO                                           LED_COMERR_OFF                                           (SCI_ERRSIG_OFF)
                                      ;#Stop signaling communication error                                             (SCI_ERRSIG_OFF/LED_COMERR_OFF)
00F53D 0FF53D 1D F6 AA 08                                     BCLR    LED_FLGS, #LED_FLG_COMERR_NXT   ;request signal change (SCI_ERRSIG_OFF/LED_COMERR_OFF)
00F541 0FF541 20 D1                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
00F543 0FF543 -> $F543                SCI_CODE_END            EQU     *
00F543 0FF543 -> $FF543               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F7F3 0FF7F3                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
00F7F4 0FF7F4                                                 ALIGN   1
                                                              ;List of prescaler values
00F7F4 0FF7F4 -> $F7F4                SCI_BTAB                EQU     *
00F7F4 0FF7F4 01 40                                           DW      SCI_4800
00F7F6 0FF7F6 00 D5                                           DW      SCI_7200
00F7F8 0FF7F8 00 A0                                           DW      SCI_9600
00F7FA 0FF7FA 00 6B                                           DW      SCI_14400
00F7FC 0FF7FC 00 50                                           DW      SCI_19200
00F7FE 0FF7FE 00 35                                           DW      SCI_28800
00F800 0FF800 00 28                                           DW      SCI_38400
00F802 0FF802 00 1B                                           DW      SCI_57600
00F804 0FF804 -> $F804                SCI_BTAB_END            EQU     *
                                                              ;Search tree for low pulses
00F804 0FF804 MACRO                   SCI_BD_LOW_PULSE_TREE   SCI_BD_LOW_PULSE_TREE
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# S12CBase - SCI Baud Detection Search Trees                                  # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Copyright 2010 Dirk Heisswolf                                            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file is part of the OpenBDM BDM pod firmware.                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    it under the terms of the GNU General Public License as published by     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    the Free Software Foundation, either version 3 of the License, or        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    (at your option) any later version.                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is distributed in the hope that it will be useful,              # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    GNU General Public License for more details.                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    You should have received a copy of the GNU General Public License        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Description:                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file contains the two search trees which are required for the SCI   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    modules baud rate detection.                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    One is used to determine the set of baud rates that are valid for a      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    certain high pulse.                                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The other one is used to determine the set of baud rates that are valid  # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    for a certain low pulse.                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Each table assigs a set of valid baud rates to a range of pulse lengths. # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    lower boundary <= pulse length < upper boundary -> set of baud rates     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The format of a node entry is the following:                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    start of entry -> | lower boundary  | value of lower boundary            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  BRs   |  BRs   | set of boud rates - twice          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   | pointer to node with longer        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+ boundary value                     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    node node with -> | lower boundary  |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    even lower        +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    boundary value    |  BRs   |  BRs   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Generated on Thu, Jul 26 2012                                               # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Bus clock:              24.58 MHz                                           # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Frame format:           8N1                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Supported baud rates:                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        4800 ( 140)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        7200 (  D5)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        9600 (  A0)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       14400 (  6B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       19200 (  50)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       28800 (  35)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       38400 (  28)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       57600 (  1B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Low pulse search tree                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_LOW_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    276 ( 114)      1 . . . . . . . (80)   2001      2       27                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    400 ( 190)      1 1 . . . . . . (C0)   1843      1       35                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    533 ( 215)      1 1 1 . . . . . (E0)   1184      3       44                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    637 ( 27D)      . 1 1 . . . . . (60)    402      2       62                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    719 ( 2CF)      2 1 1 . . . . . (E0)    352      5       71                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    800 ( 320)      2 1 1 1 . . . . (F0)    274      4       69                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    921 ( 399)      2 . 1 1 . . . . (B0)     91      5       78                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1040 ( 410)      2 2 1 1 . . . . (F0)     55      3       89                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1076 ( 434)      2 2 1 1 1 . . . (F8)     55      7       98                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1080 ( 438)      . 2 1 1 1 . . . (78)     43      6      106                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1162 ( 48A)      3 2 1 1 1 . . . (F8)     32      8      115                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1227 ( 4CB)      3 2 . 1 1 . . . (D8)     17      7      123                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1386 ( 56A)      3 2 2 1 1 . . . (F8)     10      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1522 ( 5F2)      . 2 2 1 1 . . . (78)      5      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1561 ( 619)      . . 2 1 1 . . . (38)      3     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1600 ( 640)      . . 2 1 1 1 . . (3C)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1604 ( 644)      4 . 2 1 1 1 . . (BC)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1680 ( 690)      4 3 2 1 1 1 . . (FC)      6      5      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1841 ( 731)      4 3 2 . 1 1 . . (EC)      5     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1965 ( 7AD)      . 3 2 . 1 1 . . (6C)      4      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2047 ( 7FF)      5 3 2 . 1 1 . . (EC)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2080 ( 820)      5 3 2 2 1 1 . . (FC)      6      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2081 ( 821)      5 3 . 2 1 1 . . (DC)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2133 ( 855)      5 3 . 2 1 1 1 . (DE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2201 ( 899)      5 . . 2 1 1 1 . (9E)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2240 ( 8C0)      5 . 3 2 1 1 1 . (BE)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2320 ( 910)      5 4 3 2 1 1 1 . (FE)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2408 ( 968)      . 4 3 2 1 1 1 . (7E)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2477 ( 9AD)      . 4 3 2 . 1 1 . (76)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2490 ( 9BA)      6 4 3 2 . 1 1 . (F6)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2799 ( AEF)      6 4 3 2 2 1 1 . (FE)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2841 ( B19)      6 . 3 2 2 1 1 . (BE)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2850 ( B22)      . . 3 2 2 1 1 . (3E)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2932 ( B74)      7 . 3 2 2 1 1 . (BE)      6      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2934 ( B76)      7 . . 2 2 1 1 . (9E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2960 ( B90)      7 5 . 2 2 1 1 . (DE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3093 ( C15)      7 5 4 2 2 1 1 . (FE)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3121 ( C31)      7 5 4 . 2 1 1 . (EE)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3200 ( C80)      7 5 4 . 2 1 1 1 (EF)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3293 ( CDD)      . 5 4 . 2 1 1 1 (6F)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3360 ( D20)      . 5 4 3 2 1 1 1 (7F)      7      7      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3375 ( D2F)      8 5 4 3 2 1 1 1 (FF)      8      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3481 ( D99)      8 . 4 3 2 1 1 1 (BF)      7     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3600 ( E10)      8 6 4 3 2 1 1 1 (FF)      8      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3681 ( E61)      8 6 4 3 2 . 1 1 (FB)      7     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3736 ( E98)      . 6 4 3 2 . 1 1 (7B)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3787 ( ECB)      . 6 . 3 2 . 1 1 (5B)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3818 ( EEA)      9 6 . 3 2 . 1 1 (DB)      6      4      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3946 ( F6A)      9 6 5 3 2 . 1 1 (FB)      7     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4121 (1019)      9 . 5 3 2 . 1 1 (BB)      6      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4160 (1040)      9 . 5 3 2 2 1 1 (BF)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4178 (1052)      . . 5 3 2 2 1 1 (3F)      6      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4200 (1068)      . . 5 3 . 2 1 1 (37)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4240 (1090)      . 7 5 3 . 2 1 1 (77)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4401 (1131)      . 7 5 . . 2 1 1 (67)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4522 (11AA)      . 7 5 . 3 2 1 1 (6F)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4640 (1220)      . 7 5 4 3 2 1 1 (7F)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4641 (1221)      . 7 . 4 3 2 1 1 (5F)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4761 (1299)      . . . 4 3 2 1 1 (1F)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4800 (12C0)      . . 6 4 3 2 1 1 (3F)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4880 (1310)      . 8 6 4 3 2 1 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4907 (132B)      . 8 6 4 3 2 . 1 (7D)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5401 (1519)      . . 6 4 3 2 . 1 (3D)      5      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5494 (1576)      . . . 4 3 2 . 1 (1D)      4     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5520 (1590)      . 9 . 4 3 2 . 1 (5D)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5546 (15AA)      . 9 . 4 3 2 2 1 (5F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5653 (1615)      . 9 7 4 3 2 2 1 (7F)      7      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5681 (1631)      . 9 7 . 3 2 2 1 (6F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5920 (1720)      . 9 7 5 3 2 2 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5922 (1722)      . 9 7 5 . 2 2 1 (77)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6041 (1799)      . . 7 5 . 2 2 1 (37)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6241 (1861)      . . 7 5 . . 2 1 (33)      4     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6244 (1864)      . . 7 5 4 . 2 1 (3B)      5      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6347 (18CB)      . . . 5 4 . 2 1 (1B)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6506 (196A)      . . 8 5 4 . 2 1 (3B)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6720 (1A40)      . . 8 5 4 3 2 1 (3F)      6      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6961 (1B31)      . . 8 . 4 3 2 1 (2F)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7200 (1C20)      . . 8 6 4 3 2 1 (3F)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7201 (1C21)      . . . 6 4 3 2 1 (1F)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7360 (1CC0)      . . 9 6 4 3 2 1 (3F)      6      5      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7361 (1CC1)      . . 9 6 4 3 2 . (3E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7645 (1DDD)      . . 9 6 . 3 2 . (36)      4      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7967 (1F1F)      . . 9 6 5 3 2 . (3E)      5     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8054 (1F76)      . . . 6 5 3 2 . (1E)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8241 (2031)      . . . . 5 3 2 . ( E)      3      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8320 (2080)      . . . . 5 3 2 2 ( F)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8321 (2081)      . . . . 5 3 . 2 ( D)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8480 (2120)      . . . 7 5 3 . 2 (1D)      4      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8801 (2261)      . . . 7 5 . . 2 (19)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8960 (2300)      . . . 7 5 . 3 2 (1B)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9280 (2440)      . . . 7 5 4 3 2 (1F)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9368 (2498)      . . . 7 . 4 3 2 (17)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9521 (2531)      . . . . . 4 3 2 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9690 (25DA)      . . . . 6 4 3 2 ( F)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9760 (2620)      . . . 8 6 4 3 2 (1F)      5     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  10801 (2A31)      . . . . 6 4 3 2 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11040 (2B20)      . . . 9 6 4 3 2 (1F)      5      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11090 (2B52)      . . . 9 . 4 3 2 (17)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11361 (2C61)      . . . 9 . . 3 2 (13)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11412 (2C94)      . . . 9 7 . 3 2 (1B)      4      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11734 (2DD6)      . . . 9 7 . . 2 (19)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11840 (2E40)      . . . 9 7 5 . 2 (1D)      4     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12081 (2F31)      . . . . 7 5 . 2 ( D)      3      6      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12373 (3055)      . . . . 7 5 4 2 ( F)      4     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12481 (30C1)      . . . . 7 5 4 . ( E)      3     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12813 (320D)      . . . . . 5 4 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13135 (334F)      . . . . 8 5 4 . ( E)      3      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13440 (3480)      . . . . 8 5 4 3 ( F)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13921 (3661)      . . . . 8 . 4 3 ( B)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14400 (3840)      . . . . 8 6 4 3 ( F)      4      8      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14536 (38C8)      . . . . . 6 4 3 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14858 (3A0A)      . . . . 9 6 4 3 ( F)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15147 (3B2B)      . . . . 9 6 . 3 ( D)      3      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15786 (3DAA)      . . . . 9 6 5 3 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16258 (3F82)      . . . . . 6 5 3 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16481 (4061)      . . . . . . 5 3 ( 3)      2     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16960 (4240)      . . . . . 7 5 3 ( 7)      3      7      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17601 (44C1)      . . . . . 7 5 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18560 (4880)      . . . . . 7 5 4 ( 7)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18561 (4881)      . . . . . 7 . 4 ( 5)      2     11      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19041 (4A61)      . . . . . . . 4 ( 1)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19200 (4B00)      . . . . . . 6 4 ( 3)      2      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19520 (4C40)      . . . . . 8 6 4 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  21601 (5461)      . . . . . . 6 4 ( 3)      2     10      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  21974 (55D6)      . . . . . . . 4 ( 1)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22080 (5640)      . . . . . 9 . 4 ( 5)      2     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22613 (5855)      . . . . . 9 7 4 ( 7)      3      8      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22721 (58C1)      . . . . . 9 7 . ( 6)      2     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23680 (5C80)      . . . . . 9 7 5 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24161 (5E61)      . . . . . . 7 5 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  25387 (632B)      . . . . . . . 5 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  26026 (65AA)      . . . . . . 8 5 ( 3)      2      9      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  27841 (6CC1)      . . . . . . 8 . ( 2)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28800 (7080)      . . . . . . 8 6 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28801 (7081)      . . . . . . . 6 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29440 (7300)      . . . . . . 9 6 ( 3)      2     10      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32214 (7DD6)      . . . . . . . 6 ( 1)      1     12      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32961 (80C1)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  33920 (8480)      . . . . . . . 7 ( 1)      1     11      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  38081 (94C1)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  39040 (9880)      . . . . . . . 8 ( 1)      1     12      222                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  43201 (A8C1)      . . . . . . . . ( 0)      0     14      231                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  44160 (AC80)      . . . . . . . 9 ( 1)      1     13      229                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  48321 (BCC1)      . . . . . . . . ( 0)      0     14      238                (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
                                      ;#       |                                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#       |                                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#       1                                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#       9                                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#+------0------+                                                                (SCI_BD_LOW_PULSE_TREE)
                                      ;#|             |                                                                (SCI_BD_LOW_PULSE_TREE)
                                      ;#|             |                                                                (SCI_BD_LOW_PULSE_TREE)
                                      ;#1             2                                                                (SCI_BD_LOW_PULSE_TREE)
                                      ;#1             7                                                                (SCI_BD_LOW_PULSE_TREE)
                                      ;#4 +-----------D-----------+                                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                       |                                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                       |                                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#  2                       4                                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#  1                       1                                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#  5  +--------------------0---------------------+                              (SCI_BD_LOW_PULSE_TREE)
                                      ;#     |                                          |                              (SCI_BD_LOW_PULSE_TREE)
                                      ;#     |                                          |                              (SCI_BD_LOW_PULSE_TREE)
                                      ;#     3                                          E                              (SCI_BD_LOW_PULSE_TREE)
                                      ;#     2                                          E                              (SCI_BD_LOW_PULSE_TREE)
                                      ;#    +0+             +---------------------------A---------------------------+  (SCI_BD_LOW_PULSE_TREE)
                                      ;#    | |             |                                                       |  (SCI_BD_LOW_PULSE_TREE)
                                      ;#    | |             |                                                       1  (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2 3             6                                                       C  (SCI_BD_LOW_PULSE_TREE)
                                      ;#    C 9             9                                                       C  (SCI_BD_LOW_PULSE_TREE)
                                      ;#    F 9  +----------0-----------+                          +----------------0----------------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#         |                      |                          |                                 | (SCI_BD_LOW_PULSE_TREE)
                                      ;#         |                      |                          1                                 2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#         4                      B                          5                                 F (SCI_BD_LOW_PULSE_TREE)
                                      ;#         3                      7                          1                                 3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        +8-+             +------4------+            +------9-------+               +---------1----------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        |  |             |             |            |              |               |                    | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        |  |             |             |            1              1               2                    4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4  4             8             D            1              7               4                    2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        3  C             C             2            A              9               4                    4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4 +B-+       +---0---+      +--0-+       +--A---+      +---9---+       +---0---+         +------0------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#          |  |       |       |      |    |       |      |      |       |       |       |         |             | (SCI_BD_LOW_PULSE_TREE)
                                      ;#          |  |       |       |      |    |       1      1      1       1       2       2         3             5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#          4  5       8       9      C    E       0      2      6       A       0       B         8             8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#          8  F       2       B      3    1       5      C      1       4       3       2         4             5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#          A +2-+   +-0-+   +-A-+   +1-+ +0-+   +-2-+   +0-+  +-5-+   +-0-+   +-1-+   +-0-+    +--0-+       +---5----+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#            |  |   |   |   |   |   |  | |  |   |   |   |  |  |   |   |   |   |   |   |   |    |    |       |        | (SCI_BD_LOW_PULSE_TREE)
                                      ;#            |  |   |   |   |   |   |  | |  |   1   1   1  1  1   1   1   1   1   2   2   2    3    3       4        6 (SCI_BD_LOW_PULSE_TREE)
                                      ;#            5  6   7   8   9   B   B  C D  E   0   0   2  3  5   7   8   C   D   1   5   C    3    B       B        5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#            6  4   A   5   6   1   9  8 2  9   1   9   2  1  9   2   6   2   D   2   D   9    4    2       0        A (SCI_BD_LOW_PULSE_TREE)
                                      ;#            A +0+ +D+ +5+ +8+ +9+ +0+ 0 F +8+ +9+ +0+ +1+ 0 +0+ +0+ +4+ +0+ +D+ +0+ +A+ +4+  +F-+ +B-+   +-0-+   +--A--+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#              | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |  |  | |  |   |   |   |     | (SCI_BD_LOW_PULSE_TREE)
                                      ;#              | | | | | | | | | | | | | | | | | 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2  3  3 3  3   4   5   5     7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#              6 6 7 7 8 8 9 9 A B B C C D E E F 0 0 1 2 2 3 5 5 6 7 8 9 B C C F 0 3 4 6 B E  0  4 A  F   8   4   C     3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#              1 4 3 F 2 9 1 A E 2 7 1 D 9 6 C 6 4 6 3 2 9 2 7 A 3 2 6 6 3 2 C 1 8 0 9 2 5 4  C  8 0  8   8   6   8     0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#              9 4 1 F 1 9 0 D F 2 6 5 D 9 1 B A 0 8 1 0 9 B 6 A 1 2 1 A 1 1 1 F 0 0 8 0 2 0 +1+ 0 A +2+ +0+ +1+ +0+  +-0-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                      |       | | | | | | | | | | | | | | | | | | |  |   | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                      1       1 2 2 2 2 2 2 3 3 3 3 3 4 4 4 4 5 5 5  7   8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                      8       F 0 2 5 A C D 0 2 6 8 D 0 4 8 C 6 8 E  0   4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                      C       7 8 6 3 3 6 D 5 0 6 C A 6 C 8 4 4 C 6  8   8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                      B       6 1 1 1 1 1 6 5 D 1 8 A 1 1 1 0 0 1 1 +0+ +0-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                          |   |   | | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                          4   5   6 6 7 7  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                          A   5   3 C 0 D  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                          6   D   2 C 8 D  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                          1   6   B 1 1 6 +0-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                        | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                        8 9  A (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                        0 4  C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                        C C  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                        1 1 +0+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                            | | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                            A B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                            8 C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                            C C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                                            1 1 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
00F804 0FF804 01 90 C0 C0 F8 12       N__190          DW      $0190   $C0C0   N__27D          ;if pulse >= 400 then check N__27D else check N__114 (SCI_BD_LOW_PULSE_TREE)
00F80A 0FF80A 01 14 80 80 00 00       N__114          DW      $0114   $8080   $0000           ;if pulse >= 276 then the result is 80 else the result is 00 (SCI_BD_LOW_PULSE_TREE)
00F810 0FF810 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F812 0FF812 02 7D 60 60 F8 20       N__27D          DW      $027D   $6060   N__410          ;if pulse >= 637 then check N__410 else check N__215 (SCI_BD_LOW_PULSE_TREE)
00F818 0FF818 02 15 E0 E0 00 00       N__215          DW      $0215   $E0E0   $0000           ;if pulse >= 533 then the result is E0 else the result is C0 (SCI_BD_LOW_PULSE_TREE)
00F81E 0FF81E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F820 0FF820 04 10 F0 F0 F8 3C       N__410          DW      $0410   $F0F0   N__EEA          ;if pulse >= 1040 then check N__EEA else check N__320 (SCI_BD_LOW_PULSE_TREE)
00F826 0FF826 03 20 F0 F0 F8 34       N__320          DW      $0320   $F0F0   N__399          ;if pulse >= 800 then check N__399 else check N__2CF (SCI_BD_LOW_PULSE_TREE)
00F82C 0FF82C 02 CF E0 E0 00 00       N__2CF          DW      $02CF   $E0E0   $0000           ;if pulse >= 719 then the result is E0 else the result is 60 (SCI_BD_LOW_PULSE_TREE)
00F832 0FF832 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F834 0FF834 03 99 B0 B0 00 00       N__399          DW      $0399   $B0B0   $0000           ;if pulse >= 921 then the result is B0 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
00F83A 0FF83A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F83C 0FF83C 0E EA DB DB F9 56       N__EEA          DW      $0EEA   $DBDB   N_1CC0          ;if pulse >= 3818 then check N_1CC0 else check N__690 (SCI_BD_LOW_PULSE_TREE)
00F842 0FF842 06 90 FC FC F8 88       N__690          DW      $0690   $FCFC   N__B74          ;if pulse >= 1680 then check N__B74 else check N__438 (SCI_BD_LOW_PULSE_TREE)
00F848 0FF848 04 38 78 78 F8 56       N__438          DW      $0438   $7878   N__4CB          ;if pulse >= 1080 then check N__4CB else check N__434 (SCI_BD_LOW_PULSE_TREE)
00F84E 0FF84E 04 34 F8 F8 00 00       N__434          DW      $0434   $F8F8   $0000           ;if pulse >= 1076 then the result is F8 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
00F854 0FF854 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F856 0FF856 04 CB D8 D8 F8 64       N__4CB          DW      $04CB   $D8D8   N__5F2          ;if pulse >= 1227 then check N__5F2 else check N__48A (SCI_BD_LOW_PULSE_TREE)
00F85C 0FF85C 04 8A F8 F8 00 00       N__48A          DW      $048A   $F8F8   $0000           ;if pulse >= 1162 then the result is F8 else the result is 78 (SCI_BD_LOW_PULSE_TREE)
00F862 0FF862 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F864 0FF864 05 F2 78 78 F8 72       N__5F2          DW      $05F2   $7878   N__640          ;if pulse >= 1522 then check N__640 else check N__56A (SCI_BD_LOW_PULSE_TREE)
00F86A 0FF86A 05 6A F8 F8 00 00       N__56A          DW      $056A   $F8F8   $0000           ;if pulse >= 1386 then the result is F8 else the result is D8 (SCI_BD_LOW_PULSE_TREE)
00F870 0FF870 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F872 0FF872 06 40 3C 3C F8 80       N__640          DW      $0640   $3C3C   N__644          ;if pulse >= 1600 then check N__644 else check N__619 (SCI_BD_LOW_PULSE_TREE)
00F878 0FF878 06 19 38 38 00 00       N__619          DW      $0619   $3838   $0000           ;if pulse >= 1561 then the result is 38 else the result is 78 (SCI_BD_LOW_PULSE_TREE)
00F87E 0FF87E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F880 0FF880 06 44 BC BC 00 00       N__644          DW      $0644   $BCBC   $0000           ;if pulse >= 1604 then the result is BC else the result is 3C (SCI_BD_LOW_PULSE_TREE)
00F886 0FF886 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F888 0FF888 0B 74 BE BE F8 F8       N__B74          DW      $0B74   $BEBE   N__D20          ;if pulse >= 2932 then check N__D20 else check N__8C0 (SCI_BD_LOW_PULSE_TREE)
00F88E 0FF88E 08 C0 BE BE F8 C6       N__8C0          DW      $08C0   $BEBE   N__9BA          ;if pulse >= 2240 then check N__9BA else check N__820 (SCI_BD_LOW_PULSE_TREE)
00F894 0FF894 08 20 FC FC F8 B0       N__820          DW      $0820   $FCFC   N__855          ;if pulse >= 2080 then check N__855 else check N__7AD (SCI_BD_LOW_PULSE_TREE)
00F89A 0FF89A 07 AD 6C 6C F8 A8       N__7AD          DW      $07AD   $6C6C   N__7FF          ;if pulse >= 1965 then check N__7FF else check N__731 (SCI_BD_LOW_PULSE_TREE)
00F8A0 0FF8A0 07 31 EC EC 00 00       N__731          DW      $0731   $ECEC   $0000           ;if pulse >= 1841 then the result is EC else the result is FC (SCI_BD_LOW_PULSE_TREE)
00F8A6 0FF8A6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8A8 0FF8A8 07 FF EC EC 00 00       N__7FF          DW      $07FF   $ECEC   $0000           ;if pulse >= 2047 then the result is EC else the result is 6C (SCI_BD_LOW_PULSE_TREE)
00F8AE 0FF8AE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8B0 0FF8B0 08 55 DE DE F8 BE       N__855          DW      $0855   $DEDE   N__899          ;if pulse >= 2133 then check N__899 else check N__821 (SCI_BD_LOW_PULSE_TREE)
00F8B6 0FF8B6 08 21 DC DC 00 00       N__821          DW      $0821   $DCDC   $0000           ;if pulse >= 2081 then the result is DC else the result is FC (SCI_BD_LOW_PULSE_TREE)
00F8BC 0FF8BC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8BE 0FF8BE 08 99 9E 9E 00 00       N__899          DW      $0899   $9E9E   $0000           ;if pulse >= 2201 then the result is 9E else the result is DE (SCI_BD_LOW_PULSE_TREE)
00F8C4 0FF8C4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8C6 0FF8C6 09 BA F6 F6 F8 E2       N__9BA          DW      $09BA   $F6F6   N__B19          ;if pulse >= 2490 then check N__B19 else check N__968 (SCI_BD_LOW_PULSE_TREE)
00F8CC 0FF8CC 09 68 7E 7E F8 DA       N__968          DW      $0968   $7E7E   N__9AD          ;if pulse >= 2408 then check N__9AD else check N__910 (SCI_BD_LOW_PULSE_TREE)
00F8D2 0FF8D2 09 10 FE FE 00 00       N__910          DW      $0910   $FEFE   $0000           ;if pulse >= 2320 then the result is FE else the result is BE (SCI_BD_LOW_PULSE_TREE)
00F8D8 0FF8D8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8DA 0FF8DA 09 AD 76 76 00 00       N__9AD          DW      $09AD   $7676   $0000           ;if pulse >= 2477 then the result is 76 else the result is 7E (SCI_BD_LOW_PULSE_TREE)
00F8E0 0FF8E0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8E2 0FF8E2 0B 19 BE BE F8 F0       N__B19          DW      $0B19   $BEBE   N__B22          ;if pulse >= 2841 then check N__B22 else check N__AEF (SCI_BD_LOW_PULSE_TREE)
00F8E8 0FF8E8 0A EF FE FE 00 00       N__AEF          DW      $0AEF   $FEFE   $0000           ;if pulse >= 2799 then the result is FE else the result is F6 (SCI_BD_LOW_PULSE_TREE)
00F8EE 0FF8EE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8F0 0FF8F0 0B 22 3E 3E 00 00       N__B22          DW      $0B22   $3E3E   $0000           ;if pulse >= 2850 then the result is 3E else the result is BE (SCI_BD_LOW_PULSE_TREE)
00F8F6 0FF8F6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8F8 0FF8F8 0D 20 7F 7F F9 2A       N__D20          DW      $0D20   $7F7F   N__E10          ;if pulse >= 3360 then check N__E10 else check N__C31 (SCI_BD_LOW_PULSE_TREE)
00F8FE 0FF8FE 0C 31 EE EE F9 1A       N__C31          DW      $0C31   $EEEE   N__C80          ;if pulse >= 3121 then check N__C80 else check N__B90 (SCI_BD_LOW_PULSE_TREE)
00F904 0FF904 0B 90 DE DE F9 12       N__B90          DW      $0B90   $DEDE   N__C15          ;if pulse >= 2960 then check N__C15 else check N__B76 (SCI_BD_LOW_PULSE_TREE)
00F90A 0FF90A 0B 76 9E 9E 00 00       N__B76          DW      $0B76   $9E9E   $0000           ;if pulse >= 2934 then the result is 9E else the result is BE (SCI_BD_LOW_PULSE_TREE)
00F910 0FF910 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F912 0FF912 0C 15 FE FE 00 00       N__C15          DW      $0C15   $FEFE   $0000           ;if pulse >= 3093 then the result is FE else the result is DE (SCI_BD_LOW_PULSE_TREE)
00F918 0FF918 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F91A 0FF91A 0C 80 EF EF F9 22       N__C80          DW      $0C80   $EFEF   N__CDD          ;if pulse >= 3200 then check N__CDD else the result is EE (SCI_BD_LOW_PULSE_TREE)
00F920 0FF920 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F922 0FF922 0C DD 6F 6F 00 00       N__CDD          DW      $0CDD   $6F6F   $0000           ;if pulse >= 3293 then the result is 6F else the result is EF (SCI_BD_LOW_PULSE_TREE)
00F928 0FF928 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F92A 0FF92A 0E 10 FF FF F9 40       N__E10          DW      $0E10   $FFFF   N__E98          ;if pulse >= 3600 then check N__E98 else check N__D2F (SCI_BD_LOW_PULSE_TREE)
00F930 0FF930 0D 2F FF FF F9 38       N__D2F          DW      $0D2F   $FFFF   N__D99          ;if pulse >= 3375 then check N__D99 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F936 0FF936 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F938 0FF938 0D 99 BF BF 00 00       N__D99          DW      $0D99   $BFBF   $0000           ;if pulse >= 3481 then the result is BF else the result is FF (SCI_BD_LOW_PULSE_TREE)
00F93E 0FF93E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F940 0FF940 0E 98 7B 7B F9 4E       N__E98          DW      $0E98   $7B7B   N__ECB          ;if pulse >= 3736 then check N__ECB else check N__E61 (SCI_BD_LOW_PULSE_TREE)
00F946 0FF946 0E 61 FB FB 00 00       N__E61          DW      $0E61   $FBFB   $0000           ;if pulse >= 3681 then the result is FB else the result is FF (SCI_BD_LOW_PULSE_TREE)
00F94C 0FF94C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F94E 0FF94E 0E CB 5B 5B 00 00       N__ECB          DW      $0ECB   $5B5B   $0000           ;if pulse >= 3787 then the result is 5B else the result is 7B (SCI_BD_LOW_PULSE_TREE)
00F954 0FF954 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F956 0FF956 1C C0 3F 3F FA 36       N_1CC0          DW      $1CC0   $3F3F   N_2F31          ;if pulse >= 7360 then check N_2F31 else check N_1519 (SCI_BD_LOW_PULSE_TREE)
00F95C 0FF95C 15 19 3D 3D F9 C6       N_1519          DW      $1519   $3D3D   N_1799          ;if pulse >= 5401 then check N_1799 else check N_11AA (SCI_BD_LOW_PULSE_TREE)
00F962 0FF962 11 AA 6F 6F F9 9A       N_11AA          DW      $11AA   $6F6F   N_12C0          ;if pulse >= 4522 then check N_12C0 else check N_1052 (SCI_BD_LOW_PULSE_TREE)
00F968 0FF968 10 52 3F 3F F9 84       N_1052          DW      $1052   $3F3F   N_1090          ;if pulse >= 4178 then check N_1090 else check N_1019 (SCI_BD_LOW_PULSE_TREE)
00F96E 0FF96E 10 19 BB BB F9 7C       N_1019          DW      $1019   $BBBB   N_1040          ;if pulse >= 4121 then check N_1040 else check N__F6A (SCI_BD_LOW_PULSE_TREE)
00F974 0FF974 0F 6A FB FB 00 00       N__F6A          DW      $0F6A   $FBFB   $0000           ;if pulse >= 3946 then the result is FB else the result is DB (SCI_BD_LOW_PULSE_TREE)
00F97A 0FF97A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F97C 0FF97C 10 40 BF BF 00 00       N_1040          DW      $1040   $BFBF   $0000           ;if pulse >= 4160 then the result is BF else the result is BB (SCI_BD_LOW_PULSE_TREE)
00F982 0FF982 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F984 0FF984 10 90 77 77 F9 92       N_1090          DW      $1090   $7777   N_1131          ;if pulse >= 4240 then check N_1131 else check N_1068 (SCI_BD_LOW_PULSE_TREE)
00F98A 0FF98A 10 68 37 37 00 00       N_1068          DW      $1068   $3737   $0000           ;if pulse >= 4200 then the result is 37 else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F990 0FF990 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F992 0FF992 11 31 67 67 00 00       N_1131          DW      $1131   $6767   $0000           ;if pulse >= 4401 then the result is 67 else the result is 77 (SCI_BD_LOW_PULSE_TREE)
00F998 0FF998 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F99A 0FF99A 12 C0 3F 3F F9 B6       N_12C0          DW      $12C0   $3F3F   N_1310          ;if pulse >= 4800 then check N_1310 else check N_1221 (SCI_BD_LOW_PULSE_TREE)
00F9A0 0FF9A0 12 21 5F 5F F9 AE       N_1221          DW      $1221   $5F5F   N_1299          ;if pulse >= 4641 then check N_1299 else check N_1220 (SCI_BD_LOW_PULSE_TREE)
00F9A6 0FF9A6 12 20 7F 7F 00 00       N_1220          DW      $1220   $7F7F   $0000           ;if pulse >= 4640 then the result is 7F else the result is 6F (SCI_BD_LOW_PULSE_TREE)
00F9AC 0FF9AC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9AE 0FF9AE 12 99 1F 1F 00 00       N_1299          DW      $1299   $1F1F   $0000           ;if pulse >= 4761 then the result is 1F else the result is 5F (SCI_BD_LOW_PULSE_TREE)
00F9B4 0FF9B4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9B6 0FF9B6 13 10 7F 7F F9 BE       N_1310          DW      $1310   $7F7F   N_132B          ;if pulse >= 4880 then check N_132B else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F9BC 0FF9BC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9BE 0FF9BE 13 2B 7D 7D 00 00       N_132B          DW      $132B   $7D7D   $0000           ;if pulse >= 4907 then the result is 7D else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F9C4 0FF9C4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9C6 0FF9C6 17 99 37 37 F9 FE       N_1799          DW      $1799   $3737   N_1A40          ;if pulse >= 6041 then check N_1A40 else check N_1615 (SCI_BD_LOW_PULSE_TREE)
00F9CC 0FF9CC 16 15 7F 7F F9 E8       N_1615          DW      $1615   $7F7F   N_1720          ;if pulse >= 5653 then check N_1720 else check N_1590 (SCI_BD_LOW_PULSE_TREE)
00F9D2 0FF9D2 15 90 5D 5D F9 E0       N_1590          DW      $1590   $5D5D   N_15AA          ;if pulse >= 5520 then check N_15AA else check N_1576 (SCI_BD_LOW_PULSE_TREE)
00F9D8 0FF9D8 15 76 1D 1D 00 00       N_1576          DW      $1576   $1D1D   $0000           ;if pulse >= 5494 then the result is 1D else the result is 3D (SCI_BD_LOW_PULSE_TREE)
00F9DE 0FF9DE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9E0 0FF9E0 15 AA 5F 5F 00 00       N_15AA          DW      $15AA   $5F5F   $0000           ;if pulse >= 5546 then the result is 5F else the result is 5D (SCI_BD_LOW_PULSE_TREE)
00F9E6 0FF9E6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9E8 0FF9E8 17 20 7F 7F F9 F6       N_1720          DW      $1720   $7F7F   N_1722          ;if pulse >= 5920 then check N_1722 else check N_1631 (SCI_BD_LOW_PULSE_TREE)
00F9EE 0FF9EE 16 31 6F 6F 00 00       N_1631          DW      $1631   $6F6F   $0000           ;if pulse >= 5681 then the result is 6F else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F9F4 0FF9F4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9F6 0FF9F6 17 22 77 77 00 00       N_1722          DW      $1722   $7777   $0000           ;if pulse >= 5922 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F9FC 0FF9FC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F9FE 0FF9FE 1A 40 3F 3F FA 20       N_1A40          DW      $1A40   $3F3F   N_1C20          ;if pulse >= 6720 then check N_1C20 else check N_1864 (SCI_BD_LOW_PULSE_TREE)
00FA04 0FFA04 18 64 3B 3B FA 12       N_1864          DW      $1864   $3B3B   N_196A          ;if pulse >= 6244 then check N_196A else check N_1861 (SCI_BD_LOW_PULSE_TREE)
00FA0A 0FFA0A 18 61 33 33 00 00       N_1861          DW      $1861   $3333   $0000           ;if pulse >= 6241 then the result is 33 else the result is 37 (SCI_BD_LOW_PULSE_TREE)
00FA10 0FFA10 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA12 0FFA12 19 6A 3B 3B 00 00       N_196A          DW      $196A   $3B3B   $0000           ;if pulse >= 6506 then the result is 3B else check N_18CB (SCI_BD_LOW_PULSE_TREE)
00FA18 0FFA18 18 CB 1B 1B 00 00       N_18CB          DW      $18CB   $1B1B   $0000           ;if pulse >= 6347 then the result is 1B else the result is 3B (SCI_BD_LOW_PULSE_TREE)
00FA1E 0FFA1E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA20 0FFA20 1C 20 3F 3F FA 2E       N_1C20          DW      $1C20   $3F3F   N_1C21          ;if pulse >= 7200 then check N_1C21 else check N_1B31 (SCI_BD_LOW_PULSE_TREE)
00FA26 0FFA26 1B 31 2F 2F 00 00       N_1B31          DW      $1B31   $2F2F   $0000           ;if pulse >= 6961 then the result is 2F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00FA2C 0FFA2C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA2E 0FFA2E 1C 21 1F 1F 00 00       N_1C21          DW      $1C21   $1F1F   $0000           ;if pulse >= 7201 then the result is 1F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00FA34 0FFA34 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA36 0FFA36 2F 31 0D 0D FA DA       N_2F31          DW      $2F31   $0D0D   N_4240          ;if pulse >= 12081 then check N_4240 else check N_2440 (SCI_BD_LOW_PULSE_TREE)
00FA3C 0FFA3C 24 40 1F 1F FA 8A       N_2440          DW      $2440   $1F1F   N_2B20          ;if pulse >= 9280 then check N_2B20 else check N_2031 (SCI_BD_LOW_PULSE_TREE)
00FA42 0FFA42 20 31 0E 0E FA 66       N_2031          DW      $2031   $0E0E   N_2120          ;if pulse >= 8241 then check N_2120 else check N_1DDD (SCI_BD_LOW_PULSE_TREE)
00FA48 0FFA48 1D DD 36 36 FA 56       N_1DDD          DW      $1DDD   $3636   N_1F1F          ;if pulse >= 7645 then check N_1F1F else check N_1CC1 (SCI_BD_LOW_PULSE_TREE)
00FA4E 0FFA4E 1C C1 3E 3E 00 00       N_1CC1          DW      $1CC1   $3E3E   $0000           ;if pulse >= 7361 then the result is 3E else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00FA54 0FFA54 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA56 0FFA56 1F 1F 3E 3E FA 5E       N_1F1F          DW      $1F1F   $3E3E   N_1F76          ;if pulse >= 7967 then check N_1F76 else the result is 36 (SCI_BD_LOW_PULSE_TREE)
00FA5C 0FFA5C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA5E 0FFA5E 1F 76 1E 1E 00 00       N_1F76          DW      $1F76   $1E1E   $0000           ;if pulse >= 8054 then the result is 1E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
00FA64 0FFA64 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA66 0FFA66 21 20 1D 1D FA 7C       N_2120          DW      $2120   $1D1D   N_2300          ;if pulse >= 8480 then check N_2300 else check N_2080 (SCI_BD_LOW_PULSE_TREE)
00FA6C 0FFA6C 20 80 0F 0F FA 74       N_2080          DW      $2080   $0F0F   N_2081          ;if pulse >= 8320 then check N_2081 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
00FA72 0FFA72 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA74 0FFA74 20 81 0D 0D 00 00       N_2081          DW      $2081   $0D0D   $0000           ;if pulse >= 8321 then the result is 0D else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00FA7A 0FFA7A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA7C 0FFA7C 23 00 1B 1B 00 00       N_2300          DW      $2300   $1B1B   $0000           ;if pulse >= 8960 then the result is 1B else check N_2261 (SCI_BD_LOW_PULSE_TREE)
00FA82 0FFA82 22 61 19 19 00 00       N_2261          DW      $2261   $1919   $0000           ;if pulse >= 8801 then the result is 19 else the result is 1D (SCI_BD_LOW_PULSE_TREE)
00FA88 0FFA88 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA8A 0FFA8A 2B 20 1F 1F FA B6       N_2B20          DW      $2B20   $1F1F   N_2C94          ;if pulse >= 11040 then check N_2C94 else check N_25DA (SCI_BD_LOW_PULSE_TREE)
00FA90 0FFA90 25 DA 0F 0F FA A6       N_25DA          DW      $25DA   $0F0F   N_2620          ;if pulse >= 9690 then check N_2620 else check N_2498 (SCI_BD_LOW_PULSE_TREE)
00FA96 0FFA96 24 98 17 17 FA 9E       N_2498          DW      $2498   $1717   N_2531          ;if pulse >= 9368 then check N_2531 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00FA9C 0FFA9C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FA9E 0FFA9E 25 31 07 07 00 00       N_2531          DW      $2531   $0707   $0000           ;if pulse >= 9521 then the result is 07 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
00FAA4 0FFAA4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FAA6 0FFAA6 26 20 1F 1F FA AE       N_2620          DW      $2620   $1F1F   N_2A31          ;if pulse >= 9760 then check N_2A31 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00FAAC 0FFAAC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FAAE 0FFAAE 2A 31 0F 0F 00 00       N_2A31          DW      $2A31   $0F0F   $0000           ;if pulse >= 10801 then the result is 0F else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00FAB4 0FFAB4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FAB6 0FFAB6 2C 94 1B 1B FA CC       N_2C94          DW      $2C94   $1B1B   N_2E40          ;if pulse >= 11412 then check N_2E40 else check N_2B52 (SCI_BD_LOW_PULSE_TREE)
00FABC 0FFABC 2B 52 17 17 FA C4       N_2B52          DW      $2B52   $1717   N_2C61          ;if pulse >= 11090 then check N_2C61 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00FAC2 0FFAC2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FAC4 0FFAC4 2C 61 13 13 00 00       N_2C61          DW      $2C61   $1313   $0000           ;if pulse >= 11361 then the result is 13 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
00FACA 0FFACA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FACC 0FFACC 2E 40 1D 1D 00 00       N_2E40          DW      $2E40   $1D1D   $0000           ;if pulse >= 11840 then the result is 1D else check N_2DD6 (SCI_BD_LOW_PULSE_TREE)
00FAD2 0FFAD2 2D D6 19 19 00 00       N_2DD6          DW      $2DD6   $1919   $0000           ;if pulse >= 11734 then the result is 19 else the result is 1B (SCI_BD_LOW_PULSE_TREE)
00FAD8 0FFAD8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FADA 0FFADA 42 40 07 07 FB 3C       N_4240          DW      $4240   $0707   N_5855          ;if pulse >= 16960 then check N_5855 else check N_3840 (SCI_BD_LOW_PULSE_TREE)
00FAE0 0FFAE0 38 40 0F 0F FB 12       N_3840          DW      $3840   $0F0F   N_3B2B          ;if pulse >= 14400 then check N_3B2B else check N_334F (SCI_BD_LOW_PULSE_TREE)
00FAE6 0FFAE6 33 4F 0E 0E FB 02       N_334F          DW      $334F   $0E0E   N_3480          ;if pulse >= 13135 then check N_3480 else check N_30C1 (SCI_BD_LOW_PULSE_TREE)
00FAEC 0FFAEC 30 C1 0E 0E FA FA       N_30C1          DW      $30C1   $0E0E   N_320D          ;if pulse >= 12481 then check N_320D else check N_3055 (SCI_BD_LOW_PULSE_TREE)
00FAF2 0FFAF2 30 55 0F 0F 00 00       N_3055          DW      $3055   $0F0F   $0000           ;if pulse >= 12373 then the result is 0F else the result is 0D (SCI_BD_LOW_PULSE_TREE)
00FAF8 0FFAF8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FAFA 0FFAFA 32 0D 06 06 00 00       N_320D          DW      $320D   $0606   $0000           ;if pulse >= 12813 then the result is 06 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
00FB00 0FFB00 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB02 0FFB02 34 80 0F 0F FB 0A       N_3480          DW      $3480   $0F0F   N_3661          ;if pulse >= 13440 then check N_3661 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
00FB08 0FFB08 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB0A 0FFB0A 36 61 0B 0B 00 00       N_3661          DW      $3661   $0B0B   $0000           ;if pulse >= 13921 then the result is 0B else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00FB10 0FFB10 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB12 0FFB12 3B 2B 0D 0D FB 26       N_3B2B          DW      $3B2B   $0D0D   N_3F82          ;if pulse >= 15147 then check N_3F82 else check N_3A0A (SCI_BD_LOW_PULSE_TREE)
00FB18 0FFB18 3A 0A 0F 0F 00 00       N_3A0A          DW      $3A0A   $0F0F   $0000           ;if pulse >= 14858 then the result is 0F else check N_38C8 (SCI_BD_LOW_PULSE_TREE)
00FB1E 0FFB1E 38 C8 07 07 00 00       N_38C8          DW      $38C8   $0707   $0000           ;if pulse >= 14536 then the result is 07 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00FB24 0FFB24 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB26 0FFB26 3F 82 07 07 FB 34       N_3F82          DW      $3F82   $0707   N_4061          ;if pulse >= 16258 then check N_4061 else check N_3DAA (SCI_BD_LOW_PULSE_TREE)
00FB2C 0FFB2C 3D AA 0F 0F 00 00       N_3DAA          DW      $3DAA   $0F0F   $0000           ;if pulse >= 15786 then the result is 0F else the result is 0D (SCI_BD_LOW_PULSE_TREE)
00FB32 0FFB32 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB34 0FFB34 40 61 03 03 00 00       N_4061          DW      $4061   $0303   $0000           ;if pulse >= 16481 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00FB3A 0FFB3A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB3C 0FFB3C 58 55 07 07 FB 82       N_5855          DW      $5855   $0707   N_65AA          ;if pulse >= 22613 then check N_65AA else check N_4B00 (SCI_BD_LOW_PULSE_TREE)
00FB42 0FFB42 4B 00 03 03 FB 66       N_4B00          DW      $4B00   $0303   N_5461          ;if pulse >= 19200 then check N_5461 else check N_4880 (SCI_BD_LOW_PULSE_TREE)
00FB48 0FFB48 48 80 07 07 FB 56       N_4880          DW      $4880   $0707   N_4881          ;if pulse >= 18560 then check N_4881 else check N_44C1 (SCI_BD_LOW_PULSE_TREE)
00FB4E 0FFB4E 44 C1 06 06 00 00       N_44C1          DW      $44C1   $0606   $0000           ;if pulse >= 17601 then the result is 06 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00FB54 0FFB54 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB56 0FFB56 48 81 05 05 FB 5E       N_4881          DW      $4881   $0505   N_4A61          ;if pulse >= 18561 then check N_4A61 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00FB5C 0FFB5C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB5E 0FFB5E 4A 61 01 01 00 00       N_4A61          DW      $4A61   $0101   $0000           ;if pulse >= 19041 then the result is 01 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
00FB64 0FFB64 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB66 0FFB66 54 61 03 03 FB 74       N_5461          DW      $5461   $0303   N_5640          ;if pulse >= 21601 then check N_5640 else check N_4C40 (SCI_BD_LOW_PULSE_TREE)
00FB6C 0FFB6C 4C 40 07 07 00 00       N_4C40          DW      $4C40   $0707   $0000           ;if pulse >= 19520 then the result is 07 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00FB72 0FFB72 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB74 0FFB74 56 40 05 05 00 00       N_5640          DW      $5640   $0505   $0000           ;if pulse >= 22080 then the result is 05 else check N_55D6 (SCI_BD_LOW_PULSE_TREE)
00FB7A 0FFB7A 55 D6 01 01 00 00       N_55D6          DW      $55D6   $0101   $0000           ;if pulse >= 21974 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00FB80 0FFB80 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB82 0FFB82 65 AA 03 03 FB A6       N_65AA          DW      $65AA   $0303   N_7300          ;if pulse >= 26026 then check N_7300 else check N_5C80 (SCI_BD_LOW_PULSE_TREE)
00FB88 0FFB88 5C 80 07 07 FB 96       N_5C80          DW      $5C80   $0707   N_5E61          ;if pulse >= 23680 then check N_5E61 else check N_58C1 (SCI_BD_LOW_PULSE_TREE)
00FB8E 0FFB8E 58 C1 06 06 00 00       N_58C1          DW      $58C1   $0606   $0000           ;if pulse >= 22721 then the result is 06 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00FB94 0FFB94 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB96 0FFB96 5E 61 03 03 FB 9E       N_5E61          DW      $5E61   $0303   N_632B          ;if pulse >= 24161 then check N_632B else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00FB9C 0FFB9C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FB9E 0FFB9E 63 2B 01 01 00 00       N_632B          DW      $632B   $0101   $0000           ;if pulse >= 25387 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00FBA4 0FFBA4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBA6 0FFBA6 73 00 03 03 FB C2       N_7300          DW      $7300   $0303   N_8480          ;if pulse >= 29440 then check N_8480 else check N_7080 (SCI_BD_LOW_PULSE_TREE)
00FBAC 0FFBAC 70 80 03 03 FB BA       N_7080          DW      $7080   $0303   N_7081          ;if pulse >= 28800 then check N_7081 else check N_6CC1 (SCI_BD_LOW_PULSE_TREE)
00FBB2 0FFBB2 6C C1 02 02 00 00       N_6CC1          DW      $6CC1   $0202   $0000           ;if pulse >= 27841 then the result is 02 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00FBB8 0FFBB8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBBA 0FFBBA 70 81 01 01 00 00       N_7081          DW      $7081   $0101   $0000           ;if pulse >= 28801 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00FBC0 0FFBC0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBC2 0FFBC2 84 80 01 01 FB D8       N_8480          DW      $8480   $0101   N_9880          ;if pulse >= 33920 then check N_9880 else check N_7DD6 (SCI_BD_LOW_PULSE_TREE)
00FBC8 0FFBC8 7D D6 01 01 FB D0       N_7DD6          DW      $7DD6   $0101   N_80C1          ;if pulse >= 32214 then check N_80C1 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00FBCE 0FFBCE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBD0 0FFBD0 80 C1 00 00 00 00       N_80C1          DW      $80C1   $0000   $0000           ;if pulse >= 32961 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00FBD6 0FFBD6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBD8 0FFBD8 98 80 01 01 FB E6       N_9880          DW      $9880   $0101   N_AC80          ;if pulse >= 39040 then check N_AC80 else check N_94C1 (SCI_BD_LOW_PULSE_TREE)
00FBDE 0FFBDE 94 C1 00 00 00 00       N_94C1          DW      $94C1   $0000   $0000           ;if pulse >= 38081 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00FBE4 0FFBE4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBE6 0FFBE6 AC 80 01 01 FB F4       N_AC80          DW      $AC80   $0101   N_BCC1          ;if pulse >= 44160 then check N_BCC1 else check N_A8C1 (SCI_BD_LOW_PULSE_TREE)
00FBEC 0FFBEC A8 C1 00 00 00 00       N_A8C1          DW      $A8C1   $0000   $0000           ;if pulse >= 43201 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00FBF2 0FFBF2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00FBF4 0FFBF4 BC C1 00 00 00 00       N_BCC1          DW      $BCC1   $0000   $0000           ;if pulse >= 48321 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00FBFA 0FFBFA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
                                                              ;Search tree for high pulses
00FBFC 0FFBFC MACRO                   SCI_BD_HIGH_PULSE_TREE  SCI_BD_HIGH_PULSE_TREE
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;# High pulse search tree                                                      # (SCI_BD_HIGH_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    420 ( 1A4)      1 . . . . . . . (80)     11      3       37                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    608 ( 260)      1 1 . . . . . . (C0)     18      2       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    810 ( 32A)      1 1 1 . . . . . (E0)     23      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1216 ( 4C0)      1 1 1 1 . . . . (F0)     20      1       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1636 ( 664)      1 1 1 1 1 . . . (F8)     14      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   2432 ( 980)      1 1 1 1 1 1 . . (FC)      6      2       52                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   3242 ( CAA)      1 1 1 1 1 1 1 . (FE)      7      4       61                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4864 (1300)      1 1 1 1 1 1 1 1 (FF)      8      3       51                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   C                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;# +-0-+                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 2   9                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 6   8                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;#+0+ +0+                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | 1                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#1 3 6 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#A 2 6 0                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#4 A 4 0                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      C                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
00FBFC 0FFBFC 04 C0 F0 F0 FC 18       N__4C0          DW      $04C0   $F0F0   N__980          ;if pulse >= 1216 then check N__980 else check N__260 (SCI_BD_HIGH_PULSE_TREE)
00FC02 0FFC02 02 60 C0 C0 FC 10       N__260          DW      $0260   $C0C0   N__32A          ;if pulse >= 608 then check N__32A else check N__1A4 (SCI_BD_HIGH_PULSE_TREE)
00FC08 0FFC08 01 A4 80 80 00 00       N__1A4          DW      $01A4   $8080   $0000           ;if pulse >= 420 then the result is 80 else the result is 00 (SCI_BD_HIGH_PULSE_TREE)
00FC0E 0FFC0E 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00FC10 0FFC10 03 2A E0 E0 00 00       N__32A          DW      $032A   $E0E0   $0000           ;if pulse >= 810 then the result is E0 else the result is C0 (SCI_BD_HIGH_PULSE_TREE)
00FC16 0FFC16 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00FC18 0FFC18 09 80 FC FC FC 26       N__980          DW      $0980   $FCFC   N_1300          ;if pulse >= 2432 then check N_1300 else check N__664 (SCI_BD_HIGH_PULSE_TREE)
00FC1E 0FFC1E 06 64 F8 F8 00 00       N__664          DW      $0664   $F8F8   $0000           ;if pulse >= 1636 then the result is F8 else the result is F0 (SCI_BD_HIGH_PULSE_TREE)
00FC24 0FFC24 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00FC26 0FFC26 13 00 FF FF 00 00       N_1300          DW      $1300   $FFFF   $0000           ;if pulse >= 4864 then the result is FF else check N__CAA (SCI_BD_HIGH_PULSE_TREE)
00FC2C 0FFC2C 0C AA FE FE 00 00       N__CAA          DW      $0CAA   $FEFE   $0000           ;if pulse >= 3242 then the result is FE else the result is FC (SCI_BD_HIGH_PULSE_TREE)
00FC32 0FFC32 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00FC34 0FFC34 -> $FC34                SCI_TABS_END            EQU     *
00FC34 0FFC34 -> $FFC34               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB  - print a string (non-blocking)                         #
                                      ;#    STRING_PRINT_BL  - print a string (blocking)                             #
                                      ;#    STRING_FILL_NB   - print a number of filler characters (non-blocking)    #
                                      ;#    STRING_FILL_BL   - print a number of filler characters (blocking)        #
                                      ;#    STRING_UPPER_B   - convert a character to upper case                     #
                                      ;#    STRING_LOWER_B   - convert a character to lower case                     #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
00FC34 0FFC34 -> $0001                STRING_BLOCKING_OFF     EQU     1       ;blocking functions disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
00FC34 0FFC34 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
00FC34 0FFC34 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
00FC34 0FFC34 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
00FC34 0FFC34 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
00FC34 0FFC34 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
00FC34 0FFC34 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
00FC34 0FFC34 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
00FC34 0FFC34 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
00FC34 0FFC34 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F75E 0FF75E                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
00F75E 0FF75E -> $F75E                STRING_VARS_END         EQU     *
00F75E 0FF75E -> $FF75E               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F543 0FF543                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
00F543 0FF543 -> $F543                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
00F543 0FF543 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
00F544 0FF544 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
00F546 0FF546 2B 0B                                           BMI     STRING_PRINT_NB_3       ;last character
00F548 0FF548 16 F2 34                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00F54B 0FF54B 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
00F54D 0FF54D 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
00F54F 0FF54F MACRO                                           SSTACK_PREPULL  3
00F54F 0FF54F 33                                              PULB
                                                              ;Signal failure (string pointer in X)
00F550 0FF550 10 FE                                           CLC
                                                              ;Done
00F552 0FF552 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
00F553 0FF553 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
00F555 0FF555 16 F2 34                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00F558 0FF558 24 F3                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
00F55A 0FF55A MACRO                                           SSTACK_PREPULL  3
00F55A 0FF55A 33                                              PULB
                                                              ;Signal success (next string pointer in X)
00F55B 0FF55B 14 01                                           SEC
                                                              ;Done
00F55D 0FF55D 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
                                      ;#Print a number of filler characters - non-blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
00F55E 0FF55E -> $F55E                STRING_FILL_NB  EQU     *
                                                              ;Print characters (requested spaces in A)
00F55E 0FF55E 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
00F561 0FF561 16 F2 34                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00F564 0FF564 24 06                                           BCC     STRING_FILL_NB_3        ;unsuccessful
00F566 0FF566 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
00F569 0FF569 MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                                              ;Signal success (remaining spaces in A)
00F569 0FF569 14 01                                           SEC
                                                              ;Done
00F56B 0FF56B 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
00F56C 0FF56C MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                                              ;Signal failure (remaining spaces in A)
00F56C 0FF56C 10 FE                                           CLC
                                                              ;Done
00F56E 0FF56E 3D                                              RTS
                                      ;#Print a number of filler characters - blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
00F56F 0FF56F -> $F56F                STRING_CODE_END         EQU     *
00F56F 0FF56F -> $FF56F               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00FC34 0FFC34                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
00FC34 0FFC34 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
00FC35 0FFC35 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00FC35 0FFC35 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00FC36 0FFC36 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
00FC37 0FFC37 -> $FC37                STRING_TABS_END         EQU     *
00FC37 0FFC37 -> $FFC37               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING - String printing routines                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    COP    - Watchdog handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Error detection
                                      ;---------------
                                      ;COP detection
                                      ;Clock failure detection
                                      ;Power failure detection
                                      ;Code runaway detection
                                      ;Welcome message
                                      ;---------------
                                      ;RESET_WELCOME  FCS     "Hello, this is S12CBase!"
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Flags
00FC37 0FFC37 -> $0040                RESET_FLG_POR           EQU     $40             ;power on     (PORF)
00FC37 0FFC37 -> $0020                RESET_FLG_POWFAIL       EQU     $20             ;power loss   (LVRF)
00FC37 0FFC37 -> $0004                RESET_FLG_CODERUN       EQU     $04             ;code runaway (ILAF)
00FC37 0FFC37 -> $0002                RESET_FLG_COP           EQU     $02             ;watchdog timeout
00FC37 0FFC37 -> $0001                RESET_FLG_CLKFAIL       EQU     $01             ;clock faiure
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F75E 0FF75E                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
00F75E 0FF75E -> $F75E                RESET_AUTO_LOC1         EQU     *               ;1st auto-place location
00F75E 0FF75E                                                 ALIGN   1
00F75E 0FF75E                         RESET_MSG               DS      2               ;error message to be displayed
00F760 0FF760                         RESET_MSG_CHKSUM        DS      1               ;checksum for the errormessage
00F761 0FF761 -> $F761                RESET_AUTO_LOC2         EQU     *               ;2nd auto-place location
00F761 0FF761 -> $F761                RESET_FLGS              EQU     ((RESET_VARS_START&1)*RESET_AUTO_LOC1)+((~(RESET_VARS_START)&1)*RESET_AUTO_LOC2)
00F761 0FF761                                                 DS      (~(RESET_VARS_START)&1)
00F762 0FF762 -> $F762                RESET_VARS_END          EQU     *
00F762 0FF762 -> $FF762               RESET_VARS_END_LIN      EQU     @
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;         C-flag: set if message is valid
                                      ;         none of the registers are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F56F 0FF56F                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#COP reset entry point
                                      ;----------------------
00F56F 0FF56F -> $F56F                RESET_COP_ENTRY         EQU     RESET_EXT_ENTRY
                                      ;#Clock monitor reset entry point
                                      ;--------------------------------
00F56F 0FF56F -> $F56F                RESET_CM_ENTRY          EQU     RESET_EXT_ENTRY
                                      ;#External reset entry point
                                      ;---------------------------
00F56F 0FF56F -> $F56F                RESET_EXT_ENTRY         EQU     *
                                                              ;Capture CRG/CPMU flags
00F56F 0FF56F 18 0C 00 37 F7 61                               MOVB    CRGFLG, RESET_FLGS
00F575 0FF575 06 F0 00                                        JOB     START_OF_CODE
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
00F578 0FF578 -> $F578                RESET_FATAL             EQU     *
00F578 0FF578 7E F7 5E                                        STX     RESET_MSG
00F57B 0FF57B FD F5 A8                                        LDY     RESET_FATAL_1
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;;        C-flag: set if message is valid
                                      ;         none of the registers are preserved
00F57E 0FF57E -> $F57E                RESET_CALC_CHECKSUM     EQU     *
                                                              ;Initialize checksum generation
00F57E 0FF57E 87                                              CLRA
                                                              ;Get next character
00F57F 0FF57F E6 30                   RESET_CALC_CHECKSUM_1   LDAB    1,X+
00F581 0FF581 2B 0F                                           BMI     RESET_CALC_CHECKSUM_2   ;last charcter reached
00F583 0FF583 C1 20                                           CMPB    #STRING_SYM_SPACE
00F585 0FF585 25 1D                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
00F587 0FF587 C1 7E                                           CMPB    #STRING_SYM_TILDE
00F589 0FF589 22 19                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
00F58B 0FF58B 18 06                                           ABA
00F58D 0FF58D 45                                              ROLA
00F58E 0FF58E 89 00                                           ADCA    #$00
00F590 0FF590 20 ED                                           JOB     RESET_CALC_CHECKSUM_1
                                                              ;Last charcter reached
00F592 0FF592 C1 A0                   RESET_CALC_CHECKSUM_2   CMPB    #(STRING_SYM_SPACE|$80)
00F594 0FF594 25 0E                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
00F596 0FF596 C1 7E                                           CMPB    #(STRING_SYM_TILDE|80)
00F598 0FF598 22 0A                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
                                                              ;Message is valid
00F59A 0FF59A 18 06                                           ABA
00F59C 0FF59C 45                                              ROLA
00F59D 0FF59D 89 00                                           ADCA    #$00
00F59F 0FF59F 41                                              COMA
00F5A0 0FF5A0 14 01                                           SEC
00F5A2 0FF5A2 05 40                                           JMP     0,Y
                                                              ;Message is invalid
00F5A4 0FF5A4 10 FE                   RESET_CALC_CHECKSUM_3   CLC
00F5A6 0FF5A6 05 40                                           JMP     0,Y
                                      ;#Perform a reset due to a fatal error...continued
                                                              ;Check if message is valid (checksum in A, valid/invalid in C-flag)
00F5A8 0FF5A8 24 05                   RESET_FATAL_1           BCC     RESET_FATAL_3           ;clear message
00F5AA 0FF5AA 7A F7 60                                        STAA    RESET_MSG_CHKSUM
                                                              ;Trigger COP
00F5AD 0FF5AD MACRO                   RESET_FATAL_2           COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
00F5AD 0FF5AD 20 C0                                           JOB     RESET_COP_ENTRY                                  (COP_RESET)
                                                              ;Clear message
00F5AF 0FF5AF 87                      RESET_FATAL_3           CLRA
00F5B0 0FF5B0 C7                                              CLRB
00F5B1 0FF5B1 7C F7 5E                                        STD     RESET_MSG
00F5B4 0FF5B4 7A F7 60                                        STAA    RESET_MSG_CHKSUM
00F5B7 0FF5B7 20 F4                                           JOB     RESET_FATAL_2           ;trigger COP
                                      ;#Trigger a fatal error if a reset accurs
00F5B9 0FF5B9 -> $F5B9                RESET_ISR_FATAL         EQU     *
00F5B9 0FF5B9 MACRO                                           RESET_FATAL     RESET_STR_ILLIRQ
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
00F5B9 0FF5B9 CE FC 3E                                        LDX     #\1                                              (RESET_FATAL)
00F5BC 0FF5BC 20 BA                                           JOB     RESET_FATAL                                      (RESET_FATAL)
00F5BE 0FF5BE -> $F5BE                RESET_CODE_END          EQU     *
00F5BE 0FF5BE -> $FF5BE               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00FC37 0FFC37                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Welcome string
                                      ;#Error indicator
00FC37 0FFC37 46 61 74 61 6C 21 A0    RESET_STR_FATAL         FCS     "Fatal! "
                                      ;#Error messages
00FC3E 0FFC3E 49 6C 6C 65 67 61 6C 20 RESET_STR_ILLIRQ        FCS     "Illegal interrupt"
              69 6E 74 65 72 72 75 70 
              F4                      
00FC4F 0FFC4F -> $FC4F                RESET_TABS_END          EQU     *
00FC4F 0FFC4F -> $FFC4F               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
00FC4F 0FFC4F -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
00FC4F 0FFC4F -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
00FC4F 0FFC4F -> $000A                NUM_BASE_DEF            EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F762 0FF762                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
00F762 0FF762 -> $F762                NUM_VARS_END            EQU     *
00F762 0FF762 -> $FF762               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F5BE 0FF5BE                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
00F5BE 0FF5BE -> $F5BE                NUM_REVERSE             EQU     *
                                      ;Stack layout:
00F5BE 0FF5BE -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
00F5BE 0FF5BE -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
00F5BE 0FF5BE -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
00F5BE 0FF5BE -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
00F5BE 0FF5BE -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
00F5BE 0FF5BE -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
00F5BE 0FF5BE -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
00F5BE 0FF5BE -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
00F5BE 0FF5BE -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
00F5BE 0FF5BE -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
00F5BE 0FF5BE 87                                              CLRA
00F5BF 0FF5BF 18 02 80 AA                                     MOVW    0,SP, 6,-SP     ;move return address to SP+10
00F5C3 0FF5C3 6C 86                                           STD     6,SP            ;initialize reverse number
00F5C5 0FF5C5 18 00 84 00 00                                  MOVW    #$0000, 4,SP    ;  reverse number = base
00F5CA 0FF5CA 18 00 82 00 00                                  MOVW    #$0000, 2,SP
00F5CF 0FF5CF 34                                              PSHX                    ;store X at SP+8
00F5D0 0FF5D0 35                                              PSHY                    ;store Y at SP+6
00F5D1 0FF5D1 3B                                              PSHD                    ;store count:base at SP+4
00F5D2 0FF5D2 34                                              PSHX                    ;store double value at SP+0
00F5D3 0FF5D3 35                                              PSHY
                                                              ;Divide FHW by base
00F5D4 0FF5D4 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
00F5D6 0FF5D6 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
00F5D8 0FF5D8 87                                              CLRA                            ;base => D
00F5D9 0FF5D9 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00F5DB 0FF5DB B7 D4                                           EXG     X, D
00F5DD 0FF5DD 18 10                                           IDIV                            ;D / X => X,  D % X => D
00F5DF 0FF5DF 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
00F5E1 0FF5E1 B7 45                                           TFR     D, X                    ;remainder => X
00F5E3 0FF5E3 87                      NUM_REVERSE_2           CLRA                            ;base => D
00F5E4 0FF5E4 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00F5E6 0FF5E6 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
00F5E8 0FF5E8 B7 D6                                           EXG     X, Y
00F5EA 0FF5EA B7 D4                                           EXG     X, D
00F5EC 0FF5EC 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00F5ED 0FF5ED 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
00F5EF 0FF5EF E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
00F5F2 0FF5F2 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
00F5F5 0FF5F5 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
00F5F7 0FF5F7 C9 00                                           ADCB    #$00
00F5F9 0FF5F9 89 00                                           ADCA    #$00
00F5FB 0FF5FB 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00F5FD 0FF5FD EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
00F5FF 0FF5FF C9 00                                           ADCB    #$00
00F601 0FF601 89 00                                           ADCA    #$00
00F603 0FF603 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
00F605 0FF605 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
00F607 0FF607 EC 82                                           LDD     NUM_REVERSE_FLW,SP
00F609 0FF609 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
00F60B 0FF60B EC 80                                           LDD     NUM_REVERSE_FHW,SP
00F60D 0FF60D 27 28                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
00F60F 0FF60F ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
00F612 0FF612 87                                              CLRA
00F613 0FF613 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00F615 0FF615 13                                              EMUL                            ;Y * D => Y:D
00F616 0FF616 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
00F619 0FF619 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
00F61B 0FF61B B7 C6                                           EXG     D, Y
00F61D 0FF61D 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00F61F 0FF61F 87                                              CLRA
00F620 0FF620 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00F622 0FF622 13                                              EMUL                            ;Y * D => Y:D
00F623 0FF623 E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
00F625 0FF625 6C 8E                                           STD     NUM_REVERSE_RMW,SP
                                                              ;Multiply RHW by base (carry-over in Y)
00F627 0FF627 EC 8C                                           LDD     NUM_REVERSE_RHW,SP
00F629 0FF629 B7 C6                                           EXG     D, Y
00F62B 0FF62B 6C 8C                                           STD     NUM_REVERSE_RHW,SP
00F62D 0FF62D 87                                              CLRA
00F62E 0FF62E E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00F630 0FF630 13                                              EMUL                            ;Y * D => Y:D
00F631 0FF631 E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
00F633 0FF633 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
00F635 0FF635 20 9D                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
00F637 0FF637 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
00F637 0FF637 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
00F639 0FF639 3A                                              PULD                            ;
00F63A 0FF63A 31                                              PULY
00F63B 0FF63B 30                                              PULX
                                                              ;Done
00F63C 0FF63C 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
00F63D 0FF63D -> $F63D                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
00F63D 0FF63D -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
00F63D 0FF63D -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
00F63D 0FF63D -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
00F63D 0FF63D -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
00F63D 0FF63D -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
00F63D 0FF63D -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
00F63D 0FF63D -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
00F63D 0FF63D -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
00F63D 0FF63D 34                                              PSHX                                    ;store X at SP+8
00F63E 0FF63E 35                                              PSHY                                    ;store Y at SP+6
00F63F 0FF63F 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
00F640 0FF640 MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
00F640 0FF640 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
00F640 0FF640 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
00F640 0FF640 16 F2 9A                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
00F643 0FF643 18 24 00 3B                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
00F647 0FF647 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
00F649 0FF649 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
00F64B 0FF64B B7 65                                           TFR     Y, X
00F64D 0FF64D 87                                              CLRA                            ;base => D
00F64E 0FF64E E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
00F650 0FF650 B7 D4                                           EXG     X, D
00F652 0FF652 18 10                                           IDIV                            ;D / X => X,  D % X => D
00F654 0FF654 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
00F656 0FF656 B7 46                                           TFR     D, Y                    ;remainder => Y
00F658 0FF658 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
00F659 0FF659 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
00F65B 0FF65B EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
00F65D 0FF65D B7 C5                                           EXG     D, X
00F65F 0FF65F 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00F660 0FF660 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
00F662 0FF662 B7 46                                           TFR     D, Y                    ;remainder => Y
00F664 0FF664 EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
00F666 0FF666 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00F667 0FF667 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
00F669 0FF669 CE FC 4F                                        LdX     #NUM_SYMTAB
00F66C 0FF66C E6 E5                                           LDAB    B,X
00F66E 0FF66E 16 F2 34                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
00F671 0FF671 04 36 CC                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
00F674 0FF674 EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
00F676 0FF676 26 C8                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
00F678 0FF678 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
00F67A 0FF67A 26 C4                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
00F67C 0FF67C MACRO                                           SSTACK_PREPULL  14
00F67C 0FF67C 14 01                                           SEC
00F67E 0FF67E 3A                      NUM_REVPRINT_NB_3       PULD
00F67F 0FF67F 31                                              PULY
00F680 0FF680 30                                              PULX
                                                              ;Done
00F681 0FF681 3D                                              RTS
                                                              ;Printing incomplete
00F682 0FF682 MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
00F682 0FF682 10 FE                                           CLC
00F684 0FF684 20 F8                                           JOB     NUM_REVPRINT_NB_3
00F686 0FF686 -> $F686                NUM_CODE_END            EQU     *
00F686 0FF686 -> $FF686               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00FC4F 0FFC4F                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
00FC4F 0FFC4F 30                      NUM_SYMTAB              DB      "0"
00FC50 0FFC50 31                                              DB      "1"
00FC51 0FFC51 32                                              DB      "2"
00FC52 0FFC52 33                                              DB      "3"
00FC53 0FFC53 34                                              DB      "4"
00FC54 0FFC54 35                                              DB      "5"
00FC55 0FFC55 36                                              DB      "6"
00FC56 0FFC56 37                                              DB      "7"
00FC57 0FFC57 38                                              DB      "8"
00FC58 0FFC58 39                                              DB      "9"
00FC59 0FFC59 41                                              DB      "A"
00FC5A 0FFC5A 42                                              DB      "B"
00FC5B 0FFC5B 43                                              DB      "C"
00FC5C 0FFC5C 44                                              DB      "D"
00FC5D 0FFC5D 45                                              DB      "E"
00FC5E 0FFC5E 46                                              DB      "F"
00FC5F 0FFC5F 5F                      NUM_SYMTAB_END  DB      *
00FC60 0FFC60 -> $FC60                NUM_TABS_END            EQU     *
00FC60 0FFC60 -> $FFC60               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - Non-Volatile Memory Driver (OpenBDC)                       #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module erase and programing routines for the on-chip NVMs.          #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00FC60 0FFC60 -> $0400                NVM_SECTOR_SIZE         EQU     1024
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F762 0FF762                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
00F762 0FF762 -> $F762                NVM_VARS_END            EQU     *
00F762 0FF762 -> $FF762               NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
00F686 0FF686 -> $F686                NVM_CODE_END            EQU     *
00F686 0FF686 -> $FF686               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00FC60 0FFC60                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
00FC60 0FFC60 -> $FC60                NVM_TABS_END            EQU     *
00FC60 0FFC60 -> $FFC60               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (OpenBDC)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;#    CLOCK  - Clock handler                                                   #
                                      ;#    SCI    - UART driver                                                     #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 9, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added dummy vectors                                                  #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Moved vector table to table section                                  #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Restructured table                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00FC60 0FFC60 -> $FF80                VECTAB_START            EQU     $FF80
00FC60 0FFC60 -> $FFF80               VECTAB_START_LIN        EQU     $FFF80
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F762 0FF762                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
00F762 0FF762 -> $F762                VECTAB_VARS_END         EQU     *
00F762 0FF762 -> $FF762               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
00F686 0FF686 -> $F686                VECTAB_CODE_END         EQU     *
00F686 0FF686 -> $FF686               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00FC60 0FFC60                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
00FC60 0FFC60 -> $F5B9                ISR_RES80               EQU     RESET_ISR_FATAL         ;vector base + $80
00FC60 0FFC60 -> $F5B9                ISR_RES82               EQU     RESET_ISR_FATAL         ;vector base + $82
00FC60 0FFC60 -> $F5B9                ISR_RES84               EQU     RESET_ISR_FATAL         ;vector base + $84
00FC60 0FFC60 -> $F5B9                ISR_RES86               EQU     RESET_ISR_FATAL         ;vector base + $86
00FC60 0FFC60 -> $F5B9                ISR_RES88               EQU     RESET_ISR_FATAL         ;vector base + $88
00FC60 0FFC60 -> $F5B9                ISR_LVI                 EQU     RESET_ISR_FATAL                 ;vector base + $8A
00FC60 0FFC60 -> $F5B9                ISR_PWM                 EQU     RESET_ISR_FATAL                 ;vector base + $8C
00FC60 0FFC60 -> $F5B9                ISR_PORTP               EQU     RESET_ISR_FATAL         ;vector base + $8E
00FC60 0FFC60 -> $F5B9                ISR_RES90               EQU     RESET_ISR_FATAL         ;vector base + $90
00FC60 0FFC60 -> $F5B9                ISR_RES92               EQU     RESET_ISR_FATAL         ;vector base + $92
00FC60 0FFC60 -> $F5B9                ISR_RES94               EQU     RESET_ISR_FATAL         ;vector base + $94
00FC60 0FFC60 -> $F5B9                ISR_RES96               EQU     RESET_ISR_FATAL         ;vector base + $96
00FC60 0FFC60 -> $F5B9                ISR_RES98               EQU     RESET_ISR_FATAL         ;vector base + $98
00FC60 0FFC60 -> $F5B9                ISR_RES9A               EQU     RESET_ISR_FATAL         ;vector base + $9A
00FC60 0FFC60 -> $F5B9                ISR_RES9C               EQU     RESET_ISR_FATAL         ;vector base + $9C
00FC60 0FFC60 -> $F5B9                ISR_RES9E               EQU     RESET_ISR_FATAL         ;vector base + $9E
00FC60 0FFC60 -> $F5B9                ISR_RESA0               EQU     RESET_ISR_FATAL         ;vector base + $A0
00FC60 0FFC60 -> $F5B9                ISR_RESA2               EQU     RESET_ISR_FATAL         ;vector base + $A2
00FC60 0FFC60 -> $F5B9                ISR_RESA4               EQU     RESET_ISR_FATAL         ;vector base + $A4
00FC60 0FFC60 -> $F5B9                ISR_RESA6               EQU     RESET_ISR_FATAL         ;vector base + $A6
00FC60 0FFC60 -> $F5B9                ISR_RESA8               EQU     RESET_ISR_FATAL         ;vector base + $A8
00FC60 0FFC60 -> $F5B9                ISR_RESAA               EQU     RESET_ISR_FATAL         ;vector base + $AA
00FC60 0FFC60 -> $F5B9                ISR_RESAC               EQU     RESET_ISR_FATAL         ;vector base + $AC
00FC60 0FFC60 -> $F5B9                ISR_RESAE               EQU     RESET_ISR_FATAL         ;vector base + $AE
00FC60 0FFC60 -> $F5B9                ISR_CANTX               EQU     RESET_ISR_FATAL         ;vector base + $A0
00FC60 0FFC60 -> $F5B9                ISR_CANRX               EQU     RESET_ISR_FATAL         ;vector base + $B2
00FC60 0FFC60 -> $F5B9                ISR_CANERR              EQU     RESET_ISR_FATAL         ;vector base + $B4
00FC60 0FFC60 -> $F5B9                ISR_CANWUP              EQU     RESET_ISR_FATAL         ;vector base + $B6
00FC60 0FFC60 -> $F5B9                ISR_FLASH               EQU     RESET_ISR_FATAL         ;vector base + $B8
00FC60 0FFC60 -> $F5B9                ISR_RESBA               EQU     RESET_ISR_FATAL         ;vector base + $BA
00FC60 0FFC60 -> $F5B9                ISR_RESBC               EQU     RESET_ISR_FATAL         ;vector base + $BC
00FC60 0FFC60 -> $F5B9                ISR_RESBE               EQU     RESET_ISR_FATAL         ;vector base + $BE
00FC60 0FFC60 -> $F5B9                ISR_RESC0               EQU     RESET_ISR_FATAL         ;vector base + $C0
00FC60 0FFC60 -> $F5B9                ISR_RESC2               EQU     RESET_ISR_FATAL         ;vector base + $C2
00FC60 0FFC60 -> $F5B9                ISR_SCM                 EQU     RESET_ISR_FATAL                 ;vector base + $C4
00FC60 0FFC60 -> $F1DC                ISR_PLLLOCK             EQU     CLOCK_ISR
00FC60 0FFC60 -> $F5B9                ISR_RESC8               EQU     RESET_ISR_FATAL         ;vector base + $C8
00FC60 0FFC60 -> $F5B9                ISR_RESCA               EQU     RESET_ISR_FATAL         ;vector base + $CA
00FC60 0FFC60 -> $F5B9                ISR_RESCC               EQU     RESET_ISR_FATAL         ;vector base + $CC
00FC60 0FFC60 -> $F5B9                ISR_PORTJ               EQU     RESET_ISR_FATAL         ;vector base + $CC
00FC60 0FFC60 -> $F5B9                ISR_RESD0               EQU     RESET_ISR_FATAL         ;vector base + $D0
00FC60 0FFC60 -> $F5B9                ISR_ATD                 EQU     RESET_ISR_FATAL         ;vector base + $D2
00FC60 0FFC60 -> $F5B9                ISR_RESD4               EQU     RESET_ISR_FATAL         ;vector base + $D4
00FC60 0FFC60 -> $F3C4                ISR_SCI                 EQU     SCI_ISR_RXTX
00FC60 0FFC60 -> $F5B9                ISR_SPI                 EQU     RESET_ISR_FATAL         ;vector base + $D8
00FC60 0FFC60 -> $F5B9                ISR_TIM_PAIE            EQU     RESET_ISR_FATAL         ;vector base + $DA
00FC60 0FFC60 -> $F5B9                ISR_TIM_PAOV            EQU     RESET_ISR_FATAL         ;vector base + $DC
00FC60 0FFC60 -> $F5B9                ISR_TIM_TOV             EQU     RESET_ISR_FATAL         ;vector base + $DE
00FC60 0FFC60 -> $F5B9                ISR_TIM_TC7             EQU     RESET_ISR_FATAL         ;vector base + $E0
00FC60 0FFC60 -> $F5B9                ISR_TIM_TC6             EQU     RESET_ISR_FATAL         ;vector base + $E2
00FC60 0FFC60 -> $F5B9                ISR_TIM_TC5             EQU     RESET_ISR_FATAL         ;vector base + $E4
00FC60 0FFC60 -> $F5B9                ISR_TIM_TC4             EQU     RESET_ISR_FATAL         ;vector base + $E6
00FC60 0FFC60 -> $F341                ISR_TIM_TC3             EQU     SCI_ISR_DELAY
00FC60 0FFC60 -> $F5B9                ISR_TIM_TC2             EQU     RESET_ISR_FATAL         ;vector base + $EA
00FC60 0FFC60 -> $F487                ISR_TIM_TC1             EQU     SCI_ISR_BD_NE
00FC60 0FFC60 -> $F4B3                ISR_TIM_TC0             EQU     SCI_ISR_BD_PE
00FC60 0FFC60 -> $F1E7                ISR_RTI                 EQU     LED_ISR
00FC60 0FFC60 -> $F5B9                ISR_IRQ                 EQU     RESET_ISR_FATAL         ;vector base + $F2
00FC60 0FFC60 -> $F5B9                ISR_XIRQ                EQU     RESET_ISR_FATAL         ;vector base + $F4
00FC60 0FFC60 -> $F5B9                ISR_SWI                 EQU     RESET_ISR_FATAL         ;vector base + $F6
00FC60 0FFC60 -> $F5B9                ISR_TRAP                EQU     RESET_ISR_FATAL         ;vector base + $F8
                                      ;#Code entry points
                                      ;#-----------------
00FC60 0FFC60 -> $F56F                RES_COP                 EQU     RESET_COP_ENTRY
00FC60 0FFC60 -> $F56F                RES_CM                  EQU     RESET_CM_ENTRY
00FC60 0FFC60 -> $F56F                RES_EXT                 EQU     RESET_EXT_ENTRY
00FC60 0FFC60 -> $FC60                VECTAB_TABS_END         EQU     *
00FC60 0FFC60 -> $FFC60               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12G128 Vector Table                                                        #
                                      ;###############################################################################
00FF80 0FFF80                                                 ORG     VECTAB_START, VECTAB_START_LIN
00FF80 0FFF80 F5 B9                   VEC_RES80               DW      ISR_RES80               ;vector base + $80
00FF82 0FFF82 F5 B9                   VEC_RES82               DW      ISR_RES82               ;vector base + $82
00FF84 0FFF84 F5 B9                   VEC_RES84               DW      ISR_RES84               ;vector base + $84
00FF86 0FFF86 F5 B9                   VEC_RES86               DW      ISR_RES86               ;vector base + $86
00FF88 0FFF88 F5 B9                   VEC_RES88               DW      ISR_RES88               ;vector base + $88
00FF8A 0FFF8A F5 B9                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $8A
00FF8C 0FFF8C F5 B9                   VEC_PWM                 DW      ISR_PWM                 ;vector base + $8C
00FF8E 0FFF8E F5 B9                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
00FF90 0FFF90 F5 B9                   VEC_RES90               DW      ISR_RES90               ;vector base + $90
00FF92 0FFF92 F5 B9                   VEC_RES92               DW      ISR_RES92               ;vector base + $92
00FF94 0FFF94 F5 B9                   VEC_RES94               DW      ISR_RES94               ;vector base + $94
00FF96 0FFF96 F5 B9                   VEC_RES96               DW      ISR_RES96               ;vector base + $96
00FF98 0FFF98 F5 B9                   VEC_RES98               DW      ISR_RES98               ;vector base + $98
00FF9A 0FFF9A F5 B9                   VEC_RES9A               DW      ISR_RES9A               ;vector base + $9A
00FF9C 0FFF9C F5 B9                   VEC_RES9C               DW      ISR_RES9C               ;vector base + $9C
00FF9E 0FFF9E F5 B9                   VEC_RES9E               DW      ISR_RES9E               ;vector base + $9E
00FFA0 0FFFA0 F5 B9                   VEC_RESA0               DW      ISR_RESA0               ;vector base + $A0
00FFA2 0FFFA2 F5 B9                   VEC_RESA2               DW      ISR_RESA2               ;vector base + $A2
00FFA4 0FFFA4 F5 B9                   VEC_RESA4               DW      ISR_RESA4               ;vector base + $A4
00FFA6 0FFFA6 F5 B9                   VEC_RESA6               DW      ISR_RESA6               ;vector base + $A6
00FFA8 0FFFA8 F5 B9                   VEC_RESA8               DW      ISR_RESA8               ;vector base + $A8
00FFAA 0FFFAA F5 B9                   VEC_RESAA               DW      ISR_RESAA               ;vector base + $AA
00FFAC 0FFFAC F5 B9                   VEC_RESAC               DW      ISR_RESAC               ;vector base + $AC
00FFAE 0FFFAE F5 B9                   VEC_RESAE               DW      ISR_RESAE               ;vector base + $AE
00FFB0 0FFFB0 F5 B9                   VEC_CANTX               DW      ISR_CANTX               ;vector base + $A0
00FFB2 0FFFB2 F5 B9                   VEC_CANRX               DW      ISR_CANRX               ;vector base + $B2
00FFB4 0FFFB4 F5 B9                   VEC_CANERR              DW      ISR_CANERR              ;vector base + $B4
00FFB6 0FFFB6 F5 B9                   VEC_CANWUP              DW      ISR_CANWUP              ;vector base + $B6
00FFB8 0FFFB8 F5 B9                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
00FFBA 0FFFBA F5 B9                   VEC_RESBA               DW      ISR_RESBA               ;vector base + $BA
00FFBC 0FFFBC F5 B9                   VEC_RESBC               DW      ISR_RESBC               ;vector base + $BC
00FFBE 0FFFBE F5 B9                   VEC_RESBE               DW      ISR_RESBE               ;vector base + $BE
00FFC0 0FFFC0 F5 B9                   VEC_RESC0               DW      ISR_RESC0               ;vector base + $C0
00FFC2 0FFFC2 F5 B9                   VEC_RESC2               DW      ISR_RESC2               ;vector base + $C2
00FFC4 0FFFC4 F5 B9                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
00FFC6 0FFFC6 F1 DC                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
00FFC8 0FFFC8 F5 B9                   VEC_RESC8               DW      ISR_RESC8               ;vector base + $C8
00FFCA 0FFFCA F5 B9                   VEC_RESCA               DW      ISR_RESCA               ;vector base + $CA
00FFCC 0FFFCC F5 B9                   VEC_RESCC               DW      ISR_RESCC               ;vector base + $CC
00FFCE 0FFFCE F5 B9                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CC
00FFD0 0FFFD0 F5 B9                   VEC_RESD0               DW      ISR_RESD0               ;vector base + $D0
00FFD2 0FFFD2 F5 B9                   VEC_ATD                 DW      ISR_ATD                 ;vector base + $D2
00FFD4 0FFFD4 F5 B9                   VEC_RESD4               DW      ISR_RESD4               ;vector base + $D4
00FFD6 0FFFD6 F3 C4                   VEC_SCI                 DW      ISR_SCI                 ;vector base + $D6
00FFD8 0FFFD8 F5 B9                   VEC_SPI                 DW      ISR_SPI                 ;vector base + $D8
00FFDA 0FFFDA F5 B9                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $DA
00FFDC 0FFFDC F5 B9                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $DC
00FFDE 0FFFDE F5 B9                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $DE
00FFE0 0FFFE0 F5 B9                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $E0
00FFE2 0FFFE2 F5 B9                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $E2
00FFE4 0FFFE4 F5 B9                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $E4
00FFE6 0FFFE6 F5 B9                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $E6
00FFE8 0FFFE8 F3 41                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $E8
00FFEA 0FFFEA F5 B9                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $EA
00FFEC 0FFFEC F4 87                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $EC
00FFEE 0FFFEE F4 B3                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $EE
00FFF0 0FFFF0 F1 E7                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
00FFF2 0FFFF2 F5 B9                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
00FFF4 0FFFF4 F5 B9                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
00FFF6 0FFFF6 F5 B9                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
00FFF8 0FFFF8 F5 B9                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
00FFFA 0FFFFA F5 6F                   VEC_RESET_COP           DW      RES_COP                 ;vector base + $FA
00FFFC 0FFFFC F5 6F                   VEC_RESET_CM            DW      RES_CM                  ;vector base + $FC
00FFFE 0FFFFE F5 6F                   VEC_RESET_EXT           DW      RES_EXT                 ;vector base + $FE
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00F686 0FF686                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
00F686 0FF686 -> $F686                DEMO_VARS_END           EQU     *
00F686 0FF686 -> $FF686               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F000 0FF000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
00F000 0FF000 MACRO                                           BASE_INIT
                                      ;############################################################################### (BASE_INIT)
                                      ;# Macros                                                                      # (BASE_INIT)
                                      ;############################################################################### (BASE_INIT)
                                      ;#Initialization                                                                 (BASE_INIT)
00F000 0FF000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#Port A                                                         (BASE_INIT/GPIO_INIT)
00F000 0FF000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
00F002 0FF002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
00F004 0FF004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
00F006 0FF006 18 0B FF 00 0C                          MOVB    #$FF, PUCR      ;enable pull-ups on ports A, B & E       (BASE_INIT/GPIO_INIT)
                                                      ;#Port B                                                         (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
00F00B 0FF00B 18 0B 10 00 0A                          MOVB    #NECLK, PEAR    ;lock PEAR register                      (BASE_INIT/GPIO_INIT)
00F010 0FF010 79 00 1E                                CLR     INTCR           ;disable external interrupts             (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
00F013 0FF013 18 0B FF 02 6C                          MOVB    #$FF, PERJ      ;enable pull-ups on port J               (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
00F018 0FF018 18 0B 02 02 52                          MOVB    #$02, DDRM      ;switch PM1 to ouput                     (BASE_INIT/GPIO_INIT)
00F01D 0FF01D 18 0B FC 02 54                          MOVB    #$FC, PERM      ;enable pull-ups on PM[6:2]              (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
00F022 0FF022 18 03 FF 00 02 5C                       MOVW    #$FF00, PERP    ;enable pull-ups on PP[7:0]              (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
00F028 0FF028 18 0B 02 02 4A                          MOVB    #$02, DDRS      ;switch PS1 to ouput                     (BASE_INIT/GPIO_INIT)
00F02D 0FF02D 18 0B 02 02 48                          MOVB    #$02, PTS       ;drive PS1 high                          (BASE_INIT/GPIO_INIT)
00F032 0FF032 18 0B FC 02 4C                          MOVB    #$FC, PERS      ;enable pull-ups on PS[3:2]              (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
00F037 0FF037 18 0B FF 02 44                          MOVB    #$FF, PERT      ;enable pull-ups on PT[7:0]              (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
                                                      ;CLR    ATDDIEN         ;enable digital input buffers            (BASE_INIT/GPIO_INIT)
00F03C 0FF03C 18 0B 80 02 72                          MOVB    #$80, DDRAD     ;switch PAD0 to ouput                    (BASE_INIT/GPIO_INIT)
00F041 0FF041 79 02 70                                CLR     PTAD            ;turn off LED                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PTAD      ;turn off LED                            (BASE_INIT/GPIO_INIT)
00F044 0FF044 18 0B 7F 02 74                          MOVB    #$7F, PERAD     ;enable pull-ups on PAD[7:1]             (BASE_INIT/GPIO_INIT)
00F049 0FF049 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
00F049 0FF049 CF F6 AA                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
00F04C 0FF04C 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
00F04E 0FF04E MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
00F04E 0FF04E 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
00F053 0FF053 18 03 23 05 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
00F059 0FF059 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
00F05F 0FF05F MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00F05F 0FF05F 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
00F064 0FF064 MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup and lock RAM and register space                   (BASE_INIT/MMAP_INIT)
00F064 0FF064 18 03 F0 00 00 10                               MOVW    #((MMAP_RAM_START&$F800)|(MMAP_REG_START>>8)), INITRM (BASE_INIT/MMAP_INIT)
00F06A 0FF06A MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Give SCI_ISR_BD_PE high priority                        (BASE_INIT/VECTAB_INIT)
00F06A 0FF06A 18 0B EE 00 1F                                  MOVB    #(VEC_TIM_TC0&$FF), HPRIO                        (BASE_INIT/VECTAB_INIT)
00F06F 0FF06F MACRO                                           RTI_INIT                                                 (BASE_INIT)
00F06F 0FF06F MACRO                                           TIM_INIT                                                 (BASE_INIT)
00F06F 0FF06F MACRO                                           STRING_INIT                                              (BASE_INIT)
00F06F 0FF06F MACRO                                           NUM_INIT                                                 (BASE_INIT)
00F06F 0FF06F MACRO                                           NVM_INIT                                                 (BASE_INIT)
00F06F 0FF06F MACRO                                           LED_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/LED_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/LED_INIT)
                                                              ;RTI_DISABLE                                             (BASE_INIT/LED_INIT)
00F06F 0FF06F MACRO                                           LED_ON                                                   (BASE_INIT/LED_INIT)
                                      ;#Turn LED on                                                                    (BASE_INIT/LED_INIT/LED_ON)
00F06F 0FF06F 18 0B 80 02 70                          MOVB    #PAD7, PTAD                                              (BASE_INIT/LED_INIT/LED_ON)
00F074 0FF074 79 F6 AA                                        CLR     LED_FLGS                                         (BASE_INIT/LED_INIT)
00F077 0FF077 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                                              ;MOVW   #(((RTIE|LOCKIE)<<8)|CWAI|COPWAI), CRGINT        (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ;CRG configuration: (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; real-time interrupt enabled           (RTIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL lock interrupt enabled            (LOCKIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no self-clock mode interrupt          (~SCMIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no pseudo-stop                        (~PSTP) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; system/bus clock in wait mode         (~SYSWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no reduced oscillator amplitude       (~ROAWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL in wait mode                      (~PLLWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; core/CPU clock stops in wait mode     (CWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; RTI keeps running in wait mode        (~RTIWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; COP stops in wait mode                (COPWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;BSET   PLLCTL, #(CME|PLLON|AUTO)                       ; clock monitor enabled                 (CME) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL enabled                           (PLLON) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; automatic bandwith control            (AUTO) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00F077 0FF077 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00F079 0FF079 4E 39 80 0E                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00F07D 0FF07D MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00F07D 0FF07D MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00F07D 0FF07D 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00F082 0FF082 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00F087 0FF087 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00F089 0FF089 -> $F089                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00F089 0FF089 20 EC                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00F08B 0FF08B 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00F08D 0FF08D MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_INIT)
00F08D 0FF08D CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_INIT)
00F090 0FF090 7C F6 D6                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_INIT)
00F093 0FF093 7C F6 CC                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_INIT)
00F096 0FF096 7A F6 DA                                        STAA    SCI_FLGS                                         (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                      ;                       STD     SCI_BD_RECOVCNT                         ;reset baud rate check list and recovery count (BASE_INIT/SCI_INIT)
00F099 0FF099 7A F6 DB                                        STAA    SCI_BD_LIST                             ;reset baud rate check list (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
00F09C 0FF09C 4C 40 0C                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
00F09F 0FF09F FC F6 D8                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
00F0A2 0FF0A2 27 16                                           BEQ     SCI_INIT_2                              ;use default value if zero (BASE_INIT/SCI_INIT)
00F0A4 0FF0A4 CE 19 99                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
00F0A7 0FF0A7 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
00F0A9 0FF0A9 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
00F0AC 0FF0AC 26 0C                                           BNE     SCI_INIT_2                              ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
00F0AE 0FF0AE CD F7 F4                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
00F0B1 0FF0B1 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
00F0B3 0FF0B3 27 0E                                           BEQ     SCI_INIT_3                              ;match   (BASE_INIT/SCI_INIT)
00F0B5 0FF0B5 8D F8 04                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
00F0B8 0FF0B8 26 F7                                           BNE     SCI_INIT_1                              ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
00F0BA 0FF0BA CE 00 A0                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
00F0BD 0FF0BD 18 03 FF A0 F6 D8                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
00F0C3 0FF0C3 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format and enable transmission                (BASE_INIT/SCI_INIT)
00F0C5 0FF0C5 18 03 04 2C 00 CA                               MOVW    #((SCI_8N1<<8)|RIE|TE|RE), SCICR1       ;8N1 (keep TX IRQs disabled) (BASE_INIT/SCI_INIT)
                                                              ;Initialize CTS                                          (BASE_INIT/SCI_INIT)
00F0CB 0FF0CB MACRO                                           SCI_ASSERT_CTS                                           (BASE_INIT/SCI_INIT)
                                      ;#Assert CTS (allow incoming data)                                               (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
00F0CB 0FF0CB 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (BASE_INIT/SCI_INIT/SCI_ASSERT_CTS)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)                    (BASE_INIT/SCI_INIT)
00F0CF 0FF0CF 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (BASE_INIT/SCI_INIT)
00F0D2 0FF0D2 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Check for POR                                           (BASE_INIT/RESET_INIT)
00F0D2 0FF0D2 B6 F7 61                                        LDAA    RESET_FLGS                                       (BASE_INIT/RESET_INIT)
00F0D5 0FF0D5 85 40                                           BITA    #RESET_FLG_POR                                   (BASE_INIT/RESET_INIT)
00F0D7 0FF0D7 26 22                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Check for power failure (flags in A)                    (BASE_INIT/RESET_INIT)
                                                              ;Check for clock failure (flags in A)                    (BASE_INIT/RESET_INIT)
                                                              ;Check for code runaway (flags in A)                     (BASE_INIT/RESET_INIT)
                                                              ;Check for COP reset (flags in A)                        (BASE_INIT/RESET_INIT)
                                                              ;Check custom error                                      (BASE_INIT/RESET_INIT)
00F0D9 0FF0D9 FE F7 5E                                        LDX     RESET_MSG                                        (BASE_INIT/RESET_INIT)
00F0DC 0FF0DC CD F0 E2                                        LDY     #RESET_INIT_1                                    (BASE_INIT/RESET_INIT)
00F0DF 0FF0DF 06 F5 7E                                        JOB     RESET_CALC_CHECKSUM                              (BASE_INIT/RESET_INIT)
00F0E2 0FF0E2 -> $F0E2                RESET_INIT_1            EQU     *                                                (BASE_INIT/RESET_INIT)
00F0E2 0FF0E2 24 17                                           BCC     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Verify checksum (checksum in A)                         (BASE_INIT/RESET_INIT)
00F0E4 0FF0E4 B1 F7 60                                        CMPA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
00F0E7 0FF0E7 26 12                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
00F0E9 0FF0E9 FD F7 5E                                        LDY     RESET_MSG                                        (BASE_INIT/RESET_INIT)
                                                              ;Print error message (error message in Y)                (BASE_INIT/RESET_INIT)
00F0EC 0FF0EC CE FC 37                RESET_INIT_2            LDX     #RESET_STR_FATAL                                 (BASE_INIT/RESET_INIT)
00F0EF 0FF0EF MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
00F0EF 0FF0EF MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F0EF 0FF0EF                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F0EF 0FF0EF MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F0EF 0FF0EF MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F0EF 0FF0EF MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F0EF 0FF0EF 16 F2 AE                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F0F2 0FF0F2 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F0F2 0FF0F2 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F0F2 0FF0F2 16 F5 43                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F0F5 0FF0F5 24 F8                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F0F7 0FF0F7 B7 65                                           TFR     Y, X                                             (BASE_INIT/RESET_INIT)
00F0F9 0FF0F9 20 03                                           JOB     RESET_INIT_4                                     (BASE_INIT/RESET_INIT)
                                                              ;Print welcome message                                   (BASE_INIT/RESET_INIT)
00F0FB 0FF0FB CE F7 62                RESET_INIT_3            LDX     #RESET_WELCOME                                   (BASE_INIT/RESET_INIT)
00F0FE 0FF0FE MACRO                   RESET_INIT_4            STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
00F0FE 0FF0FE MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F0FE 0FF0FE                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F0FE 0FF0FE MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F0FE 0FF0FE MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F0FE 0FF0FE MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F0FE 0FF0FE 16 F2 AE                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00F101 0FF101 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F101 0FF101 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F101 0FF101 16 F5 43                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F104 0FF104 24 F8                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                                              ;Print exlamation mark and new line                      (BASE_INIT/RESET_INIT)
                                                              ;LDX    #STRING_STR_EXCLAM_NL                            (BASE_INIT/RESET_INIT)
                                                              ;STRING_PRINT_BL                                         (BASE_INIT/RESET_INIT)
                                                              ;Remove custom error message                             (BASE_INIT/RESET_INIT)
00F106 0FF106 DC 00                                           LDD     $0000                                            (BASE_INIT/RESET_INIT)
00F108 0FF108 7C F7 5E                                        STD     RESET_MSG                                        (BASE_INIT/RESET_INIT)
00F10B 0FF10B 7A F7 60                                        STAA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
                                                              ;Wait until message has been transmitted                 (BASE_INIT/RESET_INIT)
00F10E 0FF10E MACRO                                           SCI_TX_DONE_BL                                           (BASE_INIT/RESET_INIT)
                                      ;#Wait until all pending data is sent                                            (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; result: A: number of entries left in TX queue                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
00F10E 0FF10E MACRO                                           SSTACK_JOBSR    SCI_TX_DONE_BL, 6                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
00F10E 0FF10E MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
00F10E 0FF10E 16 F2 83                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;Application code
00F111 0FF111 MACRO                   DEMO_LOOP               SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00F111 0FF111 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (SCI_RX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00F111 0FF111 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SSTACK_JOBSR)
00F111 0FF111 16 F2 EF                                        JOBSR   \1                                               (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors
00F114 0FF114 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
00F116 0FF116 26 F9                                           BNE     DEMO_LOOP
                                                              ;TBNE   A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
00F118 0FF118 B7 45                                           TFR     D, X
00F11A 0FF11A 86 04                                           LDAA    #4
00F11C 0FF11C C6 20                                           LDAB    #" "
00F11E 0FF11E MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00F11E 0FF11E MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00F11E 0FF11E                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00F11E 0FF11E MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F11E 0FF11E MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F11E 0FF11E MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F11E 0FF11E 16 F2 AE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00F121 0FF121 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F121 0FF121 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F121 0FF121 16 F5 5E                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F124 0FF124 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00F126 0FF126 B7 54                                           TFR     X, D
00F128 0FF128 87                                              CLRA
00F129 0FF129 MACRO                                           STRING_MAKE_PRINTABLE_B
                                      ;#Make ASCII character printable                                                 (STRING_MAKE_PRINTABLE_B)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_MAKE_PRINTABLE_B)
                                      ; result: B: printable ASCII character or "."                                    (STRING_MAKE_PRINTABLE_B)
                                      ; SSTACK: none                                                                   (STRING_MAKE_PRINTABLE_B)
                                      ;         X, Y, and A are preserved                                              (STRING_MAKE_PRINTABLE_B)
00F129 0FF129 C1 20                                           CMPB    #$20            ;" "                             (STRING_MAKE_PRINTABLE_B)
00F12B 0FF12B 25 04                                           BLO     ADJUST                                           (STRING_MAKE_PRINTABLE_B)
00F12D 0FF12D C1 7E                                           CMPB    #$7E            ;"~"                             (STRING_MAKE_PRINTABLE_B)
00F12F 0FF12F 23 02                                           BLS     DONE                                             (STRING_MAKE_PRINTABLE_B)
00F131 0FF131 C6 2E                   ADJUST                  LDAB    #$2E            ;"."                             (STRING_MAKE_PRINTABLE_B)
00F133 0FF133 -> $F133                DONE                    EQU     *                                                (STRING_MAKE_PRINTABLE_B)
00F133 0FF133 MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
00F133 0FF133 MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 7                             (SCI_TX_BL)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (SCI_TX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
00F133 0FF133 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SSTACK_JOBSR)
00F133 0FF133 16 F2 58                                        JOBSR   \1                                               (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
00F136 0FF136 CD 00 00                                        LDY     #$0000
00F139 0FF139 C6 10                                           LDAB    #16
00F13B 0FF13B MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00F13B 0FF13B MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00F13B 0FF13B MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
00F13B 0FF13B 16 F5 BE                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00F13E 0FF13E B7 76                                           TFR     SP, Y
00F140 0FF140 40                                              NEGA
00F141 0FF141 8B 05                                           ADDA    #5
00F143 0FF143 C6 20                                           LDAB    #" "
00F145 0FF145 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00F145 0FF145 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00F145 0FF145                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00F145 0FF145 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F145 0FF145 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F145 0FF145 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F145 0FF145 16 F2 AE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00F148 0FF148 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F148 0FF148 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F148 0FF148 16 F5 5E                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F14B 0FF14B 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00F14D 0FF14D C6 10                                           LDAB    #16
00F14F 0FF14F MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00F14F 0FF14F MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00F14F 0FF14F                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00F14F 0FF14F MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00F14F 0FF14F MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F14F 0FF14F MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F14F 0FF14F 16 F2 AE                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00F152 0FF152 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F152 0FF152 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F152 0FF152 16 F6 3D                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F155 0FF155 24 F8                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00F157 0FF157 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00F157 0FF157 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
00F157 0FF157 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
00F159 0FF159 CD 00 00                                        LDY     #$0000
00F15C 0FF15C C6 0A                                           LDAB    #10
00F15E 0FF15E MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00F15E 0FF15E MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00F15E 0FF15E MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
00F15E 0FF15E 16 F5 BE                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00F161 0FF161 B7 76                                           TFR     SP, Y
00F163 0FF163 40                                              NEGA
00F164 0FF164 8B 05                                           ADDA    #5
00F166 0FF166 C6 20                                           LDAB    #" "
00F168 0FF168 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00F168 0FF168 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00F168 0FF168                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00F168 0FF168 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F168 0FF168 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F168 0FF168 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F168 0FF168 16 F2 AE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00F16B 0FF16B MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F16B 0FF16B MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F16B 0FF16B 16 F5 5E                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F16E 0FF16E 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00F170 0FF170 C6 0A                                           LDAB    #10
00F172 0FF172 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00F172 0FF172 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00F172 0FF172                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00F172 0FF172 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00F172 0FF172 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F172 0FF172 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F172 0FF172 16 F2 AE                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00F175 0FF175 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F175 0FF175 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F175 0FF175 16 F6 3D                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F178 0FF178 24 F8                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00F17A 0FF17A MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00F17A 0FF17A MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
00F17A 0FF17A 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
00F17C 0FF17C CD 00 00                                        LDY     #$0000
00F17F 0FF17F C6 08                                           LDAB    #8
00F181 0FF181 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00F181 0FF181 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00F181 0FF181 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
00F181 0FF181 16 F5 BE                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00F184 0FF184 B7 76                                           TFR     SP, Y
00F186 0FF186 40                                              NEGA
00F187 0FF187 8B 05                                           ADDA    #5
00F189 0FF189 C6 20                                           LDAB    #" "
00F18B 0FF18B MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00F18B 0FF18B MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00F18B 0FF18B                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00F18B 0FF18B MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F18B 0FF18B MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F18B 0FF18B MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F18B 0FF18B 16 F2 AE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00F18E 0FF18E MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F18E 0FF18E MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F18E 0FF18E 16 F5 5E                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F191 0FF191 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00F193 0FF193 C6 08                                           LDAB    #8
00F195 0FF195 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00F195 0FF195 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00F195 0FF195                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00F195 0FF195 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00F195 0FF195 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F195 0FF195 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F195 0FF195 16 F2 AE                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00F198 0FF198 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F198 0FF198 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F198 0FF198 16 F6 3D                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F19B 0FF19B 24 F8                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00F19D 0FF19D MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00F19D 0FF19D MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
00F19D 0FF19D 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
00F19F 0FF19F 86 02                                           LDAA    #2
00F1A1 0FF1A1 C6 20                                           LDAB    #" "
00F1A3 0FF1A3 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00F1A3 0FF1A3 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00F1A3 0FF1A3                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00F1A3 0FF1A3 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F1A3 0FF1A3 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1A3 0FF1A3 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1A3 0FF1A3 16 F2 AE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00F1A6 0FF1A6 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1A6 0FF1A6 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1A6 0FF1A6 16 F5 5E                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1A9 0FF1A9 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00F1AB 0FF1AB CD 00 00                                        LDY     #$0000
00F1AE 0FF1AE C6 02                                           LDAB    #2
00F1B0 0FF1B0 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00F1B0 0FF1B0 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00F1B0 0FF1B0 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
00F1B0 0FF1B0 16 F5 BE                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00F1B3 0FF1B3 B7 76                                           TFR     SP, Y
00F1B5 0FF1B5 40                                              NEGA
00F1B6 0FF1B6 8B 08                                           ADDA    #8
00F1B8 0FF1B8 C6 30                                           LDAB    #"0"
00F1BA 0FF1BA MACRO                                           STRING_fill_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00F1BA 0FF1BA MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00F1BA 0FF1BA                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00F1BA 0FF1BA MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F1BA 0FF1BA MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1BA 0FF1BA MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1BA 0FF1BA 16 F2 AE                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00F1BD 0FF1BD MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1BD 0FF1BD MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1BD 0FF1BD 16 F5 5E                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1C0 0FF1C0 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00F1C2 0FF1C2 C6 02                                           LDAB    #2
00F1C4 0FF1C4 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00F1C4 0FF1C4 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00F1C4 0FF1C4                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00F1C4 0FF1C4 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00F1C4 0FF1C4 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1C4 0FF1C4 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1C4 0FF1C4 16 F2 AE                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00F1C7 0FF1C7 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F1C7 0FF1C7 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F1C7 0FF1C7 16 F6 3D                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00F1CA 0FF1CA 24 F8                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00F1CC 0FF1CC MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00F1CC 0FF1CC MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
00F1CC 0FF1CC 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print new line
00F1CE 0FF1CE CE FC 35                                        LDX     #STRING_STR_NL
00F1D1 0FF1D1 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00F1D1 0FF1D1 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_PRINT_BL/STRING_CALL_BL)
00F1D1 0FF1D1                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_PRINT_BL/STRING_CALL_BL)
00F1D1 0FF1D1 MACRO                                           SCI_TX_READY_BL                                          (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00F1D1 0FF1D1 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1D1 0FF1D1 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00F1D1 0FF1D1 16 F2 AE                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_PRINT_BL/STRING_CALL_BL)
00F1D4 0FF1D4 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before pull operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack content (bytes)                                         (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1D4 0FF1D4 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1D4 0FF1D4 16 F5 43                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00F1D7 0FF1D7 24 F8                                           BCC     LOOP            ;function unsuccessful           (STRING_PRINT_BL/STRING_CALL_BL)
00F1D9 0FF1D9 06 F1 11                                        JOB     DEMO_LOOP
00F1DC 0FF1DC -> $F1DC                DEMO_CODE_END           EQU     *
00F1DC 0FF1DC -> $FF1DC               DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F762 0FF762                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
00F762 0FF762 54 68 69 73 20 69 73 20 DEMO_WELCOME            FCC     "This is the S12CBase Demo for the OpenBDC pod"
              74 68 65 20 53 31 32 43 
              42 61 73 65 20 44 65 6D 
              6F 20 66 6F 72 20 74 68 
              65 20 4F 70 65 6E 42 44 
              43 20 70 6F 64          
00F78F 0FF78F MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00F78F 0FF78F 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00F790 0FF790 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00F791 0FF791 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00F791 0FF791 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00F792 0FF792 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00F793 0FF793 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
00F7B1 0FF7B1 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00F7B1 0FF7B1 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00F7B2 0FF7B2 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00F7B3 0FF7B3 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
00F7D1 0FF7D1 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00F7D1 0FF7D1 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00F7D2 0FF7D2 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
00F7D3 0FF7D3 -> $F7D3                DEMO_TABS_END           EQU     *
00F7D3 0FF7D3 -> $FF7D3               DEMO_TABS_END_LIN       EQU     @
