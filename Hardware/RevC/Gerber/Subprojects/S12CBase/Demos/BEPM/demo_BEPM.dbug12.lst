                                      ;###############################################################################
                                      ;# S12CBase - Demo (BEPM)                                                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    January 30, 2015                                                         #
                                      ;#      - Updated during S12CBASE overhaul                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Memory map:
??????        -> $0001                MMAP_S12XEP100          EQU     1               ;S12XEP100
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;# COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;# ISTACK
??????        -> $0001                ISTACK_DEBUG            EQU     1               ;don't call WAI
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# STRING
??????        -> $0001                STRING_ENABLE_FILL_NB   EQU     1               ;enable STRING_FILL_NB
??????        -> $0001                STRING_ENABLE_FILL_BL   EQU     1               ;enable STRING_FILL_BL
??????        -> $0001                STRING_ENABLE_PRINTABLE EQU     1               ;enable STRING_PRINTABLE
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001000 0F5000                                         ORG     MMAP_RAM_START
                                      ;Code
001000 0F5000 -> $1000                START_OF_CODE           EQU     *
001000 0F5000 -> $1000                DEMO_CODE_START         EQU     *
001000 0F5000 -> $F5000               DEMO_CODE_START_LIN     EQU     @
001000 0F5000 -> $145F                BASE_CODE_START         EQU     DEMO_CODE_END
001000 0F5000 -> $F545F               BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Variables
001000 0F5000 -> $1AE4                DEMO_VARS_START         EQU     BASE_CODE_END
001000 0F5000 -> $F5AE4               DEMO_VARS_START_LIN     EQU     BASE_CODE_END_LIN
001000 0F5000 -> $1AE5                BASE_VARS_START         EQU     DEMO_VARS_END
001000 0F5000 -> $F5AE5               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
                                      ;Tables
001000 0F5000 -> $1B3E                DEMO_TABS_START         EQU     BASE_VARS_END
001000 0F5000 -> $F5B3E               DEMO_TABS_START_LIN     EQU     BASE_VARS_END_LIN
001000 0F5000 -> $1B82                BASE_TABS_START         EQU     DEMO_TABS_END
001000 0F5000 -> $F5B82               BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (BEPM)                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    January 30, 2015                                                         #
                                      ;#      - Updated during S12CBASE overhaul                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
001000 0F5000 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
001000 0F5000 -> $F42400              CLOCK_OSC_FREQ          EQU     16000000        ;16 MHz
001000 0F5000 -> $2FAF080             CLOCK_BUS_FREQ          EQU     50000000        ;50 MHz
001000 0F5000 -> $1E8480              CLOCK_REF_FREQ          EQU     2000000         ;2,000 MHz
001000 0F5000 -> $0003                CLOCK_VCOFRQ            EQU     3               ;VCO=100MHz
001000 0F5000 -> $0000                CLOCK_REFFRQ            EQU     0               ;Ref=2Mhz
                                      ;# SCI
001000 0F5000 -> $0001                SCI_FC_XONXOFF          EQU     1               ;XON/XOFF flow control
001000 0F5000 -> $0001                SCI_BD_OFF              EQU     1               ;no baud rate detection
001000 0F5000 -> $0001                SCI_BLOCKING_ON         EQU     1               ;blocking functions enbled by default
                                      ;# TIM
001000 0F5000 -> $0001                TIM_DIV2_ON             EQU     1               ;run TIM at half bus frequency
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AE5 0F5AE5                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001AE5 0F5AE5 -> $1AE5                GPIO_VARS_START         EQU     *
001AE5 0F5AE5 -> $F5AE5               GPIO_VARS_START_LIN     EQU     @
001AE5 0F5AE5                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001AE5 0F5AE5 -> $1AE5                MMAP_VARS_START         EQU     *
001AE5 0F5AE5 -> $F5AE5               MMAP_VARS_START_LIN     EQU     @
001AE5 0F5AE5                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
001AE5 0F5AE5 -> $1AE5                SSTACK_VARS_START       EQU     *
001AE5 0F5AE5 -> $F5AE5               SSTACK_VARS_START_LIN   EQU     @
001AE5 0F5AE5                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
001AE5 0F5AE5 -> $1AE5                ISTACK_VARS_START       EQU     *
001AE5 0F5AE5 -> $F5AE5               ISTACK_VARS_START_LIN   EQU     @
001B09 0F5B09                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
001B09 0F5B09 -> $1B09                CLOCK_VARS_START        EQU     *
001B09 0F5B09 -> $F5B09               CLOCK_VARS_START_LIN    EQU     @
001B09 0F5B09                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001B09 0F5B09 -> $1B09                COP_VARS_START          EQU     *
001B09 0F5B09 -> $F5B09               COP_VARS_START_LIN      EQU     @
001B09 0F5B09                                                 ORG     COP_VARS_END, COP_VARS_END_LIN
001B09 0F5B09 -> $1B09                TIM_VARS_START          EQU     *
001B09 0F5B09 -> $F5B09               TIM_VARS_START_LIN      EQU     @
001B09 0F5B09                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001B09 0F5B09 -> $1B09                SCI_VARS_START          EQU     *
001B09 0F5B09 -> $F5B09               SCI_VARS_START_LIN      EQU     @
001B3A 0F5B3A                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
001B3A 0F5B3A -> $1B3A                STRING_VARS_START       EQU     *
001B3A 0F5B3A -> $F5B3A               STRING_VARS_START_LIN   EQU     @
001B3A 0F5B3A                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
001B3A 0F5B3A -> $1B3A                RESET_VARS_START        EQU     *
001B3A 0F5B3A -> $F5B3A               RESET_VARS_START_LIN    EQU     @
001B3E 0F5B3E                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
001B3E 0F5B3E -> $1B3E                NUM_VARS_START          EQU     *
001B3E 0F5B3E -> $F5B3E               NUM_VARS_START_LIN      EQU     @
001B3E 0F5B3E                                                 ORG     NUM_VARS_END, NUM_VARS_END_LIN
001B3E 0F5B3E -> $1B3E                VECTAB_VARS_START       EQU     *
001B3E 0F5B3E -> $F5B3E               VECTAB_VARS_START_LIN   EQU     @
001B3E 0F5B3E                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001B3E 0F5B3E -> $1B3E                BASE_VARS_END           EQU     *
001B3E 0F5B3E -> $F5B3E               BASE_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00145F 0F545F                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
00145F 0F545F -> $145F                GPIO_CODE_START         EQU     *
00145F 0F545F -> $F545F               GPIO_CODE_START_LIN     EQU     @
00145F 0F545F                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
00145F 0F545F -> $145F                MMAP_CODE_START         EQU     *
00145F 0F545F -> $F545F               MMAP_CODE_START_LIN     EQU     @
001465 0F5465                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
001465 0F5465 -> $1465                SSTACK_CODE_START       EQU     *
001465 0F5465 -> $F5465               SSTACK_CODE_START_LIN   EQU     @
001471 0F5471                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
001471 0F5471 -> $1471                ISTACK_CODE_START       EQU     *
001471 0F5471 -> $F5471               ISTACK_CODE_START_LIN   EQU     @
001471 0F5471                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
001471 0F5471 -> $1471                CLOCK_CODE_START        EQU     *
001471 0F5471 -> $F5471               CLOCK_CODE_START_LIN    EQU     @
001488 0F5488                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
001488 0F5488 -> $1488                COP_CODE_START          EQU     *
001488 0F5488 -> $F5488               COP_CODE_START_LIN      EQU     @
001488 0F5488                                                 ORG     COP_CODE_END, COP_CODE_END_LIN
001488 0F5488 -> $1488                TIM_CODE_START          EQU     *
001488 0F5488 -> $F5488               TIM_CODE_START_LIN      EQU     @
001488 0F5488                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
001488 0F5488 -> $1488                SCI_CODE_START          EQU     *
001488 0F5488 -> $F5488               SCI_CODE_START_LIN      EQU     @
0018AE 0F58AE                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
0018AE 0F58AE -> $18AE                STRING_CODE_START       EQU     *
0018AE 0F58AE -> $F58AE               STRING_CODE_START_LIN   EQU     @
0019AD 0F59AD                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
0019AD 0F59AD -> $19AD                RESET_CODE_START        EQU     *
0019AD 0F59AD -> $F59AD               RESET_CODE_START_LIN    EQU     @
0019E0 0F59E0                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
0019E0 0F59E0 -> $19E0                NUM_CODE_START          EQU     *
0019E0 0F59E0 -> $F59E0               NUM_CODE_START_LIN      EQU     @
001AE4 0F5AE4                                                 ORG     NUM_CODE_END, NUM_CODE_END_LIN
001AE4 0F5AE4 -> $1AE4                VECTAB_CODE_START       EQU     *
001AE4 0F5AE4 -> $F5AE4               VECTAB_CODE_START_LIN   EQU     @
001AE4 0F5AE4                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
001AE4 0F5AE4 -> $1AE4                BASE_CODE_END           EQU     *
001AE4 0F5AE4 -> $F5AE4               BASE_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001B82 0F5B82                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
                                      ;#Welcome message
001B82 0F5B82 48 65 6C 6C 6F 2C 20 74 WELCOME_MESSAGE         FCC     "Hello, this is the S12CBase demo!"
              68 69 73 20 69 73 20 74 
              68 65 20 53 31 32 43 42 
              61 73 65 20 64 65 6D 6F 
              21                      
001BA3 0F5BA3 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001BA3 0F5BA3 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001BA4 0F5BA4 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
                                      ;#Error message format
001BA5 0F5BA5 46 41 54 41 4C 20 45 52 ERROR_HEADER            FCS     "FATAL ERROR! "
              52 4F 52 21 A0          
001BB2 0F5BB2 21                      ERROR_TRAILER           FCC     "!"
001BB3 0F5BB3 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001BB3 0F5BB3 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001BB4 0F5BB4 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
001BB5 0F5BB5 -> $1BB5                GPIO_TABS_START         EQU     *
001BB5 0F5BB5 -> $F5BB5               GPIO_TABS_START_LIN     EQU     @
001BB5 0F5BB5                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
001BB5 0F5BB5 -> $1BB5                MMAP_TABS_START         EQU     *
001BB5 0F5BB5 -> $F5BB5               MMAP_TABS_START_LIN     EQU     @
001BBE 0F5BBE                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
001BBE 0F5BBE -> $1BBE                SSTACK_TABS_START       EQU     *
001BBE 0F5BBE -> $F5BBE               SSTACK_TABS_START_LIN   EQU     @
001BF5 0F5BF5                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
001BF5 0F5BF5 -> $1BF5                ISTACK_TABS_START       EQU     *
001BF5 0F5BF5 -> $F5BF5               ISTACK_TABS_START_LIN   EQU     @
001BF5 0F5BF5                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
001BF5 0F5BF5 -> $1BF5                CLOCK_TABS_START        EQU     *
001BF5 0F5BF5 -> $F5BF5               CLOCK_TABS_START_LIN    EQU     @
001BF5 0F5BF5                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
001BF5 0F5BF5 -> $1BF5                COP_TABS_START          EQU     *
001BF5 0F5BF5 -> $F5BF5               COP_TABS_START_LIN      EQU     @
001BF5 0F5BF5                                                 ORG     COP_TABS_END, COP_TABS_END_LIN
001BF5 0F5BF5 -> $1BF5                TIM_TABS_START          EQU     *
001BF5 0F5BF5 -> $F5BF5               TIM_TABS_START_LIN      EQU     @
001BF5 0F5BF5                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
001BF5 0F5BF5 -> $1BF5                SCI_TABS_START          EQU     *
001BF5 0F5BF5 -> $F5BF5               SCI_TABS_START_LIN      EQU     @
001C06 0F5C06                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
001C06 0F5C06 -> $1C06                STRING_TABS_START       EQU     *
001C06 0F5C06 -> $F5C06               STRING_TABS_START_LIN   EQU     @
001C08 0F5C08                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
001C08 0F5C08 -> $1C08                RESET_TABS_START        EQU     *
001C08 0F5C08 -> $F5C08               RESET_TABS_START_LIN    EQU     @
001C55 0F5C55                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
001C55 0F5C55 -> $1C55                NUM_TABS_START          EQU     *
001C55 0F5C55 -> $F5C55               NUM_TABS_START_LIN      EQU     @
001C66 0F5C66                                                 ORG     NUM_TABS_END, NUM_TABS_END_LIN
001C66 0F5C66 -> $1C66                VECTAB_TABS_START       EQU     *
001C66 0F5C66 -> $F5C66               VECTAB_TABS_START_LIN   EQU     @
001CD8 0F5CD8                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
001CD8 0F5CD8 -> $1CD8                BASE_TABS_END           EQU     *
001CD8 0F5CD8 -> $F5CD8               BASE_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
001CD8 0F5CD8 S12X CODE:                                      CPU     S12X
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (BEPM)                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12XEP100.                   #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;##################################
                                      ;# S12XEP100 Register Definitions #
                                      ;##################################
001CD8 0F5CD8 -> $0000                PORTA           EQU     $0000
001CD8 0F5CD8 -> $0080                PTA7            EQU     $80
001CD8 0F5CD8 -> $0040                PTA6            EQU     $40
001CD8 0F5CD8 -> $0020                PTA5            EQU     $20
001CD8 0F5CD8 -> $0010                PTA4            EQU     $10
001CD8 0F5CD8 -> $0008                PTA3            EQU     $08
001CD8 0F5CD8 -> $0004                PTA2            EQU     $04
001CD8 0F5CD8 -> $0002                PTA1            EQU     $02
001CD8 0F5CD8 -> $0001                PTA0            EQU     $01
001CD8 0F5CD8 -> $0080                PA7             EQU     $80
001CD8 0F5CD8 -> $0040                PA6             EQU     $40
001CD8 0F5CD8 -> $0020                PA5             EQU     $20
001CD8 0F5CD8 -> $0010                PA4             EQU     $10
001CD8 0F5CD8 -> $0008                PA3             EQU     $08
001CD8 0F5CD8 -> $0004                PA2             EQU     $04
001CD8 0F5CD8 -> $0002                PA1             EQU     $02
001CD8 0F5CD8 -> $0001                PA0             EQU     $01
001CD8 0F5CD8 -> $0001                PORTB           EQU     $0001
001CD8 0F5CD8 -> $0080                PTB7            EQU     $80
001CD8 0F5CD8 -> $0040                PTB6            EQU     $40
001CD8 0F5CD8 -> $0020                PTB5            EQU     $20
001CD8 0F5CD8 -> $0010                PTB4            EQU     $10
001CD8 0F5CD8 -> $0008                PTB3            EQU     $08
001CD8 0F5CD8 -> $0004                PTB2            EQU     $04
001CD8 0F5CD8 -> $0002                PTB1            EQU     $02
001CD8 0F5CD8 -> $0001                PTB0            EQU     $01
001CD8 0F5CD8 -> $0080                PB7             EQU     $80
001CD8 0F5CD8 -> $0040                PB6             EQU     $40
001CD8 0F5CD8 -> $0020                PB5             EQU     $20
001CD8 0F5CD8 -> $0010                PB4             EQU     $10
001CD8 0F5CD8 -> $0008                PB3             EQU     $08
001CD8 0F5CD8 -> $0004                PB2             EQU     $04
001CD8 0F5CD8 -> $0002                PB1             EQU     $02
001CD8 0F5CD8 -> $0001                PB0             EQU     $01
001CD8 0F5CD8 -> $0002                DDRA            EQU     $0002
001CD8 0F5CD8 -> $0080                DDRA7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRA6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRA5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRA4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRA3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRA2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRA1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRA0           EQU     $01
001CD8 0F5CD8 -> $0003                DDRB            EQU     $0003
001CD8 0F5CD8 -> $0080                DDRB7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRB6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRB5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRB4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRB3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRB2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRB1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRB0           EQU     $01
001CD8 0F5CD8 -> $0004                PORTC           EQU     $0004
001CD8 0F5CD8 -> $0080                PTC7            EQU     $80
001CD8 0F5CD8 -> $0040                PTC6            EQU     $40
001CD8 0F5CD8 -> $0020                PTC5            EQU     $20
001CD8 0F5CD8 -> $0010                PTC4            EQU     $10
001CD8 0F5CD8 -> $0008                PTC3            EQU     $08
001CD8 0F5CD8 -> $0004                PTC2            EQU     $04
001CD8 0F5CD8 -> $0002                PTC1            EQU     $02
001CD8 0F5CD8 -> $0001                PTC0            EQU     $01
001CD8 0F5CD8 -> $0080                PC7             EQU     $80
001CD8 0F5CD8 -> $0040                PC6             EQU     $40
001CD8 0F5CD8 -> $0020                PC5             EQU     $20
001CD8 0F5CD8 -> $0010                PC4             EQU     $10
001CD8 0F5CD8 -> $0008                PC3             EQU     $08
001CD8 0F5CD8 -> $0004                PC2             EQU     $04
001CD8 0F5CD8 -> $0002                PC1             EQU     $02
001CD8 0F5CD8 -> $0001                PC0             EQU     $01
001CD8 0F5CD8 -> $0005                PORTD           EQU     $0005
001CD8 0F5CD8 -> $0080                PTD7            EQU     $80
001CD8 0F5CD8 -> $0040                PTD6            EQU     $40
001CD8 0F5CD8 -> $0020                PTD5            EQU     $20
001CD8 0F5CD8 -> $0010                PTD4            EQU     $10
001CD8 0F5CD8 -> $0008                PTD3            EQU     $08
001CD8 0F5CD8 -> $0004                PTD2            EQU     $04
001CD8 0F5CD8 -> $0002                PTD1            EQU     $02
001CD8 0F5CD8 -> $0001                PTD0            EQU     $01
001CD8 0F5CD8 -> $0080                PD7             EQU     $80
001CD8 0F5CD8 -> $0040                PD6             EQU     $40
001CD8 0F5CD8 -> $0020                PD5             EQU     $20
001CD8 0F5CD8 -> $0010                PD4             EQU     $10
001CD8 0F5CD8 -> $0008                PD3             EQU     $08
001CD8 0F5CD8 -> $0004                PD2             EQU     $04
001CD8 0F5CD8 -> $0002                PD1             EQU     $02
001CD8 0F5CD8 -> $0001                PD0             EQU     $01
001CD8 0F5CD8 -> $0006                DDRC            EQU     $0006
001CD8 0F5CD8 -> $0080                DDRC7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRC6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRC5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRC4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRC3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRC2           EQU     $04
001CD8 0F5CD8 -> $0007                DDRD            EQU     $0007
001CD8 0F5CD8 -> $0080                DDRD7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRD6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRD5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRD4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRD3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRD2           EQU     $04
001CD8 0F5CD8 -> $0008                PORTE           EQU     $0008
001CD8 0F5CD8 -> $0080                PTE7            EQU     $80
001CD8 0F5CD8 -> $0040                PTE6            EQU     $40
001CD8 0F5CD8 -> $0020                PTE5            EQU     $20
001CD8 0F5CD8 -> $0010                PTE4            EQU     $10
001CD8 0F5CD8 -> $0008                PTE3            EQU     $08
001CD8 0F5CD8 -> $0004                PTE2            EQU     $04
001CD8 0F5CD8 -> $0002                PTE1            EQU     $02
001CD8 0F5CD8 -> $0001                PTE0            EQU     $01
001CD8 0F5CD8 -> $0080                PE7             EQU     $80
001CD8 0F5CD8 -> $0040                PE6             EQU     $40
001CD8 0F5CD8 -> $0020                PE5             EQU     $20
001CD8 0F5CD8 -> $0010                PE4             EQU     $10
001CD8 0F5CD8 -> $0008                PE3             EQU     $08
001CD8 0F5CD8 -> $0004                PE2             EQU     $04
001CD8 0F5CD8 -> $0002                PE1             EQU     $02
001CD8 0F5CD8 -> $0001                PE0             EQU     $01
001CD8 0F5CD8 -> $0009                DDRE            EQU     $0009
001CD8 0F5CD8 -> $0080                DDRE7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRE6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRE5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRE4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRE3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRE2           EQU     $04
001CD8 0F5CD8 -> $000A                MMCCTL0         EQU     $000A
001CD8 0F5CD8 -> $0080                CS3E1           EQU     $80
001CD8 0F5CD8 -> $0040                CS3E0           EQU     $40
001CD8 0F5CD8 -> $0020                CS2E1           EQU     $20
001CD8 0F5CD8 -> $0010                CS2E0           EQU     $10
001CD8 0F5CD8 -> $0008                CS1E1           EQU     $08
001CD8 0F5CD8 -> $0004                CS1E0           EQU     $04
001CD8 0F5CD8 -> $0002                CS0E1           EQU     $02
001CD8 0F5CD8 -> $0001                CS0E0           EQU     $01
001CD8 0F5CD8 -> $000B                MODE            EQU     $000B
001CD8 0F5CD8 -> $0080                MODC            EQU     $80
001CD8 0F5CD8 -> $0040                MODB            EQU     $40
001CD8 0F5CD8 -> $0020                MODA            EQU     $20
001CD8 0F5CD8 -> $000C                PUCR            EQU     $000C
001CD8 0F5CD8 -> $0080                PUPKE           EQU     $80
001CD8 0F5CD8 -> $0040                BKPUE           EQU     $40
001CD8 0F5CD8 -> $0010                PUPEE           EQU     $10
001CD8 0F5CD8 -> $0008                PUPDE           EQU     $08
001CD8 0F5CD8 -> $0004                PUPCE           EQU     $04
001CD8 0F5CD8 -> $0002                PUPBE           EQU     $02
001CD8 0F5CD8 -> $0001                PUPAE           EQU     $01
001CD8 0F5CD8 -> $000D                RDRIV           EQU     $000D
001CD8 0F5CD8 -> $0080                RDPK            EQU     $80
001CD8 0F5CD8 -> $0010                RDPE            EQU     $10
001CD8 0F5CD8 -> $0008                RDPD            EQU     $08
001CD8 0F5CD8 -> $0004                RDPC            EQU     $04
001CD8 0F5CD8 -> $0002                RDPB            EQU     $02
001CD8 0F5CD8 -> $0001                RDPA            EQU     $01
001CD8 0F5CD8 -> $000E                EBICTL0         EQU     $000E
001CD8 0F5CD8 -> $0080                ITHRS           EQU     $80
001CD8 0F5CD8 -> $0040                HDBE            EQU     $40
001CD8 0F5CD8 -> $0010                ASIZ4           EQU     $10
001CD8 0F5CD8 -> $0008                ASIZ3           EQU     $08
001CD8 0F5CD8 -> $0004                ASIZ2           EQU     $04
001CD8 0F5CD8 -> $0002                ASIZ1           EQU     $02
001CD8 0F5CD8 -> $0001                ASIZ0           EQU     $01
001CD8 0F5CD8 -> $000F                EBICTL1         EQU     $000F
001CD8 0F5CD8 -> $0040                EXSTR12         EQU     $40
001CD8 0F5CD8 -> $0020                EXSTR11         EQU     $20
001CD8 0F5CD8 -> $0010                EXSTR10         EQU     $10
001CD8 0F5CD8 -> $0004                EXSTR02         EQU     $04
001CD8 0F5CD8 -> $0002                EXSTR01         EQU     $02
001CD8 0F5CD8 -> $0001                EXSTR00         EQU     $01
001CD8 0F5CD8 -> $0010                GPAGE           EQU     $0010
001CD8 0F5CD8 -> $0040                GP6             EQU     $40
001CD8 0F5CD8 -> $0020                GP5             EQU     $20
001CD8 0F5CD8 -> $0010                GP4             EQU     $10
001CD8 0F5CD8 -> $0008                GP3             EQU     $08
001CD8 0F5CD8 -> $0004                GP2             EQU     $04
001CD8 0F5CD8 -> $0002                GP1             EQU     $02
001CD8 0F5CD8 -> $0001                GP0             EQU     $01
001CD8 0F5CD8 -> $0011                DIRECT          EQU     $0011
001CD8 0F5CD8 -> $0080                DP15            EQU     $80
001CD8 0F5CD8 -> $0040                DP14            EQU     $40
001CD8 0F5CD8 -> $0020                DP13            EQU     $20
001CD8 0F5CD8 -> $0010                DP12            EQU     $10
001CD8 0F5CD8 -> $0008                DP11            EQU     $08
001CD8 0F5CD8 -> $0004                DP10            EQU     $04
001CD8 0F5CD8 -> $0002                DP9             EQU     $02
001CD8 0F5CD8 -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
001CD8 0F5CD8 -> $0013                MMCCTL1         EQU     $0013
001CD8 0F5CD8 -> $0080                TGMRAMON        EQU     $80
001CD8 0F5CD8 -> $0020                EEEIFRON        EQU     $20
001CD8 0F5CD8 -> $0010                PGMIFRON        EQU     $10
001CD8 0F5CD8 -> $0008                RAMHM           EQU     $08
001CD8 0F5CD8 -> $0004                EROMON          EQU     $04
001CD8 0F5CD8 -> $0002                ROMHM           EQU     $02
001CD8 0F5CD8 -> $0001                ROMON           EQU     $01
                                      ;$0014 reserved
001CD8 0F5CD8 -> $0015                PPAGE           EQU     $0015
001CD8 0F5CD8 -> $0080                PIX7            EQU     $80
001CD8 0F5CD8 -> $0040                PIX6            EQU     $40
001CD8 0F5CD8 -> $0020                PIX5            EQU     $20
001CD8 0F5CD8 -> $0010                PIX4            EQU     $10
001CD8 0F5CD8 -> $0008                PIX3            EQU     $08
001CD8 0F5CD8 -> $0004                PIX2            EQU     $04
001CD8 0F5CD8 -> $0002                PIX1            EQU     $02
001CD8 0F5CD8 -> $0001                PIX0            EQU     $01
001CD8 0F5CD8 -> $0016                RPAGE           EQU     $0016
001CD8 0F5CD8 -> $0080                RP7             EQU     $80
001CD8 0F5CD8 -> $0040                RP6             EQU     $40
001CD8 0F5CD8 -> $0020                RP5             EQU     $20
001CD8 0F5CD8 -> $0010                RP4             EQU     $10
001CD8 0F5CD8 -> $0008                RP3             EQU     $08
001CD8 0F5CD8 -> $0004                RP2             EQU     $04
001CD8 0F5CD8 -> $0002                RP1             EQU     $02
001CD8 0F5CD8 -> $0001                RP0             EQU     $01
001CD8 0F5CD8 -> $0017                EPAGE           EQU     $0017
001CD8 0F5CD8 -> $0080                EP7             EQU     $80
001CD8 0F5CD8 -> $0040                EP6             EQU     $40
001CD8 0F5CD8 -> $0020                EP5             EQU     $20
001CD8 0F5CD8 -> $0010                EP4             EQU     $10
001CD8 0F5CD8 -> $0008                EP3             EQU     $08
001CD8 0F5CD8 -> $0004                EP2             EQU     $04
001CD8 0F5CD8 -> $0002                EP1             EQU     $02
001CD8 0F5CD8 -> $0001                EP0             EQU     $01
                                      ;$0018 to $0019 reserved
001CD8 0F5CD8 -> $001A                PARTIDH         EQU     $001A
001CD8 0F5CD8 -> $0080                ID15            EQU     $80
001CD8 0F5CD8 -> $0040                ID14            EQU     $40
001CD8 0F5CD8 -> $0020                ID13            EQU     $20
001CD8 0F5CD8 -> $0010                ID12            EQU     $10
001CD8 0F5CD8 -> $0008                ID11            EQU     $08
001CD8 0F5CD8 -> $0004                ID10            EQU     $04
001CD8 0F5CD8 -> $0002                ID9             EQU     $02
001CD8 0F5CD8 -> $0001                ID8             EQU     $01
001CD8 0F5CD8 -> $001B                PARTIDL         EQU     $001B
001CD8 0F5CD8 -> $0080                ID7             EQU     $80
001CD8 0F5CD8 -> $0040                ID6             EQU     $40
001CD8 0F5CD8 -> $0020                ID5             EQU     $20
001CD8 0F5CD8 -> $0010                ID4             EQU     $10
001CD8 0F5CD8 -> $0008                ID3             EQU     $08
001CD8 0F5CD8 -> $0004                ID2             EQU     $04
001CD8 0F5CD8 -> $0002                ID1             EQU     $02
001CD8 0F5CD8 -> $0001                ID0             EQU     $01
001CD8 0F5CD8 -> $001C                ECLKCTL         EQU     $001C
001CD8 0F5CD8 -> $0080                NECLK           EQU     $80
001CD8 0F5CD8 -> $0040                NCLKX2          EQU     $40
001CD8 0F5CD8 -> $0020                DIV16           EQU     $20
001CD8 0F5CD8 -> $0010                EDIV4           EQU     $10
001CD8 0F5CD8 -> $0008                EDIV3           EQU     $08
001CD8 0F5CD8 -> $0004                EDIV2           EQU     $04
001CD8 0F5CD8 -> $0002                EDIV1           EQU     $02
001CD8 0F5CD8 -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
001CD8 0F5CD8 -> $001E                IRQCR           EQU     $001E
001CD8 0F5CD8 -> $0080                IRQE            EQU     $80
001CD8 0F5CD8 -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
001CD8 0F5CD8 -> $0020                DBGC1           EQU     $0020
001CD8 0F5CD8 -> $0080                ARM             EQU     $80
001CD8 0F5CD8 -> $0040                TRIG            EQU     $40
001CD8 0F5CD8 -> $0020                XGSBPE          EQU     $20
001CD8 0F5CD8 -> $0010                BDM             EQU     $10
001CD8 0F5CD8 -> $0004                DBGBRK          EQU     $04
001CD8 0F5CD8 -> $0001                COMRV           EQU     $01
001CD8 0F5CD8 -> $0021                DBGSR           EQU     $0021
001CD8 0F5CD8 -> $0080                TBF             EQU     $80
001CD8 0F5CD8 -> $0040                EXTF            EQU     $40
001CD8 0F5CD8 -> $0004                SSF2            EQU     $04
001CD8 0F5CD8 -> $0002                SSF1            EQU     $02
001CD8 0F5CD8 -> $0001                SSF0            EQU     $01
001CD8 0F5CD8 -> $0022                DBGTCR          EQU     $0022
001CD8 0F5CD8 -> $00C0                TSOURCE         EQU     $C0
001CD8 0F5CD8 -> $0030                TRANGE          EQU     $30
001CD8 0F5CD8 -> $000C                TRCMOD          EQU     $0C
001CD8 0F5CD8 -> $0003                TALIGN          EQU     $03
001CD8 0F5CD8 -> $0023                DBGC2           EQU     $0023
001CD8 0F5CD8 -> $000C                CDCM            EQU     $0C
001CD8 0F5CD8 -> $0003                ABCM            EQU     $03
001CD8 0F5CD8 -> $0024                DBGTBH          EQU     $0024
001CD8 0F5CD8 -> $0080                DBGTB15         EQU     $80
001CD8 0F5CD8 -> $0040                DBGTB14         EQU     $40
001CD8 0F5CD8 -> $0020                DBGTB13         EQU     $20
001CD8 0F5CD8 -> $0010                DBGTB12         EQU     $10
001CD8 0F5CD8 -> $0008                DBGTB11         EQU     $08
001CD8 0F5CD8 -> $0004                DBGTB10         EQU     $04
001CD8 0F5CD8 -> $0002                DBGTB9          EQU     $02
001CD8 0F5CD8 -> $0001                DBGTB8          EQU     $01
001CD8 0F5CD8 -> $0025                DBGTBL          EQU     $0025
001CD8 0F5CD8 -> $0080                DBGTB7          EQU     $80
001CD8 0F5CD8 -> $0040                DBGTB6          EQU     $40
001CD8 0F5CD8 -> $0020                DBGTB5          EQU     $20
001CD8 0F5CD8 -> $0010                DBGTB4          EQU     $10
001CD8 0F5CD8 -> $0008                DBGTB3          EQU     $08
001CD8 0F5CD8 -> $0004                DBGTB2          EQU     $04
001CD8 0F5CD8 -> $0002                DBGTB1          EQU     $02
001CD8 0F5CD8 -> $0001                DBGTB0          EQU     $01
001CD8 0F5CD8 -> $0026                DBGCNT          EQU     $0026
001CD8 0F5CD8 -> $0027                DBGSCRX         EQU     $0027
001CD8 0F5CD8 -> $0008                SC3             EQU     $08
001CD8 0F5CD8 -> $0004                SC2             EQU     $04
001CD8 0F5CD8 -> $0002                SC1             EQU     $02
001CD8 0F5CD8 -> $0001                SC0             EQU     $01
001CD8 0F5CD8 -> $0027                DBGMFR          EQU     $0027
001CD8 0F5CD8 -> $0008                MC3             EQU     $08
001CD8 0F5CD8 -> $0004                MC2             EQU     $04
001CD8 0F5CD8 -> $0002                MC1             EQU     $02
001CD8 0F5CD8 -> $0001                MC0             EQU     $01
001CD8 0F5CD8 -> $0028                DBGXCTL         EQU     $0028
001CD8 0F5CD8 -> $0080                SZE             EQU     $80
001CD8 0F5CD8 -> $0040                SZ              EQU     $40
001CD8 0F5CD8 -> $0020                TAG             EQU     $20
001CD8 0F5CD8 -> $0010                BRK             EQU     $10
001CD8 0F5CD8 -> $0008                RW              EQU     $08
001CD8 0F5CD8 -> $0004                RWE             EQU     $04
001CD8 0F5CD8 -> $0002                SRC             EQU     $02
001CD8 0F5CD8 -> $0001                COMPE           EQU     $01
001CD8 0F5CD8 -> $0029                DBGXAH          EQU    $0029
001CD8 0F5CD8 -> $0040                DBGXA22         EQU    $40
001CD8 0F5CD8 -> $0020                DBGXA21         EQU    $20
001CD8 0F5CD8 -> $0010                DBGXA20         EQU    $10
001CD8 0F5CD8 -> $0008                DBGXA19         EQU    $08
001CD8 0F5CD8 -> $0004                DBGXA18         EQU    $04
001CD8 0F5CD8 -> $0002                DBGXA17         EQU    $02
001CD8 0F5CD8 -> $0001                DBGXA16         EQU    $01
001CD8 0F5CD8 -> $002A                DBGXAM          EQU     $002A
001CD8 0F5CD8 -> $0080                DBGXA15         EQU     $80
001CD8 0F5CD8 -> $0040                DBGXA14         EQU     $40
001CD8 0F5CD8 -> $0020                DBGXA13         EQU     $20
001CD8 0F5CD8 -> $0010                DBGXA12         EQU     $10
001CD8 0F5CD8 -> $0008                DBGXA11         EQU     $08
001CD8 0F5CD8 -> $0004                DBGXA10         EQU     $04
001CD8 0F5CD8 -> $0002                DBGXA9          EQU     $02
001CD8 0F5CD8 -> $0001                DBGXA8          EQU     $01
001CD8 0F5CD8 -> $002B                DBGXAL          EQU     $002B
001CD8 0F5CD8 -> $0080                DBGXA7          EQU     $80
001CD8 0F5CD8 -> $0040                DBGXA6          EQU     $40
001CD8 0F5CD8 -> $0020                DBGXA5          EQU     $20
001CD8 0F5CD8 -> $0010                DBGXA4          EQU     $10
001CD8 0F5CD8 -> $0008                DBGXA3          EQU     $08
001CD8 0F5CD8 -> $0004                DBGXA2          EQU     $04
001CD8 0F5CD8 -> $0002                DBGXA1          EQU     $02
001CD8 0F5CD8 -> $0001                DBGXA0          EQU     $01
001CD8 0F5CD8 -> $002C                DBGXDH          EQU     $002C
001CD8 0F5CD8 -> $0080                DBGXD15         EQU     $80
001CD8 0F5CD8 -> $0040                DBGXD14         EQU     $40
001CD8 0F5CD8 -> $0020                DBGXD13         EQU     $20
001CD8 0F5CD8 -> $0010                DBGXD12         EQU     $10
001CD8 0F5CD8 -> $0008                DBGXD11         EQU     $08
001CD8 0F5CD8 -> $0004                DBGXD10         EQU     $04
001CD8 0F5CD8 -> $0002                DBGXD9          EQU     $02
001CD8 0F5CD8 -> $0001                DBGXD8          EQU     $01
001CD8 0F5CD8 -> $002D                DBGXDL          EQU     $002D
001CD8 0F5CD8 -> $0080                DBGXD7          EQU     $80
001CD8 0F5CD8 -> $0040                DBGXD6          EQU     $40
001CD8 0F5CD8 -> $0020                DBGXD5          EQU     $20
001CD8 0F5CD8 -> $0010                DBGXD4          EQU     $10
001CD8 0F5CD8 -> $0008                DBGXD3          EQU     $08
001CD8 0F5CD8 -> $0004                DBGXD2          EQU     $04
001CD8 0F5CD8 -> $0002                DBGXD1          EQU     $02
001CD8 0F5CD8 -> $0001                DBGXD0          EQU     $01
001CD8 0F5CD8 -> $002E                DBGXDHM         EQU     $002E
001CD8 0F5CD8 -> $0080                DBGXDM15        EQU     $80
001CD8 0F5CD8 -> $0040                DBGXDM14        EQU     $40
001CD8 0F5CD8 -> $0020                DBGXDM13        EQU     $20
001CD8 0F5CD8 -> $0010                DBGXDM12        EQU     $10
001CD8 0F5CD8 -> $0008                DBGXDM11        EQU     $08
001CD8 0F5CD8 -> $0004                DBGXDM10        EQU     $04
001CD8 0F5CD8 -> $0002                DBGXDM9         EQU     $02
001CD8 0F5CD8 -> $0001                DBGXDM8         EQU     $01
001CD8 0F5CD8 -> $002F                DBGXDLM         EQU     $002F
001CD8 0F5CD8 -> $0080                DBGXDM7         EQU     $80
001CD8 0F5CD8 -> $0040                DBGXDM6         EQU     $40
001CD8 0F5CD8 -> $0020                DBGXDM5         EQU     $20
001CD8 0F5CD8 -> $0010                DBGXDM4         EQU     $10
001CD8 0F5CD8 -> $0008                DBGXDM3         EQU     $08
001CD8 0F5CD8 -> $0004                DBGXDM2         EQU     $04
001CD8 0F5CD8 -> $0002                DBGXDM1         EQU     $02
001CD8 0F5CD8 -> $0001                DBGXDM0         EQU     $01
                                      ;$0030 to $0031 reserved
001CD8 0F5CD8 -> $0032                PORTK           EQU     $0032
001CD8 0F5CD8 -> $0080                PTK7            EQU     $80
001CD8 0F5CD8 -> $0040                PTK6            EQU     $40
001CD8 0F5CD8 -> $0020                PTK5            EQU     $20
001CD8 0F5CD8 -> $0010                PTK4            EQU     $10
001CD8 0F5CD8 -> $0008                PTK3            EQU     $08
001CD8 0F5CD8 -> $0004                PTK2            EQU     $04
001CD8 0F5CD8 -> $0002                PTK1            EQU     $02
001CD8 0F5CD8 -> $0001                PK0             EQU     $01
001CD8 0F5CD8 -> $0080                PK7             EQU     $80
001CD8 0F5CD8 -> $0040                PK6             EQU     $40
001CD8 0F5CD8 -> $0020                PK5             EQU     $20
001CD8 0F5CD8 -> $0010                PK4             EQU     $10
001CD8 0F5CD8 -> $0008                PK3             EQU     $08
001CD8 0F5CD8 -> $0004                PK2             EQU     $04
001CD8 0F5CD8 -> $0002                PK1             EQU     $02
001CD8 0F5CD8 -> $0001                PK0             EQU     $01
001CD8 0F5CD8 -> $0033                DDRK            EQU     $0033
001CD8 0F5CD8 -> $0080                DDRK7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRK6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRK5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRK4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRK3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRK2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRK1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRK0           EQU     $01
001CD8 0F5CD8 -> $0034                SYNR            EQU     $0034
001CD8 0F5CD8 -> $0080                VCOFRQ1         EQU     $80
001CD8 0F5CD8 -> $0040                VCOFRQ0         EQU     $40
001CD8 0F5CD8 -> $0020                SYNDIV5         EQU     $20
001CD8 0F5CD8 -> $0010                SYNDIV4         EQU     $10
001CD8 0F5CD8 -> $0008                SYNDIV3         EQU     $08
001CD8 0F5CD8 -> $0004                SYNDIV2         EQU     $04
001CD8 0F5CD8 -> $0002                SYNDIV1         EQU     $02
001CD8 0F5CD8 -> $0001                SYNDIV0         EQU     $01
001CD8 0F5CD8 -> $0035                REFDV           EQU     $0035
001CD8 0F5CD8 -> $0080                REFFRQ1         EQU     $80
001CD8 0F5CD8 -> $0040                REFFRQ0         EQU     $40
001CD8 0F5CD8 -> $0008                REFDIV3         EQU     $08
001CD8 0F5CD8 -> $0004                REFDIV2         EQU     $04
001CD8 0F5CD8 -> $0002                REFDIV1         EQU     $02
001CD8 0F5CD8 -> $0001                REFDIV0         EQU     $01
001CD8 0F5CD8 -> $0036                POSTDIV         EQU     $0036
001CD8 0F5CD8 -> $0010                POSTDIV4        EQU     $10
001CD8 0F5CD8 -> $0008                POSTDIV3        EQU     $08
001CD8 0F5CD8 -> $0004                POSTDIV2        EQU     $04
001CD8 0F5CD8 -> $0002                POSTDIV1        EQU     $02
001CD8 0F5CD8 -> $0001                POSTDIV0        EQU     $01
001CD8 0F5CD8 -> $0037                CRGFLG          EQU     $0037
001CD8 0F5CD8 -> $0080                RTIF            EQU     $80
001CD8 0F5CD8 -> $0040                PORF            EQU     $40
001CD8 0F5CD8 -> $0020                LVRF            EQU     $20
001CD8 0F5CD8 -> $0010                LOCKIF          EQU     $10
001CD8 0F5CD8 -> $0008                LOCK            EQU     $08
001CD8 0F5CD8 -> $0004                ILAF            EQU     $04
001CD8 0F5CD8 -> $0002                SCMIF           EQU     $02
001CD8 0F5CD8 -> $0001                SCM             EQU     $01
001CD8 0F5CD8 -> $0038                CRGINT          EQU     $0038
001CD8 0F5CD8 -> $0080                RTIE            EQU     $80
001CD8 0F5CD8 -> $0010                LOCKIE          EQU     $10
001CD8 0F5CD8 -> $0002                SCMIE           EQU     $02
001CD8 0F5CD8 -> $0039                CLKSEL          EQU     $0039
001CD8 0F5CD8 -> $0080                PLLSEL          EQU     $80
001CD8 0F5CD8 -> $0040                PSTP            EQU     $40
001CD8 0F5CD8 -> $0020                XCLKS           EQU     $20
001CD8 0F5CD8 -> $0008                PLLWAI          EQU     $08
001CD8 0F5CD8 -> $0002                RTIWAI          EQU     $02
001CD8 0F5CD8 -> $0001                COPWAI          EQU     $01
001CD8 0F5CD8 -> $003A                PLLCTL          EQU     $003A
001CD8 0F5CD8 -> $0080                CME             EQU     $80
001CD8 0F5CD8 -> $0040                PLLON           EQU     $40
001CD8 0F5CD8 -> $0020                FM1             EQU     $20
001CD8 0F5CD8 -> $0010                FM0             EQU     $10
001CD8 0F5CD8 -> $0008                FSTWKP          EQU     $08
001CD8 0F5CD8 -> $0004                PRE             EQU     $04
001CD8 0F5CD8 -> $0002                PCE             EQU     $02
001CD8 0F5CD8 -> $0001                SCME            EQU     $01
001CD8 0F5CD8 -> $003B                RTICTL          EQU     $003B
001CD8 0F5CD8 -> $0080                RTDEC           EQU     $80
001CD8 0F5CD8 -> $0040                RTR6            EQU     $40
001CD8 0F5CD8 -> $0020                RTR5            EQU     $20
001CD8 0F5CD8 -> $0010                RTR4            EQU     $10
001CD8 0F5CD8 -> $0008                RTR3            EQU     $08
001CD8 0F5CD8 -> $0004                RTR2            EQU     $04
001CD8 0F5CD8 -> $0002                RTR1            EQU     $02
001CD8 0F5CD8 -> $0001                RTR0            EQU     $01
001CD8 0F5CD8 -> $003C                COPCTL          EQU     $003C
001CD8 0F5CD8 -> $0080                WCOP            EQU     $80
001CD8 0F5CD8 -> $0040                RSBCK           EQU     $40
001CD8 0F5CD8 -> $0020                WRTMASK         EQU     $20
001CD8 0F5CD8 -> $0004                CR2             EQU     $04
001CD8 0F5CD8 -> $0002                CR1             EQU     $02
001CD8 0F5CD8 -> $0001                CR0             EQU     $01
001CD8 0F5CD8 -> $003D                FORBYP          EQU     $003D
001CD8 0F5CD8 -> $003E                CTCTL           EQU     $003E
001CD8 0F5CD8 -> $003F                ARMCOP          EQU     $003F
001CD8 0F5CD8 -> $0040                TIOS            EQU     $0040
001CD8 0F5CD8 -> $0040                ECT_TIOS        EQU     $0040
001CD8 0F5CD8 -> $0080                IOS7            EQU     $80
001CD8 0F5CD8 -> $0040                IOS6            EQU     $40
001CD8 0F5CD8 -> $0020                IOS5            EQU     $20
001CD8 0F5CD8 -> $0010                IOS4            EQU     $10
001CD8 0F5CD8 -> $0008                IOS3            EQU     $08
001CD8 0F5CD8 -> $0004                IOS2            EQU     $04
001CD8 0F5CD8 -> $0002                IOS1            EQU     $02
001CD8 0F5CD8 -> $0001                IOS0            EQU     $01
001CD8 0F5CD8 -> $0041                TCFORC          EQU     $0041
001CD8 0F5CD8 -> $0041                ECT_TCFORC      EQU     $0041
001CD8 0F5CD8 -> $0080                FOC7            EQU     $80
001CD8 0F5CD8 -> $0040                FOC6            EQU     $40
001CD8 0F5CD8 -> $0020                FOC5            EQU     $20
001CD8 0F5CD8 -> $0010                FOC4            EQU     $10
001CD8 0F5CD8 -> $0008                FOC3            EQU     $08
001CD8 0F5CD8 -> $0004                FOC2            EQU     $04
001CD8 0F5CD8 -> $0002                FOC1            EQU     $02
001CD8 0F5CD8 -> $0001                FOC0            EQU     $01
001CD8 0F5CD8 -> $0042                TOC7M           EQU     $0042
001CD8 0F5CD8 -> $0042                ECT_TOC7M       EQU     $0042
001CD8 0F5CD8 -> $0080                OC7M7           EQU     $80
001CD8 0F5CD8 -> $0040                OC7M6           EQU     $40
001CD8 0F5CD8 -> $0020                OC7M5           EQU     $20
001CD8 0F5CD8 -> $0010                OC7M4           EQU     $10
001CD8 0F5CD8 -> $0008                OC7M3           EQU     $08
001CD8 0F5CD8 -> $0004                OC7M2           EQU     $04
001CD8 0F5CD8 -> $0002                OC7M1           EQU     $02
001CD8 0F5CD8 -> $0001                OC7M0           EQU     $01
001CD8 0F5CD8 -> $0043                TOC7D           EQU     $0043
001CD8 0F5CD8 -> $0043                ECT_TOC7D       EQU     $0043
001CD8 0F5CD8 -> $0080                OC7D7           EQU     $80
001CD8 0F5CD8 -> $0040                OC7D6           EQU     $40
001CD8 0F5CD8 -> $0020                OC7D5           EQU     $20
001CD8 0F5CD8 -> $0010                OC7D4           EQU     $10
001CD8 0F5CD8 -> $0008                OC7D3           EQU     $08
001CD8 0F5CD8 -> $0004                OC7D2           EQU     $04
001CD8 0F5CD8 -> $0002                OC7D1           EQU     $02
001CD8 0F5CD8 -> $0001                OC7D0           EQU     $01
001CD8 0F5CD8 -> $0044                TCNT            EQU     $0044
001CD8 0F5CD8 -> $0044                ECT_TCNT        EQU     $0044
001CD8 0F5CD8 -> $0046                TSCR1           EQU     $0046
001CD8 0F5CD8 -> $0046                ECT_TSCR1       EQU     $0046
001CD8 0F5CD8 -> $0080                TEN             EQU     $80
001CD8 0F5CD8 -> $0040                TSWAI           EQU     $40
001CD8 0F5CD8 -> $0020                TSFRZ           EQU     $20
001CD8 0F5CD8 -> $0010                TFFCA           EQU     $10
001CD8 0F5CD8 -> $0047                TTOV            EQU     $0047
001CD8 0F5CD8 -> $0047                ECT_TTOV        EQU     $0047
001CD8 0F5CD8 -> $0080                TOV7            EQU     $80
001CD8 0F5CD8 -> $0040                TOV6            EQU     $40
001CD8 0F5CD8 -> $0020                TOV5            EQU     $20
001CD8 0F5CD8 -> $0010                TOV4            EQU     $10
001CD8 0F5CD8 -> $0008                TOV3            EQU     $08
001CD8 0F5CD8 -> $0004                TOV2            EQU     $04
001CD8 0F5CD8 -> $0002                TOV1            EQU     $02
001CD8 0F5CD8 -> $0001                TOV0            EQU     $01
001CD8 0F5CD8 -> $0048                TCTL1           EQU     $0048
001CD8 0F5CD8 -> $0048                ECT_TCTL1       EQU     $0048
001CD8 0F5CD8 -> $0080                OM7             EQU     $80
001CD8 0F5CD8 -> $0040                OL7             EQU     $40
001CD8 0F5CD8 -> $0020                OM6             EQU     $20
001CD8 0F5CD8 -> $0010                OL6             EQU     $10
001CD8 0F5CD8 -> $0008                OM5             EQU     $08
001CD8 0F5CD8 -> $0004                OL5             EQU     $04
001CD8 0F5CD8 -> $0002                OM4             EQU     $02
001CD8 0F5CD8 -> $0001                OL4             EQU     $01
001CD8 0F5CD8 -> $0049                TCTL2           EQU     $0049
001CD8 0F5CD8 -> $0049                ECT_TCTL2       EQU     $0049
001CD8 0F5CD8 -> $0080                OM3             EQU     $80
001CD8 0F5CD8 -> $0040                OL3             EQU     $40
001CD8 0F5CD8 -> $0020                OM2             EQU     $20
001CD8 0F5CD8 -> $0010                OL2             EQU     $10
001CD8 0F5CD8 -> $0008                OM1             EQU     $08
001CD8 0F5CD8 -> $0004                OL1             EQU     $04
001CD8 0F5CD8 -> $0002                OM0             EQU     $02
001CD8 0F5CD8 -> $0001                OL0             EQU     $01
001CD8 0F5CD8 -> $004A                TCTL3           EQU     $004A
001CD8 0F5CD8 -> $004A                ECT_TCTL3       EQU     $004A
001CD8 0F5CD8 -> $0080                EDG7B           EQU     $80
001CD8 0F5CD8 -> $0040                EDG7A           EQU     $40
001CD8 0F5CD8 -> $0020                EDG6B           EQU     $20
001CD8 0F5CD8 -> $0010                EDG6A           EQU     $10
001CD8 0F5CD8 -> $0008                EDG5B           EQU     $08
001CD8 0F5CD8 -> $0004                EDG5A           EQU     $04
001CD8 0F5CD8 -> $0002                EDG4B           EQU     $02
001CD8 0F5CD8 -> $0001                EDG4A           EQU     $01
001CD8 0F5CD8 -> $004B                TCTL4           EQU     $004B
001CD8 0F5CD8 -> $004B                ECT_TCTL4       EQU     $004B
001CD8 0F5CD8 -> $0080                EDG3B           EQU     $80
001CD8 0F5CD8 -> $0040                EDG3A           EQU     $40
001CD8 0F5CD8 -> $0020                EDG2B           EQU     $20
001CD8 0F5CD8 -> $0010                EDG2A           EQU     $10
001CD8 0F5CD8 -> $0008                EDG1B           EQU     $08
001CD8 0F5CD8 -> $0004                EDG1A           EQU     $04
001CD8 0F5CD8 -> $0002                EDG0B           EQU     $02
001CD8 0F5CD8 -> $0001                EDG0A           EQU     $01
001CD8 0F5CD8 -> $004C                TIE             EQU     $004C
001CD8 0F5CD8 -> $004C                ECT_TIE         EQU     $004C
001CD8 0F5CD8 -> $0080                C7I             EQU     $80
001CD8 0F5CD8 -> $0040                C6I             EQU     $40
001CD8 0F5CD8 -> $0020                C5I             EQU     $20
001CD8 0F5CD8 -> $0010                C4I             EQU     $10
001CD8 0F5CD8 -> $0008                C3I             EQU     $08
001CD8 0F5CD8 -> $0004                C2I             EQU     $04
001CD8 0F5CD8 -> $0002                C1I             EQU     $02
001CD8 0F5CD8 -> $0001                C0I             EQU     $01
001CD8 0F5CD8 -> $004D                TSCR2           EQU     $004D
001CD8 0F5CD8 -> $004D                ECT_TSCR2       EQU     $004D
001CD8 0F5CD8 -> $0080                TOI             EQU     $80
001CD8 0F5CD8 -> $0008                TCRE            EQU     $08
001CD8 0F5CD8 -> $0004                PR2             EQU     $04
001CD8 0F5CD8 -> $0002                PR1             EQU     $02
001CD8 0F5CD8 -> $0001                PR0             EQU     $01
001CD8 0F5CD8 -> $004E                TFLG1           EQU     $004E
001CD8 0F5CD8 -> $004E                ECT_TFLG1       EQU     $004E
001CD8 0F5CD8 -> $0080                C7F             EQU     $80
001CD8 0F5CD8 -> $0040                C6F             EQU     $40
001CD8 0F5CD8 -> $0020                C5F             EQU     $20
001CD8 0F5CD8 -> $0010                C4F             EQU     $10
001CD8 0F5CD8 -> $0008                C3F             EQU     $08
001CD8 0F5CD8 -> $0004                C2F             EQU     $04
001CD8 0F5CD8 -> $0002                C1F             EQU     $02
001CD8 0F5CD8 -> $0001                C0F             EQU     $01
001CD8 0F5CD8 -> $004F                TFLG2           EQU     $004F
001CD8 0F5CD8 -> $004F                ECT_TFLG2       EQU     $004F
001CD8 0F5CD8 -> $0080                TOF             EQU     $80
001CD8 0F5CD8 -> $0050                TC0             EQU     $0050
001CD8 0F5CD8 -> $0050                ECT_TC0         EQU     $0050
001CD8 0F5CD8 -> $0052                TC1             EQU     $0052
001CD8 0F5CD8 -> $0052                ECT_TC1         EQU     $0052
001CD8 0F5CD8 -> $0054                TC2             EQU     $0054
001CD8 0F5CD8 -> $0056                ECT_TC3         EQU     $0056
001CD8 0F5CD8 -> $0056                TC3             EQU     $0056
001CD8 0F5CD8 -> $0058                ECT_TC4         EQU     $0058
001CD8 0F5CD8 -> $0058                TC4             EQU     $0058
001CD8 0F5CD8 -> $005A                ECT_TC5         EQU     $005A
001CD8 0F5CD8 -> $005A                TC5             EQU     $005A
001CD8 0F5CD8 -> $005C                ECT_TC6         EQU     $005C
001CD8 0F5CD8 -> $005E                TC7             EQU     $005E
001CD8 0F5CD8 -> $005E                ECT_TC7         EQU     $005E
001CD8 0F5CD8 -> $0060                PACTL           EQU     $0060
001CD8 0F5CD8 -> $0060                ECT_PACTL       EQU     $0060
001CD8 0F5CD8 -> $0040                PAEN            EQU     $40
001CD8 0F5CD8 -> $0020                PAMOD           EQU     $20
001CD8 0F5CD8 -> $0010                PEDGE           EQU     $10
001CD8 0F5CD8 -> $0008                CLK1            EQU     $08
001CD8 0F5CD8 -> $0004                CLK0            EQU     $04
001CD8 0F5CD8 -> $0002                PAOVI           EQU     $02
001CD8 0F5CD8 -> $0001                PAI             EQU     $01
001CD8 0F5CD8 -> $0061                PAFLG           EQU     $0061
001CD8 0F5CD8 -> $0061                ECT_PAFLG       EQU     $0061
001CD8 0F5CD8 -> $0002                PAOVF           EQU     $02
001CD8 0F5CD8 -> $0001                PAIF            EQU     $01
001CD8 0F5CD8 -> $0062                PACNT           EQU     $0062
001CD8 0F5CD8 -> $0062                ECT_PACNT       EQU     $0062
001CD8 0F5CD8 -> $0062                PACN3           EQU     $0062
001CD8 0F5CD8 -> $0062                ECT_PACN3       EQU     $0062
001CD8 0F5CD8 -> $0063                PACN2           EQU     $0063
001CD8 0F5CD8 -> $0063                ECT_PACN2       EQU     $0063
001CD8 0F5CD8 -> $0064                PACN1           EQU     $0064
001CD8 0F5CD8 -> $0064                ECT_PACN1       EQU     $0064
001CD8 0F5CD8 -> $0065                PACN0           EQU     $0065
001CD8 0F5CD8 -> $0065                ECT_PACN0       EQU     $0065
001CD8 0F5CD8 -> $0066                MCCTL           EQU     $0066
001CD8 0F5CD8 -> $0066                ECT_MCCTL       EQU     $0066
001CD8 0F5CD8 -> $0080                MCZI            EQU     $80
001CD8 0F5CD8 -> $0040                MODMC           EQU     $40
001CD8 0F5CD8 -> $0020                RDMCL           EQU     $20
001CD8 0F5CD8 -> $0010                ICLAT           EQU     $10
001CD8 0F5CD8 -> $0008                FLMC            EQU     $08
001CD8 0F5CD8 -> $0004                MCEN            EQU     $04
001CD8 0F5CD8 -> $0002                MCPR1           EQU     $02
001CD8 0F5CD8 -> $0001                MCPR0           EQU     $01
001CD8 0F5CD8 -> $0067                MCFLG           EQU     $0067
001CD8 0F5CD8 -> $0067                ECT_MCFLG       EQU     $0067
001CD8 0F5CD8 -> $0080                MCZF            EQU     $80
001CD8 0F5CD8 -> $0008                POLF3           EQU     $08
001CD8 0F5CD8 -> $0004                POLF2           EQU     $04
001CD8 0F5CD8 -> $0002                POLF1           EQU     $02
001CD8 0F5CD8 -> $0001                POLF0           EQU     $01
001CD8 0F5CD8 -> $0068                ICPAR           EQU     $0068
001CD8 0F5CD8 -> $0068                ECT_ICPAR       EQU     $0068
001CD8 0F5CD8 -> $0008                PA3EN           EQU     $08
001CD8 0F5CD8 -> $0004                PA2EN           EQU     $04
001CD8 0F5CD8 -> $0002                PA1EN           EQU     $02
001CD8 0F5CD8 -> $0001                PA0EN           EQU     $01
001CD8 0F5CD8 -> $0069                DLYCT           EQU     $0069
001CD8 0F5CD8 -> $0069                ECT_DLYCT       EQU     $0069
001CD8 0F5CD8 -> $0080                DLY7            EQU     $80
001CD8 0F5CD8 -> $0040                DLY6            EQU     $40
001CD8 0F5CD8 -> $0020                DLY5            EQU     $20
001CD8 0F5CD8 -> $0010                DLY4            EQU     $10
001CD8 0F5CD8 -> $0008                DLY3            EQU     $08
001CD8 0F5CD8 -> $0004                DLY2            EQU     $04
001CD8 0F5CD8 -> $0002                DLY1            EQU     $02
001CD8 0F5CD8 -> $0001                DLY0            EQU     $01
001CD8 0F5CD8 -> $006A                ICOVW           EQU     $006A
001CD8 0F5CD8 -> $006A                ECT_ICOVW       EQU     $006A
001CD8 0F5CD8 -> $0080                NOVW7           EQU     $80
001CD8 0F5CD8 -> $0040                NOVW6           EQU     $40
001CD8 0F5CD8 -> $0020                NOVW5           EQU     $20
001CD8 0F5CD8 -> $0010                NOVW4           EQU     $10
001CD8 0F5CD8 -> $0008                NOVW3           EQU     $08
001CD8 0F5CD8 -> $0004                NOVW2           EQU     $04
001CD8 0F5CD8 -> $0002                NOVW1           EQU     $02
001CD8 0F5CD8 -> $0001                NOVW0           EQU     $01
001CD8 0F5CD8 -> $006B                ICSYS           EQU     $006B
001CD8 0F5CD8 -> $006B                ECT_ICSYS       EQU     $006B
001CD8 0F5CD8 -> $0080                SH37            EQU     $80
001CD8 0F5CD8 -> $0040                SH26            EQU     $40
001CD8 0F5CD8 -> $0020                SH15            EQU     $20
001CD8 0F5CD8 -> $0010                SH04            EQU     $10
001CD8 0F5CD8 -> $0008                TFMOD           EQU     $08
001CD8 0F5CD8 -> $0004                PACMX           EQU     $04
001CD8 0F5CD8 -> $0002                BUFEN           EQU     $02
001CD8 0F5CD8 -> $0001                LATQ            EQU     $01
001CD8 0F5CD8 -> $006C                OCPD            EQU     $006C
001CD8 0F5CD8 -> $006C                ECT_OCPD        EQU     $006C
001CD8 0F5CD8 -> $0080                OCPD7           EQU     $80
001CD8 0F5CD8 -> $0040                OCPD6           EQU     $40
001CD8 0F5CD8 -> $0020                OCPD5           EQU     $20
001CD8 0F5CD8 -> $0010                OCPD4           EQU     $10
001CD8 0F5CD8 -> $0008                OCPD3           EQU     $08
001CD8 0F5CD8 -> $0004                OCPD2           EQU     $04
001CD8 0F5CD8 -> $0002                OCPD1           EQU     $02
001CD8 0F5CD8 -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
001CD8 0F5CD8 -> $006E                PTPSR           EQU     $006E
001CD8 0F5CD8 -> $006E                ECT_PTPSR       EQU     $006E
001CD8 0F5CD8 -> $0080                PTPS7           EQU     $80
001CD8 0F5CD8 -> $0040                PTPS6           EQU     $40
001CD8 0F5CD8 -> $0020                PTPS5           EQU     $20
001CD8 0F5CD8 -> $0010                PTPS4           EQU     $10
001CD8 0F5CD8 -> $0008                PTPS3           EQU     $08
001CD8 0F5CD8 -> $0004                PTPS2           EQU     $04
001CD8 0F5CD8 -> $0002                PTPS1           EQU     $02
001CD8 0F5CD8 -> $0001                PTPS0           EQU     $01
001CD8 0F5CD8 -> $006F                PTMCPSR         EQU     $006F
001CD8 0F5CD8 -> $006F                ECT_PTMCPSR             EQU     $006F
001CD8 0F5CD8 -> $0001                PTMPS0          EQU     $01
001CD8 0F5CD8 -> $0002                PTMPS1          EQU     $02
001CD8 0F5CD8 -> $0004                PTMPS2          EQU     $04
001CD8 0F5CD8 -> $0008                PTMPS3          EQU     $08
001CD8 0F5CD8 -> $0010                PTMPS4          EQU     $10
001CD8 0F5CD8 -> $0020                PTMPS5          EQU     $20
001CD8 0F5CD8 -> $0040                PTMPS6          EQU     $40
001CD8 0F5CD8 -> $0080                PTMPS7          EQU     $80
001CD8 0F5CD8 -> $0070                PBCTL           EQU     $0070
001CD8 0F5CD8 -> $0070                ECT_PBCTL       EQU     $0070
001CD8 0F5CD8 -> $0040                PBEN            EQU     $40
001CD8 0F5CD8 -> $0002                PBOVI           EQU     $02
001CD8 0F5CD8 -> $0071                PBFLG           EQU     $00071
001CD8 0F5CD8 -> $0071                ECT_PBFLG       EQU     $00071
001CD8 0F5CD8 -> $0002                PBOVF           EQU     $02
001CD8 0F5CD8 -> $0072                PA32H           EQU     $0072
001CD8 0F5CD8 -> $0072                ECT_PA32H       EQU     $0072
001CD8 0F5CD8 -> $0072                PA3H            EQU     $0072
001CD8 0F5CD8 -> $0073                PA2H            EQU     $0073
001CD8 0F5CD8 -> $0074                PA10H           EQU     $0074
001CD8 0F5CD8 -> $0074                ECT_PA10H       EQU     $0074
001CD8 0F5CD8 -> $0074                PA1H            EQU     $0074
001CD8 0F5CD8 -> $0075                PA0H            EQU     $0075
001CD8 0F5CD8 -> $0076                MCCNT           EQU     $0076
001CD8 0F5CD8 -> $0076                ECT_MCCNT       EQU     $0076
001CD8 0F5CD8 -> $0078                TC0H            EQU     $0078
001CD8 0F5CD8 -> $0078                ECT_TC0H        EQU     $0078
001CD8 0F5CD8 -> $007A                TC1H            EQU     $007A
001CD8 0F5CD8 -> $007A                ECT_TC1H        EQU     $007A
001CD8 0F5CD8 -> $007C                TC2H            EQU     $007C
001CD8 0F5CD8 -> $007C                ECT_TC2H        EQU     $007C
001CD8 0F5CD8 -> $007E                TC3H            EQU     $007E
001CD8 0F5CD8 -> $007E                ECT_TC3H        EQU     $007E
001CD8 0F5CD8 -> $0080                ATD1CTL0        EQU     $0080
001CD8 0F5CD8 -> $0008                WRAP3           EQU     $08
001CD8 0F5CD8 -> $0004                WRAP2           EQU     $04
001CD8 0F5CD8 -> $0002                WRAP1           EQU     $02
001CD8 0F5CD8 -> $0001                WRAP0           EQU     $01
001CD8 0F5CD8 -> $0081                ATD1CTL1        EQU     $0081
001CD8 0F5CD8 -> $0080                ETRIGSEL        EQU     $80
001CD8 0F5CD8 -> $0040                SRES1           EQU     $40
001CD8 0F5CD8 -> $0020                SRES0           EQU     $20
001CD8 0F5CD8 -> $0010                DIS             EQU     $10
001CD8 0F5CD8 -> $0008                ETRIGCH3        EQU     $08
001CD8 0F5CD8 -> $0004                ETRIGCH2        EQU     $04
001CD8 0F5CD8 -> $0002                ETRIGCH1        EQU     $02
001CD8 0F5CD8 -> $0001                ETRIGCH0        EQU     $01
001CD8 0F5CD8 -> $0082                ATD1CTL2        EQU     $0082
001CD8 0F5CD8 -> $0040                AFFC            EQU     $40
001CD8 0F5CD8 -> $0020                ICLKSTP         EQU     $20
001CD8 0F5CD8 -> $0010                ETRIGLE         EQU     $10
001CD8 0F5CD8 -> $0008                ETRIGP          EQU     $08
001CD8 0F5CD8 -> $0004                ETRIGE          EQU     $04
001CD8 0F5CD8 -> $0002                ASCIE           EQU     $02
001CD8 0F5CD8 -> $0001                ASCIF           EQU     $01
001CD8 0F5CD8 -> $0083                ATD1CTL3        EQU     $0083
001CD8 0F5CD8 -> $0080                DJM             EQU     $80
001CD8 0F5CD8 -> $0040                S8C             EQU     $40
001CD8 0F5CD8 -> $0020                S4C             EQU     $20
001CD8 0F5CD8 -> $0010                S2C             EQU     $10
001CD8 0F5CD8 -> $0008                S1C             EQU     $08
001CD8 0F5CD8 -> $0004                FIFO            EQU     $04
001CD8 0F5CD8 -> $0002                FRZ1            EQU     $02
001CD8 0F5CD8 -> $0001                FRZ0            EQU     $01
001CD8 0F5CD8 -> $0084                ATD1CTL4        EQU     $0084
001CD8 0F5CD8 -> $0080                SMP2            EQU     $80
001CD8 0F5CD8 -> $0040                SMP1            EQU     $40
001CD8 0F5CD8 -> $0020                SMP0            EQU     $20
001CD8 0F5CD8 -> $0010                PRS4            EQU     $10
001CD8 0F5CD8 -> $0008                PRS3            EQU     $08
001CD8 0F5CD8 -> $0004                PRS2            EQU     $04
001CD8 0F5CD8 -> $0002                PRS1            EQU     $02
001CD8 0F5CD8 -> $0001                PRS0            EQU     $01
001CD8 0F5CD8 -> $0085                ATD1CTL5        EQU     $0085
001CD8 0F5CD8 -> $0040                SC              EQU     $40
001CD8 0F5CD8 -> $0020                SCAN            EQU     $20
001CD8 0F5CD8 -> $0010                MULT            EQU     $10
001CD8 0F5CD8 -> $0008                CD              EQU     $08
001CD8 0F5CD8 -> $0004                CC              EQU     $04
001CD8 0F5CD8 -> $0002                CB              EQU     $02
001CD8 0F5CD8 -> $0001                CA              EQU     $01
001CD8 0F5CD8 -> $0086                ATD1STAT0       EQU     $0086
001CD8 0F5CD8 -> $0080                SCF             EQU     $80
001CD8 0F5CD8 -> $0020                ETORF           EQU     $20
001CD8 0F5CD8 -> $0010                FIFOR           EQU     $10
001CD8 0F5CD8 -> $0004                CC2             EQU     $04
001CD8 0F5CD8 -> $0002                CC1             EQU     $02
001CD8 0F5CD8 -> $0001                CC0             EQU     $01
                                      ;$0087 reserved
001CD8 0F5CD8 -> $0088                ATD1CMPEH       EQU     $0088
001CD8 0F5CD8 -> $0080                CMPE15          EQU     $80
001CD8 0F5CD8 -> $0040                CMPE14          EQU     $40
001CD8 0F5CD8 -> $0020                CMPE13          EQU     $20
001CD8 0F5CD8 -> $0010                CMPE12          EQU     $10
001CD8 0F5CD8 -> $0008                CMPE11          EQU     $08
001CD8 0F5CD8 -> $0004                CMPE10          EQU     $04
001CD8 0F5CD8 -> $0002                CMPE9           EQU     $02
001CD8 0F5CD8 -> $0001                CMPE8           EQU     $01
001CD8 0F5CD8 -> $0089                ATD1CMPEL       EQU     $0089
001CD8 0F5CD8 -> $0080                CMPE7           EQU     $80
001CD8 0F5CD8 -> $0040                CMPE6           EQU     $40
001CD8 0F5CD8 -> $0020                CMPE5           EQU     $20
001CD8 0F5CD8 -> $0010                CMPE4           EQU     $10
001CD8 0F5CD8 -> $0008                CMPE3           EQU     $08
001CD8 0F5CD8 -> $0004                CMPE2           EQU     $04
001CD8 0F5CD8 -> $0002                CMPE1           EQU     $02
001CD8 0F5CD8 -> $0001                CMPE0           EQU     $01
001CD8 0F5CD8 -> $008A                ATD1STAT2H      EQU     $008A
001CD8 0F5CD8 -> $0080                CCF15           EQU     $80
001CD8 0F5CD8 -> $0040                CCF14           EQU     $40
001CD8 0F5CD8 -> $0020                CCF13           EQU     $20
001CD8 0F5CD8 -> $0010                CCF12           EQU     $10
001CD8 0F5CD8 -> $0008                CCF11           EQU     $08
001CD8 0F5CD8 -> $0004                CCF10           EQU     $04
001CD8 0F5CD8 -> $0002                CCF9            EQU     $02
001CD8 0F5CD8 -> $0001                CCF8            EQU     $01
001CD8 0F5CD8 -> $008B                ATD1STAT2L      EQU     $008B
001CD8 0F5CD8 -> $0080                CCF7            EQU     $80
001CD8 0F5CD8 -> $0040                CCF6            EQU     $40
001CD8 0F5CD8 -> $0020                CCF5            EQU     $20
001CD8 0F5CD8 -> $0010                CCF4            EQU     $10
001CD8 0F5CD8 -> $0008                CCF3            EQU     $08
001CD8 0F5CD8 -> $0004                CCF2            EQU     $04
001CD8 0F5CD8 -> $0002                CCF1            EQU     $02
001CD8 0F5CD8 -> $0001                CCF0            EQU     $01
001CD8 0F5CD8 -> $008C                ATD1DIENH       EQU     $008C
001CD8 0F5CD8 -> $0080                IEN15           EQU     $80
001CD8 0F5CD8 -> $0040                IEN14           EQU     $40
001CD8 0F5CD8 -> $0020                IEN13           EQU     $20
001CD8 0F5CD8 -> $0010                IEN12           EQU     $10
001CD8 0F5CD8 -> $0008                IEN11           EQU     $08
001CD8 0F5CD8 -> $0004                IEN10           EQU     $04
001CD8 0F5CD8 -> $0002                IEN9            EQU     $02
001CD8 0F5CD8 -> $0001                IEN8            EQU     $01
001CD8 0F5CD8 -> $008D                ATD1DIENL       EQU     $008D
001CD8 0F5CD8 -> $0080                IEN7            EQU     $80
001CD8 0F5CD8 -> $0040                IEN6            EQU     $40
001CD8 0F5CD8 -> $0020                IEN5            EQU     $20
001CD8 0F5CD8 -> $0010                IEN4            EQU     $10
001CD8 0F5CD8 -> $0008                IEN3            EQU     $08
001CD8 0F5CD8 -> $0004                IEN2            EQU     $04
001CD8 0F5CD8 -> $0002                IEN1            EQU     $02
001CD8 0F5CD8 -> $0001                IEN0            EQU     $01
001CD8 0F5CD8 -> $008E                ATD1CMPHTH      EQU     $008E
001CD8 0F5CD8 -> $0080                CMPHT15         EQU     $80
001CD8 0F5CD8 -> $0040                CMPHT14         EQU     $40
001CD8 0F5CD8 -> $0020                CMPHT13         EQU     $20
001CD8 0F5CD8 -> $0010                CMPHT12         EQU     $10
001CD8 0F5CD8 -> $0008                CMPHT11         EQU     $08
001CD8 0F5CD8 -> $0004                CMPHT10         EQU     $04
001CD8 0F5CD8 -> $0002                CMPHT9          EQU     $02
001CD8 0F5CD8 -> $0001                CMPHT8          EQU     $01
001CD8 0F5CD8 -> $008F                ATD1CMPHTL      EQU     $008F
001CD8 0F5CD8 -> $0001                CMPHT0          EQU     $01
001CD8 0F5CD8 -> $0002                CMPHT1          EQU     $02
001CD8 0F5CD8 -> $0004                CMPHT2          EQU     $04
001CD8 0F5CD8 -> $0008                CMPHT3          EQU     $08
001CD8 0F5CD8 -> $0010                CMPHT4          EQU     $10
001CD8 0F5CD8 -> $0020                CMPHT5          EQU     $20
001CD8 0F5CD8 -> $0040                CMPHT6          EQU     $40
001CD8 0F5CD8 -> $0080                CMPHT7          EQU     $80
001CD8 0F5CD8 -> $0090                ATD1DR0         EQU     $0090
001CD8 0F5CD8 -> $0090                ATD1DR0H        EQU     $0090
001CD8 0F5CD8 -> $0091                ATD1DR0L        EQU     $0091
001CD8 0F5CD8 -> $0092                ATD1DR1         EQU     $0092
001CD8 0F5CD8 -> $0092                ATD1DR1H        EQU     $0092
001CD8 0F5CD8 -> $0093                ATD1DR1L        EQU     $0093
001CD8 0F5CD8 -> $0094                ATD1DR2         EQU     $0094
001CD8 0F5CD8 -> $0094                ATD1DR2H        EQU     $0094
001CD8 0F5CD8 -> $0095                ATD1DR2L        EQU     $0095
001CD8 0F5CD8 -> $0096                ATD1DR3         EQU     $0096
001CD8 0F5CD8 -> $0096                ATD1DR3H        EQU     $0096
001CD8 0F5CD8 -> $0097                ATD1DR3L        EQU     $0097
001CD8 0F5CD8 -> $0098                ATD1DR4         EQU     $0098
001CD8 0F5CD8 -> $0098                ATD1DR4H        EQU     $0098
001CD8 0F5CD8 -> $0099                ATD1DR4L        EQU     $0099
001CD8 0F5CD8 -> $009A                ATD1DR5         EQU     $009A
001CD8 0F5CD8 -> $009A                ATD1DR5H        EQU     $009A
001CD8 0F5CD8 -> $009B                ATD1DR5L        EQU     $009B
001CD8 0F5CD8 -> $009C                ATD1DR6         EQU     $009C
001CD8 0F5CD8 -> $009C                ATD1DR6H        EQU     $009C
001CD8 0F5CD8 -> $009D                ATD1DR6L        EQU     $009D
001CD8 0F5CD8 -> $009E                ATD1DR7         EQU     $009E
001CD8 0F5CD8 -> $009E                ATD1DR7H        EQU     $009E
001CD8 0F5CD8 -> $009F                ATD1DR7L        EQU     $009F
001CD8 0F5CD8 -> $00A0                ATD1DR8         EQU     $00A0
001CD8 0F5CD8 -> $00A0                ATD1DR8H        EQU     $00A0
001CD8 0F5CD8 -> $00A1                ATD1DR8L        EQU     $00A1
001CD8 0F5CD8 -> $00A2                ATD1DR9         EQU     $00A2
001CD8 0F5CD8 -> $00A2                ATD1DR9H        EQU     $00A2
001CD8 0F5CD8 -> $00A3                ATD1DR9L        EQU     $00A3
001CD8 0F5CD8 -> $00A3                ATD1DR10        EQU     $00A3
001CD8 0F5CD8 -> $00A3                ATD1DR10H       EQU     $00A3
001CD8 0F5CD8 -> $00A5                ATD1DR10L       EQU     $00A5
001CD8 0F5CD8 -> $00A6                ATD1DR11        EQU     $00A6
001CD8 0F5CD8 -> $00A6                ATD1DR11H       EQU     $00A6
001CD8 0F5CD8 -> $00A7                ATD1DR11L       EQU     $00A7
001CD8 0F5CD8 -> $00A8                ATD1DR12        EQU     $00A8
001CD8 0F5CD8 -> $00A8                ATD1DR12H       EQU     $00A8
001CD8 0F5CD8 -> $00A9                ATD1DR12L       EQU     $00A9
001CD8 0F5CD8 -> $00AA                ATD1DR13        EQU     $00AA
001CD8 0F5CD8 -> $00AA                ATD1DR13H       EQU     $00AA
001CD8 0F5CD8 -> $00AB                ATD1DR13L       EQU     $00AB
001CD8 0F5CD8 -> $00AC                ATD1DR14        EQU     $00AC
001CD8 0F5CD8 -> $00AC                ATD1DR14H       EQU     $00AC
001CD8 0F5CD8 -> $00AD                ATD1DR14L       EQU     $00AD
001CD8 0F5CD8 -> $00AE                ATD1DR15        EQU     $00AE
001CD8 0F5CD8 -> $00AE                ATD1DR15H       EQU     $00AE
001CD8 0F5CD8 -> $00AF                ATD1DR15L       EQU     $00AF
001CD8 0F5CD8 -> $00B0                I1BAD           EQU     $00B0
001CD8 0F5CD8 -> $0080                ADR7            EQU     $80
001CD8 0F5CD8 -> $0040                ADR6            EQU     $40
001CD8 0F5CD8 -> $0020                ADR5            EQU     $20
001CD8 0F5CD8 -> $0010                ADR4            EQU     $10
001CD8 0F5CD8 -> $0008                ADR3            EQU     $08
001CD8 0F5CD8 -> $0004                ADR2            EQU     $04
001CD8 0F5CD8 -> $0002                ADR1            EQU     $02
001CD8 0F5CD8 -> $00B1                I1BFD           EQU     $00B1
001CD8 0F5CD8 -> $0080                IBC7            EQU     $80
001CD8 0F5CD8 -> $0040                IBC6            EQU     $40
001CD8 0F5CD8 -> $0020                IBC5            EQU     $20
001CD8 0F5CD8 -> $0010                IBC4            EQU     $10
001CD8 0F5CD8 -> $0008                IBC3            EQU     $08
001CD8 0F5CD8 -> $0004                IBC2            EQU     $04
001CD8 0F5CD8 -> $0002                IBC1            EQU     $02
001CD8 0F5CD8 -> $0001                IBC0            EQU     $01
001CD8 0F5CD8 -> $00B2                I1BCR           EQU     $00B2
001CD8 0F5CD8 -> $0080                IBEN            EQU     $80
001CD8 0F5CD8 -> $0040                IBIE            EQU     $40
001CD8 0F5CD8 -> $0020                SL              EQU     $20
001CD8 0F5CD8 -> $0010                RX              EQU     $10
001CD8 0F5CD8 -> $0008                TXAK            EQU     $08
001CD8 0F5CD8 -> $0004                RSTA            EQU     $04
001CD8 0F5CD8 -> $0001                IBSWAI          EQU     $01
001CD8 0F5CD8 -> $00B3                I1BSR           EQU     $00B3
001CD8 0F5CD8 -> $0080                TCF             EQU     $80
001CD8 0F5CD8 -> $0040                IAAS            EQU     $40
001CD8 0F5CD8 -> $0020                IBB             EQU     $20
001CD8 0F5CD8 -> $0001                RXAK            EQU     $01
001CD8 0F5CD8 -> $0004                SRW             EQU     $04
001CD8 0F5CD8 -> $0002                IBIF            EQU     $02
001CD8 0F5CD8 -> $00B4                I1BDR           EQU     $00B4
001CD8 0F5CD8 -> $00B5                I1BCR2          EQU     $00B5
001CD8 0F5CD8 -> $0080                GCEN            EQU     $80
001CD8 0F5CD8 -> $0040                ADTYPE          EQU     $40
001CD8 0F5CD8 -> $0004                ADR2            EQU     $04
001CD8 0F5CD8 -> $0002                ADR1            EQU     $02
001CD8 0F5CD8 -> $0001                ADR0            EQU     $01
                                      ;$00B6 to $00B7 reserved
001CD8 0F5CD8 -> $00B8                SCI2BDH         EQU     $00B8
001CD8 0F5CD8 -> $0080                IREN            EQU     $80
001CD8 0F5CD8 -> $0040                TNP1            EQU     $40
001CD8 0F5CD8 -> $0020                TNP0            EQU     $20
001CD8 0F5CD8 -> $0010                SBR12           EQU     $10
001CD8 0F5CD8 -> $0008                SBR11           EQU     $08
001CD8 0F5CD8 -> $0004                SBR10           EQU     $04
001CD8 0F5CD8 -> $0002                SBR9            EQU     $02
001CD8 0F5CD8 -> $0001                SBR8            EQU     $01
001CD8 0F5CD8 -> $00B8                SCI2ASR1        EQU     $00B8
001CD8 0F5CD8 -> $0080                RXEDGIF         EQU     $80
001CD8 0F5CD8 -> $0004                BERRV           EQU     $04
001CD8 0F5CD8 -> $0002                BERRIF          EQU     $02
001CD8 0F5CD8 -> $0001                BKDIF           EQU     $01
001CD8 0F5CD8 -> $00B9                SCI2BDL         EQU     $00B9
001CD8 0F5CD8 -> $0080                SBR7            EQU     $80
001CD8 0F5CD8 -> $0040                SBR6            EQU     $40
001CD8 0F5CD8 -> $0020                SBR5            EQU     $20
001CD8 0F5CD8 -> $0010                SBR4            EQU     $10
001CD8 0F5CD8 -> $0008                SBR3            EQU     $08
001CD8 0F5CD8 -> $0004                SBR2            EQU     $04
001CD8 0F5CD8 -> $0002                SBR1            EQU     $02
001CD8 0F5CD8 -> $0001                SBR0            EQU     $01
001CD8 0F5CD8 -> $00B9                SCI2ACR1        EQU     $00B9
001CD8 0F5CD8 -> $0080                RXEDGIE         EQU     $80
001CD8 0F5CD8 -> $0002                BERRIE          EQU     $02
001CD8 0F5CD8 -> $0001                BKDIE           EQU     $01
001CD8 0F5CD8 -> $00BA                SCI2CR1         EQU     $00BA
001CD8 0F5CD8 -> $0080                LOOPS           EQU     $80
001CD8 0F5CD8 -> $0040                SCISWAI         EQU     $40
001CD8 0F5CD8 -> $0020                RSRC            EQU     $20
001CD8 0F5CD8 -> $0010                M               EQU     $10
001CD8 0F5CD8 -> $0008                WAKE            EQU     $08
001CD8 0F5CD8 -> $0004                ILT             EQU     $04
001CD8 0F5CD8 -> $0002                PE              EQU     $02
001CD8 0F5CD8 -> $0001                PT              EQU     $01
001CD8 0F5CD8 -> $00BA                SCI2ACR2        EQU     $00BA
001CD8 0F5CD8 -> $0004                BERRM1          EQU     $04
001CD8 0F5CD8 -> $0002                BERRM0          EQU     $02
001CD8 0F5CD8 -> $0001                BKDFE           EQU     $01
001CD8 0F5CD8 -> $00BB                SCI2CR2         EQU     $00BB
001CD8 0F5CD8 -> $0080                TXIE            EQU     $80
001CD8 0F5CD8 -> $0040                TCIE            EQU     $40
001CD8 0F5CD8 -> $0020                RIE             EQU     $20
001CD8 0F5CD8 -> $0010                ILIE            EQU     $10
001CD8 0F5CD8 -> $0008                TE              EQU     $08
001CD8 0F5CD8 -> $0004                RE              EQU     $04
001CD8 0F5CD8 -> $0002                RWU             EQU     $02
001CD8 0F5CD8 -> $0001                SBK             EQU     $01
001CD8 0F5CD8 -> $00BC                SCI2SR1         EQU     $00BC
001CD8 0F5CD8 -> $0080                TDRE            EQU     $80
001CD8 0F5CD8 -> $0040                TC              EQU     $40
001CD8 0F5CD8 -> $0020                RDRFF           EQU     $20
001CD8 0F5CD8 -> $0010                IDLE            EQU     $10
001CD8 0F5CD8 -> $0008                OR              EQU     $08
001CD8 0F5CD8 -> $0004                NF              EQU     $04
001CD8 0F5CD8 -> $0002                FE              EQU     $02
001CD8 0F5CD8 -> $0001                PF              EQU     $01
001CD8 0F5CD8 -> $00BD                SCI2SR2         EQU     $00BD
001CD8 0F5CD8 -> $0004                BRK13           EQU     $04
001CD8 0F5CD8 -> $0002                TXDIR           EQU     $02
001CD8 0F5CD8 -> $0001                RAF             EQU     $01
001CD8 0F5CD8 -> $00BE                SCI2DRH         EQU     $00BE
001CD8 0F5CD8 -> $0080                R8              EQU     $80
001CD8 0F5CD8 -> $0040                T8              EQU     $40
001CD8 0F5CD8 -> $00BF                SCI2DRL         EQU     $00BF
001CD8 0F5CD8 -> $00C0                SCI3BDH         EQU     $00C0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $00C0                SCI3ASR1        EQU     $00C0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $00C1                SCI3BDL         EQU     $00C1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $00C1                SCI3ACR1        EQU     $00C1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $00C2                SCI3CR1         EQU     $00C2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $00C2                SCI3ACR2        EQU     $00C2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $00C3                SCI3CR2         EQU     $00C3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $00C4                SCI3SR1         EQU     $00C4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF           EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $00C5                SCI3SR2         EQU     $00C5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $00C6                SCI3DRH         EQU     $00C6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $00C7                SCI3DRL         EQU     $00C7
001CD8 0F5CD8 -> $00C8                SCIBDH          EQU     $00C8
001CD8 0F5CD8 -> $00C8                SCI0BDH         EQU     $00C8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $00C9                SCI0ASR1        EQU     $00C9
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $00C9                SCIBDL          EQU     $00C9
001CD8 0F5CD8 -> $00C9                SCI0BDL         EQU     $00C9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $00C9                SCI0ACR1        EQU     $00C9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $00CA                SCICR1          EQU     $00CA
001CD8 0F5CD8 -> $00CA                SCI0CR1         EQU     $00CA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $00CA                SCI0ACR2        EQU     $00CA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $00CB                SCICR2          EQU     $00CB
001CD8 0F5CD8 -> $00CB                SCI0CR2         EQU     $00CB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $00CC                SCISR1          EQU     $00CC
001CD8 0F5CD8 -> $00CC                SCI0SR1         EQU     $00CC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $00CD                SCISR2          EQU     $00CD
001CD8 0F5CD8 -> $00CD                SCI0SR2         EQU     $00CD
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $00CE                SCIDRH          EQU     $00CE
001CD8 0F5CD8 -> $00CE                SCI0DRH         EQU     $00CE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $00CF                SCIDRL          EQU     $00CF
001CD8 0F5CD8 -> $00CF                SCI0DRL         EQU     $00CF
001CD8 0F5CD8 -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $00D7                SCI1DRL         EQU     $00D7
001CD8 0F5CD8 -> $00D8                SPICR1          EQU     $00D8
001CD8 0F5CD8 -> $00D8                SPI0CR1         EQU     $00D8
001CD8 0F5CD8 -> $0080                SPIE            EQU     $80
001CD8 0F5CD8 -> $0040                SPE             EQU     $40
001CD8 0F5CD8 -> $0020                SPTIE           EQU     $20
001CD8 0F5CD8 -> $0010                MSTR            EQU     $10
001CD8 0F5CD8 -> $0008                CPOL            EQU     $08
001CD8 0F5CD8 -> $0004                CPHA            EQU     $04
001CD8 0F5CD8 -> $0002                SSOE            EQU     $02
001CD8 0F5CD8 -> $0001                LSBFE           EQU     $01
001CD8 0F5CD8 -> $00D9                SPICR2          EQU     $00D9
001CD8 0F5CD8 -> $00D9                SPI0CR2         EQU     $00D9
001CD8 0F5CD8 -> $0040                XFRW            EQU     $40
001CD8 0F5CD8 -> $0010                MODFEN          EQU     $10
001CD8 0F5CD8 -> $0008                BIDIROE         EQU     $08
001CD8 0F5CD8 -> $0002                SPISWAI         EQU     $02
001CD8 0F5CD8 -> $0001                SPC0            EQU     $01
001CD8 0F5CD8 -> $00DA                SPIBR           EQU     $00DA
001CD8 0F5CD8 -> $00DA                SPI0BR          EQU     $00DA
001CD8 0F5CD8 -> $0040                SPPR2           EQU     $40
001CD8 0F5CD8 -> $0020                SPPR1           EQU     $20
001CD8 0F5CD8 -> $0010                SPPR0           EQU     $10
001CD8 0F5CD8 -> $0004                SPR2            EQU     $04
001CD8 0F5CD8 -> $0002                SPR1            EQU     $02
001CD8 0F5CD8 -> $0001                SPR0            EQU     $01
001CD8 0F5CD8 -> $00DB                SPISR           EQU     $00DB
001CD8 0F5CD8 -> $00DB                SPI0SR          EQU     $00DB
001CD8 0F5CD8 -> $0080                SPIF            EQU     $80
001CD8 0F5CD8 -> $0020                SPTEF           EQU     $20
001CD8 0F5CD8 -> $0010                MODF            EQU     $10
001CD8 0F5CD8 -> $00DC                SPIDRH          EQU     $00DC
001CD8 0F5CD8 -> $00DC                SPI0DRH         EQU     $00DC
001CD8 0F5CD8 -> $00DD                SPIDRL          EQU     $00DD
001CD8 0F5CD8 -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00DF reserved
001CD8 0F5CD8 -> $00E0                IBAD            EQU     $00E0
001CD8 0F5CD8 -> $00E0                I0BAD           EQU     $00E0
                                      ;ADR7           EQU     $80
                                      ;ADR6           EQU     $40
                                      ;ADR5           EQU     $20
                                      ;ADR4           EQU     $10
                                      ;ADR3           EQU     $08
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
001CD8 0F5CD8 -> $00E1                IBFD            EQU     $00E1
001CD8 0F5CD8 -> $00E1                I0BFD           EQU     $00E1
                                      ;IBC7           EQU     $80
                                      ;IBC6           EQU     $40
                                      ;IBC5           EQU     $20
                                      ;IBC4           EQU     $10
                                      ;IBC3           EQU     $08
                                      ;IBC2           EQU     $04
                                      ;IBC1           EQU     $02
                                      ;IBC0           EQU     $01
001CD8 0F5CD8 -> $00E2                IBCR            EQU     $00E2
001CD8 0F5CD8 -> $00E2                I0BCR           EQU     $00E2
                                      ;IBEN           EQU     $80
                                      ;IBIE           EQU     $40
                                      ;SL             EQU     $20
                                      ;RX             EQU     $10
                                      ;TXAK           EQU     $08
                                      ;RSTA           EQU     $04
                                      ;IBSWAI         EQU     $01
001CD8 0F5CD8 -> $00E3                IBSR            EQU     $00E3
001CD8 0F5CD8 -> $00E3                I0BSR           EQU     $00E3
                                      ;TCF            EQU     $80
                                      ;IAAS           EQU     $40
                                      ;IBB            EQU     $20
                                      ;RXAK           EQU     $01
                                      ;SRW            EQU     $04
                                      ;IBIF           EQU     $02
001CD8 0F5CD8 -> $00E4                IBDR            EQU     $00E4
001CD8 0F5CD8 -> $00E4                I0BDR           EQU     $00E4
001CD8 0F5CD8 -> $00E5                IBCR2           EQU     $00E5
001CD8 0F5CD8 -> $00E5                I0BCR2          EQU     $00E5
                                      ;GCEN           EQU     $80
                                      ;ADTYPE         EQU     $40
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
                                      ;ADR0           EQU     $01
                                      ;$00E6 to $00EF reserved
001CD8 0F5CD8 -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
001CD8 0F5CD8 -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
001CD8 0F5CD8 -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
001CD8 0F5CD8 -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
001CD8 0F5CD8 -> $00F4                SPI1DRH         EQU     $00F4
001CD8 0F5CD8 -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
001CD8 0F5CD8 -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
001CD8 0F5CD8 -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
001CD8 0F5CD8 -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
001CD8 0F5CD8 -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
001CD8 0F5CD8 -> $00FC                SPI2DRH         EQU     $00FC
001CD8 0F5CD8 -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
001CD8 0F5CD8 -> $0100                FCLKDIV         EQU     $0100
001CD8 0F5CD8 -> $0080                FDIVLD          EQU     $80
001CD8 0F5CD8 -> $0040                FDIV6           EQU     $40
001CD8 0F5CD8 -> $0020                FDIV5           EQU     $20
001CD8 0F5CD8 -> $0010                FDIV4           EQU     $10
001CD8 0F5CD8 -> $0008                FDIV3           EQU     $08
001CD8 0F5CD8 -> $0004                FDIV2           EQU     $04
001CD8 0F5CD8 -> $0002                FDIV1           EQU     $02
001CD8 0F5CD8 -> $0001                FDIV0           EQU     $01
001CD8 0F5CD8 -> $0101                FSEC            EQU     $0101
001CD8 0F5CD8 -> $0080                KEYEN1          EQU     $80
001CD8 0F5CD8 -> $0040                KEYEN2          EQU     $40
001CD8 0F5CD8 -> $0020                RNV5            EQU     $20
001CD8 0F5CD8 -> $0010                RNV4            EQU     $10
001CD8 0F5CD8 -> $0008                RNV3            EQU     $08
001CD8 0F5CD8 -> $0004                RNV2            EQU     $04
001CD8 0F5CD8 -> $0002                SEC1            EQU     $02
001CD8 0F5CD8 -> $0001                SEC0            EQU     $01
001CD8 0F5CD8 -> $0102                FCCOBIX         EQU     $0102
001CD8 0F5CD8 -> $0004                CCOBIX2         EQU     $04
001CD8 0F5CD8 -> $0002                CCOBIX1         EQU     $02
001CD8 0F5CD8 -> $0001                CCOBIX0         EQU     $01
001CD8 0F5CD8 -> $0103                FECCRIX         EQU     $0103
001CD8 0F5CD8 -> $0004                ECCRIX2         EQU     $04
001CD8 0F5CD8 -> $0002                ECCRIX1         EQU     $02
001CD8 0F5CD8 -> $0001                ECCRIX0         EQU     $01
001CD8 0F5CD8 -> $0104                FCNFG           EQU     $0104
001CD8 0F5CD8 -> $0080                CCIE            EQU     $80
001CD8 0F5CD8 -> $0010                IGNSF           EQU     $10
001CD8 0F5CD8 -> $0002                FDFD            EQU     $02
001CD8 0F5CD8 -> $0001                FSFD            EQU     $01
001CD8 0F5CD8 -> $0105                FERCNFG         EQU     $0105
001CD8 0F5CD8 -> $0080                ERSERIE         EQU     $80
001CD8 0F5CD8 -> $0040                PGMERIE         EQU     $40
001CD8 0F5CD8 -> $0010                EPVIOLIE        EQU     $10
001CD8 0F5CD8 -> $0008                ERSVIE1         EQU     $08
001CD8 0F5CD8 -> $0004                ERSVIE0         EQU     $04
001CD8 0F5CD8 -> $0002                DFDIE           EQU     $02
001CD8 0F5CD8 -> $0001                SFDIE           EQU     $01
001CD8 0F5CD8 -> $0106                FSTAT           EQU     $0106
001CD8 0F5CD8 -> $0080                CCIF            EQU     $80
001CD8 0F5CD8 -> $0020                ACCERR          EQU     $20
001CD8 0F5CD8 -> $0010                FPVIOL          EQU     $10
001CD8 0F5CD8 -> $0008                MGBUSY          EQU     $08
001CD8 0F5CD8 -> $0002                MGSTAT1         EQU     $02
001CD8 0F5CD8 -> $0001                MGSTAT0         EQU     $01
001CD8 0F5CD8 -> $0107                FERSTAT         EQU     $0107
001CD8 0F5CD8 -> $0080                ERSERIF         EQU     $80
001CD8 0F5CD8 -> $0040                PGMERIF         EQU     $40
001CD8 0F5CD8 -> $0010                EPVIOLIF        EQU     $10
001CD8 0F5CD8 -> $0008                ERSVIF1         EQU     $08
001CD8 0F5CD8 -> $0004                ERSVIF0         EQU     $04
001CD8 0F5CD8 -> $0002                DFDIF           EQU     $02
001CD8 0F5CD8 -> $0001                SFDIF           EQU     $01
001CD8 0F5CD8 -> $0108                FPROT           EQU     $0108
001CD8 0F5CD8 -> $0080                FPOPEN          EQU     $80
001CD8 0F5CD8 -> $0040                RNV6            EQU     $40
001CD8 0F5CD8 -> $0020                FPHDIS          EQU     $20
001CD8 0F5CD8 -> $0010                FPHS1           EQU     $10
001CD8 0F5CD8 -> $0008                FPHS0           EQU     $08
001CD8 0F5CD8 -> $0004                FPLDIS          EQU     $04
001CD8 0F5CD8 -> $0002                FPLS1           EQU     $02
001CD8 0F5CD8 -> $0001                FPLS0           EQU     $01
001CD8 0F5CD8 -> $0109                EPROT           EQU     $0109
001CD8 0F5CD8 -> $0080                EPOPEN          EQU     $80
001CD8 0F5CD8 -> $0040                RNV6            EQU     $40
001CD8 0F5CD8 -> $0020                RNV5            EQU     $20
001CD8 0F5CD8 -> $0010                RNV4            EQU     $10
001CD8 0F5CD8 -> $0008                EPDIS           EQU     $08
001CD8 0F5CD8 -> $0004                EPS2            EQU     $04
001CD8 0F5CD8 -> $0002                EPS1            EQU     $02
001CD8 0F5CD8 -> $0001                EPS0            EQU     $01
001CD8 0F5CD8 -> $010A                FCCOBHI         EQU     $010A
001CD8 0F5CD8 -> $0080                CCOB15          EQU     $80
001CD8 0F5CD8 -> $0040                CCOB14          EQU     $40
001CD8 0F5CD8 -> $0020                CCOB13          EQU     $20
001CD8 0F5CD8 -> $0010                CCOB12          EQU     $10
001CD8 0F5CD8 -> $0008                CCOB11          EQU     $08
001CD8 0F5CD8 -> $0004                CCOB10          EQU     $04
001CD8 0F5CD8 -> $0002                CCOB9           EQU     $02
001CD8 0F5CD8 -> $0001                CCOB8           EQU     $01
001CD8 0F5CD8 -> $010B                FCCOBLO         EQU     $010B
001CD8 0F5CD8 -> $0080                CCOB7           EQU     $80
001CD8 0F5CD8 -> $0040                CCOB6           EQU     $40
001CD8 0F5CD8 -> $0020                CCOB5           EQU     $20
001CD8 0F5CD8 -> $0010                CCOB4           EQU     $10
001CD8 0F5CD8 -> $0008                CCOB3           EQU     $08
001CD8 0F5CD8 -> $0004                CCOB2           EQU     $04
001CD8 0F5CD8 -> $0002                CCOB1           EQU     $02
001CD8 0F5CD8 -> $0001                CCOB0           EQU     $01
001CD8 0F5CD8 -> $010C                ETAGHI          EQU     $010C
001CD8 0F5CD8 -> $010D                ETAGLO          EQU     $010D
001CD8 0F5CD8 -> $010E                FECCRHI         EQU     $010E
001CD8 0F5CD8 -> $010F                FECCRLO         EQU     $010F
001CD8 0F5CD8 -> $0110                FOPT            EQU     $0110
001CD8 0F5CD8 -> $0080                NV7             EQU     $80
001CD8 0F5CD8 -> $0040                NV6             EQU     $40
001CD8 0F5CD8 -> $0020                NV5             EQU     $20
001CD8 0F5CD8 -> $0010                NV4             EQU     $10
001CD8 0F5CD8 -> $0008                NV3             EQU     $08
001CD8 0F5CD8 -> $0004                NV2             EQU     $04
001CD8 0F5CD8 -> $0002                NV1             EQU     $02
001CD8 0F5CD8 -> $0001                NV0             EQU     $01
                                      ;$0111 to $0113 reserved
001CD8 0F5CD8 -> $0114                MPUFLG          EQU     $0114
001CD8 0F5CD8 -> $0080                AEF             EQU     $80
001CD8 0F5CD8 -> $0040                WPF             EQU     $40
001CD8 0F5CD8 -> $0020                NEXF            EQU     $20
001CD8 0F5CD8 -> $0001                SVSF            EQU     $01
001CD8 0F5CD8 -> $0115                MPUASTAT0       EQU     $0115
001CD8 0F5CD8 -> $0040                ADDR22          EQU     $40
001CD8 0F5CD8 -> $0020                ADDR21          EQU     $20
001CD8 0F5CD8 -> $0010                ADDR20          EQU     $10
001CD8 0F5CD8 -> $0008                ADDR19          EQU     $08
001CD8 0F5CD8 -> $0004                ADDR18          EQU     $04
001CD8 0F5CD8 -> $0002                ADDR17          EQU     $02
001CD8 0F5CD8 -> $0001                ADDR16          EQU     $01
001CD8 0F5CD8 -> $0116                MPUASTAT1       EQU     $0116
001CD8 0F5CD8 -> $0080                ADDR15          EQU     $80
001CD8 0F5CD8 -> $0040                ADDR14          EQU     $40
001CD8 0F5CD8 -> $0020                ADDR13          EQU     $20
001CD8 0F5CD8 -> $0010                ADDR12          EQU     $10
001CD8 0F5CD8 -> $0008                ADDR11          EQU     $08
001CD8 0F5CD8 -> $0004                ADDR10          EQU     $04
001CD8 0F5CD8 -> $0002                ADDR9           EQU     $02
001CD8 0F5CD8 -> $0001                ADDR8           EQU     $01
001CD8 0F5CD8 -> $0117                MPUASTAT2       EQU     $0117
001CD8 0F5CD8 -> $0080                ADDR7           EQU     $80
001CD8 0F5CD8 -> $0040                ADDR6           EQU     $40
001CD8 0F5CD8 -> $0020                ADDR5           EQU     $20
001CD8 0F5CD8 -> $0010                ADDR4           EQU     $10
001CD8 0F5CD8 -> $0008                ADDR3           EQU     $08
001CD8 0F5CD8 -> $0004                ADDR2           EQU     $04
001CD8 0F5CD8 -> $0002                ADDR1           EQU     $02
001CD8 0F5CD8 -> $0001                ADDR0           EQU     $01
                                      ;$0118 reserved
001CD8 0F5CD8 -> $0119                MPUSEL          EQU     $0119
001CD8 0F5CD8 -> $0080                SVSEN           EQU     $80
001CD8 0F5CD8 -> $0007                SEL             EQU     $07
001CD8 0F5CD8 -> $011A                MPUDESC0        EQU     $011A
001CD8 0F5CD8 -> $0080                MSTR0           EQU     $80
001CD8 0F5CD8 -> $0040                MSTR1           EQU     $40
001CD8 0F5CD8 -> $0020                MSTR2           EQU     $20
001CD8 0F5CD8 -> $0010                MSTR3           EQU     $10
001CD8 0F5CD8 -> $0008                LOW_ADDR22      EQU     $08
001CD8 0F5CD8 -> $0004                LOW_ADDR21      EQU     $04
001CD8 0F5CD8 -> $0002                LOW_ADDR20      EQU     $02
001CD8 0F5CD8 -> $0001                LOW_ADDR19      EQU     $01
001CD8 0F5CD8 -> $011B                MPUDESC1        EQU     $011B
001CD8 0F5CD8 -> $0080                LOW_ADDR18      EQU     $80
001CD8 0F5CD8 -> $0040                LOW_ADDR17      EQU     $40
001CD8 0F5CD8 -> $0020                LOW_ADDR16      EQU     $20
001CD8 0F5CD8 -> $0010                LOW_ADDR15      EQU     $10
001CD8 0F5CD8 -> $0008                LOW_ADDR14      EQU     $08
001CD8 0F5CD8 -> $0004                LOW_ADDR13      EQU     $04
001CD8 0F5CD8 -> $0002                LOW_ADDR12      EQU     $02
001CD8 0F5CD8 -> $0001                LOW_ADDR11      EQU     $01
001CD8 0F5CD8 -> $011C                MPUDESC2        EQU     $011C
001CD8 0F5CD8 -> $0080                LOW_ADDR10      EQU     $80
001CD8 0F5CD8 -> $0040                LOW_ADDR9       EQU     $40
001CD8 0F5CD8 -> $0020                LOW_ADDR8       EQU     $20
001CD8 0F5CD8 -> $0010                LOW_ADDR7       EQU     $10
001CD8 0F5CD8 -> $0008                LOW_ADDR6       EQU     $08
001CD8 0F5CD8 -> $0004                LOW_ADDR5       EQU     $04
001CD8 0F5CD8 -> $0002                LOW_ADDR4       EQU     $02
001CD8 0F5CD8 -> $0001                LOW_ADDR3       EQU     $01
001CD8 0F5CD8 -> $011D                MPUDESC3        EQU     $011D
001CD8 0F5CD8 -> $0080                WP              EQU     $80
001CD8 0F5CD8 -> $0040                NEX             EQU     $40
001CD8 0F5CD8 -> $0008                HIGH_ADDR22     EQU     $08
001CD8 0F5CD8 -> $0004                HIGH_ADDR21     EQU     $04
001CD8 0F5CD8 -> $0002                HIGH_ADDR20     EQU     $02
001CD8 0F5CD8 -> $0001                HIGH_ADDR19     EQU     $01
001CD8 0F5CD8 -> $011E                MPUDESC4        EQU     $011E
001CD8 0F5CD8 -> $0080                HIGH_ADDR18     EQU     $80
001CD8 0F5CD8 -> $0040                HIGH_ADDR17     EQU     $40
001CD8 0F5CD8 -> $0020                HIGH_ADDR16     EQU     $20
001CD8 0F5CD8 -> $0010                HIGH_ADDR15     EQU     $10
001CD8 0F5CD8 -> $0008                HIGH_ADDR14     EQU     $08
001CD8 0F5CD8 -> $0004                HIGH_ADDR13     EQU     $04
001CD8 0F5CD8 -> $0002                HIGH_ADDR12     EQU     $02
001CD8 0F5CD8 -> $0001                HIGH_ADDR11     EQU     $01
001CD8 0F5CD8 -> $011F                MPUDESC5        EQU     $011F
001CD8 0F5CD8 -> $0080                HIGH_ADDR10     EQU     $80
001CD8 0F5CD8 -> $0040                HIGH_ADDR9      EQU     $40
001CD8 0F5CD8 -> $0020                HIGH_ADDR8      EQU     $20
001CD8 0F5CD8 -> $0010                HIGH_ADDR7      EQU     $10
001CD8 0F5CD8 -> $0008                HIGH_ADDR6      EQU     $08
001CD8 0F5CD8 -> $0004                HIGH_ADDR5      EQU     $04
001CD8 0F5CD8 -> $0002                HIGH_ADDR4      EQU     $02
001CD8 0F5CD8 -> $0001                HIGH_ADDR3      EQU     $01
                                      ;$0120 reserved
001CD8 0F5CD8 -> $0121                IVBR            EQU     $0121
                                      ;$0122 to $0125reserved
001CD8 0F5CD8 -> $0126                XGPRIO          EQU     $0126
001CD8 0F5CD8 -> $0007                XILVL           EQU     $07
001CD8 0F5CD8 -> $0127                CFADDR          EQU     $0127
001CD8 0F5CD8 -> $0128                CFDATA0         EQU     $0128
001CD8 0F5CD8 -> $0129                CFDATA1         EQU     $0129
001CD8 0F5CD8 -> $012A                CFDATA2         EQU     $012A
001CD8 0F5CD8 -> $012B                CFDATA3         EQU     $012B
001CD8 0F5CD8 -> $012C                CFDATA4         EQU     $012C
001CD8 0F5CD8 -> $012D                CFDATA5         EQU     $012D
001CD8 0F5CD8 -> $012E                CFDATA6         EQU     $012E
001CD8 0F5CD8 -> $012F                CFDATA7         EQU     $012F
001CD8 0F5CD8 -> $0080                RQST            EQU     $80
001CD8 0F5CD8 -> $0007                PRIOLVL         EQU     $07
001CD8 0F5CD8 -> $0130                SCI4BDH         EQU     $0130
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $0130                SCI4ASR1        EQU     $0130
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $0131                SCI4BDL         EQU     $0131
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $0131                SCI4ACR1        EQU     $0131
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $0132                SCI4CR1         EQU     $0132
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $0132                SCI4ACR2        EQU     $0132
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $0133                SCI4CR2         EQU     $0133
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $0134                SCI4SR1         EQU     $0134
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $0135                SCI4SR2         EQU     $0135
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $0136                SCI4DRH         EQU     $0136
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $0137                SCI4DRL         EQU     $0137
001CD8 0F5CD8 -> $0138                SCI5BDH         EQU     $0138
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $0138                SCI5ASR1        EQU     $0138
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $0139                SCI5BDL         EQU     $0139
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $0139                SCI5ACR1        EQU     $0139
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $013A                SCI5CR1         EQU     $013A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $013A                SCI5ACR2        EQU     $013A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $013B                SCI5CR2         EQU     $013B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $013C                SCI5SR1         EQU     $013C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $013D                SCI5SR2         EQU     $013D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $013E                SCI5DRH         EQU     $013E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $013F                SCI5DRL         EQU     $013F
001CD8 0F5CD8 -> $0140                CANCTL0         EQU     $0140
001CD8 0F5CD8 -> $0140                CAN0CTL0        EQU     $0140
001CD8 0F5CD8 -> $0080                RXFRM           EQU     $80
001CD8 0F5CD8 -> $0040                RXACT           EQU     $40
001CD8 0F5CD8 -> $0020                CSWAI           EQU     $20
001CD8 0F5CD8 -> $0010                SYNCH           EQU     $10
001CD8 0F5CD8 -> $0008                TIMEN           EQU     $08
001CD8 0F5CD8 -> $0004                WUPE            EQU     $04
001CD8 0F5CD8 -> $0002                SLPRQ           EQU     $02
001CD8 0F5CD8 -> $0001                INITRQ          EQU     $01
001CD8 0F5CD8 -> $0141                CANCTL1         EQU     $0141
001CD8 0F5CD8 -> $0141                CAN0CTL1        EQU     $0141
001CD8 0F5CD8 -> $0080                CANE            EQU     $80
001CD8 0F5CD8 -> $0040                CLKSRC          EQU     $40
001CD8 0F5CD8 -> $0020                LOOPB           EQU     $20
001CD8 0F5CD8 -> $0010                LISTEN          EQU     $10
001CD8 0F5CD8 -> $0004                WUPM            EQU     $04
001CD8 0F5CD8 -> $0002                SLPAK           EQU     $02
001CD8 0F5CD8 -> $0001                INITAK          EQU     $01
001CD8 0F5CD8 -> $0142                CANBTR0         EQU     $0142
001CD8 0F5CD8 -> $0142                CAN0BTR0        EQU     $0142
001CD8 0F5CD8 -> $0080                SJW1            EQU     $80
001CD8 0F5CD8 -> $0040                SJW0            EQU     $40
001CD8 0F5CD8 -> $0020                BRP5            EQU     $20
001CD8 0F5CD8 -> $0010                BRP4            EQU     $10
001CD8 0F5CD8 -> $0008                BRP3            EQU     $08
001CD8 0F5CD8 -> $0004                BRP2            EQU     $04
001CD8 0F5CD8 -> $0002                BRP1            EQU     $02
001CD8 0F5CD8 -> $0001                BRP0            EQU     $01
001CD8 0F5CD8 -> $0143                CANBTR1         EQU     $0143
001CD8 0F5CD8 -> $0143                CAN0BTR1        EQU     $0143
001CD8 0F5CD8 -> $0080                SAMP            EQU     $80
001CD8 0F5CD8 -> $0040                TSEG22          EQU     $40
001CD8 0F5CD8 -> $0020                TSEG21          EQU     $20
001CD8 0F5CD8 -> $0010                TSEG20          EQU     $10
001CD8 0F5CD8 -> $0008                TSEG13          EQU     $08
001CD8 0F5CD8 -> $0004                TSEG12          EQU     $04
001CD8 0F5CD8 -> $0002                TSEG11          EQU     $02
001CD8 0F5CD8 -> $0001                TESG10          EQU     $01
001CD8 0F5CD8 -> $0144                CANRFLG         EQU     $0144
001CD8 0F5CD8 -> $0144                CAN0RFLG        EQU     $0144
001CD8 0F5CD8 -> $0080                WUPIF           EQU     $80
001CD8 0F5CD8 -> $0040                CSCIF           EQU     $40
001CD8 0F5CD8 -> $0020                RSTAT1          EQU     $20
001CD8 0F5CD8 -> $0010                RSTAT0          EQU     $10
001CD8 0F5CD8 -> $0008                TSTAT1          EQU     $08
001CD8 0F5CD8 -> $0004                TSTAT0          EQU     $04
001CD8 0F5CD8 -> $0002                OVRIF           EQU     $02
001CD8 0F5CD8 -> $0001                RXF             EQU     $01
001CD8 0F5CD8 -> $0145                CANRIER         EQU     $0145
001CD8 0F5CD8 -> $0145                CAN0RIER        EQU     $0145
001CD8 0F5CD8 -> $0080                WUPIE           EQU     $80
001CD8 0F5CD8 -> $0040                CSCIE           EQU     $40
001CD8 0F5CD8 -> $0020                RSTATE1         EQU     $20
001CD8 0F5CD8 -> $0010                RSTATE0         EQU     $10
001CD8 0F5CD8 -> $0008                TSTATE1         EQU     $08
001CD8 0F5CD8 -> $0004                TSTATE0         EQU     $04
001CD8 0F5CD8 -> $0002                OVRIE           EQU     $02
001CD8 0F5CD8 -> $0001                RXFIE           EQU     $01
001CD8 0F5CD8 -> $0146                CANTFLG         EQU     $0146
001CD8 0F5CD8 -> $0146                CAN0TFLG        EQU     $0146
001CD8 0F5CD8 -> $0004                TXE2            EQU     $04
001CD8 0F5CD8 -> $0002                TXE1            EQU     $02
001CD8 0F5CD8 -> $0001                TXE0            EQU     $01
001CD8 0F5CD8 -> $0147                CANTIER         EQU     $0147
001CD8 0F5CD8 -> $0147                CAN0TIER        EQU     $0147
001CD8 0F5CD8 -> $0004                TXEIE2          EQU     $04
001CD8 0F5CD8 -> $0002                TXEIE1          EQU     $02
001CD8 0F5CD8 -> $0001                TXEIE0          EQU     $01
001CD8 0F5CD8 -> $0148                CANTARQ         EQU     $0148
001CD8 0F5CD8 -> $0148                CAN0TARQ        EQU     $0148
001CD8 0F5CD8 -> $0004                ABTRQ2          EQU     $04
001CD8 0F5CD8 -> $0002                ABTRQ1          EQU     $02
001CD8 0F5CD8 -> $0001                ABTRQ0          EQU     $01
001CD8 0F5CD8 -> $0149                CANTAAK         EQU     $0149
001CD8 0F5CD8 -> $0149                CAN0TAAK        EQU     $0149
001CD8 0F5CD8 -> $0004                ABTAK2          EQU     $04
001CD8 0F5CD8 -> $0002                ABTAK1          EQU     $02
001CD8 0F5CD8 -> $0001                ABTAK0          EQU     $01
001CD8 0F5CD8 -> $014A                CANTBSEL        EQU     $014A
001CD8 0F5CD8 -> $014A                CAN0TBSEL       EQU     $014A
001CD8 0F5CD8 -> $0004                TX2             EQU     $04
001CD8 0F5CD8 -> $0002                TX1             EQU     $02
001CD8 0F5CD8 -> $0001                TX0             EQU     $01
001CD8 0F5CD8 -> $014B                CANIDAC         EQU     $014B
001CD8 0F5CD8 -> $014B                CAN0IDAC        EQU     $014B
001CD8 0F5CD8 -> $0020                IDAM1           EQU     $20
001CD8 0F5CD8 -> $0010                IDAM0           EQU     $10
001CD8 0F5CD8 -> $0004                IDHIT2          EQU     $04
001CD8 0F5CD8 -> $0002                IDHIT1          EQU     $02
001CD8 0F5CD8 -> $0001                IDHIT0          EQU     $01
                                      ; $14c  reserved
001CD8 0F5CD8 -> $014D                CANMISC         EQU     $014D
001CD8 0F5CD8 -> $014D                CAN0MISC        EQU     $014D
001CD8 0F5CD8 -> $0001                BOHOLD          EQU     $01
001CD8 0F5CD8 -> $014E                CANRXERR        EQU     $014E
001CD8 0F5CD8 -> $014E                CAN0RXERR       EQU     $014E
001CD8 0F5CD8 -> $014F                CANTXERR        EQU     $014F
001CD8 0F5CD8 -> $014F                CAN0TXERR       EQU     $014F
001CD8 0F5CD8 -> $0150                CANIDAR0        EQU     $0150
001CD8 0F5CD8 -> $0150                CAN0IDAR0       EQU     $0150
001CD8 0F5CD8 -> $0151                CANIDAR1        EQU     $0151
001CD8 0F5CD8 -> $0151                CAN0IDAR1       EQU     $0151
001CD8 0F5CD8 -> $0152                CANIDAR2        EQU     $0152
001CD8 0F5CD8 -> $0152                CAN0IDAR2       EQU     $0152
001CD8 0F5CD8 -> $0153                CANIDAR3        EQU     $0153
001CD8 0F5CD8 -> $0153                CAN0IDAR3       EQU     $0153
001CD8 0F5CD8 -> $0154                CANIDMR0        EQU     $0154
001CD8 0F5CD8 -> $0154                CAN0IDMR0       EQU     $0154
001CD8 0F5CD8 -> $0155                CANIDMR1        EQU     $0155
001CD8 0F5CD8 -> $0155                CAN0IDMR1       EQU     $0155
001CD8 0F5CD8 -> $0156                CANIDMR2        EQU     $0156
001CD8 0F5CD8 -> $0156                CAN0IDMR2       EQU     $0156
001CD8 0F5CD8 -> $0157                CANIDMR3        EQU     $0157
001CD8 0F5CD8 -> $0157                CAN0IDMR3       EQU     $0157
001CD8 0F5CD8 -> $0158                CANIDAR4        EQU     $0158
001CD8 0F5CD8 -> $0158                CAN0IDAR4       EQU     $0158
001CD8 0F5CD8 -> $0159                CANIDAR5        EQU     $0159
001CD8 0F5CD8 -> $0159                CAN0IDAR5       EQU     $0159
001CD8 0F5CD8 -> $015A                CANIDAR6        EQU     $015A
001CD8 0F5CD8 -> $015A                CAN0IDAR6       EQU     $015A
001CD8 0F5CD8 -> $015B                CANIDAR7        EQU     $015B
001CD8 0F5CD8 -> $015B                CAN0IDAR7       EQU     $015B
001CD8 0F5CD8 -> $015C                CANIDMR4        EQU     $015C
001CD8 0F5CD8 -> $015C                CAN0IDMR4       EQU     $015C
001CD8 0F5CD8 -> $015D                CANIDMR5        EQU     $015D
001CD8 0F5CD8 -> $015D                CAN0IDMR5       EQU     $015D
001CD8 0F5CD8 -> $015E                CANIDMR6        EQU     $015E
001CD8 0F5CD8 -> $015E                CAN0IDMR6       EQU     $015E
001CD8 0F5CD8 -> $015F                CANIDMR7        EQU     $015F
001CD8 0F5CD8 -> $015F                CAN0IDMR7       EQU     $015F
001CD8 0F5CD8 -> $0160                CANRXIDR0       EQU     $0160
001CD8 0F5CD8 -> $0160                CAN0RXIDR0      EQU     $0160
001CD8 0F5CD8 -> $0161                CANRXIDR1       EQU     $0161
001CD8 0F5CD8 -> $0161                CAN0RXIDR1      EQU     $0161
001CD8 0F5CD8 -> $0162                CANRXIDR2       EQU     $0162
001CD8 0F5CD8 -> $0162                CAN0RXIDR2      EQU     $0162
001CD8 0F5CD8 -> $0163                CANRXIDR3       EQU     $0163
001CD8 0F5CD8 -> $0163                CAN0RXIDR3      EQU     $0163
001CD8 0F5CD8 -> $0164                CANRXDSR0       EQU     $0164
001CD8 0F5CD8 -> $0164                CAN0RXDSR0      EQU     $0164
001CD8 0F5CD8 -> $0165                CANRXDSR1       EQU     $0165
001CD8 0F5CD8 -> $0165                CAN0RXDSR1      EQU     $0165
001CD8 0F5CD8 -> $0166                CANRXDSR2       EQU     $0166
001CD8 0F5CD8 -> $0166                CAN0RXDSR2      EQU     $0166
001CD8 0F5CD8 -> $0167                CANRXDSR3       EQU     $0167
001CD8 0F5CD8 -> $0167                CAN0RXDSR3      EQU     $0167
001CD8 0F5CD8 -> $0168                CANRXDSR4       EQU     $0168
001CD8 0F5CD8 -> $0168                CAN0RXDSR4      EQU     $0168
001CD8 0F5CD8 -> $0169                CANRXDSR5       EQU     $0169
001CD8 0F5CD8 -> $0169                CAN0RXDSR5      EQU     $0169
001CD8 0F5CD8 -> $016A                CANRXDSR6       EQU     $016A
001CD8 0F5CD8 -> $016A                CAN0RXDSR6      EQU     $016A
001CD8 0F5CD8 -> $016B                CANRXDSR7       EQU     $016B
001CD8 0F5CD8 -> $016B                CAN0RXDSR7      EQU     $016B
001CD8 0F5CD8 -> $016C                CANRXDLR        EQU     $016C
001CD8 0F5CD8 -> $016C                CAN0RXDLR       EQU     $016C
                                      ;$016D reserved
001CD8 0F5CD8 -> $016E                CANRTSRH        EQU     $016E
001CD8 0F5CD8 -> $016E                CAN0RTSRH       EQU     $016E
001CD8 0F5CD8 -> $016F                CANRTSRL        EQU     $016F
001CD8 0F5CD8 -> $016F                CAN0RTSRL       EQU     $016F
001CD8 0F5CD8 -> $0170                CANTXIDR0       EQU     $0170
001CD8 0F5CD8 -> $0170                CAN0TXIDR0      EQU     $0170
001CD8 0F5CD8 -> $0171                CANTXIDR1       EQU     $0171
001CD8 0F5CD8 -> $0171                CAN0TXIDR1      EQU     $0171
001CD8 0F5CD8 -> $0172                CANTXIDR2       EQU     $0172
001CD8 0F5CD8 -> $0172                CAN0TXIDR2      EQU     $0172
001CD8 0F5CD8 -> $0172                CANTXIDR2       EQU     $0172
001CD8 0F5CD8 -> $0172                CAN0TXIDR2      EQU     $0172
001CD8 0F5CD8 -> $0173                CANTXIDR3       EQU     $0173
001CD8 0F5CD8 -> $0173                CAN0TXIDR3      EQU     $0173
001CD8 0F5CD8 -> $0174                CANTXDSR0       EQU     $0174
001CD8 0F5CD8 -> $0174                CAN0TXDSR0      EQU     $0174
001CD8 0F5CD8 -> $0175                CANTXDSR1       EQU     $0175
001CD8 0F5CD8 -> $0175                CAN0TXDSR1      EQU     $0175
001CD8 0F5CD8 -> $0176                CANTXDSR2       EQU     $0176
001CD8 0F5CD8 -> $0176                CAN0TXDSR2      EQU     $0176
001CD8 0F5CD8 -> $0177                CANTXDSR3       EQU     $0177
001CD8 0F5CD8 -> $0177                CAN0TXDSR3      EQU     $0177
001CD8 0F5CD8 -> $0178                CANTXDSR4       EQU     $0178
001CD8 0F5CD8 -> $0178                CAN0TXDSR4      EQU     $0178
001CD8 0F5CD8 -> $0179                CANTXDSR5       EQU     $0179
001CD8 0F5CD8 -> $0179                CAN0TXDSR5      EQU     $0179
001CD8 0F5CD8 -> $017A                CANTXDSR6       EQU     $017A
001CD8 0F5CD8 -> $017A                CAN0TXDSR6      EQU     $017A
001CD8 0F5CD8 -> $017B                CANTXDSR7       EQU     $017B
001CD8 0F5CD8 -> $017B                CAN0TXDSR7      EQU     $017B
001CD8 0F5CD8 -> $017C                CANTXDLR        EQU     $017C
001CD8 0F5CD8 -> $017C                CAN0TXDLR       EQU     $017C
001CD8 0F5CD8 -> $017D                CANTXTBPR       EQU     $017D
001CD8 0F5CD8 -> $017D                CAN0TXTBPR      EQU     $017D
001CD8 0F5CD8 -> $017E                CANTXTSRH       EQU     $017E
001CD8 0F5CD8 -> $017E                CAN0TXTSRH      EQU     $017E
001CD8 0F5CD8 -> $017F                CANTXTSRL       EQU     $017F
001CD8 0F5CD8 -> $017F                CAN0TXTSRL      EQU     $017F
001CD8 0F5CD8 -> $0180                CAN1CTL0        EQU     $0180
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CD8 0F5CD8 -> $0181                CAN1CTL1        EQU     $0181
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CD8 0F5CD8 -> $0182                CAN1BTR0        EQU     $0182
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CD8 0F5CD8 -> $0183                CAN1BTR1        EQU     $0183
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CD8 0F5CD8 -> $0184                CAN1RFLG        EQU     $0184
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CD8 0F5CD8 -> $0185                CAN1RIER        EQU     $0185
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CD8 0F5CD8 -> $0186                CAN1TFLG        EQU     $0186
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CD8 0F5CD8 -> $0187                CAN1TIER        EQU     $0187
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CD8 0F5CD8 -> $0188                CAN1TARQ        EQU     $0188
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CD8 0F5CD8 -> $0189                CAN1TAAK        EQU     $0189
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CD8 0F5CD8 -> $018A                CAN1TBSEL       EQU     $018A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CD8 0F5CD8 -> $018B                CAN1IDAC        EQU     $018B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$18C  reserved
001CD8 0F5CD8 -> $018D                CAN1MISC        EQU     $018D
                                      ;BOHOLD         EQU     $01
001CD8 0F5CD8 -> $018E                CAN1RXERR       EQU     $018E
001CD8 0F5CD8 -> $018F                CAN1TXERR       EQU     $018F
001CD8 0F5CD8 -> $0190                CAN1IDAR0       EQU     $0190
001CD8 0F5CD8 -> $0191                CAN1IDAR1       EQU     $0191
001CD8 0F5CD8 -> $0192                CAN1IDAR2       EQU     $0192
001CD8 0F5CD8 -> $0193                CAN1IDAR3       EQU     $0193
001CD8 0F5CD8 -> $0194                CAN1IDMR0       EQU     $0194
001CD8 0F5CD8 -> $0195                CAN1IDMR1       EQU     $0195
001CD8 0F5CD8 -> $0196                CAN1IDMR2       EQU     $0196
001CD8 0F5CD8 -> $0197                CAN1IDMR3       EQU     $0197
001CD8 0F5CD8 -> $0198                CAN1IDAR4       EQU     $0198
001CD8 0F5CD8 -> $0199                CAN1IDAR5       EQU     $0199
001CD8 0F5CD8 -> $019A                CAN1IDAR6       EQU     $019A
001CD8 0F5CD8 -> $019B                CAN1IDAR7       EQU     $019B
001CD8 0F5CD8 -> $019C                CAN1IDMR4       EQU     $019C
001CD8 0F5CD8 -> $019D                CAN1IDMR5       EQU     $019D
001CD8 0F5CD8 -> $019E                CAN1IDMR6       EQU     $019E
001CD8 0F5CD8 -> $019F                CAN1IDMR7       EQU     $019F
001CD8 0F5CD8 -> $01A0                CAN1RXIDR0      EQU     $01A0
001CD8 0F5CD8 -> $01A1                CAN1RXIDR1      EQU     $01A1
001CD8 0F5CD8 -> $01A2                CAN1RXIDR2      EQU     $01A2
001CD8 0F5CD8 -> $01A3                CAN1RXIDR3      EQU     $01A3
001CD8 0F5CD8 -> $01A4                CAN1RXDSR0      EQU     $01A4
001CD8 0F5CD8 -> $01A5                CAN1RXDSR1      EQU     $01A5
001CD8 0F5CD8 -> $01A6                CAN1RXDSR2      EQU     $01A6
001CD8 0F5CD8 -> $01A7                CAN1RXDSR3      EQU     $01A7
001CD8 0F5CD8 -> $01A8                CAN1RXDSR4      EQU     $01A8
001CD8 0F5CD8 -> $01A9                CAN1RXDSR5      EQU     $01A9
001CD8 0F5CD8 -> $01AA                CAN1RXDSR6      EQU     $01AA
001CD8 0F5CD8 -> $01AB                CAN1RXDSR7      EQU     $01AB
001CD8 0F5CD8 -> $01AC                CAN1RXDLR       EQU     $01AC
                                      ;$01AD reserved
001CD8 0F5CD8 -> $01AE                CAN1RTSRH       EQU     $01AE
001CD8 0F5CD8 -> $01AF                CAN1RTSRL       EQU     $01AF
001CD8 0F5CD8 -> $01B0                CAN1TXIDR0      EQU     $01B0
001CD8 0F5CD8 -> $01B1                CAN1TXIDR1      EQU     $01B1
001CD8 0F5CD8 -> $01B2                CAN1TXIDR2      EQU     $01B2
001CD8 0F5CD8 -> $01B2                CAN1TXIDR2      EQU     $01B2
001CD8 0F5CD8 -> $01B3                CAN1TXIDR3      EQU     $01B3
001CD8 0F5CD8 -> $01B4                CAN1TXDSR0      EQU     $01B4
001CD8 0F5CD8 -> $01B5                CAN1TXDSR1      EQU     $01B5
001CD8 0F5CD8 -> $01B6                CAN1TXDSR2      EQU     $01B6
001CD8 0F5CD8 -> $01B7                CAN1XDSR3       EQU     $01B7
001CD8 0F5CD8 -> $01B7                CAN1TXDSR3      EQU     $01B7
001CD8 0F5CD8 -> $01B8                CAN1TXDSR4      EQU     $01B8
001CD8 0F5CD8 -> $01B9                CAN1TXDSR5      EQU     $01B9
001CD8 0F5CD8 -> $01BA                CAN1TXDSR6      EQU     $01BA
001CD8 0F5CD8 -> $01BB                CAN1TXDSR7      EQU     $01BB
001CD8 0F5CD8 -> $01BC                CAN1TXDLR       EQU     $01BC
001CD8 0F5CD8 -> $01BD                CAN1TXTBPR      EQU     $01BD
001CD8 0F5CD8 -> $01BE                CAN1TXTSRH      EQU     $01BE
001CD8 0F5CD8 -> $01BF                CAN1TXTSRL      EQU     $01BF
001CD8 0F5CD8 -> $01C0                CAN2CTL0        EQU     $01C0
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CD8 0F5CD8 -> $01C1                CAN2CTL1        EQU     $01C1
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CD8 0F5CD8 -> $01C2                CAN2BTR0        EQU     $01C2
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CD8 0F5CD8 -> $01C3                CAN2BTR1        EQU     $01C3
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CD8 0F5CD8 -> $01C4                CAN2RFLG        EQU     $01C4
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CD8 0F5CD8 -> $01C5                CAN2RIER        EQU     $01C5
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CD8 0F5CD8 -> $01C6                CAN2TFLG        EQU     $01C6
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CD8 0F5CD8 -> $01C7                CAN2TIER        EQU     $01C7
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CD8 0F5CD8 -> $01C8                CAN2TARQ        EQU     $01C8
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CD8 0F5CD8 -> $01C9                CAN2TAAK        EQU     $01C9
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CD8 0F5CD8 -> $01CA                CAN2TBSEL       EQU     $01CA
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CD8 0F5CD8 -> $01CB                CAN2IDAC        EQU     $01CB
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$01CC  reserved
001CD8 0F5CD8 -> $01CD                CAN2MISC        EQU     $01CD
                                      ;BOHOLD         EQU     $01
001CD8 0F5CD8 -> $01CE                CAN2RXERR       EQU     $01CE
001CD8 0F5CD8 -> $01CF                CAN2TXERR       EQU     $01CF
001CD8 0F5CD8 -> $01D0                CAN2IDAR0       EQU     $01D0
001CD8 0F5CD8 -> $01D1                CAN2IDAR1       EQU     $01D1
001CD8 0F5CD8 -> $01D2                CAN2IDAR2       EQU     $01D2
001CD8 0F5CD8 -> $01D3                CAN2IDAR3       EQU     $01D3
001CD8 0F5CD8 -> $01D4                CAN2IDMR0       EQU     $01D4
001CD8 0F5CD8 -> $01D5                CAN2IDMR1       EQU     $01D5
001CD8 0F5CD8 -> $01D6                CAN2IDMR2       EQU     $01D6
001CD8 0F5CD8 -> $01D7                CAN2IDMR3       EQU     $01D7
001CD8 0F5CD8 -> $01D8                CAN2IDAR4       EQU     $01D8
001CD8 0F5CD8 -> $01D9                CAN2IDAR5       EQU     $01D9
001CD8 0F5CD8 -> $01DA                CAN2IDAR6       EQU     $01DA
001CD8 0F5CD8 -> $01DB                CAN2IDAR7       EQU     $01DB
001CD8 0F5CD8 -> $01DC                CAN2IDMR4       EQU     $01DC
001CD8 0F5CD8 -> $01DD                CAN2IDMR5       EQU     $01DD
001CD8 0F5CD8 -> $01DE                CAN2IDMR6       EQU     $01DE
001CD8 0F5CD8 -> $01DF                CAN2IDMR7       EQU     $01DF
001CD8 0F5CD8 -> $01E0                CAN2RXIDR0      EQU     $01E0
001CD8 0F5CD8 -> $01E1                CAN2RXIDR1      EQU     $01E1
001CD8 0F5CD8 -> $01E2                CAN2RXIDR2      EQU     $01E2
001CD8 0F5CD8 -> $01E3                CAN2RXIDR3      EQU     $01E3
001CD8 0F5CD8 -> $01E4                CAN2RXDSR0      EQU     $01E4
001CD8 0F5CD8 -> $01E5                CAN2RXDSR1      EQU     $01E5
001CD8 0F5CD8 -> $01E6                CAN2RXDSR2      EQU     $01E6
001CD8 0F5CD8 -> $01E7                CAN2RXDSR3      EQU     $01E7
001CD8 0F5CD8 -> $01E8                CAN2RXDSR4      EQU     $01E8
001CD8 0F5CD8 -> $01E9                CAN2RXDSR5      EQU     $01E9
001CD8 0F5CD8 -> $01EA                CAN2RXDSR6      EQU     $01EA
001CD8 0F5CD8 -> $01EB                CAN2RXDSR7      EQU     $01EB
001CD8 0F5CD8 -> $01EC                CAN2RXDLR       EQU     $01EC
                                      ;$01ED reserved
001CD8 0F5CD8 -> $01EE                CAN2RTSRH       EQU     $01EE
001CD8 0F5CD8 -> $01EF                CAN2RTSRL       EQU     $01EF
001CD8 0F5CD8 -> $01F0                CAN2TXIDR0      EQU     $01F0
001CD8 0F5CD8 -> $01F1                CAN2TXIDR1      EQU     $01F1
001CD8 0F5CD8 -> $01F2                CAN2TXIDR2      EQU     $01F2
001CD8 0F5CD8 -> $01F2                CAN2TXIDR2      EQU     $01F2
001CD8 0F5CD8 -> $01F3                CAN2TXIDR3      EQU     $01F3
001CD8 0F5CD8 -> $01F4                CAN2TXDSR0      EQU     $01F4
001CD8 0F5CD8 -> $01F5                CAN2TXDSR1      EQU     $01F5
001CD8 0F5CD8 -> $01F6                CAN2TXDSR2      EQU     $01F6
001CD8 0F5CD8 -> $01F7                CAN2XDSR3       EQU     $01F7
001CD8 0F5CD8 -> $01F7                CAN2TXDSR3      EQU     $01F7
001CD8 0F5CD8 -> $01F8                CAN2TXDSR4      EQU     $01F8
001CD8 0F5CD8 -> $01F9                CAN2TXDSR5      EQU     $01F9
001CD8 0F5CD8 -> $01FA                CAN2TXDSR6      EQU     $01FA
001CD8 0F5CD8 -> $01FB                CAN2TXDSR7      EQU     $01FB
001CD8 0F5CD8 -> $01FC                CAN2TXDLR       EQU     $01FC
001CD8 0F5CD8 -> $01FD                CAN2TXTBPR      EQU     $01FD
001CD8 0F5CD8 -> $01FE                CAN2TXTSRH      EQU     $01FE
001CD8 0F5CD8 -> $01FF                CAN2TXTSRL      EQU     $01FF
001CD8 0F5CD8 -> $0200                CAN3CTL0        EQU     $0200
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CD8 0F5CD8 -> $0201                CAN3CTL1        EQU     $0201
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CD8 0F5CD8 -> $0202                CAN3BTR0        EQU     $0202
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CD8 0F5CD8 -> $0203                CAN3BTR1        EQU     $0203
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CD8 0F5CD8 -> $0204                CAN3RFLG        EQU     $0204
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CD8 0F5CD8 -> $0205                CAN3RIER        EQU     $0205
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CD8 0F5CD8 -> $0206                CAN3TFLG        EQU     $0206
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CD8 0F5CD8 -> $0207                CAN3TIER        EQU     $0207
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CD8 0F5CD8 -> $0208                CAN3TARQ        EQU     $0208
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CD8 0F5CD8 -> $0209                CAN3TAAK        EQU     $0209
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CD8 0F5CD8 -> $020A                CAN3TBSEL       EQU     $020A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CD8 0F5CD8 -> $020B                CAN3IDAC        EQU     $020B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$020C  reserved
001CD8 0F5CD8 -> $020D                CAN3MISC        EQU     $020D
                                      ;BOHOLD         EQU     $01
001CD8 0F5CD8 -> $020E                CAN3RXERR       EQU     $020E
001CD8 0F5CD8 -> $020F                CAN3TXERR       EQU     $020F
001CD8 0F5CD8 -> $0210                CAN3IDAR0       EQU     $0210
001CD8 0F5CD8 -> $0211                CAN3IDAR1       EQU     $0211
001CD8 0F5CD8 -> $0212                CAN3IDAR2       EQU     $0212
001CD8 0F5CD8 -> $0213                CAN3IDAR3       EQU     $0213
001CD8 0F5CD8 -> $0214                CAN3IDMR0       EQU     $0214
001CD8 0F5CD8 -> $0215                CAN3IDMR1       EQU     $0215
001CD8 0F5CD8 -> $0216                CAN3IDMR2       EQU     $0216
001CD8 0F5CD8 -> $0217                CAN3IDMR3       EQU     $0217
001CD8 0F5CD8 -> $0218                CAN3IDAR4       EQU     $0218
001CD8 0F5CD8 -> $0219                CAN3IDAR5       EQU     $0219
001CD8 0F5CD8 -> $021A                CAN3IDAR6       EQU     $021A
001CD8 0F5CD8 -> $021B                CAN3IDAR7       EQU     $021B
001CD8 0F5CD8 -> $021C                CAN3IDMR4       EQU     $021C
001CD8 0F5CD8 -> $021D                CAN3IDMR5       EQU     $021D
001CD8 0F5CD8 -> $021E                CAN3IDMR6       EQU     $021E
001CD8 0F5CD8 -> $021F                CAN3IDMR7       EQU     $021F
001CD8 0F5CD8 -> $0220                CAN3RXIDR0      EQU     $0220
001CD8 0F5CD8 -> $0221                CAN3RXIDR1      EQU     $0221
001CD8 0F5CD8 -> $0222                CAN3RXIDR2      EQU     $0222
001CD8 0F5CD8 -> $0223                CAN3RXIDR3      EQU     $0223
001CD8 0F5CD8 -> $0224                CAN3RXDSR0      EQU     $0224
001CD8 0F5CD8 -> $0225                CAN3RXDSR1      EQU     $0225
001CD8 0F5CD8 -> $0226                CAN3RXDSR2      EQU     $0226
001CD8 0F5CD8 -> $0227                CAN3RXDSR3      EQU     $0227
001CD8 0F5CD8 -> $0228                CAN3RXDSR4      EQU     $0228
001CD8 0F5CD8 -> $0229                CAN3RXDSR5      EQU     $0229
001CD8 0F5CD8 -> $022A                CAN3RXDSR6      EQU     $022A
001CD8 0F5CD8 -> $022B                CAN3RXDSR7      EQU     $022B
001CD8 0F5CD8 -> $022C                CAN3RXDLR       EQU     $022C
                                      ;$022D reserved
001CD8 0F5CD8 -> $022E                CAN3RTSRH       EQU     $022E
001CD8 0F5CD8 -> $022F                CAN3RTSRL       EQU     $022F
001CD8 0F5CD8 -> $0230                CAN3TXIDR0      EQU     $0230
001CD8 0F5CD8 -> $0231                CAN3TXIDR1      EQU     $0231
001CD8 0F5CD8 -> $0232                CAN3TXIDR2      EQU     $0232
001CD8 0F5CD8 -> $0232                CAN3TXIDR2      EQU     $0232
001CD8 0F5CD8 -> $0233                CAN3TXIDR3      EQU     $0233
001CD8 0F5CD8 -> $0234                CAN3TXDSR0      EQU     $0234
001CD8 0F5CD8 -> $0235                CAN3TXDSR1      EQU     $0235
001CD8 0F5CD8 -> $0236                CAN3TXDSR2      EQU     $0236
001CD8 0F5CD8 -> $0237                CAN3XDSR3       EQU     $0237
001CD8 0F5CD8 -> $0237                CAN3TXDSR3      EQU     $0237
001CD8 0F5CD8 -> $0238                CAN3TXDSR4      EQU     $0238
001CD8 0F5CD8 -> $0239                CAN3TXDSR5      EQU     $0239
001CD8 0F5CD8 -> $023A                CAN3TXDSR6      EQU     $023A
001CD8 0F5CD8 -> $023B                CAN3TXDSR7      EQU     $023B
001CD8 0F5CD8 -> $023C                CAN3TXDLR       EQU     $023C
001CD8 0F5CD8 -> $023D                CAN3TXTBPR      EQU     $023D
001CD8 0F5CD8 -> $023E                CAN3TXTSRH      EQU     $023E
001CD8 0F5CD8 -> $023F                CAN3TXTSRL      EQU     $023F
001CD8 0F5CD8 -> $0240                PTT             EQU     $0240
001CD8 0F5CD8 -> $0080                PTT7            EQU     $80
001CD8 0F5CD8 -> $0040                PTT6            EQU     $40
001CD8 0F5CD8 -> $0020                PTT5            EQU     $20
001CD8 0F5CD8 -> $0010                PTT4            EQU     $10
001CD8 0F5CD8 -> $0008                PTT3            EQU     $08
001CD8 0F5CD8 -> $0004                PTT2            EQU     $04
001CD8 0F5CD8 -> $0002                PTT1            EQU     $02
001CD8 0F5CD8 -> $0001                PTT0            EQU     $01
001CD8 0F5CD8 -> $0080                PT7             EQU     $80
001CD8 0F5CD8 -> $0040                PT6             EQU     $40
001CD8 0F5CD8 -> $0020                PT5             EQU     $20
001CD8 0F5CD8 -> $0010                PT4             EQU     $10
001CD8 0F5CD8 -> $0008                PT3             EQU     $08
001CD8 0F5CD8 -> $0004                PT2             EQU     $04
001CD8 0F5CD8 -> $0002                PT1             EQU     $02
001CD8 0F5CD8 -> $0001                PT0             EQU     $01
001CD8 0F5CD8 -> $0241                PTIT            EQU     $0241
001CD8 0F5CD8 -> $0080                PTIT7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIT6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIT5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIT4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIT3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIT2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIT1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIT0           EQU     $01
001CD8 0F5CD8 -> $0242                DDRT            EQU     $0242
001CD8 0F5CD8 -> $0080                DDRT7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRT6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRT5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRT4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRT3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRT2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRT1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRT0           EQU     $01
001CD8 0F5CD8 -> $0243                RDRT            EQU     $0243
001CD8 0F5CD8 -> $0080                RDRT7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRT6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRT5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRT4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRT3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRT2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRT1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRT0           EQU     $01
001CD8 0F5CD8 -> $0244                PERT            EQU     $0244
001CD8 0F5CD8 -> $0080                PERT7           EQU     $80
001CD8 0F5CD8 -> $0040                PERT6           EQU     $40
001CD8 0F5CD8 -> $0020                PERT5           EQU     $20
001CD8 0F5CD8 -> $0010                PERT4           EQU     $10
001CD8 0F5CD8 -> $0008                PERT3           EQU     $08
001CD8 0F5CD8 -> $0004                PERT2           EQU     $04
001CD8 0F5CD8 -> $0002                PERT1           EQU     $02
001CD8 0F5CD8 -> $0001                PERT0           EQU     $01
001CD8 0F5CD8 -> $0245                PPST            EQU     $0245
001CD8 0F5CD8 -> $0080                PPST7           EQU     $80
001CD8 0F5CD8 -> $0040                PPST6           EQU     $40
001CD8 0F5CD8 -> $0020                PPST5           EQU     $20
001CD8 0F5CD8 -> $0010                PPST4           EQU     $10
001CD8 0F5CD8 -> $0008                PPST3           EQU     $08
001CD8 0F5CD8 -> $0004                PPST2           EQU     $04
001CD8 0F5CD8 -> $0002                PPST1           EQU     $02
001CD8 0F5CD8 -> $0001                PPST0           EQU     $01
                                      ;$0246 to $0247 reserved
001CD8 0F5CD8 -> $0248                PTS             EQU     $0248
001CD8 0F5CD8 -> $0080                PTS7            EQU     $80
001CD8 0F5CD8 -> $0040                PTS6            EQU     $40
001CD8 0F5CD8 -> $0020                PTS5            EQU     $20
001CD8 0F5CD8 -> $0010                PTS4            EQU     $10
001CD8 0F5CD8 -> $0008                PTS3            EQU     $08
001CD8 0F5CD8 -> $0004                PTS2            EQU     $04
001CD8 0F5CD8 -> $0002                PTS1            EQU     $02
001CD8 0F5CD8 -> $0001                PTS0            EQU     $01
001CD8 0F5CD8 -> $0080                PS7             EQU     $80
001CD8 0F5CD8 -> $0040                PS6             EQU     $40
001CD8 0F5CD8 -> $0020                PS5             EQU     $20
001CD8 0F5CD8 -> $0010                PS4             EQU     $10
001CD8 0F5CD8 -> $0008                PS3             EQU     $08
001CD8 0F5CD8 -> $0004                PS2             EQU     $04
001CD8 0F5CD8 -> $0002                PS1             EQU     $02
001CD8 0F5CD8 -> $0001                PS0             EQU     $01
001CD8 0F5CD8 -> $0249                PTIS            EQU     $0249
001CD8 0F5CD8 -> $0080                PTIS7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIS6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIS5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIS4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIS3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIS2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIS1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIS0           EQU     $01
001CD8 0F5CD8 -> $024A                DDRS            EQU     $024A
001CD8 0F5CD8 -> $0080                DDRS7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRS6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRS5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRS4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRS3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRS2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRS1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRS0           EQU     $01
001CD8 0F5CD8 -> $024B                RDRS            EQU     $024B
001CD8 0F5CD8 -> $0080                RDRS7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRS6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRS5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRS4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRS3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRS2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRS1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRS0           EQU     $01
001CD8 0F5CD8 -> $024C                PERS            EQU     $024C
001CD8 0F5CD8 -> $0080                PERS7           EQU     $80
001CD8 0F5CD8 -> $0040                PERS6           EQU     $40
001CD8 0F5CD8 -> $0020                PERS5           EQU     $20
001CD8 0F5CD8 -> $0010                PERS4           EQU     $10
001CD8 0F5CD8 -> $0008                PERS3           EQU     $08
001CD8 0F5CD8 -> $0004                PERS2           EQU     $04
001CD8 0F5CD8 -> $0002                PERS1           EQU     $02
001CD8 0F5CD8 -> $0001                PERS0           EQU     $01
001CD8 0F5CD8 -> $024D                PPSS            EQU     $024D
001CD8 0F5CD8 -> $0080                PPSS7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSS6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSS5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSS4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSS3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSS2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSS1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSS0           EQU     $01
001CD8 0F5CD8 -> $024E                WOMS            EQU     $024E
001CD8 0F5CD8 -> $0080                WOMS7           EQU     $80
001CD8 0F5CD8 -> $0040                WOMS6           EQU     $40
001CD8 0F5CD8 -> $0020                WOMS5           EQU     $20
001CD8 0F5CD8 -> $0010                WOMS4           EQU     $10
001CD8 0F5CD8 -> $0008                WOMS3           EQU     $08
001CD8 0F5CD8 -> $0004                WOMS2           EQU     $04
001CD8 0F5CD8 -> $0002                WOMS1           EQU     $02
001CD8 0F5CD8 -> $0001                WOMS0           EQU     $01
                                      ;$024F reserved
001CD8 0F5CD8 -> $0250                PTM             EQU     $0250
001CD8 0F5CD8 -> $0080                PTM7            EQU     $80
001CD8 0F5CD8 -> $0040                PTM6            EQU     $40
001CD8 0F5CD8 -> $0020                PTM5            EQU     $20
001CD8 0F5CD8 -> $0010                PTM4            EQU     $10
001CD8 0F5CD8 -> $0008                PTM3            EQU     $08
001CD8 0F5CD8 -> $0004                PTM2            EQU     $04
001CD8 0F5CD8 -> $0002                PTM1            EQU     $02
001CD8 0F5CD8 -> $0001                PTM0            EQU     $01
001CD8 0F5CD8 -> $0080                PM7             EQU     $80
001CD8 0F5CD8 -> $0040                PM6             EQU     $40
001CD8 0F5CD8 -> $0020                PM5             EQU     $20
001CD8 0F5CD8 -> $0010                PM4             EQU     $10
001CD8 0F5CD8 -> $0008                PM3             EQU     $08
001CD8 0F5CD8 -> $0004                PM2             EQU     $04
001CD8 0F5CD8 -> $0002                PM1             EQU     $02
001CD8 0F5CD8 -> $0001                PM0             EQU     $01
001CD8 0F5CD8 -> $0251                PTIM            EQU     $0251
001CD8 0F5CD8 -> $0080                PTIM7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIM6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIM5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIM4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIM3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIM2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIM1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIM0           EQU     $01
001CD8 0F5CD8 -> $0252                DDRM            EQU     $0252
001CD8 0F5CD8 -> $0080                DDRM7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRM6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRM5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRM4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRM3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRM2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRM1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRM0           EQU     $01
001CD8 0F5CD8 -> $0253                RDRM            EQU     $0253
001CD8 0F5CD8 -> $0080                RDRM7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRM6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRM5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRM4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRM3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRM2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRM1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRM0           EQU     $01
001CD8 0F5CD8 -> $0254                PERM            EQU     $0254
001CD8 0F5CD8 -> $0080                PERM7           EQU     $80
001CD8 0F5CD8 -> $0040                PERM6           EQU     $40
001CD8 0F5CD8 -> $0020                PERM5           EQU     $20
001CD8 0F5CD8 -> $0010                PERM4           EQU     $10
001CD8 0F5CD8 -> $0008                PERM3           EQU     $08
001CD8 0F5CD8 -> $0004                PERM2           EQU     $04
001CD8 0F5CD8 -> $0002                PERM1           EQU     $02
001CD8 0F5CD8 -> $0001                PERM0           EQU     $01
001CD8 0F5CD8 -> $0255                PPSM            EQU     $0255
001CD8 0F5CD8 -> $0080                PPSM7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSM6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSM5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSM4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSM3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSM2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSM1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSM0           EQU     $01
001CD8 0F5CD8 -> $0256                WOMM            EQU     $0256
001CD8 0F5CD8 -> $0080                WOMM7           EQU     $80
001CD8 0F5CD8 -> $0040                WOMM6           EQU     $40
001CD8 0F5CD8 -> $0020                WOMM5           EQU     $20
001CD8 0F5CD8 -> $0010                WOMM4           EQU     $10
001CD8 0F5CD8 -> $0008                WOMM3           EQU     $08
001CD8 0F5CD8 -> $0004                WOMM2           EQU     $04
001CD8 0F5CD8 -> $0002                WOMM1           EQU     $02
001CD8 0F5CD8 -> $0001                WOMM0           EQU     $01
001CD8 0F5CD8 -> $0257                MODRR           EQU     $0257
001CD8 0F5CD8 -> $0040                MODRR6          EQU     $40
001CD8 0F5CD8 -> $0020                MODRR5          EQU     $20
001CD8 0F5CD8 -> $0010                MODRR4          EQU     $10
001CD8 0F5CD8 -> $0008                MODRR3          EQU     $08
001CD8 0F5CD8 -> $0004                MODRR2          EQU     $04
001CD8 0F5CD8 -> $0002                MODRR1          EQU     $02
001CD8 0F5CD8 -> $0001                MODRR0          EQU     $01
001CD8 0F5CD8 -> $0258                PTP             EQU     $0258
001CD8 0F5CD8 -> $0080                PTP7            EQU     $80
001CD8 0F5CD8 -> $0040                PTP6            EQU     $40
001CD8 0F5CD8 -> $0020                PTP5            EQU     $20
001CD8 0F5CD8 -> $0010                PTP4            EQU     $10
001CD8 0F5CD8 -> $0008                PTP3            EQU     $08
001CD8 0F5CD8 -> $0004                PTP2            EQU     $04
001CD8 0F5CD8 -> $0002                PTP1            EQU     $02
001CD8 0F5CD8 -> $0001                PTP0            EQU     $01
001CD8 0F5CD8 -> $0080                PP7             EQU     $80
001CD8 0F5CD8 -> $0040                PP6             EQU     $40
001CD8 0F5CD8 -> $0020                PP5             EQU     $20
001CD8 0F5CD8 -> $0010                PP4             EQU     $10
001CD8 0F5CD8 -> $0008                PP3             EQU     $08
001CD8 0F5CD8 -> $0004                PP2             EQU     $04
001CD8 0F5CD8 -> $0002                PP1             EQU     $02
001CD8 0F5CD8 -> $0001                PP0             EQU     $01
001CD8 0F5CD8 -> $0259                PTIP            EQU     $0259
001CD8 0F5CD8 -> $0080                PTIP7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIP6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIP5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIP4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIP3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIP2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIP1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIP0           EQU     $01
001CD8 0F5CD8 -> $025A                DDRP            EQU     $025A
001CD8 0F5CD8 -> $0080                DDRP7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRP6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRP5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRP4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRP3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRP2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRP1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRP0           EQU     $01
001CD8 0F5CD8 -> $025B                RDRP            EQU     $025B
001CD8 0F5CD8 -> $0080                RDRP7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRP6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRP5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRP4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRP3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRP2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRP1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRP0           EQU     $01
001CD8 0F5CD8 -> $025C                PERP            EQU     $025C
001CD8 0F5CD8 -> $0080                PERP7           EQU     $80
001CD8 0F5CD8 -> $0040                PERP6           EQU     $40
001CD8 0F5CD8 -> $0020                PERP5           EQU     $20
001CD8 0F5CD8 -> $0010                PERP4           EQU     $10
001CD8 0F5CD8 -> $0008                PERP3           EQU     $08
001CD8 0F5CD8 -> $0004                PERP2           EQU     $04
001CD8 0F5CD8 -> $0002                PERP1           EQU     $02
001CD8 0F5CD8 -> $0001                PERP0           EQU     $01
001CD8 0F5CD8 -> $025D                PPSP            EQU     $025D
001CD8 0F5CD8 -> $0080                PPSP7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSP6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSP5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSP4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSP3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSP2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSP1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSP0           EQU     $01
001CD8 0F5CD8 -> $025E                PIEP            EQU     $025E
001CD8 0F5CD8 -> $0080                PIEP7           EQU     $80
001CD8 0F5CD8 -> $0040                PIEP6           EQU     $40
001CD8 0F5CD8 -> $0020                PIEP5           EQU     $20
001CD8 0F5CD8 -> $0010                PIEP4           EQU     $10
001CD8 0F5CD8 -> $0008                PIEP3           EQU     $08
001CD8 0F5CD8 -> $0004                PIEP2           EQU     $04
001CD8 0F5CD8 -> $0002                PIEP1           EQU     $02
001CD8 0F5CD8 -> $0001                PIEP0           EQU     $01
001CD8 0F5CD8 -> $025F                PIFP            EQU     $025F
001CD8 0F5CD8 -> $0080                PIFP7           EQU     $80
001CD8 0F5CD8 -> $0040                PIFP6           EQU     $40
001CD8 0F5CD8 -> $0020                PIFP5           EQU     $20
001CD8 0F5CD8 -> $0010                PIFP4           EQU     $10
001CD8 0F5CD8 -> $0008                PIFP3           EQU     $08
001CD8 0F5CD8 -> $0004                PIFP2           EQU     $04
001CD8 0F5CD8 -> $0002                PIFP1           EQU     $02
001CD8 0F5CD8 -> $0001                PIFP0           EQU     $01
001CD8 0F5CD8 -> $0260                PTH             EQU     $0260
001CD8 0F5CD8 -> $0080                PTH7            EQU     $80
001CD8 0F5CD8 -> $0040                PTH6            EQU     $40
001CD8 0F5CD8 -> $0020                PTH5            EQU     $20
001CD8 0F5CD8 -> $0010                PTH4            EQU     $10
001CD8 0F5CD8 -> $0008                PTH3            EQU     $08
001CD8 0F5CD8 -> $0004                PTH2            EQU     $04
001CD8 0F5CD8 -> $0002                PTH1            EQU     $02
001CD8 0F5CD8 -> $0001                PTH0            EQU     $01
001CD8 0F5CD8 -> $0080                PH7             EQU     $80
001CD8 0F5CD8 -> $0040                PH6             EQU     $40
001CD8 0F5CD8 -> $0020                PH5             EQU     $20
001CD8 0F5CD8 -> $0010                PH4             EQU     $10
001CD8 0F5CD8 -> $0008                PH3             EQU     $08
001CD8 0F5CD8 -> $0004                PH2             EQU     $04
001CD8 0F5CD8 -> $0002                PH1             EQU     $02
001CD8 0F5CD8 -> $0001                PH0             EQU     $01
001CD8 0F5CD8 -> $0261                PTIH            EQU     $0261
001CD8 0F5CD8 -> $0080                PTIH7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIH6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIH5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIH4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIH3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIH2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIH1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIH0           EQU     $01
001CD8 0F5CD8 -> $0262                DDRH            EQU     $0262
001CD8 0F5CD8 -> $0080                DDRH7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRH6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRH5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRH4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRH3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRH2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRH1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRH0           EQU     $01
001CD8 0F5CD8 -> $0263                RDRH            EQU     $0263
001CD8 0F5CD8 -> $0080                RDRH7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRH6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRH5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRH4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRH3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRH2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRH1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRH0           EQU     $01
001CD8 0F5CD8 -> $0264                PERH            EQU     $0264
001CD8 0F5CD8 -> $0080                PERH7           EQU     $80
001CD8 0F5CD8 -> $0040                PERH6           EQU     $40
001CD8 0F5CD8 -> $0020                PERH5           EQU     $20
001CD8 0F5CD8 -> $0010                PERH4           EQU     $10
001CD8 0F5CD8 -> $0008                PERH3           EQU     $08
001CD8 0F5CD8 -> $0004                PERH2           EQU     $04
001CD8 0F5CD8 -> $0002                PERH1           EQU     $02
001CD8 0F5CD8 -> $0001                PERH0           EQU     $01
001CD8 0F5CD8 -> $0265                PPSH            EQU     $0265
001CD8 0F5CD8 -> $0080                PPSH7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSH6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSH5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSH4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSH3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSH2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSH1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSH0           EQU     $01
001CD8 0F5CD8 -> $0266                PIEH            EQU     $0266
001CD8 0F5CD8 -> $0080                PIEH7           EQU     $80
001CD8 0F5CD8 -> $0040                PIEH6           EQU     $40
001CD8 0F5CD8 -> $0020                PIEH5           EQU     $20
001CD8 0F5CD8 -> $0010                PIEH4           EQU     $10
001CD8 0F5CD8 -> $0008                PIEH3           EQU     $08
001CD8 0F5CD8 -> $0004                PIEH2           EQU     $04
001CD8 0F5CD8 -> $0002                PIEH1           EQU     $02
001CD8 0F5CD8 -> $0001                PIEH0           EQU     $01
001CD8 0F5CD8 -> $0267                PIFH            EQU     $0267
001CD8 0F5CD8 -> $0080                PIFH7           EQU     $80
001CD8 0F5CD8 -> $0040                PIFH6           EQU     $40
001CD8 0F5CD8 -> $0020                PIFH5           EQU     $20
001CD8 0F5CD8 -> $0010                PIFH4           EQU     $10
001CD8 0F5CD8 -> $0008                PIFH3           EQU     $08
001CD8 0F5CD8 -> $0004                PIFH2           EQU     $04
001CD8 0F5CD8 -> $0002                PIFH1           EQU     $02
001CD8 0F5CD8 -> $0001                PIFH0           EQU     $01
001CD8 0F5CD8 -> $0268                PTJ             EQU     $0268
001CD8 0F5CD8 -> $0080                PTJ7            EQU     $80
001CD8 0F5CD8 -> $0040                PTJ6            EQU     $40
001CD8 0F5CD8 -> $0020                PTJ5            EQU     $20
001CD8 0F5CD8 -> $0010                PTJ4            EQU     $10
001CD8 0F5CD8 -> $0008                PTJ3            EQU     $08
001CD8 0F5CD8 -> $0004                PTJ2            EQU     $04
001CD8 0F5CD8 -> $0002                PTJ1            EQU     $02
001CD8 0F5CD8 -> $0001                PTJ0            EQU     $01
001CD8 0F5CD8 -> $0080                PJ7             EQU     $80
001CD8 0F5CD8 -> $0040                PJ6             EQU     $40
001CD8 0F5CD8 -> $0020                PJ5             EQU     $20
001CD8 0F5CD8 -> $0010                PJ4             EQU     $10
001CD8 0F5CD8 -> $0008                PJ3             EQU     $08
001CD8 0F5CD8 -> $0004                PJ2             EQU     $04
001CD8 0F5CD8 -> $0002                PJ1             EQU     $02
001CD8 0F5CD8 -> $0001                PJ0             EQU     $01
001CD8 0F5CD8 -> $0269                PTIJ            EQU     $0269
001CD8 0F5CD8 -> $0080                PTIJ7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIJ6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIJ5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIJ4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIJ3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIJ2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIJ1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIJ0           EQU     $01
001CD8 0F5CD8 -> $026A                DDRJ            EQU     $026A
001CD8 0F5CD8 -> $0080                DDRJ7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRJ6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRJ5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRJ4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRJ3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRJ2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRJ1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRJ0           EQU     $01
001CD8 0F5CD8 -> $026B                RDRJ            EQU     $026B
001CD8 0F5CD8 -> $0080                RDRJ7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRJ6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRJ5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRJ4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRJ3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRJ2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRJ1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRJ0           EQU     $01
001CD8 0F5CD8 -> $026C                PERJ            EQU     $026C
001CD8 0F5CD8 -> $0080                PERJ7           EQU     $80
001CD8 0F5CD8 -> $0040                PERJ6           EQU     $40
001CD8 0F5CD8 -> $0020                PERJ5           EQU     $20
001CD8 0F5CD8 -> $0010                PERJ4           EQU     $10
001CD8 0F5CD8 -> $0008                PERJ3           EQU     $08
001CD8 0F5CD8 -> $0004                PERJ2           EQU     $04
001CD8 0F5CD8 -> $0002                PERJ1           EQU     $02
001CD8 0F5CD8 -> $0001                PERJ0           EQU     $01
001CD8 0F5CD8 -> $026D                PPSJ            EQU     $026D
001CD8 0F5CD8 -> $0080                PPSJ7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSJ6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSJ5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSJ4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSJ3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSJ2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSJ1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSJ0           EQU     $01
001CD8 0F5CD8 -> $026E                PIEJ            EQU     $026E
001CD8 0F5CD8 -> $0080                PIEJ7           EQU     $80
001CD8 0F5CD8 -> $0040                PIEJ6           EQU     $40
001CD8 0F5CD8 -> $0020                PIEJ5           EQU     $20
001CD8 0F5CD8 -> $0010                PIEJ4           EQU     $10
001CD8 0F5CD8 -> $0008                PIEJ3           EQU     $08
001CD8 0F5CD8 -> $0004                PIEJ2           EQU     $04
001CD8 0F5CD8 -> $0002                PIEJ1           EQU     $02
001CD8 0F5CD8 -> $0001                PIEJ0           EQU     $01
001CD8 0F5CD8 -> $026F                PIFJ            EQU     $026F
001CD8 0F5CD8 -> $0080                PIFJ7           EQU     $80
001CD8 0F5CD8 -> $0040                PIFJ6           EQU     $40
001CD8 0F5CD8 -> $0020                PIFJ5           EQU     $20
001CD8 0F5CD8 -> $0010                PIFJ4           EQU     $10
001CD8 0F5CD8 -> $0008                PIFJ3           EQU     $08
001CD8 0F5CD8 -> $0004                PIFJ2           EQU     $04
001CD8 0F5CD8 -> $0002                PIFJ1           EQU     $02
001CD8 0F5CD8 -> $0001                PIFJ0           EQU     $01
001CD8 0F5CD8 -> $0270                PT0AD0          EQU     $0270
001CD8 0F5CD8 -> $0080                PT0AD07         EQU     $80
001CD8 0F5CD8 -> $0040                PT0AD06         EQU     $40
001CD8 0F5CD8 -> $0020                PT0AD05         EQU     $20
001CD8 0F5CD8 -> $0010                PT0AD04         EQU     $10
001CD8 0F5CD8 -> $0008                PT0AD03         EQU     $08
001CD8 0F5CD8 -> $0004                PT0AD02         EQU     $04
001CD8 0F5CD8 -> $0002                PT0AD01         EQU     $02
001CD8 0F5CD8 -> $0001                PT0AD00         EQU     $01
001CD8 0F5CD8 -> $0271                PT1AD0          EQU     $0271
001CD8 0F5CD8 -> $0080                PT1AD07         EQU     $80
001CD8 0F5CD8 -> $0040                PT1AD06         EQU     $40
001CD8 0F5CD8 -> $0020                PT1AD05         EQU     $20
001CD8 0F5CD8 -> $0010                PT1AD04         EQU     $10
001CD8 0F5CD8 -> $0008                PT1AD03         EQU     $08
001CD8 0F5CD8 -> $0004                PT1AD02         EQU     $04
001CD8 0F5CD8 -> $0002                PT1AD01         EQU     $02
001CD8 0F5CD8 -> $0001                PT1AD00         EQU     $01
001CD8 0F5CD8 -> $0272                DDR0AD0         EQU     $0272
001CD8 0F5CD8 -> $0080                DDR0AD07        EQU     $80
001CD8 0F5CD8 -> $0040                DDR0AD06        EQU     $40
001CD8 0F5CD8 -> $0020                DDR0AD05        EQU     $20
001CD8 0F5CD8 -> $0010                DDR0AD04        EQU     $10
001CD8 0F5CD8 -> $0008                DDR0AD03        EQU     $08
001CD8 0F5CD8 -> $0004                DDR0AD02        EQU     $04
001CD8 0F5CD8 -> $0002                DDR0AD01        EQU     $02
001CD8 0F5CD8 -> $0001                DDR0AD00        EQU     $01
001CD8 0F5CD8 -> $0273                DDR1AD0         EQU     $0273
001CD8 0F5CD8 -> $0080                DDR1AD07        EQU     $80
001CD8 0F5CD8 -> $0040                DDR1AD06        EQU     $40
001CD8 0F5CD8 -> $0020                DDR1AD05        EQU     $20
001CD8 0F5CD8 -> $0010                DDR1AD04        EQU     $10
001CD8 0F5CD8 -> $0008                DDR1AD03        EQU     $08
001CD8 0F5CD8 -> $0004                DDR1AD02        EQU     $04
001CD8 0F5CD8 -> $0002                DDR1AD01        EQU     $02
001CD8 0F5CD8 -> $0001                DDR1AD00        EQU     $01
001CD8 0F5CD8 -> $0274                RDR0AD0         EQU     $0274
001CD8 0F5CD8 -> $0080                RDR0AD07        EQU     $80
001CD8 0F5CD8 -> $0040                RDR0AD06        EQU     $40
001CD8 0F5CD8 -> $0020                RDR0AD05        EQU     $20
001CD8 0F5CD8 -> $0010                RDR0AD04        EQU     $10
001CD8 0F5CD8 -> $0008                RDR0AD03        EQU     $08
001CD8 0F5CD8 -> $0004                RDR0AD02        EQU     $04
001CD8 0F5CD8 -> $0002                RDR0AD01        EQU     $02
001CD8 0F5CD8 -> $0001                RDR0AD00        EQU     $01
001CD8 0F5CD8 -> $0275                RDR1AD0         EQU     $0275
001CD8 0F5CD8 -> $0080                RDR1AD07        EQU     $80
001CD8 0F5CD8 -> $0040                RDR1AD06        EQU     $40
001CD8 0F5CD8 -> $0020                RDR1AD05        EQU     $20
001CD8 0F5CD8 -> $0010                RDR1AD04        EQU     $10
001CD8 0F5CD8 -> $0008                RDR1AD03        EQU     $08
001CD8 0F5CD8 -> $0004                RDR1AD02        EQU     $04
001CD8 0F5CD8 -> $0002                RDR1AD01        EQU     $02
001CD8 0F5CD8 -> $0001                RDR1AD00        EQU     $01
001CD8 0F5CD8 -> $0276                PER0AD0         EQU     $0276
001CD8 0F5CD8 -> $0080                PER0AD07        EQU     $80
001CD8 0F5CD8 -> $0040                PER0AD06        EQU     $40
001CD8 0F5CD8 -> $0020                PER0AD05        EQU     $20
001CD8 0F5CD8 -> $0010                PER0AD04        EQU     $10
001CD8 0F5CD8 -> $0008                PER0AD03        EQU     $08
001CD8 0F5CD8 -> $0004                PER0AD02        EQU     $04
001CD8 0F5CD8 -> $0002                PER0AD01        EQU     $02
001CD8 0F5CD8 -> $0001                PER0AD00        EQU     $01
001CD8 0F5CD8 -> $0277                PER1AD0         EQU     $0277
001CD8 0F5CD8 -> $0080                PER1AD07        EQU     $80
001CD8 0F5CD8 -> $0040                PER1AD06        EQU     $40
001CD8 0F5CD8 -> $0020                PER1AD05        EQU     $20
001CD8 0F5CD8 -> $0010                PER1AD04        EQU     $10
001CD8 0F5CD8 -> $0008                PER1AD03        EQU     $08
001CD8 0F5CD8 -> $0004                PER1AD02        EQU     $04
001CD8 0F5CD8 -> $0002                PER1AD01        EQU     $02
001CD8 0F5CD8 -> $0001                PER1AD00        EQU     $01
001CD8 0F5CD8 -> $0278                PT0AD1          EQU     $0278
001CD8 0F5CD8 -> $0080                PT0AD17         EQU     $80
001CD8 0F5CD8 -> $0040                PT0AD16         EQU     $40
001CD8 0F5CD8 -> $0020                PT0AD15         EQU     $20
001CD8 0F5CD8 -> $0010                PT0AD14         EQU     $10
001CD8 0F5CD8 -> $0008                PT0AD13         EQU     $08
001CD8 0F5CD8 -> $0004                PT0AD12         EQU     $04
001CD8 0F5CD8 -> $0002                PT0AD11         EQU     $02
001CD8 0F5CD8 -> $0001                PT0AD10         EQU     $01
001CD8 0F5CD8 -> $0279                PT1AD1          EQU     $0279
001CD8 0F5CD8 -> $0080                PT1AD17         EQU     $80
001CD8 0F5CD8 -> $0040                PT1AD16         EQU     $40
001CD8 0F5CD8 -> $0020                PT1AD15         EQU     $20
001CD8 0F5CD8 -> $0010                PT1AD14         EQU     $10
001CD8 0F5CD8 -> $0008                PT1AD13         EQU     $08
001CD8 0F5CD8 -> $0004                PT1AD12         EQU     $04
001CD8 0F5CD8 -> $0002                PT1AD11         EQU     $02
001CD8 0F5CD8 -> $0001                PT1AD10         EQU     $01
001CD8 0F5CD8 -> $027A                DDR0AD1         EQU     $027A
001CD8 0F5CD8 -> $0080                DDR0AD17        EQU     $80
001CD8 0F5CD8 -> $0040                DDR0AD16        EQU     $40
001CD8 0F5CD8 -> $0020                DDR0AD15        EQU     $20
001CD8 0F5CD8 -> $0010                DDR0AD14        EQU     $10
001CD8 0F5CD8 -> $0008                DDR0AD13        EQU     $08
001CD8 0F5CD8 -> $0004                DDR0AD12        EQU     $04
001CD8 0F5CD8 -> $0002                DDR0AD11        EQU     $02
001CD8 0F5CD8 -> $0001                DDR0AD10        EQU     $01
001CD8 0F5CD8 -> $027B                DDR1AD1         EQU     $027B
001CD8 0F5CD8 -> $0080                DDR1AD17        EQU     $80
001CD8 0F5CD8 -> $0040                DDR1AD16        EQU     $40
001CD8 0F5CD8 -> $0020                DDR1AD15        EQU     $20
001CD8 0F5CD8 -> $0010                DDR1AD14        EQU     $10
001CD8 0F5CD8 -> $0008                DDR1AD13        EQU     $08
001CD8 0F5CD8 -> $0004                DDR1AD12        EQU     $04
001CD8 0F5CD8 -> $0002                DDR1AD11        EQU     $02
001CD8 0F5CD8 -> $0001                DDR1AD10        EQU     $01
001CD8 0F5CD8 -> $027C                RDR0AD1         EQU     $027C
001CD8 0F5CD8 -> $0080                RDR0AD17        EQU     $80
001CD8 0F5CD8 -> $0040                RDR0AD16        EQU     $40
001CD8 0F5CD8 -> $0020                RDR0AD15        EQU     $20
001CD8 0F5CD8 -> $0010                RDR0AD14        EQU     $10
001CD8 0F5CD8 -> $0008                RDR0AD13        EQU     $08
001CD8 0F5CD8 -> $0004                RDR0AD12        EQU     $04
001CD8 0F5CD8 -> $0002                RDR0AD11        EQU     $02
001CD8 0F5CD8 -> $0001                RDR0AD10        EQU     $01
001CD8 0F5CD8 -> $027D                RDR1AD1         EQU     $027D
001CD8 0F5CD8 -> $0080                RDR1AD17        EQU     $80
001CD8 0F5CD8 -> $0040                RDR1AD16        EQU     $40
001CD8 0F5CD8 -> $0020                RDR1AD15        EQU     $20
001CD8 0F5CD8 -> $0010                RDR1AD14        EQU     $10
001CD8 0F5CD8 -> $0008                RDR1AD13        EQU     $08
001CD8 0F5CD8 -> $0004                RDR1AD12        EQU     $04
001CD8 0F5CD8 -> $0002                RDR1AD11        EQU     $02
001CD8 0F5CD8 -> $0001                RDR1AD10        EQU     $01
001CD8 0F5CD8 -> $027E                PER0AD1         EQU     $027E
001CD8 0F5CD8 -> $0080                PER0AD17        EQU     $80
001CD8 0F5CD8 -> $0040                PER0AD16        EQU     $40
001CD8 0F5CD8 -> $0020                PER0AD15        EQU     $20
001CD8 0F5CD8 -> $0010                PER0AD14        EQU     $10
001CD8 0F5CD8 -> $0008                PER0AD13        EQU     $08
001CD8 0F5CD8 -> $0004                PER0AD12        EQU     $04
001CD8 0F5CD8 -> $0002                PER0AD11        EQU     $02
001CD8 0F5CD8 -> $0001                PER0AD10        EQU     $01
001CD8 0F5CD8 -> $027F                PER1AD1         EQU     $027F
001CD8 0F5CD8 -> $0080                PER1AD17        EQU     $80
001CD8 0F5CD8 -> $0040                PER1AD16        EQU     $40
001CD8 0F5CD8 -> $0020                PER1AD15        EQU     $20
001CD8 0F5CD8 -> $0010                PER1AD14        EQU     $10
001CD8 0F5CD8 -> $0008                PER1AD13        EQU     $08
001CD8 0F5CD8 -> $0004                PER1AD12        EQU     $04
001CD8 0F5CD8 -> $0002                PER1AD11        EQU     $02
001CD8 0F5CD8 -> $0001                PER1AD10        EQU     $01
001CD8 0F5CD8 -> $0280                CAN4CTL0        EQU     $0280
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CD8 0F5CD8 -> $0281                CAN4CTL1        EQU     $0281
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CD8 0F5CD8 -> $0282                CAN4BTR0        EQU     $0282
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CD8 0F5CD8 -> $0283                CAN4BTR1        EQU     $0283
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CD8 0F5CD8 -> $0284                CAN4RFLG        EQU     $0284
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CD8 0F5CD8 -> $0285                CAN4RIER        EQU     $0285
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CD8 0F5CD8 -> $0286                CAN4TFLG        EQU     $0286
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CD8 0F5CD8 -> $0287                CAN4TIER        EQU     $0287
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CD8 0F5CD8 -> $0288                CAN4TARQ        EQU     $0288
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CD8 0F5CD8 -> $0289                CAN4TAAK        EQU     $0289
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CD8 0F5CD8 -> $028A                CAN4TBSEL       EQU     $028A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CD8 0F5CD8 -> $028B                CAN4IDAC        EQU     $028B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$028C  reserved
001CD8 0F5CD8 -> $028D                CAN4MISC        EQU     $028D
                                      ;BOHOLD         EQU     $01
001CD8 0F5CD8 -> $028E                CAN4RXERR       EQU     $028E
001CD8 0F5CD8 -> $028F                CAN4TXERR       EQU     $028F
001CD8 0F5CD8 -> $0290                CAN4IDAR0       EQU     $0290
001CD8 0F5CD8 -> $0291                CAN4IDAR1       EQU     $0291
001CD8 0F5CD8 -> $0292                CAN4IDAR2       EQU     $0292
001CD8 0F5CD8 -> $0293                CAN4IDAR3       EQU     $0293
001CD8 0F5CD8 -> $0294                CAN4IDMR0       EQU     $0294
001CD8 0F5CD8 -> $0295                CAN4IDMR1       EQU     $0295
001CD8 0F5CD8 -> $0296                CAN4IDMR2       EQU     $0296
001CD8 0F5CD8 -> $0297                CAN4IDMR3       EQU     $0297
001CD8 0F5CD8 -> $0298                CAN4IDAR4       EQU     $0298
001CD8 0F5CD8 -> $0299                CAN4IDAR5       EQU     $0299
001CD8 0F5CD8 -> $029A                CAN4IDAR6       EQU     $029A
001CD8 0F5CD8 -> $029B                CAN4IDAR7       EQU     $029B
001CD8 0F5CD8 -> $029C                CAN4IDMR4       EQU     $029C
001CD8 0F5CD8 -> $029D                CAN4IDMR5       EQU     $029D
001CD8 0F5CD8 -> $029E                CAN4IDMR6       EQU     $029E
001CD8 0F5CD8 -> $029F                CAN4IDMR7       EQU     $029F
001CD8 0F5CD8 -> $02A0                CAN4RXIDR0      EQU     $02A0
001CD8 0F5CD8 -> $02A1                CAN4RXIDR1      EQU     $02A1
001CD8 0F5CD8 -> $02A2                CAN4RXIDR2      EQU     $02A2
001CD8 0F5CD8 -> $02A3                CAN4RXIDR3      EQU     $02A3
001CD8 0F5CD8 -> $02A4                CAN4RXDSR0      EQU     $02A4
001CD8 0F5CD8 -> $02A5                CAN4RXDSR1      EQU     $02A5
001CD8 0F5CD8 -> $02A6                CAN4RXDSR2      EQU     $02A6
001CD8 0F5CD8 -> $02A7                CAN4RXDSR3      EQU     $02A7
001CD8 0F5CD8 -> $02A8                CAN4RXDSR4      EQU     $02A8
001CD8 0F5CD8 -> $02A9                CAN4RXDSR5      EQU     $02A9
001CD8 0F5CD8 -> $02AA                CAN4RXDSR6      EQU     $02AA
001CD8 0F5CD8 -> $02AB                CAN4RXDSR7      EQU     $02AB
001CD8 0F5CD8 -> $02AC                CAN4RXDLR       EQU     $02AC
                                      ;$02AD reserved
001CD8 0F5CD8 -> $02AE                CAN4RTSRH       EQU     $02AE
001CD8 0F5CD8 -> $02AF                CAN4RTSRL       EQU     $02AF
001CD8 0F5CD8 -> $02B0                CAN4TXIDR0      EQU     $02B0
001CD8 0F5CD8 -> $02B1                CAN4TXIDR1      EQU     $02B1
001CD8 0F5CD8 -> $02B2                CAN4TXIDR2      EQU     $02B2
001CD8 0F5CD8 -> $02B2                CAN4TXIDR2      EQU     $02B2
001CD8 0F5CD8 -> $02B3                CAN4TXIDR3      EQU     $02B3
001CD8 0F5CD8 -> $02B4                CAN4TXDSR0      EQU     $02B4
001CD8 0F5CD8 -> $02B5                CAN4TXDSR1      EQU     $02B5
001CD8 0F5CD8 -> $02B6                CAN4TXDSR2      EQU     $02B6
001CD8 0F5CD8 -> $02B7                CAN4XDSR3       EQU     $02B7
001CD8 0F5CD8 -> $02B7                CAN4TXDSR3      EQU     $02B7
001CD8 0F5CD8 -> $02B8                CAN4TXDSR4      EQU     $02B8
001CD8 0F5CD8 -> $02B9                CAN4TXDSR5      EQU     $02B9
001CD8 0F5CD8 -> $02BA                CAN4TXDSR6      EQU     $02BA
001CD8 0F5CD8 -> $02BB                CAN4TXDSR7      EQU     $02BB
001CD8 0F5CD8 -> $02BC                CAN4TXDLR       EQU     $02BC
001CD8 0F5CD8 -> $02BD                CAN4TXTBPR      EQU     $02BD
001CD8 0F5CD8 -> $02BE                CAN4TXTSRH      EQU     $02BE
001CD8 0F5CD8 -> $02BF                CAN4TXTSRL      EQU     $02BF
001CD8 0F5CD8 -> $02C0                ATD0CTL0        EQU     $02C0
001CD8 0F5CD8 -> $02C0                ATDCTL0         EQU     $02C0
                                      ;WRAP3          EQU     $08
                                      ;WRAP2          EQU     $04
                                      ;WRAP1          EQU     $02
                                      ;WRAP0          EQU     $01
001CD8 0F5CD8 -> $02C1                ATD0CTL1        EQU     $02C1
001CD8 0F5CD8 -> $02C1                ATDCTL1         EQU     $02C1
                                      ;ETRIGSEL       EQU     $80
                                      ;SRES1          EQU     $40
                                      ;SRES0          EQU     $20
                                      ;DIS            EQU     $10
                                      ;ETRIGCH3       EQU     $08
                                      ;ETRIGCH2       EQU     $04
                                      ;ETRIGCH1       EQU     $02
                                      ;ETRIGCH0       EQU     $01
001CD8 0F5CD8 -> $02C2                ATD0CTL2        EQU     $02C2
001CD8 0F5CD8 -> $02C2                ATDCTL2         EQU     $02C2
                                      ;AFFC            EQU     $40
                                      ;ICLKSTP         EQU     $20
                                      ;ETRIGLE         EQU     $10
                                      ;ETRIGP          EQU     $08
                                      ;ETRIGE          EQU     $04
                                      ;ASCIE           EQU     $02
                                      ;ASCIF           EQU     $01
001CD8 0F5CD8 -> $02C3                ATD0CTL3        EQU     $02C3
001CD8 0F5CD8 -> $02C3                ATDCTL3         EQU     $02C3
                                      ;DJM             EQU     $80
                                      ;S8C             EQU     $40
                                      ;S4C             EQU     $20
                                      ;S2C             EQU     $10
                                      ;S1C             EQU     $08
                                      ;FIFO            EQU     $04
                                      ;FRZ1            EQU     $02
                                      ;FRZ0            EQU     $01
001CD8 0F5CD8 -> $02C4                ATD0CTL4        EQU     $02C4
001CD8 0F5CD8 -> $02C4                ATDCTL4         EQU     $02C4
                                      ;SMP2           EQU     $80
                                      ;SMP1            EQU     $40
                                      ;SMP0            EQU     $20
                                      ;PRS4            EQU     $10
                                      ;PRS3            EQU     $08
                                      ;PRS2            EQU     $04
                                      ;PRS1            EQU     $02
                                      ;PRS0            EQU     $01
001CD8 0F5CD8 -> $02C5                ATD0CTL5        EQU     $02C5
001CD8 0F5CD8 -> $02C5                ATDCTL5         EQU     $02C5
                                      ;SC              EQU     $40
                                      ;SCAN            EQU     $20
                                      ;MULT            EQU     $10
                                      ;CD              EQU     $08
                                      ;CC              EQU     $04
                                      ;CB              EQU     $02
                                      ;CA              EQU     $01
001CD8 0F5CD8 -> $02C6                ATD0STAT0       EQU     $02C6
001CD8 0F5CD8 -> $02C6                ATDSTAT0        EQU     $02C6
                                      ;SCF             EQU     $80
                                      ;ETORF           EQU     $20
                                      ;FIFOR           EQU     $10
                                      ;CC2             EQU     $04
                                      ;CC1             EQU     $02
                                      ;CC0             EQU     $01
                                      ;$02C7 reserved
001CD8 0F5CD8 -> $02C8                ATD0CMPEH       EQU     $02C8
001CD8 0F5CD8 -> $02C8                ATDCMPEH        EQU     $02C8
                                      ;CMPE15         EQU     $80
                                      ;CMPE14         EQU     $40
                                      ;CMPE13         EQU     $20
                                      ;CMPE12         EQU     $10
                                      ;CMPE11         EQU     $08
                                      ;CMPE10         EQU     $04
                                      ;CMPE9          EQU     $02
                                      ;CMPE8          EQU     $01
001CD8 0F5CD8 -> $02C9                ATD0CMPEL       EQU     $02C9
001CD8 0F5CD8 -> $02C9                ATDCMPEL        EQU     $02C9
                                      ;CMPE7          EQU     $80
                                      ;CMPE6          EQU     $40
                                      ;CMPE5          EQU     $20
                                      ;CMPE4          EQU     $10
                                      ;CMPE3          EQU     $08
                                      ;CMPE2          EQU     $04
                                      ;CMPE1          EQU     $02
                                      ;CMPE0          EQU     $01
001CD8 0F5CD8 -> $02CA                ATD0STAT2H      EQU     $02CA
001CD8 0F5CD8 -> $02CA                ATDSTAT2H       EQU     $02CA
                                      ;CCF15          EQU     $80
                                      ;CCF14          EQU     $40
                                      ;CCF13          EQU     $20
                                      ;CCF12          EQU     $10
                                      ;CCF11          EQU     $08
                                      ;CCF10          EQU     $04
                                      ;CCF9           EQU     $02
                                      ;CCF8           EQU     $01
001CD8 0F5CD8 -> $02CB                ATD0STAT2L      EQU     $02CB
001CD8 0F5CD8 -> $02CB                ATDSTAT2L       EQU     $02CB
                                      ;CCF7           EQU     $80
                                      ;CCF6           EQU     $40
                                      ;CCF5           EQU     $20
                                      ;CCF4           EQU     $10
                                      ;CCF3           EQU     $08
                                      ;CCF2           EQU     $04
                                      ;CCF1           EQU     $02
                                      ;CCF0           EQU     $01
001CD8 0F5CD8 -> $02CC                ATD0DIENH       EQU     $02CC
001CD8 0F5CD8 -> $02CC                ATDDIENH        EQU     $02CC
                                      ;IEN15          EQU     $80
                                      ;IEN14          EQU     $40
                                      ;IEN13          EQU     $20
                                      ;IEN12          EQU     $10
                                      ;IEN11          EQU     $08
                                      ;IEN10          EQU     $04
                                      ;IEN9           EQU     $02
                                      ;IEN8           EQU     $01
001CD8 0F5CD8 -> $02CD                ATD0DIENL       EQU     $02CD
001CD8 0F5CD8 -> $02CD                ATDDIENL        EQU     $02CD
                                      ;IEN7           EQU     $80
                                      ;IEN6           EQU     $40
                                      ;IEN5           EQU     $20
                                      ;IEN4           EQU     $10
                                      ;IEN3           EQU     $08
                                      ;IEN2           EQU     $04
                                      ;IEN1           EQU     $02
                                      ;IEN0           EQU     $01
001CD8 0F5CD8 -> $02CE                ATD0CMPHTH      EQU     $02CE
001CD8 0F5CD8 -> $02CE                ATDCMPHTH       EQU     $02CE
                                      ;CMPHT15        EQU     $80
                                      ;CMPHT14        EQU     $40
                                      ;CMPHT13        EQU     $20
                                      ;CMPHT12        EQU     $10
                                      ;CMPHT11        EQU     $08
                                      ;CMPHT10        EQU     $04
                                      ;CMPHT9         EQU     $02
                                      ;CMPHT8         EQU     $01
001CD8 0F5CD8 -> $02CF                ATD0CMPHTL      EQU     $02CF
001CD8 0F5CD8 -> $02CF                ATDCMPHTL       EQU     $02CF
                                      ;CMPHT0         EQU     $01
                                      ;CMPHT1         EQU     $02
                                      ;CMPHT2         EQU     $04
                                      ;CMPHT3         EQU     $08
                                      ;CMPHT4         EQU     $10
                                      ;CMPHT5         EQU     $20
                                      ;CMPHT6         EQU     $40
                                      ;CMPHT7         EQU     $80
001CD8 0F5CD8 -> $02D0                ATD0DR0         EQU     $02D0
001CD8 0F5CD8 -> $02D0                ATDDR0          EQU     $02D0
001CD8 0F5CD8 -> $02D0                ATD0DR0H        EQU     $02D0
001CD8 0F5CD8 -> $02D1                ATD0DR0L        EQU     $02D1
001CD8 0F5CD8 -> $02D2                ATD0DR1         EQU     $02D2
001CD8 0F5CD8 -> $02D2                ATDDR1          EQU     $02D2
001CD8 0F5CD8 -> $02D2                ATD0DR1H        EQU     $02D2
001CD8 0F5CD8 -> $02D3                ATD0DR1L        EQU     $02D3
001CD8 0F5CD8 -> $02D4                ATD0DR2         EQU     $02D4
001CD8 0F5CD8 -> $02D4                ATDDR2          EQU     $02D4
001CD8 0F5CD8 -> $02D4                ATD0DR2H        EQU     $02D4
001CD8 0F5CD8 -> $02D5                ATD0DR2L        EQU     $02D5
001CD8 0F5CD8 -> $02D6                ATD0DR3         EQU     $02D6
001CD8 0F5CD8 -> $02D6                ATDDR3          EQU     $02D6
001CD8 0F5CD8 -> $02D6                ATD0DR3H        EQU     $02D6
001CD8 0F5CD8 -> $02D7                ATD0DR3L        EQU     $02D7
001CD8 0F5CD8 -> $02D8                ATD0DR4         EQU     $02D8
001CD8 0F5CD8 -> $02D8                ATDDR4          EQU     $02D8
001CD8 0F5CD8 -> $02D8                ATD0DR4H        EQU     $02D8
001CD8 0F5CD8 -> $02D9                ATD0DR4L        EQU     $02D9
001CD8 0F5CD8 -> $02DA                ATD0DR5         EQU     $02DA
001CD8 0F5CD8 -> $02DA                ATDDR5          EQU     $02DA
001CD8 0F5CD8 -> $02DA                ATD0DR5H        EQU     $02DA
001CD8 0F5CD8 -> $02DB                ATD0DR5L        EQU     $02DB
001CD8 0F5CD8 -> $02DC                ATD0DR6         EQU     $02DC
001CD8 0F5CD8 -> $02DC                ATDDR6          EQU     $02DC
001CD8 0F5CD8 -> $02DC                ATD0DR6H        EQU     $02DC
001CD8 0F5CD8 -> $02DD                ATD0DR6L        EQU     $02DD
001CD8 0F5CD8 -> $02DE                ATD0DR7         EQU     $02DE
001CD8 0F5CD8 -> $02DE                ATDDR7          EQU     $02DE
001CD8 0F5CD8 -> $02DE                ATD0DR7H        EQU     $02DE
001CD8 0F5CD8 -> $02DF                ATD0DR7L        EQU     $02DF
001CD8 0F5CD8 -> $02E0                ATD0DR8         EQU     $02E0
001CD8 0F5CD8 -> $02E0                ATDDR8          EQU     $02E0
001CD8 0F5CD8 -> $02E0                ATD0DR8H        EQU     $02E0
001CD8 0F5CD8 -> $02E1                ATD0DR8L        EQU     $02E1
001CD8 0F5CD8 -> $02E2                ATD0DR9         EQU     $02E2
001CD8 0F5CD8 -> $02E2                ATDDR9          EQU     $02E2
001CD8 0F5CD8 -> $02E2                ATD0DR9H        EQU     $02E2
001CD8 0F5CD8 -> $02E3                ATD0DR9L        EQU     $02E3
001CD8 0F5CD8 -> $02E3                ATD0DR10        EQU     $02E3
001CD8 0F5CD8 -> $02E3                ATDDR10         EQU     $02E3
001CD8 0F5CD8 -> $02E3                ATD0DR10H       EQU     $02E3
001CD8 0F5CD8 -> $02E5                ATD0DR10L       EQU     $02E5
001CD8 0F5CD8 -> $02E6                ATD0DR11        EQU     $02E6
001CD8 0F5CD8 -> $02E6                ATDDR11         EQU     $02E6
001CD8 0F5CD8 -> $02E6                ATD0DR11H       EQU     $02E6
001CD8 0F5CD8 -> $02E7                ATD0DR11L       EQU     $02E7
001CD8 0F5CD8 -> $02E8                ATD0DR12        EQU     $02E8
001CD8 0F5CD8 -> $02E8                ATDDR12         EQU     $02E8
001CD8 0F5CD8 -> $02E8                ATD0DR12H       EQU     $02E8
001CD8 0F5CD8 -> $02E9                ATD0DR12L       EQU     $02E9
001CD8 0F5CD8 -> $02EA                ATD0DR13        EQU     $02EA
001CD8 0F5CD8 -> $02EA                ATDDR13         EQU     $02EA
001CD8 0F5CD8 -> $02EA                ATD0DR13H       EQU     $02EA
001CD8 0F5CD8 -> $02EB                ATD0DR13L       EQU     $02EB
001CD8 0F5CD8 -> $02EC                ATD0DR14        EQU     $02EC
001CD8 0F5CD8 -> $02EC                ATDDR14         EQU     $02EC
001CD8 0F5CD8 -> $02EC                ATD0DR14H       EQU     $02EC
001CD8 0F5CD8 -> $02ED                ATD0DR14L       EQU     $02ED
001CD8 0F5CD8 -> $02EE                ATD0DR15        EQU     $02EE
001CD8 0F5CD8 -> $02EE                ATDDR15         EQU     $02EE
001CD8 0F5CD8 -> $02EE                ATD0DR15H       EQU     $02EE
001CD8 0F5CD8 -> $02EF                ATD0DR15L       EQU     $02EF
001CD8 0F5CD8 -> $02F0                VREGHTCL        EQU     $02F0
001CD8 0F5CD8 -> $0020                VSEL            EQU     $20
001CD8 0F5CD8 -> $0010                VAE             EQU     $10
001CD8 0F5CD8 -> $0008                HTEN            EQU     $08
001CD8 0F5CD8 -> $0004                HTDS            EQU     $04
001CD8 0F5CD8 -> $0002                HTIE            EQU     $02
001CD8 0F5CD8 -> $0001                HTIF            EQU     $01
001CD8 0F5CD8 -> $02F1                VREGCTRL        EQU     $02F1
001CD8 0F5CD8 -> $0004                LVDS            EQU     $04
001CD8 0F5CD8 -> $0002                LVIE            EQU     $02
001CD8 0F5CD8 -> $0001                LVIF            EQU     $01
001CD8 0F5CD8 -> $02F2                VREGAPICTL      EQU     $02F2
001CD8 0F5CD8 -> $0080                APICLK          EQU     $80
001CD8 0F5CD8 -> $0010                APIES           EQU     $10
001CD8 0F5CD8 -> $0008                APIEA           EQU     $08
001CD8 0F5CD8 -> $0004                APIFE           EQU     $04
001CD8 0F5CD8 -> $0002                APIE            EQU     $02
001CD8 0F5CD8 -> $0001                APIF            EQU     $01
001CD8 0F5CD8 -> $02F3                VREGAPITR       EQU     $02F3
001CD8 0F5CD8 -> $0080                APITR5          EQU     $80
001CD8 0F5CD8 -> $0040                APITR4          EQU     $40
001CD8 0F5CD8 -> $0020                APITR3          EQU     $20
001CD8 0F5CD8 -> $0010                APITR2          EQU     $10
001CD8 0F5CD8 -> $0008                APITR1          EQU     $08
001CD8 0F5CD8 -> $0004                APITR0          EQU     $04
001CD8 0F5CD8 -> $02F4                VREGAPIRH       EQU     $02F4
001CD8 0F5CD8 -> $0080                APIR15          EQU     $80
001CD8 0F5CD8 -> $0040                APIR14          EQU     $40
001CD8 0F5CD8 -> $0020                APIR13          EQU     $20
001CD8 0F5CD8 -> $0010                APIR12          EQU     $10
001CD8 0F5CD8 -> $0008                APIR11          EQU     $08
001CD8 0F5CD8 -> $0004                APIR10          EQU     $04
001CD8 0F5CD8 -> $0002                APIR9           EQU     $02
001CD8 0F5CD8 -> $0001                APIR8           EQU     $01
001CD8 0F5CD8 -> $02F5                VREGAPIRL       EQU     $02F5
001CD8 0F5CD8 -> $0080                APIR7           EQU     $80
001CD8 0F5CD8 -> $0040                APIR6           EQU     $40
001CD8 0F5CD8 -> $0020                APIR5           EQU     $20
001CD8 0F5CD8 -> $0010                APIR4           EQU     $10
001CD8 0F5CD8 -> $0008                APIR3           EQU     $08
001CD8 0F5CD8 -> $0004                APIR2           EQU     $04
001CD8 0F5CD8 -> $0002                APIR1           EQU     $02
001CD8 0F5CD8 -> $0001                APIR0           EQU     $01
                                      ;$02F6 reserved
001CD8 0F5CD8 -> $02F7                VREGHTTR        EQU     $02F7
001CD8 0F5CD8 -> $0080                HTOEN           EQU     $80
001CD8 0F5CD8 -> $000F                HTTR            EQU     $0F
                                      ;$02F8 to $02FF reserved
001CD8 0F5CD8 -> $0300                PWME            EQU     $0300
001CD8 0F5CD8 -> $0080                PWME7           EQU     $80
001CD8 0F5CD8 -> $0040                PWME6           EQU     $40
001CD8 0F5CD8 -> $0020                PWME5           EQU     $20
001CD8 0F5CD8 -> $0010                PWME4           EQU     $10
001CD8 0F5CD8 -> $0008                PWME3           EQU     $08
001CD8 0F5CD8 -> $0004                PWME2           EQU     $04
001CD8 0F5CD8 -> $0002                PWME1           EQU     $02
001CD8 0F5CD8 -> $0001                PWME0           EQU     $01
001CD8 0F5CD8 -> $0301                PWMPOL          EQU     $0301
001CD8 0F5CD8 -> $0080                PPOL7           EQU     $80
001CD8 0F5CD8 -> $0040                PPOL6           EQU     $40
001CD8 0F5CD8 -> $0020                PPOL5           EQU     $20
001CD8 0F5CD8 -> $0010                PPOL4           EQU     $10
001CD8 0F5CD8 -> $0008                PPOL3           EQU     $08
001CD8 0F5CD8 -> $0004                PPOL2           EQU     $04
001CD8 0F5CD8 -> $0002                PPOL1           EQU     $02
001CD8 0F5CD8 -> $0001                PPOL0           EQU     $01
001CD8 0F5CD8 -> $0302                PWMCLK          EQU     $0302
001CD8 0F5CD8 -> $0080                PCLK7           EQU     $80
001CD8 0F5CD8 -> $0040                PCLK6           EQU     $40
001CD8 0F5CD8 -> $0020                PCLK5           EQU     $20
001CD8 0F5CD8 -> $0010                PCLK4           EQU     $10
001CD8 0F5CD8 -> $0008                PCLK3           EQU     $08
001CD8 0F5CD8 -> $0004                PCLK2           EQU     $04
001CD8 0F5CD8 -> $0002                PCLK1           EQU     $02
001CD8 0F5CD8 -> $0001                PCLK0           EQU     $01
001CD8 0F5CD8 -> $0303                PWMPRCLK        EQU     $0303
001CD8 0F5CD8 -> $0040                PCKB2           EQU     $40
001CD8 0F5CD8 -> $0020                PCKB1           EQU     $20
001CD8 0F5CD8 -> $0010                PCKB0           EQU     $10
001CD8 0F5CD8 -> $0004                PCKA2           EQU     $04
001CD8 0F5CD8 -> $0002                PCKA1           EQU     $02
001CD8 0F5CD8 -> $0001                PCKA0           EQU     $01
001CD8 0F5CD8 -> $0304                PWMCAE          EQU     $0304
001CD8 0F5CD8 -> $0080                CAE7            EQU     $80
001CD8 0F5CD8 -> $0040                CAE6            EQU     $40
001CD8 0F5CD8 -> $0020                CAE5            EQU     $20
001CD8 0F5CD8 -> $0010                CAE4            EQU     $10
001CD8 0F5CD8 -> $0008                CAE3            EQU     $08
001CD8 0F5CD8 -> $0004                CAE2            EQU     $04
001CD8 0F5CD8 -> $0002                CAE1            EQU     $02
001CD8 0F5CD8 -> $0001                CAE0            EQU     $01
001CD8 0F5CD8 -> $0305                PWMCTL          EQU     $0305
001CD8 0F5CD8 -> $0080                CON67           EQU     $80
001CD8 0F5CD8 -> $0040                CON45           EQU     $40
001CD8 0F5CD8 -> $0020                CON23           EQU     $20
001CD8 0F5CD8 -> $0010                CON01           EQU     $10
001CD8 0F5CD8 -> $0008                PSWAI           EQU     $08
001CD8 0F5CD8 -> $0004                PFRZ            EQU     $04
001CD8 0F5CD8 -> $0306                PWMTST          EQU     $0306
001CD8 0F5CD8 -> $0307                PWMPRSC         EQU     $0307
001CD8 0F5CD8 -> $030A                PWMSCNTA        EQU     $030A
001CD8 0F5CD8 -> $030B                PWMSCNTB        EQU     $030B
001CD8 0F5CD8 -> $030C                PWMCNT0         EQU     $030C
001CD8 0F5CD8 -> $030D                PWMCNT1         EQU     $030D
001CD8 0F5CD8 -> $030E                PWMCNT2         EQU     $030E
001CD8 0F5CD8 -> $030F                PWMCNT3         EQU     $030F
001CD8 0F5CD8 -> $0310                PWMCNT4         EQU     $0310
001CD8 0F5CD8 -> $0311                PWMCNT5         EQU     $0311
001CD8 0F5CD8 -> $0312                PWMCNT6         EQU     $0312
001CD8 0F5CD8 -> $0313                PWMCNT7         EQU     $0313
001CD8 0F5CD8 -> $0314                PWMPER0         EQU     $0314
001CD8 0F5CD8 -> $0315                PWMPER1         EQU     $0315
001CD8 0F5CD8 -> $0316                PWMPER2         EQU     $0316
001CD8 0F5CD8 -> $0317                PWMPER3         EQU     $0317
001CD8 0F5CD8 -> $0318                PWMPER4         EQU     $0318
001CD8 0F5CD8 -> $0319                PWMPER5         EQU     $0319
001CD8 0F5CD8 -> $031A                PWMPER6         EQU     $031A
001CD8 0F5CD8 -> $031B                PWMPER7         EQU     $031B
001CD8 0F5CD8 -> $031C                PWMDTY0         EQU     $031C
001CD8 0F5CD8 -> $031D                PWMDTY1         EQU     $031D
001CD8 0F5CD8 -> $031E                PWMDTY2         EQU     $031E
001CD8 0F5CD8 -> $031F                PWMDTY3         EQU     $031F
001CD8 0F5CD8 -> $0320                PWMDTY4         EQU     $0320
001CD8 0F5CD8 -> $0321                PWMDTY5         EQU     $0321
001CD8 0F5CD8 -> $0322                PWMDTY6         EQU     $0322
001CD8 0F5CD8 -> $0323                PWMDTY7         EQU     $0323
001CD8 0F5CD8 -> $0324                PWMSDN          EQU     $0324
001CD8 0F5CD8 -> $0080                PWMIF           EQU     $80
001CD8 0F5CD8 -> $0040                PWMIE           EQU     $40
001CD8 0F5CD8 -> $0020                PWMRSTRT        EQU     $20
001CD8 0F5CD8 -> $0010                PWMLVL          EQU     $10
001CD8 0F5CD8 -> $0004                PWM7IN          EQU     $04
001CD8 0F5CD8 -> $0002                PWM7INL         EQU     $02
001CD8 0F5CD8 -> $0001                PWM7ENA         EQU     $01
                                      ;$0325 to $032F reserved
001CD8 0F5CD8 -> $0330                SCI6BDH         EQU     $0330
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $0330                SCI6ASR1        EQU     $0330
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $0331                SCI6BDL         EQU     $0331
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $0331                SCI6ACR1        EQU     $0331
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $0332                SCI6CR1         EQU     $0332
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $0332                SCI6ACR2        EQU     $0332
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $0333                SCI6CR2         EQU     $0333
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $0334                SCI6SR1         EQU     $0334
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $0335                SCI6SR2         EQU     $0335
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $0336                SCI6DRH         EQU     $0336
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $0337                SCI6DRL         EQU     $0337
001CD8 0F5CD8 -> $0338                SCI7BDH         EQU     $0338
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CD8 0F5CD8 -> $0338                SCI7ASR1        EQU     $0338
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CD8 0F5CD8 -> $0339                SCI7BDL         EQU     $0339
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CD8 0F5CD8 -> $0339                SCI7ACR1        EQU     $0339
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CD8 0F5CD8 -> $033A                SCI7CR1         EQU     $033A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CD8 0F5CD8 -> $033A                SCI7ACR2        EQU     $033A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CD8 0F5CD8 -> $033B                SCI7CR2         EQU     $033B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CD8 0F5CD8 -> $033C                SCI7SR1         EQU     $033C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CD8 0F5CD8 -> $335D                SCI7SR2         EQU     $0335D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CD8 0F5CD8 -> $033E                SCI7DRH         EQU     $033E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CD8 0F5CD8 -> $033F                SCI7DRL         EQU     $033F
001CD8 0F5CD8 -> $0340                PITCFLMT        EQU     $0340
001CD8 0F5CD8 -> $0080                PITE            EQU     $80
001CD8 0F5CD8 -> $0040                PITSWAI         EQU     $40
001CD8 0F5CD8 -> $0020                PITFRZ          EQU     $20
001CD8 0F5CD8 -> $0002                PFLMT1          EQU     $02
001CD8 0F5CD8 -> $0001                PFLMT0          EQU     $01
001CD8 0F5CD8 -> $0341                PITFLT          EQU     $0341
001CD8 0F5CD8 -> $0080                PFLT7           EQU     $80
001CD8 0F5CD8 -> $0040                PFLT6           EQU     $40
001CD8 0F5CD8 -> $0020                PFLT5           EQU     $20
001CD8 0F5CD8 -> $0010                PFLT4           EQU     $10
001CD8 0F5CD8 -> $0008                PFLT3           EQU     $08
001CD8 0F5CD8 -> $0004                PFLT2           EQU     $04
001CD8 0F5CD8 -> $0002                PFLT1           EQU     $02
001CD8 0F5CD8 -> $0001                PFLT0           EQU     $01
001CD8 0F5CD8 -> $0342                PITCE           EQU     $0342
001CD8 0F5CD8 -> $0080                PCE7            EQU     $80
001CD8 0F5CD8 -> $0040                PCE6            EQU     $40
001CD8 0F5CD8 -> $0020                PCE5            EQU     $20
001CD8 0F5CD8 -> $0010                PCE4            EQU     $10
001CD8 0F5CD8 -> $0008                PCE3            EQU     $08
001CD8 0F5CD8 -> $0004                PCE2            EQU     $04
001CD8 0F5CD8 -> $0002                PCE1            EQU     $02
001CD8 0F5CD8 -> $0001                PCE0            EQU     $01
001CD8 0F5CD8 -> $0343                PITMUX          EQU     $0343
001CD8 0F5CD8 -> $0080                PMUX7           EQU     $80
001CD8 0F5CD8 -> $0040                PMUX6           EQU     $40
001CD8 0F5CD8 -> $0020                PMUX5           EQU     $20
001CD8 0F5CD8 -> $0010                PMUX4           EQU     $10
001CD8 0F5CD8 -> $0008                PMUX3           EQU     $08
001CD8 0F5CD8 -> $0004                PMUX2           EQU     $04
001CD8 0F5CD8 -> $0002                PMUX1           EQU     $02
001CD8 0F5CD8 -> $0001                PMUX0           EQU     $01
001CD8 0F5CD8 -> $0344                PITINTE         EQU     $0344
001CD8 0F5CD8 -> $0080                PINTE7          EQU     $80
001CD8 0F5CD8 -> $0040                PINTE6          EQU     $40
001CD8 0F5CD8 -> $0020                PINTE5          EQU     $20
001CD8 0F5CD8 -> $0010                PINTE4          EQU     $10
001CD8 0F5CD8 -> $0008                PINTE3          EQU     $08
001CD8 0F5CD8 -> $0004                PINTE2          EQU     $04
001CD8 0F5CD8 -> $0002                PINTE1          EQU     $02
001CD8 0F5CD8 -> $0001                PINTE0          EQU     $01
001CD8 0F5CD8 -> $0345                PITTF           EQU     $0345
001CD8 0F5CD8 -> $0080                PTF7            EQU     $80
001CD8 0F5CD8 -> $0040                PTF6            EQU     $40
001CD8 0F5CD8 -> $0020                PTF5            EQU     $20
001CD8 0F5CD8 -> $0010                PTF4            EQU     $10
001CD8 0F5CD8 -> $0008                PTF3            EQU     $08
001CD8 0F5CD8 -> $0004                PTF2            EQU     $04
001CD8 0F5CD8 -> $0002                PTF1            EQU     $02
001CD8 0F5CD8 -> $0001                PTF0            EQU     $01
001CD8 0F5CD8 -> $0346                PITMTLD0        EQU     $0346
001CD8 0F5CD8 -> $0080                PMTLD7          EQU     $80
001CD8 0F5CD8 -> $0040                PMTLD6          EQU     $40
001CD8 0F5CD8 -> $0020                PMTLD5          EQU     $20
001CD8 0F5CD8 -> $0010                PMTLD4          EQU     $10
001CD8 0F5CD8 -> $0008                PMTLD3          EQU     $08
001CD8 0F5CD8 -> $0004                PMTLD2          EQU     $04
001CD8 0F5CD8 -> $0002                PMTLD1          EQU     $02
001CD8 0F5CD8 -> $0001                PMTLD0          EQU     $01
001CD8 0F5CD8 -> $0347                PITMTLD1        EQU     $0347
                                      ;PMTLD7         EQU     $80
                                      ;PMTLD6         EQU     $40
                                      ;PMTLD5         EQU     $20
                                      ;PMTLD4         EQU     $10
                                      ;PMTLD3         EQU     $08
                                      ;PMTLD2         EQU     $04
                                      ;PMTLD1         EQU     $02
                                      ;PMTLD0         EQU     $01
001CD8 0F5CD8 -> $0348                PITLD0          EQU     $0348
001CD8 0F5CD8 -> $034A                PITCNT0         EQU     $034A
001CD8 0F5CD8 -> $034C                PITLD1          EQU     $034C
001CD8 0F5CD8 -> $034E                PITCNT1         EQU     $034E
001CD8 0F5CD8 -> $0350                PITLD2          EQU     $0350
001CD8 0F5CD8 -> $0352                PITCNT2         EQU     $0352
001CD8 0F5CD8 -> $0354                PITLD3          EQU     $0354
001CD8 0F5CD8 -> $0356                PITCNT3         EQU     $0356
001CD8 0F5CD8 -> $0358                PITLD4          EQU     $0358
001CD8 0F5CD8 -> $035A                PITCNT4         EQU     $035A
001CD8 0F5CD8 -> $035C                PITLD5          EQU     $035C
001CD8 0F5CD8 -> $035E                PITCNT5         EQU     $035E
001CD8 0F5CD8 -> $0360                PITLD6          EQU     $0360
001CD8 0F5CD8 -> $0362                PITCNT6         EQU     $0362
001CD8 0F5CD8 -> $0364                PITLD7          EQU     $0364
001CD8 0F5CD8 -> $0366                PITCNT7         EQU     $0366
001CD8 0F5CD8 -> $0368                PTR             EQU     $0368
001CD8 0F5CD8 -> $0080                PTR7            EQU     $80
001CD8 0F5CD8 -> $0040                PTR6            EQU     $40
001CD8 0F5CD8 -> $0020                PTR5            EQU     $20
001CD8 0F5CD8 -> $0010                PTR4            EQU     $10
001CD8 0F5CD8 -> $0008                PTR3            EQU     $08
001CD8 0F5CD8 -> $0004                PTR2            EQU     $04
001CD8 0F5CD8 -> $0002                PTR1            EQU     $02
001CD8 0F5CD8 -> $0001                PTR0            EQU     $01
001CD8 0F5CD8 -> $0369                PTIR            EQU     $0369
001CD8 0F5CD8 -> $0080                PTIR7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIR6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIR5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIR4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIR3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIR2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIR1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIR0           EQU     $01
001CD8 0F5CD8 -> $036A                DDRR            EQU     $036A
001CD8 0F5CD8 -> $0080                DDRR7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRR6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRR5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRR4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRR3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRR2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRR1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRR0           EQU     $01
001CD8 0F5CD8 -> $036B                RDRR            EQU     $036B
001CD8 0F5CD8 -> $0080                RDRR7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRR6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRR5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRR4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRR3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRR2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRR1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRR0           EQU     $01
001CD8 0F5CD8 -> $036C                PERR            EQU     $036C
001CD8 0F5CD8 -> $0080                PERR7           EQU     $80
001CD8 0F5CD8 -> $0040                PERR6           EQU     $40
001CD8 0F5CD8 -> $0020                PERR5           EQU     $20
001CD8 0F5CD8 -> $0010                PERR4           EQU     $10
001CD8 0F5CD8 -> $0008                PERR3           EQU     $08
001CD8 0F5CD8 -> $0004                PERR2           EQU     $04
001CD8 0F5CD8 -> $0002                PERR1           EQU     $02
001CD8 0F5CD8 -> $0001                PERR0           EQU     $01
001CD8 0F5CD8 -> $036D                PPSR            EQU     $036D
001CD8 0F5CD8 -> $0080                PPSR7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSR6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSR5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSR4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSR3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSR2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSR1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSR0           EQU     $01
001CD8 0F5CD8 -> $036F                PTRRR           EQU     $036F
001CD8 0F5CD8 -> $0080                PTRRR7          EQU     $80
001CD8 0F5CD8 -> $0040                PTRRR6          EQU     $40
001CD8 0F5CD8 -> $0020                PTRRR5          EQU     $20
001CD8 0F5CD8 -> $0010                PTRRR4          EQU     $10
001CD8 0F5CD8 -> $0008                PTRRR3          EQU     $08
001CD8 0F5CD8 -> $0004                PTRRR2          EQU     $04
001CD8 0F5CD8 -> $0002                PTRRR1          EQU     $02
001CD8 0F5CD8 -> $0001                PTRRR0          EQU     $01
001CD8 0F5CD8 -> $0370                PTL             EQU     $0370
001CD8 0F5CD8 -> $0080                PTL7            EQU     $80
001CD8 0F5CD8 -> $0040                PTL6            EQU     $40
001CD8 0F5CD8 -> $0020                PTL5            EQU     $20
001CD8 0F5CD8 -> $0010                PTL4            EQU     $10
001CD8 0F5CD8 -> $0008                PTL3            EQU     $08
001CD8 0F5CD8 -> $0004                PTL2            EQU     $04
001CD8 0F5CD8 -> $0002                PTL1            EQU     $02
001CD8 0F5CD8 -> $0001                PTL0            EQU     $01
001CD8 0F5CD8 -> $0371                PTIL            EQU     $0371
001CD8 0F5CD8 -> $0080                PTIL7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIL6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIL5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIL4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIL3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIL2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIL1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIL0           EQU     $01
001CD8 0F5CD8 -> $0372                DDRL            EQU     $0372
001CD8 0F5CD8 -> $0080                DDRL7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRL6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRL5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRL4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRL3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRL2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRL1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRL0           EQU     $01
001CD8 0F5CD8 -> $0373                RDRL            EQU     $0373
001CD8 0F5CD8 -> $0080                RDRL7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRL6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRL5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRL4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRL3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRL2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRL1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRL0           EQU     $01
001CD8 0F5CD8 -> $0374                PERL            EQU     $0374
001CD8 0F5CD8 -> $0080                PERL7           EQU     $80
001CD8 0F5CD8 -> $0040                PERL6           EQU     $40
001CD8 0F5CD8 -> $0020                PERL5           EQU     $20
001CD8 0F5CD8 -> $0010                PERL4           EQU     $10
001CD8 0F5CD8 -> $0008                PERL3           EQU     $08
001CD8 0F5CD8 -> $0004                PERL2           EQU     $04
001CD8 0F5CD8 -> $0002                PERL1           EQU     $02
001CD8 0F5CD8 -> $0001                PERL0           EQU     $01
001CD8 0F5CD8 -> $0375                PPSL            EQU     $0375
001CD8 0F5CD8 -> $0080                PPSL7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSL6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSL5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSL4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSL3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSL2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSL1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSL0           EQU     $01
001CD8 0F5CD8 -> $0376                WOML            EQU     $0376
001CD8 0F5CD8 -> $0080                WOML7           EQU     $80
001CD8 0F5CD8 -> $0040                WOML6           EQU     $40
001CD8 0F5CD8 -> $0020                WOML5           EQU     $20
001CD8 0F5CD8 -> $0010                WOML4           EQU     $10
001CD8 0F5CD8 -> $0008                WOML3           EQU     $08
001CD8 0F5CD8 -> $0004                WOML2           EQU     $04
001CD8 0F5CD8 -> $0002                WOML1           EQU     $02
001CD8 0F5CD8 -> $0001                WOML0           EQU     $01
001CD8 0F5CD8 -> $0377                PTLRR           EQU     $0377
001CD8 0F5CD8 -> $0080                PTLRR7          EQU     $80
001CD8 0F5CD8 -> $0040                PTLRR6          EQU     $40
001CD8 0F5CD8 -> $0020                PTLRR5          EQU     $20
001CD8 0F5CD8 -> $0010                PTLRR4          EQU     $10
001CD8 0F5CD8 -> $0378                PTF             EQU     $0378
001CD8 0F5CD8 -> $0080                PTF7            EQU     $80
001CD8 0F5CD8 -> $0040                PTF6            EQU     $40
001CD8 0F5CD8 -> $0020                PTF5            EQU     $20
001CD8 0F5CD8 -> $0010                PTF4            EQU     $10
001CD8 0F5CD8 -> $0008                PTF3            EQU     $08
001CD8 0F5CD8 -> $0004                PTF2            EQU     $04
001CD8 0F5CD8 -> $0002                PTF1            EQU     $02
001CD8 0F5CD8 -> $0001                PTF0            EQU     $01
001CD8 0F5CD8 -> $0379                PTIF            EQU     $0379
001CD8 0F5CD8 -> $0080                PTIF7           EQU     $80
001CD8 0F5CD8 -> $0040                PTIF6           EQU     $40
001CD8 0F5CD8 -> $0020                PTIF5           EQU     $20
001CD8 0F5CD8 -> $0010                PTIF4           EQU     $10
001CD8 0F5CD8 -> $0008                PTIF3           EQU     $08
001CD8 0F5CD8 -> $0004                PTIF2           EQU     $04
001CD8 0F5CD8 -> $0002                PTIF1           EQU     $02
001CD8 0F5CD8 -> $0001                PTIF0           EQU     $01
001CD8 0F5CD8 -> $037A                DDRF            EQU     $037A
001CD8 0F5CD8 -> $0080                DDRF7           EQU     $80
001CD8 0F5CD8 -> $0040                DDRF6           EQU     $40
001CD8 0F5CD8 -> $0020                DDRF5           EQU     $20
001CD8 0F5CD8 -> $0010                DDRF4           EQU     $10
001CD8 0F5CD8 -> $0008                DDRF3           EQU     $08
001CD8 0F5CD8 -> $0004                DDRF2           EQU     $04
001CD8 0F5CD8 -> $0002                DDRF1           EQU     $02
001CD8 0F5CD8 -> $0001                DDRF0           EQU     $01
001CD8 0F5CD8 -> $037B                RDRF            EQU     $037B
001CD8 0F5CD8 -> $0080                RDRF7           EQU     $80
001CD8 0F5CD8 -> $0040                RDRF6           EQU     $40
001CD8 0F5CD8 -> $0020                RDRF5           EQU     $20
001CD8 0F5CD8 -> $0010                RDRF4           EQU     $10
001CD8 0F5CD8 -> $0008                RDRF3           EQU     $08
001CD8 0F5CD8 -> $0004                RDRF2           EQU     $04
001CD8 0F5CD8 -> $0002                RDRF1           EQU     $02
001CD8 0F5CD8 -> $0001                RDRF0           EQU     $01
001CD8 0F5CD8 -> $037C                PERF            EQU     $037C
001CD8 0F5CD8 -> $0080                PERF7           EQU     $80
001CD8 0F5CD8 -> $0040                PERF6           EQU     $40
001CD8 0F5CD8 -> $0020                PERF5           EQU     $20
001CD8 0F5CD8 -> $0010                PERF4           EQU     $10
001CD8 0F5CD8 -> $0008                PERF3           EQU     $08
001CD8 0F5CD8 -> $0004                PERF2           EQU     $04
001CD8 0F5CD8 -> $0002                PERF1           EQU     $02
001CD8 0F5CD8 -> $0001                PERF0           EQU     $01
001CD8 0F5CD8 -> $037D                PPSF            EQU     $037D
001CD8 0F5CD8 -> $0080                PPSF7           EQU     $80
001CD8 0F5CD8 -> $0040                PPSF6           EQU     $40
001CD8 0F5CD8 -> $0020                PPSF5           EQU     $20
001CD8 0F5CD8 -> $0010                PPSF4           EQU     $10
001CD8 0F5CD8 -> $0008                PPSF3           EQU     $08
001CD8 0F5CD8 -> $0004                PPSF2           EQU     $04
001CD8 0F5CD8 -> $0002                PPSF1           EQU     $02
001CD8 0F5CD8 -> $0001                PPSF0           EQU     $01
001CD8 0F5CD8 -> $037F                PTFRR           EQU     $037F
001CD8 0F5CD8 -> $0020                PTFRR5          EQU     $20
001CD8 0F5CD8 -> $0010                PTFRR4          EQU     $10
001CD8 0F5CD8 -> $0008                PTFRR3          EQU     $08
001CD8 0F5CD8 -> $0004                PTFRR2          EQU     $04
001CD8 0F5CD8 -> $0002                PTFRR1          EQU     $02
001CD8 0F5CD8 -> $0001                PTFRR0          EQU     $01
001CD8 0F5CD8 -> $0380                XGMCTL          EQU     $0380
001CD8 0F5CD8 -> $8000                XGEM            EQU     $8000
001CD8 0F5CD8 -> $4000                XGFRZM          EQU     $4000
001CD8 0F5CD8 -> $2000                XGDBGM          EQU     $2000
001CD8 0F5CD8 -> $1000                XGSSM           EQU     $1000
001CD8 0F5CD8 -> $0800                XGFACTM         EQU     $0800
001CD8 0F5CD8 -> $0200                XGSWEFM         EQU     $0200
001CD8 0F5CD8 -> $0100                XGIEM           EQU     $0100
001CD8 0F5CD8 -> $0080                XGE             EQU     $0080
001CD8 0F5CD8 -> $0040                XGFRZ           EQU     $0040
001CD8 0F5CD8 -> $0020                XGDBG           EQU     $0020
001CD8 0F5CD8 -> $0010                XGSS            EQU     $0010
001CD8 0F5CD8 -> $0008                XGFACT          EQU     $0008
001CD8 0F5CD8 -> $0002                XGSWEF          EQU     $0002
001CD8 0F5CD8 -> $0001                XGIE            EQU     $0001
001CD8 0F5CD8 -> $0382                XGCHID          EQU     $0382
001CD8 0F5CD8 -> $0383                XGCHPL          EQU     $0383
001CD8 0F5CD8 -> $0385                XGISPSEL        EQU     $0385
001CD8 0F5CD8 -> $0386                XGISP31         EQU     $0386
001CD8 0F5CD8 -> $0386                XGISP74         EQU     $0386
001CD8 0F5CD8 -> $0386                XGVBR           EQU     $0386
001CD8 0F5CD8 -> $0388                XGIF_7F_78      EQU     $0388
001CD8 0F5CD8 -> $0080                XGIF_7F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_7E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_7D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_7C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_7B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_7A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_79         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_78         EQU     $01
001CD8 0F5CD8 -> $0389                XGIF_77_70      EQU     $0389
001CD8 0F5CD8 -> $0080                XGIF_77         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_76         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_75         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_74         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_73         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_72         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_71         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_70         EQU     $01
001CD8 0F5CD8 -> $038A                XGIF_6F_68      EQU     $038A
001CD8 0F5CD8 -> $0080                XGIF_6F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_6E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_6D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_6C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_6B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_6A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_69         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_68         EQU     $01
001CD8 0F5CD8 -> $038B                XGIF_67_60      EQU     $038B
001CD8 0F5CD8 -> $0080                XGIF_67         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_66         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_65         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_64         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_63         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_62         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_61         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_60         EQU     $01
001CD8 0F5CD8 -> $038C                XGIF_5F_58      EQU     $038C
001CD8 0F5CD8 -> $0080                XGIF_5F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_5E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_5D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_5C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_5B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_5A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_59         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_58         EQU     $01
001CD8 0F5CD8 -> $038D                XGIF_57_50      EQU     $038D
001CD8 0F5CD8 -> $0080                XGIF_57         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_56         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_55         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_54         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_53         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_52         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_51         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_50         EQU     $01
001CD8 0F5CD8 -> $038E                XGIF_4F_48      EQU     $038E
001CD8 0F5CD8 -> $0080                XGIF_4F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_4E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_4D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_4C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_4B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_4A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_49         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_48         EQU     $01
001CD8 0F5CD8 -> $038F                XGIF_47_40      EQU     $038F
001CD8 0F5CD8 -> $0080                XGIF_47         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_46         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_45         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_44         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_43         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_42         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_41         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_40         EQU     $01
001CD8 0F5CD8 -> $0390                XGIF_3F_38      EQU     $0390
001CD8 0F5CD8 -> $0080                XGIF_3F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_3E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_3D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_3C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_3B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_3A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_39         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_38         EQU     $01
001CD8 0F5CD8 -> $0391                XGIF_37_30      EQU     $0391
001CD8 0F5CD8 -> $0080                XGIF_37         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_36         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_35         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_34         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_33         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_32         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_31         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_30         EQU     $01
001CD8 0F5CD8 -> $0392                XGIF_2F_28      EQU     $0392
001CD8 0F5CD8 -> $0080                XGIF_2F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_2E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_2D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_2C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_2B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_2A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_29         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_28         EQU     $01
001CD8 0F5CD8 -> $0393                XGIF_27_20      EQU     $0393
001CD8 0F5CD8 -> $0080                XGIF_27         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_26         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_25         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_24         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_23         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_22         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_21         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_20         EQU     $01
001CD8 0F5CD8 -> $0394                XGIF_1F_18      EQU     $0394
001CD8 0F5CD8 -> $0080                XGIF_1F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_1E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_1D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_1C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_1B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_1A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_19         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_18         EQU     $01
001CD8 0F5CD8 -> $0395                XGIF_17_10      EQU     $0395
001CD8 0F5CD8 -> $0080                XGIF_17         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_16         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_15         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_14         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_13         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_12         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_11         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_10         EQU     $01
001CD8 0F5CD8 -> $0396                XGIF_0F_08      EQU     $0396
001CD8 0F5CD8 -> $0080                XGIF_0F         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_0E         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_0D         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_0C         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_0B         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_0A         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_09         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_08         EQU     $01
001CD8 0F5CD8 -> $0397                XGIF_07_00      EQU     $0397
001CD8 0F5CD8 -> $0080                XGIF_07         EQU     $80
001CD8 0F5CD8 -> $0040                XGIF_06         EQU     $40
001CD8 0F5CD8 -> $0020                XGIF_05         EQU     $20
001CD8 0F5CD8 -> $0010                XGIF_04         EQU     $10
001CD8 0F5CD8 -> $0008                XGIF_03         EQU     $08
001CD8 0F5CD8 -> $0004                XGIF_02         EQU     $04
001CD8 0F5CD8 -> $0002                XGIF_01         EQU     $02
001CD8 0F5CD8 -> $0001                XGIF_00         EQU     $01
001CD8 0F5CD8 -> $0398                XGSWT           EQU     $0398
001CD8 0F5CD8 -> $039A                XGSEM           EQU     $039A
                                      ;$039C reserved
001CD8 0F5CD8 -> $039D                XGCCR           EQU     $039D
001CD8 0F5CD8 -> $0008                XGN             EQU     $08
001CD8 0F5CD8 -> $0004                XGZ             EQU     $04
001CD8 0F5CD8 -> $0002                XGV             EQU     $02
001CD8 0F5CD8 -> $0001                XGC             EQU     $01
001CD8 0F5CD8 -> $039E                XGPC            EQU     $039E
                                      ;$03A0 to $03A1 reserved
001CD8 0F5CD8 -> $03A2                XGR1            EQU     $03A2
001CD8 0F5CD8 -> $03A4                XGR2            EQU     $03A4
001CD8 0F5CD8 -> $03A6                XGR3            EQU     $03A6
001CD8 0F5CD8 -> $03A8                XGR4            EQU     $03A8
001CD8 0F5CD8 -> $03AA                XGR5            EQU     $03AA
001CD8 0F5CD8 -> $03AC                XGR6            EQU     $03AC
001CD8 0F5CD8 -> $03AE                XGR7            EQU     $03AE
                                      ;$03B0 to $03CF reserved
001CD8 0F5CD8 -> $03D0                TIM_TIOS        EQU     $03D0
                                      ;IOS7           EQU     $80
                                      ;IOS6           EQU     $40
                                      ;IOS5           EQU     $20
                                      ;IOS4           EQU     $10
                                      ;IOS3           EQU     $08
                                      ;IOS2           EQU     $04
                                      ;IOS1           EQU     $02
                                      ;IOS0           EQU     $01
001CD8 0F5CD8 -> $03D1                TIM_TCFORC      EQU     $03D1
                                      ;FOC7           EQU     $80
                                      ;FOC6           EQU     $40
                                      ;FOC5           EQU     $20
                                      ;FOC4           EQU     $10
                                      ;FOC3           EQU     $08
                                      ;FOC2           EQU     $04
                                      ;FOC1           EQU     $02
                                      ;FOC0           EQU     $01
001CD8 0F5CD8 -> $03D2                TIM_TOC7M       EQU     $03D2
                                      ;OC7M7          EQU     $80
                                      ;OC7M6          EQU     $40
                                      ;OC7M5          EQU     $20
                                      ;OC7M4          EQU     $10
                                      ;OC7M3          EQU     $08
                                      ;OC7M2          EQU     $04
                                      ;OC7M1          EQU     $02
                                      ;OC7M0          EQU     $01
001CD8 0F5CD8 -> $03D3                TIM_TOC7D       EQU     $03D3
                                      ;OC7D7          EQU     $80
                                      ;OC7D6          EQU     $40
                                      ;OC7D5          EQU     $20
                                      ;OC7D4          EQU     $10
                                      ;OC7D3          EQU     $08
                                      ;OC7D2          EQU     $04
                                      ;OC7D1          EQU     $02
                                      ;OC7D0          EQU     $01
001CD8 0F5CD8 -> $03D4                TIM_TCNT        EQU     $03D4
001CD8 0F5CD8 -> $03D6                TIM_TSCR1       EQU     $03D6
                                      ;TEN            EQU     $80
                                      ;TSWAI          EQU     $40
                                      ;TSFRZ          EQU     $20
                                      ;TFFCA          EQU     $10
001CD8 0F5CD8 -> $03D7                TIM_TTOV        EQU     $03D7
                                      ;TOV7           EQU     $80
                                      ;TOV6           EQU     $40
                                      ;TOV5           EQU     $20
                                      ;TOV4           EQU     $10
                                      ;TOV3           EQU     $08
                                      ;TOV2           EQU     $04
                                      ;TOV1           EQU     $02
                                      ;TOV0           EQU     $01
001CD8 0F5CD8 -> $03D8                TIM_TCTL1       EQU     $03D8
                                      ;OM7            EQU     $80
                                      ;OL7            EQU     $40
                                      ;OM6            EQU     $20
                                      ;OL6            EQU     $10
                                      ;OM5            EQU     $08
                                      ;OL5            EQU     $04
                                      ;OM4            EQU     $02
                                      ;OL4            EQU     $01
001CD8 0F5CD8 -> $03D9                TIM_TCTL2       EQU     $03D9
                                      ;OM3            EQU     $80
                                      ;OL3            EQU     $40
                                      ;OM2            EQU     $20
                                      ;OL2            EQU     $10
                                      ;OM1            EQU     $08
                                      ;OL1            EQU     $04
                                      ;OM0            EQU     $02
                                      ;OL0            EQU     $01
001CD8 0F5CD8 -> $03DA                TIM_TCTL3       EQU     $03DA
                                      ;EDG7B          EQU     $80
                                      ;EDG7A          EQU     $40
                                      ;EDG6B          EQU     $20
                                      ;EDG6A          EQU     $10
                                      ;EDG5B          EQU     $08
                                      ;EDG5A          EQU     $04
                                      ;EDG4B          EQU     $02
                                      ;EDG4A          EQU     $01
001CD8 0F5CD8 -> $03DB                TIM_TCTL4       EQU     $03DB
                                      ;EDG3B          EQU     $80
                                      ;EDG3A          EQU     $40
                                      ;EDG2B          EQU     $20
                                      ;EDG2A          EQU     $10
                                      ;EDG1B          EQU     $08
                                      ;EDG1A          EQU     $04
                                      ;EDG0B          EQU     $02
                                      ;EDG0A          EQU     $01
001CD8 0F5CD8 -> $03DC                TIM_TIE         EQU     $03DC
                                      ;C7I            EQU     $80
                                      ;C6I            EQU     $40
                                      ;C5I            EQU     $20
                                      ;C4I            EQU     $10
                                      ;C3I            EQU     $08
                                      ;C2I            EQU     $04
                                      ;C1I            EQU     $02
                                      ;C0I            EQU     $01
001CD8 0F5CD8 -> $03DD                TIM_TSCR2       EQU     $03DD
                                      ;TOI            EQU     $80
                                      ;TCRE           EQU     $08
                                      ;PR2            EQU     $04
                                      ;PR1            EQU     $02
                                      ;PR0            EQU     $01
001CD8 0F5CD8 -> $03DE                TIM_TFLG1       EQU     $03DE
                                      ;C7F            EQU     $80
                                      ;C6F            EQU     $40
                                      ;C5F            EQU     $20
                                      ;C4F            EQU     $10
                                      ;C3F            EQU     $08
                                      ;C2F            EQU     $04
                                      ;C1F            EQU     $02
                                      ;C0F            EQU     $01
001CD8 0F5CD8 -> $03DF                TIM_TFLG2       EQU     $03DF
                                      ;TOF            EQU     $80
001CD8 0F5CD8 -> $03E0                TIM_TC0         EQU     $03E0
001CD8 0F5CD8 -> $0052                TIM_TC1         EQU     $0052
001CD8 0F5CD8 -> $0054                TIM_TC2         EQU     $0054
001CD8 0F5CD8 -> $0056                TIM_TC3         EQU     $0056
001CD8 0F5CD8 -> $0058                TIM_TC4         EQU     $0058
001CD8 0F5CD8 -> $005A                TIM_TC5         EQU     $005A
001CD8 0F5CD8 -> $005C                TIM_TC6         EQU     $005C
001CD8 0F5CD8 -> $005E                TIM_TC7         EQU     $005E
001CD8 0F5CD8 -> $03F0                TIM_PACTL       EQU     $03F0
                                      ;PAEN           EQU     $40
                                      ;PAMOD          EQU     $20
                                      ;PEDGE          EQU     $10
                                      ;CLK1           EQU     $08
                                      ;CLK0           EQU     $04
                                      ;PAOVI          EQU     $02
                                      ;PAI            EQU     $01
001CD8 0F5CD8 -> $03F1                TIM_PAFLG       EQU     $03F1
                                      ;PAOVF          EQU     $02
                                      ;PAIF           EQU     $01
001CD8 0F5CD8 -> $03F2                TIM_PACNT       EQU     $03F2
001CD8 0F5CD8 -> $03F2                TIM_PACN1       EQU     $03F2
001CD8 0F5CD8 -> $03F2                TIM_PACNH       EQU     $03F2
001CD8 0F5CD8 -> $03F3                TIM_PACN0       EQU     $03F3
001CD8 0F5CD8 -> $03F3                TIM_PACNL       EQU     $03F3
                                      ;$03F4 to $03FB reserved
001CD8 0F5CD8 -> $03FC                TIM_OCPD        EQU     $03FC
                                      ;OCPD0          EQU     $01
                                      ;OCPD1          EQU     $02
                                      ;OCPD2          EQU     $04
                                      ;OCPD3          EQU     $08
                                      ;OCPD4          EQU     $10
                                      ;OCPD5          EQU     $20
                                      ;OCPD6          EQU     $40
                                      ;OCPD7          EQU     $80
                                      ;$03FD reserved
001CD8 0F5CD8 -> $03FE                TIM_PTPSR       EQU     $03FE
                                      ;PTPS0          EQU     $01
                                      ;PTPS1          EQU     $02
                                      ;PTPS2          EQU     $04
                                      ;PTPS3          EQU     $08
                                      ;PTPS4          EQU     $10
                                      ;PTPS5          EQU     $20
                                      ;PTPS6          EQU     $40
                                      ;PTPS7          EQU     $80
                                      ;$03FF to $07FF reserved
                                      ;NVM locations
001CD8 0F5CD8 -> $FF00                BAKEY0          EQU     $FF00
001CD8 0F5CD8 -> $FF02                BAKEY1          EQU     $FF02
001CD8 0F5CD8 -> $FF04                BAKEY2          EQU     $FF04
001CD8 0F5CD8 -> $FF06                BAKEY3          EQU     $FF06
001CD8 0F5CD8 -> $FF0C                NVFPROT         EQU     $FF0C
001CD8 0F5CD8 -> $0080                FPOPEN          EQU     $80
001CD8 0F5CD8 -> $0040                RNV6            EQU     $40
001CD8 0F5CD8 -> $0020                FPHDIS          EQU     $20
001CD8 0F5CD8 -> $0010                FPHS1           EQU     $10
001CD8 0F5CD8 -> $0008                FPHS0           EQU     $08
001CD8 0F5CD8 -> $0004                FPLDIS          EQU     $04
001CD8 0F5CD8 -> $0002                FPLS1           EQU     $02
001CD8 0F5CD8 -> $0001                FPLS0           EQU     $01
001CD8 0F5CD8 -> $FF0D                NVEPROT         EQU     $FF0D
001CD8 0F5CD8 -> $0080                EPOPEN          EQU     $80
001CD8 0F5CD8 -> $0040                RNV6            EQU     $40
001CD8 0F5CD8 -> $0020                RNV5            EQU     $20
001CD8 0F5CD8 -> $0010                RNV4            EQU     $10
001CD8 0F5CD8 -> $0008                EPDIS           EQU     $08
001CD8 0F5CD8 -> $0004                EPS2            EQU     $04
001CD8 0F5CD8 -> $0002                EPS1            EQU     $02
001CD8 0F5CD8 -> $0001                EPS0            EQU     $01
001CD8 0F5CD8 -> $FF0E                NVFOPT          EQU     $FF0E
001CD8 0F5CD8 -> $0080                NV7             EQU     $80
001CD8 0F5CD8 -> $0040                NV6             EQU     $40
001CD8 0F5CD8 -> $0020                NV5             EQU     $20
001CD8 0F5CD8 -> $0010                NV4             EQU     $10
001CD8 0F5CD8 -> $0008                NV3             EQU     $08
001CD8 0F5CD8 -> $0004                NV2             EQU     $04
001CD8 0F5CD8 -> $0002                NV1             EQU     $02
001CD8 0F5CD8 -> $0001                NV0             EQU     $01
001CD8 0F5CD8 -> $FF0F                NVFSEC          EQU     $FF0F
001CD8 0F5CD8 -> $0080                KEYEN1          EQU     $80
001CD8 0F5CD8 -> $0040                KEYEN0          EQU     $40
001CD8 0F5CD8 -> $0020                RNV5            EQU     $20
001CD8 0F5CD8 -> $0010                RNV4            EQU     $10
001CD8 0F5CD8 -> $0008                RNV3            EQU     $08
001CD8 0F5CD8 -> $0004                RNV2            EQU     $04
001CD8 0F5CD8 -> $0002                SEC1            EQU     $02
001CD8 0F5CD8 -> $0001                SEC0            EQU     $01
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (BEPM)                                       #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports                            #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD00 - ATD0  0 (K5)               (analog       no pull  )             #
                                      ;#     PAD01 - ATD0  1 (K4)               (analog       no pull  )             #
                                      ;#     PAD02 - ATD0  2 (K3)               (analog       no pull  )             #
                                      ;#     PAD03 - ATD0  3 (K2)               (analog       no pull  )             #
                                      ;#     PAD04 - ATD0  4 (K1)               (analog       no pull  )             #
                                      ;#     PAD05 - ATD0  5 (RV10)             (analog       no pull  )             #
                                      ;#     PAD06 - ATD0  6 (RV9)              (analog       no pull  )             #
                                      ;#     PAD07 - ATD0  7 (K6)               (analog       no pull  )             #
                                      ;#     PAD08 - ATD0  8 (RV8)              (analog       no pull  )             #
                                      ;#     PAD09 - ATD0  9 (RV7)              (analog       no pull  )             #
                                      ;#     PAD10 - ATD0 10 (RV6)              (analog       no pull  )             #
                                      ;#     PAD11 - ATD0 11 (RV5)              (analog       no pull  )             #
                                      ;#     PAD12 - ATD0 12 (RV4)              (analog       no pull  )             #
                                      ;#     PAD13 - ATD0 13 (RV3)              (analog       no pull  )             #
                                      ;#     PAD14 - ATD0 14 (P3)               (analog       no pull  )             #
                                      ;#     PAD15 - ATD0 15 (P2)               (analog       no pull  )             #
                                      ;#     PAD16 - NC                         (input        pull-up  )             #
                                      ;#     PAD17 - NC                         (input        pull-up  )             #
                                      ;#     PAD18 - NC                         (input        pull-up  )             #
                                      ;#     PAD19 - NC                         (input        pull-up  )             #
                                      ;#     PAD20 - NC                         (input        pull-up  )             #
                                      ;#     PAD21 - NC                         (input        pull-up  )             #
                                      ;#     PAD22 - NC                         (input        pull-up  )             #
                                      ;#     PAD23 - NC                         (input        pull-up  )             #
                                      ;#     PAD24 - NC                         (input        pull-up  )             #
                                      ;#     PAD25 - NC                         (input        pull-up  )             #
                                      ;#     PAD26 - NC                         (input        pull-up  )             #
                                      ;#     PAD27 - NC                         (input        pull-up  )             #
                                      ;#     PAD28 - NC                         (input        pull-up  )             #
                                      ;#     PAD29 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - SW7                          (input        pull-up  )             #
                                      ;#     PA1 - SW3                          (input        pull-up  )             #
                                      ;#     PA2 - SW6                          (input        pull-up  )             #
                                      ;#     PA3 - SW2                          (input        pull-up  )             #
                                      ;#     PA4 - SW5                          (input        pull-up  )             #
                                      ;#     PA5 - SW1                          (input        pull-up  )             #
                                      ;#     PA6 - SW2 (run/load)               (input        pull-up  )             #
                                      ;#     PA7 - SW4                          (input        pull-up  )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - LED red (D9)                 (output       low      )             #
                                      ;#     PB1 - LED red (D23)                (output       low      )             #
                                      ;#     PB2 - LED red (D4)                 (output       low      )             #
                                      ;#     PB3 - LED red (D20)                (output       low      )             #
                                      ;#     PB4 - LED red (D10)                (output       low      )             #
                                      ;#     PB5 - LED red (D1)                 (output       low      )             #
                                      ;#     PB6 - LED red (D10)                (output       low      )             #
                                      ;#     PB7 - LED red (D2)                 (output       low      )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - XIRQ (gear tooth sensor)     (input        pull-up  )             #
                                      ;#     PE1 - IRQ  (gear tooth sensor)     (input        pull-up  )             #
                                      ;#     PE2 - SD card detect               (input        pull_up  )             #
                                      ;#     PE3 - SW5                          (input        pull-up  )             #
                                      ;#     PE4 - SW2                          (input        pull-up  )             #
                                      ;#     PE5 - SW4 (MODA)                   (input        pull-up  )             #
                                      ;#     PE6 - SW1 (MODB)                   (input        pull-up  )             #
                                      ;#     PE7 - SW6                          (input        pull-up  )             #
                                      ;#    Port F:                                                                  #
                                      ;#     PF0 - NC                           (input        pull-up  )             #
                                      ;#     PF1 - NC                           (input        pull-up  )             #
                                      ;#     PF2 - NC                           (input        pull-up  )             #
                                      ;#     PF3 - NC                           (input        pull-up  )             #
                                      ;#     PF4 - NC                           (input        pull-up  )             #
                                      ;#     PF5 - NC                           (input        pull-up  )             #
                                      ;#     PF6 - NC                           (input        pull-up  )             #
                                      ;#     PF7 - NC                           (input        pull-up  )             #
                                      ;#    Port H:                                                                  #
                                      ;#     PH0 - SD data out     (MISO1)      (input        pull-down)             #
                                      ;#     PH1 - SD CMD          (MOSI1)      (output       low      )             #
                                      ;#     PH2 - SD CLK          (SCK1)       (output       low      )             #
                                      ;#     PH3 - SD CD           (SS1)        (output       low      )             #
                                      ;#     PH4 - Real time clock (MISO2)      (input        pull-down)             #
                                      ;#     PH5 - Real time clock (MOSI2)      (output       low      )             #
                                      ;#     PH6 - Real time clock (SCK2)       (output       low      )             #
                                      ;#     PH7 - Real time clock (SS2)        (output       low      )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - SCI2 RXD                     (input        pull-up  )             #
                                      ;#     PJ1 - SCI2 TXD                     (output       high     )             #
                                      ;#     PJ2 - NC                           (input        pull-up  )             #
                                      ;#     PJ3 - NC                           (input        pull-up  )             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - SW4                          (input        pull-up  )             #
                                      ;#     PJ7 - SW2                          (input        pull-up  )             #
                                      ;#    Port K:                                                                  #
                                      ;#     PK0 - LED red (D22)                (output       low      )             #
                                      ;#     PK1 - LED red (D6)                 (output       low      )             #
                                      ;#     PK2 - LED red (D25)                (output       low      )             #
                                      ;#     PK3 - LED red (D2)                 (output       low      )             #
                                      ;#     PK4 - LED red (D19)                (output       low      )             #
                                      ;#     PK5 - LED red (D3)                 (output       low      )             #
                                      ;#     PK6 - NC                           (input        pull-up  )             #
                                      ;#     PK7 - LED red (D2)                 (output       low      )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - RXCAN0                       (input        pull-up  )             #
                                      ;#     PM1 - TXCAN0                       (output       high     )             #
                                      ;#     PM2 - RXCAN1                       (input        pull-up  )             #
                                      ;#     PM3 - TXCAN1                       (output       high     )             #
                                      ;#     PM4 - SW3                          (input        pull-up  )             #
                                      ;#     PM5 - SW1                          (input        pull-up  )             #
                                      ;#     PM6 - SCI3 RXD                     (input        pull-up  )             #
                                      ;#     PM7 - SCI3 TXD                     (output       high     )             #
                                      ;#    Port L:                                                                  #
                                      ;#     PL0 - NC                           (input        pull-up  )             #
                                      ;#     PL1 - NC                           (input        pull-up  )             #
                                      ;#     PL2 - NC                           (input        pull-up  )             #
                                      ;#     PL3 - NC                           (input        pull-up  )             #
                                      ;#     PL4 - NC                           (input        pull-up  )             #
                                      ;#     PL5 - NC                           (input        pull-up  )             #
                                      ;#     PL6 - NC                           (input        pull-up  )             #
                                      ;#     PL7 - NC                           (input        pull-up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - TIM1 OC4 (P8)                (output       low      )             #
                                      ;#     PP1 - TIM1 OC5 (P4)                (output       low      )             #
                                      ;#     PP2 - TIM1 OC6 (P7)                (output       low      )             #
                                      ;#     PP3 - TIM1 OC7 (P3)                (output       low      )             #
                                      ;#     PP4 - TIM1 OC4 (P3)                (output       low      )             #
                                      ;#     PP5 - TIM1 OC5 (P6)                (output       low      )             #
                                      ;#     PP6 - TIM1 OC6 (P2)                (output       low      )             #
                                      ;#     PP7 - TIM1 OC7 (P7)                (output       low      )             #
                                      ;#    Port R:                                                                  #
                                      ;#     PR0 - NC                           (input        pull-up  )             #
                                      ;#     PR1 - NC                           (input        pull-up  )             #
                                      ;#     PR2 - NC                           (input        pull-up  )             #
                                      ;#     PR3 - NC                           (input        pull-up  )             #
                                      ;#     PR4 - NC                           (input        pull-up  )             #
                                      ;#     PR5 - NC                           (input        pull-up  )             #
                                      ;#     PR6 - NC                           (input        pull-up  )             #
                                      ;#     PR7 - NC                           (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI0 RXD                     (input        pull-up  )             #
                                      ;#     PS1 - SCI0 TXD                     (output       high     )             #
                                      ;#     PS2 - SCI1 RXD                     (input        pull-up  )             #
                                      ;#     PS3 - SCI1 TXD                     (output       high     )             #
                                      ;#     PS4 - MISO0 (P8)                   (input        pull-down)             #
                                      ;#     PS5 - MOSI0 (P8)                   (output       low      )             #
                                      ;#     PS6 - SCK0  (P8)                   (output       low      )             #
                                      ;#     PS7 - SS0   (P8)                   (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - LED red (D7)                 (output       low      )             #
                                      ;#     PT1 - TIM0 IC1                     (input        pull-down)             #
                                      ;#     PT2 - LED red (D8)                 (output       low      )             #
                                      ;#     PT3 - TIM0 IC3                     (input        pull-down)             #
                                      ;#     PT4 - TIM0 IC4                     (input        pull-down)             #
                                      ;#     PT5 - TIM0 IC5                     (input        pull-down)             #
                                      ;#     PT6 - TIM0 IC6                     (input        pull-down)             #
                                      ;#     PT7 - TIM0 IC7                     (input        pull-down)             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AE5 0F5AE5                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001AE5 0F5AE5 -> $1AE5                GPIO_VARS_END           EQU     *
001AE5 0F5AE5 -> $F5AE5               GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00145F 0F545F                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
00145F 0F545F -> $145F                GPIO_CODE_END           EQU     *
00145F 0F545F -> $F545F               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BB5 0F5BB5                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
001BB5 0F5BB5 -> $1BB5                GPIO_TABS_END           EQU     *
001BB5 0F5BB5 -> $F5BB5               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (BEPM)                                         #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module performs all the necessary steps to initialize the device    #
                                      ;#    after each reset.                                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $0800
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;       Flash->+ +-------------+ $4000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $FF10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $7F10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $8000
                                      ;                |/////////////|
                                      ;                +-------------+
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;RAM or flash
                                      ;S12XEP100 or S12XEQ512
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Locations
                                      ;Register space
001BB5 0F5BB5 -> $0000                MMAP_REG_GLOBAL_START   EQU     $00_0000
001BB5 0F5BB5 -> $0800                MMAP_REG_GLOBAL_END     EQU     $0_0800
001BB5 0F5BB5 -> $0000                MMAP_REG_START          EQU     $0000
001BB5 0F5BB5 -> $0000                MMAP_REG_START_LIN      EQU     MMAP_REG_GLOBAL_START
001BB5 0F5BB5 -> $0800                MMAP_REG_END            EQU     $0800
001BB5 0F5BB5 -> $0000                MMAP_REG_END_LIN        EQU     MMAP_REG_GLOBAL_START
                                      ;EEE RAM
001BB5 0F5BB5 -> $13F000              MMAP_EERAM_GLOBAL_START EQU     $13_F000
001BB5 0F5BB5 -> $140000              MMAP_EERAM_GLOBAL_END   EQU     $14_0000
001BB5 0F5BB5 -> $0800                MMAP_EERAM_START        EQU     $0800
001BB5 0F5BB5 -> $13F800              MMAP_EERAM_START_LIN    EQU     $13_F800
001BB5 0F5BB5 -> $0C00                MMAP_EERAM_WIN_START    EQU     $0C00
001BB5 0F5BB5 -> $1000                MMAP_EERAM_END          EQU     $1000
001BB5 0F5BB5 -> $140000              MMAP_EERAM_END_LIN      EQU     MMAP_EERAM_GLOBAL_END
                                      ;RAM
001BB5 0F5BB5 -> $F8000               MMAP_RAM_GLOBAL_START   EQU     $0F_8000        ;32K
001BB5 0F5BB5 -> $100000              MMAP_RAM_GLOBAL_END     EQU     $10_0000
001BB5 0F5BB5 -> $1000                MMAP_RAM_START          EQU     $1000
001BB5 0F5BB5 -> $F9000               MMAP_RAM_START_LIN      EQU     $0F_9000
001BB5 0F5BB5 -> $2000                MMAP_RAM_WIN_START      EQU     $2000
001BB5 0F5BB5 -> $8000                MMAP_RAM_END            EQU     $8000
001BB5 0F5BB5 -> $100000              MMAP_RAM_END_LIN        EQU     MMAP_RAM_GLOBAL_END
                                      ;Flash
001BB5 0F5BB5 -> $788000              MMAP_FLASH_GLOBAL_START EQU     $78_8000        ;512K
001BB5 0F5BB5 -> $800000              MMAP_FLASH_GLOBAL_END   EQU     $80_0000
001BB5 0F5BB5 -> $4000                MMAP_FLASH_FD_START     EQU     $4000
001BB5 0F5BB5 -> $7F4000              MMAP_FLASH_FD_START_LIN EQU     $7F_4000
001BB5 0F5BB5 -> $8000                MMAP_FLASH_WIN_START    EQU     $8000
001BB5 0F5BB5 -> $C000                MMAP_FLASH_FE_START     EQU     $C000
001BB5 0F5BB5 -> $7FC000              MMAP_FLASH_FE_START_LIN EQU     $7F_C000
001BB5 0F5BB5 -> $10000               MMAP_FLASH_END          EQU     $10000
001BB5 0F5BB5 -> $800000              MMAP_FLASH_END_LIN      EQU     MMAP_FLASH_GLOBAL_END
                                      ;#Memory sizes
001BB5 0F5BB5 -> $0800                MMAP_REG_SIZE           EQU     MMAP_REG_END-MMAP_REG_START
001BB5 0F5BB5 -> $1000                MMAP_EERAM_SIZE         EQU     MMAP_EERAM_GLOBAL_END-MMAP_EERAM_GLOBAL_START
001BB5 0F5BB5 -> $8000                MMAP_RAM_SIZE           EQU     MMAP_RAM_GLOBAL_END-MMAP_RAM_GLOBAL_START
001BB5 0F5BB5 -> $78000               MMAP_FLASH_SIZE         EQU     MMAP_FLASH_GLOBAL_END-MMAP_FLASH_GLOBAL_START
                                      ;#MPU desccriptors
001BB5 0F5BB5 -> $0000                MMAP_D_REG_LOADDR       EQU     MMAP_REG_GLOBAL_START   ;register space
001BB5 0F5BB5 -> $07FF                MMAP_D_REG_HIADDR       EQU     MMAP_REG_GLOBAL_END-1
001BB5 0F5BB5 -> $0040                MMAP_D_REG_PROTECT      EQU     NEX                     ;read and write
001BB5 0F5BB5 -> $00C0                MMAP_D_REG_BYTE0        EQU            (MSTR0|MSTR1|(MMAP_D_REG_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_REG_BYTE1        EQU                        ((MMAP_D_REG_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_REG_BYTE2        EQU                        ((MMAP_D_REG_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $0040                MMAP_D_REG_BYTE3        EQU     (MMAP_D_REG_PROTECT|(MMAP_D_REG_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_REG_BYTE4        EQU                        ((MMAP_D_REG_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_REG_BYTE5        EQU                        ((MMAP_D_REG_HIADDR>>03))&$FF
001BB5 0F5BB5 -> $0800                MMAP_D_URAM_LOADDR      EQU     MMAP_REG_GLOBAL_END     ;unimplemented RAM space
001BB5 0F5BB5 -> $F7FFF               MMAP_D_URAM_HIADDR      EQU     MMAP_RAM_GLOBAL_START-1
001BB5 0F5BB5 -> $00C0                MMAP_D_URAM_PROTECT     EQU     WP|NEX                  ;read omly
001BB5 0F5BB5 -> $00C0                MMAP_D_URAM_BYTE0       EQU             (MSTR0|MSTR1|(MMAP_D_URAM_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $0001                MMAP_D_URAM_BYTE1       EQU                         ((MMAP_D_URAM_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_URAM_BYTE2       EQU                         ((MMAP_D_URAM_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $00C1                MMAP_D_URAM_BYTE3       EQU     (MMAP_D_URAM_PROTECT|(MMAP_D_URAM_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $00EF                MMAP_D_URAM_BYTE4       EQU                         ((MMAP_D_URAM_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_URAM_BYTE5       EQU                         ((MMAP_D_URAM_HIADDR>>03))&$FF
001BB5 0F5BB5 -> $F8000               MMAP_D_RAM_LOADDR       EQU     MMAP_RAM_GLOBAL_START   ;RAM
001BB5 0F5BB5 -> $FFFFF               MMAP_D_RAM_HIADDR       EQU     MMAP_RAM_GLOBAL_END-1
001BB5 0F5BB5 -> $0000                MMAP_D_RAM_PROTECT      EQU     0                       ;read, write, and execute
001BB5 0F5BB5 -> $00C1                MMAP_D_RAM_BYTE0        EQU             (MSTR0|MSTR1|(MMAP_D_RAM_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $00F0                MMAP_D_RAM_BYTE1        EQU                         ((MMAP_D_RAM_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_RAM_BYTE2        EQU                         ((MMAP_D_RAM_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $0001                MMAP_D_RAM_BYTE3        EQU      (MMAP_D_RAM_PROTECT|(MMAP_D_RAM_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_RAM_BYTE4        EQU                         ((MMAP_D_RAM_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_RAM_BYTE5        EQU                         ((MMAP_D_RAM_HIADDR>>03))&$FF
001BB5 0F5BB5 -> $100000              MMAP_D_UEERAM_LOADDR    EQU     MMAP_RAM_GLOBAL_END     ;unimplemented EERAM space
001BB5 0F5BB5 -> $13EFFF              MMAP_D_UEERAM_HIADDR    EQU     MMAP_EERAM_GLOBAL_START-1
001BB5 0F5BB5 -> $00C0                MMAP_D_UEERAM_PROTECT   EQU     WP|NEX                  ;read only
001BB5 0F5BB5 -> $00C2                MMAP_D_UEERAM_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UEERAM_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_UEERAM_BYTE1     EQU                         ((MMAP_D_UEERAM_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_UEERAM_BYTE2     EQU                         ((MMAP_D_UEERAM_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $00C2                MMAP_D_UEERAM_BYTE3     EQU   (MMAP_D_UEERAM_PROTECT|(MMAP_D_UEERAM_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $007D                MMAP_D_UEERAM_BYTE4     EQU                         ((MMAP_D_UEERAM_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_UEERAM_BYTE5     EQU                         ((MMAP_D_UEERAM_HIADDR>>03))&$FF
001BB5 0F5BB5 -> $13F000              MMAP_D_EERAM_LOADDR     EQU     MMAP_EERAM_GLOBAL_START ;EERAM
001BB5 0F5BB5 -> $13FFFF              MMAP_D_EERAM_HIADDR     EQU     MMAP_EERAM_GLOBAL_END-1
001BB5 0F5BB5 -> $0000                MMAP_D_EERAM_PROTECT    EQU     0                       ;read, write and execute
001BB5 0F5BB5 -> $00C2                MMAP_D_EERAM_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_EERAM_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $007E                MMAP_D_EERAM_BYTE1      EQU                         ((MMAP_D_EERAM_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_EERAM_BYTE2      EQU                         ((MMAP_D_EERAM_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $0002                MMAP_D_EERAM_BYTE3      EQU    (MMAP_D_EERAM_PROTECT|(MMAP_D_EERAM_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $007F                MMAP_D_EERAM_BYTE4      EQU                         ((MMAP_D_EERAM_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_EERAM_BYTE5      EQU                         ((MMAP_D_EERAM_HIADDR>>03))&$FF
001BB5 0F5BB5 -> $140000              MMAP_D_UFLASH_LOADDR    EQU     MMAP_EERAM_GLOBAL_END   ;unimplemented flash space
001BB5 0F5BB5 -> $787FFF              MMAP_D_UFLASH_HIADDR    EQU     MMAP_FLASH_GLOBAL_START-1
001BB5 0F5BB5 -> $00C0                MMAP_D_UFLASH_PROTECT   EQU     WP|NEX                  ;read only
001BB5 0F5BB5 -> $00C2                MMAP_D_UFLASH_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UFLASH_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $0080                MMAP_D_UFLASH_BYTE1     EQU                         ((MMAP_D_UFLASH_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_UFLASH_BYTE2     EQU                         ((MMAP_D_UFLASH_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $00CF                MMAP_D_UFLASH_BYTE3     EQU   (MMAP_D_UFLASH_PROTECT|(MMAP_D_UFLASH_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $000F                MMAP_D_UFLASH_BYTE4     EQU                         ((MMAP_D_UFLASH_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_UFLASH_BYTE5     EQU                         ((MMAP_D_UFLASH_HIADDR>>03))&$FF
001BB5 0F5BB5 -> $788000              MMAP_D_FLASH_LOADDR     EQU     MMAP_FLASH_GLOBAL_START ;Flash
001BB5 0F5BB5 -> $7FFFFF              MMAP_D_FLASH_HIADDR     EQU     MMAP_FLASH_GLOBAL_END-1
001BB5 0F5BB5 -> $0080                MMAP_D_FLASH_PROTECT    EQU     WP                      ;read and execute
001BB5 0F5BB5 -> $00CF                MMAP_D_FLASH_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_FLASH_LOADDR>>19))&$FF
001BB5 0F5BB5 -> $0010                MMAP_D_FLASH_BYTE1      EQU                         ((MMAP_D_FLASH_LOADDR>>11))&$FF
001BB5 0F5BB5 -> $0000                MMAP_D_FLASH_BYTE2      EQU                         ((MMAP_D_FLASH_LOADDR>>03))&$FF
001BB5 0F5BB5 -> $008F                MMAP_D_FLASH_BYTE3      EQU    (MMAP_D_FLASH_PROTECT|(MMAP_D_FLASH_HIADDR>>19))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_FLASH_BYTE4      EQU                         ((MMAP_D_FLASH_HIADDR>>11))&$FF
001BB5 0F5BB5 -> $00FF                MMAP_D_FLASH_BYTE5      EQU                         ((MMAP_D_FLASH_HIADDR>>03))&$FF
                                      ;# Vector table
001BB5 0F5BB5 -> $7F10                VECTAB_START            EQU     $7F10
001BB5 0F5BB5 -> $FFF10               VECTAB_START_LIN        EQU     $0FFF10
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AE5 0F5AE5                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001AE5 0F5AE5 -> $1AE5                MMAP_VARS_END           EQU     *
001AE5 0F5AE5 -> $F5AE5               MMAP_VARS_END_LIN       EQU     @
                                      ;#endif
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00145F 0F545F                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
                                      ;#Trigger a fatal error if a reset accurs
00145F 0F545F -> $145F                MMAP_ISR_MPU            EQU     *
00145F 0F545F MACRO                                           RESET_FATAL     MMAP_STR_MPU
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00145F 0F545F CE 1B B5                                        LDX     #\1                                              (RESET_FATAL)
001462 0F5462 06 19 DA                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
001465 0F5465 -> $1465                MMAP_CODE_END           EQU     *
001465 0F5465 -> $F5465               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BB5 0F5BB5                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
001BB5 0F5BB5 4D 50 55 20 65 72 72 6F MMAP_STR_MPU            FCS     "MPU error"
              F2                      
001BBE 0F5BBE -> $1BBE                MMAP_TABS_END           EQU     *
001BBE 0F5BBE -> $F5BBE               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
001BBE 0F5BBE -> $001B                SSTACK_DEPTH            EQU     27
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001BBE 0F5BBE -> $1AEE                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
001BBE 0F5BBE -> $1B09                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AE5 0F5AE5                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001AE5 0F5AE5 -> $1AE5                SSTACK_VARS_END         EQU     *
001AE5 0F5AE5 -> $F5AE5               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001465 0F5465                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
001465 0F5465 -> $1465                SSTACK_OF               EQU     *
001465 0F5465 MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001465 0F5465 CE 1B BE                                        LDX     #\1                                              (RESET_FATAL)
001468 0F5468 06 19 DA                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
00146B 0F546B -> $146B                SSTACK_UF               EQU     *
00146B 0F546B MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00146B 0F546B CE 1B D9                                        LDX     #\1                                              (RESET_FATAL)
00146E 0F546E 06 19 DA                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
001471 0F5471 -> $1471                SSTACK_CODE_END         EQU     *
001471 0F5471 -> $F5471               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BBE 0F5BBE                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
001BBE 0F5BBE MACRO                   SSTACK_MSG_OF           RESET_MSG       "Subroutine stack overflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BBE 0F5BBE 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
001BD7 0F5BD7 AC 7A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BD9 0F5BD9 MACRO                   SSTACK_MSG_UF           RESET_MSG       "Subroutine stack underflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BD9 0F5BD9 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
001BF3 0F5BF3 C9 DC                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BF5 0F5BF5 -> $1BF5                SSTACK_TABS_END         EQU     *
001BF5 0F5BF5 -> $F5BF5               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
001BF5 0F5BF5 -> $0001                ISTACK_LEVELS           EQU     1               ;default is 1
                                      ;CPU
001BF5 0F5BF5 -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001BF5 0F5BF5 -> $0040                ISTACK_CCR              EQU     %0100_0000
001BF5 0F5BF5 -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AE5 0F5AE5                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001AE5 0F5AE5 -> $1AE5                ISTACK_TOP              EQU     *
001AE5 0F5AE5                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
001AEE 0F5AEE                                                 DS      SSTACK_DEPTH
001B09 0F5B09 -> $1B09                ISTACK_BOTTOM           EQU     *
001B09 0F5B09 -> $1B09                ISTACK_VARS_END         EQU     *
001B09 0F5B09 -> $F5B09               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001471 0F5471                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
001471 0F5471 -> $1471                ISTACK_CODE_END         EQU     *
001471 0F5471 -> $F5471               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BF5 0F5BF5                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
001BF5 0F5BF5 -> $1BF5                ISTACK_TABS_END         EQU     *
001BF5 0F5BF5 -> $F5BF5               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
001BF5 0F5BF5 -> $0007                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
001BF5 0F5BF5 -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
001BF5 0F5BF5 -> $D807                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B09 0F5B09                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001B09 0F5B09 -> $1B09                CLOCK_VARS_END          EQU     *
001B09 0F5B09 -> $F5B09               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001471 0F5471                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
001471 0F5471 -> $1471                CLOCK_ISR               EQU     *
001471 0F5471 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
001476 0F5476 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
00147B 0F547B MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00147B 0F547B 8F 1A E5                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00147E 0F547E 25 06                                           BLO     OF                                               (ISTACK_RTI)
001480 0F5480 8F 1B 00                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001483 0F5483 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001485 0F5485 0B                                              RTI                                                      (ISTACK_RTI)
001486 0F5486 00                      OF                      BGND                                                     (ISTACK_RTI)
001487 0F5487 00                      UF                      BGND                                                     (ISTACK_RTI)
001488 0F5488 -> $1488                CLOCK_CODE_END          EQU     *
001488 0F5488 -> $F5488               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BF5 0F5BF5                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
001BF5 0F5BF5 -> $1BF5                CLOCK_TABS_END          EQU     *
001BF5 0F5BF5 -> $F5BF5               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
001BF5 0F5BF5 -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
001BF5 0F5BF5 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B09 0F5B09                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
001B09 0F5B09 -> $1B09                COP_VARS_END            EQU     *
001B09 0F5B09 -> $F5B09               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001488 0F5488                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
001488 0F5488 -> $1488                COP_CODE_END            EQU     *
001488 0F5488 -> $F5488               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BF5 0F5BF5                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
001BF5 0F5BF5 -> $1BF5                COP_TABS_END            EQU     *
001BF5 0F5BF5 -> $F5BF5               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     delay driver                                                  #
                                      ;#      OC5:     unasigned                                                     #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
001BF5 0F5BF5 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
001BF5 0F5BF5 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
001BF5 0F5BF5 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
001BF5 0F5BF5 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
001BF5 0F5BF5 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
001BF5 0F5BF5 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
001BF5 0F5BF5 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
001BF5 0F5BF5 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
001BF5 0F5BF5 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B09 0F5B09                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001B09 0F5B09 -> $1B09                TIM_VARS_END            EQU     *
001B09 0F5B09 -> $F5B09               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001488 0F5488                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
001488 0F5488 -> $1488                TIM_CODE_END            EQU     *
001488 0F5488 -> $F5488               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BF5 0F5BF5                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
001BF5 0F5BF5 -> $1BF5                TIM_TABS_END            EQU     *
001BF5 0F5BF5 -> $F5BF5               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - Changed selection of detectable baud rates                           #
                                      ;#      - Stop baud rate detection when receiving a corret character           #
                                      ;#      - Stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;#    September 25, 2013                                                       #
                                      ;#      - Fixed reception of C0 characters                                     #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Made SCI_TXBUF_SIZE configurable                                     #
                                      ;#    October 1, 2014                                                          #
                                      ;#      - Added dynamic enable/disable feature                                 #
                                      ;#    January 14, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;#      - Changed control character handling                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
001BF5 0F5BF5 -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF coniguration
                                      ;XON/XOFF reminder intervall
001BF5 0F5BF5 -> $1DCD                SCI_XONXOFF_REMINDER    EQU     (10*CLOCK_BUS_FREQ)/65536
                                      ;RTS/CTS coniguration
                                      ;MC9S12DP256 SCI IRQ workaround (MUCts00510)
                                      ;-------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
001BF5 0F5BF5 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;Delay counter
                                      ;-------------
                                      ;SCI_DLY_OC             EQU     $3              ;default is OC3
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;Baud rate detection configuration
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;TX buffer size (minimize to 1 for debugging)
                                      ;--------------------------------------------
                                      ;SCI_TXBUF_SIZE         EQU       1             ;minimum size of the transmit buffer
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character -> define macro SCI_BREAK_ACTION
                                      ;#mac SCI_BREAK_ACTION, 0
                                      ;       ...code to be executed on BREAK condition (inside ISR)
                                      ;#emac
                                      ;Detect SUSPEND character -> define macro SCI_SUSPEND_ACTION
                                      ;#mac SCI_SUSPEND_ACTION, 0
                                      ;       ...code to be executed on SUSPEND condition (inside ISR)
                                      ;#emac
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
001BF5 0F5BF5 -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
001BF5 0F5BF5 -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
001BF5 0F5BF5 -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
001BF5 0F5BF5 -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
001BF5 0F5BF5 -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
001BF5 0F5BF5 -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
001BF5 0F5BF5 -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
001BF5 0F5BF5 -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
001BF5 0F5BF5 -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
001BF5 0F5BF5 -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
001BF5 0F5BF5 -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
001BF5 0F5BF5 -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
001BF5 0F5BF5 -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
001BF5 0F5BF5 -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
001BF5 0F5BF5 -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
001BF5 0F5BF5 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
001BF5 0F5BF5 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
001BF5 0F5BF5 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
001BF5 0F5BF5 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
001BF5 0F5BF5 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
001BF5 0F5BF5 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
001BF5 0F5BF5 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
001BF5 0F5BF5 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
001BF5 0F5BF5 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
001BF5 0F5BF5 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
001BF5 0F5BF5 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
001BF5 0F5BF5 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
001BF5 0F5BF5 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
001BF5 0F5BF5 -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
001BF5 0F5BF5 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
001BF5 0F5BF5 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
001BF5 0F5BF5 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
001BF5 0F5BF5 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
001BF5 0F5BF5 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
001BF5 0F5BF5 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
001BF5 0F5BF5 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
001BF5 0F5BF5 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Flow control
001BF5 0F5BF5 -> $0001                SCI_FC_EN               EQU     1
                                      ;#Baud rate detection
                                      ;#Timer setup for baud rate detection
001BF5 0F5BF5 -> $0000                SCI_BD_TIOS_VAL         EQU     0
001BF5 0F5BF5 -> $0000                SCI_BD_TCS              EQU     0
                                      ;#Timer setup for the delay counter
001BF5 0F5BF5 -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for XON/XOFF reminders
                                      ;#Delay counter
001BF5 0F5BF5 -> $0003                SCI_DLY_OC              EQU     $3              ;default is OC3
001BF5 0F5BF5 -> $0001                SCI_SET_TIOS            EQU     1
001BF5 0F5BF5 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
001BF5 0F5BF5 -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
001BF5 0F5BF5 -> $0001                SCI_CHECK_RX_ERR        EQU     1               ;check for RX errors to ignore faulty XON/XOFF symbols
                                      ;#C0 character handling
001BF5 0F5BF5 -> $0001                SCI_DETECT_C0           EQU     1               ;detect XON/XOFF symbols
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B09 0F5B09                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001B09 0F5B09 -> $1B09                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
001B09 0F5B09                                                 ALIGN   1
                                      ;#Receive buffer
001B0A 0F5B0A                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
001B2A 0F5B2A                         SCI_RXBUF_IN            DS      1               ;points to the next free space
001B2B 0F5B2B                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
001B2C 0F5B2C                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
001B34 0F5B34                         SCI_TXBUF_IN            DS      1               ;points to the next free space
001B35 0F5B35                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
001B36 0F5B36                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
                                      ;#XON/XOFF reminder count
001B38 0F5B38                         SCI_XONXOFF_REMCNT      DS      2               ;counter for XON/XOFF reminder
                                      ;#BD log buffer
001B3A 0F5B3A -> $1B3A                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
                                      ;#Flags
001B3A 0F5B3A -> $1B09                SCI_FLGS                EQU     ((SCI_AUTO_LOC1&1)*SCI_AUTO_LOC1)+(((~SCI_AUTO_LOC1)&1)*SCI_AUTO_LOC2)
001B3A 0F5B3A                                                 UNALIGN ((~SCI_AUTO_LOC1)&1)
                                      ;#Baud rate detection registers
001B3A 0F5B3A -> $1B3A                SCI_VARS_END            EQU     *
001B3A 0F5B3A -> $F5B3A               SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001488 0F5488                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
001488 0F5488 -> $1488                SCI_TX_NB               EQU     *
                                                              ;Check if SCI transmitter is enabled
001488 0F5488 4F CB 08 26                                     BRCLR   SCICR2, #TE, SCI_TX_NB_1                ;do nothing and flag success
                                                              ;Save registers (data in B)
00148C 0F548C 35                                              PSHY
00148D 0F548D 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
00148E 0F548E CD 1B 2C                                        LDY     #SCI_TXBUF
001491 0F5491 B6 1B 34                                        LDAA    SCI_TXBUF_IN
001494 0F5494 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
001496 0F5496 42                                              INCA                                            ;increment index
001497 0F5497 84 01                                           ANDA    #SCI_TXBUF_MASK
001499 0F5499 B1 1B 35                                        CMPA    SCI_TXBUF_OUT
00149C 0F549C 27 17                                           BEQ     SCI_TX_NB_2                             ;buffer is full
                                                              ;Update buffer
00149E 0F549E 7A 1B 34                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
0014A1 0F54A1 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
0014A6 0F54A6 MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0014A6 0F54A6 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014A6 0F54A6 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014A9 0F54A9 25 BA                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014AB 0F54AB 8F 1B 04                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014AE 0F54AE 22 BB                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014B0 0F54B0 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014B0 0F54B0 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014B0 0F54B0 32                                              PULA
0014B1 0F54B1 31                                              PULY
                                                              ;Signal success
0014B2 0F54B2 14 01                   SCI_TX_NB_1             SEC
                                                              ;Done
0014B4 0F54B4 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
0014B5 0F54B5 MACRO                   SCI_TX_NB_2             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0014B5 0F54B5 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014B5 0F54B5 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014B8 0F54B8 25 AB                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014BA 0F54BA 8F 1B 04                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014BD 0F54BD 22 AC                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014BF 0F54BF -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014BF 0F54BF -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014BF 0F54BF 32                                              PULA
0014C0 0F54C0 31                                              PULY
                                                              ;Signal failure
0014C1 0F54C1 10 FE                                           CLC
                                                              ;Done
0014C3 0F54C3 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
0014C4 0F54C4 -> $14C4                SCI_TX_BL               EQU     *
0014C4 0F54C4 MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0014C4 0F54C4 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0014C6 0F54C6                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0014C6 0F54C6 07 C0                                           JOBSR   \1                                               (SCI_MAKE_BL)
0014C8 0F54C8 24 0D                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0014CA 0F54CA 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0014CC 0F54CC MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0014CC 0F54CC MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014CC 0F54CC 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014CF 0F54CF 25 94                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014D1 0F54D1 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014D4 0F54D4 22 95                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014D6 0F54D6 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014D6 0F54D6 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014D6 0F54D6 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0014D7 0F54D7 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0014D7 0F54D7 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0014DA 0F54DA 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0014DC 0F54DC 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0014DF 0F54DF 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0014E1 0F54E1 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014E1 0F54E1 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014E6 0F54E6 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014EB 0F54EB 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0014ED 0F54ED 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0014EF 0F54EF 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0014F0 0F54F0 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0014F1 0F54F1 -> $14F1                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0014F1 0F54F1 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0014F1 0F54F1 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F1 0F54F1 8F 1A F3                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F4 0F54F4 18 25 FF 6D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F8 0F54F8 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014FB 0F54FB 18 22 FF 6C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014FF 0F54FF -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014FF 0F54FF -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014FF 0F54FF 20 C3                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissions are complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
001501 0F5501 -> $1501                SCI_TX_DONE_NB          EQU     *
                                                              ;Check if SCI transmitter is enabled
001501 0F5501 4F CB 08 2D                                     BRCLR   SCICR2, #TE, SCI_TX_DONE_NB_3           ;do nothing and flag success
                                                              ;Save registers
001505 0F5505 3B                                              PSHD
                                                              ;Check TX queue
001506 0F5506 FC 1B 34                                        LDD     SCI_TXBUF_IN
001509 0F5509 18 17                                           CBA
00150B 0F550B 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
00150D 0F550D 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2    ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
001511 0F5511 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001511 0F5511 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001511 0F5511 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001514 0F5514 18 25 FF 4D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001518 0F5518 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00151B 0F551B 18 22 FF 4C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00151F 0F551F -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00151F 0F551F -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00151F 0F551F 3A                                              PULD
                                                              ;Signal failure
001520 0F5520 10 FE                                           CLC
                                                              ;Done
001522 0F5522 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
001523 0F5523 MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001523 0F5523 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001523 0F5523 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001526 0F5526 18 25 FF 3B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00152A 0F552A 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00152D 0F552D 18 22 FF 3A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001531 0F5531 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001531 0F5531 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001531 0F5531 3A                                              PULD
                                                              ;Signal success
001532 0F5532 14 01                   SCI_TX_DONE_NB_3        SEC
                                                              ;Done
001534 0F5534 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
001535 0F5535 -> $1535                SCI_TX_DONE_BL          EQU     *
001535 0F5535 MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001535 0F5535 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001537 0F5537                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001537 0F5537 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
001539 0F5539 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00153B 0F553B 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00153D 0F553D MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00153D 0F553D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00153D 0F553D 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001540 0F5540 18 25 FF 21                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001544 0F5544 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001547 0F5547 18 22 FF 20                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00154B 0F554B -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00154B 0F554B -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00154B 0F554B 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00154C 0F554C MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00154C 0F554C 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00154F 0F554F 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001551 0F5551 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001554 0F5554 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001556 0F5556 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001556 0F5556 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00155B 0F555B 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001560 0F5560 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001562 0F5562 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001564 0F5564 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001565 0F5565 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001566 0F5566 -> $1566                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001566 0F5566 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001566 0F5566 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001566 0F5566 8F 1A F2                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001569 0F5569 18 25 FE F8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00156D 0F556D 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001570 0F5570 18 22 FE F7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001574 0F5574 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001574 0F5574 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001574 0F5574 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
001576 0F5576 -> $1576                SCI_TX_READY_NB         EQU     *
                                                              ;Check if SCI transmitter is enabled
001576 0F5576 4F CB 08 1B                                     BRCLR   SCICR2, #TE, SCI_TX_READY_NB_1          ;do nothing and flag success
                                                              ;Save registers
00157A 0F557A 3B                                              PSHD
                                                              ;Check if there is room for this entry
00157B 0F557B FC 1B 34                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
00157E 0F557E 42                                              INCA
00157F 0F557F 84 01                                           ANDA    #SCI_TXBUF_MASK
001581 0F5581 B1 1B 35                                        CMPA    SCI_TXBUF_OUT
001584 0F5584 27 12                                           BEQ     SCI_TX_READY_NB_2                               ;buffer is full
                                                              ;Restore registers
001586 0F5586 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001586 0F5586 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001586 0F5586 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001589 0F5589 18 25 FE D8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00158D 0F558D 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001590 0F5590 18 22 FE D7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001594 0F5594 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001594 0F5594 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001594 0F5594 3A                                              PULD
                                                              ;Done
001595 0F5595 14 01                   SCI_TX_READY_NB_1       SEC
001597 0F5597 3D                                              RTS
                                                              ;TX buffer is full
001598 0F5598 MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001598 0F5598 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001598 0F5598 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00159B 0F559B 18 25 FE C6                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00159F 0F559F 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015A2 0F55A2 18 22 FE C5                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015A6 0F55A6 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015A6 0F55A6 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015A6 0F55A6 3A                                              PULD
                                                              ;Done
0015A7 0F55A7 10 FE                                           CLC
0015A9 0F55A9 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0015AA 0F55AA -> $15AA                SCI_TX_READY_BL         EQU     *
0015AA 0F55AA MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0015AA 0F55AA 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0015AC 0F55AC                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0015AC 0F55AC 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
0015AE 0F55AE 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0015B0 0F55B0 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0015B2 0F55B2 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0015B2 0F55B2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015B2 0F55B2 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015B5 0F55B5 18 25 FE AC                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015B9 0F55B9 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015BC 0F55BC 18 22 FE AB                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C0 0F55C0 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C0 0F55C0 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C0 0F55C0 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0015C1 0F55C1 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0015C1 0F55C1 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0015C4 0F55C4 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0015C6 0F55C6 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0015C9 0F55C9 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0015CB 0F55CB MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0015CB 0F55CB 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0015D0 0F55D0 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0015D5 0F55D5 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0015D7 0F55D7 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0015D9 0F55D9 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0015DA 0F55DA 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0015DB 0F55DB -> $15DB                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0015DB 0F55DB MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0015DB 0F55DB MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015DB 0F55DB 8F 1A F2                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015DE 0F55DE 18 25 FE 83                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015E2 0F55E2 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015E5 0F55E5 18 22 FE 82                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015E9 0F55E9 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015E9 0F55E9 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015E9 0F55E9 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
0015EB 0F55EB -> $15EB                SCI_RX_NB               EQU     *
                                                              ;Check if SCI receiver is enabled
0015EB 0F55EB 4F CB 08 3D                                     BRCLR   SCICR2, #TE, SCI_RX_NB_3                ;do nothing and flag failure
                                                              ;Save registers
0015EF 0F55EF 34                                              PSHX
                                                              ;Check if there is data in the RX queue
0015F0 0F55F0 FC 1B 2A                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
0015F3 0F55F3 18 16                                           SBA                                             ;A=in-out
0015F5 0F55F5 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
                                                              ;Check if more RX data is allowed  (in-out in A)
0015F7 0F55F7 84 1F                                           ANDA    #SCI_RXBUF_MASK
0015F9 0F55F9 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
0015FB 0F55FB 27 32                                           BEQ     SCI_RX_NB_4                             ;allow RX data
                                                              ;Pull entry from the RX queue (out in B)
0015FD 0F55FD CE 1B 0A                SCI_RX_NB_1             LDX     #SCI_RXBUF
001600 0F5600 EE E5                                           LDX     B,X
001602 0F5602 CB 02                                           ADDB    #$02                                    ;increment out pointer
001604 0F5604 C4 1F                                           ANDB    #SCI_RXBUF_MASK
001606 0F5606 7B 1B 2B                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
001609 0F5609 B7 54                                           TFR     X, D
                                                              ;Restore registers
00160B 0F560B MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00160B 0F560B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00160B 0F560B 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00160E 0F560E 18 25 FE 53                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001612 0F5612 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001615 0F5615 18 22 FE 52                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001619 0F5619 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001619 0F5619 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001619 0F5619 30                                              PULX
                                                              ;Done
00161A 0F561A 14 01                                           SEC
00161C 0F561C 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
00161D 0F561D MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00161D 0F561D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00161D 0F561D 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001620 0F5620 18 25 FE 41                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001624 0F5624 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001627 0F5627 18 22 FE 40                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162B 0F562B -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162B 0F562B -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162B 0F562B 30                                              PULX
                                                              ;Done
00162C 0F562C 10 FE                   SCI_RX_NB_3             CLC
00162E 0F562E 3D                                              RTS
                                                              ;Transmit XON/XOFF (out-index in B, CCR in X)
00162F 0F562F MACRO                   SCI_RX_NB_4             SCI_SEND_XONXOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
00162F 0F562F 1C 1B 09 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
001633 0F5633 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
001638 0F5638 20 C3                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
00163A 0F563A -> $163A                SCI_RX_BL               EQU     *
00163A 0F563A MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00163A 0F563A 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00163C 0F563C                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00163C 0F563C 07 AD                                           JOBSR   \1                                               (SCI_MAKE_BL)
00163E 0F563E 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001640 0F5640 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001642 0F5642 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001642 0F5642 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001642 0F5642 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001645 0F5645 18 25 FE 1C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001649 0F5649 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00164C 0F564C 18 22 FE 1B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001650 0F5650 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001650 0F5650 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001650 0F5650 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001651 0F5651 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001651 0F5651 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001654 0F5654 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001656 0F5656 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001659 0F5659 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00165B 0F565B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00165B 0F565B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001660 0F5660 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001665 0F5665 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001667 0F5667 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001669 0F5669 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00166A 0F566A 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00166B 0F566B -> $166B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00166B 0F566B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00166B 0F566B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00166B 0F566B 8F 1A F2                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00166E 0F566E 18 25 FD F3                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001672 0F5672 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001675 0F5675 18 22 FD F2                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001679 0F5679 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001679 0F5679 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001679 0F5679 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00167B 0F567B -> $167B                SCI_RX_READY_NB         EQU     *
                                                              ;Check if SCI receiver is enabled
00167B 0F567B 4F CB 08 29                                     BRCLR   SCICR2, #TE, SCI_RX_READY_NB_2          ;do nothing and flag failure
                                                              ;Save registers
00167F 0F567F 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
001680 0F5680 FC 1B 2A                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
001683 0F5683 18 17                                           CBA
001685 0F5685 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
001687 0F5687 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001687 0F5687 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001687 0F5687 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00168A 0F568A 18 25 FD D7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00168E 0F568E 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001691 0F5691 18 22 FD D6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001695 0F5695 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001695 0F5695 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001695 0F5695 3A                                              PULD
                                                              ;Done
001696 0F5696 14 01                                           SEC
001698 0F5698 3D                                              RTS
                                                              ;RX buffer is empty
001699 0F5699 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001699 0F5699 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001699 0F5699 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00169C 0F569C 18 25 FD C5                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A0 0F56A0 8F 1B 05                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A3 0F56A3 18 22 FD C4                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A7 0F56A7 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A7 0F56A7 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A7 0F56A7 3A                                              PULD
                                                              ;Done
0016A8 0F56A8 10 FE                   SCI_RX_READY_NB_2       CLC
0016AA 0F56AA 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
0016AB 0F56AB -> $16AB                SCI_RX_READY_BL         EQU     *
0016AB 0F56AB MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0016AB 0F56AB 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0016AD 0F56AD                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0016AD 0F56AD 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
0016AF 0F56AF 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0016B1 0F56B1 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0016B3 0F56B3 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0016B3 0F56B3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016B3 0F56B3 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016B6 0F56B6 18 25 FD AB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016BA 0F56BA 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016BD 0F56BD 18 22 FD AA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016C1 0F56C1 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016C1 0F56C1 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016C1 0F56C1 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0016C2 0F56C2 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0016C2 0F56C2 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0016C5 0F56C5 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0016C7 0F56C7 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0016CA 0F56CA 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0016CC 0F56CC MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0016CC 0F56CC 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0016D1 0F56D1 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0016D6 0F56D6 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0016D8 0F56D8 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0016DA 0F56DA 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0016DB 0F56DB 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0016DC 0F56DC -> $16DC                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0016DC 0F56DC MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0016DC 0F56DC MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016DC 0F56DC 8F 1A F2                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016DF 0F56DF 18 25 FD 82                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016E3 0F56E3 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016E6 0F56E6 18 22 FD 81                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016EA 0F56EA -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016EA 0F56EA -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016EA 0F56EA 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0016EC 0F56EC -> $16EC                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
0016EC 0F56EC 35                                              PSHY                                    ;push Y onto the SSTACK
0016ED 0F56ED 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
0016EE 0F56EE 5C C8                                           STD     SCIBDH                          ;set baud rate
0016F0 0F56F0 CD 0C CC                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
0016F3 0F56F3 13                                              EMUL                                    ;D*Y -> Y:D
0016F4 0F56F4 7C 1B 36                                        STD     SCI_BVAL
                                                              ;Clear input buffer
0016F7 0F56F7 18 03 00 00 1B 2A                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
0016FD 0F56FD MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0016FD 0F56FD MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016FD 0F56FD 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001700 0F5700 18 25 FD 61                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001704 0F5704 8F 1B 03                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001707 0F5707 18 22 FD 60                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00170B 0F570B -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00170B 0F570B -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00170B 0F570B 3A                                              PULD                                    ;pull D from the SSTACK
00170C 0F570C 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
00170D 0F570D 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTS polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
00170E 0F570E -> $170E                SCI_ISR_DELAY           EQU     *
00170E 0F570E 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Check XON/XOFF reminder count (retrigger request in C-flag)
001710 0F5710 FC 1B 38                                        LDD     SCI_XONXOFF_REMCNT
001713 0F5713 27 13                                           BEQ     SCI_ISR_DELAY_3                                         ;XON/XOFF reminder disabled
001715 0F5715 04 24 0B                                        DBNE    D, SCI_ISR_DELAY_1                                      ;don't send XON/XOFF yet
001718 0F5718 MACRO                                           SCI_SEND_XONXOFF                                                ;request XON/XOFF reminder
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
001718 0F5718 1C 1B 09 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
00171C 0F571C 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
001721 0F5721 20 02                                           JOB     SCI_ISR_DELAY_2
001723 0F5723 -> $1723                SCI_ISR_DELAY_1         EQU     *
001723 0F5723 14 01                                           SEC                                                             ;retrigger
001725 0F5725 7C 1B 38                SCI_ISR_DELAY_2         STD     SCI_XONXOFF_REMCNT
001728 0F5728 -> $1728                SCI_ISR_DELAY_3         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
001728 0F5728 24 1F                                           BCC     SCI_ISR_DELAY_5
00172A 0F572A MACRO                                           SCI_RESET_DELAY
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
00172A 0F572A MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
00172A 0F572A MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00172A 0F572A 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00172F 0F572F DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
001731 0F5731 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
001734 0F5734 B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
001736 0F5736 C7                                              CLRB                                                     (SCI_RESET_DELAY)
001737 0F5737 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
001737 0F5737 49                                              LSRD                                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
001738 0F5738 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
00173A 0F573A 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
00173C 0F573C -> $173C                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
00173C 0F573C MACRO                   SCI_ISR_DELAY_4         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00173C 0F573C 8F 1A E5                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00173F 0F573F 25 06                                           BLO     OF                                               (ISTACK_RTI)
001741 0F5741 8F 1B 00                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001744 0F5744 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001746 0F5746 0B                                              RTI                                                      (ISTACK_RTI)
001747 0F5747 00                      OF                      BGND                                                     (ISTACK_RTI)
001748 0F5748 00                      UF                      BGND                                                     (ISTACK_RTI)
001749 0F5749 MACRO                   SCI_ISR_DELAY_5         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
001749 0F5749 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
001749 0F5749 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001749 0F5749 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00174C 0F574C 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00174E 0F574E 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001751 0F5751 -> $1751                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001751 0F5751 -> $1751                                        EQU     *                                                (SCI_STOP_DELAY)
001751 0F5751 20 E9                                           JOB     SCI_ISR_DELAY_4
                                                              ;#Transmit ISR (status flags in A)
001753 0F5753 85 80                   SCI_ISR_TX              BITA    #TDRE                                   ;check if SCI is ready for new TX data
001755 0F5755 27 54                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check if XON/XOFF transmission is required
001757 0F5757 1E 1B 09 02 1D                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_1 ;Don't escape any XON/XOFF symbols
                                                              ;Transmit XON/XOFF symbols
00175C 0F575C 1F 1B 09 80 18                                  BRCLR   SCI_FLGS, #SCI_FLG_SEND_XONXOFF, SCI_ISR_TX_1 ;XON/XOFF not requested
                                                              ;Clear XON/XOFF request
001761 0F5761 1D 1B 09 80                                     BCLR    SCI_FLGS, #SCI_FLG_SEND_XONXOFF
                                                              ;Check RX queue
001765 0F5765 FC 1B 2A                                        LDD     SCI_RXBUF_IN
001768 0F5768 18 16                                           SBA
00176A 0F576A 84 1F                                           ANDA    #SCI_RXBUF_MASK
                                                              ;Check XOFF theshold
00176C 0F576C 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00176E 0F576E 24 4F                                           BHS     <SCI_ISR_TX_6                           ;transmit XOFF
                                                              ;Check XON theshold
001770 0F5770 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
001772 0F5772 23 44                                           BLS     <SCI_ISR_TX_5                           ;transmit XON
                                                              ;Check XOFF status
001774 0F5774 1E 1B 09 08 28                                  BRSET   SCI_FLGS, #SCI_FLG_TX_BLOCKED, SCI_ISR_TX_3 ;stop transmitting
                                                              ;Check TX buffer
001779 0F5779 FC 1B 34                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
00177C 0F577C 18 17                                           CBA
00177E 0F577E 27 21                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
001780 0F5780 CD 1B 2C                                        LDY     #SCI_TXBUF
                                                              ;Check for DLE (in-index in A, out-index in B, buffer pointer in Y)
001783 0F5783 1D 1B 09 02                                     BCLR    SCI_FLGS, #SCI_FLG_TX_ESC
001787 0F5787 B7 45                                           TFR     D, X
001789 0F5789 E6 ED                                           LDAB    B,Y
00178B 0F578B C1 10                                           CMPB    #SCI_DLE
00178D 0F578D 26 04                                           BNE     SCI_ISR_TX_2
00178F 0F578F 1C 1B 09 02                                     BSET    SCI_FLGS, #SCI_FLG_TX_ESC
001793 0F5793 5B CF                   SCI_ISR_TX_2            STAB    SCIDRL
001795 0F5795 B7 54                                           TFR     X, D
                                                              ;Increment index (in-index in A, out-index in B, buffer pointer in Y)
001797 0F5797 52                                              INCB
001798 0F5798 C4 01                                           ANDB    #SCI_TXBUF_MASK
00179A 0F579A 7B 1B 35                                        STAB    SCI_TXBUF_OUT
00179D 0F579D 18 17                                           CBA
00179F 0F579F 26 0A                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
0017A1 0F57A1 -> $17A1                SCI_ISR_TX_3            EQU     *
0017A1 0F57A1 1E 1B 09 80 05                                  BRSET   SCI_FLGS, #SCI_FLG_SEND_XONXOFF, SCI_ISR_TX_4 ;consider pending XON/XOFF symbols
0017A6 0F57A6 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
0017AB 0F57AB MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0017AB 0F57AB 8F 1A E5                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
0017AE 0F57AE 25 06                                           BLO     OF                                               (ISTACK_RTI)
0017B0 0F57B0 8F 1B 00                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
0017B3 0F57B3 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0017B5 0F57B5 0B                                              RTI                                                      (ISTACK_RTI)
0017B6 0F57B6 00                      OF                      BGND                                                     (ISTACK_RTI)
0017B7 0F57B7 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Transmit XON
0017B8 0F57B8 18 0B 11 00 CF          SCI_ISR_TX_5            MOVB    #SCI_XON, SCIDRL
0017BD 0F57BD 20 05                                           JOB     SCI_ISR_TX_7                            ;schedule reminder
                                                              ;Transmit XOFF
0017BF 0F57BF 18 0B 13 00 CF          SCI_ISR_TX_6            MOVB    #SCI_XOFF, SCIDRL
                                                              ;Schedule reminder
0017C4 0F57C4 18 03 1D CD 1B 38       SCI_ISR_TX_7            MOVW    #SCI_XONXOFF_REMINDER, SCI_XONXOFF_REMCNT
0017CA 0F57CA MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (don't retrigger) (approx. 2 SCI frames)                           (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
0017CA 0F57CA 4E 4C 08 1F                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
0017CE 0F57CE MACRO                                           SCI_INIT_DELAY                                           (SCI_START_DELAY)
                                      ;#Start delay (always retrigger) (approx. 2 SCI frames)                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY)
0017CE 0F57CE MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0017CE 0F57CE MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
0017CE 0F57CE MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0017CE 0F57CE 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0017D3 0F57D3 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0017D5 0F57D5 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0017D8 0F57D8 B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0017DA 0F57DA C7                                              CLRB                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0017DB 0F57DB MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0017DB 0F57DB 49                                              LSRD                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0017DC 0F57DC D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0017DE 0F57DE 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0017E0 0F57E0 -> $17E0                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0017E0 0F57E0 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
0017E0 0F57E0 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0017E0 0F57E0 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0017E5 0F57E5 4C 4C 08                                        BSET    TIE, #\1                        ;enable interrupts (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0017E8 0F57E8 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0017ED 0F57ED -> $17ED                DONE                    EQU     *                                                (SCI_START_DELAY)
0017ED 0F57ED 20 BC                                           JOB     SCI_ISR_TX_4                            ;done
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
0017EF 0F57EF -> $17EF                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
0017EF 0F57EF 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
0017F1 0F57F1 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
0017F3 0F57F3 18 27 FF 5C                                     BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
0017F7 0F57F7 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
0017F9 0F57F9 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
                                                              ;Check character is escaped (status flags in A, RX data in B)
0017FB 0F57FB 1E 1B 09 04 41                                  BRSET   SCI_FLGS, #SCI_FLG_RX_ESC, SCI_ISR_RX_5 ;charakter is escaped (skip detection)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
001800 0F5800 1F 1B 09 10 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
001805 0F5805 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
001807 0F5807 1D 1B 09 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
                                                              ;Check for control characters (status flags in A, RX data in B)
00180B 0F580B 85 1F                                           BITA    #(SCI_FLG_SWOR|OR|NF|FE|PF)             ;don't handle control characters with errors
00180D 0F580D 26 04                                           BNE     <SCI_ISR_RX_1                           ;queue data
00180F 0F580F C1 13                                           CMPB    #SCI_XOFF
001811 0F5811 2F 5A                                           BLE     SCI_ISR_RX_8                            ;determine control signal
                                                              ;Place data into RX queue (status flags in A, RX data in B)
001813 0F5813 B7 46                   SCI_ISR_RX_1            TFR     D, Y                                    ;flags:data -> Y
001815 0F5815 CE 1B 0A                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
001818 0F5818 FC 1B 2A                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00181B 0F581B 6D E4                                           STY     A,X
00181D 0F581D 8B 02                                           ADDA    #2
00181F 0F581F 84 1F                                           ANDA    #SCI_RXBUF_MASK
001821 0F5821 18 17                                           CBA
001823 0F5823 27 56                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
001825 0F5825 7A 1B 2A                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
001828 0F5828 18 16                                           SBA
00182A 0F582A 84 1F                                           ANDA    #SCI_RXBUF_MASK
00182C 0F582C 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00182E 0F582E 24 4F                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
001830 0F5830 -> $1830                SCI_ISR_RX_2            EQU     *
                                                              ;Check for RX errors (flags:data in Y)
001830 0F5830 85 07                                           BITA    #(NF|FE|PF)                             ;check for noise, frame errors, parity errors
001832 0F5832 26 58                                           BNE     <SCI_ISR_RX_12                          ;RX error detected
001834 0F5834 -> $1834                SCI_ISR_RX_3            EQU     *
                                                              ;Done
001834 0F5834 MACRO                   SCI_ISR_RX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001834 0F5834 8F 1A E5                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001837 0F5837 25 06                                           BLO     OF                                               (ISTACK_RTI)
001839 0F5839 8F 1B 00                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00183C 0F583C 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00183E 0F583E 0B                                              RTI                                                      (ISTACK_RTI)
00183F 0F583F 00                      OF                      BGND                                                     (ISTACK_RTI)
001840 0F5840 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Queue escape character (status flags in A, RX data in B)
001841 0F5841 B7 46                   SCI_ISR_RX_5            TFR     D, Y
001843 0F5843 CE 1B 0A                                        LDX     #SCI_RXBUF
001846 0F5846 FC 1B 2A                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
001849 0F5849 1F 1B 09 10 07                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_6   ;no SWOR occured
00184E 0F584E 18 00 E4 10 10                                  MOVW    #((SCI_FLG_SWOR<<8)|SCI_DLE), A,X       ;queue DLE with SWOR flag
001853 0F5853 20 05                                           JOB     SCI_ISR_RX_7
001855 0F5855 18 00 E4 00 10          SCI_ISR_RX_6            MOVW    #SCI_DLE, A,X                           ;queue DLE without SWOR flag
00185A 0F585A 1D 1B 09 14             SCI_ISR_RX_7            BCLR    SCI_FLGS, #(SCI_FLG_SWOR|SCI_FLG_RX_ESC) ;clear SWOR and RX_ESC flags
00185E 0F585E 8B 02                                           ADDA    #2
001860 0F5860 84 1F                                           ANDA    #SCI_RXBUF_MASK
001862 0F5862 18 17                                           CBA
001864 0F5864 27 15                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
001866 0F5866 7A 1B 2A                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
001869 0F5869 B7 64                                           TFR     Y, D
00186B 0F586B 20 A6                                           JOB     SCI_ISR_RX_1                            ;queue data
                                                              ;Determine control signal (status flags in A, RX data in B)
00186D 0F586D -> $186D                SCI_ISR_RX_8            EQU     *
                                                              ;Check for XON/XOFF (status flags in A, RX data in B)
00186D 0F586D C1 13                                           CMPB    #SCI_XOFF
00186F 0F586F 27 1D                                           BEQ     <SCI_ISR_RX_15                          ;XOFF received
001871 0F5871 C1 11                                           CMPB    #SCI_XON
001873 0F5873 27 1F                                           BEQ     <SCI_ISR_RX_16                          ;XON received
                                                              ;Check for DLE (status flags in A, RX data in B)
001875 0F5875 C1 10                                           CMPB    #SCI_DLE
001877 0F5877 27 26                                           BEQ     <SCI_ISR_RX_17                          ;DLE received
001879 0F5879 20 98                                           JOB     SCI_ISR_RX_1                            ;queue data
                                                              ;Buffer overflow (flags:data in Y)
00187B 0F587B 1C 1B 09 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
                                                              ;Signal buffer full (flags:data in Y)
                                                              ;Transmit XON/XOFF (flags:data in Y)
00187F 0F587F MACRO                   SCI_ISR_RX_10           SCI_SEND_XONXOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
00187F 0F587F 1C 1B 09 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
001883 0F5883 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
001888 0F5888 -> $1888                SCI_ISR_RX_11           EQU     *
001888 0F5888 85 07                                           BITA    #(NF|FE|PF)                             ;check for noise, frame errors, parity errors
00188A 0F588A 27 A8                                           BEQ     <SCI_ISR_RX_3                           ;stop error signaling
                                                              ;RX error detected
00188C 0F588C -> $188C                SCI_ISR_RX_12           EQU     *
00188C 0F588C 20 A6                   SCI_ISR_RX_13           JOB     SCI_ISR_RX_4                            ;done
                                                              ;Handle XOFF
00188E 0F588E 1C 1B 09 08             SCI_ISR_RX_15           BSET    SCI_FLGS, #SCI_FLG_TX_BLOCKED           ;stop transmitting
001892 0F5892 20 F8                                           JOB     SCI_ISR_RX_13                           ;done
                                                              ;Handle XON
001894 0F5894 1C 1B 09 08             SCI_ISR_RX_16           BSET    SCI_FLGS, #SCI_FLG_TX_BLOCKED           ;allow transmissions
001898 0F5898 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupt
00189D 0F589D 20 ED                                           JOB     SCI_ISR_RX_13                           ;done
                                                              ;Handle DLE
00189F 0F589F 1C 1B 09 04             SCI_ISR_RX_17           BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;remember start of escape sequence
0018A3 0F58A3 FC 1B 2A                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
0018A6 0F58A6 84 1F                                           ANDA    #SCI_RXBUF_MASK
0018A8 0F58A8 81 0E                                           CMPA    #(SCI_RX_FULL_LEVEL-2)
0018AA 0F58AA 24 D3                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
0018AC 0F58AC 20 DA                                           JOB     SCI_ISR_RX_11                           ;check for RX errors
0018AE 0F58AE -> $18AE                SCI_CODE_END            EQU     *
0018AE 0F58AE -> $F58AE               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BF5 0F5BF5                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
001BF5 0F5BF5 FF                                              ALIGN   1, $FF
                                                              ;List of prescaler values
001BF6 0F5BF6 -> $1BF6                SCI_BTAB                EQU     *
001BF6 0F5BF6 02 8B                                           DW      SCI_4800
001BF8 0F5BF8 01 B2                                           DW      SCI_7200
001BFA 0F5BFA 01 46                                           DW      SCI_9600
001BFC 0F5BFC 00 D9                                           DW      SCI_14400
001BFE 0F5BFE 00 A3                                           DW      SCI_19200
001C00 0F5C00 00 6D                                           DW      SCI_28800
001C02 0F5C02 00 51                                           DW      SCI_38400
001C04 0F5C04 00 36                                           DW      SCI_57600
001C06 0F5C06 -> $1C06                SCI_BTAB_END            EQU     *
001C06 0F5C06 -> $1C06                SCI_TABS_END            EQU     *
001C06 0F5C06 -> $F5C06               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB       - print a string (non-blocking)                    #
                                      ;#    STRING_PRINT_BL       - print a string (blocking)                        #
                                      ;#    STRING_FILL_NB        - print a number of filler characters (non-bl.)    #
                                      ;#    STRING_FILL_BL        - print a number of filler characters (blocking)   #
                                      ;#    STRING_UPPER          - convert a character to upper case                #
                                      ;#    STRING_LOWER          - convert a character to lower case                #
                                      ;#    STRING_PRINTABLE      - make character printable                         #
                                      ;#    STRING_SKIP_WS        - skip whitespace characters                       #
                                      ;#    STRING_SKIP_AND_COUNT - determine the length of a string                 #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - Fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;#    June 10, 2013                                                            #
                                      ;#      - Turned STRING_UPPER and STRING_LOWER into subroutines                #
                                      ;#      - Added STRING_SKIP_WS                                                 #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    October 31, 2013                                                         #
                                      ;#      - Replaced STRING_LENGTH by STRING_SKIP_AND_COUNT                      #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Added #ifdef's for rarely used functions STRING_FILL_BL,             #
                                      ;#        STRING_FILL_NB, STRING_SKIP_WS, and STRING_LOWER                     #
                                      ;#    March 3, 2014                                                            #
                                      ;#      - Added macro STRING_IS_PRINTABLE                                      #
                                      ;#    February 18, 2015                                                        #
                                      ;#      - Changed configuration options                                        #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Enable Subroutines
                                      ;------------------
                                      ;STRING_ENABLE_FILL_NB          EQU     1       ;enable STRING_FILL_NB
                                      ;STRING_ENABLE_FILL_BL          EQU     1       ;enable STRING_FILL_BL
                                      ;STRING_ENABLE_UPPER            EQU     1       ;enable STRING_UPPER
                                      ;STRING_ENABLE_LOWER            EQU     1       ;enable STRING_LOWER
                                      ;STRING_ENABLE_PRINTABLE        EQU     1       ;enable STRING_PRINTABLE
                                      ;STRING_ENABLE_SKIP_WS          EQU     1       ;enable STRING_SKIP_WS
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
001C06 0F5C06 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
001C06 0F5C06 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
001C06 0F5C06 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
001C06 0F5C06 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
001C06 0F5C06 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
001C06 0F5C06 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
001C06 0F5C06 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
001C06 0F5C06 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
001C06 0F5C06 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B3A 0F5B3A                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
001B3A 0F5B3A -> $1B3A                STRING_VARS_END         EQU     *
001B3A 0F5B3A -> $F5B3A               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018AE 0F58AE                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
0018AE 0F58AE -> $18AE                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
0018AE 0F58AE 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
0018AF 0F58AF E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
0018B1 0F58B1 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
0018B3 0F58B3 16 14 88                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0018B6 0F58B6 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
0018B8 0F58B8 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
0018BA 0F58BA MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0018BA 0F58BA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018BA 0F58BA 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018BD 0F58BD 18 25 FB A4                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C1 0F58C1 8F 1B 06                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C4 0F58C4 18 22 FB A3                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C8 0F58C8 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C8 0F58C8 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C8 0F58C8 33                                              PULB
                                                              ;Signal failure (string pointer in X)
0018C9 0F58C9 10 FE                                           CLC
                                                              ;Done
0018CB 0F58CB 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
0018CC 0F58CC C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
0018CE 0F58CE 16 14 88                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0018D1 0F58D1 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
0018D3 0F58D3 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0018D3 0F58D3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018D3 0F58D3 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018D6 0F58D6 18 25 FB 8B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018DA 0F58DA 8F 1B 06                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018DD 0F58DD 18 22 FB 8A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018E1 0F58E1 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018E1 0F58E1 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018E1 0F58E1 33                                              PULB
                                                              ;Signal success (next string pointer in X)
0018E2 0F58E2 14 01                                           SEC
                                                              ;Done
0018E4 0F58E4 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
0018E5 0F58E5 -> $18E5                STRING_PRINT_BL         EQU     *
0018E5 0F58E5 MACRO                                           SCI_MAKE_BL     STRING_PRINT_NB, 10
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0018E5 0F58E5 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0018E7 0F58E7                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0018E7 0F58E7 07 C5                                           JOBSR   \1                                               (SCI_MAKE_BL)
0018E9 0F58E9 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0018EB 0F58EB 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0018ED 0F58ED MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0018ED 0F58ED MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018ED 0F58ED 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F0 0F58F0 18 25 FB 71                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F4 0F58F4 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F7 0F58F7 18 22 FB 70                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018FB 0F58FB -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018FB 0F58FB -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018FB 0F58FB 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0018FC 0F58FC MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0018FC 0F58FC 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0018FF 0F58FF 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001901 0F5901 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001904 0F5904 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001906 0F5906 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001906 0F5906 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00190B 0F590B 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001910 0F5910 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001912 0F5912 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001914 0F5914 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001915 0F5915 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001916 0F5916 -> $1916                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001916 0F5916 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001916 0F5916 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001916 0F5916 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001919 0F5919 18 25 FB 48                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00191D 0F591D 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001920 0F5920 18 22 FB 47                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001924 0F5924 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001924 0F5924 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001924 0F5924 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Print a number of filler characters - non-blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
001926 0F5926 -> $1926                STRING_FILL_NB          EQU     *
                                                              ;Print characters (requested spaces in A)
001926 0F5926 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
001929 0F5929 16 14 88                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00192C 0F592C 24 14                                           BCC     STRING_FILL_NB_3        ;unsuccessful
00192E 0F592E 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
001931 0F5931 MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001931 0F5931 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001931 0F5931 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001934 0F5934 18 25 FB 2D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001938 0F5938 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00193B 0F593B 18 22 FB 2C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00193F 0F593F -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00193F 0F593F -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                              ;Signal success (remaining spaces in A)
00193F 0F593F 14 01                                           SEC
                                                              ;Done
001941 0F5941 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
001942 0F5942 MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001942 0F5942 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001942 0F5942 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001945 0F5945 18 25 FB 1C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001949 0F5949 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00194C 0F594C 18 22 FB 1B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001950 0F5950 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001950 0F5950 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                              ;Signal failure (remaining spaces in A)
001950 0F5950 10 FE                                           CLC
                                                              ;Done
001952 0F5952 3D                                              RTS
                                      ;#Print a number of filler characters - blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
001953 0F5953 -> $1953                STRING_FILL_BL          EQU     *
001953 0F5953 MACRO                                           SCI_MAKE_BL     STRING_FILL_NB, 7
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001953 0F5953 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001955 0F5955                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001955 0F5955 07 CF                                           JOBSR   \1                                               (SCI_MAKE_BL)
001957 0F5957 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001959 0F5959 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00195B 0F595B MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00195B 0F595B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00195B 0F595B 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00195E 0F595E 18 25 FB 03                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001962 0F5962 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001965 0F5965 18 22 FB 02                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001969 0F5969 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001969 0F5969 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001969 0F5969 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00196A 0F596A MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00196A 0F596A 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00196D 0F596D 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00196F 0F596F 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001972 0F5972 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001974 0F5974 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001974 0F5974 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001979 0F5979 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00197E 0F597E 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001980 0F5980 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001982 0F5982 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001983 0F5983 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001984 0F5984 -> $1984                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001984 0F5984 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001984 0F5984 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001984 0F5984 8F 1A F5                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001987 0F5987 18 25 FA DA                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00198B 0F598B 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00198E 0F598E 18 22 FA D9                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001992 0F5992 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001992 0F5992 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001992 0F5992 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
001994 0F5994 -> $1994                STRING_PRINTABLE        EQU     *
001994 0F5994 C1 20                                           CMPB    #$20            ;" "
001996 0F5996 25 04                                           BLO     STRING_PRINTABLE_1
001998 0F5998 C1 7E                                           CMPB    #$7E            ;"~"
00199A 0F599A 23 10                                           BLS     STRING_PRINTABLE_2
00199C 0F599C C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
00199E 0F599E MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00199E 0F599E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00199E 0F599E 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A1 0F59A1 18 25 FA C0                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A5 0F59A5 8F 1B 07                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A8 0F59A8 18 22 FA BF                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019AC 0F59AC -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019AC 0F59AC -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019AC 0F59AC 3D                      STRING_PRINTABLE_2      RTS
0019AD 0F59AD -> $19AD                STRING_CODE_END         EQU     *
0019AD 0F59AD -> $F59AD               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C06 0F5C06                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
                                      ;STRING_STR_EXCLAM_NL   DB      "!"     ;exclamation mark + new line
001C06 0F5C06 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001C06 0F5C06 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001C07 0F5C07 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
001C08 0F5C08 -> $1C08                STRING_TABS_END         EQU     *
001C08 0F5C08 -> $F5C08               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;#    June 20, 2013                                                            #
                                      ;#      - Added macros "RESET_RESTART" and "RESET_RESTART_NO_MSG"              #
                                      ;#    January 15, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;###############################################################################
                                      ;# Error Detection:                                                            #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# |                         |       | P L I |         |                     | #
                                      ;# |                         |       | O V L |         |                     | #
                                      ;# |                         | Reset | R R A | Message |                     | #
                                      ;# | Cause                   | Vector| F F F | Pointer | Display             | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Power-On Reset          | $FFFE | 1 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | External Pin Reset      | $FFFE | 0 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Low Voltage Reset       | $FFFE | - 1 - |    -    | Error (Low voltage) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Illegal Address Reset   | $FFFE |  -0 1 |    -    | Error (Code fail)   | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Clock Monitor Reset     | $FFFC | - - - | CLK Msg | Error (Clock fail)  | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | COP Reset               | $FFFA | - - - | COP Msg | Error (Inresponsive)| #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Fatal Application Error | $FFFA | - - - |  Valid  | Error (Application) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Replace system resets by BGND instructions
                                      ;RESET_DEBUG            EQU     1
                                      ;Monitor low voltage reset
001C08 0F5C08 -> $0001                RESET_LVR_CHECK_ON      EQU     1               ;enable LVR check if LVRF flag exists
                                      ;Monitor illegal address reset
001C08 0F5C08 -> $0001                RESET_IAR_CHECK_ON      EQU     1               ;enable IAR check if ILAF flag exists
                                      ;Maximum error message length
001C08 0F5C08 -> $0040                RESET_MSG_LENGTH        EQU     64
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B3A 0F5B3A                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
                                                              ;ALIGN  1
001B3A 0F5B3A                         RESET_MSG_REQ           DS      2               ;requested error message
001B3C 0F5B3C                         RESET_MSG_PTR           DS      2               ;validated error message
001B3E 0F5B3E -> $1B3E                RESET_VARS_END          EQU     *
001B3E 0F5B3E -> $F5B3E               RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0019AD 0F59AD                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#Reset entry points
                                      ;--------------------
                                      ;Power-on and external reset
0019AD 0F59AD -> $19AD                RESET_EXT_ENTRY         EQU     *
0019AD 0F59AD 18 03 1C 08 1B 3A                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
0019B3 0F59B3 18 03 00 00 1B 3C                               MOVW    #$0000, RESET_MSG_PTR                   ;check reset flags
0019B9 0F59B9 06 10 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset
0019BC 0F59BC 18 03 1C 08 1B 3A       RESET_CM_ENTRY          MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
0019C2 0F59C2 18 03 1C 1D 1B 3C                               MOVW    #RESET_MSG_CLKFAIL, RESET_MSG_PTR       ;set clock failure message
0019C8 0F59C8 06 10 00                                        JOB     START_OF_CODE
                                      ;COP and user reset
0019CB 0F59CB -> $1000                RESET_COP_ENTRY         EQU     START_OF_CODE
0019CB 0F59CB 18 04 1B 3A 1B 3C                               MOVW    RESET_MSG_REQ, RESET_MSG_PTR            ;preserve error message
0019D1 0F59D1 18 03 1C 08 1B 3A                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
0019D7 0F59D7 06 10 00                                        JOB     START_OF_CODE
                                      ;#Reset trigger
                                      ;--------------
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
                                      ;          System is reset and initialized
0019DA 0F59DA -> $19DA                RESET_FATAL_X           EQU     *
0019DA 0F59DA 7E 1B 3A                                        STX     RESET_MSG_REQ
                                                              ;Trigger COP
0019DD 0F59DD MACRO                   RESET_FATAL_X_1         COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
0019DD 0F59DD 06 10 00                                        JOB     RESET_COP_ENTRY                                  (COP_RESET)
0019E0 0F59E0 -> $19E0                RESET_CODE_END          EQU     *
0019E0 0F59E0 -> $F59E0               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C08 0F5C08                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Error messages
001C08 0F5C08 MACRO                   RESET_MSG_COP           RESET_MSG       "System inresponsive"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001C08 0F5C08 53 79 73 74 65 6D 20 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 72 65 73 70 6F 6E 73 
              69 76 E5                
001C1B 0F5C1B F6 4A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001C1D 0F5C1D MACRO                   RESET_MSG_CLKFAIL       RESET_MSG       "Clock failure"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001C1D 0F5C1D 43 6C 6F 63 6B 20 66 61 RESET_MSG               FCS     \1                                               (RESET_MSG)
              69 6C 75 72 E5          
001C2A 0F5C2A D2 74                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001C2C 0F5C2C MACRO                   RESET_MSG_POWFAIL       RESET_MSG       "Power loss"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001C2C 0F5C2C 50 6F 77 65 72 20 6C 6F RESET_MSG               FCS     \1                                               (RESET_MSG)
              73 F3                   
001C36 0F5C36 A4 6E                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001C38 0F5C38 MACRO                   RESET_MSG_ILLADDR       RESET_MSG       "Code runaway"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001C38 0F5C38 43 6F 64 65 20 72 75 6E RESET_MSG               FCS     \1                                               (RESET_MSG)
              61 77 61 F9             
001C44 0F5C44 04 22                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001C46 0F5C46 MACRO                   RESET_MSG_UNKNOWN       RESET_MSG       "Unknown cause"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001C46 0F5C46 55 6E 6B 6E 6F 77 6E 20 RESET_MSG               FCS     \1                                               (RESET_MSG)
              63 61 75 73 E5          
001C53 0F5C53 5C A1                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001C55 0F5C55 -> $1C55                RESET_TABS_END          EQU     *
001C55 0F5C55 -> $F5C55               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010- Dirk Heisswolf                                           #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Maximum number conversion radix
                                      ;-------------------------------
                                      ;Enable blocking subroutines
001C55 0F5C55 -> $0001                NUM_MAX_BASE_16         EQU     1                               ;default is 16
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
001C55 0F5C55 -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
001C55 0F5C55 -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
001C55 0F5C55 -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B3E 0F5B3E                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
001B3E 0F5B3E -> $1B3E                NUM_VARS_END            EQU     *
001B3E 0F5B3E -> $F5B3E               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0019E0 0F59E0                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
0019E0 0F59E0 -> $19E0                NUM_REVERSE             EQU     *
                                      ;Stack layout:
0019E0 0F59E0 -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
0019E0 0F59E0 -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
0019E0 0F59E0 -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
0019E0 0F59E0 -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
0019E0 0F59E0 -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
0019E0 0F59E0 -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
0019E0 0F59E0 -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
0019E0 0F59E0 -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
0019E0 0F59E0 -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
0019E0 0F59E0 -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
0019E0 0F59E0 87                                              CLRA
0019E1 0F59E1 18 02 80 AA                                     MOVW    0,SP, 6,-SP             ;move return address to SP+10
0019E5 0F59E5 6C 86                                           STD     6,SP                    ;initialize reverse number
0019E7 0F59E7 18 00 84 00 00                                  MOVW    #$0000, 4,SP            ;reverse number = base
0019EC 0F59EC 18 00 82 00 00                                  MOVW    #$0000, 2,SP
0019F1 0F59F1 34                                              PSHX                            ;store X at SP+8
0019F2 0F59F2 35                                              PSHY                            ;store Y at SP+6
0019F3 0F59F3 3B                                              PSHD                            ;store count:base at SP+4
0019F4 0F59F4 34                                              PSHX                            ;store double value at SP+0
0019F5 0F59F5 35                                              PSHY
                                                              ;Divide FHW by base
0019F6 0F59F6 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
0019F8 0F59F8 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
0019FA 0F59FA 87                                              CLRA                            ;base => D
0019FB 0F59FB E6 85                                           LDAB    NUM_REVERSE_BASE,SP
0019FD 0F59FD B7 D4                                           EXG     X, D
0019FF 0F59FF 18 10                                           IDIV                            ;D / X => X,  D % X => D
001A01 0F5A01 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
001A03 0F5A03 B7 45                                           TFR     D, X                    ;remainder => X
001A05 0F5A05 87                      NUM_REVERSE_2           CLRA                            ;base => D
001A06 0F5A06 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A08 0F5A08 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
001A0A 0F5A0A B7 D6                                           EXG     X, Y
001A0C 0F5A0C B7 D4                                           EXG     X, D
001A0E 0F5A0E 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001A0F 0F5A0F 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
001A11 0F5A11 E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
001A14 0F5A14 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
001A17 0F5A17 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
001A19 0F5A19 C9 00                                           ADCB    #$00
001A1B 0F5A1B 89 00                                           ADCA    #$00
001A1D 0F5A1D 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001A1F 0F5A1F EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
001A21 0F5A21 C9 00                                           ADCB    #$00
001A23 0F5A23 89 00                                           ADCA    #$00
001A25 0F5A25 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
001A27 0F5A27 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
001A29 0F5A29 EC 82                                           LDD     NUM_REVERSE_FLW,SP
001A2B 0F5A2B 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
001A2D 0F5A2D EC 80                                           LDD     NUM_REVERSE_FHW,SP
001A2F 0F5A2F 27 2C                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
001A31 0F5A31 ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
001A34 0F5A34 87                                              CLRA
001A35 0F5A35 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A37 0F5A37 13                                              EMUL                            ;Y * D => Y:D
001A38 0F5A38 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
001A3B 0F5A3B EC 8E                                           LDD     NUM_REVERSE_RMW,SP
001A3D 0F5A3D B7 C6                                           EXG     D, Y
001A3F 0F5A3F 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001A41 0F5A41 87                                              CLRA
001A42 0F5A42 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A44 0F5A44 13                                              EMUL                            ;Y * D => Y:D
001A45 0F5A45 E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
001A47 0F5A47 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001A49 0F5A49 B7 64                                           TFR     Y, D
001A4B 0F5A4B C9 00                                           ADCB    #$00
001A4D 0F5A4D 89 00                                           ADCA    #$00
                                                              ;Multiply RHW by base (carry-over in D)
001A4F 0F5A4F ED 8C                                           LDY     NUM_REVERSE_RHW,SP
001A51 0F5A51 6C 8C                                           STD     NUM_REVERSE_RHW,SP
001A53 0F5A53 87                                              CLRA
001A54 0F5A54 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A56 0F5A56 13                                              EMUL                            ;Y * D => Y:D
001A57 0F5A57 E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
001A59 0F5A59 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
001A5B 0F5A5B 20 99                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
001A5D 0F5A5D MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A5D 0F5A5D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A5D 0F5A5D 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A60 0F5A60 18 25 FA 01                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A64 0F5A64 8F 1A F7                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A67 0F5A67 18 22 FA 00                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A6B 0F5A6B -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A6B 0F5A6B -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A6B 0F5A6B 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
001A6D 0F5A6D 3A                                              PULD                            ;
001A6E 0F5A6E 31                                              PULY
001A6F 0F5A6F 30                                              PULX
                                                              ;Done
001A70 0F5A70 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes  (+6 arg bytes)
                                      ;         X, Y and D are preserved
001A71 0F5A71 -> $1A71                NUM_REVPRINT_NB         EQU     *
                                      ;Stack layout:
001A71 0F5A71 -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
001A71 0F5A71 -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
001A71 0F5A71 -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
001A71 0F5A71 -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
001A71 0F5A71 -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
001A71 0F5A71 -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
001A71 0F5A71 -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
001A71 0F5A71 -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
001A71 0F5A71 34                                              PSHX                                    ;store X at SP+8
001A72 0F5A72 35                                              PSHY                                    ;store Y at SP+6
001A73 0F5A73 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
001A74 0F5A74 MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
001A74 0F5A74 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
001A74 0F5A74 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001A74 0F5A74 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A74 0F5A74 8F 1A F2                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A77 0F5A77 18 25 F9 EA                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A7B 0F5A7B 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A7E 0F5A7E 18 22 F9 E9                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A82 0F5A82 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A82 0F5A82 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A82 0F5A82 16 15 76                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
001A85 0F5A85 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
001A89 0F5A89 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
001A8B 0F5A8B 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
001A8D 0F5A8D B7 65                                           TFR     Y, X
001A8F 0F5A8F 87                                              CLRA                            ;base => D
001A90 0F5A90 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001A92 0F5A92 B7 D4                                           EXG     X, D
001A94 0F5A94 18 10                                           IDIV                            ;D / X => X,  D % X => D
001A96 0F5A96 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
001A98 0F5A98 B7 46                                           TFR     D, Y                    ;remainder => Y
001A9A 0F5A9A 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
001A9B 0F5A9B E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001A9D 0F5A9D EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
001A9F 0F5A9F B7 C5                                           EXG     D, X
001AA1 0F5AA1 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001AA2 0F5AA2 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
001AA4 0F5AA4 B7 46                                           TFR     D, Y                    ;remainder => Y
001AA6 0F5AA6 EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
001AA8 0F5AA8 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001AA9 0F5AA9 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
001AAB 0F5AAB CE 1C 55                                        LdX     #NUM_SYMTAB
001AAE 0F5AAE E6 E5                                           LDAB    B,X
001AB0 0F5AB0 16 14 88                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
001AB3 0F5AB3 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
001AB6 0F5AB6 EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
001AB8 0F5AB8 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
001ABA 0F5ABA EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
001ABC 0F5ABC 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
001ABE 0F5ABE MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001ABE 0F5ABE MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ABE 0F5ABE 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC1 0F5AC1 18 25 F9 A0                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC5 0F5AC5 8F 1A FB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC8 0F5AC8 18 22 F9 9F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ACC 0F5ACC -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ACC 0F5ACC -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ACC 0F5ACC 14 01                                           SEC
001ACE 0F5ACE 3A                      NUM_REVPRINT_NB_3       PULD
001ACF 0F5ACF 31                                              PULY
001AD0 0F5AD0 30                                              PULX
                                                              ;Done
001AD1 0F5AD1 3D                                              RTS
                                                              ;Printing incomplete
001AD2 0F5AD2 MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001AD2 0F5AD2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AD2 0F5AD2 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AD5 0F5AD5 18 25 F9 8C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AD9 0F5AD9 8F 1A FB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ADC 0F5ADC 18 22 F9 8B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AE0 0F5AE0 -> $146B                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AE0 0F5AE0 -> $1465                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AE0 0F5AE0 10 FE                                           CLC
001AE2 0F5AE2 20 EA                                           JOB     NUM_REVPRINT_NB_3
001AE4 0F5AE4 -> $1AE4                NUM_CODE_END            EQU     *
001AE4 0F5AE4 -> $F5AE4               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C55 0F5C55                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
001C55 0F5C55 30                      NUM_SYMTAB              DB      "0"     ; 0
001C56 0F5C56 31                                              DB      "1"     ; 1
001C57 0F5C57 32                                              DB      "2"     ; 2
001C58 0F5C58 33                                              DB      "3"     ; 3
001C59 0F5C59 34                                              DB      "4"     ; 4
001C5A 0F5C5A 35                                              DB      "5"     ; 5
001C5B 0F5C5B 36                                              DB      "6"     ; 6
001C5C 0F5C5C 37                                              DB      "7"     ; 7
001C5D 0F5C5D 38                                              DB      "8"     ; 8
001C5E 0F5C5E 39                                              DB      "9"     ; 9
001C5F 0F5C5F 41                                              DB      "A"     ;10
001C60 0F5C60 42                                              DB      "B"     ;11
001C61 0F5C61 43                                              DB      "C"     ;12
001C62 0F5C62 44                                              DB      "D"     ;13
001C63 0F5C63 45                                              DB      "E"     ;14
001C64 0F5C64 46                                              DB      "F"     ;15
001C65 0F5C65 65                      NUM_SYMTAB_END  DB      *
001C66 0F5C66 -> $1C66                NUM_TABS_END            EQU     *
001C66 0F5C66 -> $F5C66               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (BEPM)                                     #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    January 29, 2015                                                         #
                                      ;#      - Updated during S12CBASE overhaul                                     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    RESET   - Reset handler                                                  #
                                      ;#    CLOCK   - Clock handler                                                  #
                                      ;#    SCI     - UART driver                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B3E 0F5B3E                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001B3E 0F5B3E -> $1B3E                VECTAB_VARS_END         EQU     *
001B3E 0F5B3E -> $F5B3E               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001AE4 0F5AE4                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
001AE4 0F5AE4 -> $1AE4                VECTAB_CODE_END         EQU     *
001AE4 0F5AE4 -> $F5AE4               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C66 0F5C66                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
001C66 0F5C66 00                      ISR_SPURIOUS            BGND                            ;vector base + $10
001C67 0F5C67 00                      ISR_SYS                 BGND                            ;vector base + $12
001C68 0F5C68 00                      ISR_MPU                 BGND                            ;vector base + $14
001C69 0F5C69 00                      ISR_XGSWE               BGND                            ;vector base + $16
001C6A 0F5C6A 00                      ISR_RES18               BGND                            ;vector base + $18
001C6B 0F5C6B 00                      ISR_RES1A               BGND                            ;vector base + $1A
001C6C 0F5C6C 00                      ISR_RES1C               BGND                            ;vector base + $1C
001C6D 0F5C6D 00                      ISR_RES1E               BGND                            ;vector base + $1E
001C6E 0F5C6E 00                      ISR_RES20               BGND                            ;vector base + $20
001C6F 0F5C6F 00                      ISR_RES22               BGND                            ;vector base + $22
001C70 0F5C70 00                      ISR_RES24               BGND                            ;vector base + $24
001C71 0F5C71 00                      ISR_RES26               BGND                            ;vector base + $26
001C72 0F5C72 00                      ISR_RES28               BGND                            ;vector base + $28
001C73 0F5C73 00                      ISR_RES2A               BGND                            ;vector base + $2A
001C74 0F5C74 00                      ISR_RES2C               BGND                            ;vector base + $2C
001C75 0F5C75 00                      ISR_RES2E               BGND                            ;vector base + $2E
001C76 0F5C76 00                      ISR_RES30               BGND                            ;vector base + $30
001C77 0F5C77 00                      ISR_RES32               BGND                            ;vector base + $32
001C78 0F5C78 00                      ISR_RES34               BGND                            ;vector base + $34
001C79 0F5C79 00                      ISR_RES36               BGND                            ;vector base + $36
001C7A 0F5C7A 00                      ISR_RES38               BGND                            ;vector base + $38
001C7B 0F5C7B 00                      ISR_RES3A               BGND                            ;vector base + $3A
001C7C 0F5C7C 00                      ISR_ATD1COMP            BGND                            ;vector base + $3C
001C7D 0F5C7D 00                      ISR_ATD0COMP            BGND                            ;vector base + $3E
001C7E 0F5C7E 00                      ISR_TIM_PAIE            BGND                            ;vector base + $40
001C7F 0F5C7F 00                      ISR_TIM_PAOV            BGND                            ;vector base + $42
001C80 0F5C80 00                      ISR_TIM_TOV             BGND                            ;vector base + $44
001C81 0F5C81 00                      ISR_TIM_TC7             BGND                            ;vector base + $46
001C82 0F5C82 00                      ISR_TIM_TC6             BGND                            ;vector base + $48
001C83 0F5C83 00                      ISR_TIM_TC5             BGND                            ;vector base + $4A
001C84 0F5C84 00                      ISR_TIM_TC4             BGND                            ;vector base + $4C
001C85 0F5C85 00                      ISR_TIM_TC3             BGND                            ;vector base + $4E
001C86 0F5C86 00                      ISR_TIM_TC2             BGND                            ;vector base + $50
001C87 0F5C87 00                      ISR_TIM_TC1             BGND                            ;vector base + $52
001C88 0F5C88 00                      ISR_TIM_TC0             BGND                            ;vector base + $54
001C89 0F5C89 00                      ISR_SCI7                BGND                            ;vector base + $56
001C8A 0F5C8A 00                      ISR_PITCH7              BGND                            ;vector base + $58
001C8B 0F5C8B 00                      ISR_PITCH6              BGND                            ;vector base + $5A
001C8C 0F5C8C 00                      ISR_PITCH5              BGND                            ;vector base + $5C
001C8D 0F5C8D 00                      ISR_PITCH4              BGND                            ;vector base + $5E
001C8E 0F5C8E 00                      ISR_RES60               BGND                            ;vector base + $60
001C8F 0F5C8F 00                      ISR_RES62               BGND                            ;vector base + $62
001C90 0F5C90 00                      ISR_XGSWT7              BGND                            ;vector base + $64
001C91 0F5C91 00                      ISR_XGSWT6              BGND                            ;vector base + $66
001C92 0F5C92 00                      ISR_XGSWT5              BGND                            ;vector base + $68
001C93 0F5C93 00                      ISR_XGSWT4              BGND                            ;vector base + $6A
001C94 0F5C94 00                      ISR_XGSWT3              BGND                            ;vector base + $6C
001C95 0F5C95 00                      ISR_XGSWT2              BGND                            ;vector base + $6E
001C96 0F5C96 00                      ISR_XGSWT1              BGND                            ;vector base + $70
001C97 0F5C97 00                      ISR_XGSWT0              BGND                            ;vector base + $72
001C98 0F5C98 00                      ISR_PITCH3              BGND                            ;vector base + $74
001C99 0F5C99 00                      ISR_PITCH2              BGND                            ;vector base + $76
001C9A 0F5C9A 00                      ISR_PITCH1              BGND                            ;vector base + $78
001C9B 0F5C9B 00                      ISR_PITCH0              BGND                            ;vector base + $7A
001C9C 0F5C9C 00                      ISR_HT                  BGND                            ;vector base + $7C
001C9D 0F5C9D 00                      ISR_API                 BGND                            ;vector base + $7E
001C9E 0F5C9E 00                      ISR_LVI                 BGND                            ;vector base + $80
001C9F 0F5C9F 00                      ISR_IIC1                BGND                            ;vector base + $82
001CA0 0F5CA0 00                      ISR_SCI5                BGND                            ;vector base + $84
001CA1 0F5CA1 00                      ISR_SCI4                BGND                            ;vector base + $86
001CA2 0F5CA2 00                      ISR_SCI3                BGND                            ;vector base + $88
001CA3 0F5CA3 00                      ISR_SCI2                BGND                            ;vector base + $8A
001CA4 0F5CA4 00                      ISR_PWMSDN              BGND                            ;vector base + $8C
001CA5 0F5CA5 00                      ISR_PORTP               BGND                            ;vector base + $8E
001CA6 0F5CA6 00                      ISR_CAN4TX              BGND                            ;vector base + $90
001CA7 0F5CA7 00                      ISR_CAN4RX              BGND                            ;vector base + $92
001CA8 0F5CA8 00                      ISR_CAN4ERR             BGND                            ;vector base + $94
001CA9 0F5CA9 00                      ISR_CAN4WUP             BGND                            ;vector base + $96
001CAA 0F5CAA 00                      ISR_CAN3TX              BGND                            ;vector base + $98
001CAB 0F5CAB 00                      ISR_CAN3RX              BGND                            ;vector base + $9A
001CAC 0F5CAC 00                      ISR_CAN3ERR             BGND                            ;vector base + $9C
001CAD 0F5CAD 00                      ISR_CAN3WUP             BGND                            ;vector base + $9E
001CAE 0F5CAE 00                      ISR_CAN2TX              BGND                            ;vector base + $A0
001CAF 0F5CAF 00                      ISR_CAN2RX              BGND                            ;vector base + $A2
001CB0 0F5CB0 00                      ISR_CAN2ERR             BGND                            ;vector base + $A4
001CB1 0F5CB1 00                      ISR_CAN2WUP             BGND                            ;vector base + $A6
001CB2 0F5CB2 00                      ISR_CAN1TX              BGND                            ;vector base + $A8
001CB3 0F5CB3 00                      ISR_CAN1RX              BGND                            ;vector base + $AA
001CB4 0F5CB4 00                      ISR_CAN1ERR             BGND                            ;vector base + $AC
001CB5 0F5CB5 00                      ISR_CAN1WUP             BGND                            ;vector base + $AE
001CB6 0F5CB6 00                      ISR_CAN0TX              BGND                            ;vector base + $A0
001CB7 0F5CB7 00                      ISR_CAN0RX              BGND                            ;vector base + $B2
001CB8 0F5CB8 00                      ISR_CAN0ERR             BGND                            ;vector base + $B4
001CB9 0F5CB9 00                      ISR_CAN0WUP             BGND                            ;vector base + $B6
001CBA 0F5CBA 00                      ISR_FLASH               BGND                            ;vector base + $B8
001CBB 0F5CBB 00                      ISR_FLASHFLT            BGND                            ;vector base + $BA
001CBC 0F5CBC 00                      ISR_SPI2                BGND                            ;vector base + $BC
001CBD 0F5CBD 00                      ISR_SPI1                BGND                            ;vector base + $BE
001CBE 0F5CBE 00                      ISR_IIC0                BGND                            ;vector base + $C0
001CBF 0F5CBF 00                      ISR_SCI6                BGND                            ;vector base + $C2
001CC0 0F5CC0 00                      ISR_SCM                 BGND                            ;vector base + $C4
001CC1 0F5CC1 -> $1471                ISR_PLLLOCK             EQU     CLOCK_ISR
001CC1 0F5CC1 00                      ISR_ECT_PBOV            BGND                            ;vector base + $C8
001CC2 0F5CC2 00                      ISR_ECT_MODCNT          BGND                            ;vector base + $CA
001CC3 0F5CC3 00                      ISR_PORTH               BGND                            ;vector base + $CC
001CC4 0F5CC4 00                      ISR_PORTJ               BGND                            ;vector base + $CC
001CC5 0F5CC5 00                      ISR_ATD1                BGND                            ;vector base + $D0
001CC6 0F5CC6 00                      ISR_ATD0                BGND                            ;vector base + $D2
001CC7 0F5CC7 00                      ISR_SCI1                BGND                            ;vector base + $D4
001CC8 0F5CC8 -> $17EF                ISR_SCI0                EQU     SCI_ISR_RXTX
001CC8 0F5CC8 00                      ISR_SPI0                BGND                            ;vector base + $D8
001CC9 0F5CC9 00                      ISR_ECT_PAIE            BGND                            ;vector base + $DA
001CCA 0F5CCA 00                      ISR_ECT_PAOV            BGND                            ;vector base + $DC
001CCB 0F5CCB 00                      ISR_ECT_TOV             BGND                            ;vector base + $DE
001CCC 0F5CCC 00                      ISR_ECT_TC7             BGND                            ;vector base + $E0
001CCD 0F5CCD 00                      ISR_ECT_TC6             BGND                            ;vector base + $E2
001CCE 0F5CCE 00                      ISR_ECT_TC5             BGND                            ;vector base + $E4
001CCF 0F5CCF 00                      ISR_ECT_TC4             BGND                            ;vector base + $E6
001CD0 0F5CD0 -> $170E                ISR_ECT_TC3             EQU     SCI_ISR_DELAY
001CD0 0F5CD0 00                      ISR_ECT_TC2             BGND                            ;vector base + $EA
001CD1 0F5CD1 00                      ISR_ECT_TC1             BGND                            ;vector base + $EC
001CD2 0F5CD2 00                      ISR_ECT_TC0             BGND                            ;vector base + $EE
001CD3 0F5CD3 00                      ISR_RTI                 BGND                            ;vector base + $F0
001CD4 0F5CD4 00                      ISR_IRQ                 BGND                            ;vector base + $F2
001CD5 0F5CD5 00                      ISR_XIRQ                BGND                            ;vector base + $F4
001CD6 0F5CD6 00                      ISR_SWI                 BGND                            ;vector base + $F6
001CD7 0F5CD7 00                      ISR_TRAP                BGND                            ;vector base + $F8
001CD8 0F5CD8 -> $1CD8                VECTAB_TABS_END         EQU     *
001CD8 0F5CD8 -> $F5CD8               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12XEP100 Vector Table                                                      #
                                      ;###############################################################################
007F10 0FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN
007F10 0FFF10 1C 66                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $10
007F12 0FFF12 1C 67                   VEC_SYS                 DW      ISR_SYS                 ;vector base + $12
007F14 0FFF14 1C 68                   VEC_MPU                 DW      ISR_MPU                 ;vector base + $14
007F16 0FFF16 1C 69                   VEC_XGSWE               DW      ISR_XGSWE               ;vector base + $16
007F18 0FFF18 1C 6A                   VEC_RES18               DW      ISR_RES18               ;vector base + $18
007F1A 0FFF1A 1C 6B                   VEC_RES1A               DW      ISR_RES1A               ;vector base + $1A
007F1C 0FFF1C 1C 6C                   VEC_RES1C               DW      ISR_RES1C               ;vector base + $1C
007F1E 0FFF1E 1C 6D                   VEC_RES1E               DW      ISR_RES1E               ;vector base + $1E
007F20 0FFF20 1C 6E                   VEC_RES20               DW      ISR_RES20               ;vector base + $20
007F22 0FFF22 1C 6F                   VEC_RES22               DW      ISR_RES22               ;vector base + $22
007F24 0FFF24 1C 70                   VEC_RES24               DW      ISR_RES24               ;vector base + $24
007F26 0FFF26 1C 71                   VEC_RES26               DW      ISR_RES26               ;vector base + $26
007F28 0FFF28 1C 72                   VEC_RES28               DW      ISR_RES28               ;vector base + $28
007F2A 0FFF2A 1C 73                   VEC_RES2A               DW      ISR_RES2A               ;vector base + $2A
007F2C 0FFF2C 1C 74                   VEC_RES2C               DW      ISR_RES2C               ;vector base + $2C
007F2E 0FFF2E 1C 75                   VEC_RES2E               DW      ISR_RES2E               ;vector base + $2E
007F30 0FFF30 1C 76                   VEC_RES30               DW      ISR_RES30               ;vector base + $30
007F32 0FFF32 1C 77                   VEC_RES32               DW      ISR_RES32               ;vector base + $32
007F34 0FFF34 1C 78                   VEC_RES34               DW      ISR_RES34               ;vector base + $34
007F36 0FFF36 1C 79                   VEC_RES36               DW      ISR_RES36               ;vector base + $36
007F38 0FFF38 1C 7A                   VEC_RES38               DW      ISR_RES38               ;vector base + $38
007F3A 0FFF3A 1C 7B                   VEC_RES3A               DW      ISR_RES3A               ;vector base + $3A
007F3C 0FFF3C 1C 7C                   VEC_ATD1COMP            DW      ISR_ATD1COMP            ;vector base + $3C
007F3E 0FFF3E 1C 7D                   VEC_ATD0COMP            DW      ISR_ATD0COMP            ;vector base + $3E
007F40 0FFF40 1C 7E                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $40
007F42 0FFF42 1C 7F                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $42
007F44 0FFF44 1C 80                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $44
007F46 0FFF46 1C 81                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $46
007F48 0FFF48 1C 82                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $48
007F4A 0FFF4A 1C 83                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $4A
007F4C 0FFF4C 1C 84                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $4C
007F4E 0FFF4E 1C 85                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $4E
007F50 0FFF50 1C 86                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $50
007F52 0FFF52 1C 87                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $52
007F54 0FFF54 1C 88                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $54
007F56 0FFF56 1C 89                   VEC_SCI7                DW      ISR_SCI7                ;vector base + $56
007F58 0FFF58 1C 8A                   VEC_PITCH7              DW      ISR_PITCH7              ;vector base + $58
007F5A 0FFF5A 1C 8B                   VEC_PITCH6              DW      ISR_PITCH6              ;vector base + $5A
007F5C 0FFF5C 1C 8C                   VEC_PITCH5              DW      ISR_PITCH5              ;vector base + $5C
007F5E 0FFF5E 1C 8D                   VEC_PITCH4              DW      ISR_PITCH4              ;vector base + $5E
007F60 0FFF60 1C 8E                   VEC_RES60               DW      ISR_RES60               ;vector base + $60
007F62 0FFF62 1C 8F                   VEC_RES62               DW      ISR_RES62               ;vector base + $62
007F64 0FFF64 1C 90                   VEC_XGSWT7              DW      ISR_XGSWT7              ;vector base + $64
007F66 0FFF66 1C 91                   VEC_XGSWT6              DW      ISR_XGSWT6              ;vector base + $66
007F68 0FFF68 1C 92                   VEC_XGSWT5              DW      ISR_XGSWT5              ;vector base + $68
007F6A 0FFF6A 1C 93                   VEC_XGSWT4              DW      ISR_XGSWT4              ;vector base + $6A
007F6C 0FFF6C 1C 94                   VEC_XGSWT3              DW      ISR_XGSWT3              ;vector base + $6C
007F6E 0FFF6E 1C 95                   VEC_XGSWT2              DW      ISR_XGSWT2              ;vector base + $6E
007F70 0FFF70 1C 96                   VEC_XGSWT1              DW      ISR_XGSWT1              ;vector base + $70
007F72 0FFF72 1C 97                   VEC_XGSWT0              DW      ISR_XGSWT0              ;vector base + $72
007F74 0FFF74 1C 98                   VEC_PITCH3              DW      ISR_PITCH3              ;vector base + $74
007F76 0FFF76 1C 99                   VEC_PITCH2              DW      ISR_PITCH2              ;vector base + $76
007F78 0FFF78 1C 9A                   VEC_PITCH1              DW      ISR_PITCH1              ;vector base + $78
007F7A 0FFF7A 1C 9B                   VEC_PITCH0              DW      ISR_PITCH0              ;vector base + $7A
007F7C 0FFF7C 1C 9C                   VEC_HT                  DW      ISR_HT                  ;vector base + $7C
007F7E 0FFF7E 1C 9D                   VEC_API                 DW      ISR_API                 ;vector base + $7E
007F80 0FFF80 1C 9E                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $80
007F82 0FFF82 1C 9F                   VEC_IIC1                DW      ISR_IIC1                ;vector base + $82
007F84 0FFF84 1C A0                   VEC_SCI5                DW      ISR_SCI5                ;vector base + $84
007F86 0FFF86 1C A1                   VEC_SCI4                DW      ISR_SCI4                ;vector base + $86
007F88 0FFF88 1C A2                   VEC_SCI3                DW      ISR_SCI3                ;vector base + $88
007F8A 0FFF8A 1C A3                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $8A
007F8C 0FFF8C 1C A4                   VEC_PWMSDN              DW      ISR_PWMSDN              ;vector base + $8C
007F8E 0FFF8E 1C A5                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
007F90 0FFF90 1C A6                   VEC_CAN4TX              DW      ISR_CAN4TX              ;vector base + $90
007F92 0FFF92 1C A7                   VEC_CAN4RX              DW      ISR_CAN4RX              ;vector base + $92
007F94 0FFF94 1C A8                   VEC_CAN4ERR             DW      ISR_CAN4ERR             ;vector base + $94
007F96 0FFF96 1C A9                   VEC_CAN4WUP             DW      ISR_CAN4WUP             ;vector base + $96
007F98 0FFF98 1C AA                   VEC_CAN3TX              DW      ISR_CAN3TX              ;vector base + $98
007F9A 0FFF9A 1C AB                   VEC_CAN3RX              DW      ISR_CAN3RX              ;vector base + $9A
007F9C 0FFF9C 1C AC                   VEC_CAN3ERR             DW      ISR_CAN3ERR             ;vector base + $9C
007F9E 0FFF9E 1C AD                   VEC_CAN3WUP             DW      ISR_CAN3WUP             ;vector base + $9E
007FA0 0FFFA0 1C AE                   VEC_CAN2TX              DW      ISR_CAN2TX              ;vector base + $A0
007FA2 0FFFA2 1C AF                   VEC_CAN2RX              DW      ISR_CAN2RX              ;vector base + $A2
007FA4 0FFFA4 1C B0                   VEC_CAN2ERR             DW      ISR_CAN2ERR             ;vector base + $A4
007FA6 0FFFA6 1C B1                   VEC_CAN2WUP             DW      ISR_CAN2WUP             ;vector base + $A6
007FA8 0FFFA8 1C B2                   VEC_CAN1TX              DW      ISR_CAN1TX              ;vector base + $A8
007FAA 0FFFAA 1C B3                   VEC_CAN1RX              DW      ISR_CAN1RX              ;vector base + $AA
007FAC 0FFFAC 1C B4                   VEC_CAN1ERR             DW      ISR_CAN1ERR             ;vector base + $AC
007FAE 0FFFAE 1C B5                   VEC_CAN1WUP             DW      ISR_CAN1WUP             ;vector base + $AE
007FB0 0FFFB0 1C B6                   VEC_CAN0TX              DW      ISR_CAN0TX              ;vector base + $A0
007FB2 0FFFB2 1C B7                   VEC_CAN0RX              DW      ISR_CAN0RX              ;vector base + $B2
007FB4 0FFFB4 1C B8                   VEC_CAN0ERR             DW      ISR_CAN0ERR             ;vector base + $B4
007FB6 0FFFB6 1C B9                   VEC_CAN0WUP             DW      ISR_CAN0WUP             ;vector base + $B6
007FB8 0FFFB8 1C BA                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
007FBA 0FFFBA 1C BB                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
007FBC 0FFFBC 1C BC                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
007FBE 0FFFBE 1C BD                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
007FC0 0FFFC0 1C BE                   VEC_IIC0                DW      ISR_IIC0                ;vector base + $C0
007FC2 0FFFC2 1C BF                   VEC_SCI6                DW      ISR_SCI6                ;vector base + $C2
007FC4 0FFFC4 1C C0                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
007FC6 0FFFC6 14 71                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
007FC8 0FFFC8 1C C1                   VEC_ECT_PBOV            DW      ISR_ECT_PBOV            ;vector base + $C8
007FCA 0FFFCA 1C C2                   VEC_ECT_MODCNT          DW      ISR_ECT_MODCNT          ;vector base + $CA
007FCC 0FFFCC 1C C3                   VEC_PORTH               DW      ISR_PORTH               ;vector base + $CC
007FCE 0FFFCE 1C C4                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CE
007FD0 0FFFD0 1C C5                   VEC_ATD1                DW      ISR_ATD1                ;vector base + $D0
007FD2 0FFFD2 1C C6                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
007FD4 0FFFD4 1C C7                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
007FD6 0FFFD6 17 EF                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
007FD8 0FFFD8 1C C8                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
007FDA 0FFFDA 1C C9                   VEC_ECT_PAIE            DW      ISR_ECT_PAIE            ;vector base + $DA
007FDC 0FFFDC 1C CA                   VEC_ECT_PAOV            DW      ISR_ECT_PAOV            ;vector base + $DC
007FDE 0FFFDE 1C CB                   VEC_ECT_TOV             DW      ISR_ECT_TOV             ;vector base + $DE
007FE0 0FFFE0 1C CC                   VEC_ECT_TC7             DW      ISR_ECT_TC7             ;vector base + $E0
007FE2 0FFFE2 1C CD                   VEC_ECT_TC6             DW      ISR_ECT_TC6             ;vector base + $E2
007FE4 0FFFE4 1C CE                   VEC_ECT_TC5             DW      ISR_ECT_TC5             ;vector base + $E4
007FE6 0FFFE6 1C CF                   VEC_ECT_TC4             DW      ISR_ECT_TC4             ;vector base + $E6
007FE8 0FFFE8 17 0E                   VEC_ECT_TC3             DW      ISR_ECT_TC3             ;vector base + $E8
007FEA 0FFFEA 1C D0                   VEC_ECT_TC2             DW      ISR_ECT_TC2             ;vector base + $EA
007FEC 0FFFEC 1C D1                   VEC_ECT_TC1             DW      ISR_ECT_TC1             ;vector base + $EC
007FEE 0FFFEE 1C D2                   VEC_ECT_TC0             DW      ISR_ECT_TC0             ;vector base + $EE
007FF0 0FFFF0 1C D3                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
007FF2 0FFFF2 1C D4                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
007FF4 0FFFF4 1C D5                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
007FF6 0FFFF6 1C D6                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
007FF8 0FFFF8 1C D7                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
007FFA 0FFFFA 10 00                   VEC_RESET_COP           DW      RESET_COP_ENTRY         ;vector base + $FA
007FFC 0FFFFC 19 BC                   VEC_RESET_CM            DW      RESET_CM_ENTRY          ;vector base + $FC
007FFE 0FFFFE 19 AD                   VEC_RESET_EXT           DW      RESET_EXT_ENTRY         ;vector base + $FE
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AE4 0F5AE4                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
                                                              ;Line counter (count down)
001AE4 0F5AE4                         DEMO_LINE_COUNT         DS      1
001AE5 0F5AE5 -> $1AE5                DEMO_VARS_END           EQU     *
001AE5 0F5AE5 -> $F5AE5               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001000 0F5000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
001000 0F5000 MACRO                                           BASE_INIT
                                      ;#Initialization                                                                 (BASE_INIT)
                                      ;---------------                                                                 (BASE_INIT)
001000 0F5000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
001000 0F5000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
001002 0F5002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
001004 0F5004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
001006 0F5006 18 03 FF FF 00 8C                       MOVW    #$FFFF, ATD1DIENH       ;switch unused pins to digital   (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, ATD0DIENH                                        (BASE_INIT/GPIO_INIT)
00100C 0F500C 18 03 FF FF 02 7E                       MOVW    #%1111_1111_1111_1111, PER0AD1          ;enable pull-up on all unused pins (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #%0000_0000_0000_0000, PER0AD0                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A & B                                                     (BASE_INIT/GPIO_INIT)
001012 0F5012 18 03 DD 9F 00 0C                       MOVW    #(((PUPKE|BKPUE|PUPEE|PUPDE|PUPCE|PUPAE)<<8)|RDPK|RDPE|RDPD|RDPC|PUPBE|PUPAE), PUCR ;enable pull-ups and reduced drive (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                                            (BASE_INIT/GPIO_INIT)
001018 0F5018 18 03 00 FF 00 02                       MOVW    #$00FF, DDRA                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port C & D                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PORTE                                              (BASE_INIT/GPIO_INIT)
00101E 0F501E 79 00 1E                                CLR     IRQCR           ;disable IRQ                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port F                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRF                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERF                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port H                                                         (BASE_INIT/GPIO_INIT)
001021 0F5021 18 0B EE 02 62                          MOVB    #$EE, DDRH                                               (BASE_INIT/GPIO_INIT)
001026 0F5026 18 03 11 11 02 64                       MOVW    #$1111, PERH                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
00102C 0F502C 18 0B 02 02 68                          MOVB    #$02, PTJ                                                (BASE_INIT/GPIO_INIT)
001031 0F5031 18 0B 02 02 6A                          MOVB    #$02, DDRJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FD, PERJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port K                                                         (BASE_INIT/GPIO_INIT)
001036 0F5036 18 0B FD 00 33                          MOVB    #$FD, DDRK                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
00103B 0F503B 18 0B 8A 02 50                          MOVB    #$8A, PTM                                                (BASE_INIT/GPIO_INIT)
001040 0F5040 18 0B 8A 02 52                          MOVB    #$8A, DDRM                                               (BASE_INIT/GPIO_INIT)
001045 0F5045 18 0B 75 02 54                          MOVB    #$75, PERM                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port L                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRL                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   $#FF00, PERL                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
00104A 0F504A 18 0B FF 02 5A                          MOVB    #$FF, DDRP                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port R                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRR                                                     (BASE_INIT/GPIO_INIT)
00104F 0F504F 18 0B FF 03 6C                          MOVB    #$FF, PERR                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSR                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
001054 0F5054 18 0B 8A 02 48                          MOVB    #$8A, PTS                                                (BASE_INIT/GPIO_INIT)
001059 0F5059 18 0B EA 02 4A                          MOVB    #$EA, DDRS                                               (BASE_INIT/GPIO_INIT)
00105E 0F505E 18 0B 10 02 4D                          MOVB    #$10, PPSS                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
001063 0F5063 18 03 05 05 02 42                       MOVW    #$0505, DDRT                                             (BASE_INIT/GPIO_INIT)
001069 0F5069 18 03 FA FA 02 44                       MOVW    #$FAFA, PERT                                             (BASE_INIT/GPIO_INIT)
00106F 0F506F MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00106F 0F506F 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
001074 0F5074 MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/CLOCK_INIT)
001074 0F5074 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
001079 0F5079 18 03 D8 07 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
00107F 0F507F 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
001085 0F5085 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Capture and clear CRG/CPMU flags                        (BASE_INIT/RESET_INIT)
001085 0F5085 96 37                                           LDAA    CRGFLG                  ;capture flags           (BASE_INIT/RESET_INIT)
001087 0F5087 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG            ;clear flags             (BASE_INIT/RESET_INIT)
                                                              ;Check for low voltage reset (flags in A)                (BASE_INIT/RESET_INIT)
00108C 0F508C CD 1C 2C                                        LDY     #RESET_MSG_POWFAIL                               (BASE_INIT/RESET_INIT)
00108F 0F508F 85 20                                           BITA    #LVRF                                            (BASE_INIT/RESET_INIT)
001091 0F5091 26 4E                                           BNE     RESET_INIT_4            ;low voltage reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for illegal address reset (flags in A)            (BASE_INIT/RESET_INIT)
001093 0F5093 CD 1C 38                                        LDY     #RESET_MSG_ILLADDR                               (BASE_INIT/RESET_INIT)
001096 0F5096 85 04                                           BITA    #ILAF                                            (BASE_INIT/RESET_INIT)
001098 0F5098 26 47                                           BNE     RESET_INIT_4            ;illegal address reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for power-on or external pin reset (flags in A)   (BASE_INIT/RESET_INIT)
00109A 0F509A FD 1B 3C                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/RESET_INIT)
00109D 0F509D 27 45                                           BEQ     RESET_INIT_5            ;power-on or external pin reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (string in Y)           (BASE_INIT/RESET_INIT)
00109F 0F509F 87                                              CLRA                            ;initialize C0           (BASE_INIT/RESET_INIT)
0010A0 0F50A0 CE 3F 00                                        LDX     #((RESET_MSG_LENGTH-1)<<8);initialize char limit and C1 (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (striing pointer in Y, char limit:C1 in X, C0 in A) (BASE_INIT/RESET_INIT)
0010A3 0F50A3 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0010A5 0F50A5 2B 1F                                           BMI     RESET_INIT_2            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010A7 0F50A7 C1 20                   RESET_INIT_1            CMPB    #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0010A9 0F50A9 25 33                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010AB 0F50AB C1 7E                                           CMPB    #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0010AD 0F50AD 22 2F                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010AF 0F50AF 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0010B1 0F50B1 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0010B3 0F50B3 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0010B5 0F50B5 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
0010B7 0F50B7 B7 81                                           EXG     A, B                    ;C0:C1  -> D             (BASE_INIT/RESET_INIT)
0010B9 0F50B9 B7 D4                                           EXG     X, D                    ;C0:C1  -> X, char limit -> A (BASE_INIT/RESET_INIT)
0010BB 0F50BB B7 51                                           TFR     X, B                    ;char limit:C1 -> D      (BASE_INIT/RESET_INIT)
                                                              ;Check character limit ((string pointer in Y, C0:C1 in X, char limit:C1 in D) (BASE_INIT/RESET_INIT)
0010BD 0F50BD 04 00 1E                                        DBEQ    A, RESET_INIT_3         ;invalid message         (BASE_INIT/RESET_INIT)
0010C0 0F50C0 B7 D4                                           EXG     X, D                    ;C0:C1  -> D, char limit:C1 ->  X (BASE_INIT/RESET_INIT)
0010C2 0F50C2 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0010C4 0F50C4 2A E1                                           BPL     RESET_INIT_1            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;String termination found (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010C6 0F50C6                         RESET_INIT_2            ;ANDB   #$7F                    ;ignore termination      (BASE_INIT/RESET_INIT)
                                                              ;;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BLO    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BHI    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010C6 0F50C6 C1 A0                                           CMPB    #$A0            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0010C8 0F50C8 25 14                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010CA 0F50CA C1 FE                                           CMPB    #$FE            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0010CC 0F50CC 22 10                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010CE 0F50CE 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0010D0 0F50D0 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0010D2 0F50D2 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0010D4 0F50D4 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
                                                              ;Check Fletcher's checksum (string in pointer Y, C1 in A, C0 in B) (BASE_INIT/RESET_INIT)
0010D6 0F50D6 A1 70                                           CMPA    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0010D8 0F50D8 26 04                                           BNE     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010DA 0F50DA E1 70                                           CMPB    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0010DC 0F50DC 27 06                                           BEQ     RESET_INIT_5            ;valid message           (BASE_INIT/RESET_INIT)
                                                              ;Invalid error message                                   (BASE_INIT/RESET_INIT)
0010DE 0F50DE CD 1C 46                RESET_INIT_3            LDY     #RESET_MSG_UNKNOWN      ;unknown error           (BASE_INIT/RESET_INIT)
                                                              ;Update error message                                    (BASE_INIT/RESET_INIT)
0010E1 0F50E1 7D 1B 3C                RESET_INIT_4            STY     RESET_MSG_PTR           ;set error message       (BASE_INIT/RESET_INIT)
                                                              ;Done                                                    (BASE_INIT/RESET_INIT)
0010E4 0F50E4 -> $10E4                RESET_INIT_5            EQU     *                                                (BASE_INIT/RESET_INIT)
0010E4 0F50E4 MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup MPU                                               (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 0: Register space                   -> read and write (BASE_INIT/MMAP_INIT)
0010E4 0F50E4 79 01 19                                        CLR     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010E7 0F50E7 18 03 C0 00 01 1A                               MOVW    #((MMAP_D_REG_BYTE0<<8)|(MMAP_D_REG_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010ED 0F50ED 18 03 00 40 01 1C                               MOVW    #((MMAP_D_REG_BYTE2<<8)|(MMAP_D_REG_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010F3 0F50F3 18 03 00 FF 01 1E                               MOVW    #((MMAP_D_REG_BYTE4<<8)|(MMAP_D_REG_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: Unimplemented RAM                -> read only (BASE_INIT/MMAP_INIT)
0010F9 0F50F9 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010FC 0F50FC 18 03 C0 01 01 1A                               MOVW    #((MMAP_D_URAM_BYTE0<<8)|(MMAP_D_URAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001102 0F5102 18 03 00 C1 01 1C                               MOVW    #((MMAP_D_URAM_BYTE2<<8)|(MMAP_D_URAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001108 0F5108 18 03 EF FF 01 1E                               MOVW    #((MMAP_D_URAM_BYTE4<<8)|(MMAP_D_URAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: RAM                              -> read, write, and execute (BASE_INIT/MMAP_INIT)
00110E 0F510E 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001111 0F5111 18 03 C1 F0 01 1A                               MOVW    #((MMAP_D_RAM_BYTE0<<8)|(MMAP_D_RAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001117 0F5117 18 03 00 01 01 1C                               MOVW    #((MMAP_D_RAM_BYTE2<<8)|(MMAP_D_RAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00111D 0F511D 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_RAM_BYTE4<<8)|(MMAP_D_RAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  Unimplemented EERAM             -> read only (BASE_INIT/MMAP_INIT)
001123 0F5123 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001126 0F5126 18 03 C2 00 01 1A                               MOVW    #((MMAP_D_UEERAM_BYTE0<<8)|(MMAP_D_UEERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00112C 0F512C 18 03 00 C2 01 1C                               MOVW    #((MMAP_D_UEERAM_BYTE2<<8)|(MMAP_D_UEERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001132 0F5132 18 03 7D FF 01 1E                               MOVW    #((MMAP_D_UEERAM_BYTE4<<8)|(MMAP_D_UEERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  EERAM                           -> read, write, and execute (BASE_INIT/MMAP_INIT)
001138 0F5138 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00113B 0F513B 18 03 C2 7E 01 1A                               MOVW    #((MMAP_D_EERAM_BYTE0<<8)|(MMAP_D_EERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001141 0F5141 18 03 00 02 01 1C                               MOVW    #((MMAP_D_EERAM_BYTE2<<8)|(MMAP_D_EERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001147 0F5147 18 03 7F FF 01 1E                               MOVW    #((MMAP_D_EERAM_BYTE4<<8)|(MMAP_D_EERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 3:  Unimplemented Flash             -> read only (BASE_INIT/MMAP_INIT)
00114D 0F514D 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001150 0F5150 18 03 C2 80 01 1A                               MOVW    #((MMAP_D_UFLASH_BYTE0<<8)|(MMAP_D_UFLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001156 0F5156 18 03 00 CF 01 1C                               MOVW    #((MMAP_D_UFLASH_BYTE2<<8)|(MMAP_D_UFLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00115C 0F515C 18 03 0F FF 01 1E                               MOVW    #((MMAP_D_UFLASH_BYTE4<<8)|(MMAP_D_UFLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 4:  Unimplemented Flash             -> read and execute (BASE_INIT/MMAP_INIT)
001162 0F5162 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001165 0F5165 18 03 CF 10 01 1A                               MOVW    #((MMAP_D_FLASH_BYTE0<<8)|(MMAP_D_FLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00116B 0F516B 18 03 00 8F 01 1C                               MOVW    #((MMAP_D_FLASH_BYTE2<<8)|(MMAP_D_FLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001171 0F5171 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_FLASH_BYTE4<<8)|(MMAP_D_FLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Enable descriptors in supervisor mode                   (BASE_INIT/MMAP_INIT)
001177 0F5177 18 0B 80 01 19                                  MOVB    #SVSEN, MPUSEL                                   (BASE_INIT/MMAP_INIT)
                                      ;#ifndef MMAP_RAM                       ;Don't write to RPAGE while executing code from RAM (BASE_INIT/MMAP_INIT)
                                      ;                       ;Initialize RPAGE                                        (BASE_INIT/MMAP_INIT)
00117C 0F517C 18 0B F9 00 16                                  MOVB    #(MMAP_RAM_START_LIN>>12), RPAGE                 (BASE_INIT/MMAP_INIT)
001181 0F5181 MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (BASE_INIT/VECTAB_INIT)
001181 0F5181 18 0B 7F 01 21                                  MOVB    #(VECTAB_START>>8), IVBR                         (BASE_INIT/VECTAB_INIT)
                                                              ;Disable XGATE interrupts                                (BASE_INIT/VECTAB_INIT)
001186 0F5186 79 01 26                                        CLR     XGPRIO                                           (BASE_INIT/VECTAB_INIT)
001189 0F5189 MACRO                                           SSTACK_INIT                                              (BASE_INIT)
001189 0F5189 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
001189 0F5189 CF 1B 09                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
00118C 0F518C 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
00118E 0F518E MACRO                                           TIM_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TIM_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;      D S S S                 ;  0=input capture (BASE_INIT/TIM_INIT)
                                                                       ;      E C C C                 ;  1=output compare (BASE_INIT/TIM_INIT)
                                                                       ;      L I I I                                  (BASE_INIT/TIM_INIT)
                                                                       ;      A B B B                                  (BASE_INIT/TIM_INIT)
                                                                       ;      Y D D D                                  (BASE_INIT/TIM_INIT)
                                                                       ;        T N P                                  (BASE_INIT/TIM_INIT)
                                                                       ;        O E E                                  (BASE_INIT/TIM_INIT)
                                                              ;CFORC                                                   (BASE_INIT/TIM_INIT)
                                                              ;OC7M                                                    (BASE_INIT/TIM_INIT)
                                                                       ;7 6 5 4 3 2 1 0                                (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;      D S S S S                                (BASE_INIT/TIM_INIT)
                                                                       ;      E C C C C                                (BASE_INIT/TIM_INIT)
                                                                       ;      L I I I I                                (BASE_INIT/TIM_INIT)
                                                                       ;      A T B B B                                (BASE_INIT/TIM_INIT)
                                                                       ;      Y O D D D                                (BASE_INIT/TIM_INIT)
                                                                       ;          T N P                                (BASE_INIT/TIM_INIT)
                                                                       ;          O E E                                (BASE_INIT/TIM_INIT)
                                                              ;TCNT                                                    (BASE_INIT/TIM_INIT)
00118E 0F518E 18 0B 01 00 4D                                  MOVB    #$01, TSCR2                     ;run on half bus frequency (BASE_INIT/TIM_INIT)
001193 0F5193 MACRO                                           STRING_INIT                                              (BASE_INIT)
001193 0F5193 MACRO                                           NUM_INIT                                                 (BASE_INIT)
001193 0F5193 MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                      ;#--------------                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
001193 0F5193 4C 40 08                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
001196 0F5196 FC 1B 36                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
001199 0F5199 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
00119B 0F519B CE 0C CC                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
00119E 0F519E 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
0011A0 0F51A0 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
0011A3 0F51A3 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
0011A5 0F51A5 CD 1B F6                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
0011A8 0F51A8 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
0011AA 0F51AA 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
0011AC 0F51AC 8D 1C 06                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
0011AF 0F51AF 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
0011B1 0F51B1 CE 01 46                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
0011B4 0F51B4 18 03 4B C8 1B 36                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
0011BA 0F51BA 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format                                        (BASE_INIT/SCI_INIT)
0011BC 0F51BC 18 0B 04 00 CA                                  MOVB    #SCI_8N1, SCICR1                        ;8N1     (BASE_INIT/SCI_INIT)
0011C1 0F51C1 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                                              ;MOVW   #(((RTIE|LOCKIE)<<8)|CWAI|COPWAI), CRGINT        (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ;CRG configuration: (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; real-time interrupt enabled           (RTIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL lock interrupt enabled            (LOCKIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no self-clock mode interrupt          (~SCMIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no pseudo-stop                        (~PSTP) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; system/bus clock in wait mode         (~SYSWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no reduced oscillator amplitude       (~ROAWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL in wait mode                      (~PLLWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; core/CPU clock stops in wait mode     (CWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; RTI keeps running in wait mode        (~RTIWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; COP stops in wait mode                (COPWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;BSET   PLLCTL, #(CME|PLLON|AUTO)                       ; clock monitor enabled                 (CME) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL enabled                           (PLLON) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; automatic bandwith control            (AUTO) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011C1 0F51C1 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011C3 0F51C3 4E 39 80 1C                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011C7 0F51C7 MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011C7 0F51C7 8F 1A EE                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011CA 0F51CA 25 13                                           BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011CC 0F51CC 8F 1B 09                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011CF 0F51CF 22 0F                                           BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011D1 0F51D1 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0011D1 0F51D1 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0011D6 0F51D6 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0011DB 0F51DB 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011DD 0F51DD 20 02                                           JOB     DONE                                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011DF 0F51DF 00                      OF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011E0 0F51E0 00                      UF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011E1 0F51E1 -> $11E1                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011E1 0F51E1 20 DE                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011E3 0F51E3 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011E5 0F51E5 MACRO                                           SCI_ENABLE                                               (BASE_INIT)
                                      ;#Enable SCI                                                                     (BASE_INIT/SCI_ENABLE)
                                      ;#----------                                                                     (BASE_INIT/SCI_ENABLE)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_ENABLE)
0011E5 0F51E5 CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_ENABLE)
0011E8 0F51E8 7C 1B 34                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_ENABLE)
0011EB 0F51EB 7C 1B 2A                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_ENABLE)
0011EE 0F51EE 18 0B 80 1B 09                                  MOVB    #SCI_FLG_SEND_XONXOFF,  SCI_FLGS        ;request transmission of XON/XOFF (BASE_INIT/SCI_ENABLE)
                                                              ;Enable transmission                                     (BASE_INIT/SCI_ENABLE)
0011F3 0F51F3 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;transmit XON (BASE_INIT/SCI_ENABLE)
0011F8 0F51F8 MACRO                                           RESET_BR_ERR    ERROR   ;severe error detected           (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
0011F8 0F51F8 FD 1B 3C                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
0011FB 0F51FB 26 16                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
0011FD 0F51FD MACRO                                           WELCOME_MESSAGE                                          (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE)
                                      ;# Macros                                                                      # (BASE_INIT/WELCOME_MESSAGE)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE)
                                      ;#Welcome message                                                                (BASE_INIT/WELCOME_MESSAGE)
                                      ;------------_---                                                                (BASE_INIT/WELCOME_MESSAGE)
0011FD 0F51FD CE 1B 82                                        LDX     #WELCOME_MESSAGE        ;print welcome message   (BASE_INIT/WELCOME_MESSAGE)
001200 0F5200 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/WELCOME_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
001200 0F5200 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001200 0F5200 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001200 0F5200 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001200 0F5200 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001203 0F5203 18 25 02 5E                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001207 0F5207 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00120A 0F520A 18 22 02 5D                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00120E 0F520E -> $146B                UF                      EQU     SSTACK_UF                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00120E 0F520E -> $1465                OF                      EQU     SSTACK_OF                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00120E 0F520E 16 18 E5                                        JOBSR   \1                                               (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001211 0F5211 20 3B                                           JOB     DONE                                             (BASE_INIT)
001213 0F5213 MACRO                   ERROR                   ERROR_MESSAGE                                            (BASE_INIT)
                                      ;#Error message                                                                  (BASE_INIT/ERROR_MESSAGE)
                                      ;--------------                                                                  (BASE_INIT/ERROR_MESSAGE)
001213 0F5213 CE 1B A5                                        LDX     #ERROR_HEADER           ;print error header      (BASE_INIT/ERROR_MESSAGE)
001216 0F5216 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
001216 0F5216 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001216 0F5216 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001216 0F5216 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001216 0F5216 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001219 0F5219 18 25 02 48                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00121D 0F521D 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001220 0F5220 18 22 02 47                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001224 0F5224 -> $146B                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001224 0F5224 -> $1465                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001224 0F5224 16 18 E5                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001227 0F5227 B7 65                                           TFR     Y, X                    ;print error message     (BASE_INIT/ERROR_MESSAGE)
001229 0F5229 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
001229 0F5229 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001229 0F5229 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001229 0F5229 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001229 0F5229 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00122C 0F522C 18 25 02 35                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001230 0F5230 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001233 0F5233 18 22 02 34                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001237 0F5237 -> $146B                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001237 0F5237 -> $1465                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001237 0F5237 16 18 E5                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00123A 0F523A CE 1B B2                                        LDX     #ERROR_TRAILER          ;print error TRAILER     (BASE_INIT/ERROR_MESSAGE)
00123D 0F523D MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
00123D 0F523D MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00123D 0F523D MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00123D 0F523D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00123D 0F523D 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001240 0F5240 18 25 02 21                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001244 0F5244 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001247 0F5247 18 22 02 20                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124B 0F524B -> $146B                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124B 0F524B -> $1465                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124B 0F524B 16 18 E5                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00124E 0F524E -> $124E                DONE                    EQU     *                                                (BASE_INIT)
                                      ;;Setup trace buffer
                                      ;                       ;Configure DBG module
                                      ;                       CLR     DBGC1
                                      ;                       ;MOVB   #$40, DBGTCR  ;trace CPU in normal mode
                                      ;                       MOVB    #$4C, DBGTCR  ;trace CPU in pure PC mode
                                      ;                       MOVB    #$02, DBGC2   ;Comparators A/B outside range
                                      ;                       MOVB    #$02, DBGSCRX ;first match triggers final state
                                      ;                       ;Comperator A
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_START_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_START_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Comperator A
                                      ;                       MOVB    #$01, DBGC1
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_END_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_END_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Arm DBG module
                                      ;                       MOVB    #ARM, DBGC1
                                      ;Application code
                                                              ;Print header string
00124E 0F524E CE 1B 3E                DEMO_OUTER_LOOP         LDX     #DEMO_HEADER
001251 0F5251 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
001251 0F5251 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
001251 0F5251 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001251 0F5251 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001251 0F5251 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001254 0F5254 18 25 02 0D                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001258 0F5258 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00125B 0F525B 18 22 02 0C                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00125F 0F525F -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00125F 0F525F -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00125F 0F525F 16 18 E5                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
001262 0F5262 18 0B 14 1A E4                                  MOVB    #20, DEMO_LINE_COUNT
                                                              ;Wait for input
001267 0F5267 MACRO                   DEMO_INNER_LOOP         SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
001267 0F5267 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
001267 0F5267 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001267 0F5267 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001267 0F5267 8F 1A F4                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00126A 0F526A 18 25 01 F7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00126E 0F526E 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001271 0F5271 18 22 01 F6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001275 0F5275 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001275 0F5275 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001275 0F5275 16 16 3A                                        JOBSR   \1                                               (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors
001278 0F5278 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
00127A 0F527A 26 EB                                           BNE     DEMO_INNER_LOOP
                                                              ;TBNE   A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
00127C 0F527C B7 45                                           TFR     D, X
00127E 0F527E 86 04                                           LDAA    #4
001280 0F5280 C6 20                                           LDAB    #" "
001282 0F5282 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001282 0F5282 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
001282 0F5282 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001282 0F5282 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001282 0F5282 8F 1A F7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001285 0F5285 18 25 01 DC                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001289 0F5289 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00128C 0F528C 18 22 01 DB                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001290 0F5290 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001290 0F5290 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001290 0F5290 16 19 53                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
001293 0F5293 B7 54                                           TFR     X, D
001295 0F5295 87                                              CLRA
001296 0F5296 MACRO                                           STRING_PRINTABLE
                                      ;#Make ASCII character printable                                                 (STRING_PRINTABLE)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_PRINTABLE)
                                      ; result: B: printable ASCII character or "."                                    (STRING_PRINTABLE)
                                      ; SSTACK: 2 bytes                                                                (STRING_PRINTABLE)
                                      ;         X, Y, and A are preserved                                              (STRING_PRINTABLE)
001296 0F5296 MACRO                                           SSTACK_JOBSR    STRING_PRINTABLE, 2                      (STRING_PRINTABLE)
                                      ;#Check stack and call subroutine                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINTABLE/SSTACK_JOBSR)
001296 0F5296 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
001296 0F5296 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001296 0F5296 8F 1A F0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001299 0F5299 18 25 01 C8                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00129D 0F529D 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A0 0F52A0 18 22 01 C7                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A4 0F52A4 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A4 0F52A4 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A4 0F52A4 16 19 94                                        JOBSR   \1                                               (STRING_PRINTABLE/SSTACK_JOBSR)
0012A7 0F52A7 MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
0012A7 0F52A7 MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 7                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
0012A7 0F52A7 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012A7 0F52A7 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A7 0F52A7 8F 1A F5                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012AA 0F52AA 18 25 01 B7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012AE 0F52AE 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B1 0F52B1 18 22 01 B6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B5 0F52B5 -> $146B                UF                      EQU     SSTACK_UF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B5 0F52B5 -> $1465                OF                      EQU     SSTACK_OF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B5 0F52B5 16 14 C4                                        JOBSR   \1                                               (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
                                                              ;CLRA
                                                              ;LDAB   DEMO_LINE_COUNT
                                                              ;TFR    D, X
0012B8 0F52B8 CD 00 00                                        LDY     #$0000
0012BB 0F52BB C6 10                                           LDAB    #16
0012BD 0F52BD MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0012BD 0F52BD MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0012BD 0F52BD MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012BD 0F52BD MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012BD 0F52BD 8F 1B 00                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012C0 0F52C0 18 25 01 A1                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012C4 0F52C4 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012C7 0F52C7 18 22 01 A0                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012CB 0F52CB -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012CB 0F52CB -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012CB 0F52CB 16 19 E0                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0012CE 0F52CE B7 76                                           TFR     SP, Y
0012D0 0F52D0 40                                              NEGA
0012D1 0F52D1 8B 05                                           ADDA    #5
0012D3 0F52D3 C6 20                                           LDAB    #" "
0012D5 0F52D5 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012D5 0F52D5 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012D5 0F52D5 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012D5 0F52D5 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012D5 0F52D5 8F 1A F7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012D8 0F52D8 18 25 01 89                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012DC 0F52DC 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012DF 0F52DF 18 22 01 88                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E3 0F52E3 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E3 0F52E3 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E3 0F52E3 16 19 53                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0012E6 0F52E6 C6 10                                           LDAB    #16
0012E8 0F52E8 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0012E8 0F52E8 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0012E8 0F52E8                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0012E8 0F52E8 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0012E8 0F52E8 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0012E8 0F52E8 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012E8 0F52E8 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E8 0F52E8 8F 1A F4                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012EB 0F52EB 18 25 01 76                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012EF 0F52EF 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F2 0F52F2 18 22 01 75                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F6 0F52F6 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F6 0F52F6 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F6 0F52F6 16 15 AA                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0012F9 0F52F9 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0012F9 0F52F9 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F9 0F52F9 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F9 0F52F9 8F 1B 01                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012FC 0F52FC 18 25 01 65                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001300 0F5300 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001303 0F5303 18 22 01 64                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001307 0F5307 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001307 0F5307 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001307 0F5307 16 1A 71                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00130A 0F530A 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00130C 0F530C MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 0 bytes  (+6 arg bytes)                                                (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
00130C 0F530C MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00130C 0F530C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00130C 0F530C 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00130F 0F530F 18 25 01 52                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001313 0F5313 8F 1B 03                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001316 0F5316 18 22 01 51                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00131A 0F531A -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00131A 0F531A -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00131A 0F531A 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
00131C 0F531C CD 00 00                                        LDY     #$0000
00131F 0F531F C6 0A                                           LDAB    #10
001321 0F5321 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
001321 0F5321 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
001321 0F5321 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001321 0F5321 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001321 0F5321 8F 1B 00                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001324 0F5324 18 25 01 3D                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001328 0F5328 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00132B 0F532B 18 22 01 3C                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00132F 0F532F -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00132F 0F532F -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00132F 0F532F 16 19 E0                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
001332 0F5332 B7 76                                           TFR     SP, Y
001334 0F5334 40                                              NEGA
001335 0F5335 8B 05                                           ADDA    #5
001337 0F5337 C6 20                                           LDAB    #" "
001339 0F5339 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001339 0F5339 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
001339 0F5339 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001339 0F5339 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001339 0F5339 8F 1A F7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00133C 0F533C 18 25 01 25                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001340 0F5340 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001343 0F5343 18 22 01 24                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001347 0F5347 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001347 0F5347 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001347 0F5347 16 19 53                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
00134A 0F534A C6 0A                                           LDAB    #10
00134C 0F534C MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00134C 0F534C MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00134C 0F534C                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00134C 0F534C MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00134C 0F534C MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00134C 0F534C MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00134C 0F534C MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00134C 0F534C 8F 1A F4                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00134F 0F534F 18 25 01 12                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001353 0F5353 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001356 0F5356 18 22 01 11                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00135A 0F535A -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00135A 0F535A -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00135A 0F535A 16 15 AA                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00135D 0F535D MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00135D 0F535D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00135D 0F535D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00135D 0F535D 8F 1B 01                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001360 0F5360 18 25 01 01                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001364 0F5364 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001367 0F5367 18 22 01 00                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00136B 0F536B -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00136B 0F536B -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00136B 0F536B 16 1A 71                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00136E 0F536E 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
001370 0F5370 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 0 bytes  (+6 arg bytes)                                                (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
001370 0F5370 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001370 0F5370 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001370 0F5370 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001373 0F5373 18 25 00 EE                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001377 0F5377 8F 1B 03                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00137A 0F537A 18 22 00 ED                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00137E 0F537E -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00137E 0F537E -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00137E 0F537E 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
001380 0F5380 CD 00 00                                        LDY     #$0000
001383 0F5383 C6 08                                           LDAB    #8
001385 0F5385 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
001385 0F5385 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
001385 0F5385 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001385 0F5385 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001385 0F5385 8F 1B 00                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001388 0F5388 18 25 00 D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00138C 0F538C 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00138F 0F538F 18 22 00 D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001393 0F5393 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001393 0F5393 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001393 0F5393 16 19 E0                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
001396 0F5396 B7 76                                           TFR     SP, Y
001398 0F5398 40                                              NEGA
001399 0F5399 8B 05                                           ADDA    #5
00139B 0F539B C6 20                                           LDAB    #" "
00139D 0F539D MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00139D 0F539D MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
00139D 0F539D MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00139D 0F539D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00139D 0F539D 8F 1A F7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013A0 0F53A0 18 25 00 C1                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013A4 0F53A4 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013A7 0F53A7 18 22 00 C0                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013AB 0F53AB -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013AB 0F53AB -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013AB 0F53AB 16 19 53                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0013AE 0F53AE C6 08                                           LDAB    #8
0013B0 0F53B0 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0013B0 0F53B0 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0013B0 0F53B0                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0013B0 0F53B0 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0013B0 0F53B0 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0013B0 0F53B0 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013B0 0F53B0 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013B0 0F53B0 8F 1A F4                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013B3 0F53B3 18 25 00 AE                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013B7 0F53B7 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013BA 0F53BA 18 22 00 AD                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013BE 0F53BE -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013BE 0F53BE -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013BE 0F53BE 16 15 AA                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0013C1 0F53C1 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0013C1 0F53C1 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013C1 0F53C1 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013C1 0F53C1 8F 1B 01                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013C4 0F53C4 18 25 00 9D                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013C8 0F53C8 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013CB 0F53CB 18 22 00 9C                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013CF 0F53CF -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013CF 0F53CF -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013CF 0F53CF 16 1A 71                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0013D2 0F53D2 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0013D4 0F53D4 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 0 bytes  (+6 arg bytes)                                                (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
0013D4 0F53D4 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013D4 0F53D4 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013D4 0F53D4 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013D7 0F53D7 18 25 00 8A                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013DB 0F53DB 8F 1B 03                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013DE 0F53DE 18 22 00 89                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013E2 0F53E2 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013E2 0F53E2 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013E2 0F53E2 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
0013E4 0F53E4 86 02                                           LDAA    #2
0013E6 0F53E6 C6 20                                           LDAB    #" "
0013E8 0F53E8 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0013E8 0F53E8 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0013E8 0F53E8 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013E8 0F53E8 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013E8 0F53E8 8F 1A F7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013EB 0F53EB 25 78                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013ED 0F53ED 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F0 0F53F0 22 79                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F2 0F53F2 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F2 0F53F2 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F2 0F53F2 16 19 53                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0013F5 0F53F5 CD 00 00                                        LDY     #$0000
0013F8 0F53F8 C6 02                                           LDAB    #2
0013FA 0F53FA MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0013FA 0F53FA MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0013FA 0F53FA MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013FA 0F53FA MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013FA 0F53FA 8F 1B 00                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013FD 0F53FD 25 66                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013FF 0F53FF 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001402 0F5402 22 67                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001404 0F5404 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001404 0F5404 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001404 0F5404 16 19 E0                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
001407 0F5407 B7 76                                           TFR     SP, Y
001409 0F5409 40                                              NEGA
00140A 0F540A 8B 08                                           ADDA    #8
00140C 0F540C C6 30                                           LDAB    #"0"
00140E 0F540E MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00140E 0F540E MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
00140E 0F540E MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00140E 0F540E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00140E 0F540E 8F 1A F7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001411 0F5411 25 52                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001413 0F5413 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001416 0F5416 22 53                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001418 0F5418 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001418 0F5418 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001418 0F5418 16 19 53                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
00141B 0F541B C6 02                                           LDAB    #2
00141D 0F541D MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00141D 0F541D MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00141D 0F541D                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00141D 0F541D MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00141D 0F541D MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00141D 0F541D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00141D 0F541D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00141D 0F541D 8F 1A F4                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001420 0F5420 25 43                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001422 0F5422 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001425 0F5425 22 44                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001427 0F5427 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001427 0F5427 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001427 0F5427 16 15 AA                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00142A 0F542A MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00142A 0F542A MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00142A 0F542A MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00142A 0F542A 8F 1B 01                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00142D 0F542D 25 36                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00142F 0F542F 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001432 0F5432 22 37                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001434 0F5434 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001434 0F5434 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001434 0F5434 16 1A 71                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
001437 0F5437 24 E4                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
001439 0F5439 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 0 bytes  (+6 arg bytes)                                                (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
001439 0F5439 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001439 0F5439 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001439 0F5439 8F 1A EE                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00143C 0F543C 25 27                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00143E 0F543E 8F 1B 03                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001441 0F5441 22 28                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001443 0F5443 -> $146B                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001443 0F5443 -> $1465                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001443 0F5443 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Decrement line count
001445 0F5445 73 1A E4                                        DEC     DEMO_LINE_COUNT
001448 0F5448 18 27 FE 02                                     BEQ     DEMO_OUTER_LOOP
                                                              ;Print new line
00144C 0F544C CE 1C 06                                        LDX     #STRING_STR_NL
00144F 0F544F MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00144F 0F544F MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00144F 0F544F MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00144F 0F544F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00144F 0F544F 8F 1A F8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001452 0F5452 25 11                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001454 0F5454 8F 1B 09                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001457 0F5457 22 12                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001459 0F5459 -> $146B                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001459 0F5459 -> $1465                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001459 0F5459 16 18 E5                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
00145C 0F545C 06 12 67                                        JOB     DEMO_INNER_LOOP
00145F 0F545F -> $145F                DEMO_CODE_END           EQU     *
00145F 0F545F -> $F545F               DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001B3E 0F5B3E                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
001B3E 0F5B3E MACRO                   DEMO_HEADER             STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001B3E 0F5B3E 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001B3F 0F5B3F 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001B40 0F5B40 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001B40 0F5B40 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001B41 0F5B41 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001B42 0F5B42 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
001B60 0F5B60 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001B60 0F5B60 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001B61 0F5B61 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001B62 0F5B62 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
001B80 0F5B80 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001B80 0F5B80 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001B81 0F5B81 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
001B82 0F5B82 -> $1B82                DEMO_TABS_END           EQU     *
001B82 0F5B82 -> $F5B82               DEMO_TABS_END_LIN       EQU     @
