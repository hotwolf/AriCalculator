                                      ;###############################################################################
                                      ;# S12CBase - Demo (Mini-BDM-Pod)                                              #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Memory map:
??????        -> $0001                MMAP_S12XEP100          EQU     1               ;S12XEP100
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;# COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# STRING
??????        -> $0001                STRING_FILL_ON          EQU     1               ;enable STRING_FILL_BL/STRING_FILL_NB
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001000 0F9000                                                 ORG     MMAP_RAM_START, MMAP_RAM_START_LIN
                                      ;Code
001000 0F9000 -> $1000                START_OF_CODE           EQU     *
001000 0F9000 -> $1000                DEMO_CODE_START         EQU     *
001000 0F9000 -> $F9000               DEMO_CODE_START_LIN     EQU     @
001000 0F9000 -> $1565                BASE_CODE_START         EQU     DEMO_CODE_END
001000 0F9000 -> $F9565               BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Variables
001000 0F9000 -> $1C8D                DEMO_VARS_START         EQU     BASE_CODE_END
001000 0F9000 -> $F9C8D               DEMO_VARS_START_LIN     EQU     BASE_CODE_END_LIN
001000 0F9000 -> $1C8D                BASE_VARS_START         EQU     DEMO_VARS_END
001000 0F9000 -> $F9C8D               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
                                      ;Tables
001000 0F9000 -> $1CE5                DEMO_TABS_START         EQU     BASE_VARS_END
001000 0F9000 -> $F9CE5               DEMO_TABS_START_LIN     EQU     BASE_VARS_END_LIN
001000 0F9000 -> $1D29                BASE_TABS_START         EQU     DEMO_TABS_END
001000 0F9000 -> $F9D29               BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (Mini-BDM-Pod)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 20, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
001000 0F9000 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
001000 0F9000 -> $989680              CLOCK_OSC_FREQ          EQU     10000000        ;10 MHz
001000 0F9000 -> $2FAF080             CLOCK_BUS_FREQ          EQU     50000000        ;50 MHz
001000 0F9000 -> $989680              CLOCK_REF_FREQ          EQU     CLOCK_OSC_FREQ  ;4,000 MHz
001000 0F9000 -> $0003                CLOCK_VCOFRQ            EQU     3               ;VCO=100MHz
001000 0F9000 -> $0002                CLOCK_REFFRQ            EQU     2               ;Ref=10Mhz
                                      ;# SCI
001000 0F9000 -> $0001                SCI_FC_XON_XOFF         EQU     1               ;XON/XOFF flow control
001000 0F9000 -> $0001                SCI_BD_ON               EQU     1               ;use baud rate detection
001000 0F9000 -> $0001                SCI_BD_TIM              EQU     1               ;TIM
001000 0F9000 -> $0000                SCI_BD_ICNEPE           EQU     0               ;IC0
001000 0F9000 -> $0002                SCI_BD_OC               EQU     2               ;OC2
001000 0F9000 -> $0003                SCI_DLY_OC              EQU     3               ;OC3
001000 0F9000 -> $0001                SCI_ERRSIG_ON           EQU     1               ;signal errors
                                      ;# TIM
001000 0F9000 -> $0001                TIM_DIV2_ON             EQU     1               ;run TIM at half bus frequency
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001C8D 0F9C8D -> $1C8D                GPIO_VARS_START         EQU     *
001C8D 0F9C8D -> $F9C8D               GPIO_VARS_START_LIN     EQU     @
001C8D 0F9C8D                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001C8D 0F9C8D -> $1C8D                MMAP_VARS_START         EQU     *
001C8D 0F9C8D -> $F9C8D               MMAP_VARS_START_LIN     EQU     @
001C8D 0F9C8D                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
001C8D 0F9C8D -> $1C8D                SSTACK_VARS_START       EQU     *
001C8D 0F9C8D -> $F9C8D               SSTACK_VARS_START_LIN   EQU     @
001C8D 0F9C8D                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
001C8D 0F9C8D -> $1C8D                ISTACK_VARS_START       EQU     *
001C8D 0F9C8D -> $F9C8D               ISTACK_VARS_START_LIN   EQU     @
001CB1 0F9CB1                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
001CB1 0F9CB1 -> $1CB1                CLOCK_VARS_START        EQU     *
001CB1 0F9CB1 -> $F9CB1               CLOCK_VARS_START_LIN    EQU     @
001CB1 0F9CB1                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001CB1 0F9CB1 -> $1CB1                COP_VARS_START          EQU     *
001CB1 0F9CB1 -> $F9CB1               COP_VARS_START_LIN      EQU     @
001CB1 0F9CB1                                                 ORG     COP_VARS_END, COP_VARS_END_LIN
001CB1 0F9CB1 -> $1CB1                TIM_VARS_START          EQU     *
001CB1 0F9CB1 -> $F9CB1               TIM_VARS_START_LIN      EQU     @
001CB1 0F9CB1                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001CB1 0F9CB1 -> $1CB1                LED_VARS_START          EQU     *
001CB1 0F9CB1 -> $F9CB1               LED_VARS_START_LIN      EQU     @
001CB1 0F9CB1                                                 ORG     LED_VARS_END, LED_VARS_END_LIN
001CB1 0F9CB1 -> $1CB1                SCI_VARS_START          EQU     *
001CB1 0F9CB1 -> $F9CB1               SCI_VARS_START_LIN      EQU     @
001CE1 0F9CE1                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
001CE1 0F9CE1 -> $1CE1                TVMON_VARS_START        EQU     *
001CE1 0F9CE1 -> $F9CE1               TVMON_VARS_START_LIN    EQU     @
001CE1 0F9CE1                                                 ORG     TVMON_VARS_END, TVMON_VARS_END_LIN
001CE1 0F9CE1 -> $1CE1                STRING_VARS_START       EQU     *
001CE1 0F9CE1 -> $F9CE1               STRING_VARS_START_LIN   EQU     @
001CE1 0F9CE1                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
001CE1 0F9CE1 -> $1CE1                RESET_VARS_START        EQU     *
001CE1 0F9CE1 -> $F9CE1               RESET_VARS_START_LIN    EQU     @
001CE5 0F9CE5                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
001CE5 0F9CE5 -> $1CE5                NUM_VARS_START          EQU     *
001CE5 0F9CE5 -> $F9CE5               NUM_VARS_START_LIN      EQU     @
001CE5 0F9CE5                                                 ORG     NUM_VARS_END, NUM_VARS_END_LIN
001CE5 0F9CE5 -> $1CE5                NVM_VARS_START          EQU     *
001CE5 0F9CE5 -> $F9CE5               NVM_VARS_START_LIN      EQU     @
001CE5 0F9CE5                                                 ORG     NVM_VARS_END, NVM_VARS_END_LIN
001CE5 0F9CE5 -> $1CE5                VECTAB_VARS_START       EQU     *
001CE5 0F9CE5 -> $F9CE5               VECTAB_VARS_START_LIN   EQU     @
001CE5 0F9CE5                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001CE5 0F9CE5 -> $1CE5                BASE_VARS_END           EQU     *
001CE5 0F9CE5 -> $F9CE5               BASE_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001565 0F9565                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
001565 0F9565 -> $1565                GPIO_CODE_START         EQU     *
001565 0F9565 -> $F9565               GPIO_CODE_START_LIN     EQU     @
001565 0F9565                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
001565 0F9565 -> $1565                MMAP_CODE_START         EQU     *
001565 0F9565 -> $F9565               MMAP_CODE_START_LIN     EQU     @
00156B 0F956B                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
00156B 0F956B -> $156B                SSTACK_CODE_START       EQU     *
00156B 0F956B -> $F956B               SSTACK_CODE_START_LIN   EQU     @
001577 0F9577                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
001577 0F9577 -> $1577                ISTACK_CODE_START       EQU     *
001577 0F9577 -> $F9577               ISTACK_CODE_START_LIN   EQU     @
001583 0F9583                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
001583 0F9583 -> $1583                CLOCK_CODE_START        EQU     *
001583 0F9583 -> $F9583               CLOCK_CODE_START_LIN    EQU     @
00159C 0F959C                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
00159C 0F959C -> $159C                COP_CODE_START          EQU     *
00159C 0F959C -> $F959C               COP_CODE_START_LIN      EQU     @
00159C 0F959C                                                 ORG     COP_CODE_END, COP_CODE_END_LIN
00159C 0F959C -> $159C                TIM_CODE_START          EQU     *
00159C 0F959C -> $F959C               TIM_CODE_START_LIN      EQU     @
00159C 0F959C                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
00159C 0F959C -> $159C                LED_CODE_START          EQU     *
00159C 0F959C -> $F959C               LED_CODE_START_LIN      EQU     @
00159C 0F959C                                                 ORG     LED_CODE_END, LED_CODE_END_LIN
00159C 0F959C -> $159C                SCI_CODE_START          EQU     *
00159C 0F959C -> $F959C               SCI_CODE_START_LIN      EQU     @
00189E 0F989E                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
00189E 0F989E -> $189E                TVMON_CODE_START                EQU     *
00189E 0F989E -> $F989E               TVMON_CODE_START_LIN    EQU     @
0018E7 0F98E7                                                 ORG     TVMON_CODE_END, TVMON_CODE_END_LIN
0018E7 0F98E7 -> $18E7                STRING_CODE_START       EQU     *
0018E7 0F98E7 -> $F98E7               STRING_CODE_START_LIN   EQU     @
001A09 0F9A09                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
001A09 0F9A09 -> $1A09                RESET_CODE_START        EQU     *
001A09 0F9A09 -> $F9A09               RESET_CODE_START_LIN    EQU     @
001A3A 0F9A3A                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
001A3A 0F9A3A -> $1A3A                NUM_CODE_START          EQU     *
001A3A 0F9A3A -> $F9A3A               NUM_CODE_START_LIN      EQU     @
001B3E 0F9B3E                                                 ORG     NUM_CODE_END, NUM_CODE_END_LIN
001B3E 0F9B3E -> $1B3E                NVM_CODE_START          EQU     *
001B3E 0F9B3E -> $F9B3E               NVM_CODE_START_LIN      EQU     @
001C8D 0F9C8D                                                 ORG     NVM_CODE_END, NVM_CODE_END_LIN
001C8D 0F9C8D -> $1C8D                VECTAB_CODE_START       EQU     *
001C8D 0F9C8D -> $F9C8D               VECTAB_CODE_START_LIN   EQU     @
001C8D 0F9C8D                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
001C8D 0F9C8D -> $1C8D                BASE_CODE_END           EQU     *
001C8D 0F9C8D -> $F9C8D               BASE_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D29 0F9D29                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
                                      ;#Welcome message
001D29 0F9D29 48 65 6C 6C 6F 2C 20 74 WELCOME_MESSAGE         FCC     "Hello, this is the S12CBase demo!"
              68 69 73 20 69 73 20 74 
              68 65 20 53 31 32 43 42 
              61 73 65 20 64 65 6D 6F 
              21                      
001D4A 0F9D4A MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001D4A 0F9D4A 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001D4B 0F9D4B 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
                                      ;#Error message format
001D4C 0F9D4C 46 41 54 41 4C 20 45 52 ERROR_HEADER            FCS     "FATAL ERROR! "
              52 4F 52 21 A0          
001D59 0F9D59 21                      ERROR_TRAILER           FCC     "!"
001D5A 0F9D5A MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001D5A 0F9D5A 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001D5B 0F9D5B 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
001D5C 0F9D5C -> $1D5C                GPIO_TABS_START         EQU     *
001D5C 0F9D5C -> $F9D5C               GPIO_TABS_START_LIN     EQU     @
001D5C 0F9D5C                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
001D5C 0F9D5C -> $1D5C                MMAP_TABS_START         EQU     *
001D5C 0F9D5C -> $F9D5C               MMAP_TABS_START_LIN     EQU     @
001D65 0F9D65                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
001D65 0F9D65 -> $1D65                SSTACK_TABS_START       EQU     *
001D65 0F9D65 -> $F9D65               SSTACK_TABS_START_LIN   EQU     @
001D9C 0F9D9C                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
001D9C 0F9D9C -> $1D9C                ISTACK_TABS_START       EQU     *
001D9C 0F9D9C -> $F9D9C               ISTACK_TABS_START_LIN   EQU     @
001DCD 0F9DCD                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
001DCD 0F9DCD -> $1DCD                CLOCK_TABS_START        EQU     *
001DCD 0F9DCD -> $F9DCD               CLOCK_TABS_START_LIN    EQU     @
001DCD 0F9DCD                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
001DCD 0F9DCD -> $1DCD                COP_TABS_START          EQU     *
001DCD 0F9DCD -> $F9DCD               COP_TABS_START_LIN      EQU     @
001DCD 0F9DCD                                                 ORG     COP_TABS_END, COP_TABS_END_LIN
001DCD 0F9DCD -> $1DCD                TIM_TABS_START          EQU     *
001DCD 0F9DCD -> $F9DCD               TIM_TABS_START_LIN      EQU     @
001DCD 0F9DCD                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
001DCD 0F9DCD -> $1DCD                LED_TABS_START          EQU     *
001DCD 0F9DCD -> $F9DCD               LED_TABS_START_LIN      EQU     @
001DCD 0F9DCD                                                 ORG     LED_TABS_END, LED_TABS_END_LIN
001DCD 0F9DCD -> $1DCD                SCI_TABS_START          EQU     *
001DCD 0F9DCD -> $F9DCD               SCI_TABS_START_LIN      EQU     @
00220E 0FA20E                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
00220E 0FA20E -> $220E                TVMON_TABS_START        EQU     *
00220E 0FA20E -> $FA20E               TVMON_TABS_START_LIN    EQU     @
00220E 0FA20E                                                 ORG     TVMON_TABS_END, TVMON_TABS_END_LIN
00220E 0FA20E -> $220E                STRING_TABS_START       EQU     *
00220E 0FA20E -> $FA20E               STRING_TABS_START_LIN   EQU     @
002211 0FA211                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
002211 0FA211 -> $2211                RESET_TABS_START        EQU     *
002211 0FA211 -> $FA211               RESET_TABS_START_LIN    EQU     @
00225E 0FA25E                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
00225E 0FA25E -> $225E                NUM_TABS_START          EQU     *
00225E 0FA25E -> $FA25E               NUM_TABS_START_LIN      EQU     @
00226F 0FA26F                                                 ORG     NUM_TABS_END, NUM_TABS_END_LIN
00226F 0FA26F -> $226F                NVM_TABS_START          EQU     *
00226F 0FA26F -> $FA26F               NVM_TABS_START_LIN      EQU     @
002278 0FA278                                                 ORG     NVM_TABS_END, NVM_TABS_END_LIN
002278 0FA278 -> $2278                VECTAB_TABS_START       EQU     *
002278 0FA278 -> $FA278               VECTAB_TABS_START_LIN   EQU     @
0022E8 0FA2E8                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
0022E8 0FA2E8 -> $22E8                BASE_TABS_END           EQU     *
0022E8 0FA2E8 -> $FA2E8               BASE_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
0022E8 0FA2E8 S12X CODE:                                      CPU     S12X
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (Mini-BDM-Pod)                     #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12XEP100.                   #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;##################################
                                      ;# S12XEP100 Register Definitions #
                                      ;##################################
0022E8 0FA2E8 -> $0000                PORTA           EQU     $0000
0022E8 0FA2E8 -> $0080                PTA7            EQU     $80
0022E8 0FA2E8 -> $0040                PTA6            EQU     $40
0022E8 0FA2E8 -> $0020                PTA5            EQU     $20
0022E8 0FA2E8 -> $0010                PTA4            EQU     $10
0022E8 0FA2E8 -> $0008                PTA3            EQU     $08
0022E8 0FA2E8 -> $0004                PTA2            EQU     $04
0022E8 0FA2E8 -> $0002                PTA1            EQU     $02
0022E8 0FA2E8 -> $0001                PTA0            EQU     $01
0022E8 0FA2E8 -> $0080                PA7             EQU     $80
0022E8 0FA2E8 -> $0040                PA6             EQU     $40
0022E8 0FA2E8 -> $0020                PA5             EQU     $20
0022E8 0FA2E8 -> $0010                PA4             EQU     $10
0022E8 0FA2E8 -> $0008                PA3             EQU     $08
0022E8 0FA2E8 -> $0004                PA2             EQU     $04
0022E8 0FA2E8 -> $0002                PA1             EQU     $02
0022E8 0FA2E8 -> $0001                PA0             EQU     $01
0022E8 0FA2E8 -> $0001                PORTB           EQU     $0001
0022E8 0FA2E8 -> $0080                PTB7            EQU     $80
0022E8 0FA2E8 -> $0040                PTB6            EQU     $40
0022E8 0FA2E8 -> $0020                PTB5            EQU     $20
0022E8 0FA2E8 -> $0010                PTB4            EQU     $10
0022E8 0FA2E8 -> $0008                PTB3            EQU     $08
0022E8 0FA2E8 -> $0004                PTB2            EQU     $04
0022E8 0FA2E8 -> $0002                PTB1            EQU     $02
0022E8 0FA2E8 -> $0001                PTB0            EQU     $01
0022E8 0FA2E8 -> $0080                PB7             EQU     $80
0022E8 0FA2E8 -> $0040                PB6             EQU     $40
0022E8 0FA2E8 -> $0020                PB5             EQU     $20
0022E8 0FA2E8 -> $0010                PB4             EQU     $10
0022E8 0FA2E8 -> $0008                PB3             EQU     $08
0022E8 0FA2E8 -> $0004                PB2             EQU     $04
0022E8 0FA2E8 -> $0002                PB1             EQU     $02
0022E8 0FA2E8 -> $0001                PB0             EQU     $01
0022E8 0FA2E8 -> $0002                DDRA            EQU     $0002
0022E8 0FA2E8 -> $0080                DDRA7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRA6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRA5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRA4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRA3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRA2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRA1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRA0           EQU     $01
0022E8 0FA2E8 -> $0003                DDRB            EQU     $0003
0022E8 0FA2E8 -> $0080                DDRB7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRB6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRB5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRB4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRB3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRB2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRB1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRB0           EQU     $01
0022E8 0FA2E8 -> $0004                PORTC           EQU     $0004
0022E8 0FA2E8 -> $0080                PTC7            EQU     $80
0022E8 0FA2E8 -> $0040                PTC6            EQU     $40
0022E8 0FA2E8 -> $0020                PTC5            EQU     $20
0022E8 0FA2E8 -> $0010                PTC4            EQU     $10
0022E8 0FA2E8 -> $0008                PTC3            EQU     $08
0022E8 0FA2E8 -> $0004                PTC2            EQU     $04
0022E8 0FA2E8 -> $0002                PTC1            EQU     $02
0022E8 0FA2E8 -> $0001                PTC0            EQU     $01
0022E8 0FA2E8 -> $0080                PC7             EQU     $80
0022E8 0FA2E8 -> $0040                PC6             EQU     $40
0022E8 0FA2E8 -> $0020                PC5             EQU     $20
0022E8 0FA2E8 -> $0010                PC4             EQU     $10
0022E8 0FA2E8 -> $0008                PC3             EQU     $08
0022E8 0FA2E8 -> $0004                PC2             EQU     $04
0022E8 0FA2E8 -> $0002                PC1             EQU     $02
0022E8 0FA2E8 -> $0001                PC0             EQU     $01
0022E8 0FA2E8 -> $0005                PORTD           EQU     $0005
0022E8 0FA2E8 -> $0080                PTD7            EQU     $80
0022E8 0FA2E8 -> $0040                PTD6            EQU     $40
0022E8 0FA2E8 -> $0020                PTD5            EQU     $20
0022E8 0FA2E8 -> $0010                PTD4            EQU     $10
0022E8 0FA2E8 -> $0008                PTD3            EQU     $08
0022E8 0FA2E8 -> $0004                PTD2            EQU     $04
0022E8 0FA2E8 -> $0002                PTD1            EQU     $02
0022E8 0FA2E8 -> $0001                PTD0            EQU     $01
0022E8 0FA2E8 -> $0080                PD7             EQU     $80
0022E8 0FA2E8 -> $0040                PD6             EQU     $40
0022E8 0FA2E8 -> $0020                PD5             EQU     $20
0022E8 0FA2E8 -> $0010                PD4             EQU     $10
0022E8 0FA2E8 -> $0008                PD3             EQU     $08
0022E8 0FA2E8 -> $0004                PD2             EQU     $04
0022E8 0FA2E8 -> $0002                PD1             EQU     $02
0022E8 0FA2E8 -> $0001                PD0             EQU     $01
0022E8 0FA2E8 -> $0006                DDRC            EQU     $0006
0022E8 0FA2E8 -> $0080                DDRC7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRC6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRC5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRC4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRC3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRC2           EQU     $04
0022E8 0FA2E8 -> $0007                DDRD            EQU     $0007
0022E8 0FA2E8 -> $0080                DDRD7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRD6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRD5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRD4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRD3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRD2           EQU     $04
0022E8 0FA2E8 -> $0008                PORTE           EQU     $0008
0022E8 0FA2E8 -> $0080                PTE7            EQU     $80
0022E8 0FA2E8 -> $0040                PTE6            EQU     $40
0022E8 0FA2E8 -> $0020                PTE5            EQU     $20
0022E8 0FA2E8 -> $0010                PTE4            EQU     $10
0022E8 0FA2E8 -> $0008                PTE3            EQU     $08
0022E8 0FA2E8 -> $0004                PTE2            EQU     $04
0022E8 0FA2E8 -> $0002                PTE1            EQU     $02
0022E8 0FA2E8 -> $0001                PTE0            EQU     $01
0022E8 0FA2E8 -> $0080                PE7             EQU     $80
0022E8 0FA2E8 -> $0040                PE6             EQU     $40
0022E8 0FA2E8 -> $0020                PE5             EQU     $20
0022E8 0FA2E8 -> $0010                PE4             EQU     $10
0022E8 0FA2E8 -> $0008                PE3             EQU     $08
0022E8 0FA2E8 -> $0004                PE2             EQU     $04
0022E8 0FA2E8 -> $0002                PE1             EQU     $02
0022E8 0FA2E8 -> $0001                PE0             EQU     $01
0022E8 0FA2E8 -> $0009                DDRE            EQU     $0009
0022E8 0FA2E8 -> $0080                DDRE7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRE6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRE5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRE4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRE3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRE2           EQU     $04
0022E8 0FA2E8 -> $000A                MMCCTL0         EQU     $000A
0022E8 0FA2E8 -> $0080                CS3E1           EQU     $80
0022E8 0FA2E8 -> $0040                CS3E0           EQU     $40
0022E8 0FA2E8 -> $0020                CS2E1           EQU     $20
0022E8 0FA2E8 -> $0010                CS2E0           EQU     $10
0022E8 0FA2E8 -> $0008                CS1E1           EQU     $08
0022E8 0FA2E8 -> $0004                CS1E0           EQU     $04
0022E8 0FA2E8 -> $0002                CS0E1           EQU     $02
0022E8 0FA2E8 -> $0001                CS0E0           EQU     $01
0022E8 0FA2E8 -> $000B                MODE            EQU     $000B
0022E8 0FA2E8 -> $0080                MODC            EQU     $80
0022E8 0FA2E8 -> $0040                MODB            EQU     $40
0022E8 0FA2E8 -> $0020                MODA            EQU     $20
0022E8 0FA2E8 -> $000C                PUCR            EQU     $000C
0022E8 0FA2E8 -> $0080                PUPKE           EQU     $80
0022E8 0FA2E8 -> $0040                BKPUE           EQU     $40
0022E8 0FA2E8 -> $0010                PUPEE           EQU     $10
0022E8 0FA2E8 -> $0008                PUPDE           EQU     $08
0022E8 0FA2E8 -> $0004                PUPCE           EQU     $04
0022E8 0FA2E8 -> $0002                PUPBE           EQU     $02
0022E8 0FA2E8 -> $0001                PUPAE           EQU     $01
0022E8 0FA2E8 -> $000D                RDRIV           EQU     $000D
0022E8 0FA2E8 -> $0080                RDPK            EQU     $80
0022E8 0FA2E8 -> $0010                RDPE            EQU     $10
0022E8 0FA2E8 -> $0008                RDPD            EQU     $08
0022E8 0FA2E8 -> $0004                RDPC            EQU     $04
0022E8 0FA2E8 -> $0002                RDPB            EQU     $02
0022E8 0FA2E8 -> $0001                RDPA            EQU     $01
0022E8 0FA2E8 -> $000E                EBICTL0         EQU     $000E
0022E8 0FA2E8 -> $0080                ITHRS           EQU     $80
0022E8 0FA2E8 -> $0040                HDBE            EQU     $40
0022E8 0FA2E8 -> $0010                ASIZ4           EQU     $10
0022E8 0FA2E8 -> $0008                ASIZ3           EQU     $08
0022E8 0FA2E8 -> $0004                ASIZ2           EQU     $04
0022E8 0FA2E8 -> $0002                ASIZ1           EQU     $02
0022E8 0FA2E8 -> $0001                ASIZ0           EQU     $01
0022E8 0FA2E8 -> $000F                EBICTL1         EQU     $000F
0022E8 0FA2E8 -> $0040                EXSTR12         EQU     $40
0022E8 0FA2E8 -> $0020                EXSTR11         EQU     $20
0022E8 0FA2E8 -> $0010                EXSTR10         EQU     $10
0022E8 0FA2E8 -> $0004                EXSTR02         EQU     $04
0022E8 0FA2E8 -> $0002                EXSTR01         EQU     $02
0022E8 0FA2E8 -> $0001                EXSTR00         EQU     $01
0022E8 0FA2E8 -> $0010                GPAGE           EQU     $0010
0022E8 0FA2E8 -> $0040                GP6             EQU     $40
0022E8 0FA2E8 -> $0020                GP5             EQU     $20
0022E8 0FA2E8 -> $0010                GP4             EQU     $10
0022E8 0FA2E8 -> $0008                GP3             EQU     $08
0022E8 0FA2E8 -> $0004                GP2             EQU     $04
0022E8 0FA2E8 -> $0002                GP1             EQU     $02
0022E8 0FA2E8 -> $0001                GP0             EQU     $01
0022E8 0FA2E8 -> $0011                DIRECT          EQU     $0011
0022E8 0FA2E8 -> $0080                DP15            EQU     $80
0022E8 0FA2E8 -> $0040                DP14            EQU     $40
0022E8 0FA2E8 -> $0020                DP13            EQU     $20
0022E8 0FA2E8 -> $0010                DP12            EQU     $10
0022E8 0FA2E8 -> $0008                DP11            EQU     $08
0022E8 0FA2E8 -> $0004                DP10            EQU     $04
0022E8 0FA2E8 -> $0002                DP9             EQU     $02
0022E8 0FA2E8 -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
0022E8 0FA2E8 -> $0013                MMCCTL1         EQU     $0013
0022E8 0FA2E8 -> $0080                TGMRAMON        EQU     $80
0022E8 0FA2E8 -> $0020                EEEIFRON        EQU     $20
0022E8 0FA2E8 -> $0010                PGMIFRON        EQU     $10
0022E8 0FA2E8 -> $0008                RAMHM           EQU     $08
0022E8 0FA2E8 -> $0004                EROMON          EQU     $04
0022E8 0FA2E8 -> $0002                ROMHM           EQU     $02
0022E8 0FA2E8 -> $0001                ROMON           EQU     $01
                                      ;$0014 reserved
0022E8 0FA2E8 -> $0015                PPAGE           EQU     $0015
0022E8 0FA2E8 -> $0080                PIX7            EQU     $80
0022E8 0FA2E8 -> $0040                PIX6            EQU     $40
0022E8 0FA2E8 -> $0020                PIX5            EQU     $20
0022E8 0FA2E8 -> $0010                PIX4            EQU     $10
0022E8 0FA2E8 -> $0008                PIX3            EQU     $08
0022E8 0FA2E8 -> $0004                PIX2            EQU     $04
0022E8 0FA2E8 -> $0002                PIX1            EQU     $02
0022E8 0FA2E8 -> $0001                PIX0            EQU     $01
0022E8 0FA2E8 -> $0016                RPAGE           EQU     $0016
0022E8 0FA2E8 -> $0080                RP7             EQU     $80
0022E8 0FA2E8 -> $0040                RP6             EQU     $40
0022E8 0FA2E8 -> $0020                RP5             EQU     $20
0022E8 0FA2E8 -> $0010                RP4             EQU     $10
0022E8 0FA2E8 -> $0008                RP3             EQU     $08
0022E8 0FA2E8 -> $0004                RP2             EQU     $04
0022E8 0FA2E8 -> $0002                RP1             EQU     $02
0022E8 0FA2E8 -> $0001                RP0             EQU     $01
0022E8 0FA2E8 -> $0017                EPAGE           EQU     $0017
0022E8 0FA2E8 -> $0080                EP7             EQU     $80
0022E8 0FA2E8 -> $0040                EP6             EQU     $40
0022E8 0FA2E8 -> $0020                EP5             EQU     $20
0022E8 0FA2E8 -> $0010                EP4             EQU     $10
0022E8 0FA2E8 -> $0008                EP3             EQU     $08
0022E8 0FA2E8 -> $0004                EP2             EQU     $04
0022E8 0FA2E8 -> $0002                EP1             EQU     $02
0022E8 0FA2E8 -> $0001                EP0             EQU     $01
                                      ;$0018 to $0019 reserved
0022E8 0FA2E8 -> $001A                PARTIDH         EQU     $001A
0022E8 0FA2E8 -> $0080                ID15            EQU     $80
0022E8 0FA2E8 -> $0040                ID14            EQU     $40
0022E8 0FA2E8 -> $0020                ID13            EQU     $20
0022E8 0FA2E8 -> $0010                ID12            EQU     $10
0022E8 0FA2E8 -> $0008                ID11            EQU     $08
0022E8 0FA2E8 -> $0004                ID10            EQU     $04
0022E8 0FA2E8 -> $0002                ID9             EQU     $02
0022E8 0FA2E8 -> $0001                ID8             EQU     $01
0022E8 0FA2E8 -> $001B                PARTIDL         EQU     $001B
0022E8 0FA2E8 -> $0080                ID7             EQU     $80
0022E8 0FA2E8 -> $0040                ID6             EQU     $40
0022E8 0FA2E8 -> $0020                ID5             EQU     $20
0022E8 0FA2E8 -> $0010                ID4             EQU     $10
0022E8 0FA2E8 -> $0008                ID3             EQU     $08
0022E8 0FA2E8 -> $0004                ID2             EQU     $04
0022E8 0FA2E8 -> $0002                ID1             EQU     $02
0022E8 0FA2E8 -> $0001                ID0             EQU     $01
0022E8 0FA2E8 -> $001C                ECLKCTL         EQU     $001C
0022E8 0FA2E8 -> $0080                NECLK           EQU     $80
0022E8 0FA2E8 -> $0040                NCLKX2          EQU     $40
0022E8 0FA2E8 -> $0020                DIV16           EQU     $20
0022E8 0FA2E8 -> $0010                EDIV4           EQU     $10
0022E8 0FA2E8 -> $0008                EDIV3           EQU     $08
0022E8 0FA2E8 -> $0004                EDIV2           EQU     $04
0022E8 0FA2E8 -> $0002                EDIV1           EQU     $02
0022E8 0FA2E8 -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
0022E8 0FA2E8 -> $001E                IRQCR           EQU     $001E
0022E8 0FA2E8 -> $0080                IRQE            EQU     $80
0022E8 0FA2E8 -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
0022E8 0FA2E8 -> $0020                DBGC1           EQU     $0020
0022E8 0FA2E8 -> $0080                ARM             EQU     $80
0022E8 0FA2E8 -> $0040                TRIG            EQU     $40
0022E8 0FA2E8 -> $0020                XGSBPE          EQU     $20
0022E8 0FA2E8 -> $0010                BDM             EQU     $10
0022E8 0FA2E8 -> $0004                DBGBRK          EQU     $04
0022E8 0FA2E8 -> $0001                COMRV           EQU     $01
0022E8 0FA2E8 -> $0021                DBGSR           EQU     $0021
0022E8 0FA2E8 -> $0080                TBF             EQU     $80
0022E8 0FA2E8 -> $0040                EXTF            EQU     $40
0022E8 0FA2E8 -> $0004                SSF2            EQU     $04
0022E8 0FA2E8 -> $0002                SSF1            EQU     $02
0022E8 0FA2E8 -> $0001                SSF0            EQU     $01
0022E8 0FA2E8 -> $0022                DBGTCR          EQU     $0022
0022E8 0FA2E8 -> $00C0                TSOURCE         EQU     $C0
0022E8 0FA2E8 -> $0030                TRANGE          EQU     $30
0022E8 0FA2E8 -> $000C                TRCMOD          EQU     $0C
0022E8 0FA2E8 -> $0003                TALIGN          EQU     $03
0022E8 0FA2E8 -> $0023                DBGC2           EQU     $0023
0022E8 0FA2E8 -> $000C                CDCM            EQU     $0C
0022E8 0FA2E8 -> $0003                ABCM            EQU     $03
0022E8 0FA2E8 -> $0024                DBGTBH          EQU     $0024
0022E8 0FA2E8 -> $0080                DBGTB15         EQU     $80
0022E8 0FA2E8 -> $0040                DBGTB14         EQU     $40
0022E8 0FA2E8 -> $0020                DBGTB13         EQU     $20
0022E8 0FA2E8 -> $0010                DBGTB12         EQU     $10
0022E8 0FA2E8 -> $0008                DBGTB11         EQU     $08
0022E8 0FA2E8 -> $0004                DBGTB10         EQU     $04
0022E8 0FA2E8 -> $0002                DBGTB9          EQU     $02
0022E8 0FA2E8 -> $0001                DBGTB8          EQU     $01
0022E8 0FA2E8 -> $0025                DBGTBL          EQU     $0025
0022E8 0FA2E8 -> $0080                DBGTB7          EQU     $80
0022E8 0FA2E8 -> $0040                DBGTB6          EQU     $40
0022E8 0FA2E8 -> $0020                DBGTB5          EQU     $20
0022E8 0FA2E8 -> $0010                DBGTB4          EQU     $10
0022E8 0FA2E8 -> $0008                DBGTB3          EQU     $08
0022E8 0FA2E8 -> $0004                DBGTB2          EQU     $04
0022E8 0FA2E8 -> $0002                DBGTB1          EQU     $02
0022E8 0FA2E8 -> $0001                DBGTB0          EQU     $01
0022E8 0FA2E8 -> $0026                DBGCNT          EQU     $0026
0022E8 0FA2E8 -> $0027                DBGSCRX         EQU     $0027
0022E8 0FA2E8 -> $0008                SC3             EQU     $08
0022E8 0FA2E8 -> $0004                SC2             EQU     $04
0022E8 0FA2E8 -> $0002                SC1             EQU     $02
0022E8 0FA2E8 -> $0001                SC0             EQU     $01
0022E8 0FA2E8 -> $0027                DBGMFR          EQU     $0027
0022E8 0FA2E8 -> $0008                MC3             EQU     $08
0022E8 0FA2E8 -> $0004                MC2             EQU     $04
0022E8 0FA2E8 -> $0002                MC1             EQU     $02
0022E8 0FA2E8 -> $0001                MC0             EQU     $01
0022E8 0FA2E8 -> $0028                DBGXCTL         EQU     $0028
0022E8 0FA2E8 -> $0080                SZE             EQU     $80
0022E8 0FA2E8 -> $0040                SZ              EQU     $40
0022E8 0FA2E8 -> $0020                TAG             EQU     $20
0022E8 0FA2E8 -> $0010                BRK             EQU     $10
0022E8 0FA2E8 -> $0008                RW              EQU     $08
0022E8 0FA2E8 -> $0004                RWE             EQU     $04
0022E8 0FA2E8 -> $0002                SRC             EQU     $02
0022E8 0FA2E8 -> $0001                COMPE           EQU     $01
0022E8 0FA2E8 -> $0029                DBGXAH          EQU    $0029
0022E8 0FA2E8 -> $0040                DBGXA22         EQU    $40
0022E8 0FA2E8 -> $0020                DBGXA21         EQU    $20
0022E8 0FA2E8 -> $0010                DBGXA20         EQU    $10
0022E8 0FA2E8 -> $0008                DBGXA19         EQU    $08
0022E8 0FA2E8 -> $0004                DBGXA18         EQU    $04
0022E8 0FA2E8 -> $0002                DBGXA17         EQU    $02
0022E8 0FA2E8 -> $0001                DBGXA16         EQU    $01
0022E8 0FA2E8 -> $002A                DBGXAM          EQU     $002A
0022E8 0FA2E8 -> $0080                DBGXA15         EQU     $80
0022E8 0FA2E8 -> $0040                DBGXA14         EQU     $40
0022E8 0FA2E8 -> $0020                DBGXA13         EQU     $20
0022E8 0FA2E8 -> $0010                DBGXA12         EQU     $10
0022E8 0FA2E8 -> $0008                DBGXA11         EQU     $08
0022E8 0FA2E8 -> $0004                DBGXA10         EQU     $04
0022E8 0FA2E8 -> $0002                DBGXA9          EQU     $02
0022E8 0FA2E8 -> $0001                DBGXA8          EQU     $01
0022E8 0FA2E8 -> $002B                DBGXAL          EQU     $002B
0022E8 0FA2E8 -> $0080                DBGXA7          EQU     $80
0022E8 0FA2E8 -> $0040                DBGXA6          EQU     $40
0022E8 0FA2E8 -> $0020                DBGXA5          EQU     $20
0022E8 0FA2E8 -> $0010                DBGXA4          EQU     $10
0022E8 0FA2E8 -> $0008                DBGXA3          EQU     $08
0022E8 0FA2E8 -> $0004                DBGXA2          EQU     $04
0022E8 0FA2E8 -> $0002                DBGXA1          EQU     $02
0022E8 0FA2E8 -> $0001                DBGXA0          EQU     $01
0022E8 0FA2E8 -> $002C                DBGXDH          EQU     $002C
0022E8 0FA2E8 -> $0080                DBGXD15         EQU     $80
0022E8 0FA2E8 -> $0040                DBGXD14         EQU     $40
0022E8 0FA2E8 -> $0020                DBGXD13         EQU     $20
0022E8 0FA2E8 -> $0010                DBGXD12         EQU     $10
0022E8 0FA2E8 -> $0008                DBGXD11         EQU     $08
0022E8 0FA2E8 -> $0004                DBGXD10         EQU     $04
0022E8 0FA2E8 -> $0002                DBGXD9          EQU     $02
0022E8 0FA2E8 -> $0001                DBGXD8          EQU     $01
0022E8 0FA2E8 -> $002D                DBGXDL          EQU     $002D
0022E8 0FA2E8 -> $0080                DBGXD7          EQU     $80
0022E8 0FA2E8 -> $0040                DBGXD6          EQU     $40
0022E8 0FA2E8 -> $0020                DBGXD5          EQU     $20
0022E8 0FA2E8 -> $0010                DBGXD4          EQU     $10
0022E8 0FA2E8 -> $0008                DBGXD3          EQU     $08
0022E8 0FA2E8 -> $0004                DBGXD2          EQU     $04
0022E8 0FA2E8 -> $0002                DBGXD1          EQU     $02
0022E8 0FA2E8 -> $0001                DBGXD0          EQU     $01
0022E8 0FA2E8 -> $002E                DBGXDHM         EQU     $002E
0022E8 0FA2E8 -> $0080                DBGXDM15        EQU     $80
0022E8 0FA2E8 -> $0040                DBGXDM14        EQU     $40
0022E8 0FA2E8 -> $0020                DBGXDM13        EQU     $20
0022E8 0FA2E8 -> $0010                DBGXDM12        EQU     $10
0022E8 0FA2E8 -> $0008                DBGXDM11        EQU     $08
0022E8 0FA2E8 -> $0004                DBGXDM10        EQU     $04
0022E8 0FA2E8 -> $0002                DBGXDM9         EQU     $02
0022E8 0FA2E8 -> $0001                DBGXDM8         EQU     $01
0022E8 0FA2E8 -> $002F                DBGXDLM         EQU     $002F
0022E8 0FA2E8 -> $0080                DBGXDM7         EQU     $80
0022E8 0FA2E8 -> $0040                DBGXDM6         EQU     $40
0022E8 0FA2E8 -> $0020                DBGXDM5         EQU     $20
0022E8 0FA2E8 -> $0010                DBGXDM4         EQU     $10
0022E8 0FA2E8 -> $0008                DBGXDM3         EQU     $08
0022E8 0FA2E8 -> $0004                DBGXDM2         EQU     $04
0022E8 0FA2E8 -> $0002                DBGXDM1         EQU     $02
0022E8 0FA2E8 -> $0001                DBGXDM0         EQU     $01
                                      ;$0030 to $0031 reserved
0022E8 0FA2E8 -> $0032                PORTK           EQU     $0032
0022E8 0FA2E8 -> $0080                PTK7            EQU     $80
0022E8 0FA2E8 -> $0040                PTK6            EQU     $40
0022E8 0FA2E8 -> $0020                PTK5            EQU     $20
0022E8 0FA2E8 -> $0010                PTK4            EQU     $10
0022E8 0FA2E8 -> $0008                PTK3            EQU     $08
0022E8 0FA2E8 -> $0004                PTK2            EQU     $04
0022E8 0FA2E8 -> $0002                PTK1            EQU     $02
0022E8 0FA2E8 -> $0001                PK0             EQU     $01
0022E8 0FA2E8 -> $0080                PK7             EQU     $80
0022E8 0FA2E8 -> $0040                PK6             EQU     $40
0022E8 0FA2E8 -> $0020                PK5             EQU     $20
0022E8 0FA2E8 -> $0010                PK4             EQU     $10
0022E8 0FA2E8 -> $0008                PK3             EQU     $08
0022E8 0FA2E8 -> $0004                PK2             EQU     $04
0022E8 0FA2E8 -> $0002                PK1             EQU     $02
0022E8 0FA2E8 -> $0001                PK0             EQU     $01
0022E8 0FA2E8 -> $0033                DDRK            EQU     $0033
0022E8 0FA2E8 -> $0080                DDRK7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRK6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRK5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRK4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRK3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRK2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRK1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRK0           EQU     $01
0022E8 0FA2E8 -> $0034                SYNR            EQU     $0034
0022E8 0FA2E8 -> $0080                VCOFRQ1         EQU     $80
0022E8 0FA2E8 -> $0040                VCOFRQ0         EQU     $40
0022E8 0FA2E8 -> $0020                SYNDIV5         EQU     $20
0022E8 0FA2E8 -> $0010                SYNDIV4         EQU     $10
0022E8 0FA2E8 -> $0008                SYNDIV3         EQU     $08
0022E8 0FA2E8 -> $0004                SYNDIV2         EQU     $04
0022E8 0FA2E8 -> $0002                SYNDIV1         EQU     $02
0022E8 0FA2E8 -> $0001                SYNDIV0         EQU     $01
0022E8 0FA2E8 -> $0035                REFDV           EQU     $0035
0022E8 0FA2E8 -> $0080                REFFRQ1         EQU     $80
0022E8 0FA2E8 -> $0040                REFFRQ0         EQU     $40
0022E8 0FA2E8 -> $0008                REFDIV3         EQU     $08
0022E8 0FA2E8 -> $0004                REFDIV2         EQU     $04
0022E8 0FA2E8 -> $0002                REFDIV1         EQU     $02
0022E8 0FA2E8 -> $0001                REFDIV0         EQU     $01
0022E8 0FA2E8 -> $0036                POSTDIV         EQU     $0036
0022E8 0FA2E8 -> $0010                POSTDIV4        EQU     $10
0022E8 0FA2E8 -> $0008                POSTDIV3        EQU     $08
0022E8 0FA2E8 -> $0004                POSTDIV2        EQU     $04
0022E8 0FA2E8 -> $0002                POSTDIV1        EQU     $02
0022E8 0FA2E8 -> $0001                POSTDIV0        EQU     $01
0022E8 0FA2E8 -> $0037                CRGFLG          EQU     $0037
0022E8 0FA2E8 -> $0080                RTIF            EQU     $80
0022E8 0FA2E8 -> $0040                PORF            EQU     $40
0022E8 0FA2E8 -> $0020                LVRF            EQU     $20
0022E8 0FA2E8 -> $0010                LOCKIF          EQU     $10
0022E8 0FA2E8 -> $0008                LOCK            EQU     $08
0022E8 0FA2E8 -> $0004                ILAF            EQU     $04
0022E8 0FA2E8 -> $0002                SCMIF           EQU     $02
0022E8 0FA2E8 -> $0001                SCM             EQU     $01
0022E8 0FA2E8 -> $0038                CRGINT          EQU     $0038
0022E8 0FA2E8 -> $0080                RTIE            EQU     $80
0022E8 0FA2E8 -> $0010                LOCKIE          EQU     $10
0022E8 0FA2E8 -> $0002                SCMIE           EQU     $02
0022E8 0FA2E8 -> $0039                CLKSEL          EQU     $0039
0022E8 0FA2E8 -> $0080                PLLSEL          EQU     $80
0022E8 0FA2E8 -> $0040                PSTP            EQU     $40
0022E8 0FA2E8 -> $0020                XCLKS           EQU     $20
0022E8 0FA2E8 -> $0008                PLLWAI          EQU     $08
0022E8 0FA2E8 -> $0002                RTIWAI          EQU     $02
0022E8 0FA2E8 -> $0001                COPWAI          EQU     $01
0022E8 0FA2E8 -> $003A                PLLCTL          EQU     $003A
0022E8 0FA2E8 -> $0080                CME             EQU     $80
0022E8 0FA2E8 -> $0040                PLLON           EQU     $40
0022E8 0FA2E8 -> $0020                FM1             EQU     $20
0022E8 0FA2E8 -> $0010                FM0             EQU     $10
0022E8 0FA2E8 -> $0008                FSTWKP          EQU     $08
0022E8 0FA2E8 -> $0004                PRE             EQU     $04
0022E8 0FA2E8 -> $0002                PCE             EQU     $02
0022E8 0FA2E8 -> $0001                SCME            EQU     $01
0022E8 0FA2E8 -> $003B                RTICTL          EQU     $003B
0022E8 0FA2E8 -> $0080                RTDEC           EQU     $80
0022E8 0FA2E8 -> $0040                RTR6            EQU     $40
0022E8 0FA2E8 -> $0020                RTR5            EQU     $20
0022E8 0FA2E8 -> $0010                RTR4            EQU     $10
0022E8 0FA2E8 -> $0008                RTR3            EQU     $08
0022E8 0FA2E8 -> $0004                RTR2            EQU     $04
0022E8 0FA2E8 -> $0002                RTR1            EQU     $02
0022E8 0FA2E8 -> $0001                RTR0            EQU     $01
0022E8 0FA2E8 -> $003C                COPCTL          EQU     $003C
0022E8 0FA2E8 -> $0080                WCOP            EQU     $80
0022E8 0FA2E8 -> $0040                RSBCK           EQU     $40
0022E8 0FA2E8 -> $0020                WRTMASK         EQU     $20
0022E8 0FA2E8 -> $0004                CR2             EQU     $04
0022E8 0FA2E8 -> $0002                CR1             EQU     $02
0022E8 0FA2E8 -> $0001                CR0             EQU     $01
0022E8 0FA2E8 -> $003D                FORBYP          EQU     $003D
0022E8 0FA2E8 -> $003E                CTCTL           EQU     $003E
0022E8 0FA2E8 -> $003F                ARMCOP          EQU     $003F
0022E8 0FA2E8 -> $0040                TIOS            EQU     $0040
0022E8 0FA2E8 -> $0040                ECT_TIOS        EQU     $0040
0022E8 0FA2E8 -> $0080                IOS7            EQU     $80
0022E8 0FA2E8 -> $0040                IOS6            EQU     $40
0022E8 0FA2E8 -> $0020                IOS5            EQU     $20
0022E8 0FA2E8 -> $0010                IOS4            EQU     $10
0022E8 0FA2E8 -> $0008                IOS3            EQU     $08
0022E8 0FA2E8 -> $0004                IOS2            EQU     $04
0022E8 0FA2E8 -> $0002                IOS1            EQU     $02
0022E8 0FA2E8 -> $0001                IOS0            EQU     $01
0022E8 0FA2E8 -> $0041                TCFORC          EQU     $0041
0022E8 0FA2E8 -> $0041                ECT_TCFORC      EQU     $0041
0022E8 0FA2E8 -> $0080                FOC7            EQU     $80
0022E8 0FA2E8 -> $0040                FOC6            EQU     $40
0022E8 0FA2E8 -> $0020                FOC5            EQU     $20
0022E8 0FA2E8 -> $0010                FOC4            EQU     $10
0022E8 0FA2E8 -> $0008                FOC3            EQU     $08
0022E8 0FA2E8 -> $0004                FOC2            EQU     $04
0022E8 0FA2E8 -> $0002                FOC1            EQU     $02
0022E8 0FA2E8 -> $0001                FOC0            EQU     $01
0022E8 0FA2E8 -> $0042                TOC7M           EQU     $0042
0022E8 0FA2E8 -> $0042                ECT_TOC7M       EQU     $0042
0022E8 0FA2E8 -> $0080                OC7M7           EQU     $80
0022E8 0FA2E8 -> $0040                OC7M6           EQU     $40
0022E8 0FA2E8 -> $0020                OC7M5           EQU     $20
0022E8 0FA2E8 -> $0010                OC7M4           EQU     $10
0022E8 0FA2E8 -> $0008                OC7M3           EQU     $08
0022E8 0FA2E8 -> $0004                OC7M2           EQU     $04
0022E8 0FA2E8 -> $0002                OC7M1           EQU     $02
0022E8 0FA2E8 -> $0001                OC7M0           EQU     $01
0022E8 0FA2E8 -> $0043                TOC7D           EQU     $0043
0022E8 0FA2E8 -> $0043                ECT_TOC7D       EQU     $0043
0022E8 0FA2E8 -> $0080                OC7D7           EQU     $80
0022E8 0FA2E8 -> $0040                OC7D6           EQU     $40
0022E8 0FA2E8 -> $0020                OC7D5           EQU     $20
0022E8 0FA2E8 -> $0010                OC7D4           EQU     $10
0022E8 0FA2E8 -> $0008                OC7D3           EQU     $08
0022E8 0FA2E8 -> $0004                OC7D2           EQU     $04
0022E8 0FA2E8 -> $0002                OC7D1           EQU     $02
0022E8 0FA2E8 -> $0001                OC7D0           EQU     $01
0022E8 0FA2E8 -> $0044                TCNT            EQU     $0044
0022E8 0FA2E8 -> $0044                ECT_TCNT        EQU     $0044
0022E8 0FA2E8 -> $0046                TSCR1           EQU     $0046
0022E8 0FA2E8 -> $0046                ECT_TSCR1       EQU     $0046
0022E8 0FA2E8 -> $0080                TEN             EQU     $80
0022E8 0FA2E8 -> $0040                TSWAI           EQU     $40
0022E8 0FA2E8 -> $0020                TSFRZ           EQU     $20
0022E8 0FA2E8 -> $0010                TFFCA           EQU     $10
0022E8 0FA2E8 -> $0047                TTOV            EQU     $0047
0022E8 0FA2E8 -> $0047                ECT_TTOV        EQU     $0047
0022E8 0FA2E8 -> $0080                TOV7            EQU     $80
0022E8 0FA2E8 -> $0040                TOV6            EQU     $40
0022E8 0FA2E8 -> $0020                TOV5            EQU     $20
0022E8 0FA2E8 -> $0010                TOV4            EQU     $10
0022E8 0FA2E8 -> $0008                TOV3            EQU     $08
0022E8 0FA2E8 -> $0004                TOV2            EQU     $04
0022E8 0FA2E8 -> $0002                TOV1            EQU     $02
0022E8 0FA2E8 -> $0001                TOV0            EQU     $01
0022E8 0FA2E8 -> $0048                TCTL1           EQU     $0048
0022E8 0FA2E8 -> $0048                ECT_TCTL1       EQU     $0048
0022E8 0FA2E8 -> $0080                OM7             EQU     $80
0022E8 0FA2E8 -> $0040                OL7             EQU     $40
0022E8 0FA2E8 -> $0020                OM6             EQU     $20
0022E8 0FA2E8 -> $0010                OL6             EQU     $10
0022E8 0FA2E8 -> $0008                OM5             EQU     $08
0022E8 0FA2E8 -> $0004                OL5             EQU     $04
0022E8 0FA2E8 -> $0002                OM4             EQU     $02
0022E8 0FA2E8 -> $0001                OL4             EQU     $01
0022E8 0FA2E8 -> $0049                TCTL2           EQU     $0049
0022E8 0FA2E8 -> $0049                ECT_TCTL2       EQU     $0049
0022E8 0FA2E8 -> $0080                OM3             EQU     $80
0022E8 0FA2E8 -> $0040                OL3             EQU     $40
0022E8 0FA2E8 -> $0020                OM2             EQU     $20
0022E8 0FA2E8 -> $0010                OL2             EQU     $10
0022E8 0FA2E8 -> $0008                OM1             EQU     $08
0022E8 0FA2E8 -> $0004                OL1             EQU     $04
0022E8 0FA2E8 -> $0002                OM0             EQU     $02
0022E8 0FA2E8 -> $0001                OL0             EQU     $01
0022E8 0FA2E8 -> $004A                TCTL3           EQU     $004A
0022E8 0FA2E8 -> $004A                ECT_TCTL3       EQU     $004A
0022E8 0FA2E8 -> $0080                EDG7B           EQU     $80
0022E8 0FA2E8 -> $0040                EDG7A           EQU     $40
0022E8 0FA2E8 -> $0020                EDG6B           EQU     $20
0022E8 0FA2E8 -> $0010                EDG6A           EQU     $10
0022E8 0FA2E8 -> $0008                EDG5B           EQU     $08
0022E8 0FA2E8 -> $0004                EDG5A           EQU     $04
0022E8 0FA2E8 -> $0002                EDG4B           EQU     $02
0022E8 0FA2E8 -> $0001                EDG4A           EQU     $01
0022E8 0FA2E8 -> $004B                TCTL4           EQU     $004B
0022E8 0FA2E8 -> $004B                ECT_TCTL4       EQU     $004B
0022E8 0FA2E8 -> $0080                EDG3B           EQU     $80
0022E8 0FA2E8 -> $0040                EDG3A           EQU     $40
0022E8 0FA2E8 -> $0020                EDG2B           EQU     $20
0022E8 0FA2E8 -> $0010                EDG2A           EQU     $10
0022E8 0FA2E8 -> $0008                EDG1B           EQU     $08
0022E8 0FA2E8 -> $0004                EDG1A           EQU     $04
0022E8 0FA2E8 -> $0002                EDG0B           EQU     $02
0022E8 0FA2E8 -> $0001                EDG0A           EQU     $01
0022E8 0FA2E8 -> $004C                TIE             EQU     $004C
0022E8 0FA2E8 -> $004C                ECT_TIE         EQU     $004C
0022E8 0FA2E8 -> $0080                C7I             EQU     $80
0022E8 0FA2E8 -> $0040                C6I             EQU     $40
0022E8 0FA2E8 -> $0020                C5I             EQU     $20
0022E8 0FA2E8 -> $0010                C4I             EQU     $10
0022E8 0FA2E8 -> $0008                C3I             EQU     $08
0022E8 0FA2E8 -> $0004                C2I             EQU     $04
0022E8 0FA2E8 -> $0002                C1I             EQU     $02
0022E8 0FA2E8 -> $0001                C0I             EQU     $01
0022E8 0FA2E8 -> $004D                TSCR2           EQU     $004D
0022E8 0FA2E8 -> $004D                ECT_TSCR2       EQU     $004D
0022E8 0FA2E8 -> $0080                TOI             EQU     $80
0022E8 0FA2E8 -> $0008                TCRE            EQU     $08
0022E8 0FA2E8 -> $0004                PR2             EQU     $04
0022E8 0FA2E8 -> $0002                PR1             EQU     $02
0022E8 0FA2E8 -> $0001                PR0             EQU     $01
0022E8 0FA2E8 -> $004E                TFLG1           EQU     $004E
0022E8 0FA2E8 -> $004E                ECT_TFLG1       EQU     $004E
0022E8 0FA2E8 -> $0080                C7F             EQU     $80
0022E8 0FA2E8 -> $0040                C6F             EQU     $40
0022E8 0FA2E8 -> $0020                C5F             EQU     $20
0022E8 0FA2E8 -> $0010                C4F             EQU     $10
0022E8 0FA2E8 -> $0008                C3F             EQU     $08
0022E8 0FA2E8 -> $0004                C2F             EQU     $04
0022E8 0FA2E8 -> $0002                C1F             EQU     $02
0022E8 0FA2E8 -> $0001                C0F             EQU     $01
0022E8 0FA2E8 -> $004F                TFLG2           EQU     $004F
0022E8 0FA2E8 -> $004F                ECT_TFLG2       EQU     $004F
0022E8 0FA2E8 -> $0080                TOF             EQU     $80
0022E8 0FA2E8 -> $0050                TC0             EQU     $0050
0022E8 0FA2E8 -> $0050                ECT_TC0         EQU     $0050
0022E8 0FA2E8 -> $0052                TC1             EQU     $0052
0022E8 0FA2E8 -> $0052                ECT_TC1         EQU     $0052
0022E8 0FA2E8 -> $0054                TC2             EQU     $0054
0022E8 0FA2E8 -> $0056                ECT_TC3         EQU     $0056
0022E8 0FA2E8 -> $0056                TC3             EQU     $0056
0022E8 0FA2E8 -> $0058                ECT_TC4         EQU     $0058
0022E8 0FA2E8 -> $0058                TC4             EQU     $0058
0022E8 0FA2E8 -> $005A                ECT_TC5         EQU     $005A
0022E8 0FA2E8 -> $005A                TC5             EQU     $005A
0022E8 0FA2E8 -> $005C                ECT_TC6         EQU     $005C
0022E8 0FA2E8 -> $005E                TC7             EQU     $005E
0022E8 0FA2E8 -> $005E                ECT_TC7         EQU     $005E
0022E8 0FA2E8 -> $0060                PACTL           EQU     $0060
0022E8 0FA2E8 -> $0060                ECT_PACTL       EQU     $0060
0022E8 0FA2E8 -> $0040                PAEN            EQU     $40
0022E8 0FA2E8 -> $0020                PAMOD           EQU     $20
0022E8 0FA2E8 -> $0010                PEDGE           EQU     $10
0022E8 0FA2E8 -> $0008                CLK1            EQU     $08
0022E8 0FA2E8 -> $0004                CLK0            EQU     $04
0022E8 0FA2E8 -> $0002                PAOVI           EQU     $02
0022E8 0FA2E8 -> $0001                PAI             EQU     $01
0022E8 0FA2E8 -> $0061                PAFLG           EQU     $0061
0022E8 0FA2E8 -> $0061                ECT_PAFLG       EQU     $0061
0022E8 0FA2E8 -> $0002                PAOVF           EQU     $02
0022E8 0FA2E8 -> $0001                PAIF            EQU     $01
0022E8 0FA2E8 -> $0062                PACNT           EQU     $0062
0022E8 0FA2E8 -> $0062                ECT_PACNT       EQU     $0062
0022E8 0FA2E8 -> $0062                PACN3           EQU     $0062
0022E8 0FA2E8 -> $0062                ECT_PACN3       EQU     $0062
0022E8 0FA2E8 -> $0063                PACN2           EQU     $0063
0022E8 0FA2E8 -> $0063                ECT_PACN2       EQU     $0063
0022E8 0FA2E8 -> $0064                PACN1           EQU     $0064
0022E8 0FA2E8 -> $0064                ECT_PACN1       EQU     $0064
0022E8 0FA2E8 -> $0065                PACN0           EQU     $0065
0022E8 0FA2E8 -> $0065                ECT_PACN0       EQU     $0065
0022E8 0FA2E8 -> $0066                MCCTL           EQU     $0066
0022E8 0FA2E8 -> $0066                ECT_MCCTL       EQU     $0066
0022E8 0FA2E8 -> $0080                MCZI            EQU     $80
0022E8 0FA2E8 -> $0040                MODMC           EQU     $40
0022E8 0FA2E8 -> $0020                RDMCL           EQU     $20
0022E8 0FA2E8 -> $0010                ICLAT           EQU     $10
0022E8 0FA2E8 -> $0008                FLMC            EQU     $08
0022E8 0FA2E8 -> $0004                MCEN            EQU     $04
0022E8 0FA2E8 -> $0002                MCPR1           EQU     $02
0022E8 0FA2E8 -> $0001                MCPR0           EQU     $01
0022E8 0FA2E8 -> $0067                MCFLG           EQU     $0067
0022E8 0FA2E8 -> $0067                ECT_MCFLG       EQU     $0067
0022E8 0FA2E8 -> $0080                MCZF            EQU     $80
0022E8 0FA2E8 -> $0008                POLF3           EQU     $08
0022E8 0FA2E8 -> $0004                POLF2           EQU     $04
0022E8 0FA2E8 -> $0002                POLF1           EQU     $02
0022E8 0FA2E8 -> $0001                POLF0           EQU     $01
0022E8 0FA2E8 -> $0068                ICPAR           EQU     $0068
0022E8 0FA2E8 -> $0068                ECT_ICPAR       EQU     $0068
0022E8 0FA2E8 -> $0008                PA3EN           EQU     $08
0022E8 0FA2E8 -> $0004                PA2EN           EQU     $04
0022E8 0FA2E8 -> $0002                PA1EN           EQU     $02
0022E8 0FA2E8 -> $0001                PA0EN           EQU     $01
0022E8 0FA2E8 -> $0069                DLYCT           EQU     $0069
0022E8 0FA2E8 -> $0069                ECT_DLYCT       EQU     $0069
0022E8 0FA2E8 -> $0080                DLY7            EQU     $80
0022E8 0FA2E8 -> $0040                DLY6            EQU     $40
0022E8 0FA2E8 -> $0020                DLY5            EQU     $20
0022E8 0FA2E8 -> $0010                DLY4            EQU     $10
0022E8 0FA2E8 -> $0008                DLY3            EQU     $08
0022E8 0FA2E8 -> $0004                DLY2            EQU     $04
0022E8 0FA2E8 -> $0002                DLY1            EQU     $02
0022E8 0FA2E8 -> $0001                DLY0            EQU     $01
0022E8 0FA2E8 -> $006A                ICOVW           EQU     $006A
0022E8 0FA2E8 -> $006A                ECT_ICOVW       EQU     $006A
0022E8 0FA2E8 -> $0080                NOVW7           EQU     $80
0022E8 0FA2E8 -> $0040                NOVW6           EQU     $40
0022E8 0FA2E8 -> $0020                NOVW5           EQU     $20
0022E8 0FA2E8 -> $0010                NOVW4           EQU     $10
0022E8 0FA2E8 -> $0008                NOVW3           EQU     $08
0022E8 0FA2E8 -> $0004                NOVW2           EQU     $04
0022E8 0FA2E8 -> $0002                NOVW1           EQU     $02
0022E8 0FA2E8 -> $0001                NOVW0           EQU     $01
0022E8 0FA2E8 -> $006B                ICSYS           EQU     $006B
0022E8 0FA2E8 -> $006B                ECT_ICSYS       EQU     $006B
0022E8 0FA2E8 -> $0080                SH37            EQU     $80
0022E8 0FA2E8 -> $0040                SH26            EQU     $40
0022E8 0FA2E8 -> $0020                SH15            EQU     $20
0022E8 0FA2E8 -> $0010                SH04            EQU     $10
0022E8 0FA2E8 -> $0008                TFMOD           EQU     $08
0022E8 0FA2E8 -> $0004                PACMX           EQU     $04
0022E8 0FA2E8 -> $0002                BUFEN           EQU     $02
0022E8 0FA2E8 -> $0001                LATQ            EQU     $01
0022E8 0FA2E8 -> $006C                OCPD            EQU     $006C
0022E8 0FA2E8 -> $006C                ECT_OCPD        EQU     $006C
0022E8 0FA2E8 -> $0080                OCPD7           EQU     $80
0022E8 0FA2E8 -> $0040                OCPD6           EQU     $40
0022E8 0FA2E8 -> $0020                OCPD5           EQU     $20
0022E8 0FA2E8 -> $0010                OCPD4           EQU     $10
0022E8 0FA2E8 -> $0008                OCPD3           EQU     $08
0022E8 0FA2E8 -> $0004                OCPD2           EQU     $04
0022E8 0FA2E8 -> $0002                OCPD1           EQU     $02
0022E8 0FA2E8 -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
0022E8 0FA2E8 -> $006E                PTPSR           EQU     $006E
0022E8 0FA2E8 -> $006E                ECT_PTPSR       EQU     $006E
0022E8 0FA2E8 -> $0080                PTPS7           EQU     $80
0022E8 0FA2E8 -> $0040                PTPS6           EQU     $40
0022E8 0FA2E8 -> $0020                PTPS5           EQU     $20
0022E8 0FA2E8 -> $0010                PTPS4           EQU     $10
0022E8 0FA2E8 -> $0008                PTPS3           EQU     $08
0022E8 0FA2E8 -> $0004                PTPS2           EQU     $04
0022E8 0FA2E8 -> $0002                PTPS1           EQU     $02
0022E8 0FA2E8 -> $0001                PTPS0           EQU     $01
0022E8 0FA2E8 -> $006F                PTMCPSR         EQU     $006F
0022E8 0FA2E8 -> $006F                ECT_PTMCPSR             EQU     $006F
0022E8 0FA2E8 -> $0001                PTMPS0          EQU     $01
0022E8 0FA2E8 -> $0002                PTMPS1          EQU     $02
0022E8 0FA2E8 -> $0004                PTMPS2          EQU     $04
0022E8 0FA2E8 -> $0008                PTMPS3          EQU     $08
0022E8 0FA2E8 -> $0010                PTMPS4          EQU     $10
0022E8 0FA2E8 -> $0020                PTMPS5          EQU     $20
0022E8 0FA2E8 -> $0040                PTMPS6          EQU     $40
0022E8 0FA2E8 -> $0080                PTMPS7          EQU     $80
0022E8 0FA2E8 -> $0070                PBCTL           EQU     $0070
0022E8 0FA2E8 -> $0070                ECT_PBCTL       EQU     $0070
0022E8 0FA2E8 -> $0040                PBEN            EQU     $40
0022E8 0FA2E8 -> $0002                PBOVI           EQU     $02
0022E8 0FA2E8 -> $0071                PBFLG           EQU     $00071
0022E8 0FA2E8 -> $0071                ECT_PBFLG       EQU     $00071
0022E8 0FA2E8 -> $0002                PBOVF           EQU     $02
0022E8 0FA2E8 -> $0072                PA32H           EQU     $0072
0022E8 0FA2E8 -> $0072                ECT_PA32H       EQU     $0072
0022E8 0FA2E8 -> $0072                PA3H            EQU     $0072
0022E8 0FA2E8 -> $0073                PA2H            EQU     $0073
0022E8 0FA2E8 -> $0074                PA10H           EQU     $0074
0022E8 0FA2E8 -> $0074                ECT_PA10H       EQU     $0074
0022E8 0FA2E8 -> $0074                PA1H            EQU     $0074
0022E8 0FA2E8 -> $0075                PA0H            EQU     $0075
0022E8 0FA2E8 -> $0076                MCCNT           EQU     $0076
0022E8 0FA2E8 -> $0076                ECT_MCCNT       EQU     $0076
0022E8 0FA2E8 -> $0078                TC0H            EQU     $0078
0022E8 0FA2E8 -> $0078                ECT_TC0H        EQU     $0078
0022E8 0FA2E8 -> $007A                TC1H            EQU     $007A
0022E8 0FA2E8 -> $007A                ECT_TC1H        EQU     $007A
0022E8 0FA2E8 -> $007C                TC2H            EQU     $007C
0022E8 0FA2E8 -> $007C                ECT_TC2H        EQU     $007C
0022E8 0FA2E8 -> $007E                TC3H            EQU     $007E
0022E8 0FA2E8 -> $007E                ECT_TC3H        EQU     $007E
0022E8 0FA2E8 -> $0080                ATD1CTL0        EQU     $0080
0022E8 0FA2E8 -> $0008                WRAP3           EQU     $08
0022E8 0FA2E8 -> $0004                WRAP2           EQU     $04
0022E8 0FA2E8 -> $0002                WRAP1           EQU     $02
0022E8 0FA2E8 -> $0001                WRAP0           EQU     $01
0022E8 0FA2E8 -> $0081                ATD1CTL1        EQU     $0081
0022E8 0FA2E8 -> $0080                ETRIGSEL        EQU     $80
0022E8 0FA2E8 -> $0040                SRES1           EQU     $40
0022E8 0FA2E8 -> $0020                SRES0           EQU     $20
0022E8 0FA2E8 -> $0010                DIS             EQU     $10
0022E8 0FA2E8 -> $0008                ETRIGCH3        EQU     $08
0022E8 0FA2E8 -> $0004                ETRIGCH2        EQU     $04
0022E8 0FA2E8 -> $0002                ETRIGCH1        EQU     $02
0022E8 0FA2E8 -> $0001                ETRIGCH0        EQU     $01
0022E8 0FA2E8 -> $0082                ATD1CTL2        EQU     $0082
0022E8 0FA2E8 -> $0040                AFFC            EQU     $40
0022E8 0FA2E8 -> $0020                ICLKSTP         EQU     $20
0022E8 0FA2E8 -> $0010                ETRIGLE         EQU     $10
0022E8 0FA2E8 -> $0008                ETRIGP          EQU     $08
0022E8 0FA2E8 -> $0004                ETRIGE          EQU     $04
0022E8 0FA2E8 -> $0002                ASCIE           EQU     $02
0022E8 0FA2E8 -> $0001                ASCIF           EQU     $01
0022E8 0FA2E8 -> $0083                ATD1CTL3        EQU     $0083
0022E8 0FA2E8 -> $0080                DJM             EQU     $80
0022E8 0FA2E8 -> $0040                S8C             EQU     $40
0022E8 0FA2E8 -> $0020                S4C             EQU     $20
0022E8 0FA2E8 -> $0010                S2C             EQU     $10
0022E8 0FA2E8 -> $0008                S1C             EQU     $08
0022E8 0FA2E8 -> $0004                FIFO            EQU     $04
0022E8 0FA2E8 -> $0002                FRZ1            EQU     $02
0022E8 0FA2E8 -> $0001                FRZ0            EQU     $01
0022E8 0FA2E8 -> $0084                ATD1CTL4        EQU     $0084
0022E8 0FA2E8 -> $0080                SMP2            EQU     $80
0022E8 0FA2E8 -> $0040                SMP1            EQU     $40
0022E8 0FA2E8 -> $0020                SMP0            EQU     $20
0022E8 0FA2E8 -> $0010                PRS4            EQU     $10
0022E8 0FA2E8 -> $0008                PRS3            EQU     $08
0022E8 0FA2E8 -> $0004                PRS2            EQU     $04
0022E8 0FA2E8 -> $0002                PRS1            EQU     $02
0022E8 0FA2E8 -> $0001                PRS0            EQU     $01
0022E8 0FA2E8 -> $0085                ATD1CTL5        EQU     $0085
0022E8 0FA2E8 -> $0040                SC              EQU     $40
0022E8 0FA2E8 -> $0020                SCAN            EQU     $20
0022E8 0FA2E8 -> $0010                MULT            EQU     $10
0022E8 0FA2E8 -> $0008                CD              EQU     $08
0022E8 0FA2E8 -> $0004                CC              EQU     $04
0022E8 0FA2E8 -> $0002                CB              EQU     $02
0022E8 0FA2E8 -> $0001                CA              EQU     $01
0022E8 0FA2E8 -> $0086                ATD1STAT0       EQU     $0086
0022E8 0FA2E8 -> $0080                SCF             EQU     $80
0022E8 0FA2E8 -> $0020                ETORF           EQU     $20
0022E8 0FA2E8 -> $0010                FIFOR           EQU     $10
0022E8 0FA2E8 -> $0004                CC2             EQU     $04
0022E8 0FA2E8 -> $0002                CC1             EQU     $02
0022E8 0FA2E8 -> $0001                CC0             EQU     $01
                                      ;$0087 reserved
0022E8 0FA2E8 -> $0088                ATD1CMPEH       EQU     $0088
0022E8 0FA2E8 -> $0080                CMPE15          EQU     $80
0022E8 0FA2E8 -> $0040                CMPE14          EQU     $40
0022E8 0FA2E8 -> $0020                CMPE13          EQU     $20
0022E8 0FA2E8 -> $0010                CMPE12          EQU     $10
0022E8 0FA2E8 -> $0008                CMPE11          EQU     $08
0022E8 0FA2E8 -> $0004                CMPE10          EQU     $04
0022E8 0FA2E8 -> $0002                CMPE9           EQU     $02
0022E8 0FA2E8 -> $0001                CMPE8           EQU     $01
0022E8 0FA2E8 -> $0089                ATD1CMPEL       EQU     $0089
0022E8 0FA2E8 -> $0080                CMPE7           EQU     $80
0022E8 0FA2E8 -> $0040                CMPE6           EQU     $40
0022E8 0FA2E8 -> $0020                CMPE5           EQU     $20
0022E8 0FA2E8 -> $0010                CMPE4           EQU     $10
0022E8 0FA2E8 -> $0008                CMPE3           EQU     $08
0022E8 0FA2E8 -> $0004                CMPE2           EQU     $04
0022E8 0FA2E8 -> $0002                CMPE1           EQU     $02
0022E8 0FA2E8 -> $0001                CMPE0           EQU     $01
0022E8 0FA2E8 -> $008A                ATD1STAT2H      EQU     $008A
0022E8 0FA2E8 -> $0080                CCF15           EQU     $80
0022E8 0FA2E8 -> $0040                CCF14           EQU     $40
0022E8 0FA2E8 -> $0020                CCF13           EQU     $20
0022E8 0FA2E8 -> $0010                CCF12           EQU     $10
0022E8 0FA2E8 -> $0008                CCF11           EQU     $08
0022E8 0FA2E8 -> $0004                CCF10           EQU     $04
0022E8 0FA2E8 -> $0002                CCF9            EQU     $02
0022E8 0FA2E8 -> $0001                CCF8            EQU     $01
0022E8 0FA2E8 -> $008B                ATD1STAT2L      EQU     $008B
0022E8 0FA2E8 -> $0080                CCF7            EQU     $80
0022E8 0FA2E8 -> $0040                CCF6            EQU     $40
0022E8 0FA2E8 -> $0020                CCF5            EQU     $20
0022E8 0FA2E8 -> $0010                CCF4            EQU     $10
0022E8 0FA2E8 -> $0008                CCF3            EQU     $08
0022E8 0FA2E8 -> $0004                CCF2            EQU     $04
0022E8 0FA2E8 -> $0002                CCF1            EQU     $02
0022E8 0FA2E8 -> $0001                CCF0            EQU     $01
0022E8 0FA2E8 -> $008C                ATD1DIENH       EQU     $008C
0022E8 0FA2E8 -> $0080                IEN15           EQU     $80
0022E8 0FA2E8 -> $0040                IEN14           EQU     $40
0022E8 0FA2E8 -> $0020                IEN13           EQU     $20
0022E8 0FA2E8 -> $0010                IEN12           EQU     $10
0022E8 0FA2E8 -> $0008                IEN11           EQU     $08
0022E8 0FA2E8 -> $0004                IEN10           EQU     $04
0022E8 0FA2E8 -> $0002                IEN9            EQU     $02
0022E8 0FA2E8 -> $0001                IEN8            EQU     $01
0022E8 0FA2E8 -> $008D                ATD1DIENL       EQU     $008D
0022E8 0FA2E8 -> $0080                IEN7            EQU     $80
0022E8 0FA2E8 -> $0040                IEN6            EQU     $40
0022E8 0FA2E8 -> $0020                IEN5            EQU     $20
0022E8 0FA2E8 -> $0010                IEN4            EQU     $10
0022E8 0FA2E8 -> $0008                IEN3            EQU     $08
0022E8 0FA2E8 -> $0004                IEN2            EQU     $04
0022E8 0FA2E8 -> $0002                IEN1            EQU     $02
0022E8 0FA2E8 -> $0001                IEN0            EQU     $01
0022E8 0FA2E8 -> $008E                ATD1CMPHTH      EQU     $008E
0022E8 0FA2E8 -> $0080                CMPHT15         EQU     $80
0022E8 0FA2E8 -> $0040                CMPHT14         EQU     $40
0022E8 0FA2E8 -> $0020                CMPHT13         EQU     $20
0022E8 0FA2E8 -> $0010                CMPHT12         EQU     $10
0022E8 0FA2E8 -> $0008                CMPHT11         EQU     $08
0022E8 0FA2E8 -> $0004                CMPHT10         EQU     $04
0022E8 0FA2E8 -> $0002                CMPHT9          EQU     $02
0022E8 0FA2E8 -> $0001                CMPHT8          EQU     $01
0022E8 0FA2E8 -> $008F                ATD1CMPHTL      EQU     $008F
0022E8 0FA2E8 -> $0001                CMPHT0          EQU     $01
0022E8 0FA2E8 -> $0002                CMPHT1          EQU     $02
0022E8 0FA2E8 -> $0004                CMPHT2          EQU     $04
0022E8 0FA2E8 -> $0008                CMPHT3          EQU     $08
0022E8 0FA2E8 -> $0010                CMPHT4          EQU     $10
0022E8 0FA2E8 -> $0020                CMPHT5          EQU     $20
0022E8 0FA2E8 -> $0040                CMPHT6          EQU     $40
0022E8 0FA2E8 -> $0080                CMPHT7          EQU     $80
0022E8 0FA2E8 -> $0090                ATD1DR0         EQU     $0090
0022E8 0FA2E8 -> $0090                ATD1DR0H        EQU     $0090
0022E8 0FA2E8 -> $0091                ATD1DR0L        EQU     $0091
0022E8 0FA2E8 -> $0092                ATD1DR1         EQU     $0092
0022E8 0FA2E8 -> $0092                ATD1DR1H        EQU     $0092
0022E8 0FA2E8 -> $0093                ATD1DR1L        EQU     $0093
0022E8 0FA2E8 -> $0094                ATD1DR2         EQU     $0094
0022E8 0FA2E8 -> $0094                ATD1DR2H        EQU     $0094
0022E8 0FA2E8 -> $0095                ATD1DR2L        EQU     $0095
0022E8 0FA2E8 -> $0096                ATD1DR3         EQU     $0096
0022E8 0FA2E8 -> $0096                ATD1DR3H        EQU     $0096
0022E8 0FA2E8 -> $0097                ATD1DR3L        EQU     $0097
0022E8 0FA2E8 -> $0098                ATD1DR4         EQU     $0098
0022E8 0FA2E8 -> $0098                ATD1DR4H        EQU     $0098
0022E8 0FA2E8 -> $0099                ATD1DR4L        EQU     $0099
0022E8 0FA2E8 -> $009A                ATD1DR5         EQU     $009A
0022E8 0FA2E8 -> $009A                ATD1DR5H        EQU     $009A
0022E8 0FA2E8 -> $009B                ATD1DR5L        EQU     $009B
0022E8 0FA2E8 -> $009C                ATD1DR6         EQU     $009C
0022E8 0FA2E8 -> $009C                ATD1DR6H        EQU     $009C
0022E8 0FA2E8 -> $009D                ATD1DR6L        EQU     $009D
0022E8 0FA2E8 -> $009E                ATD1DR7         EQU     $009E
0022E8 0FA2E8 -> $009E                ATD1DR7H        EQU     $009E
0022E8 0FA2E8 -> $009F                ATD1DR7L        EQU     $009F
0022E8 0FA2E8 -> $00A0                ATD1DR8         EQU     $00A0
0022E8 0FA2E8 -> $00A0                ATD1DR8H        EQU     $00A0
0022E8 0FA2E8 -> $00A1                ATD1DR8L        EQU     $00A1
0022E8 0FA2E8 -> $00A2                ATD1DR9         EQU     $00A2
0022E8 0FA2E8 -> $00A2                ATD1DR9H        EQU     $00A2
0022E8 0FA2E8 -> $00A3                ATD1DR9L        EQU     $00A3
0022E8 0FA2E8 -> $00A3                ATD1DR10        EQU     $00A3
0022E8 0FA2E8 -> $00A3                ATD1DR10H       EQU     $00A3
0022E8 0FA2E8 -> $00A5                ATD1DR10L       EQU     $00A5
0022E8 0FA2E8 -> $00A6                ATD1DR11        EQU     $00A6
0022E8 0FA2E8 -> $00A6                ATD1DR11H       EQU     $00A6
0022E8 0FA2E8 -> $00A7                ATD1DR11L       EQU     $00A7
0022E8 0FA2E8 -> $00A8                ATD1DR12        EQU     $00A8
0022E8 0FA2E8 -> $00A8                ATD1DR12H       EQU     $00A8
0022E8 0FA2E8 -> $00A9                ATD1DR12L       EQU     $00A9
0022E8 0FA2E8 -> $00AA                ATD1DR13        EQU     $00AA
0022E8 0FA2E8 -> $00AA                ATD1DR13H       EQU     $00AA
0022E8 0FA2E8 -> $00AB                ATD1DR13L       EQU     $00AB
0022E8 0FA2E8 -> $00AC                ATD1DR14        EQU     $00AC
0022E8 0FA2E8 -> $00AC                ATD1DR14H       EQU     $00AC
0022E8 0FA2E8 -> $00AD                ATD1DR14L       EQU     $00AD
0022E8 0FA2E8 -> $00AE                ATD1DR15        EQU     $00AE
0022E8 0FA2E8 -> $00AE                ATD1DR15H       EQU     $00AE
0022E8 0FA2E8 -> $00AF                ATD1DR15L       EQU     $00AF
0022E8 0FA2E8 -> $00B0                I1BAD           EQU     $00B0
0022E8 0FA2E8 -> $0080                ADR7            EQU     $80
0022E8 0FA2E8 -> $0040                ADR6            EQU     $40
0022E8 0FA2E8 -> $0020                ADR5            EQU     $20
0022E8 0FA2E8 -> $0010                ADR4            EQU     $10
0022E8 0FA2E8 -> $0008                ADR3            EQU     $08
0022E8 0FA2E8 -> $0004                ADR2            EQU     $04
0022E8 0FA2E8 -> $0002                ADR1            EQU     $02
0022E8 0FA2E8 -> $00B1                I1BFD           EQU     $00B1
0022E8 0FA2E8 -> $0080                IBC7            EQU     $80
0022E8 0FA2E8 -> $0040                IBC6            EQU     $40
0022E8 0FA2E8 -> $0020                IBC5            EQU     $20
0022E8 0FA2E8 -> $0010                IBC4            EQU     $10
0022E8 0FA2E8 -> $0008                IBC3            EQU     $08
0022E8 0FA2E8 -> $0004                IBC2            EQU     $04
0022E8 0FA2E8 -> $0002                IBC1            EQU     $02
0022E8 0FA2E8 -> $0001                IBC0            EQU     $01
0022E8 0FA2E8 -> $00B2                I1BCR           EQU     $00B2
0022E8 0FA2E8 -> $0080                IBEN            EQU     $80
0022E8 0FA2E8 -> $0040                IBIE            EQU     $40
0022E8 0FA2E8 -> $0020                SL              EQU     $20
0022E8 0FA2E8 -> $0010                RX              EQU     $10
0022E8 0FA2E8 -> $0008                TXAK            EQU     $08
0022E8 0FA2E8 -> $0004                RSTA            EQU     $04
0022E8 0FA2E8 -> $0001                IBSWAI          EQU     $01
0022E8 0FA2E8 -> $00B3                I1BSR           EQU     $00B3
0022E8 0FA2E8 -> $0080                TCF             EQU     $80
0022E8 0FA2E8 -> $0040                IAAS            EQU     $40
0022E8 0FA2E8 -> $0020                IBB             EQU     $20
0022E8 0FA2E8 -> $0001                RXAK            EQU     $01
0022E8 0FA2E8 -> $0004                SRW             EQU     $04
0022E8 0FA2E8 -> $0002                IBIF            EQU     $02
0022E8 0FA2E8 -> $00B4                I1BDR           EQU     $00B4
0022E8 0FA2E8 -> $00B5                I1BCR2          EQU     $00B5
0022E8 0FA2E8 -> $0080                GCEN            EQU     $80
0022E8 0FA2E8 -> $0040                ADTYPE          EQU     $40
0022E8 0FA2E8 -> $0004                ADR2            EQU     $04
0022E8 0FA2E8 -> $0002                ADR1            EQU     $02
0022E8 0FA2E8 -> $0001                ADR0            EQU     $01
                                      ;$00B6 to $00B7 reserved
0022E8 0FA2E8 -> $00B8                SCI2BDH         EQU     $00B8
0022E8 0FA2E8 -> $0080                IREN            EQU     $80
0022E8 0FA2E8 -> $0040                TNP1            EQU     $40
0022E8 0FA2E8 -> $0020                TNP0            EQU     $20
0022E8 0FA2E8 -> $0010                SBR12           EQU     $10
0022E8 0FA2E8 -> $0008                SBR11           EQU     $08
0022E8 0FA2E8 -> $0004                SBR10           EQU     $04
0022E8 0FA2E8 -> $0002                SBR9            EQU     $02
0022E8 0FA2E8 -> $0001                SBR8            EQU     $01
0022E8 0FA2E8 -> $00B8                SCI2ASR1        EQU     $00B8
0022E8 0FA2E8 -> $0080                RXEDGIF         EQU     $80
0022E8 0FA2E8 -> $0004                BERRV           EQU     $04
0022E8 0FA2E8 -> $0002                BERRIF          EQU     $02
0022E8 0FA2E8 -> $0001                BKDIF           EQU     $01
0022E8 0FA2E8 -> $00B9                SCI2BDL         EQU     $00B9
0022E8 0FA2E8 -> $0080                SBR7            EQU     $80
0022E8 0FA2E8 -> $0040                SBR6            EQU     $40
0022E8 0FA2E8 -> $0020                SBR5            EQU     $20
0022E8 0FA2E8 -> $0010                SBR4            EQU     $10
0022E8 0FA2E8 -> $0008                SBR3            EQU     $08
0022E8 0FA2E8 -> $0004                SBR2            EQU     $04
0022E8 0FA2E8 -> $0002                SBR1            EQU     $02
0022E8 0FA2E8 -> $0001                SBR0            EQU     $01
0022E8 0FA2E8 -> $00B9                SCI2ACR1        EQU     $00B9
0022E8 0FA2E8 -> $0080                RXEDGIE         EQU     $80
0022E8 0FA2E8 -> $0002                BERRIE          EQU     $02
0022E8 0FA2E8 -> $0001                BKDIE           EQU     $01
0022E8 0FA2E8 -> $00BA                SCI2CR1         EQU     $00BA
0022E8 0FA2E8 -> $0080                LOOPS           EQU     $80
0022E8 0FA2E8 -> $0040                SCISWAI         EQU     $40
0022E8 0FA2E8 -> $0020                RSRC            EQU     $20
0022E8 0FA2E8 -> $0010                M               EQU     $10
0022E8 0FA2E8 -> $0008                WAKE            EQU     $08
0022E8 0FA2E8 -> $0004                ILT             EQU     $04
0022E8 0FA2E8 -> $0002                PE              EQU     $02
0022E8 0FA2E8 -> $0001                PT              EQU     $01
0022E8 0FA2E8 -> $00BA                SCI2ACR2        EQU     $00BA
0022E8 0FA2E8 -> $0004                BERRM1          EQU     $04
0022E8 0FA2E8 -> $0002                BERRM0          EQU     $02
0022E8 0FA2E8 -> $0001                BKDFE           EQU     $01
0022E8 0FA2E8 -> $00BB                SCI2CR2         EQU     $00BB
0022E8 0FA2E8 -> $0080                TXIE            EQU     $80
0022E8 0FA2E8 -> $0040                TCIE            EQU     $40
0022E8 0FA2E8 -> $0020                RIE             EQU     $20
0022E8 0FA2E8 -> $0010                ILIE            EQU     $10
0022E8 0FA2E8 -> $0008                TE              EQU     $08
0022E8 0FA2E8 -> $0004                RE              EQU     $04
0022E8 0FA2E8 -> $0002                RWU             EQU     $02
0022E8 0FA2E8 -> $0001                SBK             EQU     $01
0022E8 0FA2E8 -> $00BC                SCI2SR1         EQU     $00BC
0022E8 0FA2E8 -> $0080                TDRE            EQU     $80
0022E8 0FA2E8 -> $0040                TC              EQU     $40
0022E8 0FA2E8 -> $0020                RDRFF           EQU     $20
0022E8 0FA2E8 -> $0010                IDLE            EQU     $10
0022E8 0FA2E8 -> $0008                OR              EQU     $08
0022E8 0FA2E8 -> $0004                NF              EQU     $04
0022E8 0FA2E8 -> $0002                FE              EQU     $02
0022E8 0FA2E8 -> $0001                PF              EQU     $01
0022E8 0FA2E8 -> $00BD                SCI2SR2         EQU     $00BD
0022E8 0FA2E8 -> $0004                BRK13           EQU     $04
0022E8 0FA2E8 -> $0002                TXDIR           EQU     $02
0022E8 0FA2E8 -> $0001                RAF             EQU     $01
0022E8 0FA2E8 -> $00BE                SCI2DRH         EQU     $00BE
0022E8 0FA2E8 -> $0080                R8              EQU     $80
0022E8 0FA2E8 -> $0040                T8              EQU     $40
0022E8 0FA2E8 -> $00BF                SCI2DRL         EQU     $00BF
0022E8 0FA2E8 -> $00C0                SCI3BDH         EQU     $00C0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $00C0                SCI3ASR1        EQU     $00C0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $00C1                SCI3BDL         EQU     $00C1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $00C1                SCI3ACR1        EQU     $00C1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $00C2                SCI3CR1         EQU     $00C2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $00C2                SCI3ACR2        EQU     $00C2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $00C3                SCI3CR2         EQU     $00C3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $00C4                SCI3SR1         EQU     $00C4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF           EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $00C5                SCI3SR2         EQU     $00C5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $00C6                SCI3DRH         EQU     $00C6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $00C7                SCI3DRL         EQU     $00C7
0022E8 0FA2E8 -> $00C8                SCIBDH          EQU     $00C8
0022E8 0FA2E8 -> $00C8                SCI0BDH         EQU     $00C8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $00C9                SCI0ASR1        EQU     $00C9
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $00C9                SCIBDL          EQU     $00C9
0022E8 0FA2E8 -> $00C9                SCI0BDL         EQU     $00C9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $00C9                SCI0ACR1        EQU     $00C9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $00CA                SCICR1          EQU     $00CA
0022E8 0FA2E8 -> $00CA                SCI0CR1         EQU     $00CA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $00CA                SCI0ACR2        EQU     $00CA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $00CB                SCICR2          EQU     $00CB
0022E8 0FA2E8 -> $00CB                SCI0CR2         EQU     $00CB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $00CC                SCISR1          EQU     $00CC
0022E8 0FA2E8 -> $00CC                SCI0SR1         EQU     $00CC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $00CD                SCISR2          EQU     $00CD
0022E8 0FA2E8 -> $00CD                SCI0SR2         EQU     $00CD
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $00CE                SCIDRH          EQU     $00CE
0022E8 0FA2E8 -> $00CE                SCI0DRH         EQU     $00CE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $00CF                SCIDRL          EQU     $00CF
0022E8 0FA2E8 -> $00CF                SCI0DRL         EQU     $00CF
0022E8 0FA2E8 -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $00D7                SCI1DRL         EQU     $00D7
0022E8 0FA2E8 -> $00D8                SPICR1          EQU     $00D8
0022E8 0FA2E8 -> $00D8                SPI0CR1         EQU     $00D8
0022E8 0FA2E8 -> $0080                SPIE            EQU     $80
0022E8 0FA2E8 -> $0040                SPE             EQU     $40
0022E8 0FA2E8 -> $0020                SPTIE           EQU     $20
0022E8 0FA2E8 -> $0010                MSTR            EQU     $10
0022E8 0FA2E8 -> $0008                CPOL            EQU     $08
0022E8 0FA2E8 -> $0004                CPHA            EQU     $04
0022E8 0FA2E8 -> $0002                SSOE            EQU     $02
0022E8 0FA2E8 -> $0001                LSBFE           EQU     $01
0022E8 0FA2E8 -> $00D9                SPICR2          EQU     $00D9
0022E8 0FA2E8 -> $00D9                SPI0CR2         EQU     $00D9
0022E8 0FA2E8 -> $0040                XFRW            EQU     $40
0022E8 0FA2E8 -> $0010                MODFEN          EQU     $10
0022E8 0FA2E8 -> $0008                BIDIROE         EQU     $08
0022E8 0FA2E8 -> $0002                SPISWAI         EQU     $02
0022E8 0FA2E8 -> $0001                SPC0            EQU     $01
0022E8 0FA2E8 -> $00DA                SPIBR           EQU     $00DA
0022E8 0FA2E8 -> $00DA                SPI0BR          EQU     $00DA
0022E8 0FA2E8 -> $0040                SPPR2           EQU     $40
0022E8 0FA2E8 -> $0020                SPPR1           EQU     $20
0022E8 0FA2E8 -> $0010                SPPR0           EQU     $10
0022E8 0FA2E8 -> $0004                SPR2            EQU     $04
0022E8 0FA2E8 -> $0002                SPR1            EQU     $02
0022E8 0FA2E8 -> $0001                SPR0            EQU     $01
0022E8 0FA2E8 -> $00DB                SPISR           EQU     $00DB
0022E8 0FA2E8 -> $00DB                SPI0SR          EQU     $00DB
0022E8 0FA2E8 -> $0080                SPIF            EQU     $80
0022E8 0FA2E8 -> $0020                SPTEF           EQU     $20
0022E8 0FA2E8 -> $0010                MODF            EQU     $10
0022E8 0FA2E8 -> $00DC                SPIDRH          EQU     $00DC
0022E8 0FA2E8 -> $00DC                SPI0DRH         EQU     $00DC
0022E8 0FA2E8 -> $00DD                SPIDRL          EQU     $00DD
0022E8 0FA2E8 -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00DF reserved
0022E8 0FA2E8 -> $00E0                IBAD            EQU     $00E0
0022E8 0FA2E8 -> $00E0                I0BAD           EQU     $00E0
                                      ;ADR7           EQU     $80
                                      ;ADR6           EQU     $40
                                      ;ADR5           EQU     $20
                                      ;ADR4           EQU     $10
                                      ;ADR3           EQU     $08
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
0022E8 0FA2E8 -> $00E1                IBFD            EQU     $00E1
0022E8 0FA2E8 -> $00E1                I0BFD           EQU     $00E1
                                      ;IBC7           EQU     $80
                                      ;IBC6           EQU     $40
                                      ;IBC5           EQU     $20
                                      ;IBC4           EQU     $10
                                      ;IBC3           EQU     $08
                                      ;IBC2           EQU     $04
                                      ;IBC1           EQU     $02
                                      ;IBC0           EQU     $01
0022E8 0FA2E8 -> $00E2                IBCR            EQU     $00E2
0022E8 0FA2E8 -> $00E2                I0BCR           EQU     $00E2
                                      ;IBEN           EQU     $80
                                      ;IBIE           EQU     $40
                                      ;SL             EQU     $20
                                      ;RX             EQU     $10
                                      ;TXAK           EQU     $08
                                      ;RSTA           EQU     $04
                                      ;IBSWAI         EQU     $01
0022E8 0FA2E8 -> $00E3                IBSR            EQU     $00E3
0022E8 0FA2E8 -> $00E3                I0BSR           EQU     $00E3
                                      ;TCF            EQU     $80
                                      ;IAAS           EQU     $40
                                      ;IBB            EQU     $20
                                      ;RXAK           EQU     $01
                                      ;SRW            EQU     $04
                                      ;IBIF           EQU     $02
0022E8 0FA2E8 -> $00E4                IBDR            EQU     $00E4
0022E8 0FA2E8 -> $00E4                I0BDR           EQU     $00E4
0022E8 0FA2E8 -> $00E5                IBCR2           EQU     $00E5
0022E8 0FA2E8 -> $00E5                I0BCR2          EQU     $00E5
                                      ;GCEN           EQU     $80
                                      ;ADTYPE         EQU     $40
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
                                      ;ADR0           EQU     $01
                                      ;$00E6 to $00EF reserved
0022E8 0FA2E8 -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
0022E8 0FA2E8 -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
0022E8 0FA2E8 -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
0022E8 0FA2E8 -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
0022E8 0FA2E8 -> $00F4                SPI1DRH         EQU     $00F4
0022E8 0FA2E8 -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
0022E8 0FA2E8 -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
0022E8 0FA2E8 -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
0022E8 0FA2E8 -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
0022E8 0FA2E8 -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
0022E8 0FA2E8 -> $00FC                SPI2DRH         EQU     $00FC
0022E8 0FA2E8 -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
0022E8 0FA2E8 -> $0100                FCLKDIV         EQU     $0100
0022E8 0FA2E8 -> $0080                FDIVLD          EQU     $80
0022E8 0FA2E8 -> $0040                FDIV6           EQU     $40
0022E8 0FA2E8 -> $0020                FDIV5           EQU     $20
0022E8 0FA2E8 -> $0010                FDIV4           EQU     $10
0022E8 0FA2E8 -> $0008                FDIV3           EQU     $08
0022E8 0FA2E8 -> $0004                FDIV2           EQU     $04
0022E8 0FA2E8 -> $0002                FDIV1           EQU     $02
0022E8 0FA2E8 -> $0001                FDIV0           EQU     $01
0022E8 0FA2E8 -> $0101                FSEC            EQU     $0101
0022E8 0FA2E8 -> $0080                KEYEN1          EQU     $80
0022E8 0FA2E8 -> $0040                KEYEN2          EQU     $40
0022E8 0FA2E8 -> $0020                RNV5            EQU     $20
0022E8 0FA2E8 -> $0010                RNV4            EQU     $10
0022E8 0FA2E8 -> $0008                RNV3            EQU     $08
0022E8 0FA2E8 -> $0004                RNV2            EQU     $04
0022E8 0FA2E8 -> $0002                SEC1            EQU     $02
0022E8 0FA2E8 -> $0001                SEC0            EQU     $01
0022E8 0FA2E8 -> $0102                FCCOBIX         EQU     $0102
0022E8 0FA2E8 -> $0004                CCOBIX2         EQU     $04
0022E8 0FA2E8 -> $0002                CCOBIX1         EQU     $02
0022E8 0FA2E8 -> $0001                CCOBIX0         EQU     $01
0022E8 0FA2E8 -> $0103                FECCRIX         EQU     $0103
0022E8 0FA2E8 -> $0004                ECCRIX2         EQU     $04
0022E8 0FA2E8 -> $0002                ECCRIX1         EQU     $02
0022E8 0FA2E8 -> $0001                ECCRIX0         EQU     $01
0022E8 0FA2E8 -> $0104                FCNFG           EQU     $0104
0022E8 0FA2E8 -> $0080                CCIE            EQU     $80
0022E8 0FA2E8 -> $0010                IGNSF           EQU     $10
0022E8 0FA2E8 -> $0002                FDFD            EQU     $02
0022E8 0FA2E8 -> $0001                FSFD            EQU     $01
0022E8 0FA2E8 -> $0105                FERCNFG         EQU     $0105
0022E8 0FA2E8 -> $0080                ERSERIE         EQU     $80
0022E8 0FA2E8 -> $0040                PGMERIE         EQU     $40
0022E8 0FA2E8 -> $0010                EPVIOLIE        EQU     $10
0022E8 0FA2E8 -> $0008                ERSVIE1         EQU     $08
0022E8 0FA2E8 -> $0004                ERSVIE0         EQU     $04
0022E8 0FA2E8 -> $0002                DFDIE           EQU     $02
0022E8 0FA2E8 -> $0001                SFDIE           EQU     $01
0022E8 0FA2E8 -> $0106                FSTAT           EQU     $0106
0022E8 0FA2E8 -> $0080                CCIF            EQU     $80
0022E8 0FA2E8 -> $0020                ACCERR          EQU     $20
0022E8 0FA2E8 -> $0010                FPVIOL          EQU     $10
0022E8 0FA2E8 -> $0008                MGBUSY          EQU     $08
0022E8 0FA2E8 -> $0002                MGSTAT1         EQU     $02
0022E8 0FA2E8 -> $0001                MGSTAT0         EQU     $01
0022E8 0FA2E8 -> $0107                FERSTAT         EQU     $0107
0022E8 0FA2E8 -> $0080                ERSERIF         EQU     $80
0022E8 0FA2E8 -> $0040                PGMERIF         EQU     $40
0022E8 0FA2E8 -> $0010                EPVIOLIF        EQU     $10
0022E8 0FA2E8 -> $0008                ERSVIF1         EQU     $08
0022E8 0FA2E8 -> $0004                ERSVIF0         EQU     $04
0022E8 0FA2E8 -> $0002                DFDIF           EQU     $02
0022E8 0FA2E8 -> $0001                SFDIF           EQU     $01
0022E8 0FA2E8 -> $0108                FPROT           EQU     $0108
0022E8 0FA2E8 -> $0080                FPOPEN          EQU     $80
0022E8 0FA2E8 -> $0040                RNV6            EQU     $40
0022E8 0FA2E8 -> $0020                FPHDIS          EQU     $20
0022E8 0FA2E8 -> $0010                FPHS1           EQU     $10
0022E8 0FA2E8 -> $0008                FPHS0           EQU     $08
0022E8 0FA2E8 -> $0004                FPLDIS          EQU     $04
0022E8 0FA2E8 -> $0002                FPLS1           EQU     $02
0022E8 0FA2E8 -> $0001                FPLS0           EQU     $01
0022E8 0FA2E8 -> $0109                EPROT           EQU     $0109
0022E8 0FA2E8 -> $0080                EPOPEN          EQU     $80
0022E8 0FA2E8 -> $0040                RNV6            EQU     $40
0022E8 0FA2E8 -> $0020                RNV5            EQU     $20
0022E8 0FA2E8 -> $0010                RNV4            EQU     $10
0022E8 0FA2E8 -> $0008                EPDIS           EQU     $08
0022E8 0FA2E8 -> $0004                EPS2            EQU     $04
0022E8 0FA2E8 -> $0002                EPS1            EQU     $02
0022E8 0FA2E8 -> $0001                EPS0            EQU     $01
0022E8 0FA2E8 -> $010A                FCCOBHI         EQU     $010A
0022E8 0FA2E8 -> $0080                CCOB15          EQU     $80
0022E8 0FA2E8 -> $0040                CCOB14          EQU     $40
0022E8 0FA2E8 -> $0020                CCOB13          EQU     $20
0022E8 0FA2E8 -> $0010                CCOB12          EQU     $10
0022E8 0FA2E8 -> $0008                CCOB11          EQU     $08
0022E8 0FA2E8 -> $0004                CCOB10          EQU     $04
0022E8 0FA2E8 -> $0002                CCOB9           EQU     $02
0022E8 0FA2E8 -> $0001                CCOB8           EQU     $01
0022E8 0FA2E8 -> $010B                FCCOBLO         EQU     $010B
0022E8 0FA2E8 -> $0080                CCOB7           EQU     $80
0022E8 0FA2E8 -> $0040                CCOB6           EQU     $40
0022E8 0FA2E8 -> $0020                CCOB5           EQU     $20
0022E8 0FA2E8 -> $0010                CCOB4           EQU     $10
0022E8 0FA2E8 -> $0008                CCOB3           EQU     $08
0022E8 0FA2E8 -> $0004                CCOB2           EQU     $04
0022E8 0FA2E8 -> $0002                CCOB1           EQU     $02
0022E8 0FA2E8 -> $0001                CCOB0           EQU     $01
0022E8 0FA2E8 -> $010C                ETAGHI          EQU     $010C
0022E8 0FA2E8 -> $010D                ETAGLO          EQU     $010D
0022E8 0FA2E8 -> $010E                FECCRHI         EQU     $010E
0022E8 0FA2E8 -> $010F                FECCRLO         EQU     $010F
0022E8 0FA2E8 -> $0110                FOPT            EQU     $0110
0022E8 0FA2E8 -> $0080                NV7             EQU     $80
0022E8 0FA2E8 -> $0040                NV6             EQU     $40
0022E8 0FA2E8 -> $0020                NV5             EQU     $20
0022E8 0FA2E8 -> $0010                NV4             EQU     $10
0022E8 0FA2E8 -> $0008                NV3             EQU     $08
0022E8 0FA2E8 -> $0004                NV2             EQU     $04
0022E8 0FA2E8 -> $0002                NV1             EQU     $02
0022E8 0FA2E8 -> $0001                NV0             EQU     $01
                                      ;$0111 to $0113 reserved
0022E8 0FA2E8 -> $0114                MPUFLG          EQU     $0114
0022E8 0FA2E8 -> $0080                AEF             EQU     $80
0022E8 0FA2E8 -> $0040                WPF             EQU     $40
0022E8 0FA2E8 -> $0020                NEXF            EQU     $20
0022E8 0FA2E8 -> $0001                SVSF            EQU     $01
0022E8 0FA2E8 -> $0115                MPUASTAT0       EQU     $0115
0022E8 0FA2E8 -> $0040                ADDR22          EQU     $40
0022E8 0FA2E8 -> $0020                ADDR21          EQU     $20
0022E8 0FA2E8 -> $0010                ADDR20          EQU     $10
0022E8 0FA2E8 -> $0008                ADDR19          EQU     $08
0022E8 0FA2E8 -> $0004                ADDR18          EQU     $04
0022E8 0FA2E8 -> $0002                ADDR17          EQU     $02
0022E8 0FA2E8 -> $0001                ADDR16          EQU     $01
0022E8 0FA2E8 -> $0116                MPUASTAT1       EQU     $0116
0022E8 0FA2E8 -> $0080                ADDR15          EQU     $80
0022E8 0FA2E8 -> $0040                ADDR14          EQU     $40
0022E8 0FA2E8 -> $0020                ADDR13          EQU     $20
0022E8 0FA2E8 -> $0010                ADDR12          EQU     $10
0022E8 0FA2E8 -> $0008                ADDR11          EQU     $08
0022E8 0FA2E8 -> $0004                ADDR10          EQU     $04
0022E8 0FA2E8 -> $0002                ADDR9           EQU     $02
0022E8 0FA2E8 -> $0001                ADDR8           EQU     $01
0022E8 0FA2E8 -> $0117                MPUASTAT2       EQU     $0117
0022E8 0FA2E8 -> $0080                ADDR7           EQU     $80
0022E8 0FA2E8 -> $0040                ADDR6           EQU     $40
0022E8 0FA2E8 -> $0020                ADDR5           EQU     $20
0022E8 0FA2E8 -> $0010                ADDR4           EQU     $10
0022E8 0FA2E8 -> $0008                ADDR3           EQU     $08
0022E8 0FA2E8 -> $0004                ADDR2           EQU     $04
0022E8 0FA2E8 -> $0002                ADDR1           EQU     $02
0022E8 0FA2E8 -> $0001                ADDR0           EQU     $01
                                      ;$0118 reserved
0022E8 0FA2E8 -> $0119                MPUSEL          EQU     $0119
0022E8 0FA2E8 -> $0080                SVSEN           EQU     $80
0022E8 0FA2E8 -> $0007                SEL             EQU     $07
0022E8 0FA2E8 -> $011A                MPUDESC0        EQU     $011A
0022E8 0FA2E8 -> $0080                MSTR0           EQU     $80
0022E8 0FA2E8 -> $0040                MSTR1           EQU     $40
0022E8 0FA2E8 -> $0020                MSTR2           EQU     $20
0022E8 0FA2E8 -> $0010                MSTR3           EQU     $10
0022E8 0FA2E8 -> $0008                LOW_ADDR22      EQU     $08
0022E8 0FA2E8 -> $0004                LOW_ADDR21      EQU     $04
0022E8 0FA2E8 -> $0002                LOW_ADDR20      EQU     $02
0022E8 0FA2E8 -> $0001                LOW_ADDR19      EQU     $01
0022E8 0FA2E8 -> $011B                MPUDESC1        EQU     $011B
0022E8 0FA2E8 -> $0080                LOW_ADDR18      EQU     $80
0022E8 0FA2E8 -> $0040                LOW_ADDR17      EQU     $40
0022E8 0FA2E8 -> $0020                LOW_ADDR16      EQU     $20
0022E8 0FA2E8 -> $0010                LOW_ADDR15      EQU     $10
0022E8 0FA2E8 -> $0008                LOW_ADDR14      EQU     $08
0022E8 0FA2E8 -> $0004                LOW_ADDR13      EQU     $04
0022E8 0FA2E8 -> $0002                LOW_ADDR12      EQU     $02
0022E8 0FA2E8 -> $0001                LOW_ADDR11      EQU     $01
0022E8 0FA2E8 -> $011C                MPUDESC2        EQU     $011C
0022E8 0FA2E8 -> $0080                LOW_ADDR10      EQU     $80
0022E8 0FA2E8 -> $0040                LOW_ADDR9       EQU     $40
0022E8 0FA2E8 -> $0020                LOW_ADDR8       EQU     $20
0022E8 0FA2E8 -> $0010                LOW_ADDR7       EQU     $10
0022E8 0FA2E8 -> $0008                LOW_ADDR6       EQU     $08
0022E8 0FA2E8 -> $0004                LOW_ADDR5       EQU     $04
0022E8 0FA2E8 -> $0002                LOW_ADDR4       EQU     $02
0022E8 0FA2E8 -> $0001                LOW_ADDR3       EQU     $01
0022E8 0FA2E8 -> $011D                MPUDESC3        EQU     $011D
0022E8 0FA2E8 -> $0080                WP              EQU     $80
0022E8 0FA2E8 -> $0040                NEX             EQU     $40
0022E8 0FA2E8 -> $0008                HIGH_ADDR22     EQU     $08
0022E8 0FA2E8 -> $0004                HIGH_ADDR21     EQU     $04
0022E8 0FA2E8 -> $0002                HIGH_ADDR20     EQU     $02
0022E8 0FA2E8 -> $0001                HIGH_ADDR19     EQU     $01
0022E8 0FA2E8 -> $011E                MPUDESC4        EQU     $011E
0022E8 0FA2E8 -> $0080                HIGH_ADDR18     EQU     $80
0022E8 0FA2E8 -> $0040                HIGH_ADDR17     EQU     $40
0022E8 0FA2E8 -> $0020                HIGH_ADDR16     EQU     $20
0022E8 0FA2E8 -> $0010                HIGH_ADDR15     EQU     $10
0022E8 0FA2E8 -> $0008                HIGH_ADDR14     EQU     $08
0022E8 0FA2E8 -> $0004                HIGH_ADDR13     EQU     $04
0022E8 0FA2E8 -> $0002                HIGH_ADDR12     EQU     $02
0022E8 0FA2E8 -> $0001                HIGH_ADDR11     EQU     $01
0022E8 0FA2E8 -> $011F                MPUDESC5        EQU     $011F
0022E8 0FA2E8 -> $0080                HIGH_ADDR10     EQU     $80
0022E8 0FA2E8 -> $0040                HIGH_ADDR9      EQU     $40
0022E8 0FA2E8 -> $0020                HIGH_ADDR8      EQU     $20
0022E8 0FA2E8 -> $0010                HIGH_ADDR7      EQU     $10
0022E8 0FA2E8 -> $0008                HIGH_ADDR6      EQU     $08
0022E8 0FA2E8 -> $0004                HIGH_ADDR5      EQU     $04
0022E8 0FA2E8 -> $0002                HIGH_ADDR4      EQU     $02
0022E8 0FA2E8 -> $0001                HIGH_ADDR3      EQU     $01
                                      ;$0120 reserved
0022E8 0FA2E8 -> $0121                IVBR            EQU     $0121
                                      ;$0122 to $0125reserved
0022E8 0FA2E8 -> $0126                XGPRIO          EQU     $0126
0022E8 0FA2E8 -> $0007                XILVL           EQU     $07
0022E8 0FA2E8 -> $0127                CFADDR          EQU     $0127
0022E8 0FA2E8 -> $0128                CFDATA0         EQU     $0128
0022E8 0FA2E8 -> $0129                CFDATA1         EQU     $0129
0022E8 0FA2E8 -> $012A                CFDATA2         EQU     $012A
0022E8 0FA2E8 -> $012B                CFDATA3         EQU     $012B
0022E8 0FA2E8 -> $012C                CFDATA4         EQU     $012C
0022E8 0FA2E8 -> $012D                CFDATA5         EQU     $012D
0022E8 0FA2E8 -> $012E                CFDATA6         EQU     $012E
0022E8 0FA2E8 -> $012F                CFDATA7         EQU     $012F
0022E8 0FA2E8 -> $0080                RQST            EQU     $80
0022E8 0FA2E8 -> $0007                PRIOLVL         EQU     $07
0022E8 0FA2E8 -> $0130                SCI4BDH         EQU     $0130
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $0130                SCI4ASR1        EQU     $0130
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $0131                SCI4BDL         EQU     $0131
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $0131                SCI4ACR1        EQU     $0131
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $0132                SCI4CR1         EQU     $0132
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $0132                SCI4ACR2        EQU     $0132
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $0133                SCI4CR2         EQU     $0133
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $0134                SCI4SR1         EQU     $0134
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $0135                SCI4SR2         EQU     $0135
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $0136                SCI4DRH         EQU     $0136
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $0137                SCI4DRL         EQU     $0137
0022E8 0FA2E8 -> $0138                SCI5BDH         EQU     $0138
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $0138                SCI5ASR1        EQU     $0138
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $0139                SCI5BDL         EQU     $0139
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $0139                SCI5ACR1        EQU     $0139
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $013A                SCI5CR1         EQU     $013A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $013A                SCI5ACR2        EQU     $013A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $013B                SCI5CR2         EQU     $013B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $013C                SCI5SR1         EQU     $013C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $013D                SCI5SR2         EQU     $013D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $013E                SCI5DRH         EQU     $013E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $013F                SCI5DRL         EQU     $013F
0022E8 0FA2E8 -> $0140                CANCTL0         EQU     $0140
0022E8 0FA2E8 -> $0140                CAN0CTL0        EQU     $0140
0022E8 0FA2E8 -> $0080                RXFRM           EQU     $80
0022E8 0FA2E8 -> $0040                RXACT           EQU     $40
0022E8 0FA2E8 -> $0020                CSWAI           EQU     $20
0022E8 0FA2E8 -> $0010                SYNCH           EQU     $10
0022E8 0FA2E8 -> $0008                TIMEN           EQU     $08
0022E8 0FA2E8 -> $0004                WUPE            EQU     $04
0022E8 0FA2E8 -> $0002                SLPRQ           EQU     $02
0022E8 0FA2E8 -> $0001                INITRQ          EQU     $01
0022E8 0FA2E8 -> $0141                CANCTL1         EQU     $0141
0022E8 0FA2E8 -> $0141                CAN0CTL1        EQU     $0141
0022E8 0FA2E8 -> $0080                CANE            EQU     $80
0022E8 0FA2E8 -> $0040                CLKSRC          EQU     $40
0022E8 0FA2E8 -> $0020                LOOPB           EQU     $20
0022E8 0FA2E8 -> $0010                LISTEN          EQU     $10
0022E8 0FA2E8 -> $0004                WUPM            EQU     $04
0022E8 0FA2E8 -> $0002                SLPAK           EQU     $02
0022E8 0FA2E8 -> $0001                INITAK          EQU     $01
0022E8 0FA2E8 -> $0142                CANBTR0         EQU     $0142
0022E8 0FA2E8 -> $0142                CAN0BTR0        EQU     $0142
0022E8 0FA2E8 -> $0080                SJW1            EQU     $80
0022E8 0FA2E8 -> $0040                SJW0            EQU     $40
0022E8 0FA2E8 -> $0020                BRP5            EQU     $20
0022E8 0FA2E8 -> $0010                BRP4            EQU     $10
0022E8 0FA2E8 -> $0008                BRP3            EQU     $08
0022E8 0FA2E8 -> $0004                BRP2            EQU     $04
0022E8 0FA2E8 -> $0002                BRP1            EQU     $02
0022E8 0FA2E8 -> $0001                BRP0            EQU     $01
0022E8 0FA2E8 -> $0143                CANBTR1         EQU     $0143
0022E8 0FA2E8 -> $0143                CAN0BTR1        EQU     $0143
0022E8 0FA2E8 -> $0080                SAMP            EQU     $80
0022E8 0FA2E8 -> $0040                TSEG22          EQU     $40
0022E8 0FA2E8 -> $0020                TSEG21          EQU     $20
0022E8 0FA2E8 -> $0010                TSEG20          EQU     $10
0022E8 0FA2E8 -> $0008                TSEG13          EQU     $08
0022E8 0FA2E8 -> $0004                TSEG12          EQU     $04
0022E8 0FA2E8 -> $0002                TSEG11          EQU     $02
0022E8 0FA2E8 -> $0001                TESG10          EQU     $01
0022E8 0FA2E8 -> $0144                CANRFLG         EQU     $0144
0022E8 0FA2E8 -> $0144                CAN0RFLG        EQU     $0144
0022E8 0FA2E8 -> $0080                WUPIF           EQU     $80
0022E8 0FA2E8 -> $0040                CSCIF           EQU     $40
0022E8 0FA2E8 -> $0020                RSTAT1          EQU     $20
0022E8 0FA2E8 -> $0010                RSTAT0          EQU     $10
0022E8 0FA2E8 -> $0008                TSTAT1          EQU     $08
0022E8 0FA2E8 -> $0004                TSTAT0          EQU     $04
0022E8 0FA2E8 -> $0002                OVRIF           EQU     $02
0022E8 0FA2E8 -> $0001                RXF             EQU     $01
0022E8 0FA2E8 -> $0145                CANRIER         EQU     $0145
0022E8 0FA2E8 -> $0145                CAN0RIER        EQU     $0145
0022E8 0FA2E8 -> $0080                WUPIE           EQU     $80
0022E8 0FA2E8 -> $0040                CSCIE           EQU     $40
0022E8 0FA2E8 -> $0020                RSTATE1         EQU     $20
0022E8 0FA2E8 -> $0010                RSTATE0         EQU     $10
0022E8 0FA2E8 -> $0008                TSTATE1         EQU     $08
0022E8 0FA2E8 -> $0004                TSTATE0         EQU     $04
0022E8 0FA2E8 -> $0002                OVRIE           EQU     $02
0022E8 0FA2E8 -> $0001                RXFIE           EQU     $01
0022E8 0FA2E8 -> $0146                CANTFLG         EQU     $0146
0022E8 0FA2E8 -> $0146                CAN0TFLG        EQU     $0146
0022E8 0FA2E8 -> $0004                TXE2            EQU     $04
0022E8 0FA2E8 -> $0002                TXE1            EQU     $02
0022E8 0FA2E8 -> $0001                TXE0            EQU     $01
0022E8 0FA2E8 -> $0147                CANTIER         EQU     $0147
0022E8 0FA2E8 -> $0147                CAN0TIER        EQU     $0147
0022E8 0FA2E8 -> $0004                TXEIE2          EQU     $04
0022E8 0FA2E8 -> $0002                TXEIE1          EQU     $02
0022E8 0FA2E8 -> $0001                TXEIE0          EQU     $01
0022E8 0FA2E8 -> $0148                CANTARQ         EQU     $0148
0022E8 0FA2E8 -> $0148                CAN0TARQ        EQU     $0148
0022E8 0FA2E8 -> $0004                ABTRQ2          EQU     $04
0022E8 0FA2E8 -> $0002                ABTRQ1          EQU     $02
0022E8 0FA2E8 -> $0001                ABTRQ0          EQU     $01
0022E8 0FA2E8 -> $0149                CANTAAK         EQU     $0149
0022E8 0FA2E8 -> $0149                CAN0TAAK        EQU     $0149
0022E8 0FA2E8 -> $0004                ABTAK2          EQU     $04
0022E8 0FA2E8 -> $0002                ABTAK1          EQU     $02
0022E8 0FA2E8 -> $0001                ABTAK0          EQU     $01
0022E8 0FA2E8 -> $014A                CANTBSEL        EQU     $014A
0022E8 0FA2E8 -> $014A                CAN0TBSEL       EQU     $014A
0022E8 0FA2E8 -> $0004                TX2             EQU     $04
0022E8 0FA2E8 -> $0002                TX1             EQU     $02
0022E8 0FA2E8 -> $0001                TX0             EQU     $01
0022E8 0FA2E8 -> $014B                CANIDAC         EQU     $014B
0022E8 0FA2E8 -> $014B                CAN0IDAC        EQU     $014B
0022E8 0FA2E8 -> $0020                IDAM1           EQU     $20
0022E8 0FA2E8 -> $0010                IDAM0           EQU     $10
0022E8 0FA2E8 -> $0004                IDHIT2          EQU     $04
0022E8 0FA2E8 -> $0002                IDHIT1          EQU     $02
0022E8 0FA2E8 -> $0001                IDHIT0          EQU     $01
                                      ; $14c  reserved
0022E8 0FA2E8 -> $014D                CANMISC         EQU     $014D
0022E8 0FA2E8 -> $014D                CAN0MISC        EQU     $014D
0022E8 0FA2E8 -> $0001                BOHOLD          EQU     $01
0022E8 0FA2E8 -> $014E                CANRXERR        EQU     $014E
0022E8 0FA2E8 -> $014E                CAN0RXERR       EQU     $014E
0022E8 0FA2E8 -> $014F                CANTXERR        EQU     $014F
0022E8 0FA2E8 -> $014F                CAN0TXERR       EQU     $014F
0022E8 0FA2E8 -> $0150                CANIDAR0        EQU     $0150
0022E8 0FA2E8 -> $0150                CAN0IDAR0       EQU     $0150
0022E8 0FA2E8 -> $0151                CANIDAR1        EQU     $0151
0022E8 0FA2E8 -> $0151                CAN0IDAR1       EQU     $0151
0022E8 0FA2E8 -> $0152                CANIDAR2        EQU     $0152
0022E8 0FA2E8 -> $0152                CAN0IDAR2       EQU     $0152
0022E8 0FA2E8 -> $0153                CANIDAR3        EQU     $0153
0022E8 0FA2E8 -> $0153                CAN0IDAR3       EQU     $0153
0022E8 0FA2E8 -> $0154                CANIDMR0        EQU     $0154
0022E8 0FA2E8 -> $0154                CAN0IDMR0       EQU     $0154
0022E8 0FA2E8 -> $0155                CANIDMR1        EQU     $0155
0022E8 0FA2E8 -> $0155                CAN0IDMR1       EQU     $0155
0022E8 0FA2E8 -> $0156                CANIDMR2        EQU     $0156
0022E8 0FA2E8 -> $0156                CAN0IDMR2       EQU     $0156
0022E8 0FA2E8 -> $0157                CANIDMR3        EQU     $0157
0022E8 0FA2E8 -> $0157                CAN0IDMR3       EQU     $0157
0022E8 0FA2E8 -> $0158                CANIDAR4        EQU     $0158
0022E8 0FA2E8 -> $0158                CAN0IDAR4       EQU     $0158
0022E8 0FA2E8 -> $0159                CANIDAR5        EQU     $0159
0022E8 0FA2E8 -> $0159                CAN0IDAR5       EQU     $0159
0022E8 0FA2E8 -> $015A                CANIDAR6        EQU     $015A
0022E8 0FA2E8 -> $015A                CAN0IDAR6       EQU     $015A
0022E8 0FA2E8 -> $015B                CANIDAR7        EQU     $015B
0022E8 0FA2E8 -> $015B                CAN0IDAR7       EQU     $015B
0022E8 0FA2E8 -> $015C                CANIDMR4        EQU     $015C
0022E8 0FA2E8 -> $015C                CAN0IDMR4       EQU     $015C
0022E8 0FA2E8 -> $015D                CANIDMR5        EQU     $015D
0022E8 0FA2E8 -> $015D                CAN0IDMR5       EQU     $015D
0022E8 0FA2E8 -> $015E                CANIDMR6        EQU     $015E
0022E8 0FA2E8 -> $015E                CAN0IDMR6       EQU     $015E
0022E8 0FA2E8 -> $015F                CANIDMR7        EQU     $015F
0022E8 0FA2E8 -> $015F                CAN0IDMR7       EQU     $015F
0022E8 0FA2E8 -> $0160                CANRXIDR0       EQU     $0160
0022E8 0FA2E8 -> $0160                CAN0RXIDR0      EQU     $0160
0022E8 0FA2E8 -> $0161                CANRXIDR1       EQU     $0161
0022E8 0FA2E8 -> $0161                CAN0RXIDR1      EQU     $0161
0022E8 0FA2E8 -> $0162                CANRXIDR2       EQU     $0162
0022E8 0FA2E8 -> $0162                CAN0RXIDR2      EQU     $0162
0022E8 0FA2E8 -> $0163                CANRXIDR3       EQU     $0163
0022E8 0FA2E8 -> $0163                CAN0RXIDR3      EQU     $0163
0022E8 0FA2E8 -> $0164                CANRXDSR0       EQU     $0164
0022E8 0FA2E8 -> $0164                CAN0RXDSR0      EQU     $0164
0022E8 0FA2E8 -> $0165                CANRXDSR1       EQU     $0165
0022E8 0FA2E8 -> $0165                CAN0RXDSR1      EQU     $0165
0022E8 0FA2E8 -> $0166                CANRXDSR2       EQU     $0166
0022E8 0FA2E8 -> $0166                CAN0RXDSR2      EQU     $0166
0022E8 0FA2E8 -> $0167                CANRXDSR3       EQU     $0167
0022E8 0FA2E8 -> $0167                CAN0RXDSR3      EQU     $0167
0022E8 0FA2E8 -> $0168                CANRXDSR4       EQU     $0168
0022E8 0FA2E8 -> $0168                CAN0RXDSR4      EQU     $0168
0022E8 0FA2E8 -> $0169                CANRXDSR5       EQU     $0169
0022E8 0FA2E8 -> $0169                CAN0RXDSR5      EQU     $0169
0022E8 0FA2E8 -> $016A                CANRXDSR6       EQU     $016A
0022E8 0FA2E8 -> $016A                CAN0RXDSR6      EQU     $016A
0022E8 0FA2E8 -> $016B                CANRXDSR7       EQU     $016B
0022E8 0FA2E8 -> $016B                CAN0RXDSR7      EQU     $016B
0022E8 0FA2E8 -> $016C                CANRXDLR        EQU     $016C
0022E8 0FA2E8 -> $016C                CAN0RXDLR       EQU     $016C
                                      ;$016D reserved
0022E8 0FA2E8 -> $016E                CANRTSRH        EQU     $016E
0022E8 0FA2E8 -> $016E                CAN0RTSRH       EQU     $016E
0022E8 0FA2E8 -> $016F                CANRTSRL        EQU     $016F
0022E8 0FA2E8 -> $016F                CAN0RTSRL       EQU     $016F
0022E8 0FA2E8 -> $0170                CANTXIDR0       EQU     $0170
0022E8 0FA2E8 -> $0170                CAN0TXIDR0      EQU     $0170
0022E8 0FA2E8 -> $0171                CANTXIDR1       EQU     $0171
0022E8 0FA2E8 -> $0171                CAN0TXIDR1      EQU     $0171
0022E8 0FA2E8 -> $0172                CANTXIDR2       EQU     $0172
0022E8 0FA2E8 -> $0172                CAN0TXIDR2      EQU     $0172
0022E8 0FA2E8 -> $0172                CANTXIDR2       EQU     $0172
0022E8 0FA2E8 -> $0172                CAN0TXIDR2      EQU     $0172
0022E8 0FA2E8 -> $0173                CANTXIDR3       EQU     $0173
0022E8 0FA2E8 -> $0173                CAN0TXIDR3      EQU     $0173
0022E8 0FA2E8 -> $0174                CANTXDSR0       EQU     $0174
0022E8 0FA2E8 -> $0174                CAN0TXDSR0      EQU     $0174
0022E8 0FA2E8 -> $0175                CANTXDSR1       EQU     $0175
0022E8 0FA2E8 -> $0175                CAN0TXDSR1      EQU     $0175
0022E8 0FA2E8 -> $0176                CANTXDSR2       EQU     $0176
0022E8 0FA2E8 -> $0176                CAN0TXDSR2      EQU     $0176
0022E8 0FA2E8 -> $0177                CANTXDSR3       EQU     $0177
0022E8 0FA2E8 -> $0177                CAN0TXDSR3      EQU     $0177
0022E8 0FA2E8 -> $0178                CANTXDSR4       EQU     $0178
0022E8 0FA2E8 -> $0178                CAN0TXDSR4      EQU     $0178
0022E8 0FA2E8 -> $0179                CANTXDSR5       EQU     $0179
0022E8 0FA2E8 -> $0179                CAN0TXDSR5      EQU     $0179
0022E8 0FA2E8 -> $017A                CANTXDSR6       EQU     $017A
0022E8 0FA2E8 -> $017A                CAN0TXDSR6      EQU     $017A
0022E8 0FA2E8 -> $017B                CANTXDSR7       EQU     $017B
0022E8 0FA2E8 -> $017B                CAN0TXDSR7      EQU     $017B
0022E8 0FA2E8 -> $017C                CANTXDLR        EQU     $017C
0022E8 0FA2E8 -> $017C                CAN0TXDLR       EQU     $017C
0022E8 0FA2E8 -> $017D                CANTXTBPR       EQU     $017D
0022E8 0FA2E8 -> $017D                CAN0TXTBPR      EQU     $017D
0022E8 0FA2E8 -> $017E                CANTXTSRH       EQU     $017E
0022E8 0FA2E8 -> $017E                CAN0TXTSRH      EQU     $017E
0022E8 0FA2E8 -> $017F                CANTXTSRL       EQU     $017F
0022E8 0FA2E8 -> $017F                CAN0TXTSRL      EQU     $017F
0022E8 0FA2E8 -> $0180                CAN1CTL0        EQU     $0180
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
0022E8 0FA2E8 -> $0181                CAN1CTL1        EQU     $0181
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
0022E8 0FA2E8 -> $0182                CAN1BTR0        EQU     $0182
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
0022E8 0FA2E8 -> $0183                CAN1BTR1        EQU     $0183
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
0022E8 0FA2E8 -> $0184                CAN1RFLG        EQU     $0184
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
0022E8 0FA2E8 -> $0185                CAN1RIER        EQU     $0185
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
0022E8 0FA2E8 -> $0186                CAN1TFLG        EQU     $0186
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
0022E8 0FA2E8 -> $0187                CAN1TIER        EQU     $0187
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
0022E8 0FA2E8 -> $0188                CAN1TARQ        EQU     $0188
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
0022E8 0FA2E8 -> $0189                CAN1TAAK        EQU     $0189
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
0022E8 0FA2E8 -> $018A                CAN1TBSEL       EQU     $018A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
0022E8 0FA2E8 -> $018B                CAN1IDAC        EQU     $018B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$18C  reserved
0022E8 0FA2E8 -> $018D                CAN1MISC        EQU     $018D
                                      ;BOHOLD         EQU     $01
0022E8 0FA2E8 -> $018E                CAN1RXERR       EQU     $018E
0022E8 0FA2E8 -> $018F                CAN1TXERR       EQU     $018F
0022E8 0FA2E8 -> $0190                CAN1IDAR0       EQU     $0190
0022E8 0FA2E8 -> $0191                CAN1IDAR1       EQU     $0191
0022E8 0FA2E8 -> $0192                CAN1IDAR2       EQU     $0192
0022E8 0FA2E8 -> $0193                CAN1IDAR3       EQU     $0193
0022E8 0FA2E8 -> $0194                CAN1IDMR0       EQU     $0194
0022E8 0FA2E8 -> $0195                CAN1IDMR1       EQU     $0195
0022E8 0FA2E8 -> $0196                CAN1IDMR2       EQU     $0196
0022E8 0FA2E8 -> $0197                CAN1IDMR3       EQU     $0197
0022E8 0FA2E8 -> $0198                CAN1IDAR4       EQU     $0198
0022E8 0FA2E8 -> $0199                CAN1IDAR5       EQU     $0199
0022E8 0FA2E8 -> $019A                CAN1IDAR6       EQU     $019A
0022E8 0FA2E8 -> $019B                CAN1IDAR7       EQU     $019B
0022E8 0FA2E8 -> $019C                CAN1IDMR4       EQU     $019C
0022E8 0FA2E8 -> $019D                CAN1IDMR5       EQU     $019D
0022E8 0FA2E8 -> $019E                CAN1IDMR6       EQU     $019E
0022E8 0FA2E8 -> $019F                CAN1IDMR7       EQU     $019F
0022E8 0FA2E8 -> $01A0                CAN1RXIDR0      EQU     $01A0
0022E8 0FA2E8 -> $01A1                CAN1RXIDR1      EQU     $01A1
0022E8 0FA2E8 -> $01A2                CAN1RXIDR2      EQU     $01A2
0022E8 0FA2E8 -> $01A3                CAN1RXIDR3      EQU     $01A3
0022E8 0FA2E8 -> $01A4                CAN1RXDSR0      EQU     $01A4
0022E8 0FA2E8 -> $01A5                CAN1RXDSR1      EQU     $01A5
0022E8 0FA2E8 -> $01A6                CAN1RXDSR2      EQU     $01A6
0022E8 0FA2E8 -> $01A7                CAN1RXDSR3      EQU     $01A7
0022E8 0FA2E8 -> $01A8                CAN1RXDSR4      EQU     $01A8
0022E8 0FA2E8 -> $01A9                CAN1RXDSR5      EQU     $01A9
0022E8 0FA2E8 -> $01AA                CAN1RXDSR6      EQU     $01AA
0022E8 0FA2E8 -> $01AB                CAN1RXDSR7      EQU     $01AB
0022E8 0FA2E8 -> $01AC                CAN1RXDLR       EQU     $01AC
                                      ;$01AD reserved
0022E8 0FA2E8 -> $01AE                CAN1RTSRH       EQU     $01AE
0022E8 0FA2E8 -> $01AF                CAN1RTSRL       EQU     $01AF
0022E8 0FA2E8 -> $01B0                CAN1TXIDR0      EQU     $01B0
0022E8 0FA2E8 -> $01B1                CAN1TXIDR1      EQU     $01B1
0022E8 0FA2E8 -> $01B2                CAN1TXIDR2      EQU     $01B2
0022E8 0FA2E8 -> $01B2                CAN1TXIDR2      EQU     $01B2
0022E8 0FA2E8 -> $01B3                CAN1TXIDR3      EQU     $01B3
0022E8 0FA2E8 -> $01B4                CAN1TXDSR0      EQU     $01B4
0022E8 0FA2E8 -> $01B5                CAN1TXDSR1      EQU     $01B5
0022E8 0FA2E8 -> $01B6                CAN1TXDSR2      EQU     $01B6
0022E8 0FA2E8 -> $01B7                CAN1XDSR3       EQU     $01B7
0022E8 0FA2E8 -> $01B7                CAN1TXDSR3      EQU     $01B7
0022E8 0FA2E8 -> $01B8                CAN1TXDSR4      EQU     $01B8
0022E8 0FA2E8 -> $01B9                CAN1TXDSR5      EQU     $01B9
0022E8 0FA2E8 -> $01BA                CAN1TXDSR6      EQU     $01BA
0022E8 0FA2E8 -> $01BB                CAN1TXDSR7      EQU     $01BB
0022E8 0FA2E8 -> $01BC                CAN1TXDLR       EQU     $01BC
0022E8 0FA2E8 -> $01BD                CAN1TXTBPR      EQU     $01BD
0022E8 0FA2E8 -> $01BE                CAN1TXTSRH      EQU     $01BE
0022E8 0FA2E8 -> $01BF                CAN1TXTSRL      EQU     $01BF
0022E8 0FA2E8 -> $01C0                CAN2CTL0        EQU     $01C0
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
0022E8 0FA2E8 -> $01C1                CAN2CTL1        EQU     $01C1
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
0022E8 0FA2E8 -> $01C2                CAN2BTR0        EQU     $01C2
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
0022E8 0FA2E8 -> $01C3                CAN2BTR1        EQU     $01C3
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
0022E8 0FA2E8 -> $01C4                CAN2RFLG        EQU     $01C4
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
0022E8 0FA2E8 -> $01C5                CAN2RIER        EQU     $01C5
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
0022E8 0FA2E8 -> $01C6                CAN2TFLG        EQU     $01C6
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
0022E8 0FA2E8 -> $01C7                CAN2TIER        EQU     $01C7
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
0022E8 0FA2E8 -> $01C8                CAN2TARQ        EQU     $01C8
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
0022E8 0FA2E8 -> $01C9                CAN2TAAK        EQU     $01C9
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
0022E8 0FA2E8 -> $01CA                CAN2TBSEL       EQU     $01CA
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
0022E8 0FA2E8 -> $01CB                CAN2IDAC        EQU     $01CB
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$01CC  reserved
0022E8 0FA2E8 -> $01CD                CAN2MISC        EQU     $01CD
                                      ;BOHOLD         EQU     $01
0022E8 0FA2E8 -> $01CE                CAN2RXERR       EQU     $01CE
0022E8 0FA2E8 -> $01CF                CAN2TXERR       EQU     $01CF
0022E8 0FA2E8 -> $01D0                CAN2IDAR0       EQU     $01D0
0022E8 0FA2E8 -> $01D1                CAN2IDAR1       EQU     $01D1
0022E8 0FA2E8 -> $01D2                CAN2IDAR2       EQU     $01D2
0022E8 0FA2E8 -> $01D3                CAN2IDAR3       EQU     $01D3
0022E8 0FA2E8 -> $01D4                CAN2IDMR0       EQU     $01D4
0022E8 0FA2E8 -> $01D5                CAN2IDMR1       EQU     $01D5
0022E8 0FA2E8 -> $01D6                CAN2IDMR2       EQU     $01D6
0022E8 0FA2E8 -> $01D7                CAN2IDMR3       EQU     $01D7
0022E8 0FA2E8 -> $01D8                CAN2IDAR4       EQU     $01D8
0022E8 0FA2E8 -> $01D9                CAN2IDAR5       EQU     $01D9
0022E8 0FA2E8 -> $01DA                CAN2IDAR6       EQU     $01DA
0022E8 0FA2E8 -> $01DB                CAN2IDAR7       EQU     $01DB
0022E8 0FA2E8 -> $01DC                CAN2IDMR4       EQU     $01DC
0022E8 0FA2E8 -> $01DD                CAN2IDMR5       EQU     $01DD
0022E8 0FA2E8 -> $01DE                CAN2IDMR6       EQU     $01DE
0022E8 0FA2E8 -> $01DF                CAN2IDMR7       EQU     $01DF
0022E8 0FA2E8 -> $01E0                CAN2RXIDR0      EQU     $01E0
0022E8 0FA2E8 -> $01E1                CAN2RXIDR1      EQU     $01E1
0022E8 0FA2E8 -> $01E2                CAN2RXIDR2      EQU     $01E2
0022E8 0FA2E8 -> $01E3                CAN2RXIDR3      EQU     $01E3
0022E8 0FA2E8 -> $01E4                CAN2RXDSR0      EQU     $01E4
0022E8 0FA2E8 -> $01E5                CAN2RXDSR1      EQU     $01E5
0022E8 0FA2E8 -> $01E6                CAN2RXDSR2      EQU     $01E6
0022E8 0FA2E8 -> $01E7                CAN2RXDSR3      EQU     $01E7
0022E8 0FA2E8 -> $01E8                CAN2RXDSR4      EQU     $01E8
0022E8 0FA2E8 -> $01E9                CAN2RXDSR5      EQU     $01E9
0022E8 0FA2E8 -> $01EA                CAN2RXDSR6      EQU     $01EA
0022E8 0FA2E8 -> $01EB                CAN2RXDSR7      EQU     $01EB
0022E8 0FA2E8 -> $01EC                CAN2RXDLR       EQU     $01EC
                                      ;$01ED reserved
0022E8 0FA2E8 -> $01EE                CAN2RTSRH       EQU     $01EE
0022E8 0FA2E8 -> $01EF                CAN2RTSRL       EQU     $01EF
0022E8 0FA2E8 -> $01F0                CAN2TXIDR0      EQU     $01F0
0022E8 0FA2E8 -> $01F1                CAN2TXIDR1      EQU     $01F1
0022E8 0FA2E8 -> $01F2                CAN2TXIDR2      EQU     $01F2
0022E8 0FA2E8 -> $01F2                CAN2TXIDR2      EQU     $01F2
0022E8 0FA2E8 -> $01F3                CAN2TXIDR3      EQU     $01F3
0022E8 0FA2E8 -> $01F4                CAN2TXDSR0      EQU     $01F4
0022E8 0FA2E8 -> $01F5                CAN2TXDSR1      EQU     $01F5
0022E8 0FA2E8 -> $01F6                CAN2TXDSR2      EQU     $01F6
0022E8 0FA2E8 -> $01F7                CAN2XDSR3       EQU     $01F7
0022E8 0FA2E8 -> $01F7                CAN2TXDSR3      EQU     $01F7
0022E8 0FA2E8 -> $01F8                CAN2TXDSR4      EQU     $01F8
0022E8 0FA2E8 -> $01F9                CAN2TXDSR5      EQU     $01F9
0022E8 0FA2E8 -> $01FA                CAN2TXDSR6      EQU     $01FA
0022E8 0FA2E8 -> $01FB                CAN2TXDSR7      EQU     $01FB
0022E8 0FA2E8 -> $01FC                CAN2TXDLR       EQU     $01FC
0022E8 0FA2E8 -> $01FD                CAN2TXTBPR      EQU     $01FD
0022E8 0FA2E8 -> $01FE                CAN2TXTSRH      EQU     $01FE
0022E8 0FA2E8 -> $01FF                CAN2TXTSRL      EQU     $01FF
0022E8 0FA2E8 -> $0200                CAN3CTL0        EQU     $0200
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
0022E8 0FA2E8 -> $0201                CAN3CTL1        EQU     $0201
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
0022E8 0FA2E8 -> $0202                CAN3BTR0        EQU     $0202
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
0022E8 0FA2E8 -> $0203                CAN3BTR1        EQU     $0203
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
0022E8 0FA2E8 -> $0204                CAN3RFLG        EQU     $0204
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
0022E8 0FA2E8 -> $0205                CAN3RIER        EQU     $0205
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
0022E8 0FA2E8 -> $0206                CAN3TFLG        EQU     $0206
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
0022E8 0FA2E8 -> $0207                CAN3TIER        EQU     $0207
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
0022E8 0FA2E8 -> $0208                CAN3TARQ        EQU     $0208
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
0022E8 0FA2E8 -> $0209                CAN3TAAK        EQU     $0209
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
0022E8 0FA2E8 -> $020A                CAN3TBSEL       EQU     $020A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
0022E8 0FA2E8 -> $020B                CAN3IDAC        EQU     $020B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$020C  reserved
0022E8 0FA2E8 -> $020D                CAN3MISC        EQU     $020D
                                      ;BOHOLD         EQU     $01
0022E8 0FA2E8 -> $020E                CAN3RXERR       EQU     $020E
0022E8 0FA2E8 -> $020F                CAN3TXERR       EQU     $020F
0022E8 0FA2E8 -> $0210                CAN3IDAR0       EQU     $0210
0022E8 0FA2E8 -> $0211                CAN3IDAR1       EQU     $0211
0022E8 0FA2E8 -> $0212                CAN3IDAR2       EQU     $0212
0022E8 0FA2E8 -> $0213                CAN3IDAR3       EQU     $0213
0022E8 0FA2E8 -> $0214                CAN3IDMR0       EQU     $0214
0022E8 0FA2E8 -> $0215                CAN3IDMR1       EQU     $0215
0022E8 0FA2E8 -> $0216                CAN3IDMR2       EQU     $0216
0022E8 0FA2E8 -> $0217                CAN3IDMR3       EQU     $0217
0022E8 0FA2E8 -> $0218                CAN3IDAR4       EQU     $0218
0022E8 0FA2E8 -> $0219                CAN3IDAR5       EQU     $0219
0022E8 0FA2E8 -> $021A                CAN3IDAR6       EQU     $021A
0022E8 0FA2E8 -> $021B                CAN3IDAR7       EQU     $021B
0022E8 0FA2E8 -> $021C                CAN3IDMR4       EQU     $021C
0022E8 0FA2E8 -> $021D                CAN3IDMR5       EQU     $021D
0022E8 0FA2E8 -> $021E                CAN3IDMR6       EQU     $021E
0022E8 0FA2E8 -> $021F                CAN3IDMR7       EQU     $021F
0022E8 0FA2E8 -> $0220                CAN3RXIDR0      EQU     $0220
0022E8 0FA2E8 -> $0221                CAN3RXIDR1      EQU     $0221
0022E8 0FA2E8 -> $0222                CAN3RXIDR2      EQU     $0222
0022E8 0FA2E8 -> $0223                CAN3RXIDR3      EQU     $0223
0022E8 0FA2E8 -> $0224                CAN3RXDSR0      EQU     $0224
0022E8 0FA2E8 -> $0225                CAN3RXDSR1      EQU     $0225
0022E8 0FA2E8 -> $0226                CAN3RXDSR2      EQU     $0226
0022E8 0FA2E8 -> $0227                CAN3RXDSR3      EQU     $0227
0022E8 0FA2E8 -> $0228                CAN3RXDSR4      EQU     $0228
0022E8 0FA2E8 -> $0229                CAN3RXDSR5      EQU     $0229
0022E8 0FA2E8 -> $022A                CAN3RXDSR6      EQU     $022A
0022E8 0FA2E8 -> $022B                CAN3RXDSR7      EQU     $022B
0022E8 0FA2E8 -> $022C                CAN3RXDLR       EQU     $022C
                                      ;$022D reserved
0022E8 0FA2E8 -> $022E                CAN3RTSRH       EQU     $022E
0022E8 0FA2E8 -> $022F                CAN3RTSRL       EQU     $022F
0022E8 0FA2E8 -> $0230                CAN3TXIDR0      EQU     $0230
0022E8 0FA2E8 -> $0231                CAN3TXIDR1      EQU     $0231
0022E8 0FA2E8 -> $0232                CAN3TXIDR2      EQU     $0232
0022E8 0FA2E8 -> $0232                CAN3TXIDR2      EQU     $0232
0022E8 0FA2E8 -> $0233                CAN3TXIDR3      EQU     $0233
0022E8 0FA2E8 -> $0234                CAN3TXDSR0      EQU     $0234
0022E8 0FA2E8 -> $0235                CAN3TXDSR1      EQU     $0235
0022E8 0FA2E8 -> $0236                CAN3TXDSR2      EQU     $0236
0022E8 0FA2E8 -> $0237                CAN3XDSR3       EQU     $0237
0022E8 0FA2E8 -> $0237                CAN3TXDSR3      EQU     $0237
0022E8 0FA2E8 -> $0238                CAN3TXDSR4      EQU     $0238
0022E8 0FA2E8 -> $0239                CAN3TXDSR5      EQU     $0239
0022E8 0FA2E8 -> $023A                CAN3TXDSR6      EQU     $023A
0022E8 0FA2E8 -> $023B                CAN3TXDSR7      EQU     $023B
0022E8 0FA2E8 -> $023C                CAN3TXDLR       EQU     $023C
0022E8 0FA2E8 -> $023D                CAN3TXTBPR      EQU     $023D
0022E8 0FA2E8 -> $023E                CAN3TXTSRH      EQU     $023E
0022E8 0FA2E8 -> $023F                CAN3TXTSRL      EQU     $023F
0022E8 0FA2E8 -> $0240                PTT             EQU     $0240
0022E8 0FA2E8 -> $0080                PTT7            EQU     $80
0022E8 0FA2E8 -> $0040                PTT6            EQU     $40
0022E8 0FA2E8 -> $0020                PTT5            EQU     $20
0022E8 0FA2E8 -> $0010                PTT4            EQU     $10
0022E8 0FA2E8 -> $0008                PTT3            EQU     $08
0022E8 0FA2E8 -> $0004                PTT2            EQU     $04
0022E8 0FA2E8 -> $0002                PTT1            EQU     $02
0022E8 0FA2E8 -> $0001                PTT0            EQU     $01
0022E8 0FA2E8 -> $0080                PT7             EQU     $80
0022E8 0FA2E8 -> $0040                PT6             EQU     $40
0022E8 0FA2E8 -> $0020                PT5             EQU     $20
0022E8 0FA2E8 -> $0010                PT4             EQU     $10
0022E8 0FA2E8 -> $0008                PT3             EQU     $08
0022E8 0FA2E8 -> $0004                PT2             EQU     $04
0022E8 0FA2E8 -> $0002                PT1             EQU     $02
0022E8 0FA2E8 -> $0001                PT0             EQU     $01
0022E8 0FA2E8 -> $0241                PTIT            EQU     $0241
0022E8 0FA2E8 -> $0080                PTIT7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIT6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIT5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIT4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIT3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIT2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIT1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIT0           EQU     $01
0022E8 0FA2E8 -> $0242                DDRT            EQU     $0242
0022E8 0FA2E8 -> $0080                DDRT7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRT6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRT5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRT4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRT3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRT2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRT1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRT0           EQU     $01
0022E8 0FA2E8 -> $0243                RDRT            EQU     $0243
0022E8 0FA2E8 -> $0080                RDRT7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRT6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRT5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRT4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRT3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRT2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRT1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRT0           EQU     $01
0022E8 0FA2E8 -> $0244                PERT            EQU     $0244
0022E8 0FA2E8 -> $0080                PERT7           EQU     $80
0022E8 0FA2E8 -> $0040                PERT6           EQU     $40
0022E8 0FA2E8 -> $0020                PERT5           EQU     $20
0022E8 0FA2E8 -> $0010                PERT4           EQU     $10
0022E8 0FA2E8 -> $0008                PERT3           EQU     $08
0022E8 0FA2E8 -> $0004                PERT2           EQU     $04
0022E8 0FA2E8 -> $0002                PERT1           EQU     $02
0022E8 0FA2E8 -> $0001                PERT0           EQU     $01
0022E8 0FA2E8 -> $0245                PPST            EQU     $0245
0022E8 0FA2E8 -> $0080                PPST7           EQU     $80
0022E8 0FA2E8 -> $0040                PPST6           EQU     $40
0022E8 0FA2E8 -> $0020                PPST5           EQU     $20
0022E8 0FA2E8 -> $0010                PPST4           EQU     $10
0022E8 0FA2E8 -> $0008                PPST3           EQU     $08
0022E8 0FA2E8 -> $0004                PPST2           EQU     $04
0022E8 0FA2E8 -> $0002                PPST1           EQU     $02
0022E8 0FA2E8 -> $0001                PPST0           EQU     $01
                                      ;$0246 to $0247 reserved
0022E8 0FA2E8 -> $0248                PTS             EQU     $0248
0022E8 0FA2E8 -> $0080                PTS7            EQU     $80
0022E8 0FA2E8 -> $0040                PTS6            EQU     $40
0022E8 0FA2E8 -> $0020                PTS5            EQU     $20
0022E8 0FA2E8 -> $0010                PTS4            EQU     $10
0022E8 0FA2E8 -> $0008                PTS3            EQU     $08
0022E8 0FA2E8 -> $0004                PTS2            EQU     $04
0022E8 0FA2E8 -> $0002                PTS1            EQU     $02
0022E8 0FA2E8 -> $0001                PTS0            EQU     $01
0022E8 0FA2E8 -> $0080                PS7             EQU     $80
0022E8 0FA2E8 -> $0040                PS6             EQU     $40
0022E8 0FA2E8 -> $0020                PS5             EQU     $20
0022E8 0FA2E8 -> $0010                PS4             EQU     $10
0022E8 0FA2E8 -> $0008                PS3             EQU     $08
0022E8 0FA2E8 -> $0004                PS2             EQU     $04
0022E8 0FA2E8 -> $0002                PS1             EQU     $02
0022E8 0FA2E8 -> $0001                PS0             EQU     $01
0022E8 0FA2E8 -> $0249                PTIS            EQU     $0249
0022E8 0FA2E8 -> $0080                PTIS7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIS6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIS5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIS4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIS3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIS2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIS1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIS0           EQU     $01
0022E8 0FA2E8 -> $024A                DDRS            EQU     $024A
0022E8 0FA2E8 -> $0080                DDRS7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRS6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRS5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRS4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRS3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRS2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRS1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRS0           EQU     $01
0022E8 0FA2E8 -> $024B                RDRS            EQU     $024B
0022E8 0FA2E8 -> $0080                RDRS7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRS6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRS5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRS4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRS3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRS2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRS1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRS0           EQU     $01
0022E8 0FA2E8 -> $024C                PERS            EQU     $024C
0022E8 0FA2E8 -> $0080                PERS7           EQU     $80
0022E8 0FA2E8 -> $0040                PERS6           EQU     $40
0022E8 0FA2E8 -> $0020                PERS5           EQU     $20
0022E8 0FA2E8 -> $0010                PERS4           EQU     $10
0022E8 0FA2E8 -> $0008                PERS3           EQU     $08
0022E8 0FA2E8 -> $0004                PERS2           EQU     $04
0022E8 0FA2E8 -> $0002                PERS1           EQU     $02
0022E8 0FA2E8 -> $0001                PERS0           EQU     $01
0022E8 0FA2E8 -> $024D                PPSS            EQU     $024D
0022E8 0FA2E8 -> $0080                PPSS7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSS6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSS5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSS4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSS3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSS2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSS1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSS0           EQU     $01
0022E8 0FA2E8 -> $024E                WOMS            EQU     $024E
0022E8 0FA2E8 -> $0080                WOMS7           EQU     $80
0022E8 0FA2E8 -> $0040                WOMS6           EQU     $40
0022E8 0FA2E8 -> $0020                WOMS5           EQU     $20
0022E8 0FA2E8 -> $0010                WOMS4           EQU     $10
0022E8 0FA2E8 -> $0008                WOMS3           EQU     $08
0022E8 0FA2E8 -> $0004                WOMS2           EQU     $04
0022E8 0FA2E8 -> $0002                WOMS1           EQU     $02
0022E8 0FA2E8 -> $0001                WOMS0           EQU     $01
                                      ;$024F reserved
0022E8 0FA2E8 -> $0250                PTM             EQU     $0250
0022E8 0FA2E8 -> $0080                PTM7            EQU     $80
0022E8 0FA2E8 -> $0040                PTM6            EQU     $40
0022E8 0FA2E8 -> $0020                PTM5            EQU     $20
0022E8 0FA2E8 -> $0010                PTM4            EQU     $10
0022E8 0FA2E8 -> $0008                PTM3            EQU     $08
0022E8 0FA2E8 -> $0004                PTM2            EQU     $04
0022E8 0FA2E8 -> $0002                PTM1            EQU     $02
0022E8 0FA2E8 -> $0001                PTM0            EQU     $01
0022E8 0FA2E8 -> $0080                PM7             EQU     $80
0022E8 0FA2E8 -> $0040                PM6             EQU     $40
0022E8 0FA2E8 -> $0020                PM5             EQU     $20
0022E8 0FA2E8 -> $0010                PM4             EQU     $10
0022E8 0FA2E8 -> $0008                PM3             EQU     $08
0022E8 0FA2E8 -> $0004                PM2             EQU     $04
0022E8 0FA2E8 -> $0002                PM1             EQU     $02
0022E8 0FA2E8 -> $0001                PM0             EQU     $01
0022E8 0FA2E8 -> $0251                PTIM            EQU     $0251
0022E8 0FA2E8 -> $0080                PTIM7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIM6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIM5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIM4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIM3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIM2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIM1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIM0           EQU     $01
0022E8 0FA2E8 -> $0252                DDRM            EQU     $0252
0022E8 0FA2E8 -> $0080                DDRM7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRM6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRM5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRM4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRM3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRM2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRM1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRM0           EQU     $01
0022E8 0FA2E8 -> $0253                RDRM            EQU     $0253
0022E8 0FA2E8 -> $0080                RDRM7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRM6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRM5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRM4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRM3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRM2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRM1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRM0           EQU     $01
0022E8 0FA2E8 -> $0254                PERM            EQU     $0254
0022E8 0FA2E8 -> $0080                PERM7           EQU     $80
0022E8 0FA2E8 -> $0040                PERM6           EQU     $40
0022E8 0FA2E8 -> $0020                PERM5           EQU     $20
0022E8 0FA2E8 -> $0010                PERM4           EQU     $10
0022E8 0FA2E8 -> $0008                PERM3           EQU     $08
0022E8 0FA2E8 -> $0004                PERM2           EQU     $04
0022E8 0FA2E8 -> $0002                PERM1           EQU     $02
0022E8 0FA2E8 -> $0001                PERM0           EQU     $01
0022E8 0FA2E8 -> $0255                PPSM            EQU     $0255
0022E8 0FA2E8 -> $0080                PPSM7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSM6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSM5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSM4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSM3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSM2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSM1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSM0           EQU     $01
0022E8 0FA2E8 -> $0256                WOMM            EQU     $0256
0022E8 0FA2E8 -> $0080                WOMM7           EQU     $80
0022E8 0FA2E8 -> $0040                WOMM6           EQU     $40
0022E8 0FA2E8 -> $0020                WOMM5           EQU     $20
0022E8 0FA2E8 -> $0010                WOMM4           EQU     $10
0022E8 0FA2E8 -> $0008                WOMM3           EQU     $08
0022E8 0FA2E8 -> $0004                WOMM2           EQU     $04
0022E8 0FA2E8 -> $0002                WOMM1           EQU     $02
0022E8 0FA2E8 -> $0001                WOMM0           EQU     $01
0022E8 0FA2E8 -> $0257                MODRR           EQU     $0257
0022E8 0FA2E8 -> $0040                MODRR6          EQU     $40
0022E8 0FA2E8 -> $0020                MODRR5          EQU     $20
0022E8 0FA2E8 -> $0010                MODRR4          EQU     $10
0022E8 0FA2E8 -> $0008                MODRR3          EQU     $08
0022E8 0FA2E8 -> $0004                MODRR2          EQU     $04
0022E8 0FA2E8 -> $0002                MODRR1          EQU     $02
0022E8 0FA2E8 -> $0001                MODRR0          EQU     $01
0022E8 0FA2E8 -> $0258                PTP             EQU     $0258
0022E8 0FA2E8 -> $0080                PTP7            EQU     $80
0022E8 0FA2E8 -> $0040                PTP6            EQU     $40
0022E8 0FA2E8 -> $0020                PTP5            EQU     $20
0022E8 0FA2E8 -> $0010                PTP4            EQU     $10
0022E8 0FA2E8 -> $0008                PTP3            EQU     $08
0022E8 0FA2E8 -> $0004                PTP2            EQU     $04
0022E8 0FA2E8 -> $0002                PTP1            EQU     $02
0022E8 0FA2E8 -> $0001                PTP0            EQU     $01
0022E8 0FA2E8 -> $0080                PP7             EQU     $80
0022E8 0FA2E8 -> $0040                PP6             EQU     $40
0022E8 0FA2E8 -> $0020                PP5             EQU     $20
0022E8 0FA2E8 -> $0010                PP4             EQU     $10
0022E8 0FA2E8 -> $0008                PP3             EQU     $08
0022E8 0FA2E8 -> $0004                PP2             EQU     $04
0022E8 0FA2E8 -> $0002                PP1             EQU     $02
0022E8 0FA2E8 -> $0001                PP0             EQU     $01
0022E8 0FA2E8 -> $0259                PTIP            EQU     $0259
0022E8 0FA2E8 -> $0080                PTIP7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIP6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIP5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIP4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIP3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIP2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIP1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIP0           EQU     $01
0022E8 0FA2E8 -> $025A                DDRP            EQU     $025A
0022E8 0FA2E8 -> $0080                DDRP7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRP6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRP5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRP4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRP3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRP2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRP1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRP0           EQU     $01
0022E8 0FA2E8 -> $025B                RDRP            EQU     $025B
0022E8 0FA2E8 -> $0080                RDRP7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRP6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRP5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRP4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRP3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRP2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRP1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRP0           EQU     $01
0022E8 0FA2E8 -> $025C                PERP            EQU     $025C
0022E8 0FA2E8 -> $0080                PERP7           EQU     $80
0022E8 0FA2E8 -> $0040                PERP6           EQU     $40
0022E8 0FA2E8 -> $0020                PERP5           EQU     $20
0022E8 0FA2E8 -> $0010                PERP4           EQU     $10
0022E8 0FA2E8 -> $0008                PERP3           EQU     $08
0022E8 0FA2E8 -> $0004                PERP2           EQU     $04
0022E8 0FA2E8 -> $0002                PERP1           EQU     $02
0022E8 0FA2E8 -> $0001                PERP0           EQU     $01
0022E8 0FA2E8 -> $025D                PPSP            EQU     $025D
0022E8 0FA2E8 -> $0080                PPSP7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSP6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSP5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSP4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSP3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSP2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSP1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSP0           EQU     $01
0022E8 0FA2E8 -> $025E                PIEP            EQU     $025E
0022E8 0FA2E8 -> $0080                PIEP7           EQU     $80
0022E8 0FA2E8 -> $0040                PIEP6           EQU     $40
0022E8 0FA2E8 -> $0020                PIEP5           EQU     $20
0022E8 0FA2E8 -> $0010                PIEP4           EQU     $10
0022E8 0FA2E8 -> $0008                PIEP3           EQU     $08
0022E8 0FA2E8 -> $0004                PIEP2           EQU     $04
0022E8 0FA2E8 -> $0002                PIEP1           EQU     $02
0022E8 0FA2E8 -> $0001                PIEP0           EQU     $01
0022E8 0FA2E8 -> $025F                PIFP            EQU     $025F
0022E8 0FA2E8 -> $0080                PIFP7           EQU     $80
0022E8 0FA2E8 -> $0040                PIFP6           EQU     $40
0022E8 0FA2E8 -> $0020                PIFP5           EQU     $20
0022E8 0FA2E8 -> $0010                PIFP4           EQU     $10
0022E8 0FA2E8 -> $0008                PIFP3           EQU     $08
0022E8 0FA2E8 -> $0004                PIFP2           EQU     $04
0022E8 0FA2E8 -> $0002                PIFP1           EQU     $02
0022E8 0FA2E8 -> $0001                PIFP0           EQU     $01
0022E8 0FA2E8 -> $0260                PTH             EQU     $0260
0022E8 0FA2E8 -> $0080                PTH7            EQU     $80
0022E8 0FA2E8 -> $0040                PTH6            EQU     $40
0022E8 0FA2E8 -> $0020                PTH5            EQU     $20
0022E8 0FA2E8 -> $0010                PTH4            EQU     $10
0022E8 0FA2E8 -> $0008                PTH3            EQU     $08
0022E8 0FA2E8 -> $0004                PTH2            EQU     $04
0022E8 0FA2E8 -> $0002                PTH1            EQU     $02
0022E8 0FA2E8 -> $0001                PTH0            EQU     $01
0022E8 0FA2E8 -> $0080                PH7             EQU     $80
0022E8 0FA2E8 -> $0040                PH6             EQU     $40
0022E8 0FA2E8 -> $0020                PH5             EQU     $20
0022E8 0FA2E8 -> $0010                PH4             EQU     $10
0022E8 0FA2E8 -> $0008                PH3             EQU     $08
0022E8 0FA2E8 -> $0004                PH2             EQU     $04
0022E8 0FA2E8 -> $0002                PH1             EQU     $02
0022E8 0FA2E8 -> $0001                PH0             EQU     $01
0022E8 0FA2E8 -> $0261                PTIH            EQU     $0261
0022E8 0FA2E8 -> $0080                PTIH7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIH6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIH5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIH4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIH3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIH2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIH1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIH0           EQU     $01
0022E8 0FA2E8 -> $0262                DDRH            EQU     $0262
0022E8 0FA2E8 -> $0080                DDRH7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRH6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRH5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRH4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRH3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRH2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRH1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRH0           EQU     $01
0022E8 0FA2E8 -> $0263                RDRH            EQU     $0263
0022E8 0FA2E8 -> $0080                RDRH7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRH6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRH5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRH4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRH3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRH2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRH1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRH0           EQU     $01
0022E8 0FA2E8 -> $0264                PERH            EQU     $0264
0022E8 0FA2E8 -> $0080                PERH7           EQU     $80
0022E8 0FA2E8 -> $0040                PERH6           EQU     $40
0022E8 0FA2E8 -> $0020                PERH5           EQU     $20
0022E8 0FA2E8 -> $0010                PERH4           EQU     $10
0022E8 0FA2E8 -> $0008                PERH3           EQU     $08
0022E8 0FA2E8 -> $0004                PERH2           EQU     $04
0022E8 0FA2E8 -> $0002                PERH1           EQU     $02
0022E8 0FA2E8 -> $0001                PERH0           EQU     $01
0022E8 0FA2E8 -> $0265                PPSH            EQU     $0265
0022E8 0FA2E8 -> $0080                PPSH7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSH6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSH5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSH4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSH3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSH2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSH1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSH0           EQU     $01
0022E8 0FA2E8 -> $0266                PIEH            EQU     $0266
0022E8 0FA2E8 -> $0080                PIEH7           EQU     $80
0022E8 0FA2E8 -> $0040                PIEH6           EQU     $40
0022E8 0FA2E8 -> $0020                PIEH5           EQU     $20
0022E8 0FA2E8 -> $0010                PIEH4           EQU     $10
0022E8 0FA2E8 -> $0008                PIEH3           EQU     $08
0022E8 0FA2E8 -> $0004                PIEH2           EQU     $04
0022E8 0FA2E8 -> $0002                PIEH1           EQU     $02
0022E8 0FA2E8 -> $0001                PIEH0           EQU     $01
0022E8 0FA2E8 -> $0267                PIFH            EQU     $0267
0022E8 0FA2E8 -> $0080                PIFH7           EQU     $80
0022E8 0FA2E8 -> $0040                PIFH6           EQU     $40
0022E8 0FA2E8 -> $0020                PIFH5           EQU     $20
0022E8 0FA2E8 -> $0010                PIFH4           EQU     $10
0022E8 0FA2E8 -> $0008                PIFH3           EQU     $08
0022E8 0FA2E8 -> $0004                PIFH2           EQU     $04
0022E8 0FA2E8 -> $0002                PIFH1           EQU     $02
0022E8 0FA2E8 -> $0001                PIFH0           EQU     $01
0022E8 0FA2E8 -> $0268                PTJ             EQU     $0268
0022E8 0FA2E8 -> $0080                PTJ7            EQU     $80
0022E8 0FA2E8 -> $0040                PTJ6            EQU     $40
0022E8 0FA2E8 -> $0020                PTJ5            EQU     $20
0022E8 0FA2E8 -> $0010                PTJ4            EQU     $10
0022E8 0FA2E8 -> $0008                PTJ3            EQU     $08
0022E8 0FA2E8 -> $0004                PTJ2            EQU     $04
0022E8 0FA2E8 -> $0002                PTJ1            EQU     $02
0022E8 0FA2E8 -> $0001                PTJ0            EQU     $01
0022E8 0FA2E8 -> $0080                PJ7             EQU     $80
0022E8 0FA2E8 -> $0040                PJ6             EQU     $40
0022E8 0FA2E8 -> $0020                PJ5             EQU     $20
0022E8 0FA2E8 -> $0010                PJ4             EQU     $10
0022E8 0FA2E8 -> $0008                PJ3             EQU     $08
0022E8 0FA2E8 -> $0004                PJ2             EQU     $04
0022E8 0FA2E8 -> $0002                PJ1             EQU     $02
0022E8 0FA2E8 -> $0001                PJ0             EQU     $01
0022E8 0FA2E8 -> $0269                PTIJ            EQU     $0269
0022E8 0FA2E8 -> $0080                PTIJ7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIJ6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIJ5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIJ4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIJ3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIJ2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIJ1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIJ0           EQU     $01
0022E8 0FA2E8 -> $026A                DDRJ            EQU     $026A
0022E8 0FA2E8 -> $0080                DDRJ7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRJ6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRJ5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRJ4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRJ3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRJ2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRJ1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRJ0           EQU     $01
0022E8 0FA2E8 -> $026B                RDRJ            EQU     $026B
0022E8 0FA2E8 -> $0080                RDRJ7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRJ6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRJ5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRJ4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRJ3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRJ2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRJ1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRJ0           EQU     $01
0022E8 0FA2E8 -> $026C                PERJ            EQU     $026C
0022E8 0FA2E8 -> $0080                PERJ7           EQU     $80
0022E8 0FA2E8 -> $0040                PERJ6           EQU     $40
0022E8 0FA2E8 -> $0020                PERJ5           EQU     $20
0022E8 0FA2E8 -> $0010                PERJ4           EQU     $10
0022E8 0FA2E8 -> $0008                PERJ3           EQU     $08
0022E8 0FA2E8 -> $0004                PERJ2           EQU     $04
0022E8 0FA2E8 -> $0002                PERJ1           EQU     $02
0022E8 0FA2E8 -> $0001                PERJ0           EQU     $01
0022E8 0FA2E8 -> $026D                PPSJ            EQU     $026D
0022E8 0FA2E8 -> $0080                PPSJ7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSJ6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSJ5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSJ4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSJ3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSJ2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSJ1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSJ0           EQU     $01
0022E8 0FA2E8 -> $026E                PIEJ            EQU     $026E
0022E8 0FA2E8 -> $0080                PIEJ7           EQU     $80
0022E8 0FA2E8 -> $0040                PIEJ6           EQU     $40
0022E8 0FA2E8 -> $0020                PIEJ5           EQU     $20
0022E8 0FA2E8 -> $0010                PIEJ4           EQU     $10
0022E8 0FA2E8 -> $0008                PIEJ3           EQU     $08
0022E8 0FA2E8 -> $0004                PIEJ2           EQU     $04
0022E8 0FA2E8 -> $0002                PIEJ1           EQU     $02
0022E8 0FA2E8 -> $0001                PIEJ0           EQU     $01
0022E8 0FA2E8 -> $026F                PIFJ            EQU     $026F
0022E8 0FA2E8 -> $0080                PIFJ7           EQU     $80
0022E8 0FA2E8 -> $0040                PIFJ6           EQU     $40
0022E8 0FA2E8 -> $0020                PIFJ5           EQU     $20
0022E8 0FA2E8 -> $0010                PIFJ4           EQU     $10
0022E8 0FA2E8 -> $0008                PIFJ3           EQU     $08
0022E8 0FA2E8 -> $0004                PIFJ2           EQU     $04
0022E8 0FA2E8 -> $0002                PIFJ1           EQU     $02
0022E8 0FA2E8 -> $0001                PIFJ0           EQU     $01
0022E8 0FA2E8 -> $0270                PT0AD0          EQU     $0270
0022E8 0FA2E8 -> $0080                PT0AD07         EQU     $80
0022E8 0FA2E8 -> $0040                PT0AD06         EQU     $40
0022E8 0FA2E8 -> $0020                PT0AD05         EQU     $20
0022E8 0FA2E8 -> $0010                PT0AD04         EQU     $10
0022E8 0FA2E8 -> $0008                PT0AD03         EQU     $08
0022E8 0FA2E8 -> $0004                PT0AD02         EQU     $04
0022E8 0FA2E8 -> $0002                PT0AD01         EQU     $02
0022E8 0FA2E8 -> $0001                PT0AD00         EQU     $01
0022E8 0FA2E8 -> $0271                PT1AD0          EQU     $0271
0022E8 0FA2E8 -> $0080                PT1AD07         EQU     $80
0022E8 0FA2E8 -> $0040                PT1AD06         EQU     $40
0022E8 0FA2E8 -> $0020                PT1AD05         EQU     $20
0022E8 0FA2E8 -> $0010                PT1AD04         EQU     $10
0022E8 0FA2E8 -> $0008                PT1AD03         EQU     $08
0022E8 0FA2E8 -> $0004                PT1AD02         EQU     $04
0022E8 0FA2E8 -> $0002                PT1AD01         EQU     $02
0022E8 0FA2E8 -> $0001                PT1AD00         EQU     $01
0022E8 0FA2E8 -> $0272                DDR0AD0         EQU     $0272
0022E8 0FA2E8 -> $0080                DDR0AD07        EQU     $80
0022E8 0FA2E8 -> $0040                DDR0AD06        EQU     $40
0022E8 0FA2E8 -> $0020                DDR0AD05        EQU     $20
0022E8 0FA2E8 -> $0010                DDR0AD04        EQU     $10
0022E8 0FA2E8 -> $0008                DDR0AD03        EQU     $08
0022E8 0FA2E8 -> $0004                DDR0AD02        EQU     $04
0022E8 0FA2E8 -> $0002                DDR0AD01        EQU     $02
0022E8 0FA2E8 -> $0001                DDR0AD00        EQU     $01
0022E8 0FA2E8 -> $0273                DDR1AD0         EQU     $0273
0022E8 0FA2E8 -> $0080                DDR1AD07        EQU     $80
0022E8 0FA2E8 -> $0040                DDR1AD06        EQU     $40
0022E8 0FA2E8 -> $0020                DDR1AD05        EQU     $20
0022E8 0FA2E8 -> $0010                DDR1AD04        EQU     $10
0022E8 0FA2E8 -> $0008                DDR1AD03        EQU     $08
0022E8 0FA2E8 -> $0004                DDR1AD02        EQU     $04
0022E8 0FA2E8 -> $0002                DDR1AD01        EQU     $02
0022E8 0FA2E8 -> $0001                DDR1AD00        EQU     $01
0022E8 0FA2E8 -> $0274                RDR0AD0         EQU     $0274
0022E8 0FA2E8 -> $0080                RDR0AD07        EQU     $80
0022E8 0FA2E8 -> $0040                RDR0AD06        EQU     $40
0022E8 0FA2E8 -> $0020                RDR0AD05        EQU     $20
0022E8 0FA2E8 -> $0010                RDR0AD04        EQU     $10
0022E8 0FA2E8 -> $0008                RDR0AD03        EQU     $08
0022E8 0FA2E8 -> $0004                RDR0AD02        EQU     $04
0022E8 0FA2E8 -> $0002                RDR0AD01        EQU     $02
0022E8 0FA2E8 -> $0001                RDR0AD00        EQU     $01
0022E8 0FA2E8 -> $0275                RDR1AD0         EQU     $0275
0022E8 0FA2E8 -> $0080                RDR1AD07        EQU     $80
0022E8 0FA2E8 -> $0040                RDR1AD06        EQU     $40
0022E8 0FA2E8 -> $0020                RDR1AD05        EQU     $20
0022E8 0FA2E8 -> $0010                RDR1AD04        EQU     $10
0022E8 0FA2E8 -> $0008                RDR1AD03        EQU     $08
0022E8 0FA2E8 -> $0004                RDR1AD02        EQU     $04
0022E8 0FA2E8 -> $0002                RDR1AD01        EQU     $02
0022E8 0FA2E8 -> $0001                RDR1AD00        EQU     $01
0022E8 0FA2E8 -> $0276                PER0AD0         EQU     $0276
0022E8 0FA2E8 -> $0080                PER0AD07        EQU     $80
0022E8 0FA2E8 -> $0040                PER0AD06        EQU     $40
0022E8 0FA2E8 -> $0020                PER0AD05        EQU     $20
0022E8 0FA2E8 -> $0010                PER0AD04        EQU     $10
0022E8 0FA2E8 -> $0008                PER0AD03        EQU     $08
0022E8 0FA2E8 -> $0004                PER0AD02        EQU     $04
0022E8 0FA2E8 -> $0002                PER0AD01        EQU     $02
0022E8 0FA2E8 -> $0001                PER0AD00        EQU     $01
0022E8 0FA2E8 -> $0277                PER1AD0         EQU     $0277
0022E8 0FA2E8 -> $0080                PER1AD07        EQU     $80
0022E8 0FA2E8 -> $0040                PER1AD06        EQU     $40
0022E8 0FA2E8 -> $0020                PER1AD05        EQU     $20
0022E8 0FA2E8 -> $0010                PER1AD04        EQU     $10
0022E8 0FA2E8 -> $0008                PER1AD03        EQU     $08
0022E8 0FA2E8 -> $0004                PER1AD02        EQU     $04
0022E8 0FA2E8 -> $0002                PER1AD01        EQU     $02
0022E8 0FA2E8 -> $0001                PER1AD00        EQU     $01
0022E8 0FA2E8 -> $0278                PT0AD1          EQU     $0278
0022E8 0FA2E8 -> $0080                PT0AD17         EQU     $80
0022E8 0FA2E8 -> $0040                PT0AD16         EQU     $40
0022E8 0FA2E8 -> $0020                PT0AD15         EQU     $20
0022E8 0FA2E8 -> $0010                PT0AD14         EQU     $10
0022E8 0FA2E8 -> $0008                PT0AD13         EQU     $08
0022E8 0FA2E8 -> $0004                PT0AD12         EQU     $04
0022E8 0FA2E8 -> $0002                PT0AD11         EQU     $02
0022E8 0FA2E8 -> $0001                PT0AD10         EQU     $01
0022E8 0FA2E8 -> $0279                PT1AD1          EQU     $0279
0022E8 0FA2E8 -> $0080                PT1AD17         EQU     $80
0022E8 0FA2E8 -> $0040                PT1AD16         EQU     $40
0022E8 0FA2E8 -> $0020                PT1AD15         EQU     $20
0022E8 0FA2E8 -> $0010                PT1AD14         EQU     $10
0022E8 0FA2E8 -> $0008                PT1AD13         EQU     $08
0022E8 0FA2E8 -> $0004                PT1AD12         EQU     $04
0022E8 0FA2E8 -> $0002                PT1AD11         EQU     $02
0022E8 0FA2E8 -> $0001                PT1AD10         EQU     $01
0022E8 0FA2E8 -> $027A                DDR0AD1         EQU     $027A
0022E8 0FA2E8 -> $0080                DDR0AD17        EQU     $80
0022E8 0FA2E8 -> $0040                DDR0AD16        EQU     $40
0022E8 0FA2E8 -> $0020                DDR0AD15        EQU     $20
0022E8 0FA2E8 -> $0010                DDR0AD14        EQU     $10
0022E8 0FA2E8 -> $0008                DDR0AD13        EQU     $08
0022E8 0FA2E8 -> $0004                DDR0AD12        EQU     $04
0022E8 0FA2E8 -> $0002                DDR0AD11        EQU     $02
0022E8 0FA2E8 -> $0001                DDR0AD10        EQU     $01
0022E8 0FA2E8 -> $027B                DDR1AD1         EQU     $027B
0022E8 0FA2E8 -> $0080                DDR1AD17        EQU     $80
0022E8 0FA2E8 -> $0040                DDR1AD16        EQU     $40
0022E8 0FA2E8 -> $0020                DDR1AD15        EQU     $20
0022E8 0FA2E8 -> $0010                DDR1AD14        EQU     $10
0022E8 0FA2E8 -> $0008                DDR1AD13        EQU     $08
0022E8 0FA2E8 -> $0004                DDR1AD12        EQU     $04
0022E8 0FA2E8 -> $0002                DDR1AD11        EQU     $02
0022E8 0FA2E8 -> $0001                DDR1AD10        EQU     $01
0022E8 0FA2E8 -> $027C                RDR0AD1         EQU     $027C
0022E8 0FA2E8 -> $0080                RDR0AD17        EQU     $80
0022E8 0FA2E8 -> $0040                RDR0AD16        EQU     $40
0022E8 0FA2E8 -> $0020                RDR0AD15        EQU     $20
0022E8 0FA2E8 -> $0010                RDR0AD14        EQU     $10
0022E8 0FA2E8 -> $0008                RDR0AD13        EQU     $08
0022E8 0FA2E8 -> $0004                RDR0AD12        EQU     $04
0022E8 0FA2E8 -> $0002                RDR0AD11        EQU     $02
0022E8 0FA2E8 -> $0001                RDR0AD10        EQU     $01
0022E8 0FA2E8 -> $027D                RDR1AD1         EQU     $027D
0022E8 0FA2E8 -> $0080                RDR1AD17        EQU     $80
0022E8 0FA2E8 -> $0040                RDR1AD16        EQU     $40
0022E8 0FA2E8 -> $0020                RDR1AD15        EQU     $20
0022E8 0FA2E8 -> $0010                RDR1AD14        EQU     $10
0022E8 0FA2E8 -> $0008                RDR1AD13        EQU     $08
0022E8 0FA2E8 -> $0004                RDR1AD12        EQU     $04
0022E8 0FA2E8 -> $0002                RDR1AD11        EQU     $02
0022E8 0FA2E8 -> $0001                RDR1AD10        EQU     $01
0022E8 0FA2E8 -> $027E                PER0AD1         EQU     $027E
0022E8 0FA2E8 -> $0080                PER0AD17        EQU     $80
0022E8 0FA2E8 -> $0040                PER0AD16        EQU     $40
0022E8 0FA2E8 -> $0020                PER0AD15        EQU     $20
0022E8 0FA2E8 -> $0010                PER0AD14        EQU     $10
0022E8 0FA2E8 -> $0008                PER0AD13        EQU     $08
0022E8 0FA2E8 -> $0004                PER0AD12        EQU     $04
0022E8 0FA2E8 -> $0002                PER0AD11        EQU     $02
0022E8 0FA2E8 -> $0001                PER0AD10        EQU     $01
0022E8 0FA2E8 -> $027F                PER1AD1         EQU     $027F
0022E8 0FA2E8 -> $0080                PER1AD17        EQU     $80
0022E8 0FA2E8 -> $0040                PER1AD16        EQU     $40
0022E8 0FA2E8 -> $0020                PER1AD15        EQU     $20
0022E8 0FA2E8 -> $0010                PER1AD14        EQU     $10
0022E8 0FA2E8 -> $0008                PER1AD13        EQU     $08
0022E8 0FA2E8 -> $0004                PER1AD12        EQU     $04
0022E8 0FA2E8 -> $0002                PER1AD11        EQU     $02
0022E8 0FA2E8 -> $0001                PER1AD10        EQU     $01
0022E8 0FA2E8 -> $0280                CAN4CTL0        EQU     $0280
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
0022E8 0FA2E8 -> $0281                CAN4CTL1        EQU     $0281
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
0022E8 0FA2E8 -> $0282                CAN4BTR0        EQU     $0282
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
0022E8 0FA2E8 -> $0283                CAN4BTR1        EQU     $0283
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
0022E8 0FA2E8 -> $0284                CAN4RFLG        EQU     $0284
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
0022E8 0FA2E8 -> $0285                CAN4RIER        EQU     $0285
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
0022E8 0FA2E8 -> $0286                CAN4TFLG        EQU     $0286
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
0022E8 0FA2E8 -> $0287                CAN4TIER        EQU     $0287
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
0022E8 0FA2E8 -> $0288                CAN4TARQ        EQU     $0288
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
0022E8 0FA2E8 -> $0289                CAN4TAAK        EQU     $0289
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
0022E8 0FA2E8 -> $028A                CAN4TBSEL       EQU     $028A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
0022E8 0FA2E8 -> $028B                CAN4IDAC        EQU     $028B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$028C  reserved
0022E8 0FA2E8 -> $028D                CAN4MISC        EQU     $028D
                                      ;BOHOLD         EQU     $01
0022E8 0FA2E8 -> $028E                CAN4RXERR       EQU     $028E
0022E8 0FA2E8 -> $028F                CAN4TXERR       EQU     $028F
0022E8 0FA2E8 -> $0290                CAN4IDAR0       EQU     $0290
0022E8 0FA2E8 -> $0291                CAN4IDAR1       EQU     $0291
0022E8 0FA2E8 -> $0292                CAN4IDAR2       EQU     $0292
0022E8 0FA2E8 -> $0293                CAN4IDAR3       EQU     $0293
0022E8 0FA2E8 -> $0294                CAN4IDMR0       EQU     $0294
0022E8 0FA2E8 -> $0295                CAN4IDMR1       EQU     $0295
0022E8 0FA2E8 -> $0296                CAN4IDMR2       EQU     $0296
0022E8 0FA2E8 -> $0297                CAN4IDMR3       EQU     $0297
0022E8 0FA2E8 -> $0298                CAN4IDAR4       EQU     $0298
0022E8 0FA2E8 -> $0299                CAN4IDAR5       EQU     $0299
0022E8 0FA2E8 -> $029A                CAN4IDAR6       EQU     $029A
0022E8 0FA2E8 -> $029B                CAN4IDAR7       EQU     $029B
0022E8 0FA2E8 -> $029C                CAN4IDMR4       EQU     $029C
0022E8 0FA2E8 -> $029D                CAN4IDMR5       EQU     $029D
0022E8 0FA2E8 -> $029E                CAN4IDMR6       EQU     $029E
0022E8 0FA2E8 -> $029F                CAN4IDMR7       EQU     $029F
0022E8 0FA2E8 -> $02A0                CAN4RXIDR0      EQU     $02A0
0022E8 0FA2E8 -> $02A1                CAN4RXIDR1      EQU     $02A1
0022E8 0FA2E8 -> $02A2                CAN4RXIDR2      EQU     $02A2
0022E8 0FA2E8 -> $02A3                CAN4RXIDR3      EQU     $02A3
0022E8 0FA2E8 -> $02A4                CAN4RXDSR0      EQU     $02A4
0022E8 0FA2E8 -> $02A5                CAN4RXDSR1      EQU     $02A5
0022E8 0FA2E8 -> $02A6                CAN4RXDSR2      EQU     $02A6
0022E8 0FA2E8 -> $02A7                CAN4RXDSR3      EQU     $02A7
0022E8 0FA2E8 -> $02A8                CAN4RXDSR4      EQU     $02A8
0022E8 0FA2E8 -> $02A9                CAN4RXDSR5      EQU     $02A9
0022E8 0FA2E8 -> $02AA                CAN4RXDSR6      EQU     $02AA
0022E8 0FA2E8 -> $02AB                CAN4RXDSR7      EQU     $02AB
0022E8 0FA2E8 -> $02AC                CAN4RXDLR       EQU     $02AC
                                      ;$02AD reserved
0022E8 0FA2E8 -> $02AE                CAN4RTSRH       EQU     $02AE
0022E8 0FA2E8 -> $02AF                CAN4RTSRL       EQU     $02AF
0022E8 0FA2E8 -> $02B0                CAN4TXIDR0      EQU     $02B0
0022E8 0FA2E8 -> $02B1                CAN4TXIDR1      EQU     $02B1
0022E8 0FA2E8 -> $02B2                CAN4TXIDR2      EQU     $02B2
0022E8 0FA2E8 -> $02B2                CAN4TXIDR2      EQU     $02B2
0022E8 0FA2E8 -> $02B3                CAN4TXIDR3      EQU     $02B3
0022E8 0FA2E8 -> $02B4                CAN4TXDSR0      EQU     $02B4
0022E8 0FA2E8 -> $02B5                CAN4TXDSR1      EQU     $02B5
0022E8 0FA2E8 -> $02B6                CAN4TXDSR2      EQU     $02B6
0022E8 0FA2E8 -> $02B7                CAN4XDSR3       EQU     $02B7
0022E8 0FA2E8 -> $02B7                CAN4TXDSR3      EQU     $02B7
0022E8 0FA2E8 -> $02B8                CAN4TXDSR4      EQU     $02B8
0022E8 0FA2E8 -> $02B9                CAN4TXDSR5      EQU     $02B9
0022E8 0FA2E8 -> $02BA                CAN4TXDSR6      EQU     $02BA
0022E8 0FA2E8 -> $02BB                CAN4TXDSR7      EQU     $02BB
0022E8 0FA2E8 -> $02BC                CAN4TXDLR       EQU     $02BC
0022E8 0FA2E8 -> $02BD                CAN4TXTBPR      EQU     $02BD
0022E8 0FA2E8 -> $02BE                CAN4TXTSRH      EQU     $02BE
0022E8 0FA2E8 -> $02BF                CAN4TXTSRL      EQU     $02BF
0022E8 0FA2E8 -> $02C0                ATD0CTL0        EQU     $02C0
0022E8 0FA2E8 -> $02C0                ATDCTL0         EQU     $02C0
                                      ;WRAP3          EQU     $08
                                      ;WRAP2          EQU     $04
                                      ;WRAP1          EQU     $02
                                      ;WRAP0          EQU     $01
0022E8 0FA2E8 -> $02C1                ATD0CTL1        EQU     $02C1
0022E8 0FA2E8 -> $02C1                ATDCTL1         EQU     $02C1
                                      ;ETRIGSEL       EQU     $80
                                      ;SRES1          EQU     $40
                                      ;SRES0          EQU     $20
                                      ;DIS            EQU     $10
                                      ;ETRIGCH3       EQU     $08
                                      ;ETRIGCH2       EQU     $04
                                      ;ETRIGCH1       EQU     $02
                                      ;ETRIGCH0       EQU     $01
0022E8 0FA2E8 -> $02C2                ATD0CTL2        EQU     $02C2
0022E8 0FA2E8 -> $02C2                ATDCTL2         EQU     $02C2
                                      ;AFFC            EQU     $40
                                      ;ICLKSTP         EQU     $20
                                      ;ETRIGLE         EQU     $10
                                      ;ETRIGP          EQU     $08
                                      ;ETRIGE          EQU     $04
                                      ;ASCIE           EQU     $02
                                      ;ASCIF           EQU     $01
0022E8 0FA2E8 -> $02C3                ATD0CTL3        EQU     $02C3
0022E8 0FA2E8 -> $02C3                ATDCTL3         EQU     $02C3
                                      ;DJM             EQU     $80
                                      ;S8C             EQU     $40
                                      ;S4C             EQU     $20
                                      ;S2C             EQU     $10
                                      ;S1C             EQU     $08
                                      ;FIFO            EQU     $04
                                      ;FRZ1            EQU     $02
                                      ;FRZ0            EQU     $01
0022E8 0FA2E8 -> $02C4                ATD0CTL4        EQU     $02C4
0022E8 0FA2E8 -> $02C4                ATDCTL4         EQU     $02C4
                                      ;SMP2           EQU     $80
                                      ;SMP1            EQU     $40
                                      ;SMP0            EQU     $20
                                      ;PRS4            EQU     $10
                                      ;PRS3            EQU     $08
                                      ;PRS2            EQU     $04
                                      ;PRS1            EQU     $02
                                      ;PRS0            EQU     $01
0022E8 0FA2E8 -> $02C5                ATD0CTL5        EQU     $02C5
0022E8 0FA2E8 -> $02C5                ATDCTL5         EQU     $02C5
                                      ;SC              EQU     $40
                                      ;SCAN            EQU     $20
                                      ;MULT            EQU     $10
                                      ;CD              EQU     $08
                                      ;CC              EQU     $04
                                      ;CB              EQU     $02
                                      ;CA              EQU     $01
0022E8 0FA2E8 -> $02C6                ATD0STAT0       EQU     $02C6
0022E8 0FA2E8 -> $02C6                ATDSTAT0        EQU     $02C6
                                      ;SCF             EQU     $80
                                      ;ETORF           EQU     $20
                                      ;FIFOR           EQU     $10
                                      ;CC2             EQU     $04
                                      ;CC1             EQU     $02
                                      ;CC0             EQU     $01
                                      ;$02C7 reserved
0022E8 0FA2E8 -> $02C8                ATD0CMPEH       EQU     $02C8
0022E8 0FA2E8 -> $02C8                ATDCMPEH        EQU     $02C8
                                      ;CMPE15         EQU     $80
                                      ;CMPE14         EQU     $40
                                      ;CMPE13         EQU     $20
                                      ;CMPE12         EQU     $10
                                      ;CMPE11         EQU     $08
                                      ;CMPE10         EQU     $04
                                      ;CMPE9          EQU     $02
                                      ;CMPE8          EQU     $01
0022E8 0FA2E8 -> $02C9                ATD0CMPEL       EQU     $02C9
0022E8 0FA2E8 -> $02C9                ATDCMPEL        EQU     $02C9
                                      ;CMPE7          EQU     $80
                                      ;CMPE6          EQU     $40
                                      ;CMPE5          EQU     $20
                                      ;CMPE4          EQU     $10
                                      ;CMPE3          EQU     $08
                                      ;CMPE2          EQU     $04
                                      ;CMPE1          EQU     $02
                                      ;CMPE0          EQU     $01
0022E8 0FA2E8 -> $02CA                ATD0STAT2H      EQU     $02CA
0022E8 0FA2E8 -> $02CA                ATDSTAT2H       EQU     $02CA
                                      ;CCF15          EQU     $80
                                      ;CCF14          EQU     $40
                                      ;CCF13          EQU     $20
                                      ;CCF12          EQU     $10
                                      ;CCF11          EQU     $08
                                      ;CCF10          EQU     $04
                                      ;CCF9           EQU     $02
                                      ;CCF8           EQU     $01
0022E8 0FA2E8 -> $02CB                ATD0STAT2L      EQU     $02CB
0022E8 0FA2E8 -> $02CB                ATDSTAT2L       EQU     $02CB
                                      ;CCF7           EQU     $80
                                      ;CCF6           EQU     $40
                                      ;CCF5           EQU     $20
                                      ;CCF4           EQU     $10
                                      ;CCF3           EQU     $08
                                      ;CCF2           EQU     $04
                                      ;CCF1           EQU     $02
                                      ;CCF0           EQU     $01
0022E8 0FA2E8 -> $02CC                ATD0DIENH       EQU     $02CC
0022E8 0FA2E8 -> $02CC                ATDDIENH        EQU     $02CC
                                      ;IEN15          EQU     $80
                                      ;IEN14          EQU     $40
                                      ;IEN13          EQU     $20
                                      ;IEN12          EQU     $10
                                      ;IEN11          EQU     $08
                                      ;IEN10          EQU     $04
                                      ;IEN9           EQU     $02
                                      ;IEN8           EQU     $01
0022E8 0FA2E8 -> $02CD                ATD0DIENL       EQU     $02CD
0022E8 0FA2E8 -> $02CD                ATDDIENL        EQU     $02CD
                                      ;IEN7           EQU     $80
                                      ;IEN6           EQU     $40
                                      ;IEN5           EQU     $20
                                      ;IEN4           EQU     $10
                                      ;IEN3           EQU     $08
                                      ;IEN2           EQU     $04
                                      ;IEN1           EQU     $02
                                      ;IEN0           EQU     $01
0022E8 0FA2E8 -> $02CE                ATD0CMPHTH      EQU     $02CE
0022E8 0FA2E8 -> $02CE                ATDCMPHTH       EQU     $02CE
                                      ;CMPHT15        EQU     $80
                                      ;CMPHT14        EQU     $40
                                      ;CMPHT13        EQU     $20
                                      ;CMPHT12        EQU     $10
                                      ;CMPHT11        EQU     $08
                                      ;CMPHT10        EQU     $04
                                      ;CMPHT9         EQU     $02
                                      ;CMPHT8         EQU     $01
0022E8 0FA2E8 -> $02CF                ATD0CMPHTL      EQU     $02CF
0022E8 0FA2E8 -> $02CF                ATDCMPHTL       EQU     $02CF
                                      ;CMPHT0         EQU     $01
                                      ;CMPHT1         EQU     $02
                                      ;CMPHT2         EQU     $04
                                      ;CMPHT3         EQU     $08
                                      ;CMPHT4         EQU     $10
                                      ;CMPHT5         EQU     $20
                                      ;CMPHT6         EQU     $40
                                      ;CMPHT7         EQU     $80
0022E8 0FA2E8 -> $02D0                ATD0DR0         EQU     $02D0
0022E8 0FA2E8 -> $02D0                ATDDR0          EQU     $02D0
0022E8 0FA2E8 -> $02D0                ATD0DR0H        EQU     $02D0
0022E8 0FA2E8 -> $02D1                ATD0DR0L        EQU     $02D1
0022E8 0FA2E8 -> $02D2                ATD0DR1         EQU     $02D2
0022E8 0FA2E8 -> $02D2                ATDDR1          EQU     $02D2
0022E8 0FA2E8 -> $02D2                ATD0DR1H        EQU     $02D2
0022E8 0FA2E8 -> $02D3                ATD0DR1L        EQU     $02D3
0022E8 0FA2E8 -> $02D4                ATD0DR2         EQU     $02D4
0022E8 0FA2E8 -> $02D4                ATDDR2          EQU     $02D4
0022E8 0FA2E8 -> $02D4                ATD0DR2H        EQU     $02D4
0022E8 0FA2E8 -> $02D5                ATD0DR2L        EQU     $02D5
0022E8 0FA2E8 -> $02D6                ATD0DR3         EQU     $02D6
0022E8 0FA2E8 -> $02D6                ATDDR3          EQU     $02D6
0022E8 0FA2E8 -> $02D6                ATD0DR3H        EQU     $02D6
0022E8 0FA2E8 -> $02D7                ATD0DR3L        EQU     $02D7
0022E8 0FA2E8 -> $02D8                ATD0DR4         EQU     $02D8
0022E8 0FA2E8 -> $02D8                ATDDR4          EQU     $02D8
0022E8 0FA2E8 -> $02D8                ATD0DR4H        EQU     $02D8
0022E8 0FA2E8 -> $02D9                ATD0DR4L        EQU     $02D9
0022E8 0FA2E8 -> $02DA                ATD0DR5         EQU     $02DA
0022E8 0FA2E8 -> $02DA                ATDDR5          EQU     $02DA
0022E8 0FA2E8 -> $02DA                ATD0DR5H        EQU     $02DA
0022E8 0FA2E8 -> $02DB                ATD0DR5L        EQU     $02DB
0022E8 0FA2E8 -> $02DC                ATD0DR6         EQU     $02DC
0022E8 0FA2E8 -> $02DC                ATDDR6          EQU     $02DC
0022E8 0FA2E8 -> $02DC                ATD0DR6H        EQU     $02DC
0022E8 0FA2E8 -> $02DD                ATD0DR6L        EQU     $02DD
0022E8 0FA2E8 -> $02DE                ATD0DR7         EQU     $02DE
0022E8 0FA2E8 -> $02DE                ATDDR7          EQU     $02DE
0022E8 0FA2E8 -> $02DE                ATD0DR7H        EQU     $02DE
0022E8 0FA2E8 -> $02DF                ATD0DR7L        EQU     $02DF
0022E8 0FA2E8 -> $02E0                ATD0DR8         EQU     $02E0
0022E8 0FA2E8 -> $02E0                ATDDR8          EQU     $02E0
0022E8 0FA2E8 -> $02E0                ATD0DR8H        EQU     $02E0
0022E8 0FA2E8 -> $02E1                ATD0DR8L        EQU     $02E1
0022E8 0FA2E8 -> $02E2                ATD0DR9         EQU     $02E2
0022E8 0FA2E8 -> $02E2                ATDDR9          EQU     $02E2
0022E8 0FA2E8 -> $02E2                ATD0DR9H        EQU     $02E2
0022E8 0FA2E8 -> $02E3                ATD0DR9L        EQU     $02E3
0022E8 0FA2E8 -> $02E3                ATD0DR10        EQU     $02E3
0022E8 0FA2E8 -> $02E3                ATDDR10         EQU     $02E3
0022E8 0FA2E8 -> $02E3                ATD0DR10H       EQU     $02E3
0022E8 0FA2E8 -> $02E5                ATD0DR10L       EQU     $02E5
0022E8 0FA2E8 -> $02E6                ATD0DR11        EQU     $02E6
0022E8 0FA2E8 -> $02E6                ATDDR11         EQU     $02E6
0022E8 0FA2E8 -> $02E6                ATD0DR11H       EQU     $02E6
0022E8 0FA2E8 -> $02E7                ATD0DR11L       EQU     $02E7
0022E8 0FA2E8 -> $02E8                ATD0DR12        EQU     $02E8
0022E8 0FA2E8 -> $02E8                ATDDR12         EQU     $02E8
0022E8 0FA2E8 -> $02E8                ATD0DR12H       EQU     $02E8
0022E8 0FA2E8 -> $02E9                ATD0DR12L       EQU     $02E9
0022E8 0FA2E8 -> $02EA                ATD0DR13        EQU     $02EA
0022E8 0FA2E8 -> $02EA                ATDDR13         EQU     $02EA
0022E8 0FA2E8 -> $02EA                ATD0DR13H       EQU     $02EA
0022E8 0FA2E8 -> $02EB                ATD0DR13L       EQU     $02EB
0022E8 0FA2E8 -> $02EC                ATD0DR14        EQU     $02EC
0022E8 0FA2E8 -> $02EC                ATDDR14         EQU     $02EC
0022E8 0FA2E8 -> $02EC                ATD0DR14H       EQU     $02EC
0022E8 0FA2E8 -> $02ED                ATD0DR14L       EQU     $02ED
0022E8 0FA2E8 -> $02EE                ATD0DR15        EQU     $02EE
0022E8 0FA2E8 -> $02EE                ATDDR15         EQU     $02EE
0022E8 0FA2E8 -> $02EE                ATD0DR15H       EQU     $02EE
0022E8 0FA2E8 -> $02EF                ATD0DR15L       EQU     $02EF
0022E8 0FA2E8 -> $02F0                VREGHTCL        EQU     $02F0
0022E8 0FA2E8 -> $0020                VSEL            EQU     $20
0022E8 0FA2E8 -> $0010                VAE             EQU     $10
0022E8 0FA2E8 -> $0008                HTEN            EQU     $08
0022E8 0FA2E8 -> $0004                HTDS            EQU     $04
0022E8 0FA2E8 -> $0002                HTIE            EQU     $02
0022E8 0FA2E8 -> $0001                HTIF            EQU     $01
0022E8 0FA2E8 -> $02F1                VREGCTRL        EQU     $02F1
0022E8 0FA2E8 -> $0004                LVDS            EQU     $04
0022E8 0FA2E8 -> $0002                LVIE            EQU     $02
0022E8 0FA2E8 -> $0001                LVIF            EQU     $01
0022E8 0FA2E8 -> $02F2                VREGAPICTL      EQU     $02F2
0022E8 0FA2E8 -> $0080                APICLK          EQU     $80
0022E8 0FA2E8 -> $0010                APIES           EQU     $10
0022E8 0FA2E8 -> $0008                APIEA           EQU     $08
0022E8 0FA2E8 -> $0004                APIFE           EQU     $04
0022E8 0FA2E8 -> $0002                APIE            EQU     $02
0022E8 0FA2E8 -> $0001                APIF            EQU     $01
0022E8 0FA2E8 -> $02F3                VREGAPITR       EQU     $02F3
0022E8 0FA2E8 -> $0080                APITR5          EQU     $80
0022E8 0FA2E8 -> $0040                APITR4          EQU     $40
0022E8 0FA2E8 -> $0020                APITR3          EQU     $20
0022E8 0FA2E8 -> $0010                APITR2          EQU     $10
0022E8 0FA2E8 -> $0008                APITR1          EQU     $08
0022E8 0FA2E8 -> $0004                APITR0          EQU     $04
0022E8 0FA2E8 -> $02F4                VREGAPIRH       EQU     $02F4
0022E8 0FA2E8 -> $0080                APIR15          EQU     $80
0022E8 0FA2E8 -> $0040                APIR14          EQU     $40
0022E8 0FA2E8 -> $0020                APIR13          EQU     $20
0022E8 0FA2E8 -> $0010                APIR12          EQU     $10
0022E8 0FA2E8 -> $0008                APIR11          EQU     $08
0022E8 0FA2E8 -> $0004                APIR10          EQU     $04
0022E8 0FA2E8 -> $0002                APIR9           EQU     $02
0022E8 0FA2E8 -> $0001                APIR8           EQU     $01
0022E8 0FA2E8 -> $02F5                VREGAPIRL       EQU     $02F5
0022E8 0FA2E8 -> $0080                APIR7           EQU     $80
0022E8 0FA2E8 -> $0040                APIR6           EQU     $40
0022E8 0FA2E8 -> $0020                APIR5           EQU     $20
0022E8 0FA2E8 -> $0010                APIR4           EQU     $10
0022E8 0FA2E8 -> $0008                APIR3           EQU     $08
0022E8 0FA2E8 -> $0004                APIR2           EQU     $04
0022E8 0FA2E8 -> $0002                APIR1           EQU     $02
0022E8 0FA2E8 -> $0001                APIR0           EQU     $01
                                      ;$02F6 reserved
0022E8 0FA2E8 -> $02F7                VREGHTTR        EQU     $02F7
0022E8 0FA2E8 -> $0080                HTOEN           EQU     $80
0022E8 0FA2E8 -> $000F                HTTR            EQU     $0F
                                      ;$02F8 to $02FF reserved
0022E8 0FA2E8 -> $0300                PWME            EQU     $0300
0022E8 0FA2E8 -> $0080                PWME7           EQU     $80
0022E8 0FA2E8 -> $0040                PWME6           EQU     $40
0022E8 0FA2E8 -> $0020                PWME5           EQU     $20
0022E8 0FA2E8 -> $0010                PWME4           EQU     $10
0022E8 0FA2E8 -> $0008                PWME3           EQU     $08
0022E8 0FA2E8 -> $0004                PWME2           EQU     $04
0022E8 0FA2E8 -> $0002                PWME1           EQU     $02
0022E8 0FA2E8 -> $0001                PWME0           EQU     $01
0022E8 0FA2E8 -> $0301                PWMPOL          EQU     $0301
0022E8 0FA2E8 -> $0080                PPOL7           EQU     $80
0022E8 0FA2E8 -> $0040                PPOL6           EQU     $40
0022E8 0FA2E8 -> $0020                PPOL5           EQU     $20
0022E8 0FA2E8 -> $0010                PPOL4           EQU     $10
0022E8 0FA2E8 -> $0008                PPOL3           EQU     $08
0022E8 0FA2E8 -> $0004                PPOL2           EQU     $04
0022E8 0FA2E8 -> $0002                PPOL1           EQU     $02
0022E8 0FA2E8 -> $0001                PPOL0           EQU     $01
0022E8 0FA2E8 -> $0302                PWMCLK          EQU     $0302
0022E8 0FA2E8 -> $0080                PCLK7           EQU     $80
0022E8 0FA2E8 -> $0040                PCLK6           EQU     $40
0022E8 0FA2E8 -> $0020                PCLK5           EQU     $20
0022E8 0FA2E8 -> $0010                PCLK4           EQU     $10
0022E8 0FA2E8 -> $0008                PCLK3           EQU     $08
0022E8 0FA2E8 -> $0004                PCLK2           EQU     $04
0022E8 0FA2E8 -> $0002                PCLK1           EQU     $02
0022E8 0FA2E8 -> $0001                PCLK0           EQU     $01
0022E8 0FA2E8 -> $0303                PWMPRCLK        EQU     $0303
0022E8 0FA2E8 -> $0040                PCKB2           EQU     $40
0022E8 0FA2E8 -> $0020                PCKB1           EQU     $20
0022E8 0FA2E8 -> $0010                PCKB0           EQU     $10
0022E8 0FA2E8 -> $0004                PCKA2           EQU     $04
0022E8 0FA2E8 -> $0002                PCKA1           EQU     $02
0022E8 0FA2E8 -> $0001                PCKA0           EQU     $01
0022E8 0FA2E8 -> $0304                PWMCAE          EQU     $0304
0022E8 0FA2E8 -> $0080                CAE7            EQU     $80
0022E8 0FA2E8 -> $0040                CAE6            EQU     $40
0022E8 0FA2E8 -> $0020                CAE5            EQU     $20
0022E8 0FA2E8 -> $0010                CAE4            EQU     $10
0022E8 0FA2E8 -> $0008                CAE3            EQU     $08
0022E8 0FA2E8 -> $0004                CAE2            EQU     $04
0022E8 0FA2E8 -> $0002                CAE1            EQU     $02
0022E8 0FA2E8 -> $0001                CAE0            EQU     $01
0022E8 0FA2E8 -> $0305                PWMCTL          EQU     $0305
0022E8 0FA2E8 -> $0080                CON67           EQU     $80
0022E8 0FA2E8 -> $0040                CON45           EQU     $40
0022E8 0FA2E8 -> $0020                CON23           EQU     $20
0022E8 0FA2E8 -> $0010                CON01           EQU     $10
0022E8 0FA2E8 -> $0008                PSWAI           EQU     $08
0022E8 0FA2E8 -> $0004                PFRZ            EQU     $04
0022E8 0FA2E8 -> $0306                PWMTST          EQU     $0306
0022E8 0FA2E8 -> $0307                PWMPRSC         EQU     $0307
0022E8 0FA2E8 -> $030A                PWMSCNTA        EQU     $030A
0022E8 0FA2E8 -> $030B                PWMSCNTB        EQU     $030B
0022E8 0FA2E8 -> $030C                PWMCNT0         EQU     $030C
0022E8 0FA2E8 -> $030D                PWMCNT1         EQU     $030D
0022E8 0FA2E8 -> $030E                PWMCNT2         EQU     $030E
0022E8 0FA2E8 -> $030F                PWMCNT3         EQU     $030F
0022E8 0FA2E8 -> $0310                PWMCNT4         EQU     $0310
0022E8 0FA2E8 -> $0311                PWMCNT5         EQU     $0311
0022E8 0FA2E8 -> $0312                PWMCNT6         EQU     $0312
0022E8 0FA2E8 -> $0313                PWMCNT7         EQU     $0313
0022E8 0FA2E8 -> $0314                PWMPER0         EQU     $0314
0022E8 0FA2E8 -> $0315                PWMPER1         EQU     $0315
0022E8 0FA2E8 -> $0316                PWMPER2         EQU     $0316
0022E8 0FA2E8 -> $0317                PWMPER3         EQU     $0317
0022E8 0FA2E8 -> $0318                PWMPER4         EQU     $0318
0022E8 0FA2E8 -> $0319                PWMPER5         EQU     $0319
0022E8 0FA2E8 -> $031A                PWMPER6         EQU     $031A
0022E8 0FA2E8 -> $031B                PWMPER7         EQU     $031B
0022E8 0FA2E8 -> $031C                PWMDTY0         EQU     $031C
0022E8 0FA2E8 -> $031D                PWMDTY1         EQU     $031D
0022E8 0FA2E8 -> $031E                PWMDTY2         EQU     $031E
0022E8 0FA2E8 -> $031F                PWMDTY3         EQU     $031F
0022E8 0FA2E8 -> $0320                PWMDTY4         EQU     $0320
0022E8 0FA2E8 -> $0321                PWMDTY5         EQU     $0321
0022E8 0FA2E8 -> $0322                PWMDTY6         EQU     $0322
0022E8 0FA2E8 -> $0323                PWMDTY7         EQU     $0323
0022E8 0FA2E8 -> $0324                PWMSDN          EQU     $0324
0022E8 0FA2E8 -> $0080                PWMIF           EQU     $80
0022E8 0FA2E8 -> $0040                PWMIE           EQU     $40
0022E8 0FA2E8 -> $0020                PWMRSTRT        EQU     $20
0022E8 0FA2E8 -> $0010                PWMLVL          EQU     $10
0022E8 0FA2E8 -> $0004                PWM7IN          EQU     $04
0022E8 0FA2E8 -> $0002                PWM7INL         EQU     $02
0022E8 0FA2E8 -> $0001                PWM7ENA         EQU     $01
                                      ;$0325 to $032F reserved
0022E8 0FA2E8 -> $0330                SCI6BDH         EQU     $0330
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $0330                SCI6ASR1        EQU     $0330
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $0331                SCI6BDL         EQU     $0331
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $0331                SCI6ACR1        EQU     $0331
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $0332                SCI6CR1         EQU     $0332
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $0332                SCI6ACR2        EQU     $0332
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $0333                SCI6CR2         EQU     $0333
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $0334                SCI6SR1         EQU     $0334
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $0335                SCI6SR2         EQU     $0335
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $0336                SCI6DRH         EQU     $0336
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $0337                SCI6DRL         EQU     $0337
0022E8 0FA2E8 -> $0338                SCI7BDH         EQU     $0338
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
0022E8 0FA2E8 -> $0338                SCI7ASR1        EQU     $0338
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
0022E8 0FA2E8 -> $0339                SCI7BDL         EQU     $0339
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
0022E8 0FA2E8 -> $0339                SCI7ACR1        EQU     $0339
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
0022E8 0FA2E8 -> $033A                SCI7CR1         EQU     $033A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
0022E8 0FA2E8 -> $033A                SCI7ACR2        EQU     $033A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
0022E8 0FA2E8 -> $033B                SCI7CR2         EQU     $033B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
0022E8 0FA2E8 -> $033C                SCI7SR1         EQU     $033C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
0022E8 0FA2E8 -> $335D                SCI7SR2         EQU     $0335D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
0022E8 0FA2E8 -> $033E                SCI7DRH         EQU     $033E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
0022E8 0FA2E8 -> $033F                SCI7DRL         EQU     $033F
0022E8 0FA2E8 -> $0340                PITCFLMT        EQU     $0340
0022E8 0FA2E8 -> $0080                PITE            EQU     $80
0022E8 0FA2E8 -> $0040                PITSWAI         EQU     $40
0022E8 0FA2E8 -> $0020                PITFRZ          EQU     $20
0022E8 0FA2E8 -> $0002                PFLMT1          EQU     $02
0022E8 0FA2E8 -> $0001                PFLMT0          EQU     $01
0022E8 0FA2E8 -> $0341                PITFLT          EQU     $0341
0022E8 0FA2E8 -> $0080                PFLT7           EQU     $80
0022E8 0FA2E8 -> $0040                PFLT6           EQU     $40
0022E8 0FA2E8 -> $0020                PFLT5           EQU     $20
0022E8 0FA2E8 -> $0010                PFLT4           EQU     $10
0022E8 0FA2E8 -> $0008                PFLT3           EQU     $08
0022E8 0FA2E8 -> $0004                PFLT2           EQU     $04
0022E8 0FA2E8 -> $0002                PFLT1           EQU     $02
0022E8 0FA2E8 -> $0001                PFLT0           EQU     $01
0022E8 0FA2E8 -> $0342                PITCE           EQU     $0342
0022E8 0FA2E8 -> $0080                PCE7            EQU     $80
0022E8 0FA2E8 -> $0040                PCE6            EQU     $40
0022E8 0FA2E8 -> $0020                PCE5            EQU     $20
0022E8 0FA2E8 -> $0010                PCE4            EQU     $10
0022E8 0FA2E8 -> $0008                PCE3            EQU     $08
0022E8 0FA2E8 -> $0004                PCE2            EQU     $04
0022E8 0FA2E8 -> $0002                PCE1            EQU     $02
0022E8 0FA2E8 -> $0001                PCE0            EQU     $01
0022E8 0FA2E8 -> $0343                PITMUX          EQU     $0343
0022E8 0FA2E8 -> $0080                PMUX7           EQU     $80
0022E8 0FA2E8 -> $0040                PMUX6           EQU     $40
0022E8 0FA2E8 -> $0020                PMUX5           EQU     $20
0022E8 0FA2E8 -> $0010                PMUX4           EQU     $10
0022E8 0FA2E8 -> $0008                PMUX3           EQU     $08
0022E8 0FA2E8 -> $0004                PMUX2           EQU     $04
0022E8 0FA2E8 -> $0002                PMUX1           EQU     $02
0022E8 0FA2E8 -> $0001                PMUX0           EQU     $01
0022E8 0FA2E8 -> $0344                PITINTE         EQU     $0344
0022E8 0FA2E8 -> $0080                PINTE7          EQU     $80
0022E8 0FA2E8 -> $0040                PINTE6          EQU     $40
0022E8 0FA2E8 -> $0020                PINTE5          EQU     $20
0022E8 0FA2E8 -> $0010                PINTE4          EQU     $10
0022E8 0FA2E8 -> $0008                PINTE3          EQU     $08
0022E8 0FA2E8 -> $0004                PINTE2          EQU     $04
0022E8 0FA2E8 -> $0002                PINTE1          EQU     $02
0022E8 0FA2E8 -> $0001                PINTE0          EQU     $01
0022E8 0FA2E8 -> $0345                PITTF           EQU     $0345
0022E8 0FA2E8 -> $0080                PTF7            EQU     $80
0022E8 0FA2E8 -> $0040                PTF6            EQU     $40
0022E8 0FA2E8 -> $0020                PTF5            EQU     $20
0022E8 0FA2E8 -> $0010                PTF4            EQU     $10
0022E8 0FA2E8 -> $0008                PTF3            EQU     $08
0022E8 0FA2E8 -> $0004                PTF2            EQU     $04
0022E8 0FA2E8 -> $0002                PTF1            EQU     $02
0022E8 0FA2E8 -> $0001                PTF0            EQU     $01
0022E8 0FA2E8 -> $0346                PITMTLD0        EQU     $0346
0022E8 0FA2E8 -> $0080                PMTLD7          EQU     $80
0022E8 0FA2E8 -> $0040                PMTLD6          EQU     $40
0022E8 0FA2E8 -> $0020                PMTLD5          EQU     $20
0022E8 0FA2E8 -> $0010                PMTLD4          EQU     $10
0022E8 0FA2E8 -> $0008                PMTLD3          EQU     $08
0022E8 0FA2E8 -> $0004                PMTLD2          EQU     $04
0022E8 0FA2E8 -> $0002                PMTLD1          EQU     $02
0022E8 0FA2E8 -> $0001                PMTLD0          EQU     $01
0022E8 0FA2E8 -> $0347                PITMTLD1        EQU     $0347
                                      ;PMTLD7         EQU     $80
                                      ;PMTLD6         EQU     $40
                                      ;PMTLD5         EQU     $20
                                      ;PMTLD4         EQU     $10
                                      ;PMTLD3         EQU     $08
                                      ;PMTLD2         EQU     $04
                                      ;PMTLD1         EQU     $02
                                      ;PMTLD0         EQU     $01
0022E8 0FA2E8 -> $0348                PITLD0          EQU     $0348
0022E8 0FA2E8 -> $034A                PITCNT0         EQU     $034A
0022E8 0FA2E8 -> $034C                PITLD1          EQU     $034C
0022E8 0FA2E8 -> $034E                PITCNT1         EQU     $034E
0022E8 0FA2E8 -> $0350                PITLD2          EQU     $0350
0022E8 0FA2E8 -> $0352                PITCNT2         EQU     $0352
0022E8 0FA2E8 -> $0354                PITLD3          EQU     $0354
0022E8 0FA2E8 -> $0356                PITCNT3         EQU     $0356
0022E8 0FA2E8 -> $0358                PITLD4          EQU     $0358
0022E8 0FA2E8 -> $035A                PITCNT4         EQU     $035A
0022E8 0FA2E8 -> $035C                PITLD5          EQU     $035C
0022E8 0FA2E8 -> $035E                PITCNT5         EQU     $035E
0022E8 0FA2E8 -> $0360                PITLD6          EQU     $0360
0022E8 0FA2E8 -> $0362                PITCNT6         EQU     $0362
0022E8 0FA2E8 -> $0364                PITLD7          EQU     $0364
0022E8 0FA2E8 -> $0366                PITCNT7         EQU     $0366
0022E8 0FA2E8 -> $0368                PTR             EQU     $0368
0022E8 0FA2E8 -> $0080                PTR7            EQU     $80
0022E8 0FA2E8 -> $0040                PTR6            EQU     $40
0022E8 0FA2E8 -> $0020                PTR5            EQU     $20
0022E8 0FA2E8 -> $0010                PTR4            EQU     $10
0022E8 0FA2E8 -> $0008                PTR3            EQU     $08
0022E8 0FA2E8 -> $0004                PTR2            EQU     $04
0022E8 0FA2E8 -> $0002                PTR1            EQU     $02
0022E8 0FA2E8 -> $0001                PTR0            EQU     $01
0022E8 0FA2E8 -> $0369                PTIR            EQU     $0369
0022E8 0FA2E8 -> $0080                PTIR7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIR6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIR5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIR4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIR3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIR2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIR1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIR0           EQU     $01
0022E8 0FA2E8 -> $036A                DDRR            EQU     $036A
0022E8 0FA2E8 -> $0080                DDRR7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRR6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRR5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRR4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRR3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRR2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRR1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRR0           EQU     $01
0022E8 0FA2E8 -> $036B                RDRR            EQU     $036B
0022E8 0FA2E8 -> $0080                RDRR7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRR6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRR5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRR4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRR3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRR2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRR1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRR0           EQU     $01
0022E8 0FA2E8 -> $036C                PERR            EQU     $036C
0022E8 0FA2E8 -> $0080                PERR7           EQU     $80
0022E8 0FA2E8 -> $0040                PERR6           EQU     $40
0022E8 0FA2E8 -> $0020                PERR5           EQU     $20
0022E8 0FA2E8 -> $0010                PERR4           EQU     $10
0022E8 0FA2E8 -> $0008                PERR3           EQU     $08
0022E8 0FA2E8 -> $0004                PERR2           EQU     $04
0022E8 0FA2E8 -> $0002                PERR1           EQU     $02
0022E8 0FA2E8 -> $0001                PERR0           EQU     $01
0022E8 0FA2E8 -> $036D                PPSR            EQU     $036D
0022E8 0FA2E8 -> $0080                PPSR7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSR6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSR5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSR4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSR3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSR2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSR1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSR0           EQU     $01
0022E8 0FA2E8 -> $036F                PTRRR           EQU     $036F
0022E8 0FA2E8 -> $0080                PTRRR7          EQU     $80
0022E8 0FA2E8 -> $0040                PTRRR6          EQU     $40
0022E8 0FA2E8 -> $0020                PTRRR5          EQU     $20
0022E8 0FA2E8 -> $0010                PTRRR4          EQU     $10
0022E8 0FA2E8 -> $0008                PTRRR3          EQU     $08
0022E8 0FA2E8 -> $0004                PTRRR2          EQU     $04
0022E8 0FA2E8 -> $0002                PTRRR1          EQU     $02
0022E8 0FA2E8 -> $0001                PTRRR0          EQU     $01
0022E8 0FA2E8 -> $0370                PTL             EQU     $0370
0022E8 0FA2E8 -> $0080                PTL7            EQU     $80
0022E8 0FA2E8 -> $0040                PTL6            EQU     $40
0022E8 0FA2E8 -> $0020                PTL5            EQU     $20
0022E8 0FA2E8 -> $0010                PTL4            EQU     $10
0022E8 0FA2E8 -> $0008                PTL3            EQU     $08
0022E8 0FA2E8 -> $0004                PTL2            EQU     $04
0022E8 0FA2E8 -> $0002                PTL1            EQU     $02
0022E8 0FA2E8 -> $0001                PTL0            EQU     $01
0022E8 0FA2E8 -> $0371                PTIL            EQU     $0371
0022E8 0FA2E8 -> $0080                PTIL7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIL6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIL5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIL4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIL3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIL2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIL1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIL0           EQU     $01
0022E8 0FA2E8 -> $0372                DDRL            EQU     $0372
0022E8 0FA2E8 -> $0080                DDRL7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRL6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRL5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRL4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRL3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRL2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRL1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRL0           EQU     $01
0022E8 0FA2E8 -> $0373                RDRL            EQU     $0373
0022E8 0FA2E8 -> $0080                RDRL7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRL6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRL5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRL4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRL3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRL2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRL1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRL0           EQU     $01
0022E8 0FA2E8 -> $0374                PERL            EQU     $0374
0022E8 0FA2E8 -> $0080                PERL7           EQU     $80
0022E8 0FA2E8 -> $0040                PERL6           EQU     $40
0022E8 0FA2E8 -> $0020                PERL5           EQU     $20
0022E8 0FA2E8 -> $0010                PERL4           EQU     $10
0022E8 0FA2E8 -> $0008                PERL3           EQU     $08
0022E8 0FA2E8 -> $0004                PERL2           EQU     $04
0022E8 0FA2E8 -> $0002                PERL1           EQU     $02
0022E8 0FA2E8 -> $0001                PERL0           EQU     $01
0022E8 0FA2E8 -> $0375                PPSL            EQU     $0375
0022E8 0FA2E8 -> $0080                PPSL7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSL6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSL5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSL4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSL3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSL2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSL1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSL0           EQU     $01
0022E8 0FA2E8 -> $0376                WOML            EQU     $0376
0022E8 0FA2E8 -> $0080                WOML7           EQU     $80
0022E8 0FA2E8 -> $0040                WOML6           EQU     $40
0022E8 0FA2E8 -> $0020                WOML5           EQU     $20
0022E8 0FA2E8 -> $0010                WOML4           EQU     $10
0022E8 0FA2E8 -> $0008                WOML3           EQU     $08
0022E8 0FA2E8 -> $0004                WOML2           EQU     $04
0022E8 0FA2E8 -> $0002                WOML1           EQU     $02
0022E8 0FA2E8 -> $0001                WOML0           EQU     $01
0022E8 0FA2E8 -> $0377                PTLRR           EQU     $0377
0022E8 0FA2E8 -> $0080                PTLRR7          EQU     $80
0022E8 0FA2E8 -> $0040                PTLRR6          EQU     $40
0022E8 0FA2E8 -> $0020                PTLRR5          EQU     $20
0022E8 0FA2E8 -> $0010                PTLRR4          EQU     $10
0022E8 0FA2E8 -> $0378                PTF             EQU     $0378
0022E8 0FA2E8 -> $0080                PTF7            EQU     $80
0022E8 0FA2E8 -> $0040                PTF6            EQU     $40
0022E8 0FA2E8 -> $0020                PTF5            EQU     $20
0022E8 0FA2E8 -> $0010                PTF4            EQU     $10
0022E8 0FA2E8 -> $0008                PTF3            EQU     $08
0022E8 0FA2E8 -> $0004                PTF2            EQU     $04
0022E8 0FA2E8 -> $0002                PTF1            EQU     $02
0022E8 0FA2E8 -> $0001                PTF0            EQU     $01
0022E8 0FA2E8 -> $0379                PTIF            EQU     $0379
0022E8 0FA2E8 -> $0080                PTIF7           EQU     $80
0022E8 0FA2E8 -> $0040                PTIF6           EQU     $40
0022E8 0FA2E8 -> $0020                PTIF5           EQU     $20
0022E8 0FA2E8 -> $0010                PTIF4           EQU     $10
0022E8 0FA2E8 -> $0008                PTIF3           EQU     $08
0022E8 0FA2E8 -> $0004                PTIF2           EQU     $04
0022E8 0FA2E8 -> $0002                PTIF1           EQU     $02
0022E8 0FA2E8 -> $0001                PTIF0           EQU     $01
0022E8 0FA2E8 -> $037A                DDRF            EQU     $037A
0022E8 0FA2E8 -> $0080                DDRF7           EQU     $80
0022E8 0FA2E8 -> $0040                DDRF6           EQU     $40
0022E8 0FA2E8 -> $0020                DDRF5           EQU     $20
0022E8 0FA2E8 -> $0010                DDRF4           EQU     $10
0022E8 0FA2E8 -> $0008                DDRF3           EQU     $08
0022E8 0FA2E8 -> $0004                DDRF2           EQU     $04
0022E8 0FA2E8 -> $0002                DDRF1           EQU     $02
0022E8 0FA2E8 -> $0001                DDRF0           EQU     $01
0022E8 0FA2E8 -> $037B                RDRF            EQU     $037B
0022E8 0FA2E8 -> $0080                RDRF7           EQU     $80
0022E8 0FA2E8 -> $0040                RDRF6           EQU     $40
0022E8 0FA2E8 -> $0020                RDRF5           EQU     $20
0022E8 0FA2E8 -> $0010                RDRF4           EQU     $10
0022E8 0FA2E8 -> $0008                RDRF3           EQU     $08
0022E8 0FA2E8 -> $0004                RDRF2           EQU     $04
0022E8 0FA2E8 -> $0002                RDRF1           EQU     $02
0022E8 0FA2E8 -> $0001                RDRF0           EQU     $01
0022E8 0FA2E8 -> $037C                PERF            EQU     $037C
0022E8 0FA2E8 -> $0080                PERF7           EQU     $80
0022E8 0FA2E8 -> $0040                PERF6           EQU     $40
0022E8 0FA2E8 -> $0020                PERF5           EQU     $20
0022E8 0FA2E8 -> $0010                PERF4           EQU     $10
0022E8 0FA2E8 -> $0008                PERF3           EQU     $08
0022E8 0FA2E8 -> $0004                PERF2           EQU     $04
0022E8 0FA2E8 -> $0002                PERF1           EQU     $02
0022E8 0FA2E8 -> $0001                PERF0           EQU     $01
0022E8 0FA2E8 -> $037D                PPSF            EQU     $037D
0022E8 0FA2E8 -> $0080                PPSF7           EQU     $80
0022E8 0FA2E8 -> $0040                PPSF6           EQU     $40
0022E8 0FA2E8 -> $0020                PPSF5           EQU     $20
0022E8 0FA2E8 -> $0010                PPSF4           EQU     $10
0022E8 0FA2E8 -> $0008                PPSF3           EQU     $08
0022E8 0FA2E8 -> $0004                PPSF2           EQU     $04
0022E8 0FA2E8 -> $0002                PPSF1           EQU     $02
0022E8 0FA2E8 -> $0001                PPSF0           EQU     $01
0022E8 0FA2E8 -> $037F                PTFRR           EQU     $037F
0022E8 0FA2E8 -> $0020                PTFRR5          EQU     $20
0022E8 0FA2E8 -> $0010                PTFRR4          EQU     $10
0022E8 0FA2E8 -> $0008                PTFRR3          EQU     $08
0022E8 0FA2E8 -> $0004                PTFRR2          EQU     $04
0022E8 0FA2E8 -> $0002                PTFRR1          EQU     $02
0022E8 0FA2E8 -> $0001                PTFRR0          EQU     $01
0022E8 0FA2E8 -> $0380                XGMCTL          EQU     $0380
0022E8 0FA2E8 -> $8000                XGEM            EQU     $8000
0022E8 0FA2E8 -> $4000                XGFRZM          EQU     $4000
0022E8 0FA2E8 -> $2000                XGDBGM          EQU     $2000
0022E8 0FA2E8 -> $1000                XGSSM           EQU     $1000
0022E8 0FA2E8 -> $0800                XGFACTM         EQU     $0800
0022E8 0FA2E8 -> $0200                XGSWEFM         EQU     $0200
0022E8 0FA2E8 -> $0100                XGIEM           EQU     $0100
0022E8 0FA2E8 -> $0080                XGE             EQU     $0080
0022E8 0FA2E8 -> $0040                XGFRZ           EQU     $0040
0022E8 0FA2E8 -> $0020                XGDBG           EQU     $0020
0022E8 0FA2E8 -> $0010                XGSS            EQU     $0010
0022E8 0FA2E8 -> $0008                XGFACT          EQU     $0008
0022E8 0FA2E8 -> $0002                XGSWEF          EQU     $0002
0022E8 0FA2E8 -> $0001                XGIE            EQU     $0001
0022E8 0FA2E8 -> $0382                XGCHID          EQU     $0382
0022E8 0FA2E8 -> $0383                XGCHPL          EQU     $0383
0022E8 0FA2E8 -> $0385                XGISPSEL        EQU     $0385
0022E8 0FA2E8 -> $0386                XGISP31         EQU     $0386
0022E8 0FA2E8 -> $0386                XGISP74         EQU     $0386
0022E8 0FA2E8 -> $0386                XGVBR           EQU     $0386
0022E8 0FA2E8 -> $0388                XGIF_7F_78      EQU     $0388
0022E8 0FA2E8 -> $0080                XGIF_7F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_7E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_7D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_7C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_7B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_7A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_79         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_78         EQU     $01
0022E8 0FA2E8 -> $0389                XGIF_77_70      EQU     $0389
0022E8 0FA2E8 -> $0080                XGIF_77         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_76         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_75         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_74         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_73         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_72         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_71         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_70         EQU     $01
0022E8 0FA2E8 -> $038A                XGIF_6F_68      EQU     $038A
0022E8 0FA2E8 -> $0080                XGIF_6F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_6E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_6D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_6C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_6B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_6A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_69         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_68         EQU     $01
0022E8 0FA2E8 -> $038B                XGIF_67_60      EQU     $038B
0022E8 0FA2E8 -> $0080                XGIF_67         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_66         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_65         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_64         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_63         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_62         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_61         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_60         EQU     $01
0022E8 0FA2E8 -> $038C                XGIF_5F_58      EQU     $038C
0022E8 0FA2E8 -> $0080                XGIF_5F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_5E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_5D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_5C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_5B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_5A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_59         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_58         EQU     $01
0022E8 0FA2E8 -> $038D                XGIF_57_50      EQU     $038D
0022E8 0FA2E8 -> $0080                XGIF_57         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_56         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_55         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_54         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_53         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_52         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_51         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_50         EQU     $01
0022E8 0FA2E8 -> $038E                XGIF_4F_48      EQU     $038E
0022E8 0FA2E8 -> $0080                XGIF_4F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_4E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_4D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_4C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_4B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_4A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_49         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_48         EQU     $01
0022E8 0FA2E8 -> $038F                XGIF_47_40      EQU     $038F
0022E8 0FA2E8 -> $0080                XGIF_47         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_46         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_45         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_44         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_43         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_42         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_41         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_40         EQU     $01
0022E8 0FA2E8 -> $0390                XGIF_3F_38      EQU     $0390
0022E8 0FA2E8 -> $0080                XGIF_3F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_3E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_3D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_3C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_3B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_3A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_39         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_38         EQU     $01
0022E8 0FA2E8 -> $0391                XGIF_37_30      EQU     $0391
0022E8 0FA2E8 -> $0080                XGIF_37         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_36         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_35         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_34         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_33         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_32         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_31         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_30         EQU     $01
0022E8 0FA2E8 -> $0392                XGIF_2F_28      EQU     $0392
0022E8 0FA2E8 -> $0080                XGIF_2F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_2E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_2D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_2C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_2B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_2A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_29         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_28         EQU     $01
0022E8 0FA2E8 -> $0393                XGIF_27_20      EQU     $0393
0022E8 0FA2E8 -> $0080                XGIF_27         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_26         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_25         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_24         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_23         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_22         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_21         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_20         EQU     $01
0022E8 0FA2E8 -> $0394                XGIF_1F_18      EQU     $0394
0022E8 0FA2E8 -> $0080                XGIF_1F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_1E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_1D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_1C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_1B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_1A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_19         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_18         EQU     $01
0022E8 0FA2E8 -> $0395                XGIF_17_10      EQU     $0395
0022E8 0FA2E8 -> $0080                XGIF_17         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_16         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_15         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_14         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_13         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_12         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_11         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_10         EQU     $01
0022E8 0FA2E8 -> $0396                XGIF_0F_08      EQU     $0396
0022E8 0FA2E8 -> $0080                XGIF_0F         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_0E         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_0D         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_0C         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_0B         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_0A         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_09         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_08         EQU     $01
0022E8 0FA2E8 -> $0397                XGIF_07_00      EQU     $0397
0022E8 0FA2E8 -> $0080                XGIF_07         EQU     $80
0022E8 0FA2E8 -> $0040                XGIF_06         EQU     $40
0022E8 0FA2E8 -> $0020                XGIF_05         EQU     $20
0022E8 0FA2E8 -> $0010                XGIF_04         EQU     $10
0022E8 0FA2E8 -> $0008                XGIF_03         EQU     $08
0022E8 0FA2E8 -> $0004                XGIF_02         EQU     $04
0022E8 0FA2E8 -> $0002                XGIF_01         EQU     $02
0022E8 0FA2E8 -> $0001                XGIF_00         EQU     $01
0022E8 0FA2E8 -> $0398                XGSWT           EQU     $0398
0022E8 0FA2E8 -> $039A                XGSEM           EQU     $039A
                                      ;$039C reserved
0022E8 0FA2E8 -> $039D                XGCCR           EQU     $039D
0022E8 0FA2E8 -> $0008                XGN             EQU     $08
0022E8 0FA2E8 -> $0004                XGZ             EQU     $04
0022E8 0FA2E8 -> $0002                XGV             EQU     $02
0022E8 0FA2E8 -> $0001                XGC             EQU     $01
0022E8 0FA2E8 -> $039E                XGPC            EQU     $039E
                                      ;$03A0 to $03A1 reserved
0022E8 0FA2E8 -> $03A2                XGR1            EQU     $03A2
0022E8 0FA2E8 -> $03A4                XGR2            EQU     $03A4
0022E8 0FA2E8 -> $03A6                XGR3            EQU     $03A6
0022E8 0FA2E8 -> $03A8                XGR4            EQU     $03A8
0022E8 0FA2E8 -> $03AA                XGR5            EQU     $03AA
0022E8 0FA2E8 -> $03AC                XGR6            EQU     $03AC
0022E8 0FA2E8 -> $03AE                XGR7            EQU     $03AE
                                      ;$03B0 to $03CF reserved
0022E8 0FA2E8 -> $03D0                TIM_TIOS        EQU     $03D0
                                      ;IOS7           EQU     $80
                                      ;IOS6           EQU     $40
                                      ;IOS5           EQU     $20
                                      ;IOS4           EQU     $10
                                      ;IOS3           EQU     $08
                                      ;IOS2           EQU     $04
                                      ;IOS1           EQU     $02
                                      ;IOS0           EQU     $01
0022E8 0FA2E8 -> $03D1                TIM_TCFORC      EQU     $03D1
                                      ;FOC7           EQU     $80
                                      ;FOC6           EQU     $40
                                      ;FOC5           EQU     $20
                                      ;FOC4           EQU     $10
                                      ;FOC3           EQU     $08
                                      ;FOC2           EQU     $04
                                      ;FOC1           EQU     $02
                                      ;FOC0           EQU     $01
0022E8 0FA2E8 -> $03D2                TIM_TOC7M       EQU     $03D2
                                      ;OC7M7          EQU     $80
                                      ;OC7M6          EQU     $40
                                      ;OC7M5          EQU     $20
                                      ;OC7M4          EQU     $10
                                      ;OC7M3          EQU     $08
                                      ;OC7M2          EQU     $04
                                      ;OC7M1          EQU     $02
                                      ;OC7M0          EQU     $01
0022E8 0FA2E8 -> $03D3                TIM_TOC7D       EQU     $03D3
                                      ;OC7D7          EQU     $80
                                      ;OC7D6          EQU     $40
                                      ;OC7D5          EQU     $20
                                      ;OC7D4          EQU     $10
                                      ;OC7D3          EQU     $08
                                      ;OC7D2          EQU     $04
                                      ;OC7D1          EQU     $02
                                      ;OC7D0          EQU     $01
0022E8 0FA2E8 -> $03D4                TIM_TCNT        EQU     $03D4
0022E8 0FA2E8 -> $03D6                TIM_TSCR1       EQU     $03D6
                                      ;TEN            EQU     $80
                                      ;TSWAI          EQU     $40
                                      ;TSFRZ          EQU     $20
                                      ;TFFCA          EQU     $10
0022E8 0FA2E8 -> $03D7                TIM_TTOV        EQU     $03D7
                                      ;TOV7           EQU     $80
                                      ;TOV6           EQU     $40
                                      ;TOV5           EQU     $20
                                      ;TOV4           EQU     $10
                                      ;TOV3           EQU     $08
                                      ;TOV2           EQU     $04
                                      ;TOV1           EQU     $02
                                      ;TOV0           EQU     $01
0022E8 0FA2E8 -> $03D8                TIM_TCTL1       EQU     $03D8
                                      ;OM7            EQU     $80
                                      ;OL7            EQU     $40
                                      ;OM6            EQU     $20
                                      ;OL6            EQU     $10
                                      ;OM5            EQU     $08
                                      ;OL5            EQU     $04
                                      ;OM4            EQU     $02
                                      ;OL4            EQU     $01
0022E8 0FA2E8 -> $03D9                TIM_TCTL2       EQU     $03D9
                                      ;OM3            EQU     $80
                                      ;OL3            EQU     $40
                                      ;OM2            EQU     $20
                                      ;OL2            EQU     $10
                                      ;OM1            EQU     $08
                                      ;OL1            EQU     $04
                                      ;OM0            EQU     $02
                                      ;OL0            EQU     $01
0022E8 0FA2E8 -> $03DA                TIM_TCTL3       EQU     $03DA
                                      ;EDG7B          EQU     $80
                                      ;EDG7A          EQU     $40
                                      ;EDG6B          EQU     $20
                                      ;EDG6A          EQU     $10
                                      ;EDG5B          EQU     $08
                                      ;EDG5A          EQU     $04
                                      ;EDG4B          EQU     $02
                                      ;EDG4A          EQU     $01
0022E8 0FA2E8 -> $03DB                TIM_TCTL4       EQU     $03DB
                                      ;EDG3B          EQU     $80
                                      ;EDG3A          EQU     $40
                                      ;EDG2B          EQU     $20
                                      ;EDG2A          EQU     $10
                                      ;EDG1B          EQU     $08
                                      ;EDG1A          EQU     $04
                                      ;EDG0B          EQU     $02
                                      ;EDG0A          EQU     $01
0022E8 0FA2E8 -> $03DC                TIM_TIE         EQU     $03DC
                                      ;C7I            EQU     $80
                                      ;C6I            EQU     $40
                                      ;C5I            EQU     $20
                                      ;C4I            EQU     $10
                                      ;C3I            EQU     $08
                                      ;C2I            EQU     $04
                                      ;C1I            EQU     $02
                                      ;C0I            EQU     $01
0022E8 0FA2E8 -> $03DD                TIM_TSCR2       EQU     $03DD
                                      ;TOI            EQU     $80
                                      ;TCRE           EQU     $08
                                      ;PR2            EQU     $04
                                      ;PR1            EQU     $02
                                      ;PR0            EQU     $01
0022E8 0FA2E8 -> $03DE                TIM_TFLG1       EQU     $03DE
                                      ;C7F            EQU     $80
                                      ;C6F            EQU     $40
                                      ;C5F            EQU     $20
                                      ;C4F            EQU     $10
                                      ;C3F            EQU     $08
                                      ;C2F            EQU     $04
                                      ;C1F            EQU     $02
                                      ;C0F            EQU     $01
0022E8 0FA2E8 -> $03DF                TIM_TFLG2       EQU     $03DF
                                      ;TOF            EQU     $80
0022E8 0FA2E8 -> $03E0                TIM_TC0         EQU     $03E0
0022E8 0FA2E8 -> $0052                TIM_TC1         EQU     $0052
0022E8 0FA2E8 -> $0054                TIM_TC2         EQU     $0054
0022E8 0FA2E8 -> $0056                TIM_TC3         EQU     $0056
0022E8 0FA2E8 -> $0058                TIM_TC4         EQU     $0058
0022E8 0FA2E8 -> $005A                TIM_TC5         EQU     $005A
0022E8 0FA2E8 -> $005C                TIM_TC6         EQU     $005C
0022E8 0FA2E8 -> $005E                TIM_TC7         EQU     $005E
0022E8 0FA2E8 -> $03F0                TIM_PACTL       EQU     $03F0
                                      ;PAEN           EQU     $40
                                      ;PAMOD          EQU     $20
                                      ;PEDGE          EQU     $10
                                      ;CLK1           EQU     $08
                                      ;CLK0           EQU     $04
                                      ;PAOVI          EQU     $02
                                      ;PAI            EQU     $01
0022E8 0FA2E8 -> $03F1                TIM_PAFLG       EQU     $03F1
                                      ;PAOVF          EQU     $02
                                      ;PAIF           EQU     $01
0022E8 0FA2E8 -> $03F2                TIM_PACNT       EQU     $03F2
0022E8 0FA2E8 -> $03F2                TIM_PACN1       EQU     $03F2
0022E8 0FA2E8 -> $03F2                TIM_PACNH       EQU     $03F2
0022E8 0FA2E8 -> $03F3                TIM_PACN0       EQU     $03F3
0022E8 0FA2E8 -> $03F3                TIM_PACNL       EQU     $03F3
                                      ;$03F4 to $03FB reserved
0022E8 0FA2E8 -> $03FC                TIM_OCPD        EQU     $03FC
                                      ;OCPD0          EQU     $01
                                      ;OCPD1          EQU     $02
                                      ;OCPD2          EQU     $04
                                      ;OCPD3          EQU     $08
                                      ;OCPD4          EQU     $10
                                      ;OCPD5          EQU     $20
                                      ;OCPD6          EQU     $40
                                      ;OCPD7          EQU     $80
                                      ;$03FD reserved
0022E8 0FA2E8 -> $03FE                TIM_PTPSR       EQU     $03FE
                                      ;PTPS0          EQU     $01
                                      ;PTPS1          EQU     $02
                                      ;PTPS2          EQU     $04
                                      ;PTPS3          EQU     $08
                                      ;PTPS4          EQU     $10
                                      ;PTPS5          EQU     $20
                                      ;PTPS6          EQU     $40
                                      ;PTPS7          EQU     $80
                                      ;$03FF to $07FF reserved
                                      ;NVM locations
0022E8 0FA2E8 -> $FF00                BAKEY0          EQU     $FF00
0022E8 0FA2E8 -> $FF02                BAKEY1          EQU     $FF02
0022E8 0FA2E8 -> $FF04                BAKEY2          EQU     $FF04
0022E8 0FA2E8 -> $FF06                BAKEY3          EQU     $FF06
0022E8 0FA2E8 -> $FF0C                NVFPROT         EQU     $FF0C
0022E8 0FA2E8 -> $0080                FPOPEN          EQU     $80
0022E8 0FA2E8 -> $0040                RNV6            EQU     $40
0022E8 0FA2E8 -> $0020                FPHDIS          EQU     $20
0022E8 0FA2E8 -> $0010                FPHS1           EQU     $10
0022E8 0FA2E8 -> $0008                FPHS0           EQU     $08
0022E8 0FA2E8 -> $0004                FPLDIS          EQU     $04
0022E8 0FA2E8 -> $0002                FPLS1           EQU     $02
0022E8 0FA2E8 -> $0001                FPLS0           EQU     $01
0022E8 0FA2E8 -> $FF0D                NVEPROT         EQU     $FF0D
0022E8 0FA2E8 -> $0080                EPOPEN          EQU     $80
0022E8 0FA2E8 -> $0040                RNV6            EQU     $40
0022E8 0FA2E8 -> $0020                RNV5            EQU     $20
0022E8 0FA2E8 -> $0010                RNV4            EQU     $10
0022E8 0FA2E8 -> $0008                EPDIS           EQU     $08
0022E8 0FA2E8 -> $0004                EPS2            EQU     $04
0022E8 0FA2E8 -> $0002                EPS1            EQU     $02
0022E8 0FA2E8 -> $0001                EPS0            EQU     $01
0022E8 0FA2E8 -> $FF0E                NVFOPT          EQU     $FF0E
0022E8 0FA2E8 -> $0080                NV7             EQU     $80
0022E8 0FA2E8 -> $0040                NV6             EQU     $40
0022E8 0FA2E8 -> $0020                NV5             EQU     $20
0022E8 0FA2E8 -> $0010                NV4             EQU     $10
0022E8 0FA2E8 -> $0008                NV3             EQU     $08
0022E8 0FA2E8 -> $0004                NV2             EQU     $04
0022E8 0FA2E8 -> $0002                NV1             EQU     $02
0022E8 0FA2E8 -> $0001                NV0             EQU     $01
0022E8 0FA2E8 -> $FF0F                NVFSEC          EQU     $FF0F
0022E8 0FA2E8 -> $0080                KEYEN1          EQU     $80
0022E8 0FA2E8 -> $0040                KEYEN0          EQU     $40
0022E8 0FA2E8 -> $0020                RNV5            EQU     $20
0022E8 0FA2E8 -> $0010                RNV4            EQU     $10
0022E8 0FA2E8 -> $0008                RNV3            EQU     $08
0022E8 0FA2E8 -> $0004                RNV2            EQU     $04
0022E8 0FA2E8 -> $0002                SEC1            EQU     $02
0022E8 0FA2E8 -> $0001                SEC0            EQU     $01
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (Mini-BDM-Pod)                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports. The OpenBDM firmware      #
                                      ;#    assumes the following I/O pin configuration of the S12C128 MCU:          #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD00 - unused                     (analog       no pull  )             #
                                      ;#     PAD01 - unused                     (analog       no pull  )             #
                                      ;#     PAD02 - NC                         (input        pull-up  )             #
                                      ;#     PAD03 - NC                         (input        pull-up  )             #
                                      ;#     PAD04 - NC                         (input        pull-up  )             #
                                      ;#     PAD05 - NC                         (input        pull-up  )             #
                                      ;#     PAD06 - NC                         (input        pull-up  )             #
                                      ;#     PAD07 - NC                         (input        pull-up  )             #
                                      ;#     PAD08 - unused                     (analog       no pull  )             #
                                      ;#     PAD09 - unused                     (analog       no pull  )             #
                                      ;#     PAD10 - unused                     (analog       no pull  )             #
                                      ;#     PAD11 - Target VDD                 (analog       no pull  )             #
                                      ;#     PAD12 - NC                         (input        pull-up  )             #
                                      ;#     PAD13 - NC                         (input        pull-up  )             #
                                      ;#     PAD14 - NC                         (input        pull-up  )             #
                                      ;#     PAD15 - NC                         (input        pull-up  )             #
                                      ;#     PAD16 - NC                         (input        pull-up  )             #
                                      ;#     PAD17 - NC                         (input        pull-up  )             #
                                      ;#     PAD18 - NC                         (input        pull-up  )             #
                                      ;#     PAD19 - NC                         (input        pull-up  )             #
                                      ;#     PAD20 - NC                         (input        pull-up  )             #
                                      ;#     PAD21 - NC                         (input        pull-up  )             #
                                      ;#     PAD22 - NC                         (input        pull-up  )             #
                                      ;#     PAD23 - NC                         (input        pull-up  )             #
                                      ;#     PAD24 - NC                         (input        pull-up  )             #
                                      ;#     PAD25 - NC                         (input        pull-up  )             #
                                      ;#     PAD26 - NC                         (input        pull-up  )             #
                                      ;#     PAD27 - NC                         (input        pull-up  )             #
                                      ;#     PAD28 - NC                         (input        pull-up  )             #
                                      ;#     PAD29 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - unused                       (output       low      )             #
                                      ;#     PA1 - unused                       (output       low      )             #
                                      ;#     PA2 - unused                       (output       low      )             #
                                      ;#     PA3 - unused                       (output       low      )             #
                                      ;#     PA4 - unused                       (output       low      )             #
                                      ;#     PA5 - unused                       (output       low      )             #
                                      ;#     PA6 - unused                       (output       low      )             #
                                      ;#     PA7 - unused                       (output       low      )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - unused                       (output       low      )             #
                                      ;#     PB1 - unused                       (output       low      )             #
                                      ;#     PB2 - unused                       (output       low      )             #
                                      ;#     PB3 - unused                       (output       low      )             #
                                      ;#     PB4 - unused                       (output       low      )             #
                                      ;#     PB5 - unused                       (output       low      )             #
                                      ;#     PB6 - unused                       (output       low      )             #
                                      ;#     PB7 - unused                       (output       low      )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - unused                       (input        no pull  )             #
                                      ;#     PE1 - unused                       (input        no pull  )             #
                                      ;#     PE2 - unused                       (output       low      )             #
                                      ;#     PE3 - NC                           (input        pull-up  )             #
                                      ;#     PE4 - NC                           (input        pull-up  )             #
                                      ;#     PE5 - MODA                         (input        pull-down)             #
                                      ;#     PE6 - MODB                         (input        pull-down)             #
                                      ;#     PE7 - unused                       (input        no pull  )             #
                                      ;#    Port F:                                                                  #
                                      ;#     PF0 - NC                           (input        pull-up  )             #
                                      ;#     PF1 - NC                           (input        pull-up  )             #
                                      ;#     PF2 - NC                           (input        pull-up  )             #
                                      ;#     PF3 - NC                           (input        pull-up  )             #
                                      ;#     PF4 - NC                           (input        pull-up  )             #
                                      ;#     PF5 - NC                           (input        pull-up  )             #
                                      ;#     PF6 - NC                           (input        pull-up  )             #
                                      ;#     PF7 - NC                           (input        pull-up  )             #
                                      ;#    Port H:                                                                  #
                                      ;#     PH0 - unused                       (input        pull-up  )             #
                                      ;#     PH1 - unused                       (input        pull-up  )             #
                                      ;#     PH2 - unused                       (input        pull-up  )             #
                                      ;#     PH3 - unused                       (input        pull-up  )             #
                                      ;#     PH4 - unused                       (input        pull-up  )             #
                                      ;#     PH5 - unused                       (input        pull-up  )             #
                                      ;#     PH6 - unused                       (input        pull-up  )             #
                                      ;#     PH7 - unused                       (input        pull-up  )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - NC                           (input        pull-up  )             #
                                      ;#     PJ1 - NC                           (input        pull-up  )             #
                                      ;#     PJ2 - NC                           (input        pull-up  )             #
                                      ;#     PJ3 - NC                           (input        pull-up  )             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - unused                       (input        no pull  )             #
                                      ;#     PJ7 - unused                       (input        no pull  )             #
                                      ;#    Port K:                                                                  #
                                      ;#     PK0 - unused                       (output       high     )             #
                                      ;#     PK1 - unused                       (output       high     )             #
                                      ;#     PK2 - unused                       (output       high     )             #
                                      ;#     PK3 - NC                           (input        pull-up  )             #
                                      ;#     PK4 - NC                           (input        pull-up  )             #
                                      ;#     PK5 - NC                           (input        pull-up  )             #
                                      ;#     PK6 - NC                           (input        pull-up  )             #
                                      ;#     PK7 - NC                           (input        pull-up  )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - unused                       (output       low      )             #
                                      ;#     PM1 - unused                       (output       low      )             #
                                      ;#     PM2 - unused                       (output       low      )             #
                                      ;#     PM3 - unused                       (output       low      )             #
                                      ;#     PM4 - unused                       (output       low      )             #
                                      ;#     PM5 - unused                       (output       low      )             #
                                      ;#     PM6 - Switch                       (input        no pull  )             #
                                      ;#     PM7 - Target interface enable      (open-drain   no-pull  )             #
                                      ;#    Port L:                                                                  #
                                      ;#     PL0 - NC                           (input        pull-up  )             #
                                      ;#     PL1 - NC                           (input        pull-up  )             #
                                      ;#     PL2 - NC                           (input        pull-up  )             #
                                      ;#     PL3 - NC                           (input        pull-up  )             #
                                      ;#     PL4 - NC                           (input        pull-up  )             #
                                      ;#     PL5 - NC                           (input        pull-up  )             #
                                      ;#     PL6 - NC                           (input        pull-up  )             #
                                      ;#     PL7 - NC                           (input        pull-up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - unused                       (output       low      )             #
                                      ;#     PP1 - unused                       (output       low      )             #
                                      ;#     PP2 - LED switch                   (output       high     )             #
                                      ;#     PP3 - LED switch                   (output       high     )             #
                                      ;#     PP4 - LED 4 green                  (output       high     )             #
                                      ;#     PP5 - LED 3 green                  (output       high     )             #
                                      ;#     PP6 - LED 2 green                  (output       high     )             #
                                      ;#     PP7 - LED 1 red                    (output       high     )             #
                                      ;#    Port R:                                                                  #
                                      ;#     PR0 - NC                           (input        pull-up  )             #
                                      ;#     PR1 - NC                           (input        pull-up  )             #
                                      ;#     PR2 - NC                           (input        pull-up  )             #
                                      ;#     PR3 - NC                           (input        pull-up  )             #
                                      ;#     PR4 - NC                           (input        pull-up  )             #
                                      ;#     PR5 - NC                           (input        pull-up  )             #
                                      ;#     PR6 - NC                           (input        pull-up  )             #
                                      ;#     PR7 - NC                           (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI RX                       (input        no pull  )             #
                                      ;#     PS1 - SCI TX                       (output       high     )             #
                                      ;#     PS2 - NC                           (input        pull-up  )             #
                                      ;#     PS3 - NC                           (input        pull-up  )             #
                                      ;#     PS4 - NC                           (input        pull-up  )             #
                                      ;#     PS5 - unused                       (output       low      )             #
                                      ;#     PS6 - unused                       (output       low      )             #
                                      ;#     PS7 - unused                       (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - SCI RX                       (input        no pull  )             #
                                      ;#     PT1 - NC                           (input        pull-up  )             #
                                      ;#     PT2 - NC                           (input        pull-up  )             #
                                      ;#     PT3 - NC                           (input        pull-up  )             #
                                      ;#     PT4 - NC                           (input        pull-up  )             #
                                      ;#     PT5 - NC                           (input        pull-up  )             #
                                      ;#     PT6 - Target BKGD                  (input/output pull-up  )             #
                                      ;#     PT7 - Target RESET                 (input/output pull-up  )             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001C8D 0F9C8D -> $1C8D                GPIO_VARS_END           EQU     *
001C8D 0F9C8D -> $F9C8D               GPIO_VARS_END_LIN       EQU     @
                                                      ;CLR    PPST
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001565 0F9565                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
001565 0F9565 -> $1565                GPIO_CODE_END           EQU     *
001565 0F9565 -> $F9565               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D5C 0F9D5C                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
001D5C 0F9D5C -> $1D5C                GPIO_TABS_END           EQU     *
001D5C 0F9D5C -> $F9D5C               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (Mini-BDM-Pod)                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module performs all the necessary steps to initialize the device    #
                                      ;#    after each reset.                                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Updated memory mapping                                               #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $0800
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;       Flash->+ +-------------+ $4000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $DF10
                                      ;              | |   Vectors   |
                                      ;              | +-------------+ $E000
                                      ;              | | BootLoader  |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $7F10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $8000
                                      ;                |/////////////|
                                      ;                +-------------+ $E000
                                      ;                | BootLoader  |
                                      ;                +-------------+
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;RAM or flash
                                      ;S12XEP100 or S12XEQ512
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                                              ;Set within bootloader code
                                                              ;ORG    $FF0D   ;unprotect
                                                              ;DB     $FF
                                                              ;ORG    $FF0F   ;unsecure
                                                              ;DB     $FE
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Locations
                                      ;Register space
001D5C 0F9D5C -> $0000                MMAP_REG_GLOBAL_START   EQU     $00_0000
001D5C 0F9D5C -> $0800                MMAP_REG_GLOBAL_END     EQU     $0_0800
001D5C 0F9D5C -> $0000                MMAP_REG_START          EQU     $0000
001D5C 0F9D5C -> $0000                MMAP_REG_START_LIN      EQU     MMAP_REG_GLOBAL_START
001D5C 0F9D5C -> $0800                MMAP_REG_END            EQU     $0800
001D5C 0F9D5C -> $0000                MMAP_REG_END_LIN        EQU     MMAP_REG_GLOBAL_START
                                      ;EEE RAM
001D5C 0F9D5C -> $13F000              MMAP_EERAM_GLOBAL_START EQU     $13_F000
001D5C 0F9D5C -> $140000              MMAP_EERAM_GLOBAL_END   EQU     $14_0000
001D5C 0F9D5C -> $0800                MMAP_EERAM_START        EQU     $0800
001D5C 0F9D5C -> $13F800              MMAP_EERAM_START_LIN    EQU     $13_F800
001D5C 0F9D5C -> $0C00                MMAP_EERAM_WIN_START    EQU     $0C00
001D5C 0F9D5C -> $1000                MMAP_EERAM_END          EQU     $1000
001D5C 0F9D5C -> $140000              MMAP_EERAM_END_LIN      EQU     MMAP_EERAM_GLOBAL_END
                                      ;RAM
001D5C 0F9D5C -> $F8000               MMAP_RAM_GLOBAL_START   EQU     $0F_8000        ;32K
001D5C 0F9D5C -> $100000              MMAP_RAM_GLOBAL_END     EQU     $10_0000
001D5C 0F9D5C -> $1000                MMAP_RAM_START          EQU     $1000
001D5C 0F9D5C -> $F9000               MMAP_RAM_START_LIN      EQU     $0F_9000
001D5C 0F9D5C -> $2000                MMAP_RAM_WIN_START      EQU     $2000
001D5C 0F9D5C -> $8000                MMAP_RAM_END            EQU     $8000
001D5C 0F9D5C -> $100000              MMAP_RAM_END_LIN        EQU     MMAP_RAM_GLOBAL_END
                                      ;Flash
001D5C 0F9D5C -> $788000              MMAP_FLASH_GLOBAL_START EQU     $78_8000        ;512K
001D5C 0F9D5C -> $800000              MMAP_FLASH_GLOBAL_END   EQU     $80_0000
001D5C 0F9D5C -> $4000                MMAP_FLASH_FD_START     EQU     $4000
001D5C 0F9D5C -> $7F4000              MMAP_FLASH_FD_START_LIN EQU     $7F_4000
001D5C 0F9D5C -> $8000                MMAP_FLASH_WIN_START    EQU     $8000
001D5C 0F9D5C -> $C000                MMAP_FLASH_FE_START     EQU     $C000
001D5C 0F9D5C -> $7FC000              MMAP_FLASH_FE_START_LIN EQU     $7F_C000
001D5C 0F9D5C -> $10000               MMAP_FLASH_END          EQU     $10000
001D5C 0F9D5C -> $800000              MMAP_FLASH_END_LIN      EQU     MMAP_FLASH_GLOBAL_END
                                      ;#Memory sizes
001D5C 0F9D5C -> $0800                MMAP_REG_SIZE           EQU     MMAP_REG_END-MMAP_REG_START
001D5C 0F9D5C -> $1000                MMAP_EERAM_SIZE         EQU     MMAP_EERAM_GLOBAL_END-MMAP_EERAM_GLOBAL_START
001D5C 0F9D5C -> $8000                MMAP_RAM_SIZE           EQU     MMAP_RAM_GLOBAL_END-MMAP_RAM_GLOBAL_START
001D5C 0F9D5C -> $78000               MMAP_FLASH_SIZE         EQU     MMAP_FLASH_GLOBAL_END-MMAP_FLASH_GLOBAL_START
                                      ;#MPU desccriptors
001D5C 0F9D5C -> $0000                MMAP_D_REG_LOADDR       EQU     MMAP_REG_GLOBAL_START   ;register space
001D5C 0F9D5C -> $07FF                MMAP_D_REG_HIADDR       EQU     MMAP_REG_GLOBAL_END-1
001D5C 0F9D5C -> $0040                MMAP_D_REG_PROTECT      EQU     NEX                     ;read and write
001D5C 0F9D5C -> $00C0                MMAP_D_REG_BYTE0        EQU            (MSTR0|MSTR1|(MMAP_D_REG_LOADDR>>19))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_REG_BYTE1        EQU                        ((MMAP_D_REG_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_REG_BYTE2        EQU                        ((MMAP_D_REG_LOADDR>>03))&$FF
001D5C 0F9D5C -> $0040                MMAP_D_REG_BYTE3        EQU     (MMAP_D_REG_PROTECT|(MMAP_D_REG_HIADDR>>19))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_REG_BYTE4        EQU                        ((MMAP_D_REG_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_REG_BYTE5        EQU                        ((MMAP_D_REG_HIADDR>>03))&$FF
001D5C 0F9D5C -> $0800                MMAP_D_URAM_LOADDR      EQU     MMAP_REG_GLOBAL_END     ;unimplemented RAM space
001D5C 0F9D5C -> $F7FFF               MMAP_D_URAM_HIADDR      EQU     MMAP_RAM_GLOBAL_START-1
001D5C 0F9D5C -> $00C0                MMAP_D_URAM_PROTECT     EQU     WP|NEX                  ;read omly
001D5C 0F9D5C -> $00C0                MMAP_D_URAM_BYTE0       EQU             (MSTR0|MSTR1|(MMAP_D_URAM_LOADDR>>19))&$FF
001D5C 0F9D5C -> $0001                MMAP_D_URAM_BYTE1       EQU                         ((MMAP_D_URAM_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_URAM_BYTE2       EQU                         ((MMAP_D_URAM_LOADDR>>03))&$FF
001D5C 0F9D5C -> $00C1                MMAP_D_URAM_BYTE3       EQU     (MMAP_D_URAM_PROTECT|(MMAP_D_URAM_HIADDR>>19))&$FF
001D5C 0F9D5C -> $00EF                MMAP_D_URAM_BYTE4       EQU                         ((MMAP_D_URAM_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_URAM_BYTE5       EQU                         ((MMAP_D_URAM_HIADDR>>03))&$FF
001D5C 0F9D5C -> $F8000               MMAP_D_RAM_LOADDR       EQU     MMAP_RAM_GLOBAL_START   ;RAM
001D5C 0F9D5C -> $FFFFF               MMAP_D_RAM_HIADDR       EQU     MMAP_RAM_GLOBAL_END-1
001D5C 0F9D5C -> $0000                MMAP_D_RAM_PROTECT      EQU     0                       ;read, write, and execute
001D5C 0F9D5C -> $00C1                MMAP_D_RAM_BYTE0        EQU             (MSTR0|MSTR1|(MMAP_D_RAM_LOADDR>>19))&$FF
001D5C 0F9D5C -> $00F0                MMAP_D_RAM_BYTE1        EQU                         ((MMAP_D_RAM_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_RAM_BYTE2        EQU                         ((MMAP_D_RAM_LOADDR>>03))&$FF
001D5C 0F9D5C -> $0001                MMAP_D_RAM_BYTE3        EQU      (MMAP_D_RAM_PROTECT|(MMAP_D_RAM_HIADDR>>19))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_RAM_BYTE4        EQU                         ((MMAP_D_RAM_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_RAM_BYTE5        EQU                         ((MMAP_D_RAM_HIADDR>>03))&$FF
001D5C 0F9D5C -> $100000              MMAP_D_UEERAM_LOADDR    EQU     MMAP_RAM_GLOBAL_END     ;unimplemented EERAM space
001D5C 0F9D5C -> $13EFFF              MMAP_D_UEERAM_HIADDR    EQU     MMAP_EERAM_GLOBAL_START-1
001D5C 0F9D5C -> $00C0                MMAP_D_UEERAM_PROTECT   EQU     WP|NEX                  ;read only
001D5C 0F9D5C -> $00C2                MMAP_D_UEERAM_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UEERAM_LOADDR>>19))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_UEERAM_BYTE1     EQU                         ((MMAP_D_UEERAM_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_UEERAM_BYTE2     EQU                         ((MMAP_D_UEERAM_LOADDR>>03))&$FF
001D5C 0F9D5C -> $00C2                MMAP_D_UEERAM_BYTE3     EQU   (MMAP_D_UEERAM_PROTECT|(MMAP_D_UEERAM_HIADDR>>19))&$FF
001D5C 0F9D5C -> $007D                MMAP_D_UEERAM_BYTE4     EQU                         ((MMAP_D_UEERAM_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_UEERAM_BYTE5     EQU                         ((MMAP_D_UEERAM_HIADDR>>03))&$FF
001D5C 0F9D5C -> $13F000              MMAP_D_EERAM_LOADDR     EQU     MMAP_EERAM_GLOBAL_START ;EERAM
001D5C 0F9D5C -> $0FFF                MMAP_D_EERAM_HIADDR     EQU     MMAP_EERAM_END-1
001D5C 0F9D5C -> $0000                MMAP_D_EERAM_PROTECT    EQU     0                       ;read, write and execute
001D5C 0F9D5C -> $00C2                MMAP_D_EERAM_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_EERAM_LOADDR>>19))&$FF
001D5C 0F9D5C -> $007E                MMAP_D_EERAM_BYTE1      EQU                         ((MMAP_D_EERAM_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_EERAM_BYTE2      EQU                         ((MMAP_D_EERAM_LOADDR>>03))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_EERAM_BYTE3      EQU    (MMAP_D_EERAM_PROTECT|(MMAP_D_EERAM_HIADDR>>19))&$FF
001D5C 0F9D5C -> $0001                MMAP_D_EERAM_BYTE4      EQU                         ((MMAP_D_EERAM_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_EERAM_BYTE5      EQU                         ((MMAP_D_EERAM_HIADDR>>03))&$FF
001D5C 0F9D5C -> $140000              MMAP_D_UFLASH_LOADDR    EQU     MMAP_EERAM_GLOBAL_END   ;unimplemented flash space
001D5C 0F9D5C -> $787FFF              MMAP_D_UFLASH_HIADDR    EQU     MMAP_FLASH_GLOBAL_START-1
001D5C 0F9D5C -> $00C0                MMAP_D_UFLASH_PROTECT   EQU     WP|NEX                  ;read only
001D5C 0F9D5C -> $00C2                MMAP_D_UFLASH_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UFLASH_LOADDR>>19))&$FF
001D5C 0F9D5C -> $0080                MMAP_D_UFLASH_BYTE1     EQU                         ((MMAP_D_UFLASH_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_UFLASH_BYTE2     EQU                         ((MMAP_D_UFLASH_LOADDR>>03))&$FF
001D5C 0F9D5C -> $00CF                MMAP_D_UFLASH_BYTE3     EQU   (MMAP_D_UFLASH_PROTECT|(MMAP_D_UFLASH_HIADDR>>19))&$FF
001D5C 0F9D5C -> $000F                MMAP_D_UFLASH_BYTE4     EQU                         ((MMAP_D_UFLASH_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_UFLASH_BYTE5     EQU                         ((MMAP_D_UFLASH_HIADDR>>03))&$FF
001D5C 0F9D5C -> $788000              MMAP_D_FLASH_LOADDR     EQU     MMAP_FLASH_GLOBAL_START ;Flash
001D5C 0F9D5C -> $7FFFFF              MMAP_D_FLASH_HIADDR     EQU     MMAP_FLASH_GLOBAL_END-1
001D5C 0F9D5C -> $0080                MMAP_D_FLASH_PROTECT    EQU     WP                      ;read and execute
001D5C 0F9D5C -> $00CF                MMAP_D_FLASH_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_FLASH_LOADDR>>19))&$FF
001D5C 0F9D5C -> $0010                MMAP_D_FLASH_BYTE1      EQU                         ((MMAP_D_FLASH_LOADDR>>11))&$FF
001D5C 0F9D5C -> $0000                MMAP_D_FLASH_BYTE2      EQU                         ((MMAP_D_FLASH_LOADDR>>03))&$FF
001D5C 0F9D5C -> $008F                MMAP_D_FLASH_BYTE3      EQU    (MMAP_D_FLASH_PROTECT|(MMAP_D_FLASH_HIADDR>>19))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_FLASH_BYTE4      EQU                         ((MMAP_D_FLASH_HIADDR>>11))&$FF
001D5C 0F9D5C -> $00FF                MMAP_D_FLASH_BYTE5      EQU                         ((MMAP_D_FLASH_HIADDR>>03))&$FF
                                      ;# Vector table
001D5C 0F9D5C -> $7F10                VECTAB_START            EQU     $7F10
001D5C 0F9D5C -> $FFF10               VECTAB_START_LIN        EQU     $0FFF10
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001C8D 0F9C8D -> $1C8D                MMAP_VARS_END           EQU     *
001C8D 0F9C8D -> $F9C8D               MMAP_VARS_END_LIN       EQU     @
                                      ;#endif
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001565 0F9565                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
                                      ;#Trigger a fatal error if a reset accurs
001565 0F9565 -> $1565                MMAP_ISR_MPU            EQU     *
001565 0F9565 MACRO                                           RESET_FATAL     MMAP_STR_MPU
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001565 0F9565 CE 1D 5C                                        LDX     #\1                                              (RESET_FATAL)
001568 0F9568 06 1A 34                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
00156B 0F956B -> $156B                MMAP_CODE_END           EQU     *
00156B 0F956B -> $F956B               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D5C 0F9D5C                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
001D5C 0F9D5C 4D 50 55 20 65 72 72 6F MMAP_STR_MPU            FCS     "MPU error"
              F2                      
001D65 0F9D65 -> $1D65                MMAP_TABS_END           EQU     *
001D65 0F9D65 -> $F9D65               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
001D65 0F9D65 -> $001B                SSTACK_DEPTH            EQU     27
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001D65 0F9D65 -> $1C96                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
001D65 0F9D65 -> $1CB1                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001C8D 0F9C8D -> $1C8D                SSTACK_VARS_END         EQU     *
001C8D 0F9C8D -> $F9C8D               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00156B 0F956B                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
00156B 0F956B -> $156B                SSTACK_OF               EQU     *
00156B 0F956B MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00156B 0F956B CE 1D 65                                        LDX     #\1                                              (RESET_FATAL)
00156E 0F956E 06 1A 34                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
001571 0F9571 -> $1571                SSTACK_UF               EQU     *
001571 0F9571 MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001571 0F9571 CE 1D 80                                        LDX     #\1                                              (RESET_FATAL)
001574 0F9574 06 1A 34                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
001577 0F9577 -> $1577                SSTACK_CODE_END         EQU     *
001577 0F9577 -> $F9577               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D65 0F9D65                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
001D65 0F9D65 MACRO                   SSTACK_MSG_OF           RESET_MSG       "Subroutine stack overflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001D65 0F9D65 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
001D7E 0F9D7E AC 7A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001D80 0F9D80 MACRO                   SSTACK_MSG_UF           RESET_MSG       "Subroutine stack underflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001D80 0F9D80 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
001D9A 0F9D9A C9 DC                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001D9C 0F9D9C -> $1D9C                SSTACK_TABS_END         EQU     *
001D9C 0F9D9C -> $F9D9C               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
001D9C 0F9D9C -> $0001                ISTACK_LEVELS           EQU     1               ;default is 1
                                      ;CPU
001D9C 0F9D9C -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001D9C 0F9D9C -> $0040                ISTACK_CCR              EQU     %0100_0000
001D9C 0F9D9C -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001C8D 0F9C8D -> $1C8D                ISTACK_TOP              EQU     *
001C8D 0F9C8D                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
001C96 0F9C96                                                 DS      SSTACK_DEPTH
001CB1 0F9CB1 -> $1CB1                ISTACK_BOTTOM           EQU     *
001CB1 0F9CB1 -> $1CB1                ISTACK_VARS_END         EQU     *
001CB1 0F9CB1 -> $F9CB1               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001577 0F9577                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
001577 0F9577 -> $1577                ISTACK_OF               EQU     *
001577 0F9577 MACRO                                           RESET_FATAL     ISTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001577 0F9577 CE 1D 9C                                        LDX     #\1                                              (RESET_FATAL)
00157A 0F957A 06 1A 34                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
00157D 0F957D -> $157D                ISTACK_UF               EQU     *
00157D 0F957D MACRO                                           RESET_FATAL     ISTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00157D 0F957D CE 1D B4                                        LDX     #\1                                              (RESET_FATAL)
001580 0F9580 06 1A 34                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
001583 0F9583 -> $1583                ISTACK_CODE_END         EQU     *
001583 0F9583 -> $F9583               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D9C 0F9D9C                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
001D9C 0F9D9C 49 6E 74 65 72 72 75 70 ISTACK_MSG_OF           FCS     "Interrupt stack overflow"
              74 20 73 74 61 63 6B 20 
              6F 76 65 72 66 6C 6F F7 
001DB4 0F9DB4 49 6E 74 65 72 72 75 70 ISTACK_MSG_UF           FCS     "Interrupt stack underflow"
              74 20 73 74 61 63 6B 20 
              75 6E 64 65 72 66 6C 6F 
              F7                      
001DCD 0F9DCD -> $1DCD                ISTACK_TABS_END         EQU     *
001DCD 0F9DCD -> $F9DCD               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
001DCD 0F9DCD -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
001DCD 0F9DCD -> $0004                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
001DCD 0F9DCD -> $C480                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CB1 0F9CB1                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001CB1 0F9CB1 -> $1CB1                CLOCK_VARS_END          EQU     *
001CB1 0F9CB1 -> $F9CB1               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001583 0F9583                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
001583 0F9583 -> $1583                CLOCK_ISR               EQU     *
001583 0F9583 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
001588 0F9588 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
00158D 0F958D MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00158D 0F958D 8F 1C 8D                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001590 0F9590 25 06                                           BLO     OF                                               (ISTACK_RTI)
001592 0F9592 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001595 0F9595 22 03                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001597 0F9597 0B                                              RTI                                                      (ISTACK_RTI)
001598 0F9598 20 DD                   OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00159A 0F959A 20 E1                   UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
00159C 0F959C -> $159C                CLOCK_CODE_END          EQU     *
00159C 0F959C -> $F959C               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001DCD 0F9DCD                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
001DCD 0F9DCD -> $1DCD                CLOCK_TABS_END          EQU     *
001DCD 0F9DCD -> $F9DCD               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
001DCD 0F9DCD -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
001DCD 0F9DCD -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CB1 0F9CB1                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
001CB1 0F9CB1 -> $1CB1                COP_VARS_END            EQU     *
001CB1 0F9CB1 -> $F9CB1               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00159C 0F959C                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00159C 0F959C -> $159C                COP_CODE_END            EQU     *
00159C 0F959C -> $F959C               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001DCD 0F9DCD                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
001DCD 0F9DCD -> $1DCD                COP_TABS_END            EQU     *
001DCD 0F9DCD -> $F9DCD               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     delay driver                                                  #
                                      ;#      OC5:     unasigned                                                     #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
001DCD 0F9DCD -> $000F                TIM_SCI                 EQU     $0F     ;all channels
001DCD 0F9DCD -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
001DCD 0F9DCD -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
001DCD 0F9DCD -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
001DCD 0F9DCD -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
001DCD 0F9DCD -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
001DCD 0F9DCD -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
001DCD 0F9DCD -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
001DCD 0F9DCD -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CB1 0F9CB1                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001CB1 0F9CB1 -> $1CB1                TIM_VARS_END            EQU     *
001CB1 0F9CB1 -> $F9CB1               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00159C 0F959C                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00159C 0F959C -> $159C                TIM_CODE_END            EQU     *
00159C 0F959C -> $F959C               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001DCD 0F9DCD                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
001DCD 0F9DCD -> $1DCD                TIM_TABS_END            EQU     *
001DCD 0F9DCD -> $F9DCD               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - LED - LED Driver (Mini-BDM-Port)                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module controls the LED on the OpenBDM Pod.                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Removed sequential patterns                                          #
                                      ;#    August 7, 2012                                                           #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001DCD 0F9DCD -> $0258                LED_PORT                EQU     PTP
001DCD 0F9DCD -> $0080                LED_GREEN1              EQU     PTP7
001DCD 0F9DCD -> $0040                LED_GREEN2              EQU     PTP6
001DCD 0F9DCD -> $0020                LED_GREEN3              EQU     PTP5
001DCD 0F9DCD -> $0010                LED_RED                 EQU     PTP4
001DCD 0F9DCD -> $000C                LED_BICOLOR             EQU     PTP2|PTP3
001DCD 0F9DCD -> $0008                LED_BICOLOR_GREEN       EQU     PTP3
001DCD 0F9DCD -> $0004                LED_BICOLOR_RED         EQU     PTP2
001DCD 0F9DCD -> $00FC                LED_ALL                 EQU     LED_GREEN1|LED_GREEN2|LED_GREEN3|LED_RED|LED_BICOLOR
001DCD 0F9DCD -> $0020                LED_BUSY                EQU     LED_GREEN3
001DCD 0F9DCD -> $0010                LED_COMERR              EQU     LED_RED
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CB1 0F9CB1                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
001CB1 0F9CB1 -> $1CB1                LED_VARS_END            EQU     *
001CB1 0F9CB1 -> $F9CB1               LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00159C 0F959C                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
00159C 0F959C -> $159C                LED_CODE_END            EQU     *
00159C 0F959C -> $F959C               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001DCD 0F9DCD                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
001DCD 0F9DCD -> $1DCD                LED_TABS_END            EQU     *
001DCD 0F9DCD -> $F9DCD               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TVMON - Target Vdd Monitor (Mini-BDM-Pod)                        #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module monitors the target voltage on the LFMPGMR pod.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    February 13, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    August 7, 2012                                                           #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    LED - LED driver                                                         #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Voltage thresholds
                                      ;------------------
001DCD 0F9DCD -> $4CCC                TVMON_UPPER_THRESHOLD   EQU     (30*$FFFF)/(2*50) ;default 3.0V
001DCD 0F9DCD -> $0CCC                TVMON_LOWER_THRESHOLD   EQU      (5*$FFFF)/(2*50) ;default 0.5V
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;ADC configuration
                                      ;-----------------
                                      ;TVMON_ATDCTL0_CONFIG   EQU      %00001111 ;reset value
                                                              ;             ^  ^
                                                              ;    WRAP-----+--+
001DCD 0F9DCD -> $0040                TVMON_ATDCTL1_CONFIG    EQU      %01000000
                                                              ;         ^^^^^  ^
                                                              ;ETRIGSEL-+||||  |
                                                              ;    SRES--++||  |
                                                              ; SMP_DIS----+|  |
                                                              ; ETRIGCH-----+--+
001DCD 0F9DCD -> $0041                TVMON_ATDCTL2_CONFIG    EQU      %01000001
                                                              ;          ^^^^^^^
                                                              ;    AFFC--+||||||
                                                              ; ICLKSTP---+|||||
                                                              ; ETRIGLE----+||||
                                                              ;  ETRIGP-----+|||
                                                              ;  ETRIGE------+||
                                                              ;   ASCIE-------+|
                                                              ;  ACMPIE--------+
001DCD 0F9DCD -> $0013                TVMON_ATDCTL3_CONFIG    EQU      %00010011
                                                              ;         ^^^^^^^^
                                                              ;     DJM-+|||||||
                                                              ;     S8C--+||||||
                                                              ;     S4C---+|||||
                                                              ;     S2C----+||||
                                                              ;     S1C-----+|||
                                                              ;    FIFO------+||
                                                              ;     FRZ-------++
001DCD 0F9DCD -> $00FF                TVMON_ATDCTL4_CONFIG    EQU     %11111111
                                                              ;         ^ ^^   ^
                                                              ;     SMP-+-+|   |
                                                              ;     PRS----+---+
001DCD 0F9DCD -> $002B                TVMON_ATDCTL5_CONFIG    EQU      %00101011
                                                              ;          ^^^^^^^
                                                              ;      SC--+||||||
                                                              ;    SCAN---+|||||
                                                              ;    MULT----+||||
                                                              ;      CD-----+|||
                                                              ;      CC------+||
                                                              ;      CB-------+|
                                                              ;      CA--------+
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CE1 0F9CE1                                                 ORG     TVMON_VARS_START, TVMON_VARS_START_LIN
001CE1 0F9CE1 -> $1CE1                TVMON_VARS_END          EQU     *
001CE1 0F9CE1 -> $F9CE1               TVMON_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00189E 0F989E                                                 ORG     TVMON_CODE_START, TVMON_CODE_START_LIN
00189E 0F989E -> $189E                TVMON_ISR               EQU     *
00189E 0F989E 1E 02 CF 01 17                                  BRSET   ATDCMPHTH+$1, #$01, TVMON_ISR_1 ;target Vdd detected
                                                              ;Target Vdd missing
0018A3 0F98A3 MACRO                                           LED_BICOLOR_RED                         ;flag missing target Vdd
                                      ;#Turn red bi-color LED on                                                       (LED_BICOLOR_RED)
0018A3 0F98A3 1C 02 58 08                                     BSET    LED_PORT, #LED_BICOLOR_GREEN                     (LED_BICOLOR_RED)
0018A7 0F98A7 1D 02 58 04                                     BCLR    LED_PORT, #LED_BICOLOR_RED                       (LED_BICOLOR_RED)
0018AB 0F98AB 1C 02 CF 01                                     BSET    ATDCMPHTL, #$01                 ;target Vdd must be higher than threshold
0018AF 0F98AF 18 03 4C CC 02 D0                               MOVW    #TVMON_UPPER_THRESHOLD, ATDDR0  ;set upper threshold value
0018B5 0F98B5 79 02 50                                        CLR     PTM                             ;disable target interface
0018B8 0F98B8 20 17                                           JOB     TVMON_ISR_2                     ;restart ADC conversion
                                                              ;Target Vdd detected
0018BA 0F98BA MACRO                   TVMON_ISR_1             LED_BICOLOR_GREEN                       ;flag detected target Vdd
                                      ;#Turn green bi-color LED on                                                     (LED_BICOLOR_GREEN)
0018BA 0F98BA 1C 02 58 04                                     BSET    LED_PORT, #LED_BICOLOR_RED                       (LED_BICOLOR_GREEN)
0018BE 0F98BE 1D 02 58 08                                     BCLR    LED_PORT, #LED_BICOLOR_GREEN                     (LED_BICOLOR_GREEN)
0018C2 0F98C2 1D 02 CF 01                                     BCLR    ATDCMPHTL, #$01                 ;target Vdd must be lower than threshold
0018C6 0F98C6 18 03 0C CC 02 D0                               MOVW    #TVMON_LOWER_THRESHOLD, ATDDR0  ;set lower threshold value
0018CC 0F98CC 18 0B 80 02 50                                  MOVB    #PM7, PTM                       ;enable target interface
                                                              ;Restart ATD conversions
0018D1 0F98D1 18 0B 2B 02 C5          TVMON_ISR_2             MOVB    #TVMON_ATDCTL5_CONFIG, ATDCTL5
                                                              ;Done
0018D6 0F98D6 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0018D6 0F98D6 8F 1C 8D                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
0018D9 0F98D9 25 06                                           BLO     OF                                               (ISTACK_RTI)
0018DB 0F98DB 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
0018DE 0F98DE 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0018E0 0F98E0 0B                                              RTI                                                      (ISTACK_RTI)
0018E1 0F98E1 06 15 77                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
0018E4 0F98E4 06 15 7D                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
0018E7 0F98E7 -> $18E7                TVMON_CODE_END          EQU     *
0018E7 0F98E7 -> $F98E7               TVMON_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00220E 0FA20E                                                 ORG     TVMON_TABS_START, TVMON_TABS_START_LIN
00220E 0FA20E -> $220E                TVMON_TABS_END          EQU     *
00220E 0FA20E -> $FA20E               TVMON_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - Changed selection of detectable baud rates                           #
                                      ;#      - Stop baud rate detection when receiving a corret character           #
                                      ;#      - Stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;#    September 25, 2013                                                       #
                                      ;#      - Fixed reception of C0 characters                                     #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Made SCI_TXBUF_SIZE configurable                                     #
                                      ;#    October 1, 2014                                                          #
                                      ;#      - Added dynamic enable/disable feature                                 #
                                      ;#    January 14, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;#      - Changed control character handling                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
00220E 0FA20E -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
00220E 0FA20E -> $0001                SCI_FC_RTSCTS           EQU     1               ;default is SCI_RTSCTS
                                      ;XON/XOFF coniguration
                                      ;RTS/CTS coniguration
                                      ;RTS pin
00220E 0FA20E -> $0250                SCI_RTS_PORT            EQU     PTM             ;default is PTM
00220E 0FA20E -> $0001                SCI_RTS_PIN             EQU     PM0             ;default is PM0
                                      ;CTS pin
00220E 0FA20E -> $0250                SCI_CTS_PORT            EQU     PTM             ;default is PTM
00220E 0FA20E -> $0252                SCI_CTS_DDR             EQU     DDRM            ;default is DDRM
00220E 0FA20E -> $0255                SCI_CTS_PPS             EQU     PPSM            ;default is PPSM
00220E 0FA20E -> $0002                SCI_CTS_PIN             EQU     PM1             ;default is PM1
                                      ;CTS drive strength
00220E 0FA20E -> $0001                SCI_CTS_STRONG_DRIVE    EQU     1               ;default is strong drive
                                      ;MC9S12DP256 SCI IRQ workaround (MUCts00510)
                                      ;-------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
00220E 0FA20E -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;Delay counter
                                      ;-------------
                                      ;SCI_DLY_OC             EQU     $3              ;default is OC3
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;Baud rate detection configuration
                                      ;ECT or TIM
                                      ;TIM configuration
                                      ;Input capture channels (pulse capture)
00220E 0FA20E -> $0000                SCI_BD_ICPE             EQU     $0              ;default is IC0
00220E 0FA20E -> $0001                SCI_BD_ICNE             EQU     $1              ;default is IC1
                                      ;ECT configuration
                                      ;Output compare channels (time out)
                                      ;Log captured BD pulse length
00220E 0FA20E -> $0001                SCI_BD_LOG_OFF          EQU     1               ;default is SCI_BD_LOG_OFF
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
00220E 0FA20E -> $0001                SCI_BLOCKING_OFF        EQU     1               ;blocking functions disabled by default
                                      ;TX buffer size (minimize to 1 for debugging)
                                      ;--------------------------------------------
                                      ;SCI_TXBUF_SIZE         EQU       1             ;minimum size of the transmit buffer
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character -> define macro SCI_BREAK_ACTION
                                      ;#mac SCI_BREAK_ACTION, 0
                                      ;       ...code to be executed on BREAK condition (inside ISR)
                                      ;#emac
                                      ;Detect SUSPEND character -> define macro SCI_SUSPEND_ACTION
                                      ;#mac SCI_SUSPEND_ACTION, 0
                                      ;       ...code to be executed on SUSPEND condition (inside ISR)
                                      ;#emac
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00220E 0FA20E -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00220E 0FA20E -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00220E 0FA20E -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00220E 0FA20E -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00220E 0FA20E -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00220E 0FA20E -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00220E 0FA20E -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00220E 0FA20E -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00220E 0FA20E -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00220E 0FA20E -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00220E 0FA20E -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00220E 0FA20E -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00220E 0FA20E -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00220E 0FA20E -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00220E 0FA20E -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00220E 0FA20E -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00220E 0FA20E -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00220E 0FA20E -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00220E 0FA20E -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00220E 0FA20E -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00220E 0FA20E -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00220E 0FA20E -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00220E 0FA20E -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00220E 0FA20E -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00220E 0FA20E -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00220E 0FA20E -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00220E 0FA20E -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
00220E 0FA20E -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
00220E 0FA20E -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00220E 0FA20E -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00220E 0FA20E -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00220E 0FA20E -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00220E 0FA20E -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00220E 0FA20E -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00220E 0FA20E -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00220E 0FA20E -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00220E 0FA20E -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Flow control
00220E 0FA20E -> $0001                SCI_FC_EN               EQU     1
                                      ;#Timer setup for baud rate detection
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
00220E 0FA20E -> $0001                SCI_SET_TCTL3           EQU     1
00220E 0FA20E -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
00220E 0FA20E -> $0007                SCI_BD_TCS              EQU     (1<<SCI_BD_OC)|(1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)
                                      ;#Timer setup for the delay counter
00220E 0FA20E -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for RTS polling
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
00220E 0FA20E -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
                                      ;#Delay counter
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00220E 0FA20E -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00220E 0FA20E -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00220E 0FA20E -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00220E 0FA20E -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00220E 0FA20E -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00220E 0FA20E -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00220E 0FA20E -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00220E 0FA20E -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00220E 0FA20E -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00220E 0FA20E -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00220E 0FA20E -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00220E 0FA20E -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00220E 0FA20E -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00220E 0FA20E -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00220E 0FA20E -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00220E 0FA20E -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00220E 0FA20E -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00220E 0FA20E -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00220E 0FA20E -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00220E 0FA20E -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00220E 0FA20E -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00220E 0FA20E -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00220E 0FA20E -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00220E 0FA20E -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00220E 0FA20E -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00220E 0FA20E -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00220E 0FA20E -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
00220E 0FA20E -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00220E 0FA20E -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00220E 0FA20E -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00220E 0FA20E -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00220E 0FA20E -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00220E 0FA20E -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00220E 0FA20E -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00220E 0FA20E -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00220E 0FA20E -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup for baud rate detection
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
00220E 0FA20E -> $0001                SCI_SET_TCTL3           EQU     1
00220E 0FA20E -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
00220E 0FA20E -> $0007                SCI_BD_TCS              EQU     (1<<SCI_BD_OC)|(1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)
                                      ;#Timer setup for the delay counter
00220E 0FA20E -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for RTS polling
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
00220E 0FA20E -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#C0 character handling
                                      ;#RX error detection
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00220E 0FA20E -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00220E 0FA20E -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00220E 0FA20E -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00220E 0FA20E -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00220E 0FA20E -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00220E 0FA20E -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00220E 0FA20E -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00220E 0FA20E -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00220E 0FA20E -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00220E 0FA20E -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00220E 0FA20E -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00220E 0FA20E -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00220E 0FA20E -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00220E 0FA20E -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00220E 0FA20E -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00220E 0FA20E -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00220E 0FA20E -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00220E 0FA20E -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00220E 0FA20E -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00220E 0FA20E -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00220E 0FA20E -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00220E 0FA20E -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00220E 0FA20E -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00220E 0FA20E -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00220E 0FA20E -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00220E 0FA20E -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00220E 0FA20E -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
00220E 0FA20E -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00220E 0FA20E -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00220E 0FA20E -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00220E 0FA20E -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00220E 0FA20E -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00220E 0FA20E -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00220E 0FA20E -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00220E 0FA20E -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00220E 0FA20E -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup for baud rate detection
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
00220E 0FA20E -> $0001                SCI_SET_TCTL3           EQU     1
00220E 0FA20E -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
00220E 0FA20E -> $0007                SCI_BD_TCS              EQU     (1<<SCI_BD_OC)|(1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)
                                      ;#Timer setup for the delay counter
00220E 0FA20E -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for RTS polling
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
00220E 0FA20E -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00220E 0FA20E -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00220E 0FA20E -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00220E 0FA20E -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00220E 0FA20E -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00220E 0FA20E -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00220E 0FA20E -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00220E 0FA20E -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00220E 0FA20E -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00220E 0FA20E -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00220E 0FA20E -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00220E 0FA20E -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00220E 0FA20E -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00220E 0FA20E -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00220E 0FA20E -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00220E 0FA20E -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00220E 0FA20E -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00220E 0FA20E -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00220E 0FA20E -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00220E 0FA20E -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00220E 0FA20E -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00220E 0FA20E -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00220E 0FA20E -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00220E 0FA20E -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00220E 0FA20E -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00220E 0FA20E -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00220E 0FA20E -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00220E 0FA20E -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
00220E 0FA20E -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00220E 0FA20E -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00220E 0FA20E -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00220E 0FA20E -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00220E 0FA20E -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00220E 0FA20E -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00220E 0FA20E -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00220E 0FA20E -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00220E 0FA20E -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup for baud rate detection
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
00220E 0FA20E -> $0001                SCI_SET_TCTL3           EQU     1
00220E 0FA20E -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
00220E 0FA20E -> $0007                SCI_BD_TCS              EQU     (1<<SCI_BD_OC)|(1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)
                                      ;#Timer setup for the delay counter
00220E 0FA20E -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for RTS polling
00220E 0FA20E -> $0001                SCI_SET_TIOS            EQU     1
00220E 0FA20E -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
00220E 0FA20E -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
                                      ;#Baud rate detection
00220E 0FA20E -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CB1 0F9CB1                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001CB1 0F9CB1 -> $1CB1                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
001CB2 0F9CB2                                                 ALIGN   1
                                      ;#Receive buffer
001CB2 0F9CB2                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
001CD2 0F9CD2                         SCI_RXBUF_IN            DS      1               ;points to the next free space
001CD3 0F9CD3                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
001CD4 0F9CD4                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
001CDC 0F9CDC                         SCI_TXBUF_IN            DS      1               ;points to the next free space
001CDD 0F9CDD                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
001CDE 0F9CDE                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
                                      ;#XON/XOFF reminder count
                                      ;#BD log buffer
001CE0 0F9CE0 -> $1CE0                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
                                      ;#Flags
001CE0 0F9CE0 -> $1CB1                SCI_FLGS                EQU     ((SCI_AUTO_LOC1&1)*SCI_AUTO_LOC1)+(((~SCI_AUTO_LOC1)&1)*SCI_AUTO_LOC2)
001CE0 0F9CE0                                                 UNALIGN ((~SCI_AUTO_LOC1)&1)
                                      ;#Baud rate detection registers
001CE0 0F9CE0                         SCI_BD_LIST             DS      1               ;list of potential baud rates
001CE1 0F9CE1 -> $1CE1                SCI_VARS_END            EQU     *
001CE1 0F9CE1 -> $F9CE1               SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00159C 0F959C                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
00159C 0F959C -> $159C                SCI_TX_NB               EQU     *
                                                              ;Check if SCI transmitter is enabled
00159C 0F959C 4F CB 08 26                                     BRCLR   SCICR2, #TE, SCI_TX_NB_1                ;do nothing and flag success
                                                              ;Save registers (data in B)
0015A0 0F95A0 35                                              PSHY
0015A1 0F95A1 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
0015A2 0F95A2 CD 1C D4                                        LDY     #SCI_TXBUF
0015A5 0F95A5 B6 1C DC                                        LDAA    SCI_TXBUF_IN
0015A8 0F95A8 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
0015AA 0F95AA 42                                              INCA                                            ;increment index
0015AB 0F95AB 84 01                                           ANDA    #SCI_TXBUF_MASK
0015AD 0F95AD B1 1C DD                                        CMPA    SCI_TXBUF_OUT
0015B0 0F95B0 27 17                                           BEQ     SCI_TX_NB_2                             ;buffer is full
                                                              ;Update buffer
0015B2 0F95B2 7A 1C DC                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
0015B5 0F95B5 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
0015BA 0F95BA MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0015BA 0F95BA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015BA 0F95BA 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015BD 0F95BD 25 AC                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015BF 0F95BF 8F 1C AC                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C2 0F95C2 22 AD                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C4 0F95C4 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C4 0F95C4 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C4 0F95C4 32                                              PULA
0015C5 0F95C5 31                                              PULY
                                                              ;Signal success
0015C6 0F95C6 14 01                   SCI_TX_NB_1             SEC
                                                              ;Done
0015C8 0F95C8 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
0015C9 0F95C9 MACRO                   SCI_TX_NB_2             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0015C9 0F95C9 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015C9 0F95C9 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015CC 0F95CC 25 9D                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015CE 0F95CE 8F 1C AC                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015D1 0F95D1 22 9E                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015D3 0F95D3 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015D3 0F95D3 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015D3 0F95D3 32                                              PULA
0015D4 0F95D4 31                                              PULY
                                                              ;Signal failure
0015D5 0F95D5 10 FE                                           CLC
                                                              ;Done
0015D7 0F95D7 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissions are complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
0015D8 0F95D8 -> $15D8                SCI_TX_DONE_NB          EQU     *
                                                              ;Check if SCI transmitter is enabled
0015D8 0F95D8 4F CB 08 2D                                     BRCLR   SCICR2, #TE, SCI_TX_DONE_NB_3           ;do nothing and flag success
                                                              ;Save registers
0015DC 0F95DC 3B                                              PSHD
                                                              ;Check TX queue
0015DD 0F95DD FC 1C DC                                        LDD     SCI_TXBUF_IN
0015E0 0F95E0 18 17                                           CBA
0015E2 0F95E2 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
0015E4 0F95E4 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2    ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
0015E8 0F95E8 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0015E8 0F95E8 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015E8 0F95E8 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015EB 0F95EB 18 25 FF 7C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015EF 0F95EF 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015F2 0F95F2 18 22 FF 7B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015F6 0F95F6 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015F6 0F95F6 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015F6 0F95F6 3A                                              PULD
                                                              ;Signal failure
0015F7 0F95F7 10 FE                                           CLC
                                                              ;Done
0015F9 0F95F9 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
0015FA 0F95FA MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0015FA 0F95FA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015FA 0F95FA 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0015FD 0F95FD 18 25 FF 6A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001601 0F9601 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001604 0F9604 18 22 FF 69                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001608 0F9608 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001608 0F9608 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001608 0F9608 3A                                              PULD
                                                              ;Signal success
001609 0F9609 14 01                   SCI_TX_DONE_NB_3        SEC
                                                              ;Done
00160B 0F960B 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00160C 0F960C -> $160C                SCI_TX_READY_NB         EQU     *
                                                              ;Check if SCI transmitter is enabled
00160C 0F960C 4F CB 08 1B                                     BRCLR   SCICR2, #TE, SCI_TX_READY_NB_1          ;do nothing and flag success
                                                              ;Save registers
001610 0F9610 3B                                              PSHD
                                                              ;Check if there is room for this entry
001611 0F9611 FC 1C DC                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
001614 0F9614 42                                              INCA
001615 0F9615 84 01                                           ANDA    #SCI_TXBUF_MASK
001617 0F9617 B1 1C DD                                        CMPA    SCI_TXBUF_OUT
00161A 0F961A 27 12                                           BEQ     SCI_TX_READY_NB_2                               ;buffer is full
                                                              ;Restore registers
00161C 0F961C MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00161C 0F961C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00161C 0F961C 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00161F 0F961F 18 25 FF 48                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001623 0F9623 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001626 0F9626 18 22 FF 47                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162A 0F962A -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162A 0F962A -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162A 0F962A 3A                                              PULD
                                                              ;Done
00162B 0F962B 14 01                   SCI_TX_READY_NB_1       SEC
00162D 0F962D 3D                                              RTS
                                                              ;TX buffer is full
00162E 0F962E MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00162E 0F962E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00162E 0F962E 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001631 0F9631 18 25 FF 36                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001635 0F9635 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001638 0F9638 18 22 FF 35                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00163C 0F963C -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00163C 0F963C -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00163C 0F963C 3A                                              PULD
                                                              ;Done
00163D 0F963D 10 FE                                           CLC
00163F 0F963F 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
001640 0F9640 -> $1640                SCI_RX_NB               EQU     *
                                                              ;Check if SCI receiver is enabled
001640 0F9640 4F CB 08 3D                                     BRCLR   SCICR2, #TE, SCI_RX_NB_3                ;do nothing and flag failure
                                                              ;Save registers
001644 0F9644 34                                              PSHX
                                                              ;Check if there is data in the RX queue
001645 0F9645 FC 1C D2                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
001648 0F9648 18 16                                           SBA                                             ;A=in-out
00164A 0F964A 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
                                                              ;Check if more RX data is allowed  (in-out in A)
00164C 0F964C 84 1F                                           ANDA    #SCI_RXBUF_MASK
00164E 0F964E 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
001650 0F9650 27 32                                           BEQ     SCI_RX_NB_4                             ;allow RX data
                                                              ;Pull entry from the RX queue (out in B)
001652 0F9652 CE 1C B2                SCI_RX_NB_1             LDX     #SCI_RXBUF
001655 0F9655 EE E5                                           LDX     B,X
001657 0F9657 CB 02                                           ADDB    #$02                                    ;increment out pointer
001659 0F9659 C4 1F                                           ANDB    #SCI_RXBUF_MASK
00165B 0F965B 7B 1C D3                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
00165E 0F965E B7 54                                           TFR     X, D
                                                              ;Restore registers
001660 0F9660 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001660 0F9660 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001660 0F9660 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001663 0F9663 18 25 FF 04                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001667 0F9667 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00166A 0F966A 18 22 FF 03                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00166E 0F966E -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00166E 0F966E -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00166E 0F966E 30                                              PULX
                                                              ;Done
00166F 0F966F 14 01                                           SEC
001671 0F9671 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
001672 0F9672 MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001672 0F9672 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001672 0F9672 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001675 0F9675 18 25 FE F2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001679 0F9679 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00167C 0F967C 18 22 FE F1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001680 0F9680 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001680 0F9680 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001680 0F9680 30                                              PULX
                                                              ;Done
001681 0F9681 10 FE                   SCI_RX_NB_3             CLC
001683 0F9683 3D                                              RTS
                                                              ;Assert CTS (out-index in B, CCR in X)
001684 0F9684 MACRO                   SCI_RX_NB_4             SCI_ASSERT_CTS
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_ASSERT_CTS)
001684 0F9684 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (SCI_ASSERT_CTS)
001688 0F9688 20 C8                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00168A 0F968A -> $168A                SCI_RX_READY_NB         EQU     *
                                                              ;Check if SCI receiver is enabled
00168A 0F968A 4F CB 08 29                                     BRCLR   SCICR2, #TE, SCI_RX_READY_NB_2          ;do nothing and flag failure
                                                              ;Save registers
00168E 0F968E 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
00168F 0F968F FC 1C D2                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
001692 0F9692 18 17                                           CBA
001694 0F9694 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
001696 0F9696 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001696 0F9696 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001696 0F9696 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001699 0F9699 18 25 FE CE                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00169D 0F969D 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A0 0F96A0 18 22 FE CD                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A4 0F96A4 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A4 0F96A4 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A4 0F96A4 3A                                              PULD
                                                              ;Done
0016A5 0F96A5 14 01                                           SEC
0016A7 0F96A7 3D                                              RTS
                                                              ;RX buffer is empty
0016A8 0F96A8 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0016A8 0F96A8 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016A8 0F96A8 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016AB 0F96AB 18 25 FE BC                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016AF 0F96AF 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016B2 0F96B2 18 22 FE BB                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016B6 0F96B6 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016B6 0F96B6 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016B6 0F96B6 3A                                              PULD
                                                              ;Done
0016B7 0F96B7 10 FE                   SCI_RX_READY_NB_2       CLC
0016B9 0F96B9 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0016BA 0F96BA -> $16BA                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
0016BA 0F96BA 35                                              PSHY                                    ;push Y onto the SSTACK
0016BB 0F96BB 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
0016BC 0F96BC 5C C8                                           STD     SCIBDH                          ;set baud rate
0016BE 0F96BE CD 0C CC                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
0016C1 0F96C1 13                                              EMUL                                    ;D*Y -> Y:D
0016C2 0F96C2 7C 1C DE                                        STD     SCI_BVAL
                                                              ;Clear input buffer
0016C5 0F96C5 18 03 00 00 1C D2                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
0016CB 0F96CB MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0016CB 0F96CB MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016CB 0F96CB 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016CE 0F96CE 18 25 FE 99                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016D2 0F96D2 8F 1C AB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016D5 0F96D5 18 22 FE 98                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016D9 0F96D9 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016D9 0F96D9 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016D9 0F96D9 3A                                              PULD                                    ;pull D from the SSTACK
0016DA 0F96DA 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
0016DB 0F96DB 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTS polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
0016DC 0F96DC -> $16DC                SCI_ISR_DELAY           EQU     *
0016DC 0F96DC 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Poll RTS (retrigger request in C-flag)
0016DE 0F96DE 1F 1C B1 40 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_POLL_RTS, SCI_ISR_DELAY_2            ;no polling required
0016E3 0F96E3 1F 02 50 01 04                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now asserted (TX allowed)
0016E8 0F96E8 14 01                                           SEC                                                             ;retrigger
0016EA 0F96EA 20 05                                           JOB     SCI_ISR_DELAY_2
0016EC 0F96EC 18 0B AC 00 CB          SCI_ISR_DELAY_1         MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
0016F1 0F96F1 -> $16F1                SCI_ISR_DELAY_2         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
0016F1 0F96F1 24 23                                           BCC     SCI_ISR_DELAY_5
0016F3 0F96F3 MACRO                                           SCI_RESET_DELAY
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
0016F3 0F96F3 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
0016F3 0F96F3 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0016F3 0F96F3 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0016F8 0F96F8 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
0016FA 0F96FA 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
0016FD 0F96FD B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
0016FF 0F96FF C7                                              CLRB                                                     (SCI_RESET_DELAY)
001700 0F9700 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
001700 0F9700 49                                              LSRD                                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
001701 0F9701 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
001703 0F9703 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
001705 0F9705 -> $1705                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
001705 0F9705 MACRO                   SCI_ISR_DELAY_4         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001705 0F9705 8F 1C 8D                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001708 0F9708 25 06                                           BLO     OF                                               (ISTACK_RTI)
00170A 0F970A 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00170D 0F970D 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00170F 0F970F 0B                                              RTI                                                      (ISTACK_RTI)
001710 0F9710 06 15 77                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
001713 0F9713 06 15 7D                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
001716 0F9716 MACRO                   SCI_ISR_DELAY_5         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
001716 0F9716 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
001716 0F9716 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001716 0F9716 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001719 0F9719 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00171B 0F971B 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00171E 0F971E -> $171E                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00171E 0F971E -> $171E                                        EQU     *                                                (SCI_STOP_DELAY)
00171E 0F971E 20 E5                                           JOB     SCI_ISR_DELAY_4
                                                              ;#Transmit ISR (status flags in A)
001720 0F9720 85 80                   SCI_ISR_TX              BITA    #TDRE                                   ;check if SCI is ready for new TX data
001722 0F9722 27 4C                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check RTS status
001724 0F9724 1F 02 50 01 29                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
001729 0F9729 1C 1C B1 40                                     BSET    SCI_FLGS, #SCI_FLG_POLL_RTS             ;request RTS polling
00172D 0F972D MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (don't retrigger) (approx. 2 SCI frames)                           (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
00172D 0F972D 4E 4C 08 1F                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
001731 0F9731 MACRO                                           SCI_INIT_DELAY                                           (SCI_START_DELAY)
                                      ;#Start delay (always retrigger) (approx. 2 SCI frames)                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY)
001731 0F9731 MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001731 0F9731 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
001731 0F9731 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
001731 0F9731 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
001736 0F9736 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001738 0F9738 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00173B 0F973B B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00173D 0F973D C7                                              CLRB                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00173E 0F973E MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00173E 0F973E 49                                              LSRD                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00173F 0F973F D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
001741 0F9741 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
001743 0F9743 -> $1743                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001743 0F9743 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
001743 0F9743 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001743 0F9743 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001748 0F9748 4C 4C 08                                        BSET    TIE, #\1                        ;enable interrupts (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
00174B 0F974B 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001750 0F9750 -> $1750                DONE                    EQU     *                                                (SCI_START_DELAY)
001750 0F9750 20 19                                           JOB     SCI_ISR_TX_3                            ;stop transmitting
                                                              ;Check TX buffer
001752 0F9752 FC 1C DC                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
001755 0F9755 18 17                                           CBA
001757 0F9757 27 12                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
001759 0F9759 CD 1C D4                                        LDY     #SCI_TXBUF
00175C 0F975C 18 0D ED 00 CF                                  MOVB    B,Y ,SCIDRL
                                                              ;Increment index (in-index in A, out-index in B, buffer pointer in Y)
001761 0F9761 52                                              INCB
001762 0F9762 C4 01                                           ANDB    #SCI_TXBUF_MASK
001764 0F9764 7B 1C DD                                        STAB    SCI_TXBUF_OUT
001767 0F9767 18 17                                           CBA
001769 0F9769 26 05                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
00176B 0F976B -> $176B                SCI_ISR_TX_3            EQU     *
00176B 0F976B 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
001770 0F9770 MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001770 0F9770 8F 1C 8D                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001773 0F9773 25 06                                           BLO     OF                                               (ISTACK_RTI)
001775 0F9775 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001778 0F9778 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00177A 0F977A 0B                                              RTI                                                      (ISTACK_RTI)
00177B 0F977B 06 15 77                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00177E 0F977E 06 15 7D                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
001781 0F9781 -> $1781                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
001781 0F9781 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
001783 0F9783 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
001785 0F9785 27 99                                           BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
001787 0F9787 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
001789 0F9789 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
00178B 0F978B 1F 1C B1 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
001790 0F9790 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
001792 0F9792 1D 1C B1 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
                                                              ;Place data into RX queue (status flags in A, RX data in B)
001796 0F9796 B7 46                   SCI_ISR_RX_1            TFR     D, Y                                    ;flags:data -> Y
001798 0F9798 CE 1C B2                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
00179B 0F979B FC 1C D2                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00179E 0F979E 6D E4                                           STY     A,X
0017A0 0F97A0 8B 02                                           ADDA    #2
0017A2 0F97A2 84 1F                                           ANDA    #SCI_RXBUF_MASK
0017A4 0F97A4 18 17                                           CBA
0017A6 0F97A6 27 1C                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
0017A8 0F97A8 7A 1C D2                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
0017AB 0F97AB 18 16                                           SBA
0017AD 0F97AD 84 1F                                           ANDA    #SCI_RXBUF_MASK
0017AF 0F97AF 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
0017B1 0F97B1 24 15                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
0017B3 0F97B3 -> $17B3                SCI_ISR_RX_2            EQU     *
                                                              ;Done
0017B3 0F97B3 MACRO                   SCI_ISR_RX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0017B3 0F97B3 8F 1C 8D                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
0017B6 0F97B6 25 06                                           BLO     OF                                               (ISTACK_RTI)
0017B8 0F97B8 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
0017BB 0F97BB 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0017BD 0F97BD 0B                                              RTI                                                      (ISTACK_RTI)
0017BE 0F97BE 06 15 77                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
0017C1 0F97C1 06 15 7D                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;Buffer overflow (flags:data in Y)
0017C4 0F97C4 1C 1C B1 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
                                                              ;Signal buffer full (flags:data in Y)
                                                              ;Deassert CTS (stop incomming data) (flags:data in Y)
0017C8 0F97C8 MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
0017C8 0F97C8 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (prohibit RX data) (SCI_DEASSERT_CTS)
0017CC 0F97CC -> $17CC                SCI_ISR_RX_11           EQU     *
0017CC 0F97CC 20 E5                   SCI_ISR_RX_13           JOB     SCI_ISR_RX_4                            ;done
                                                              ;Handle DLE
0017CE 0F97CE 1C 1C B1 04             SCI_ISR_RX_17           BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;remember start of escape sequence
0017D2 0F97D2 FC 1C D2                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
0017D5 0F97D5 84 1F                                           ANDA    #SCI_RXBUF_MASK
0017D7 0F97D7 81 0E                                           CMPA    #(SCI_RX_FULL_LEVEL-2)
0017D9 0F97D9 24 ED                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
0017DB 0F97DB 20 EF                                           JOB     SCI_ISR_RX_11                           ;check for RX errors
                                      ;#BD negedge ISR (default IC1)
0017DD 0F97DD -> $17DD                SCI_ISR_BD_NE           EQU     *
                                                              ;Clear ICNE interrupt
0017DD 0F97DD MACRO                                           TIM_CLRIF       SCI_BD_ICNE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0017DD 0F97DD MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0017DD 0F97DD 18 0B 02 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
0017E2 0F97E2 DE 52                                           LDX     (TC0+(2*SCI_BD_ICNE))                   ;capture current edge (posedge)
0017E4 0F97E4 DD 50                                           LDY     (TC0+(2*SCI_BD_ICPE))                   ;capture previous edge (posedge)
0017E6 0F97E6 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
0017E8 0F97E8 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
0017EA 0F97EA MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0017EA 0F97EA MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0017EA 0F97EA 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
0017EF 0F97EF MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
0017EF 0F97EF 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
0017F2 0F97F2 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
0017F4 0F97F4 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
0017F6 0F97F6 -> $17F6                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
0017F6 0F97F6 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
0017F8 0F97F8 26 5B                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
0017FA 0F97FA CC FF FF                                        LDD     #-1
0017FD 0F97FD 18 13                                           EMULS                                           ;-1 * Y => Y:D
0017FF 0F97FF 1A E6                                           LEAX    D,X                                     ;subtract timestamps
                                                              ;Select search tree tree (pulse length in X)
001801 0F9801 CD 21 D6                                        LDY     #SCI_BD_HIGH_PULSE_TREE
001804 0F9804 04 65 2C                                        TBNE    X, SCI_ISR_BD_NEPE_2                    ;parse search tree if pulse length is > 0
001807 0F9807 20 4C                                           JOB     SCI_ISR_BD_NEPE_4                       ;discard zero-length pulses (for whatever reasson they may occur)
                                      ;#BD posedge ISR (default IC0)
001809 0F9809 -> $1809                SCI_ISR_BD_PE           EQU     *
                                                              ;Clear ICNE interrupt
001809 0F9809 MACRO                                           TIM_CLRIF       SCI_BD_ICPE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001809 0F9809 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001809 0F9809 18 0B 01 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
00180E 0F980E DE 50                                           LDX     (TC0+(2*SCI_BD_ICPE))                   ;capture current edge (posedge)
001810 0F9810 DD 52                                           LDY     (TC0+(2*SCI_BD_ICNE))                   ;capture previous edge (posedge)
001812 0F9812 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
001814 0F9814 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
001816 0F9816 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001816 0F9816 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001816 0F9816 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
00181B 0F981B MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
00181B 0F981B 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
00181E 0F981E 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
001820 0F9820 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
001822 0F9822 -> $1822                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
001822 0F9822 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
001824 0F9824 26 2F                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
001826 0F9826 CC FF FF                                        LDD     #-1
001829 0F9829 18 13                                           EMULS                                           ;-1 * Y => Y:D
00182B 0F982B 1A E6                                           LEAX    D,X                                     ;subtract timestamps
00182D 0F982D 04 45 25                                        TBEQ    X, SCI_ISR_BD_NEPE_4                    ;discard zero-length pulses (for whatever reasson they may occur)
                                                              ;Select search tree tree (pulse length in X)
001830 0F9830 CD 1D DE                                        LDY     #SCI_BD_LOW_PULSE_TREE
                                                              ;JOB    SCI_ISR_BD_NEPE_2                       ;parse search tree
001833 0F9833 -> $1833                SCI_ISR_BD_NEPE_2       EQU     *
                                                              ;Parse tree  (pulse length in X, search tree in Y)
001833 0F9833 MACRO                                           SCI_BD_PARSE
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;# Parse routine                                                               # (SCI_BD_PARSE)
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;#Parse search tree for detected pulse length                                    (SCI_BD_PARSE)
                                      ; args:   Y: root of the search tree                                             (SCI_BD_PARSE)
                                      ;         X: pulse length                                                        (SCI_BD_PARSE)
                                      ; result: D: list of matching baud rates (mirrored in high and low byte)         (SCI_BD_PARSE)
                                      ; SSTACK: 0 bytes                                                                (SCI_BD_PARSE)
                                      ;         X is preserved                                                         (SCI_BD_PARSE)
001833 0F9833 CC 00 00                                LDD     #$0000          ;  2 cycs       ;initialize X            (SCI_BD_PARSE)
001836 0F9836 E7 40                   LOOP            TST     0,Y             ;  3 cycs       ;check if lower boundary exists (SCI_BD_PARSE)
001838 0F9838 27 0A                                   BEQ     DONE            ;1/3 cycs       ;search done             (SCI_BD_PARSE)
00183A 0F983A AE 75                                   CPX     6,Y+            ;  3 cycs       ;check if pulse length is shorter than lower boundary (SCI_BD_PARSE)
00183C 0F983C 25 F8                                   BLO     LOOP            ;1/3 cycs       ;pulse length is shorter than lower boundary -> try a shorter range (SCI_BD_PARSE)
00183E 0F983E EC 5C                                   LDD     -4,Y            ;  3 cycs       ;new lowest boundary found -> store valid baud rate field in index X (SCI_BD_PARSE)
001840 0F9840 ED 5E                                   LDY     -2,Y            ;  3 cycs       ;switch to the branch with higher compare values (SCI_BD_PARSE)
001842 0F9842 26 F2                                   BNE     LOOP            ;1/3 cycs       ;parse branch if it exists (SCI_BD_PARSE)
001844 0F9844 -> $1844                DONE            EQU     *                               ;done, result in X       (SCI_BD_PARSE)
                                                              ;Update list of potential batd rates (matching baud rates in D)
001844 0F9844 14 10                                           SEI
001846 0F9846 F4 1C E0                                        ANDB    SCI_BD_LIST                             ;remove mismatching baud rates from the list
001849 0F9849 27 1B                                           BEQ     SCI_ISR_BD_NEPE_5                       ;no valid baud rate found
00184B 0F984B 7B 1C E0                                        STAB    SCI_BD_LIST
                                                              ;Check if baud rate has been determined (potential baud rates in B (not zero))
00184E 0F984E 87                                              CLRA
00184F 0F984F 42                      SCI_ISR_BD_NEPE_3       INCA
001850 0F9850 54                                              LSRB
001851 0F9851 24 FC                                           BCC     SCI_ISR_BD_NEPE_3
001853 0F9853 27 1D                                           BEQ     SCI_ISR_BD_NEPE_6                       ;new baud rate found (index in A)
                                                              ;Done
001855 0F9855 MACRO                   SCI_ISR_BD_NEPE_4       ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001855 0F9855 8F 1C 8D                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001858 0F9858 25 06                                           BLO     OF                                               (ISTACK_RTI)
00185A 0F985A 8F 1C A8                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00185D 0F985D 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00185F 0F985F 0B                                              RTI                                                      (ISTACK_RTI)
001860 0F9860 06 15 77                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
001863 0F9863 06 15 7D                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;No valid baud rate found
001866 0F9866 1F 1C E0 FF EA          SCI_ISR_BD_NEPE_5       BRCLR   SCI_BD_LIST, #$FF, SCI_ISR_BD_NEPE_4    ;done
                                                              ;Restart baud rate detection
00186B 0F986B 18 0B FF 1C E0                                  MOVB    #$FF, SCI_BD_LIST
001870 0F9870 20 E3                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;New baud rate found (index+1 in A, $00 in B)
001872 0F9872 MACRO                   SCI_ISR_BD_NEPE_6       SCI_STOP_BD
                                      ;Stop baud rate detection                                                        (SCI_STOP_BD)
                                      ; args:   none                                                                   (SCI_STOP_BD)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD)
001872 0F9872 1F 1C E0 FF 0E                                  BRCLR   SCI_BD_LIST, #$FF, DONE                 ;baud rate detection already inactive (SCI_STOP_BD)
                                                              ;Stop edge detection                                     (SCI_STOP_BD)
001877 0F9877 MACRO                                           SCI_BD_STOP_EDGE_DETECT                                  (SCI_STOP_BD)
                                      ;Stop edge detection                                                             (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;BCLR   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;stop edge detection (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
001877 0F9877 4D 4B 09                                        BCLR    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;Disable timer                                           (SCI_STOP_BD)
00187A 0F987A MACRO                                           TIM_MULT_DIS    ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC)) (SCI_STOP_BD)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD/TIM_MULT_DIS)
00187A 0F987A 4D 4C 07                                        BCLR    TIE, #\1                                         (SCI_STOP_BD/TIM_MULT_DIS)
00187D 0F987D 26 03                                           BNE     DONE                                             (SCI_STOP_BD/TIM_MULT_DIS)
00187F 0F987F 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_BD/TIM_MULT_DIS)
001882 0F9882 -> $1882                DONE                    EQU     *                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;                                                                       ;See  SCI_ISR_RX_2 (SCI_STOP_BD)
001882 0F9882 79 1C E0                                        CLR     SCI_BD_LIST                             ;clear check list (SCI_STOP_BD)
001885 0F9885 -> $1885                DONE                    EQU     *                                                (SCI_STOP_BD)
                                                              ;Set baud rate (index+1 in A, $00 in B)
001885 0F9885 48                                              LSLA                                            ;index -> addess offset
001886 0F9886 CE 1D CC                                        LDX     #SCI_BTAB-2                             ;look up prescaler value
001889 0F9889 EC E4                                           LDD     A,X                                     ;look up divider value
00188B 0F988B MACRO                                           SCI_SET_BAUD
                                      ;#Set baud rate                                                                  (SCI_SET_BAUD)
                                      ; args:   D: new SCIBD value                                                     (SCI_SET_BAUD)
                                      ; result: none                                                                   (SCI_SET_BAUD)
                                      ; SSTACK: 6 bytes                                                                (SCI_SET_BAUD)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD)
00188B 0F988B MACRO                                           SSTACK_JOBSR    SCI_SET_BAUD, 6                          (SCI_SET_BAUD)
                                      ;#Check stack and call subroutine                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_SET_BAUD/SSTACK_JOBSR)
00188B 0F988B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00188B 0F988B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00188B 0F988B 8F 1C 9C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00188E 0F988E 18 25 FC D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001892 0F9892 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001895 0F9895 18 22 FC D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001899 0F9899 -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001899 0F9899 -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001899 0F9899 16 16 BA                                        JOBSR   \1                                               (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#ifmac SCI_ERRSIG_STOP
                                      ;                       ;Clear error signal
                                      ;                       SCI_ERRSIG_STOP
                                      ;#endif
00189C 0F989C 20 B7                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
00189E 0F989E -> $189E                SCI_CODE_END            EQU     *
00189E 0F989E -> $F989E               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001DCD 0F9DCD                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
001DCE 0F9DCE                                                 ALIGN   1
                                                              ;List of prescaler values
001DCE 0F9DCE -> $1DCE                SCI_BTAB                EQU     *
001DCE 0F9DCE 02 8B                                           DW      SCI_4800
001DD0 0F9DD0 01 B2                                           DW      SCI_7200
001DD2 0F9DD2 01 46                                           DW      SCI_9600
001DD4 0F9DD4 00 D9                                           DW      SCI_14400
001DD6 0F9DD6 00 A3                                           DW      SCI_19200
001DD8 0F9DD8 00 6D                                           DW      SCI_28800
001DDA 0F9DDA 00 51                                           DW      SCI_38400
001DDC 0F9DDC 00 36                                           DW      SCI_57600
001DDE 0F9DDE -> $1DDE                SCI_BTAB_END            EQU     *
                                                              ;Search tree for low pulses
001DDE 0F9DDE MACRO                   SCI_BD_LOW_PULSE_TREE   SCI_BD_LOW_PULSE_TREE
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# S12CBase - SCI Baud Detection Search Trees                                  # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Copyright 2009-2012 Dirk Heisswolf                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    families.                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    it under the terms of the GNU General Public License as published by     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    the Free Software Foundation, either version 3 of the License, or        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    (at your option) any later version.                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is distributed in the hope that it will be useful,              # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    GNU General Public License for more details.                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    You should have received a copy of the GNU General Public License        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Description:                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file contains the two search trees which are required for the SCI   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    modules baud rate detection.                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    One is used to determine the set of baud rates that are valid for a      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    certain high pulse.                                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The other one is used to determine the set of baud rates that are valid  # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    for a certain low pulse.                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Each table assigs a set of valid baud rates to a range of pulse lengths. # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    lower boundary <= pulse length < upper boundary -> set of baud rates     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The format of a node entry is the following:                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    start of entry -> | lower boundary  | value of lower boundary            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  BRs   |  BRs   | set of boud rates - twice          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   | pointer to node with longer        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+ boundary value                     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    node node with -> | lower boundary  |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    even lower        +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    boundary value    |  BRs   |  BRs   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Generated on Thu, Nov 15 2012                                               # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Bus clock:              50.00 MHz divided by  2                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Frame format:           8N1                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Supported baud rates:                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        4800 ( 28B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        7200 ( 1B2)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        9600 ( 146)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       14400 (  D9)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       19200 (  A3)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       28800 (  6D)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       38400 (  51)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       57600 (  36)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Low pulse search tree                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_LOW_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    271 ( 10F)      1 . . . . . . . (80)   2001      2       27                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    416 ( 1A0)      1 1 . . . . . . (C0)   1621      1       35                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    542 ( 21E)      1 1 1 . . . . . (E0)   1091      3       44                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    624 ( 270)      . 1 1 . . . . . (60)    428      2       52                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    705 ( 2C1)      2 1 1 . . . . . (E0)    379      4       69                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    813 ( 32D)      2 1 1 1 . . . . (F0)    248      5       86                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    959 ( 3BF)      2 . 1 1 . . . . (B0)     70      6       95                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1058 ( 422)      . . 1 1 . . . . (30)     24      3       99                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1083 ( 43B)      . 2 1 1 . . . . (70)     31      8      108                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1095 ( 447)      . 2 1 1 1 . . . (78)     38      7       98                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1139 ( 473)      3 2 1 1 1 . . . (F8)     36      6      106                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1248 ( 4E0)      3 2 . 1 1 . . . (D8)     15      8      123                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1410 ( 582)      3 2 2 1 1 . . . (F8)      9      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1492 ( 5D4)      . 2 2 1 1 . . . (78)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1573 ( 625)      4 2 2 1 1 . . . (F8)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1626 ( 65A)      4 . 2 1 1 . . . (B8)      4     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1637 ( 665)      4 . 2 1 1 1 . . (BC)      5      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1750 ( 6D6)      4 3 2 1 1 1 . . (FC)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1872 ( 750)      4 3 2 . 1 1 . . (EC)      5      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1926 ( 786)      . 3 2 . 1 1 . . (6C)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2007 ( 7D7)      5 3 2 . 1 1 . . (EC)      5      5      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2115 ( 843)      5 3 2 2 1 1 . . (FC)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2116 ( 844)      5 3 . 2 1 1 . . (DC)      5      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2170 ( 87A)      5 3 . 2 1 1 1 . (DE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2278 ( 8E6)      5 3 3 2 1 1 1 . (FE)      7      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2293 ( 8F5)      5 . 3 2 1 1 1 . (BE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2361 ( 939)      . . 3 2 1 1 1 . (3E)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2418 ( 972)      . 4 3 2 1 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2441 ( 989)      6 4 3 2 1 1 1 . (FE)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2519 ( 9D7)      6 4 3 2 . 1 1 . (F6)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2795 ( AEB)      . 4 3 2 . 1 1 . (76)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2847 ( B1F)      . 4 3 2 2 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2875 ( B3B)      7 4 3 2 2 1 1 . (FE)      7      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2960 ( B90)      7 . 3 2 2 1 1 . (BE)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2984 ( BA8)      7 . . 2 2 1 1 . (9E)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3085 ( C0D)      7 5 . 2 2 1 1 . (DE)      6      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3146 ( C4A)      7 5 4 2 2 1 1 . (FE)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3174 ( C66)      7 5 4 . 2 1 1 . (EE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3229 ( C9D)      . 5 4 . 2 1 1 . (6E)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3265 ( CC1)      . 5 4 . 2 1 1 1 (6F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3309 ( CED)      8 5 4 . 2 1 1 1 (EF)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3417 ( D59)      8 5 4 3 2 1 1 1 (FF)      8      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3628 ( E2C)      8 . 4 3 2 1 1 1 (BF)      7      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3663 ( E4F)      . . 4 3 2 1 1 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3743 ( E9F)      9 . 4 3 2 1 1 1 (BF)      7      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3752 ( EA8)      9 6 4 3 2 1 1 1 (FF)      8      8      137                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3767 ( EB7)      9 6 4 3 2 . 1 1 (FB)      7      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3852 ( F0C)      9 6 . 3 2 . 1 1 (DB)      6     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4014 ( FAE)      9 6 5 3 2 . 1 1 (FB)      7      4      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4097 (1001)      . 6 5 3 2 . 1 1 (7B)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4257 (10A1)      . 6 5 3 2 2 1 1 (7F)      7      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4271 (10AF)      . 6 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4295 (10C7)      . . 5 3 . 2 1 1 (37)      5      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4419 (1143)      . 7 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4476 (117C)      . 7 5 . . 2 1 1 (67)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4599 (11F7)      . 7 5 . 3 2 1 1 (6F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4720 (1270)      . 7 5 4 3 2 1 1 (7F)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4721 (1271)      . 7 . 4 3 2 1 1 (5F)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4882 (1312)      . 7 6 4 3 2 1 1 (7F)      7      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4962 (1362)      . . 6 4 3 2 1 1 (3F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4992 (1380)      . . 6 4 3 2 . 1 (3D)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5086 (13DE)      . 8 6 4 3 2 . 1 (7D)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5589 (15D5)      . 8 . 4 3 2 . 1 (5D)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5629 (15FD)      . . . 4 3 2 . 1 (1D)      4      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5642 (160A)      . . . 4 3 2 2 1 (1F)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5750 (1676)      . . 7 4 3 2 2 1 (3F)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5753 (1679)      . 9 7 4 3 2 2 1 (7F)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5778 (1692)      . 9 7 . 3 2 2 1 (6F)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6022 (1786)      . 9 7 5 3 2 2 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6023 (1787)      . 9 7 5 . 2 2 1 (77)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6296 (1898)      . . 7 5 . 2 2 1 (37)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6351 (18CF)      . . 7 5 4 2 2 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6387 (18F3)      . . 7 5 4 . 2 1 (3B)      5      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6457 (1939)      . . . 5 4 . 2 1 (1B)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6618 (19DA)      . . 8 5 4 . 2 1 (3B)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6877 (1ADD)      . . 8 5 4 3 2 1 (3F)      6      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7081 (1BA9)      . . 8 . 4 3 2 1 (2F)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7324 (1C9C)      . . 8 6 4 3 2 1 (3F)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7325 (1C9D)      . . . 6 4 3 2 1 (1F)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7486 (1D3E)      . . 9 6 4 3 2 1 (3F)      6      5      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7510 (1D56)      . . 9 6 4 3 2 . (3E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7775 (1E5F)      . . 9 6 . 3 2 . (36)      4      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8103 (1FA7)      . . 9 6 5 3 2 . (3E)      5     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8193 (2001)      . . . 6 5 3 2 . (1E)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8383 (20BF)      . . . . 5 3 2 . ( E)      3      8      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8464 (2110)      . . . . 5 3 . . ( C)      2     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8489 (2129)      . . . . 5 3 . 2 ( D)      3     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8626 (21B2)      . . . 7 5 3 . 2 (1D)      4      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9007 (232F)      . . . 7 5 . . 2 (19)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9114 (239A)      . . . 7 5 . 3 2 (1B)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9498 (251A)      . . . 7 5 4 3 2 (1F)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9528 (2538)      . . . 7 . 4 3 2 (17)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9685 (25D5)      . . . . . 4 3 2 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9855 (267F)      . . . . 6 4 3 2 ( F)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9928 (26C8)      . . . 8 6 4 3 2 (1F)      5     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  10987 (2AEB)      . . . . 6 4 3 2 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11230 (2BDE)      . . . 9 6 4 3 2 (1F)      5      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11280 (2C10)      . . . 9 . 4 3 2 (17)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11607 (2D57)      . . . 9 7 4 3 2 (1F)      5      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11627 (2D6B)      . . . 9 7 . 3 2 (1B)      4     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11936 (2EA0)      . . . 9 7 . . 2 (19)      3     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12118 (2F56)      . . . 9 7 5 . 2 (1D)      4      6      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12289 (3001)      . . . . 7 5 . 2 ( D)      3     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12586 (312A)      . . . . 7 5 4 2 ( F)      4     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12735 (31BF)      . . . . 7 5 4 . ( E)      3      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13032 (32E8)      . . . . . 5 4 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13359 (342F)      . . . . 8 5 4 . ( E)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13713 (3591)      . . . . 8 5 4 3 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14248 (37A8)      . . . . 8 . 4 3 ( B)      3      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14738 (3992)      . . . . 8 6 4 3 ( F)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14784 (39C0)      . . . . . 6 4 3 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15111 (3B07)      . . . . 9 6 4 3 ( F)      4      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15408 (3C30)      . . . . 9 6 . 3 ( D)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16059 (3EBB)      . . . . 9 6 5 3 ( F)      4     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16536 (4098)      . . . . . 6 5 3 ( 7)      3      7      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16868 (41E4)      . . . . . . 5 3 ( 3)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17358 (43CE)      . . . . . 7 5 3 ( 7)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17959 (4627)      . . . . . 7 5 . ( 6)      2     11      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18881 (49C1)      . . . . . 7 . . ( 4)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18938 (49FA)      . . . . . 7 . 4 ( 5)      2      9      174                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19488 (4C20)      . . . . . . . 4 ( 1)      1     12      183                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19531 (4C4B)      . . . . . . 6 4 ( 3)      2     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19978 (4E0A)      . . . . . 8 6 4 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22108 (565C)      . . . . . . 6 4 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22353 (5751)      . . . . . . . 4 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22598 (5846)      . . . . . 9 . 4 ( 5)      2      8      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23003 (59DB)      . . . . . 9 7 4 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23183 (5A8F)      . . . . . 9 7 . ( 6)      2     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24162 (5E62)      . . . . . 9 7 5 ( 7)      3     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24728 (6098)      . . . . . . 7 5 ( 3)      2     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  25825 (64E1)      . . . . . . . 5 ( 1)      1      9      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  26475 (676B)      . . . . . . 8 5 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28408 (6EF8)      . . . . . . 8 . ( 2)      1     12      215                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29297 (7271)      . . . . . . . . ( 0)      0     14      224                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29386 (72CA)      . . . . . . . 6 ( 1)      1     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29947 (74FB)      . . . . . . 9 6 ( 3)      2     10      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32770 (8002)      . . . . . . . 6 ( 1)      1     12      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  33632 (8360)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  34611 (8733)      . . . . . . . 7 ( 1)      1     11      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  38856 (97C8)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  39835 (9B9B)      . . . . . . . 8 ( 1)      1     12      222                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  44081 (AC31)      . . . . . . . . ( 0)      0     14      231                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  45059 (B003)      . . . . . . . 9 ( 1)      1     13      229                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  49305 (C099)      . . . . . . . . ( 0)      0     14      238                (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      1                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#+-----0-----+                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#1           2                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#0           7                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#F +---------0----------+                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  2                    4                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  1                    2                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  E +------------------2------------------+                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2                                     F                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    C                                     A                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    1            +------------------------E-----------------------+            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                |            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                1            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3            7                                                D            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2            D                                                3            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    D  +---------7--------+                        +--------------E---------------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        |                              | (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        1                              2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3  4                  C                        5                              F (SCI_BD_LOW_PULSE_TREE)
                                      ;#    B  7                  0                        F                              5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    F +3-+          +-----D-----+           +------D-----+               +--------6---------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           |            |               |                  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           1            1               2                  4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  6          9           E           2            8               5                  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  2          8           2           7            9               1                  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      7 +5-+     +--9---+     +-C--+     +--0--+      +--8---+       +---A---+        +-----8------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     |     |      |      |       |       |        |            | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     1     1      1      1       2       2        3            5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4 4  6     8      B     C    E     0     3      6      A       0       B        7            8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      3 E  D     E      3     C    A     C     6      9      D       B       D        A            4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      B 0 +6+  +-6-+   +B-+  +1-+ +8+  +-7-+  +2-+   +2-+  +-D-+   +-F-+   +-E-+   +--8--+     +---6---+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  |   |  |  |   |  |  |   |   |   |   |   |   |     |     |       | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  1   1  1  1   1  1  1   1   1   2   2   2   3     3     4       6 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7  8   9   A  B  C  D E E  0   1  3  3   6  7  8   C   E   1   6   D   1     B     9       4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        8 6 5  4   3   E  9  6  5 9 B  A   7  1  D   7  8  F   9   5   B   7   5   B     0     F       E (SCI_BD_LOW_PULSE_TREE)
                                      ;#        2 5 0 +4+ +9+ +B+ 0 +6+ 9 F 7 +1+ +C+ 2 +E+ +6+ 6 +3+ +C+ +F+ +2+ +F+ +7+ +F-+  +7+  +-A-+   +-1-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |  |  | |  |   |   |   | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3  3  3 3  4   4   5   7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7 8 8 8 9 9 B B C C C E F 0 0 1 1 2 3 5 6 6 7 8 9 B C D F 1 3 5 6 C D 1  4  9 E  3   E   A   4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        D 5 8 4 7 F 7 D 1 A 4 9 E 4 0 0 A 4 F 7 8 D 0 7 8 C D A 9 5 A 2 9 3 C 1 6 2  2  9 B  C   0   8   F (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4 A 6 3 A 5 2 7 F 8 A D D F C 1 F 3 7 1 0 5 A 9 7 F A 9 D 6 7 9 A 8 8 0 B A +F+ 2 B +E+ +A+ +F+ +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            |       | | | | |   | | | | | | | | | | | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            1       2 2 2 2 2   2 3 3 3 3 3 4 4 4 5 5 5 6  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       0 1 3 5 A   E 0 2 5 9 C 1 6 C 6 9 E 7  7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            3       0 1 2 D E   A 0 E 9 C 3 E 2 4 5 D 6 6  3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       1 0 F 5 B   0 1 8 1 0 0 4 7 B C B 2 B +3-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              | | |   | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              4 4 5   6 6 8  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              9 C 7   0 E 0  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              C 2 5   9 F 0  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              1 0 1   8 8 2 +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7 8 9  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2 3 7  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        C 6 C  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        A 0 8 +3+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        |     | | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     A C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2     C 0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     3 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        1     1 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
001DDE 0F9DDE 01 A0 C0 C0 1D EC       N__1A0          DW      $01A0   $C0C0   N__270          ;if pulse >= 416 then check N__270 else check N__10F (SCI_BD_LOW_PULSE_TREE)
001DE4 0F9DE4 01 0F 80 80 00 00       N__10F          DW      $010F   $8080   $0000           ;if pulse >= 271 then the result is 80 else the result is 00 (SCI_BD_LOW_PULSE_TREE)
001DEA 0F9DEA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DEC 0F9DEC 02 70 60 60 1D FA       N__270          DW      $0270   $6060   N__422          ;if pulse >= 624 then check N__422 else check N__21E (SCI_BD_LOW_PULSE_TREE)
001DF2 0F9DF2 02 1E E0 E0 00 00       N__21E          DW      $021E   $E0E0   $0000           ;if pulse >= 542 then the result is E0 else the result is C0 (SCI_BD_LOW_PULSE_TREE)
001DF8 0F9DF8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DFA 0F9DFA 04 22 30 30 1E 18       N__422          DW      $0422   $3030   N__FAE          ;if pulse >= 1058 then check N__FAE else check N__2C1 (SCI_BD_LOW_PULSE_TREE)
001E00 0F9E00 02 C1 E0 E0 1E 08       N__2C1          DW      $02C1   $E0E0   N__32D          ;if pulse >= 705 then check N__32D else the result is 60 (SCI_BD_LOW_PULSE_TREE)
001E06 0F9E06 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E08 0F9E08 03 2D F0 F0 1E 10       N__32D          DW      $032D   $F0F0   N__3BF          ;if pulse >= 813 then check N__3BF else the result is E0 (SCI_BD_LOW_PULSE_TREE)
001E0E 0F9E0E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E10 0F9E10 03 BF B0 B0 00 00       N__3BF          DW      $03BF   $B0B0   $0000           ;if pulse >= 959 then the result is B0 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
001E16 0F9E16 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E18 0F9E18 0F AE FB FB 1F 38       N__FAE          DW      $0FAE   $FBFB   N_1D3E          ;if pulse >= 4014 then check N_1D3E else check N__7D7 (SCI_BD_LOW_PULSE_TREE)
001E1E 0F9E1E 07 D7 EC EC 1E 7A       N__7D7          DW      $07D7   $ECEC   N__C0D          ;if pulse >= 2007 then check N__C0D else check N__473 (SCI_BD_LOW_PULSE_TREE)
001E24 0F9E24 04 73 F8 F8 1E 38       N__473          DW      $0473   $F8F8   N__625          ;if pulse >= 1139 then check N__625 else check N__447 (SCI_BD_LOW_PULSE_TREE)
001E2A 0F9E2A 04 47 78 78 00 00       N__447          DW      $0447   $7878   $0000           ;if pulse >= 1095 then the result is 78 else check N__43B (SCI_BD_LOW_PULSE_TREE)
001E30 0F9E30 04 3B 70 70 00 00       N__43B          DW      $043B   $7070   $0000           ;if pulse >= 1083 then the result is 70 else the result is 30 (SCI_BD_LOW_PULSE_TREE)
001E36 0F9E36 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E38 0F9E38 06 25 F8 F8 1E 56       N__625          DW      $0625   $F8F8   N__6D6          ;if pulse >= 1573 then check N__6D6 else check N__4E0 (SCI_BD_LOW_PULSE_TREE)
001E3E 0F9E3E 04 E0 D8 D8 1E 46       N__4E0          DW      $04E0   $D8D8   N__582          ;if pulse >= 1248 then check N__582 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
001E44 0F9E44 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E46 0F9E46 05 82 F8 F8 1E 4E       N__582          DW      $0582   $F8F8   N__5D4          ;if pulse >= 1410 then check N__5D4 else the result is D8 (SCI_BD_LOW_PULSE_TREE)
001E4C 0F9E4C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E4E 0F9E4E 05 D4 78 78 00 00       N__5D4          DW      $05D4   $7878   $0000           ;if pulse >= 1492 then the result is 78 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
001E54 0F9E54 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E56 0F9E56 06 D6 FC FC 1E 6A       N__6D6          DW      $06D6   $FCFC   N__750          ;if pulse >= 1750 then check N__750 else check N__665 (SCI_BD_LOW_PULSE_TREE)
001E5C 0F9E5C 06 65 BC BC 00 00       N__665          DW      $0665   $BCBC   $0000           ;if pulse >= 1637 then the result is BC else check N__65A (SCI_BD_LOW_PULSE_TREE)
001E62 0F9E62 06 5A B8 B8 00 00       N__65A          DW      $065A   $B8B8   $0000           ;if pulse >= 1626 then the result is B8 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
001E68 0F9E68 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E6A 0F9E6A 07 50 EC EC 1E 72       N__750          DW      $0750   $ECEC   N__786          ;if pulse >= 1872 then check N__786 else the result is FC (SCI_BD_LOW_PULSE_TREE)
001E70 0F9E70 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E72 0F9E72 07 86 6C 6C 00 00       N__786          DW      $0786   $6C6C   $0000           ;if pulse >= 1926 then the result is 6C else the result is EC (SCI_BD_LOW_PULSE_TREE)
001E78 0F9E78 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E7A 0F9E7A 0C 0D DE DE 1E E4       N__C0D          DW      $0C0D   $DEDE   N__E2C          ;if pulse >= 3085 then check N__E2C else check N__989 (SCI_BD_LOW_PULSE_TREE)
001E80 0F9E80 09 89 FE FE 1E B8       N__989          DW      $0989   $FEFE   N__B3B          ;if pulse >= 2441 then check N__B3B else check N__8E6 (SCI_BD_LOW_PULSE_TREE)
001E86 0F9E86 08 E6 FE FE 1E A2       N__8E6          DW      $08E6   $FEFE   N__939          ;if pulse >= 2278 then check N__939 else check N__844 (SCI_BD_LOW_PULSE_TREE)
001E8C 0F9E8C 08 44 DC DC 1E 9A       N__844          DW      $0844   $DCDC   N__87A          ;if pulse >= 2116 then check N__87A else check N__843 (SCI_BD_LOW_PULSE_TREE)
001E92 0F9E92 08 43 FC FC 00 00       N__843          DW      $0843   $FCFC   $0000           ;if pulse >= 2115 then the result is FC else the result is EC (SCI_BD_LOW_PULSE_TREE)
001E98 0F9E98 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E9A 0F9E9A 08 7A DE DE 00 00       N__87A          DW      $087A   $DEDE   $0000           ;if pulse >= 2170 then the result is DE else the result is DC (SCI_BD_LOW_PULSE_TREE)
001EA0 0F9EA0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EA2 0F9EA2 09 39 3E 3E 1E B0       N__939          DW      $0939   $3E3E   N__972          ;if pulse >= 2361 then check N__972 else check N__8F5 (SCI_BD_LOW_PULSE_TREE)
001EA8 0F9EA8 08 F5 BE BE 00 00       N__8F5          DW      $08F5   $BEBE   $0000           ;if pulse >= 2293 then the result is BE else the result is FE (SCI_BD_LOW_PULSE_TREE)
001EAE 0F9EAE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EB0 0F9EB0 09 72 7E 7E 00 00       N__972          DW      $0972   $7E7E   $0000           ;if pulse >= 2418 then the result is 7E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
001EB6 0F9EB6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EB8 0F9EB8 0B 3B FE FE 1E D4       N__B3B          DW      $0B3B   $FEFE   N__B90          ;if pulse >= 2875 then check N__B90 else check N__AEB (SCI_BD_LOW_PULSE_TREE)
001EBE 0F9EBE 0A EB 76 76 1E CC       N__AEB          DW      $0AEB   $7676   N__B1F          ;if pulse >= 2795 then check N__B1F else check N__9D7 (SCI_BD_LOW_PULSE_TREE)
001EC4 0F9EC4 09 D7 F6 F6 00 00       N__9D7          DW      $09D7   $F6F6   $0000           ;if pulse >= 2519 then the result is F6 else the result is FE (SCI_BD_LOW_PULSE_TREE)
001ECA 0F9ECA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001ECC 0F9ECC 0B 1F 7E 7E 00 00       N__B1F          DW      $0B1F   $7E7E   $0000           ;if pulse >= 2847 then the result is 7E else the result is 76 (SCI_BD_LOW_PULSE_TREE)
001ED2 0F9ED2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001ED4 0F9ED4 0B 90 BE BE 1E DC       N__B90          DW      $0B90   $BEBE   N__BA8          ;if pulse >= 2960 then check N__BA8 else the result is FE (SCI_BD_LOW_PULSE_TREE)
001EDA 0F9EDA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EDC 0F9EDC 0B A8 9E 9E 00 00       N__BA8          DW      $0BA8   $9E9E   $0000           ;if pulse >= 2984 then the result is 9E else the result is BE (SCI_BD_LOW_PULSE_TREE)
001EE2 0F9EE2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EE4 0F9EE4 0E 2C BF BF 1F 14       N__E2C          DW      $0E2C   $BFBF   N__EA8          ;if pulse >= 3628 then check N__EA8 else check N__CC1 (SCI_BD_LOW_PULSE_TREE)
001EEA 0F9EEA 0C C1 6F 6F 1F 06       N__CC1          DW      $0CC1   $6F6F   N__D59          ;if pulse >= 3265 then check N__D59 else check N__C66 (SCI_BD_LOW_PULSE_TREE)
001EF0 0F9EF0 0C 66 EE EE 1E FE       N__C66          DW      $0C66   $EEEE   N__C9D          ;if pulse >= 3174 then check N__C9D else check N__C4A (SCI_BD_LOW_PULSE_TREE)
001EF6 0F9EF6 0C 4A FE FE 00 00       N__C4A          DW      $0C4A   $FEFE   $0000           ;if pulse >= 3146 then the result is FE else the result is DE (SCI_BD_LOW_PULSE_TREE)
001EFC 0F9EFC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EFE 0F9EFE 0C 9D 6E 6E 00 00       N__C9D          DW      $0C9D   $6E6E   $0000           ;if pulse >= 3229 then the result is 6E else the result is EE (SCI_BD_LOW_PULSE_TREE)
001F04 0F9F04 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F06 0F9F06 0D 59 FF FF 00 00       N__D59          DW      $0D59   $FFFF   $0000           ;if pulse >= 3417 then the result is FF else check N__CED (SCI_BD_LOW_PULSE_TREE)
001F0C 0F9F0C 0C ED EF EF 00 00       N__CED          DW      $0CED   $EFEF   $0000           ;if pulse >= 3309 then the result is EF else the result is 6F (SCI_BD_LOW_PULSE_TREE)
001F12 0F9F12 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F14 0F9F14 0E A8 FF FF 1F 28       N__EA8          DW      $0EA8   $FFFF   N__EB7          ;if pulse >= 3752 then check N__EB7 else check N__E9F (SCI_BD_LOW_PULSE_TREE)
001F1A 0F9F1A 0E 9F BF BF 00 00       N__E9F          DW      $0E9F   $BFBF   $0000           ;if pulse >= 3743 then the result is BF else check N__E4F (SCI_BD_LOW_PULSE_TREE)
001F20 0F9F20 0E 4F 3F 3F 00 00       N__E4F          DW      $0E4F   $3F3F   $0000           ;if pulse >= 3663 then the result is 3F else the result is BF (SCI_BD_LOW_PULSE_TREE)
001F26 0F9F26 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F28 0F9F28 0E B7 FB FB 1F 30       N__EB7          DW      $0EB7   $FBFB   N__F0C          ;if pulse >= 3767 then check N__F0C else the result is FF (SCI_BD_LOW_PULSE_TREE)
001F2E 0F9F2E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F30 0F9F30 0F 0C DB DB 00 00       N__F0C          DW      $0F0C   $DBDB   $0000           ;if pulse >= 3852 then the result is DB else the result is FB (SCI_BD_LOW_PULSE_TREE)
001F36 0F9F36 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F38 0F9F38 1D 3E 3F 3F 20 10       N_1D3E          DW      $1D3E   $3F3F   N_2F56          ;if pulse >= 7486 then check N_2F56 else check N_15FD (SCI_BD_LOW_PULSE_TREE)
001F3E 0F9F3E 15 FD 1D 1D 1F A6       N_15FD          DW      $15FD   $1D1D   N_1898          ;if pulse >= 5629 then check N_1898 else check N_1270 (SCI_BD_LOW_PULSE_TREE)
001F44 0F9F44 12 70 7F 7F 1F 7C       N_1270          DW      $1270   $7F7F   N_1362          ;if pulse >= 4720 then check N_1362 else check N_10C7 (SCI_BD_LOW_PULSE_TREE)
001F4A 0F9F4A 10 C7 37 37 1F 66       N_10C7          DW      $10C7   $3737   N_117C          ;if pulse >= 4295 then check N_117C else check N_10A1 (SCI_BD_LOW_PULSE_TREE)
001F50 0F9F50 10 A1 7F 7F 1F 5E       N_10A1          DW      $10A1   $7F7F   N_10AF          ;if pulse >= 4257 then check N_10AF else check N_1001 (SCI_BD_LOW_PULSE_TREE)
001F56 0F9F56 10 01 7B 7B 00 00       N_1001          DW      $1001   $7B7B   $0000           ;if pulse >= 4097 then the result is 7B else the result is FB (SCI_BD_LOW_PULSE_TREE)
001F5C 0F9F5C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F5E 0F9F5E 10 AF 77 77 00 00       N_10AF          DW      $10AF   $7777   $0000           ;if pulse >= 4271 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
001F64 0F9F64 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F66 0F9F66 11 7C 67 67 1F 74       N_117C          DW      $117C   $6767   N_11F7          ;if pulse >= 4476 then check N_11F7 else check N_1143 (SCI_BD_LOW_PULSE_TREE)
001F6C 0F9F6C 11 43 77 77 00 00       N_1143          DW      $1143   $7777   $0000           ;if pulse >= 4419 then the result is 77 else the result is 37 (SCI_BD_LOW_PULSE_TREE)
001F72 0F9F72 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F74 0F9F74 11 F7 6F 6F 00 00       N_11F7          DW      $11F7   $6F6F   $0000           ;if pulse >= 4599 then the result is 6F else the result is 67 (SCI_BD_LOW_PULSE_TREE)
001F7A 0F9F7A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F7C 0F9F7C 13 62 3F 3F 1F 90       N_1362          DW      $1362   $3F3F   N_13DE          ;if pulse >= 4962 then check N_13DE else check N_1312 (SCI_BD_LOW_PULSE_TREE)
001F82 0F9F82 13 12 7F 7F 00 00       N_1312          DW      $1312   $7F7F   $0000           ;if pulse >= 4882 then the result is 7F else check N_1271 (SCI_BD_LOW_PULSE_TREE)
001F88 0F9F88 12 71 5F 5F 00 00       N_1271          DW      $1271   $5F5F   $0000           ;if pulse >= 4721 then the result is 5F else the result is 7F (SCI_BD_LOW_PULSE_TREE)
001F8E 0F9F8E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F90 0F9F90 13 DE 7D 7D 1F 9E       N_13DE          DW      $13DE   $7D7D   N_15D5          ;if pulse >= 5086 then check N_15D5 else check N_1380 (SCI_BD_LOW_PULSE_TREE)
001F96 0F9F96 13 80 3D 3D 00 00       N_1380          DW      $1380   $3D3D   $0000           ;if pulse >= 4992 then the result is 3D else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001F9C 0F9F9C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F9E 0F9F9E 15 D5 5D 5D 00 00       N_15D5          DW      $15D5   $5D5D   $0000           ;if pulse >= 5589 then the result is 5D else the result is 7D (SCI_BD_LOW_PULSE_TREE)
001FA4 0F9FA4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FA6 0F9FA6 18 98 37 37 1F D8       N_1898          DW      $1898   $3737   N_1ADD          ;if pulse >= 6296 then check N_1ADD else check N_1692 (SCI_BD_LOW_PULSE_TREE)
001FAC 0F9FAC 16 92 6F 6F 1F C8       N_1692          DW      $1692   $6F6F   N_1786          ;if pulse >= 5778 then check N_1786 else check N_1676 (SCI_BD_LOW_PULSE_TREE)
001FB2 0F9FB2 16 76 3F 3F 1F C0       N_1676          DW      $1676   $3F3F   N_1679          ;if pulse >= 5750 then check N_1679 else check N_160A (SCI_BD_LOW_PULSE_TREE)
001FB8 0F9FB8 16 0A 1F 1F 00 00       N_160A          DW      $160A   $1F1F   $0000           ;if pulse >= 5642 then the result is 1F else the result is 1D (SCI_BD_LOW_PULSE_TREE)
001FBE 0F9FBE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FC0 0F9FC0 16 79 7F 7F 00 00       N_1679          DW      $1679   $7F7F   $0000           ;if pulse >= 5753 then the result is 7F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001FC6 0F9FC6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FC8 0F9FC8 17 86 7F 7F 1F D0       N_1786          DW      $1786   $7F7F   N_1787          ;if pulse >= 6022 then check N_1787 else the result is 6F (SCI_BD_LOW_PULSE_TREE)
001FCE 0F9FCE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FD0 0F9FD0 17 87 77 77 00 00       N_1787          DW      $1787   $7777   $0000           ;if pulse >= 6023 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
001FD6 0F9FD6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FD8 0F9FD8 1A DD 3F 3F 1F FA       N_1ADD          DW      $1ADD   $3F3F   N_1C9C          ;if pulse >= 6877 then check N_1C9C else check N_18F3 (SCI_BD_LOW_PULSE_TREE)
001FDE 0F9FDE 18 F3 3B 3B 1F EC       N_18F3          DW      $18F3   $3B3B   N_19DA          ;if pulse >= 6387 then check N_19DA else check N_18CF (SCI_BD_LOW_PULSE_TREE)
001FE4 0F9FE4 18 CF 3F 3F 00 00       N_18CF          DW      $18CF   $3F3F   $0000           ;if pulse >= 6351 then the result is 3F else the result is 37 (SCI_BD_LOW_PULSE_TREE)
001FEA 0F9FEA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FEC 0F9FEC 19 DA 3B 3B 00 00       N_19DA          DW      $19DA   $3B3B   $0000           ;if pulse >= 6618 then the result is 3B else check N_1939 (SCI_BD_LOW_PULSE_TREE)
001FF2 0F9FF2 19 39 1B 1B 00 00       N_1939          DW      $1939   $1B1B   $0000           ;if pulse >= 6457 then the result is 1B else the result is 3B (SCI_BD_LOW_PULSE_TREE)
001FF8 0F9FF8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FFA 0F9FFA 1C 9C 3F 3F 20 08       N_1C9C          DW      $1C9C   $3F3F   N_1C9D          ;if pulse >= 7324 then check N_1C9D else check N_1BA9 (SCI_BD_LOW_PULSE_TREE)
002000 0FA000 1B A9 2F 2F 00 00       N_1BA9          DW      $1BA9   $2F2F   $0000           ;if pulse >= 7081 then the result is 2F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002006 0FA006 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002008 0FA008 1C 9D 1F 1F 00 00       N_1C9D          DW      $1C9D   $1F1F   $0000           ;if pulse >= 7325 then the result is 1F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00200E 0FA00E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002010 0FA010 2F 56 1D 1D 20 AC       N_2F56          DW      $2F56   $1D1D   N_4098          ;if pulse >= 12118 then check N_4098 else check N_251A (SCI_BD_LOW_PULSE_TREE)
002016 0FA016 25 1A 1F 1F 20 62       N_251A          DW      $251A   $1F1F   N_2BDE          ;if pulse >= 9498 then check N_2BDE else check N_20BF (SCI_BD_LOW_PULSE_TREE)
00201C 0FA01C 20 BF 0E 0E 20 40       N_20BF          DW      $20BF   $0E0E   N_21B2          ;if pulse >= 8383 then check N_21B2 else check N_1E5F (SCI_BD_LOW_PULSE_TREE)
002022 0FA022 1E 5F 36 36 20 30       N_1E5F          DW      $1E5F   $3636   N_1FA7          ;if pulse >= 7775 then check N_1FA7 else check N_1D56 (SCI_BD_LOW_PULSE_TREE)
002028 0FA028 1D 56 3E 3E 00 00       N_1D56          DW      $1D56   $3E3E   $0000           ;if pulse >= 7510 then the result is 3E else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00202E 0FA02E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002030 0FA030 1F A7 3E 3E 20 38       N_1FA7          DW      $1FA7   $3E3E   N_2001          ;if pulse >= 8103 then check N_2001 else the result is 36 (SCI_BD_LOW_PULSE_TREE)
002036 0FA036 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002038 0FA038 20 01 1E 1E 00 00       N_2001          DW      $2001   $1E1E   $0000           ;if pulse >= 8193 then the result is 1E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
00203E 0FA03E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002040 0FA040 21 B2 1D 1D 20 54       N_21B2          DW      $21B2   $1D1D   N_239A          ;if pulse >= 8626 then check N_239A else check N_2129 (SCI_BD_LOW_PULSE_TREE)
002046 0FA046 21 29 0D 0D 00 00       N_2129          DW      $2129   $0D0D   $0000           ;if pulse >= 8489 then the result is 0D else check N_2110 (SCI_BD_LOW_PULSE_TREE)
00204C 0FA04C 21 10 0C 0C 00 00       N_2110          DW      $2110   $0C0C   $0000           ;if pulse >= 8464 then the result is 0C else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002052 0FA052 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002054 0FA054 23 9A 1B 1B 00 00       N_239A          DW      $239A   $1B1B   $0000           ;if pulse >= 9114 then the result is 1B else check N_232F (SCI_BD_LOW_PULSE_TREE)
00205A 0FA05A 23 2F 19 19 00 00       N_232F          DW      $232F   $1919   $0000           ;if pulse >= 9007 then the result is 19 else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002060 0FA060 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002062 0FA062 2B DE 1F 1F 20 8E       N_2BDE          DW      $2BDE   $1F1F   N_2D57          ;if pulse >= 11230 then check N_2D57 else check N_267F (SCI_BD_LOW_PULSE_TREE)
002068 0FA068 26 7F 0F 0F 20 7E       N_267F          DW      $267F   $0F0F   N_26C8          ;if pulse >= 9855 then check N_26C8 else check N_2538 (SCI_BD_LOW_PULSE_TREE)
00206E 0FA06E 25 38 17 17 20 76       N_2538          DW      $2538   $1717   N_25D5          ;if pulse >= 9528 then check N_25D5 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002074 0FA074 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002076 0FA076 25 D5 07 07 00 00       N_25D5          DW      $25D5   $0707   $0000           ;if pulse >= 9685 then the result is 07 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
00207C 0FA07C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00207E 0FA07E 26 C8 1F 1F 20 86       N_26C8          DW      $26C8   $1F1F   N_2AEB          ;if pulse >= 9928 then check N_2AEB else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002084 0FA084 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002086 0FA086 2A EB 0F 0F 00 00       N_2AEB          DW      $2AEB   $0F0F   $0000           ;if pulse >= 10987 then the result is 0F else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00208C 0FA08C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00208E 0FA08E 2D 57 1F 1F 20 9C       N_2D57          DW      $2D57   $1F1F   N_2D6B          ;if pulse >= 11607 then check N_2D6B else check N_2C10 (SCI_BD_LOW_PULSE_TREE)
002094 0FA094 2C 10 17 17 00 00       N_2C10          DW      $2C10   $1717   $0000           ;if pulse >= 11280 then the result is 17 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00209A 0FA09A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00209C 0FA09C 2D 6B 1B 1B 20 A4       N_2D6B          DW      $2D6B   $1B1B   N_2EA0          ;if pulse >= 11627 then check N_2EA0 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
0020A2 0FA0A2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020A4 0FA0A4 2E A0 19 19 00 00       N_2EA0          DW      $2EA0   $1919   $0000           ;if pulse >= 11936 then the result is 19 else the result is 1B (SCI_BD_LOW_PULSE_TREE)
0020AA 0FA0AA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020AC 0FA0AC 40 98 07 07 21 06       N_4098          DW      $4098   $0707   N_5846          ;if pulse >= 16536 then check N_5846 else check N_37A8 (SCI_BD_LOW_PULSE_TREE)
0020B2 0FA0B2 37 A8 0B 0B 20 E2       N_37A8          DW      $37A8   $0B0B   N_3B07          ;if pulse >= 14248 then check N_3B07 else check N_31BF (SCI_BD_LOW_PULSE_TREE)
0020B8 0FA0B8 31 BF 0E 0E 20 CC       N_31BF          DW      $31BF   $0E0E   N_342F          ;if pulse >= 12735 then check N_342F else check N_312A (SCI_BD_LOW_PULSE_TREE)
0020BE 0FA0BE 31 2A 0F 0F 00 00       N_312A          DW      $312A   $0F0F   $0000           ;if pulse >= 12586 then the result is 0F else check N_3001 (SCI_BD_LOW_PULSE_TREE)
0020C4 0FA0C4 30 01 0D 0D 00 00       N_3001          DW      $3001   $0D0D   $0000           ;if pulse >= 12289 then the result is 0D else the result is 1D (SCI_BD_LOW_PULSE_TREE)
0020CA 0FA0CA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020CC 0FA0CC 34 2F 0E 0E 20 DA       N_342F          DW      $342F   $0E0E   N_3591          ;if pulse >= 13359 then check N_3591 else check N_32E8 (SCI_BD_LOW_PULSE_TREE)
0020D2 0FA0D2 32 E8 06 06 00 00       N_32E8          DW      $32E8   $0606   $0000           ;if pulse >= 13032 then the result is 06 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
0020D8 0FA0D8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020DA 0FA0DA 35 91 0F 0F 00 00       N_3591          DW      $3591   $0F0F   $0000           ;if pulse >= 13713 then the result is 0F else the result is 0E (SCI_BD_LOW_PULSE_TREE)
0020E0 0FA0E0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020E2 0FA0E2 3B 07 0F 0F 20 F8       N_3B07          DW      $3B07   $0F0F   N_3EBB          ;if pulse >= 15111 then check N_3EBB else check N_3992 (SCI_BD_LOW_PULSE_TREE)
0020E8 0FA0E8 39 92 0F 0F 20 F0       N_3992          DW      $3992   $0F0F   N_39C0          ;if pulse >= 14738 then check N_39C0 else the result is 0B (SCI_BD_LOW_PULSE_TREE)
0020EE 0FA0EE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020F0 0FA0F0 39 C0 07 07 00 00       N_39C0          DW      $39C0   $0707   $0000           ;if pulse >= 14784 then the result is 07 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
0020F6 0FA0F6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020F8 0FA0F8 3E BB 0F 0F 00 00       N_3EBB          DW      $3EBB   $0F0F   $0000           ;if pulse >= 16059 then the result is 0F else check N_3C30 (SCI_BD_LOW_PULSE_TREE)
0020FE 0FA0FE 3C 30 0D 0D 00 00       N_3C30          DW      $3C30   $0D0D   $0000           ;if pulse >= 15408 then the result is 0D else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002104 0FA104 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002106 0FA106 58 46 05 05 21 54       N_5846          DW      $5846   $0505   N_64E1          ;if pulse >= 22598 then check N_64E1 else check N_49FA (SCI_BD_LOW_PULSE_TREE)
00210C 0FA10C 49 FA 05 05 21 30       N_49FA          DW      $49FA   $0505   N_4E0A          ;if pulse >= 18938 then check N_4E0A else check N_43CE (SCI_BD_LOW_PULSE_TREE)
002112 0FA112 43 CE 07 07 21 20       N_43CE          DW      $43CE   $0707   N_4627          ;if pulse >= 17358 then check N_4627 else check N_41E4 (SCI_BD_LOW_PULSE_TREE)
002118 0FA118 41 E4 03 03 00 00       N_41E4          DW      $41E4   $0303   $0000           ;if pulse >= 16868 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00211E 0FA11E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002120 0FA120 46 27 06 06 21 28       N_4627          DW      $4627   $0606   N_49C1          ;if pulse >= 17959 then check N_49C1 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002126 0FA126 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002128 0FA128 49 C1 04 04 00 00       N_49C1          DW      $49C1   $0404   $0000           ;if pulse >= 18881 then the result is 04 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
00212E 0FA12E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002130 0FA130 4E 0A 07 07 21 44       N_4E0A          DW      $4E0A   $0707   N_565C          ;if pulse >= 19978 then check N_565C else check N_4C4B (SCI_BD_LOW_PULSE_TREE)
002136 0FA136 4C 4B 03 03 00 00       N_4C4B          DW      $4C4B   $0303   $0000           ;if pulse >= 19531 then the result is 03 else check N_4C20 (SCI_BD_LOW_PULSE_TREE)
00213C 0FA13C 4C 20 01 01 00 00       N_4C20          DW      $4C20   $0101   $0000           ;if pulse >= 19488 then the result is 01 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
002142 0FA142 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002144 0FA144 56 5C 03 03 21 4C       N_565C          DW      $565C   $0303   N_5751          ;if pulse >= 22108 then check N_5751 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00214A 0FA14A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00214C 0FA14C 57 51 01 01 00 00       N_5751          DW      $5751   $0101   $0000           ;if pulse >= 22353 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002152 0FA152 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002154 0FA154 64 E1 01 01 21 78       N_64E1          DW      $64E1   $0101   N_74FB          ;if pulse >= 25825 then check N_74FB else check N_5A8F (SCI_BD_LOW_PULSE_TREE)
00215A 0FA15A 5A 8F 06 06 21 68       N_5A8F          DW      $5A8F   $0606   N_5E62          ;if pulse >= 23183 then check N_5E62 else check N_59DB (SCI_BD_LOW_PULSE_TREE)
002160 0FA160 59 DB 07 07 00 00       N_59DB          DW      $59DB   $0707   $0000           ;if pulse >= 23003 then the result is 07 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
002166 0FA166 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002168 0FA168 5E 62 07 07 21 70       N_5E62          DW      $5E62   $0707   N_6098          ;if pulse >= 24162 then check N_6098 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
00216E 0FA16E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002170 0FA170 60 98 03 03 00 00       N_6098          DW      $6098   $0303   $0000           ;if pulse >= 24728 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002176 0FA176 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002178 0FA178 74 FB 03 03 21 9C       N_74FB          DW      $74FB   $0303   N_8733          ;if pulse >= 29947 then check N_8733 else check N_676B (SCI_BD_LOW_PULSE_TREE)
00217E 0FA17E 67 6B 03 03 21 86       N_676B          DW      $676B   $0303   N_6EF8          ;if pulse >= 26475 then check N_6EF8 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002184 0FA184 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002186 0FA186 6E F8 02 02 21 8E       N_6EF8          DW      $6EF8   $0202   N_72CA          ;if pulse >= 28408 then check N_72CA else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00218C 0FA18C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00218E 0FA18E 72 CA 01 01 00 00       N_72CA          DW      $72CA   $0101   $0000           ;if pulse >= 29386 then the result is 01 else check N_7271 (SCI_BD_LOW_PULSE_TREE)
002194 0FA194 72 71 00 00 00 00       N_7271          DW      $7271   $0000   $0000           ;if pulse >= 29297 then the result is 00 else the result is 02 (SCI_BD_LOW_PULSE_TREE)
00219A 0FA19A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00219C 0FA19C 87 33 01 01 21 B2       N_8733          DW      $8733   $0101   N_9B9B          ;if pulse >= 34611 then check N_9B9B else check N_8002 (SCI_BD_LOW_PULSE_TREE)
0021A2 0FA1A2 80 02 01 01 21 AA       N_8002          DW      $8002   $0101   N_8360          ;if pulse >= 32770 then check N_8360 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
0021A8 0FA1A8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0021AA 0FA1AA 83 60 00 00 00 00       N_8360          DW      $8360   $0000   $0000           ;if pulse >= 33632 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
0021B0 0FA1B0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0021B2 0FA1B2 9B 9B 01 01 21 C0       N_9B9B          DW      $9B9B   $0101   N_B003          ;if pulse >= 39835 then check N_B003 else check N_97C8 (SCI_BD_LOW_PULSE_TREE)
0021B8 0FA1B8 97 C8 00 00 00 00       N_97C8          DW      $97C8   $0000   $0000           ;if pulse >= 38856 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
0021BE 0FA1BE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0021C0 0FA1C0 B0 03 01 01 21 CE       N_B003          DW      $B003   $0101   N_C099          ;if pulse >= 45059 then check N_C099 else check N_AC31 (SCI_BD_LOW_PULSE_TREE)
0021C6 0FA1C6 AC 31 00 00 00 00       N_AC31          DW      $AC31   $0000   $0000           ;if pulse >= 44081 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
0021CC 0FA1CC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0021CE 0FA1CE C0 99 00 00 00 00       N_C099          DW      $C099   $0000   $0000           ;if pulse >= 49305 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
0021D4 0FA1D4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
                                                              ;Search tree for high pulses
0021D6 0FA1D6 MACRO                   SCI_BD_HIGH_PULSE_TREE  SCI_BD_HIGH_PULSE_TREE
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;# High pulse search tree                                                      # (SCI_BD_HIGH_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    412 ( 19C)      1 . . . . . . . (80)     11      3       37                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    633 ( 279)      1 1 . . . . . . (C0)     18      2       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    824 ( 338)      1 1 1 . . . . . (E0)     22      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1236 ( 4D4)      1 1 1 1 . . . . (F0)     19      1       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1664 ( 680)      1 1 1 1 1 . . . (F8)     14      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   2489 ( 9B9)      1 1 1 1 1 1 . . (FC)      6      2       52                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   3298 ( CE2)      1 1 1 1 1 1 1 . (FE)      7      4       61                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4963 (1363)      1 1 1 1 1 1 1 1 (FF)      8      3       51                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   D                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;# +-4-+                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 2   9                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 7   B                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;#+9+ +9+                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | 1                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#1 3 6 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#9 3 8 6                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#C 8 0 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      C                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      E                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      2                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
0021D6 0FA1D6 04 D4 F0 F0 21 F2       N__4D4          DW      $04D4   $F0F0   N__9B9          ;if pulse >= 1236 then check N__9B9 else check N__279 (SCI_BD_HIGH_PULSE_TREE)
0021DC 0FA1DC 02 79 C0 C0 21 EA       N__279          DW      $0279   $C0C0   N__338          ;if pulse >= 633 then check N__338 else check N__19C (SCI_BD_HIGH_PULSE_TREE)
0021E2 0FA1E2 01 9C 80 80 00 00       N__19C          DW      $019C   $8080   $0000           ;if pulse >= 412 then the result is 80 else the result is 00 (SCI_BD_HIGH_PULSE_TREE)
0021E8 0FA1E8 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
0021EA 0FA1EA 03 38 E0 E0 00 00       N__338          DW      $0338   $E0E0   $0000           ;if pulse >= 824 then the result is E0 else the result is C0 (SCI_BD_HIGH_PULSE_TREE)
0021F0 0FA1F0 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
0021F2 0FA1F2 09 B9 FC FC 22 00       N__9B9          DW      $09B9   $FCFC   N_1363          ;if pulse >= 2489 then check N_1363 else check N__680 (SCI_BD_HIGH_PULSE_TREE)
0021F8 0FA1F8 06 80 F8 F8 00 00       N__680          DW      $0680   $F8F8   $0000           ;if pulse >= 1664 then the result is F8 else the result is F0 (SCI_BD_HIGH_PULSE_TREE)
0021FE 0FA1FE 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002200 0FA200 13 63 FF FF 00 00       N_1363          DW      $1363   $FFFF   $0000           ;if pulse >= 4963 then the result is FF else check N__CE2 (SCI_BD_HIGH_PULSE_TREE)
002206 0FA206 0C E2 FE FE 00 00       N__CE2          DW      $0CE2   $FEFE   $0000           ;if pulse >= 3298 then the result is FE else the result is FC (SCI_BD_HIGH_PULSE_TREE)
00220C 0FA20C 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00220E 0FA20E -> $220E                SCI_TABS_END            EQU     *
00220E 0FA20E -> $FA20E               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB       - print a string (non-blocking)                    #
                                      ;#    STRING_PRINT_BL       - print a string (blocking)                        #
                                      ;#    STRING_FILL_NB        - print a number of filler characters (non-bl.)    #
                                      ;#    STRING_FILL_BL        - print a number of filler characters (blocking)   #
                                      ;#    STRING_UPPER          - convert a character to upper case                #
                                      ;#    STRING_LOWER          - convert a character to lower case                #
                                      ;#    STRING_PRINTABLE      - make character printable                         #
                                      ;#    STRING_SKIP_WS        - skip whitespace characters                       #
                                      ;#    STRING_SKIP_AND_COUNT - determine the length of a string                 #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - Fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;#    June 10, 2013                                                            #
                                      ;#      - Turned STRING_UPPER and STRING_LOWER into subroutines                #
                                      ;#      - Added STRING_SKIP_WS                                                 #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    October 31, 2013                                                         #
                                      ;#      - Replaced STRING_LENGTH by STRING_SKIP_AND_COUNT                      #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Added #ifdef's for rarely used functions STRING_FILL_BL,             #
                                      ;#        STRING_FILL_NB, STRING_SKIP_WS, and STRING_LOWER                     #
                                      ;#    March 3, 2014                                                            #
                                      ;#      - Added macro STRING_IS_PRINTABLE                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
00220E 0FA20E -> $0001                STRING_BLOCKING_ON      EQU     1       ;blocking functions enabled by default
                                      ;Enable rarely used subroutines
                                      ;STRING_FILL_BL and STRING_FILL_NB
                                      ;STRING_SKIP_WS
00220E 0FA20E -> $0001                STRING_SKIP_WS_OFF      EQU     1       ;STRING_SKIP_WS disabled by default
                                      ;STRING_LOWER
00220E 0FA20E -> $0001                STRING_LOWER_OFF        EQU     1       ;STRING_LOWER disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
00220E 0FA20E -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
00220E 0FA20E -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
00220E 0FA20E -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
00220E 0FA20E -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
00220E 0FA20E -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
00220E 0FA20E -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
00220E 0FA20E -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
00220E 0FA20E -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
00220E 0FA20E -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CE1 0F9CE1                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
001CE1 0F9CE1 -> $1CE1                STRING_VARS_END         EQU     *
001CE1 0F9CE1 -> $F9CE1               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018E7 0F98E7                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
0018E7 0F98E7 -> $18E7                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
0018E7 0F98E7 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
0018E8 0F98E8 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
0018EA 0F98EA 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
0018EC 0F98EC 16 15 9C                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0018EF 0F98EF 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
0018F1 0F98F1 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
0018F3 0F98F3 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0018F3 0F98F3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F3 0F98F3 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F6 0F98F6 18 25 FC 71                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018FA 0F98FA 8F 1C AE                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018FD 0F98FD 18 22 FC 70                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001901 0F9901 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001901 0F9901 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001901 0F9901 33                                              PULB
                                                              ;Signal failure (string pointer in X)
001902 0F9902 10 FE                                           CLC
                                                              ;Done
001904 0F9904 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
001905 0F9905 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
001907 0F9907 16 15 9C                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00190A 0F990A 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
00190C 0F990C MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00190C 0F990C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00190C 0F990C 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00190F 0F990F 18 25 FC 58                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001913 0F9913 8F 1C AE                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001916 0F9916 18 22 FC 57                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00191A 0F991A -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00191A 0F991A -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00191A 0F991A 33                                              PULB
                                                              ;Signal success (next string pointer in X)
00191B 0F991B 14 01                                           SEC
                                                              ;Done
00191D 0F991D 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
00191E 0F991E -> $191E                STRING_PRINT_BL         EQU     *
00191E 0F991E MACRO                                           SCI_MAKE_BL     STRING_PRINT_NB, 10
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00191E 0F991E 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001920 0F9920                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001920 0F9920 07 C5                                           JOBSR   \1                                               (SCI_MAKE_BL)
001922 0F9922 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001924 0F9924 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001926 0F9926 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001926 0F9926 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001926 0F9926 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001929 0F9929 18 25 FC 3E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00192D 0F992D 8F 1C AF                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001930 0F9930 18 22 FC 3D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001934 0F9934 -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001934 0F9934 -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001934 0F9934 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001935 0F9935 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001935 0F9935 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001938 0F9938 18 25 FC 3B                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00193C 0F993C 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00193F 0F993F 18 22 FC 3A                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001943 0F9943 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001943 0F9943 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001948 0F9948 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00194D 0F994D 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00194F 0F994F 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001950 0F9950 -> $1577                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
001950 0F9950 -> $157D                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
001950 0F9950 -> $1950                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001950 0F9950 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001950 0F9950 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001950 0F9950 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001953 0F9953 18 25 FC 14                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001957 0F9957 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00195A 0F995A 18 22 FC 13                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00195E 0F995E -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00195E 0F995E -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00195E 0F995E 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Print a number of filler characters - non-blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
001960 0F9960 -> $1960                STRING_FILL_NB          EQU     *
                                                              ;Print characters (requested spaces in A)
001960 0F9960 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
001963 0F9963 16 15 9C                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
001966 0F9966 24 14                                           BCC     STRING_FILL_NB_3        ;unsuccessful
001968 0F9968 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
00196B 0F996B MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00196B 0F996B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00196B 0F996B 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00196E 0F996E 18 25 FB F9                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001972 0F9972 8F 1C AF                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001975 0F9975 18 22 FB F8                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001979 0F9979 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001979 0F9979 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                              ;Signal success (remaining spaces in A)
001979 0F9979 14 01                                           SEC
                                                              ;Done
00197B 0F997B 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
00197C 0F997C MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00197C 0F997C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00197C 0F997C 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00197F 0F997F 18 25 FB E8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001983 0F9983 8F 1C AF                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001986 0F9986 18 22 FB E7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00198A 0F998A -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00198A 0F998A -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                              ;Signal failure (remaining spaces in A)
00198A 0F998A 10 FE                                           CLC
                                                              ;Done
00198C 0F998C 3D                                              RTS
                                      ;#Print a number of filler characters - blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
00198D 0F998D -> $198D                STRING_FILL_BL          EQU     *
00198D 0F998D MACRO                                           SCI_MAKE_BL     STRING_FILL_NB, 7
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00198D 0F998D 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00198F 0F998F                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00198F 0F998F 07 CF                                           JOBSR   \1                                               (SCI_MAKE_BL)
001991 0F9991 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001993 0F9993 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001995 0F9995 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001995 0F9995 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001995 0F9995 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001998 0F9998 18 25 FB CF                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00199C 0F999C 8F 1C AF                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00199F 0F999F 18 22 FB CE                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A3 0F99A3 -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A3 0F99A3 -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A3 0F99A3 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0019A4 0F99A4 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0019A4 0F99A4 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0019A7 0F99A7 18 25 FB CC                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0019AB 0F99AB 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0019AE 0F99AE 18 22 FB CB                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0019B2 0F99B2 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0019B2 0F99B2 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0019B7 0F99B7 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0019BC 0F99BC 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0019BE 0F99BE 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0019BF 0F99BF -> $1577                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0019BF 0F99BF -> $157D                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0019BF 0F99BF -> $19BF                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0019BF 0F99BF MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0019BF 0F99BF MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019BF 0F99BF 8F 1C 9D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019C2 0F99C2 18 25 FB A5                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019C6 0F99C6 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019C9 0F99C9 18 22 FB A4                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019CD 0F99CD -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019CD 0F99CD -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019CD 0F99CD 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Convert a lower case character to upper case
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: lower case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
0019CF 0F99CF -> $19CF                STRING_UPPER            EQU     *
0019CF 0F99CF C1 61                                           CMPB    #$61            ;"a"
0019D1 0F99D1 25 1C                                           BLO     STRING_UPPER_2
0019D3 0F99D3 C1 7A                                           CMPB    #$7A            ;"z"
0019D5 0F99D5 23 08                                           BLS     STRING_UPPER_1
0019D7 0F99D7 C1 EA                                           CMPB    #$EA            ;"a"+$80
0019D9 0F99D9 25 14                                           BLO     STRING_UPPER_2
0019DB 0F99DB C1 FA                                           CMPB    #$FA            ;"z"+$80
0019DD 0F99DD 22 10                                           BHI     STRING_UPPER_2
0019DF 0F99DF C0 20                   STRING_UPPER_1          SUBB    #$20            ;"a"-"A"
                                                              ;Done
0019E1 0F99E1 MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0019E1 0F99E1 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019E1 0F99E1 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019E4 0F99E4 18 25 FB 83                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019E8 0F99E8 8F 1C AF                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019EB 0F99EB 18 22 FB 82                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019EF 0F99EF -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019EF 0F99EF -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019EF 0F99EF 3D                      STRING_UPPER_2          RTS
                                      ;#Convert an upper case character to lower case (uncomment if needed)
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: upper case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
0019F0 0F99F0 -> $19F0                STRING_PRINTABLE        EQU     *
0019F0 0F99F0 C1 20                                           CMPB    #$20            ;" "
0019F2 0F99F2 25 04                                           BLO     STRING_PRINTABLE_1
0019F4 0F99F4 C1 7E                                           CMPB    #$7E            ;"~"
0019F6 0F99F6 23 10                                           BLS     STRING_PRINTABLE_2
0019F8 0F99F8 C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
0019FA 0F99FA MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0019FA 0F99FA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019FA 0F99FA 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019FD 0F99FD 18 25 FB 6A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A01 0F9A01 8F 1C AF                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A04 0F9A04 18 22 FB 69                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A08 0F9A08 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A08 0F9A08 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A08 0F9A08 3D                      STRING_PRINTABLE_2      RTS
                                      ;#Skip whitespace (uncomment if needed)
                                      ; args:   X: start of the string
                                      ; result: X: trimmed string
                                      ; SSTACK: 3 bytes
                                      ;         Y and D are preserved
001A09 0F9A09 -> $1A09                STRING_CODE_END         EQU     *
001A09 0F9A09 -> $F9A09               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00220E 0FA20E                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
00220E 0FA20E 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
00220F 0FA20F MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00220F 0FA20F 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002210 0FA210 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
002211 0FA211 -> $2211                STRING_TABS_END         EQU     *
002211 0FA211 -> $FA211               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;#    June 20, 2013                                                            #
                                      ;#      - Added macros "RESET_RESTART" and "RESET_RESTART_NO_MSG"              #
                                      ;#    January 15, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;###############################################################################
                                      ;# Error Detection:                                                            #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# |                         |       | P L I |         |                     | #
                                      ;# |                         |       | O V L |         |                     | #
                                      ;# |                         | Reset | R R A | Message |                     | #
                                      ;# | Cause                   | Vector| F F F | Pointer | Display             | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Power-On Reset          | $FFFE | 1 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | External Pin Reset      | $FFFE | 0 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Low Voltage Reset       | $FFFE | - 1 - |    -    | Error (Low voltage) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Illegal Address Reset   | $FFFE |  -0 1 |    -    | Error (Code fail)   | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Clock Monitor Reset     | $FFFC | - - - | CLK Msg | Error (Clock fail)  | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | COP Reset               | $FFFA | - - - | COP Msg | Error (Inresponsive)| #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Fatal Application Error | $FFFA | - - - |  Valid  | Error (Application) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Replace system resets by BGND instructions
                                      ;RESET_DEBUG            EQU     1
                                      ;Monitor low voltage reset
002211 0FA211 -> $0001                RESET_LVR_CHECK_ON      EQU     1               ;enable LVR check if LVRF flag exists
                                      ;Monitor illegal address reset
002211 0FA211 -> $0001                RESET_IAR_CHECK_ON      EQU     1               ;enable IAR check if ILAF flag exists
                                      ;Maximum error message length
002211 0FA211 -> $0040                RESET_MSG_LENGTH        EQU     64
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CE1 0F9CE1                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
                                                              ;ALIGN  1
001CE1 0F9CE1                         RESET_MSG_REQ           DS      2               ;requested error message
001CE3 0F9CE3                         RESET_MSG_PTR           DS      2               ;validated error message
001CE5 0F9CE5 -> $1CE5                RESET_VARS_END          EQU     *
001CE5 0F9CE5 -> $F9CE5               RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001A09 0F9A09                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#Reset entry points
                                      ;--------------------
                                      ;Power-on and external reset
001A09 0F9A09 -> $1A09                RESET_EXT_ENTRY         EQU     *
001A09 0F9A09 18 03 22 11 1C E1                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001A0F 0F9A0F 18 03 00 00 1C E3                               MOVW    #$0000, RESET_MSG_PTR                   ;check reset flags
001A15 0F9A15 06 10 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset
001A18 0F9A18 18 03 22 11 1C E1       RESET_CM_ENTRY          MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001A1E 0F9A1E 18 0B 26 1C E3                                  MOVB    #RESET_MSG_CLKFAIL, RESET_MSG_PTR       ;set clock failure message
001A23 0F9A23 06 10 00                                        JOB     START_OF_CODE
                                      ;COP and user reset
001A26 0F9A26 -> $1000                RESET_COP_ENTRY         EQU     START_OF_CODE
001A26 0F9A26 18 0B E1 1C E3                                  MOVB    #RESET_MSG_REQ, RESET_MSG_PTR           ;preserve error message
001A2B 0F9A2B 18 03 22 11 1C E1                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001A31 0F9A31 06 10 00                                        JOB     START_OF_CODE
                                      ;#Reset trigger
                                      ;--------------
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
                                      ;          System is reset and initialized
001A34 0F9A34 -> $1A34                RESET_FATAL_X           EQU     *
001A34 0F9A34 7E 1C E1                                        STX     RESET_MSG_REQ
                                                              ;Trigger COP
001A37 0F9A37 MACRO                   RESET_FATAL_X_1         COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
001A37 0F9A37 06 10 00                                        JOB     RESET_COP_ENTRY                                  (COP_RESET)
001A3A 0F9A3A -> $1A3A                RESET_CODE_END          EQU     *
001A3A 0F9A3A -> $F9A3A               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002211 0FA211                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Error messages
002211 0FA211 MACRO                   RESET_MSG_COP           RESET_MSG       "System inresponsive"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002211 0FA211 53 79 73 74 65 6D 20 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 72 65 73 70 6F 6E 73 
              69 76 E5                
002224 0FA224 F6 4A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002226 0FA226 MACRO                   RESET_MSG_CLKFAIL       RESET_MSG       "Clock failure"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002226 0FA226 43 6C 6F 63 6B 20 66 61 RESET_MSG               FCS     \1                                               (RESET_MSG)
              69 6C 75 72 E5          
002233 0FA233 D2 74                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002235 0FA235 MACRO                   RESET_MSG_POWFAIL       RESET_MSG       "Power loss"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002235 0FA235 50 6F 77 65 72 20 6C 6F RESET_MSG               FCS     \1                                               (RESET_MSG)
              73 F3                   
00223F 0FA23F A4 6E                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002241 0FA241 MACRO                   RESET_MSG_ILLADDR       RESET_MSG       "Code runaway"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002241 0FA241 43 6F 64 65 20 72 75 6E RESET_MSG               FCS     \1                                               (RESET_MSG)
              61 77 61 F9             
00224D 0FA24D 04 22                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00224F 0FA24F MACRO                   RESET_MSG_UNKNOWN       RESET_MSG       "Unknown cause"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00224F 0FA24F 55 6E 6B 6E 6F 77 6E 20 RESET_MSG               FCS     \1                                               (RESET_MSG)
              63 61 75 73 E5          
00225C 0FA25C 5C A1                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00225E 0FA25E -> $225E                RESET_TABS_END          EQU     *
00225E 0FA25E -> $FA25E               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Maximum number conversion radix
                                      ;-------------------------------
                                      ;Enable blocking subroutines
00225E 0FA25E -> $0001                NUM_MAX_BASE_16         EQU     1                               ;default is 16
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
00225E 0FA25E -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
00225E 0FA25E -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
00225E 0FA25E -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CE5 0F9CE5                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
001CE5 0F9CE5 -> $1CE5                NUM_VARS_END            EQU     *
001CE5 0F9CE5 -> $F9CE5               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001A3A 0F9A3A                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
001A3A 0F9A3A -> $1A3A                NUM_REVERSE             EQU     *
                                      ;Stack layout:
001A3A 0F9A3A -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
001A3A 0F9A3A -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
001A3A 0F9A3A -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
001A3A 0F9A3A -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
001A3A 0F9A3A -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
001A3A 0F9A3A -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
001A3A 0F9A3A -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
001A3A 0F9A3A -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
001A3A 0F9A3A -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
001A3A 0F9A3A -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
001A3A 0F9A3A 87                                              CLRA
001A3B 0F9A3B 18 02 80 AA                                     MOVW    0,SP, 6,-SP             ;move return address to SP+10
001A3F 0F9A3F 6C 86                                           STD     6,SP                    ;initialize reverse number
001A41 0F9A41 18 00 84 00 00                                  MOVW    #$0000, 4,SP            ;reverse number = base
001A46 0F9A46 18 00 82 00 00                                  MOVW    #$0000, 2,SP
001A4B 0F9A4B 34                                              PSHX                            ;store X at SP+8
001A4C 0F9A4C 35                                              PSHY                            ;store Y at SP+6
001A4D 0F9A4D 3B                                              PSHD                            ;store count:base at SP+4
001A4E 0F9A4E 34                                              PSHX                            ;store double value at SP+0
001A4F 0F9A4F 35                                              PSHY
                                                              ;Divide FHW by base
001A50 0F9A50 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
001A52 0F9A52 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
001A54 0F9A54 87                                              CLRA                            ;base => D
001A55 0F9A55 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A57 0F9A57 B7 D4                                           EXG     X, D
001A59 0F9A59 18 10                                           IDIV                            ;D / X => X,  D % X => D
001A5B 0F9A5B 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
001A5D 0F9A5D B7 45                                           TFR     D, X                    ;remainder => X
001A5F 0F9A5F 87                      NUM_REVERSE_2           CLRA                            ;base => D
001A60 0F9A60 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A62 0F9A62 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
001A64 0F9A64 B7 D6                                           EXG     X, Y
001A66 0F9A66 B7 D4                                           EXG     X, D
001A68 0F9A68 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001A69 0F9A69 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
001A6B 0F9A6B E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
001A6E 0F9A6E 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
001A71 0F9A71 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
001A73 0F9A73 C9 00                                           ADCB    #$00
001A75 0F9A75 89 00                                           ADCA    #$00
001A77 0F9A77 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001A79 0F9A79 EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
001A7B 0F9A7B C9 00                                           ADCB    #$00
001A7D 0F9A7D 89 00                                           ADCA    #$00
001A7F 0F9A7F 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
001A81 0F9A81 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
001A83 0F9A83 EC 82                                           LDD     NUM_REVERSE_FLW,SP
001A85 0F9A85 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
001A87 0F9A87 EC 80                                           LDD     NUM_REVERSE_FHW,SP
001A89 0F9A89 27 2C                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
001A8B 0F9A8B ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
001A8E 0F9A8E 87                                              CLRA
001A8F 0F9A8F E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A91 0F9A91 13                                              EMUL                            ;Y * D => Y:D
001A92 0F9A92 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
001A95 0F9A95 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
001A97 0F9A97 B7 C6                                           EXG     D, Y
001A99 0F9A99 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001A9B 0F9A9B 87                                              CLRA
001A9C 0F9A9C E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001A9E 0F9A9E 13                                              EMUL                            ;Y * D => Y:D
001A9F 0F9A9F E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
001AA1 0F9AA1 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001AA3 0F9AA3 B7 64                                           TFR     Y, D
001AA5 0F9AA5 C9 00                                           ADCB    #$00
001AA7 0F9AA7 89 00                                           ADCA    #$00
                                                              ;Multiply RHW by base (carry-over in D)
001AA9 0F9AA9 ED 8C                                           LDY     NUM_REVERSE_RHW,SP
001AAB 0F9AAB 6C 8C                                           STD     NUM_REVERSE_RHW,SP
001AAD 0F9AAD 87                                              CLRA
001AAE 0F9AAE E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001AB0 0F9AB0 13                                              EMUL                            ;Y * D => Y:D
001AB1 0F9AB1 E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
001AB3 0F9AB3 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
001AB5 0F9AB5 20 99                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
001AB7 0F9AB7 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001AB7 0F9AB7 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AB7 0F9AB7 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ABA 0F9ABA 18 25 FA AD                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ABE 0F9ABE 8F 1C 9F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC1 0F9AC1 18 22 FA AC                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC5 0F9AC5 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC5 0F9AC5 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC5 0F9AC5 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
001AC7 0F9AC7 3A                                              PULD                            ;
001AC8 0F9AC8 31                                              PULY
001AC9 0F9AC9 30                                              PULX
                                                              ;Done
001ACA 0F9ACA 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
001ACB 0F9ACB -> $1ACB                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
001ACB 0F9ACB -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
001ACB 0F9ACB -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
001ACB 0F9ACB -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
001ACB 0F9ACB -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
001ACB 0F9ACB -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
001ACB 0F9ACB -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
001ACB 0F9ACB -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
001ACB 0F9ACB -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
001ACB 0F9ACB 34                                              PSHX                                    ;store X at SP+8
001ACC 0F9ACC 35                                              PSHY                                    ;store Y at SP+6
001ACD 0F9ACD 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
001ACE 0F9ACE MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
001ACE 0F9ACE MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
001ACE 0F9ACE MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001ACE 0F9ACE MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001ACE 0F9ACE 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001AD1 0F9AD1 18 25 FA 96                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001AD5 0F9AD5 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001AD8 0F9AD8 18 22 FA 95                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001ADC 0F9ADC -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001ADC 0F9ADC -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001ADC 0F9ADC 16 16 0C                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
001ADF 0F9ADF 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
001AE3 0F9AE3 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
001AE5 0F9AE5 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
001AE7 0F9AE7 B7 65                                           TFR     Y, X
001AE9 0F9AE9 87                                              CLRA                            ;base => D
001AEA 0F9AEA E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001AEC 0F9AEC B7 D4                                           EXG     X, D
001AEE 0F9AEE 18 10                                           IDIV                            ;D / X => X,  D % X => D
001AF0 0F9AF0 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
001AF2 0F9AF2 B7 46                                           TFR     D, Y                    ;remainder => Y
001AF4 0F9AF4 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
001AF5 0F9AF5 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001AF7 0F9AF7 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
001AF9 0F9AF9 B7 C5                                           EXG     D, X
001AFB 0F9AFB 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001AFC 0F9AFC 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
001AFE 0F9AFE B7 46                                           TFR     D, Y                    ;remainder => Y
001B00 0F9B00 EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
001B02 0F9B02 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001B03 0F9B03 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
001B05 0F9B05 CE 22 5E                                        LdX     #NUM_SYMTAB
001B08 0F9B08 E6 E5                                           LDAB    B,X
001B0A 0F9B0A 16 15 9C                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
001B0D 0F9B0D 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
001B10 0F9B10 EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
001B12 0F9B12 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
001B14 0F9B14 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
001B16 0F9B16 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
001B18 0F9B18 MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001B18 0F9B18 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B18 0F9B18 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B1B 0F9B1B 18 25 FA 4C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B1F 0F9B1F 8F 1C A3                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B22 0F9B22 18 22 FA 4B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B26 0F9B26 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B26 0F9B26 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B26 0F9B26 14 01                                           SEC
001B28 0F9B28 3A                      NUM_REVPRINT_NB_3       PULD
001B29 0F9B29 31                                              PULY
001B2A 0F9B2A 30                                              PULX
                                                              ;Done
001B2B 0F9B2B 3D                                              RTS
                                                              ;Printing incomplete
001B2C 0F9B2C MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001B2C 0F9B2C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B2C 0F9B2C 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B2F 0F9B2F 18 25 FA 38                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B33 0F9B33 8F 1C A3                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B36 0F9B36 18 22 FA 37                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B3A 0F9B3A -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B3A 0F9B3A -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B3A 0F9B3A 10 FE                                           CLC
001B3C 0F9B3C 20 EA                                           JOB     NUM_REVPRINT_NB_3
001B3E 0F9B3E -> $1B3E                NUM_CODE_END            EQU     *
001B3E 0F9B3E -> $F9B3E               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00225E 0FA25E                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
00225E 0FA25E 30                      NUM_SYMTAB              DB      "0"     ; 0
00225F 0FA25F 31                                              DB      "1"     ; 1
002260 0FA260 32                                              DB      "2"     ; 2
002261 0FA261 33                                              DB      "3"     ; 3
002262 0FA262 34                                              DB      "4"     ; 4
002263 0FA263 35                                              DB      "5"     ; 5
002264 0FA264 36                                              DB      "6"     ; 6
002265 0FA265 37                                              DB      "7"     ; 7
002266 0FA266 38                                              DB      "8"     ; 8
002267 0FA267 39                                              DB      "9"     ; 9
002268 0FA268 41                                              DB      "A"     ;10
002269 0FA269 42                                              DB      "B"     ;11
00226A 0FA26A 43                                              DB      "C"     ;12
00226B 0FA26B 44                                              DB      "D"     ;13
00226C 0FA26C 45                                              DB      "E"     ;14
00226D 0FA26D 46                                              DB      "F"     ;15
00226E 0FA26E 6E                      NUM_SYMTAB_END  DB      *
00226F 0FA26F -> $226F                NUM_TABS_END            EQU     *
00226F 0FA26F -> $FA26F               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - NVM Driver (Mini-BDM-Pod)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2013 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module contains NVM write and erase functions.                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    May 27, 2013                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Fixed NVM_PHRASE_SIZE                                                #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Prescaler value
00226F 0FA26F -> $0009                NVM_FDIV_VAL            EQU     (CLOCK_OSC_FREQ/1000000)-1
                                      ;Fixed page protection
                                      ;---------------------
00226F 0FA26F -> $0001                NVM_FIXED_PAGE_PROT_ON  EQU     1       ;default is NVM_FIXED_PAGE_PROT_ON
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Program/erase sizes
                                      ;--------------------
00226F 0FA26F -> $0008                NVM_PHRASE_SIZE         EQU     8
00226F 0FA26F -> $0400                NVM_SECTOR_SIZE         EQU     1024
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CE5 0F9CE5                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
001CE5 0F9CE5 -> $1CE5                NVM_VARS_END            EQU     *
001CE5 0F9CE5 -> $F9CE5               NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001B3E 0F9B3E                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
                                      ;#Program phrase
                                      ; args:   X:      target address within paging window
                                      ;         PPAGE:  current page
                                      ;         Y:      data pointer
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 18 bytes
                                      ;         X, Y, and D are preserved
001B3E 0F9B3E -> $1B3E                NVM_PROGRAM_PHRASE      EQU     *
                                                              ;Protect fixed pages
001B3E 0F9B3E MACRO                                           NVM_CHECK_FIXED_PAGE_PROT  NVM_PROGRAM_PHRASE_1
                                                              ;Save registers (paged address in X, data pointer in Y)
001B3E 0F9B3E 36                                              PSHA                                    ;push A onto the SSTACK
                                                              ;Set CCOB  (paged address in X, data pointer in Y)
001B3F 0F9B3F 86 06                                           LDAA    #$06                            ;program P-flash
001B41 0F9B41 MACRO                                           NVM_SET_CMD
                                      ;#Check fixed page protection                                                    (NVM_SET_CMD)
                                      ; args:   1:      escape address (in case of violation)                          (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ; result: none                                                                   (NVM_SET_CMD)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
                                      ;#Set command and address                                                        (NVM_SET_CMD)
                                      ; args:   X:      target address within paging window                            (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ;         A:      command                                                        (NVM_SET_CMD)
                                      ; result: CCOBIX: $01                                                            (NVM_SET_CMD)
                                      ;         C-flag: set if successful                                              (NVM_SET_CMD)
                                      ; SSTACK: 4 bytes                                                                (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
001B41 0F9B41 MACRO                                           SSTACK_JOBSR    NVM_SET_CMD, 4                           (NVM_SET_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_CMD/SSTACK_JOBSR)
001B41 0F9B41 MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001B41 0F9B41 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B41 0F9B41 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B44 0F9B44 18 25 FA 23                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B48 0F9B48 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B4B 0F9B4B 18 22 FA 22                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B4F 0F9B4F -> $1571                UF                      EQU     SSTACK_UF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B4F 0F9B4F -> $156B                OF                      EQU     SSTACK_OF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B4F 0F9B4F 16 1C 1C                                        JOBSR   \1                                               (NVM_SET_CMD/SSTACK_JOBSR)
001B52 0F9B52 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$002
001B55 0F9B55 18 05 40 01 0A                                  MOVW    0,Y, FCCOBHI
001B5A 0F9B5A 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$003
001B5D 0F9B5D 18 05 42 01 0A                                  MOVW    2,Y, FCCOBHI
001B62 0F9B62 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$004
001B65 0F9B65 18 05 44 01 0A                                  MOVW    4,Y, FCCOBHI
001B6A 0F9B6A 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$005
001B6D 0F9B6D 18 05 46 01 0A                                  MOVW    6,Y, FCCOBHI
                                                              ;Execute command
001B72 0F9B72 MACRO                                           NVM_EXEC_CMD
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
001B72 0F9B72 MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
001B72 0F9B72 MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001B72 0F9B72 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B72 0F9B72 8F 1C A5                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B75 0F9B75 18 25 F9 F2                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B79 0F9B79 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B7C 0F9B7C 18 22 F9 F1                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B80 0F9B80 -> $1571                UF                      EQU     SSTACK_UF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B80 0F9B80 -> $156B                OF                      EQU     SSTACK_OF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B80 0F9B80 16 1C 4E                                        JOBSR   \1                                               (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Restore registers
001B83 0F9B83 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001B83 0F9B83 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B83 0F9B83 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B86 0F9B86 18 25 F9 E1                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B8A 0F9B8A 8F 1C AE                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B8D 0F9B8D 18 22 F9 E0                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B91 0F9B91 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B91 0F9B91 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B91 0F9B91 32                                              PULA                                    ;pull A from the SSTACK
                                                              ;Check result
001B92 0F9B92 14 01                                           SEC
001B94 0F9B94 1F 01 06 33 02                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_PROGRAM_PHRASE_2
001B99 0F9B99 10 FE                   NVM_PROGRAM_PHRASE_1    CLC
                                                              ;Done
001B9B 0F9B9B 3D                      NVM_PROGRAM_PHRASE_2    RTS
                                      ;#Erase sector
                                      ; args:   X:      sector address
                                      ;         PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 18 bytes
                                      ;         X, Y, and D are preserved
001B9C 0F9B9C -> $1B9C                NVM_ERASE_SECTOR        EQU     *
                                                              ;Protect fixed pages
001B9C 0F9B9C MACRO                                           NVM_CHECK_FIXED_PAGE_PROT  NVM_ERASE_SECTOR_1
                                                              ;Save registers (paged address in X)
001B9C 0F9B9C 36                                              PSHA                                    ;push A onto the SSTACK
                                                              ;Set CCOB  (paged address in X)
001B9D 0F9B9D 86 0A                                           LDAA    #$0A                            ;erase P-flash sector
001B9F 0F9B9F MACRO                                           NVM_SET_CMD
                                      ;#Check fixed page protection                                                    (NVM_SET_CMD)
                                      ; args:   1:      escape address (in case of violation)                          (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ; result: none                                                                   (NVM_SET_CMD)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
                                      ;#Set command and address                                                        (NVM_SET_CMD)
                                      ; args:   X:      target address within paging window                            (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ;         A:      command                                                        (NVM_SET_CMD)
                                      ; result: CCOBIX: $01                                                            (NVM_SET_CMD)
                                      ;         C-flag: set if successful                                              (NVM_SET_CMD)
                                      ; SSTACK: 4 bytes                                                                (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
001B9F 0F9B9F MACRO                                           SSTACK_JOBSR    NVM_SET_CMD, 4                           (NVM_SET_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_CMD/SSTACK_JOBSR)
001B9F 0F9B9F MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001B9F 0F9B9F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B9F 0F9B9F 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BA2 0F9BA2 18 25 F9 C5                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BA6 0F9BA6 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BA9 0F9BA9 18 22 F9 C4                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BAD 0F9BAD -> $1571                UF                      EQU     SSTACK_UF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BAD 0F9BAD -> $156B                OF                      EQU     SSTACK_OF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BAD 0F9BAD 07 6D                                           JOBSR   \1                                               (NVM_SET_CMD/SSTACK_JOBSR)
                                                              ;Execute command
001BAF 0F9BAF MACRO                                           NVM_EXEC_CMD
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
001BAF 0F9BAF MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
001BAF 0F9BAF MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001BAF 0F9BAF MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BAF 0F9BAF 8F 1C A5                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BB2 0F9BB2 18 25 F9 B5                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BB6 0F9BB6 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BB9 0F9BB9 18 22 F9 B4                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BBD 0F9BBD -> $1571                UF                      EQU     SSTACK_UF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BBD 0F9BBD -> $156B                OF                      EQU     SSTACK_OF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BBD 0F9BBD 16 1C 4E                                        JOBSR   \1                                               (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Restore registers
001BC0 0F9BC0 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001BC0 0F9BC0 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BC0 0F9BC0 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BC3 0F9BC3 18 25 F9 A4                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BC7 0F9BC7 8F 1C AE                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BCA 0F9BCA 18 22 F9 A3                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BCE 0F9BCE -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BCE 0F9BCE -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BCE 0F9BCE 32                                              PULA                                    ;pull A from the SSTACK
                                                              ;Check result
001BCF 0F9BCF 14 01                                           SEC
001BD1 0F9BD1 1F 01 06 33 02                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_ERASE_SECTOR_2
001BD6 0F9BD6 10 FE                   NVM_ERASE_SECTOR_1      CLC
                                                              ;Done
001BD8 0F9BD8 3D                      NVM_ERASE_SECTOR_2      RTS
                                      ;#Erase page
                                      ; args:   PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 22 bytes
                                      ;         X, Y, and D are preserved
001BD9 0F9BD9 -> $1BD9                NVM_ERASE_PAGE          EQU     *
                                                              ;Save registers (paged address in X, data pointer in Y)
001BD9 0F9BD9 34                                              PSHX                                    ;push X onto the SSTACK
                                                              ;Erase all 16 sdectors sector
001BDA 0F9BDA CE 80 00                                        LDX     #$8000
001BDD 0F9BDD MACRO                   NVM_ERASE_PAGE_1        NVM_ERASE_SECTOR
                                      ;#Erase sector                                                                   (NVM_ERASE_SECTOR)
                                      ; args:   X:      sector address                                                 (NVM_ERASE_SECTOR)
                                      ;         PPAGE:  current page                                                   (NVM_ERASE_SECTOR)
                                      ; result: C-flag: set if successful                                              (NVM_ERASE_SECTOR)
                                      ; SSTACK: 18 bytes                                                               (NVM_ERASE_SECTOR)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR)
001BDD 0F9BDD MACRO                                           SSTACK_JOBSR    NVM_ERASE_SECTOR, 18                     (NVM_ERASE_SECTOR)
                                      ;#Check stack and call subroutine                                                (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_ERASE_SECTOR/SSTACK_JOBSR)
001BDD 0F9BDD MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
001BDD 0F9BDD MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BDD 0F9BDD 8F 1C A8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BE0 0F9BE0 18 25 F9 87                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BE4 0F9BE4 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BE7 0F9BE7 18 22 F9 86                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BEB 0F9BEB -> $1571                UF                      EQU     SSTACK_UF                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BEB 0F9BEB -> $156B                OF                      EQU     SSTACK_OF                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001BEB 0F9BEB 07 AF                                           JOBSR   \1                                               (NVM_ERASE_SECTOR/SSTACK_JOBSR)
001BED 0F9BED 24 1B                                           BCC     NVM_ERASE_PAGE_2                        ;error occured
001BEF 0F9BEF 1A E2 04 00                                     LEAX    NVM_SECTOR_SIZE,X
001BF3 0F9BF3 BE C0 00                                        CPX     $C000
001BF6 0F9BF6 25 E5                                           BLO     NVM_ERASE_PAGE_1
                                                              ;Restore registers (page erased)
001BF8 0F9BF8 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001BF8 0F9BF8 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BF8 0F9BF8 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BFB 0F9BFB 18 25 F9 6C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001BFF 0F9BFF 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C02 0F9C02 18 22 F9 6B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C06 0F9C06 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C06 0F9C06 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C06 0F9C06 30                                              PULX                                    ;pull X from the SSTACK
                                                              ;Done
001C07 0F9C07 14 01                                           SEC
001C09 0F9C09 3D                                              RTS
                                                              ;Restore registers (error condition)
001C0A 0F9C0A MACRO                   NVM_ERASE_PAGE_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001C0A 0F9C0A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C0A 0F9C0A 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C0D 0F9C0D 18 25 F9 5A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C11 0F9C11 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C14 0F9C14 18 22 F9 59                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C18 0F9C18 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C18 0F9C18 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C18 0F9C18 30                                              PULX                                    ;pull X from the SSTACK
                                                              ;Done
001C19 0F9C19 10 FE                                           CLC
001C1B 0F9C1B 3D                                              RTS
                                      ;#Set command and address
                                      ; args:   X:      target address within paging window
                                      ;         PPAGE:  current page
                                      ;         A:      command
                                      ; result: CCOBIX: $01
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
001C1C 0F9C1C -> $1C1C                NVM_SET_CMD             EQU     *
                                                              ;Save registers (paged address in X, data pointer in Y)
001C1C 0F9C1C 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set command  (paged address in X, command in A)
001C1D 0F9C1D 79 01 02                                        CLR     FCCOBIX                         ;CCOBIX=$00
001C20 0F9C20 7A 01 0A                                        STAA    FCCOBHI                         ;set command
                                                              ;Set ADDR[23:16]  (paged address in X)
001C23 0F9C23 96 15                                           LDAA    PPAGE
001C25 0F9C25 C7                                              CLRB
001C26 0F9C26 44                                              LSRA
001C27 0F9C27 44                                              LSRA
001C28 0F9C28 8A 40                                           ORAA    #$40
001C2A 0F9C2A 7A 01 0B                                        STAA    FCCOBLO
                                                              ;Set ADDR[15:0]  (paged address in X, ADDR[15:14] in B)
001C2D 0F9C2D 18 0B 01 01 02                                  MOVB    #$01, FCCOBIX
001C32 0F9C32 7E 01 0A                                        STX     FCCOBHI                         ;set ADDR[13:0]
001C35 0F9C35 B6 01 0A                                        LDAA    FCCOBHI                         ;set ADDR[15:14]
001C38 0F9C38 84 3F                                           ANDA    #$3F
001C3A 0F9C3A 18 06                                           ABA
001C3C 0F9C3C 7A 01 0A                                        STAA    FCCOBHI
                                                              ;Done
001C3F 0F9C3F MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001C3F 0F9C3F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C3F 0F9C3F 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C42 0F9C42 18 25 F9 25                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C46 0F9C46 8F 1C AD                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C49 0F9C49 18 22 F9 24                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C4D 0F9C4D -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C4D 0F9C4D -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C4D 0F9C4D 3D                                              RTS
                                      ;#Execute NVM command from RAM
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 15 bytes
                                      ;         X, Y, and D are preserved
001C4E 0F9C4E -> $1C4E                NVM_EXEC_CMD            EQU     *
                                                              ;Push RAM code onto the stack
                                                              ;18 0B FF 01 07   MOVB  #$FF, FSTAT     ;clear CCIF
                                                              ;1F 01 07 80 FB   BRCLR FSTAT, #CCIF, * ;wait until CCIF is set
                                                              ;06 xx xx         JMP     $xxxx
001C4E 0F9C4E 18 00 AE 1C 74                                  MOVW    #NVM_EXEC_CMD_1, 2,-SP
001C53 0F9C53 18 00 AE FB 06                                  MOVW    #$FB06,          2,-SP
001C58 0F9C58 18 00 AE 07 08                                  MOVW    #$0708,          2,-SP
001C5D 0F9C5D 18 00 AE 1F 01                                  MOVW    #$1F01,          2,-SP
001C62 0F9C62 18 00 AE 01 07                                  MOVW    #$0107,          2,-SP
001C67 0F9C67 18 00 AE 0B FF                                  MOVW    #$0BFF,          2,-SP
001C6C 0F9C6C 18 08 AF 18                                     MOVB    #$18,            1,-SP
                                                              ;Invoke command
001C70 0F9C70 14 10                                           SEI
001C72 0F9C72 05 80                                           JMP     0,SP
001C74 0F9C74 10 EF                   NVM_EXEC_CMD_1          CLI
                                                              ;Done
001C76 0F9C76 MACRO                                           SSTACK_PREPULL  15
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001C76 0F9C76 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C76 0F9C76 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C79 0F9C79 18 25 F8 EE                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C7D 0F9C7D 8F 1C A2                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C80 0F9C80 18 22 F8 ED                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C84 0F9C84 -> $1571                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C84 0F9C84 -> $156B                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001C84 0F9C84 1B 93                                           LEAS    -13,SP
001C86 0F9C86 3D                                              RTS
                                      ;#ECC double fault
001C87 0F9C87 -> $1C87                NVM_ISR_ECCERR          EQU     *
001C87 0F9C87 MACRO                                           RESET_FATAL     NVM_STR_ECCERR
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001C87 0F9C87 CE 22 6F                                        LDX     #\1                                              (RESET_FATAL)
001C8A 0F9C8A 06 1A 34                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
001C8D 0F9C8D -> $1C8D                NVM_CODE_END            EQU     *
001C8D 0F9C8D -> $F9C8D               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00226F 0FA26F                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
00226F 0FA26F 45 43 43 20 65 72 72 6F NVM_STR_ECCERR          FCS     "ECC error"
              F2                      
002278 0FA278 -> $2278                NVM_TABS_END            EQU     *
002278 0FA278 -> $FA278               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (Mini-BDM-Pod)                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Error handler                                                   #
                                      ;#    BDM    - BDM driver                                                      #
                                      ;#    CLOCK  - Clock handler                                                   #
                                      ;#    SCI    - UART driver                                                     #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added dummy vectors                                                  #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Restructured table                                                   #
                                      ;#    June 12, 2013                                                            #
                                      ;#      - Added ECC error interrupt                                            #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001CE5 0F9CE5                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001CE5 0F9CE5 -> $1CE5                VECTAB_VARS_END         EQU     *
001CE5 0F9CE5 -> $F9CE5               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
001C8D 0F9C8D -> $1C8D                VECTAB_CODE_END         EQU     *
001C8D 0F9C8D -> $F9C8D               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002278 0FA278                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
002278 0FA278 00                      ISR_SPURIOUS            BGND                            ;vector base + $10
002279 0FA279 00                      ISR_SYS                 BGND                            ;vector base + $12
00227A 0FA27A 00                      ISR_MPU                 BGND                            ;vector base + $14
00227B 0FA27B 00                      ISR_XGSWE               BGND                            ;vector base + $16
00227C 0FA27C 00                      ISR_RES18               BGND                            ;vector base + $18
00227D 0FA27D 00                      ISR_RES1A               BGND                            ;vector base + $1A
00227E 0FA27E 00                      ISR_RES1C               BGND                            ;vector base + $1C
00227F 0FA27F 00                      ISR_RES1E               BGND                            ;vector base + $1E
002280 0FA280 00                      ISR_RES20               BGND                            ;vector base + $20
002281 0FA281 00                      ISR_RES22               BGND                            ;vector base + $22
002282 0FA282 00                      ISR_RES24               BGND                            ;vector base + $24
002283 0FA283 00                      ISR_RES26               BGND                            ;vector base + $26
002284 0FA284 00                      ISR_RES28               BGND                            ;vector base + $28
002285 0FA285 00                      ISR_RES2A               BGND                            ;vector base + $2A
002286 0FA286 00                      ISR_RES2C               BGND                            ;vector base + $2C
002287 0FA287 00                      ISR_RES2E               BGND                            ;vector base + $2E
002288 0FA288 00                      ISR_RES30               BGND                            ;vector base + $30
002289 0FA289 00                      ISR_RES32               BGND                            ;vector base + $32
00228A 0FA28A 00                      ISR_RES34               BGND                            ;vector base + $34
00228B 0FA28B 00                      ISR_RES36               BGND                            ;vector base + $36
00228C 0FA28C 00                      ISR_RES38               BGND                            ;vector base + $38
00228D 0FA28D 00                      ISR_RES3A               BGND                            ;vector base + $3A
00228E 0FA28E 00                      ISR_ATD1COMP            BGND                            ;vector base + $3C
00228F 0FA28F -> $189E                ISR_ATD0COMP            EQU     TVMON_ISR
00228F 0FA28F 00                      ISR_TIM_PAIE            BGND                            ;vector base + $40
002290 0FA290 00                      ISR_TIM_PAOV            BGND                            ;vector base + $42
002291 0FA291 00                      ISR_TIM_TOV             BGND                            ;vector base + $44
002292 0FA292 00                      ISR_TIM_TC7             BGND                            ;vector base + $46
002293 0FA293 00                      ISR_TIM_TC6             BGND                            ;vector base + $48
002294 0FA294 00                      ISR_TIM_TC5             BGND                            ;vector base + $4A
002295 0FA295 00                      ISR_TIM_TC4             BGND                            ;vector base + $4C
002296 0FA296 00                      ISR_TIM_TC3             BGND                            ;vector base + $4E
002297 0FA297 00                      ISR_TIM_TC2             BGND                            ;vector base + $50
002298 0FA298 00                      ISR_TIM_TC1             BGND                            ;vector base + $52
002299 0FA299 00                      ISR_TIM_TC0             BGND                            ;vector base + $54
00229A 0FA29A 00                      ISR_SCI7                BGND                            ;vector base + $56
00229B 0FA29B 00                      ISR_PITCH7              BGND                            ;vector base + $58
00229C 0FA29C 00                      ISR_PITCH6              BGND                            ;vector base + $5A
00229D 0FA29D 00                      ISR_PITCH5              BGND                            ;vector base + $5C
00229E 0FA29E 00                      ISR_PITCH4              BGND                            ;vector base + $5E
00229F 0FA29F 00                      ISR_RES60               BGND                            ;vector base + $60
0022A0 0FA2A0 00                      ISR_RES62               BGND                            ;vector base + $62
0022A1 0FA2A1 00                      ISR_XGSWT7              BGND                            ;vector base + $64
0022A2 0FA2A2 00                      ISR_XGSWT6              BGND                            ;vector base + $66
0022A3 0FA2A3 00                      ISR_XGSWT5              BGND                            ;vector base + $68
0022A4 0FA2A4 00                      ISR_XGSWT4              BGND                            ;vector base + $6A
0022A5 0FA2A5 00                      ISR_XGSWT3              BGND                            ;vector base + $6C
0022A6 0FA2A6 00                      ISR_XGSWT2              BGND                            ;vector base + $6E
0022A7 0FA2A7 00                      ISR_XGSWT1              BGND                            ;vector base + $70
0022A8 0FA2A8 00                      ISR_XGSWT0              BGND                            ;vector base + $72
0022A9 0FA2A9 00                      ISR_PITCH3              BGND                            ;vector base + $74
0022AA 0FA2AA 00                      ISR_PITCH2              BGND                            ;vector base + $76
0022AB 0FA2AB 00                      ISR_PITCH1              BGND                            ;vector base + $78
0022AC 0FA2AC 00                      ISR_PITCH0              BGND                            ;vector base + $7A
0022AD 0FA2AD 00                      ISR_HT                  BGND                            ;vector base + $7C
0022AE 0FA2AE 00                      ISR_API                 BGND                            ;vector base + $7E
0022AF 0FA2AF 00                      ISR_LVI                 BGND                            ;vector base + $80
0022B0 0FA2B0 00                      ISR_IIC1                BGND                            ;vector base + $82
0022B1 0FA2B1 00                      ISR_SCI5                BGND                            ;vector base + $84
0022B2 0FA2B2 00                      ISR_SCI4                BGND                            ;vector base + $86
0022B3 0FA2B3 00                      ISR_SCI3                BGND                            ;vector base + $88
0022B4 0FA2B4 00                      ISR_SCI2                BGND                            ;vector base + $8A
0022B5 0FA2B5 00                      ISR_PWMSDN              BGND                            ;vector base + $8C
0022B6 0FA2B6 00                      ISR_PORTP               BGND                            ;vector base + $8E
0022B7 0FA2B7 00                      ISR_CAN4TX              BGND                            ;vector base + $90
0022B8 0FA2B8 00                      ISR_CAN4RX              BGND                            ;vector base + $92
0022B9 0FA2B9 00                      ISR_CAN4ERR             BGND                            ;vector base + $94
0022BA 0FA2BA 00                      ISR_CAN4WUP             BGND                            ;vector base + $96
0022BB 0FA2BB 00                      ISR_CAN3TX              BGND                            ;vector base + $98
0022BC 0FA2BC 00                      ISR_CAN3RX              BGND                            ;vector base + $9A
0022BD 0FA2BD 00                      ISR_CAN3ERR             BGND                            ;vector base + $9C
0022BE 0FA2BE 00                      ISR_CAN3WUP             BGND                            ;vector base + $9E
0022BF 0FA2BF 00                      ISR_CAN2TX              BGND                            ;vector base + $A0
0022C0 0FA2C0 00                      ISR_CAN2RX              BGND                            ;vector base + $A2
0022C1 0FA2C1 00                      ISR_CAN2ERR             BGND                            ;vector base + $A4
0022C2 0FA2C2 00                      ISR_CAN2WUP             BGND                            ;vector base + $A6
0022C3 0FA2C3 00                      ISR_CAN1TX              BGND                            ;vector base + $A8
0022C4 0FA2C4 00                      ISR_CAN1RX              BGND                            ;vector base + $AA
0022C5 0FA2C5 00                      ISR_CAN1ERR             BGND                            ;vector base + $AC
0022C6 0FA2C6 00                      ISR_CAN1WUP             BGND                            ;vector base + $AE
0022C7 0FA2C7 00                      ISR_CAN0TX              BGND                            ;vector base + $A0
0022C8 0FA2C8 00                      ISR_CAN0RX              BGND                            ;vector base + $B2
0022C9 0FA2C9 00                      ISR_CAN0ERR             BGND                            ;vector base + $B4
0022CA 0FA2CA 00                      ISR_CAN0WUP             BGND                            ;vector base + $B6
0022CB 0FA2CB 00                      ISR_FLASH               BGND                            ;vector base + $B8
0022CC 0FA2CC -> $1C87                ISR_FLASHFLT            EQU     NVM_ISR_ECCERR
0022CC 0FA2CC 00                      ISR_SPI2                BGND                            ;vector base + $BC
0022CD 0FA2CD 00                      ISR_SPI1                BGND                            ;vector base + $BE
0022CE 0FA2CE 00                      ISR_IIC0                BGND                            ;vector base + $C0
0022CF 0FA2CF 00                      ISR_SCI6                BGND                            ;vector base + $C2
0022D0 0FA2D0 00                      ISR_SCM                 BGND                            ;vector base + $C4
0022D1 0FA2D1 -> $1583                ISR_PLLLOCK             EQU     CLOCK_ISR
0022D1 0FA2D1 00                      ISR_ECT_PBOV            BGND                            ;vector base + $C8
0022D2 0FA2D2 00                      ISR_ECT_MODCNT          BGND                            ;vector base + $CA
0022D3 0FA2D3 00                      ISR_PORTH               BGND                            ;vector base + $CC
0022D4 0FA2D4 00                      ISR_PORTJ               BGND                            ;vector base + $CC
0022D5 0FA2D5 00                      ISR_ATD1                BGND                            ;vector base + $D0
0022D6 0FA2D6 00                      ISR_ATD0                BGND                            ;vector base + $D2
0022D7 0FA2D7 00                      ISR_SCI1                BGND                            ;vector base + $D4
0022D8 0FA2D8 -> $1781                ISR_SCI0                EQU     SCI_ISR_RXTX
0022D8 0FA2D8 00                      ISR_SPI0                BGND                            ;vector base + $D8
0022D9 0FA2D9 00                      ISR_ECT_PAIE            BGND                            ;vector base + $DA
0022DA 0FA2DA 00                      ISR_ECT_PAOV            BGND                            ;vector base + $DC
0022DB 0FA2DB 00                      ISR_ECT_TOV             BGND                            ;vector base + $DE
0022DC 0FA2DC 00                      ISR_ECT_TC7             BGND                            ;vector base + $E0
0022DD 0FA2DD 00                      ISR_ECT_TC6             BGND                            ;vector base + $E2
0022DE 0FA2DE 00                      ISR_ECT_TC5             BGND                            ;vector base + $E4
0022DF 0FA2DF 00                      ISR_ECT_TC4             BGND                            ;vector base + $E6
0022E0 0FA2E0 -> $16DC                ISR_ECT_TC3             EQU     SCI_ISR_DELAY
0022E0 0FA2E0 00                      ISR_ECT_TC2             BGND                            ;vector base + $EA
0022E1 0FA2E1 00                      ISR_ECT_TC1             BGND                            ;vector base + $EC
0022E2 0FA2E2 00                      ISR_ECT_TC0             BGND
0022E3 0FA2E3 00                      ISR_RTI                 BGND                            ;vector base + $F0
0022E4 0FA2E4 00                      ISR_IRQ                 BGND                            ;vector base + $F2
0022E5 0FA2E5 00                      ISR_XIRQ                BGND                            ;vector base + $F4
0022E6 0FA2E6 00                      ISR_SWI                 BGND                            ;vector base + $F6
0022E7 0FA2E7 00                      ISR_TRAP                BGND                            ;vector base + $F8
                                      ;#Code entry points
                                      ;#-----------------
0022E8 0FA2E8 -> $1000                RES_COP                 EQU     RES_EXT
0022E8 0FA2E8 -> $1000                RES_CM                  EQU     RES_EXT
0022E8 0FA2E8 -> $1000                RES_EXT                 EQU     START_OF_CODE
0022E8 0FA2E8 -> $22E8                VECTAB_TABS_END         EQU     *
0022E8 0FA2E8 -> $FA2E8               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12XEP100 Vector Table                                                      #
                                      ;###############################################################################
007F10 0FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN
007F10 0FFF10 22 78                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $10
007F12 0FFF12 22 79                   VEC_SYS                 DW      ISR_SYS                 ;vector base + $12
007F14 0FFF14 22 7A                   VEC_MPU                 DW      ISR_MPU                 ;vector base + $14
007F16 0FFF16 22 7B                   VEC_XGSWE               DW      ISR_XGSWE               ;vector base + $16
007F18 0FFF18 22 7C                   VEC_RES18               DW      ISR_RES18               ;vector base + $18
007F1A 0FFF1A 22 7D                   VEC_RES1A               DW      ISR_RES1A               ;vector base + $1A
007F1C 0FFF1C 22 7E                   VEC_RES1C               DW      ISR_RES1C               ;vector base + $1C
007F1E 0FFF1E 22 7F                   VEC_RES1E               DW      ISR_RES1E               ;vector base + $1E
007F20 0FFF20 22 80                   VEC_RES20               DW      ISR_RES20               ;vector base + $20
007F22 0FFF22 22 81                   VEC_RES22               DW      ISR_RES22               ;vector base + $22
007F24 0FFF24 22 82                   VEC_RES24               DW      ISR_RES24               ;vector base + $24
007F26 0FFF26 22 83                   VEC_RES26               DW      ISR_RES26               ;vector base + $26
007F28 0FFF28 22 84                   VEC_RES28               DW      ISR_RES28               ;vector base + $28
007F2A 0FFF2A 22 85                   VEC_RES2A               DW      ISR_RES2A               ;vector base + $2A
007F2C 0FFF2C 22 86                   VEC_RES2C               DW      ISR_RES2C               ;vector base + $2C
007F2E 0FFF2E 22 87                   VEC_RES2E               DW      ISR_RES2E               ;vector base + $2E
007F30 0FFF30 22 88                   VEC_RES30               DW      ISR_RES30               ;vector base + $30
007F32 0FFF32 22 89                   VEC_RES32               DW      ISR_RES32               ;vector base + $32
007F34 0FFF34 22 8A                   VEC_RES34               DW      ISR_RES34               ;vector base + $34
007F36 0FFF36 22 8B                   VEC_RES36               DW      ISR_RES36               ;vector base + $36
007F38 0FFF38 22 8C                   VEC_RES38               DW      ISR_RES38               ;vector base + $38
007F3A 0FFF3A 22 8D                   VEC_RES3A               DW      ISR_RES3A               ;vector base + $3A
007F3C 0FFF3C 22 8E                   VEC_ATD1COMP            DW      ISR_ATD1COMP            ;vector base + $3C
007F3E 0FFF3E 18 9E                   VEC_ATD0COMP            DW      ISR_ATD0COMP            ;vector base + $3E
007F40 0FFF40 22 8F                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $40
007F42 0FFF42 22 90                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $42
007F44 0FFF44 22 91                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $44
007F46 0FFF46 22 92                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $46
007F48 0FFF48 22 93                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $48
007F4A 0FFF4A 22 94                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $4A
007F4C 0FFF4C 22 95                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $4C
007F4E 0FFF4E 22 96                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $4E
007F50 0FFF50 22 97                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $50
007F52 0FFF52 22 98                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $52
007F54 0FFF54 22 99                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $54
007F56 0FFF56 22 9A                   VEC_SCI7                DW      ISR_SCI7                ;vector base + $56
007F58 0FFF58 22 9B                   VEC_PITCH7              DW      ISR_PITCH7              ;vector base + $58
007F5A 0FFF5A 22 9C                   VEC_PITCH6              DW      ISR_PITCH6              ;vector base + $5A
007F5C 0FFF5C 22 9D                   VEC_PITCH5              DW      ISR_PITCH5              ;vector base + $5C
007F5E 0FFF5E 22 9E                   VEC_PITCH4              DW      ISR_PITCH4              ;vector base + $5E
007F60 0FFF60 22 9F                   VEC_RES60               DW      ISR_RES60               ;vector base + $60
007F62 0FFF62 22 A0                   VEC_RES62               DW      ISR_RES62               ;vector base + $62
007F64 0FFF64 22 A1                   VEC_XGSWT7              DW      ISR_XGSWT7              ;vector base + $64
007F66 0FFF66 22 A2                   VEC_XGSWT6              DW      ISR_XGSWT6              ;vector base + $66
007F68 0FFF68 22 A3                   VEC_XGSWT5              DW      ISR_XGSWT5              ;vector base + $68
007F6A 0FFF6A 22 A4                   VEC_XGSWT4              DW      ISR_XGSWT4              ;vector base + $6A
007F6C 0FFF6C 22 A5                   VEC_XGSWT3              DW      ISR_XGSWT3              ;vector base + $6C
007F6E 0FFF6E 22 A6                   VEC_XGSWT2              DW      ISR_XGSWT2              ;vector base + $6E
007F70 0FFF70 22 A7                   VEC_XGSWT1              DW      ISR_XGSWT1              ;vector base + $70
007F72 0FFF72 22 A8                   VEC_XGSWT0              DW      ISR_XGSWT0              ;vector base + $72
007F74 0FFF74 22 A9                   VEC_PITCH3              DW      ISR_PITCH3              ;vector base + $74
007F76 0FFF76 22 AA                   VEC_PITCH2              DW      ISR_PITCH2              ;vector base + $76
007F78 0FFF78 22 AB                   VEC_PITCH1              DW      ISR_PITCH1              ;vector base + $78
007F7A 0FFF7A 22 AC                   VEC_PITCH0              DW      ISR_PITCH0              ;vector base + $7A
007F7C 0FFF7C 22 AD                   VEC_HT                  DW      ISR_HT                  ;vector base + $7C
007F7E 0FFF7E 22 AE                   VEC_API                 DW      ISR_API                 ;vector base + $7E
007F80 0FFF80 22 AF                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $80
007F82 0FFF82 22 B0                   VEC_IIC1                DW      ISR_IIC1                ;vector base + $82
007F84 0FFF84 22 B1                   VEC_SCI5                DW      ISR_SCI5                ;vector base + $84
007F86 0FFF86 22 B2                   VEC_SCI4                DW      ISR_SCI4                ;vector base + $86
007F88 0FFF88 22 B3                   VEC_SCI3                DW      ISR_SCI3                ;vector base + $88
007F8A 0FFF8A 22 B4                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $8A
007F8C 0FFF8C 22 B5                   VEC_PWMSDN              DW      ISR_PWMSDN              ;vector base + $8C
007F8E 0FFF8E 22 B6                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
007F90 0FFF90 22 B7                   VEC_CAN4TX              DW      ISR_CAN4TX              ;vector base + $90
007F92 0FFF92 22 B8                   VEC_CAN4RX              DW      ISR_CAN4RX              ;vector base + $92
007F94 0FFF94 22 B9                   VEC_CAN4ERR             DW      ISR_CAN4ERR             ;vector base + $94
007F96 0FFF96 22 BA                   VEC_CAN4WUP             DW      ISR_CAN4WUP             ;vector base + $96
007F98 0FFF98 22 BB                   VEC_CAN3TX              DW      ISR_CAN3TX              ;vector base + $98
007F9A 0FFF9A 22 BC                   VEC_CAN3RX              DW      ISR_CAN3RX              ;vector base + $9A
007F9C 0FFF9C 22 BD                   VEC_CAN3ERR             DW      ISR_CAN3ERR             ;vector base + $9C
007F9E 0FFF9E 22 BE                   VEC_CAN3WUP             DW      ISR_CAN3WUP             ;vector base + $9E
007FA0 0FFFA0 22 BF                   VEC_CAN2TX              DW      ISR_CAN2TX              ;vector base + $A0
007FA2 0FFFA2 22 C0                   VEC_CAN2RX              DW      ISR_CAN2RX              ;vector base + $A2
007FA4 0FFFA4 22 C1                   VEC_CAN2ERR             DW      ISR_CAN2ERR             ;vector base + $A4
007FA6 0FFFA6 22 C2                   VEC_CAN2WUP             DW      ISR_CAN2WUP             ;vector base + $A6
007FA8 0FFFA8 22 C3                   VEC_CAN1TX              DW      ISR_CAN1TX              ;vector base + $A8
007FAA 0FFFAA 22 C4                   VEC_CAN1RX              DW      ISR_CAN1RX              ;vector base + $AA
007FAC 0FFFAC 22 C5                   VEC_CAN1ERR             DW      ISR_CAN1ERR             ;vector base + $AC
007FAE 0FFFAE 22 C6                   VEC_CAN1WUP             DW      ISR_CAN1WUP             ;vector base + $AE
007FB0 0FFFB0 22 C7                   VEC_CAN0TX              DW      ISR_CAN0TX              ;vector base + $A0
007FB2 0FFFB2 22 C8                   VEC_CAN0RX              DW      ISR_CAN0RX              ;vector base + $B2
007FB4 0FFFB4 22 C9                   VEC_CAN0ERR             DW      ISR_CAN0ERR             ;vector base + $B4
007FB6 0FFFB6 22 CA                   VEC_CAN0WUP             DW      ISR_CAN0WUP             ;vector base + $B6
007FB8 0FFFB8 22 CB                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
007FBA 0FFFBA 1C 87                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
007FBC 0FFFBC 22 CC                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
007FBE 0FFFBE 22 CD                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
007FC0 0FFFC0 22 CE                   VEC_IIC0                DW      ISR_IIC0                ;vector base + $C0
007FC2 0FFFC2 22 CF                   VEC_SCI6                DW      ISR_SCI6                ;vector base + $C2
007FC4 0FFFC4 22 D0                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
007FC6 0FFFC6 15 83                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
007FC8 0FFFC8 22 D1                   VEC_ECT_PBOV            DW      ISR_ECT_PBOV            ;vector base + $C8
007FCA 0FFFCA 22 D2                   VEC_ECT_MODCNT          DW      ISR_ECT_MODCNT          ;vector base + $CA
007FCC 0FFFCC 22 D3                   VEC_PORTH               DW      ISR_PORTH               ;vector base + $CC
007FCE 0FFFCE 22 D4                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CE
007FD0 0FFFD0 22 D5                   VEC_ATD1                DW      ISR_ATD1                ;vector base + $D0
007FD2 0FFFD2 22 D6                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
007FD4 0FFFD4 22 D7                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
007FD6 0FFFD6 17 81                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
007FD8 0FFFD8 22 D8                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
007FDA 0FFFDA 22 D9                   VEC_ECT_PAIE            DW      ISR_ECT_PAIE            ;vector base + $DA
007FDC 0FFFDC 22 DA                   VEC_ECT_PAOV            DW      ISR_ECT_PAOV            ;vector base + $DC
007FDE 0FFFDE 22 DB                   VEC_ECT_TOV             DW      ISR_ECT_TOV             ;vector base + $DE
007FE0 0FFFE0 22 DC                   VEC_ECT_TC7             DW      ISR_ECT_TC7             ;vector base + $E0
007FE2 0FFFE2 22 DD                   VEC_ECT_TC6             DW      ISR_ECT_TC6             ;vector base + $E2
007FE4 0FFFE4 22 DE                   VEC_ECT_TC5             DW      ISR_ECT_TC5             ;vector base + $E4
007FE6 0FFFE6 22 DF                   VEC_ECT_TC4             DW      ISR_ECT_TC4             ;vector base + $E6
007FE8 0FFFE8 16 DC                   VEC_ECT_TC3             DW      ISR_ECT_TC3             ;vector base + $E8
007FEA 0FFFEA 22 E0                   VEC_ECT_TC2             DW      ISR_ECT_TC2             ;vector base + $EA
007FEC 0FFFEC 22 E1                   VEC_ECT_TC1             DW      ISR_ECT_TC1             ;vector base + $EC
007FEE 0FFFEE 22 E2                   VEC_ECT_TC0             DW      ISR_ECT_TC0             ;vector base + $EE
007FF0 0FFFF0 22 E3                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
007FF2 0FFFF2 22 E4                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
007FF4 0FFFF4 22 E5                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
007FF6 0FFFF6 22 E6                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
007FF8 0FFFF8 22 E7                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
007FFA 0FFFFA 10 00                   VEC_RESET_COP           DW      RES_COP                 ;vector base + $FA
007FFC 0FFFFC 10 00                   VEC_RESET_CM            DW      RES_CM                  ;vector base + $FC
007FFE 0FFFFE 10 00                   VEC_RESET_EXT           DW      RES_EXT                 ;vector base + $FE
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C8D 0F9C8D                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
                                      ;                       ALIGN   16
                                      ;DEMO_TRACE             DS      8*64
001C8D 0F9C8D -> $1C8D                DEMO_VARS_END           EQU     *
001C8D 0F9C8D -> $F9C8D               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001000 0F9000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
001000 0F9000 MACRO                                           BASE_INIT
                                      ;#Initialization                                                                 (BASE_INIT)
                                      ;---------------                                                                 (BASE_INIT)
001000 0F9000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
001000 0F9000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
001002 0F9002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
001004 0F9004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
001006 0F9006 18 03 FF FF 00 8C                       MOVW    #%1111_1111_1111_1111, ATD1DIENH        ;switch unused pins to digital (BASE_INIT/GPIO_INIT)
00100C 0F900C 18 03 F0 FC 02 CC                       MOVW    #%1111_0000_1111_1100, ATD0DIENH                         (BASE_INIT/GPIO_INIT)
001012 0F9012 18 03 FF FF 02 7E                       MOVW    #%1111_1111_1111_1111, PER0AD1          ;enable pull-up on all unused pins (BASE_INIT/GPIO_INIT)
001018 0F9018 18 03 F0 FC 02 76                       MOVW    #%1111_0000_1111_1100, PER0AD0                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A & B                                                     (BASE_INIT/GPIO_INIT)
00101E 0F901E 18 03 DC 9F 00 0C                       MOVW    #(((PUPKE|BKPUE|PUPEE|PUPDE|PUPCE)<<8)|RDPK|RDPE|RDPD|RDPC|PUPBE|PUPAE), PUCR ;enable pull-ups and reduced drive (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                                            (BASE_INIT/GPIO_INIT)
001024 0F9024 18 03 FF FF 00 02                       MOVW    #$FFFF, DDRA                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port C & D                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PORTE                                              (BASE_INIT/GPIO_INIT)
00102A 0F902A 18 0B 04 00 09                          MOVB    #$04, DDRE                                               (BASE_INIT/GPIO_INIT)
00102F 0F902F 79 00 1E                                CLR     IRQCR           ;disable IRQ                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port F                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRF                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERF                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port H                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRH                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERH                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRJ                                                     (BASE_INIT/GPIO_INIT)
001032 0F9032 18 0B FC 02 6C                          MOVB    #$FC, PERJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port K                                                         (BASE_INIT/GPIO_INIT)
001037 0F9037 18 03 07 07 00 32                       MOVW    #$0707, PORTK                                            (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PTM                                                      (BASE_INIT/GPIO_INIT)
00103D 0F903D 18 03 BF FF 02 52                       MOVW    #$BFFF, DDRM                                             (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PERM                                                     (BASE_INIT/GPIO_INIT)
001043 0F9043 18 0B 80 02 56                          MOVB    #$80, WOMM                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port L                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRL                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   $#FF00, PERL                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
001048 0F9048 18 0B F3 02 58                          MOVB    #$F3, PTP                                                (BASE_INIT/GPIO_INIT)
00104D 0F904D 18 0B FF 02 5A                          MOVB    #$FF, DDRP                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRP                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port R                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRR                                                     (BASE_INIT/GPIO_INIT)
001052 0F9052 18 0B FF 03 6C                          MOVB    #$FF, PERR                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSR                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
001057 0F9057 18 0B 82 02 48                          MOVB    #$82, PTS                                                (BASE_INIT/GPIO_INIT)
00105C 0F905C 18 0B 70 02 4A                          MOVB    #$70, DDRS                                               (BASE_INIT/GPIO_INIT)
001061 0F9061 18 0B 1C 02 4C                          MOVB    #$1C, PERS                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSS                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRT                                                     (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRT                                                     (BASE_INIT/GPIO_INIT)
001066 0F9066 18 0B FE 02 44                          MOVB    #$FE, PERT                                               (BASE_INIT/GPIO_INIT)
00106B 0F906B MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00106B 0F906B 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
001070 0F9070 MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/CLOCK_INIT)
001070 0F9070 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
001075 0F9075 18 03 C4 80 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
00107B 0F907B 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
001081 0F9081 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Capture and clear CRG/CPMU flags                        (BASE_INIT/RESET_INIT)
001081 0F9081 96 37                                           LDAA    CRGFLG                  ;capture flags           (BASE_INIT/RESET_INIT)
001083 0F9083 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG            ;clear flags             (BASE_INIT/RESET_INIT)
                                                              ;Check for low voltage reset (flags in A)                (BASE_INIT/RESET_INIT)
001088 0F9088 CD 22 35                                        LDY     #RESET_MSG_POWFAIL                               (BASE_INIT/RESET_INIT)
00108B 0F908B 85 20                                           BITA    #LVRF                                            (BASE_INIT/RESET_INIT)
00108D 0F908D 26 4E                                           BNE     RESET_INIT_4            ;low voltage reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for illegal address reset (flags in A)            (BASE_INIT/RESET_INIT)
00108F 0F908F CD 22 41                                        LDY     #RESET_MSG_ILLADDR                               (BASE_INIT/RESET_INIT)
001092 0F9092 85 04                                           BITA    #ILAF                                            (BASE_INIT/RESET_INIT)
001094 0F9094 26 47                                           BNE     RESET_INIT_4            ;illegal address reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for power-on or external pin reset (flags in A)   (BASE_INIT/RESET_INIT)
001096 0F9096 FD 1C E3                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/RESET_INIT)
001099 0F9099 27 45                                           BEQ     RESET_INIT_5            ;power-on or external pin reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (string in Y)           (BASE_INIT/RESET_INIT)
00109B 0F909B 87                                              CLRA                            ;initialize C0           (BASE_INIT/RESET_INIT)
00109C 0F909C CE 3F 00                                        LDX     #((RESET_MSG_LENGTH-1)<<8);initialize char limit and C1 (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (striing pointer in Y, char limit:C1 in X, C0 in A) (BASE_INIT/RESET_INIT)
00109F 0F909F E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0010A1 0F90A1 2B 1F                                           BMI     RESET_INIT_2            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010A3 0F90A3 C1 20                   RESET_INIT_1            CMPB    #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0010A5 0F90A5 25 33                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010A7 0F90A7 C1 7E                                           CMPB    #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0010A9 0F90A9 22 2F                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010AB 0F90AB 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0010AD 0F90AD 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0010AF 0F90AF B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0010B1 0F90B1 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
0010B3 0F90B3 B7 81                                           EXG     A, B                    ;C0:C1  -> D             (BASE_INIT/RESET_INIT)
0010B5 0F90B5 B7 D4                                           EXG     X, D                    ;C0:C1  -> X, char limit -> A (BASE_INIT/RESET_INIT)
0010B7 0F90B7 B7 51                                           TFR     X, B                    ;char limit:C1 -> D      (BASE_INIT/RESET_INIT)
                                                              ;Check character limit ((string pointer in Y, C0:C1 in X, char limit:C1 in D) (BASE_INIT/RESET_INIT)
0010B9 0F90B9 04 00 1E                                        DBEQ    A, RESET_INIT_3         ;invalid message         (BASE_INIT/RESET_INIT)
0010BC 0F90BC B7 D4                                           EXG     X, D                    ;C0:C1  -> D, char limit:C1 ->  X (BASE_INIT/RESET_INIT)
0010BE 0F90BE E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0010C0 0F90C0 2A E1                                           BPL     RESET_INIT_1            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;String termination found (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010C2 0F90C2                         RESET_INIT_2            ;ANDB   #$7F                    ;ignore termination      (BASE_INIT/RESET_INIT)
                                                              ;;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BLO    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BHI    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010C2 0F90C2 C1 A0                                           CMPB    #$A0            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0010C4 0F90C4 25 14                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010C6 0F90C6 C1 FE                                           CMPB    #$FE            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0010C8 0F90C8 22 10                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010CA 0F90CA 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0010CC 0F90CC 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0010CE 0F90CE B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0010D0 0F90D0 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
                                                              ;Check Fletcher's checksum (string in pointer Y, C1 in A, C0 in B) (BASE_INIT/RESET_INIT)
0010D2 0F90D2 A1 70                                           CMPA    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0010D4 0F90D4 26 04                                           BNE     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010D6 0F90D6 E1 70                                           CMPB    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0010D8 0F90D8 27 06                                           BEQ     RESET_INIT_5            ;valid message           (BASE_INIT/RESET_INIT)
                                                              ;Invalid error message                                   (BASE_INIT/RESET_INIT)
0010DA 0F90DA CD 22 4F                RESET_INIT_3            LDY     #RESET_MSG_UNKNOWN      ;unknown error           (BASE_INIT/RESET_INIT)
                                                              ;Update error message                                    (BASE_INIT/RESET_INIT)
0010DD 0F90DD 7D 1C E3                RESET_INIT_4            STY     RESET_MSG_PTR           ;set error message       (BASE_INIT/RESET_INIT)
                                                              ;Done                                                    (BASE_INIT/RESET_INIT)
0010E0 0F90E0 -> $10E0                RESET_INIT_5            EQU     *                                                (BASE_INIT/RESET_INIT)
0010E0 0F90E0 MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup MPU                                               (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 0: Register space                   -> read and write (BASE_INIT/MMAP_INIT)
0010E0 0F90E0 79 01 19                                        CLR     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010E3 0F90E3 18 03 C0 00 01 1A                               MOVW    #((MMAP_D_REG_BYTE0<<8)|(MMAP_D_REG_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010E9 0F90E9 18 03 00 40 01 1C                               MOVW    #((MMAP_D_REG_BYTE2<<8)|(MMAP_D_REG_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010EF 0F90EF 18 03 00 FF 01 1E                               MOVW    #((MMAP_D_REG_BYTE4<<8)|(MMAP_D_REG_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: Unimplemented RAM                -> read only (BASE_INIT/MMAP_INIT)
0010F5 0F90F5 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010F8 0F90F8 18 03 C0 01 01 1A                               MOVW    #((MMAP_D_URAM_BYTE0<<8)|(MMAP_D_URAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010FE 0F90FE 18 03 00 C1 01 1C                               MOVW    #((MMAP_D_URAM_BYTE2<<8)|(MMAP_D_URAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001104 0F9104 18 03 EF FF 01 1E                               MOVW    #((MMAP_D_URAM_BYTE4<<8)|(MMAP_D_URAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: RAM                              -> read, write, and execute (BASE_INIT/MMAP_INIT)
00110A 0F910A 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00110D 0F910D 18 03 C1 F0 01 1A                               MOVW    #((MMAP_D_RAM_BYTE0<<8)|(MMAP_D_RAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001113 0F9113 18 03 00 01 01 1C                               MOVW    #((MMAP_D_RAM_BYTE2<<8)|(MMAP_D_RAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001119 0F9119 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_RAM_BYTE4<<8)|(MMAP_D_RAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  Unimplemented EERAM             -> read only (BASE_INIT/MMAP_INIT)
00111F 0F911F 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001122 0F9122 18 03 C2 00 01 1A                               MOVW    #((MMAP_D_UEERAM_BYTE0<<8)|(MMAP_D_UEERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001128 0F9128 18 03 00 C2 01 1C                               MOVW    #((MMAP_D_UEERAM_BYTE2<<8)|(MMAP_D_UEERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00112E 0F912E 18 03 7D FF 01 1E                               MOVW    #((MMAP_D_UEERAM_BYTE4<<8)|(MMAP_D_UEERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  EERAM                           -> read, write, and execute (BASE_INIT/MMAP_INIT)
001134 0F9134 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001137 0F9137 18 03 C2 7E 01 1A                               MOVW    #((MMAP_D_EERAM_BYTE0<<8)|(MMAP_D_EERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00113D 0F913D 18 03 00 00 01 1C                               MOVW    #((MMAP_D_EERAM_BYTE2<<8)|(MMAP_D_EERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001143 0F9143 18 03 01 FF 01 1E                               MOVW    #((MMAP_D_EERAM_BYTE4<<8)|(MMAP_D_EERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 3:  Unimplemented Flash             -> read only (BASE_INIT/MMAP_INIT)
001149 0F9149 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00114C 0F914C 18 03 C2 80 01 1A                               MOVW    #((MMAP_D_UFLASH_BYTE0<<8)|(MMAP_D_UFLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001152 0F9152 18 03 00 CF 01 1C                               MOVW    #((MMAP_D_UFLASH_BYTE2<<8)|(MMAP_D_UFLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001158 0F9158 18 03 0F FF 01 1E                               MOVW    #((MMAP_D_UFLASH_BYTE4<<8)|(MMAP_D_UFLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 4:  Unimplemented Flash             -> read and execute (BASE_INIT/MMAP_INIT)
00115E 0F915E 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001161 0F9161 18 03 CF 10 01 1A                               MOVW    #((MMAP_D_FLASH_BYTE0<<8)|(MMAP_D_FLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001167 0F9167 18 03 00 8F 01 1C                               MOVW    #((MMAP_D_FLASH_BYTE2<<8)|(MMAP_D_FLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00116D 0F916D 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_FLASH_BYTE4<<8)|(MMAP_D_FLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Enable descriptors in supervisor mode                   (BASE_INIT/MMAP_INIT)
001173 0F9173 18 0B 80 01 19                                  MOVB    #SVSEN, MPUSEL                                   (BASE_INIT/MMAP_INIT)
                                      ;#ifndef MMAP_RAM                       ;Don't write to RPAGE while executing code from RAM (BASE_INIT/MMAP_INIT)
                                      ;                       ;Initialize RPAGE                                        (BASE_INIT/MMAP_INIT)
001178 0F9178 18 0B F9 00 16                                  MOVB    #(MMAP_RAM_START_LIN>>12), RPAGE                 (BASE_INIT/MMAP_INIT)
00117D 0F917D MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (BASE_INIT/VECTAB_INIT)
00117D 0F917D 18 0B 7F 01 21                                  MOVB    #(VECTAB_START>>8), IVBR                         (BASE_INIT/VECTAB_INIT)
                                                              ;Disable XGATE interrupts                                (BASE_INIT/VECTAB_INIT)
001182 0F9182 79 01 26                                        CLR     XGPRIO                                           (BASE_INIT/VECTAB_INIT)
001185 0F9185 MACRO                                           SSTACK_INIT                                              (BASE_INIT)
001185 0F9185 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
001185 0F9185 CF 1C B1                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
001188 0F9188 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
00118A 0F918A MACRO                                           LED_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/LED_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/LED_INIT)
00118A 0F918A MACRO                                           LED_OFF                                                  (BASE_INIT/LED_INIT)
                                      ;#Turn LED on (do nothing)                                                       (BASE_INIT/LED_INIT/LED_OFF)
                                      ;#Turn LED off (turn all LEDs off)                                               (BASE_INIT/LED_INIT/LED_OFF)
00118A 0F918A 1C 02 58 FC                                     BSET    LED_PORT, #(LED_ALL)                             (BASE_INIT/LED_INIT/LED_OFF)
00118E 0F918E MACRO                                           TVMON_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TVMON_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TVMON_INIT)
                                      ;############################################################################### (BASE_INIT/TVMON_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TVMON_INIT)
                                      ;#--------------                                                                 (BASE_INIT/TVMON_INIT)
                                                              ;Configure ADC                                           (BASE_INIT/TVMON_INIT)
00118E 0F918E 18 0B 40 02 C1                                  MOVB    #TVMON_ATDCTL1_CONFIG, ATDCTL1                   (BASE_INIT/TVMON_INIT)
001193 0F9193 18 03 41 13 02 C2                               MOVW    #((TVMON_ATDCTL2_CONFIG<<8)|TVMON_ATDCTL3_CONFIG), ATDCTL2 (BASE_INIT/TVMON_INIT)
001199 0F9199 18 0B FF 02 C4                                  MOVB    #TVMON_ATDCTL4_CONFIG, ATDCTL4                   (BASE_INIT/TVMON_INIT)
00119E 0F919E 18 0B 01 02 C9                                  MOVB    #$01, ATDCMPEL                                   (BASE_INIT/TVMON_INIT)
0011A3 0F91A3 18 0B 01 02 CF                                  MOVB    #$01, ATDCMPHTL                                  (BASE_INIT/TVMON_INIT)
0011A8 0F91A8 18 03 4C CC 02 D0                               MOVW    #TVMON_UPPER_THRESHOLD, ATDDR0                   (BASE_INIT/TVMON_INIT)
                                                              ;Initially flag missing target                           (BASE_INIT/TVMON_INIT)
0011AE 0F91AE MACRO                                           LED_BICOLOR_RED                                          (BASE_INIT/TVMON_INIT)
                                      ;#Turn red bi-color LED on                                                       (BASE_INIT/TVMON_INIT/LED_BICOLOR_RED)
0011AE 0F91AE 1C 02 58 08                                     BSET    LED_PORT, #LED_BICOLOR_GREEN                     (BASE_INIT/TVMON_INIT/LED_BICOLOR_RED)
0011B2 0F91B2 1D 02 58 04                                     BCLR    LED_PORT, #LED_BICOLOR_RED                       (BASE_INIT/TVMON_INIT/LED_BICOLOR_RED)
                                                              ;Start ATD conversions                                   (BASE_INIT/TVMON_INIT)
0011B6 0F91B6 18 0B 2B 02 C5                                  MOVB    #TVMON_ATDCTL5_CONFIG, ATDCTL5                   (BASE_INIT/TVMON_INIT)
0011BB 0F91BB MACRO                                           TIM_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TIM_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;      D S S S                 ;  0=input capture (BASE_INIT/TIM_INIT)
                                                                       ;      E C C C                 ;  1=output compare (BASE_INIT/TIM_INIT)
                                                                       ;      L I I I                                  (BASE_INIT/TIM_INIT)
                                                                       ;      A B B B                                  (BASE_INIT/TIM_INIT)
                                                                       ;      Y D D D                                  (BASE_INIT/TIM_INIT)
                                                                       ;        T N P                                  (BASE_INIT/TIM_INIT)
                                                                       ;        O E E                                  (BASE_INIT/TIM_INIT)
                                                              ;CFORC                                                   (BASE_INIT/TIM_INIT)
                                                              ;OC7M                                                    (BASE_INIT/TIM_INIT)
                                                                       ;7 6 5 4 3 2 1 0                                (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;      D S S S S                                (BASE_INIT/TIM_INIT)
                                                                       ;      E C C C C                                (BASE_INIT/TIM_INIT)
                                                                       ;      L I I I I                                (BASE_INIT/TIM_INIT)
                                                                       ;      A T B B B                                (BASE_INIT/TIM_INIT)
                                                                       ;      Y O D D D                                (BASE_INIT/TIM_INIT)
                                                                       ;          T N P                                (BASE_INIT/TIM_INIT)
                                                                       ;          O E E                                (BASE_INIT/TIM_INIT)
                                                              ;TCNT                                                    (BASE_INIT/TIM_INIT)
0011BB 0F91BB 18 0B 01 00 4D                                  MOVB    #$01, TSCR2                     ;run on half bus frequency (BASE_INIT/TIM_INIT)
0011C0 0F91C0 MACRO                                           STRING_INIT                                              (BASE_INIT)
0011C0 0F91C0 MACRO                                           NUM_INIT                                                 (BASE_INIT)
0011C0 0F91C0 MACRO                                           NVM_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/NVM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/NVM_INIT)
                                      ;############################################################################### (BASE_INIT/NVM_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/NVM_INIT)
0011C0 0F91C0 18 0B 09 01 00                                  MOVB    #NVM_FDIV_VAL, FCLKDIV                           (BASE_INIT/NVM_INIT)
0011C5 0F91C5 18 0B 02 01 05                                  MOVB    #DFDIE,FERCNFG                                   (BASE_INIT/NVM_INIT)
0011CA 0F91CA MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                      ;#--------------                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
0011CA 0F91CA 4C 40 0C                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
0011CD 0F91CD FC 1C DE                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
0011D0 0F91D0 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
0011D2 0F91D2 CE 0C CC                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
0011D5 0F91D5 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
0011D7 0F91D7 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
0011DA 0F91DA 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
0011DC 0F91DC CD 1D CE                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
0011DF 0F91DF AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
0011E1 0F91E1 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
0011E3 0F91E3 8D 1D DE                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
0011E6 0F91E6 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
0011E8 0F91E8 CE 01 46                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
0011EB 0F91EB 18 03 4B C8 1C DE                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
0011F1 0F91F1 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format                                        (BASE_INIT/SCI_INIT)
0011F3 0F91F3 18 0B 04 00 CA                                  MOVB    #SCI_8N1, SCICR1                        ;8N1     (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)                    (BASE_INIT/SCI_INIT)
0011F8 0F91F8 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (BASE_INIT/SCI_INIT)
0011FB 0F91FB MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                                              ;MOVW   #(((RTIE|LOCKIE)<<8)|CWAI|COPWAI), CRGINT        (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ;CRG configuration: (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; real-time interrupt enabled           (RTIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL lock interrupt enabled            (LOCKIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no self-clock mode interrupt          (~SCMIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no pseudo-stop                        (~PSTP) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; system/bus clock in wait mode         (~SYSWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no reduced oscillator amplitude       (~ROAWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL in wait mode                      (~PLLWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; core/CPU clock stops in wait mode     (CWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; RTI keeps running in wait mode        (~RTIWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; COP stops in wait mode                (COPWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;BSET   PLLCTL, #(CME|PLLON|AUTO)                       ; clock monitor enabled                 (CME) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL enabled                           (PLLON) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; automatic bandwith control            (AUTO) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011FB 0F91FB 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011FD 0F91FD 4E 39 80 1D                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
001201 0F9201 MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001201 0F9201 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001204 0F9204 18 25 03 6F                                     BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001208 0F9208 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00120B 0F920B 18 22 03 6E                                     BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00120F 0F920F MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00120F 0F920F 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
001214 0F9214 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
001219 0F9219 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00121B 0F921B 3E                                              WAI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00121C 0F921C -> $1577                OF                      EQU     ISTACK_OF                                        (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00121C 0F921C -> $157D                UF                      EQU     ISTACK_UF                                        (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00121C 0F921C -> $121C                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00121C 0F921C 20 DD                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00121E 0F921E 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
001220 0F9220 MACRO                                           SCI_ENABLE                                               (BASE_INIT)
                                      ;#Enable SCI                                                                     (BASE_INIT/SCI_ENABLE)
                                      ;#----------                                                                     (BASE_INIT/SCI_ENABLE)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_ENABLE)
001220 0F9220 CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_ENABLE)
001223 0F9223 7C 1C DC                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_ENABLE)
001226 0F9226 7C 1C D2                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_ENABLE)
001229 0F9229 7A 1C B1                                        STAA    SCI_FLGS                                         (BASE_INIT/SCI_ENABLE)
                                                              ;Initialize CTS (allow incoming data)                    (BASE_INIT/SCI_ENABLE)
00122C 0F922C MACRO                                           SCI_ASSERT_CTS                                           (BASE_INIT/SCI_ENABLE)
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (BASE_INIT/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (BASE_INIT/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (BASE_INIT/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/SCI_ENABLE/SCI_ASSERT_CTS)
00122C 0F922C 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (BASE_INIT/SCI_ENABLE/SCI_ASSERT_CTS)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_ENABLE)
001230 0F9230 7A 1C E0                                        STAA    SCI_BD_LIST                             ;reset baud rate check list (BASE_INIT/SCI_ENABLE)
                                                              ;Enable transmission                                     (BASE_INIT/SCI_ENABLE)
001233 0F9233 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;keep TX IRQs disabled (BASE_INIT/SCI_ENABLE)
001238 0F9238 MACRO                                           RESET_BR_ERR    ERROR   ;severe error detected           (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
001238 0F9238 FD 1C E3                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
00123B 0F923B 26 16                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
00123D 0F923D MACRO                                           WELCOME_MESSAGE                                          (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE)
                                      ;# Macros                                                                      # (BASE_INIT/WELCOME_MESSAGE)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE)
                                      ;#Welcome message                                                                (BASE_INIT/WELCOME_MESSAGE)
                                      ;------------_---                                                                (BASE_INIT/WELCOME_MESSAGE)
00123D 0F923D CE 1D 29                                        LDX     #WELCOME_MESSAGE        ;print welcome message   (BASE_INIT/WELCOME_MESSAGE)
001240 0F9240 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/WELCOME_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
001240 0F9240 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001240 0F9240 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001240 0F9240 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001240 0F9240 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001243 0F9243 18 25 03 24                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001247 0F9247 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124A 0F924A 18 22 03 23                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124E 0F924E -> $1571                UF                      EQU     SSTACK_UF                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124E 0F924E -> $156B                OF                      EQU     SSTACK_OF                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00124E 0F924E 16 19 1E                                        JOBSR   \1                                               (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001251 0F9251 20 3B                                           JOB     DONE                                             (BASE_INIT)
001253 0F9253 MACRO                   ERROR                   ERROR_MESSAGE                                            (BASE_INIT)
                                      ;#Error message                                                                  (BASE_INIT/ERROR_MESSAGE)
                                      ;--------------                                                                  (BASE_INIT/ERROR_MESSAGE)
001253 0F9253 CE 1D 4C                                        LDX     #ERROR_HEADER           ;print error header      (BASE_INIT/ERROR_MESSAGE)
001256 0F9256 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
001256 0F9256 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001256 0F9256 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001256 0F9256 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001256 0F9256 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001259 0F9259 18 25 03 0E                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00125D 0F925D 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001260 0F9260 18 22 03 0D                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001264 0F9264 -> $1571                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001264 0F9264 -> $156B                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001264 0F9264 16 19 1E                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001267 0F9267 B7 65                                           TFR     Y, X                    ;print error message     (BASE_INIT/ERROR_MESSAGE)
001269 0F9269 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
001269 0F9269 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001269 0F9269 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001269 0F9269 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001269 0F9269 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00126C 0F926C 18 25 02 FB                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001270 0F9270 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001273 0F9273 18 22 02 FA                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001277 0F9277 -> $1571                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001277 0F9277 -> $156B                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001277 0F9277 16 19 1E                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00127A 0F927A CE 1D 59                                        LDX     #ERROR_TRAILER          ;print error TRAILER     (BASE_INIT/ERROR_MESSAGE)
00127D 0F927D MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
00127D 0F927D MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00127D 0F927D MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00127D 0F927D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00127D 0F927D 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001280 0F9280 18 25 02 E7                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001284 0F9284 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001287 0F9287 18 22 02 E6                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00128B 0F928B -> $1571                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00128B 0F928B -> $156B                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00128B 0F928B 16 19 1E                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00128E 0F928E -> $128E                DONE                    EQU     *                                                (BASE_INIT)
                                      ;;Setup trace buffer
                                      ;                       ;Configure DBG module
                                      ;                       CLR     DBGC1
                                      ;                       ;MOVB   #$40, DBGTCR  ;trace CPU in normal mode
                                      ;                       MOVB    #$4C, DBGTCR  ;trace CPU in pure PC mode
                                      ;                       MOVB    #$02, DBGC2   ;Comparators A/B outside range
                                      ;                       MOVB    #$02, DBGSCRX ;first match triggers final state
                                      ;                       ;Comperator A
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_START_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_START_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Comperator A
                                      ;                       MOVB    #$01, DBGC1
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_END_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_END_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Arm DBG module
                                      ;                       MOVB    #ARM, DBGC1
                                      ;Application code
                                                              ;Print header string
00128E 0F928E CE 1C E5                                        LDX     #DEMO_HEADER
001291 0F9291 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
001291 0F9291 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
001291 0F9291 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001291 0F9291 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001291 0F9291 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001294 0F9294 18 25 02 D3                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001298 0F9298 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00129B 0F929B 18 22 02 D2                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00129F 0F929F -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00129F 0F929F -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00129F 0F929F 16 19 1E                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
                                                              ;Loop
0012A2 0F92A2 MACRO                   DEMO_LOOP               SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
0012A2 0F92A2 MACRO                                           SCI_CALL_BL     SCI_RX_NB, 4                             (SCI_RX_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (SCI_RX_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (SCI_RX_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_RX_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_RX_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_RX_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (SCI_RX_BL/SCI_CALL_BL)
0012A2 0F92A2 14 10                   LOOP                    SEI                                                      (SCI_RX_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (SCI_RX_BL/SCI_CALL_BL)
0012A4 0F92A4 MACRO                                           SSTACK_JOBSR    \1, \2                                   (SCI_RX_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
0012A4 0F92A4 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012A4 0F92A4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A4 0F92A4 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012A7 0F92A7 18 25 02 C0                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012AB 0F92AB 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012AE 0F92AE 18 22 02 BF                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B2 0F92B2 -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B2 0F92B2 -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012B2 0F92B2 16 16 40                                        JOBSR   \1                                               (SCI_RX_BL/SCI_CALL_BL/SSTACK_JOBSR)
0012B5 0F92B5 25 1D                                           BCS     DONE            ;function successful             (SCI_RX_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (SCI_RX_BL/SCI_CALL_BL)
0012B7 0F92B7 MACRO                                           ISTACK_WAIT                                              (SCI_RX_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012B7 0F92B7 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012BA 0F92BA 18 25 02 B9                                     BLO     OF ;ISTACK_OF                                    (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012BE 0F92BE 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012C1 0F92C1 18 22 02 B8                                     BHI     UF ;ISTACK_UF                                    (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012C5 0F92C5 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
0012C5 0F92C5 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
0012CA 0F92CA 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
0012CF 0F92CF 10 EF                                           CLI                                                      (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012D1 0F92D1 3E                                              WAI                                                      (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012D2 0F92D2 -> $1577                OF                      EQU     ISTACK_OF                                        (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012D2 0F92D2 -> $157D                UF                      EQU     ISTACK_UF                                        (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
0012D2 0F92D2 -> $12D2                DONE                    EQU     *                                                (SCI_RX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_RX_BL/SCI_CALL_BL)
0012D2 0F92D2 20 CE                                           JOB     LOOP                                             (SCI_RX_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (SCI_RX_BL/SCI_CALL_BL)
0012D4 0F92D4 10 EF                   DONE                    CLI                                                      (SCI_RX_BL/SCI_CALL_BL)
                                                              ;Ignore RX errors
0012D6 0F92D6 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
0012D8 0F92D8 26 C8                                           BNE     DEMO_LOOP
                                                              ;TBNE   A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
0012DA 0F92DA B7 45                                           TFR     D, X
0012DC 0F92DC 86 04                                           LDAA    #4
0012DE 0F92DE C6 20                                           LDAB    #" "
0012E0 0F92E0 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012E0 0F92E0 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012E0 0F92E0 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012E0 0F92E0 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E0 0F92E0 8F 1C 9F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E3 0F92E3 18 25 02 84                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012E7 0F92E7 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012EA 0F92EA 18 22 02 83                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012EE 0F92EE -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012EE 0F92EE -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012EE 0F92EE 16 19 8D                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0012F1 0F92F1 B7 54                                           TFR     X, D
0012F3 0F92F3 87                                              CLRA
0012F4 0F92F4 MACRO                                           STRING_PRINTABLE
                                      ;#Make ASCII character printable                                                 (STRING_PRINTABLE)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_PRINTABLE)
                                      ; result: B: printable ASCII character or "."                                    (STRING_PRINTABLE)
                                      ; SSTACK: 2 bytes                                                                (STRING_PRINTABLE)
                                      ;         X, Y, and A are preserved                                              (STRING_PRINTABLE)
0012F4 0F92F4 MACRO                                           SSTACK_JOBSR    STRING_PRINTABLE, 2                      (STRING_PRINTABLE)
                                      ;#Check stack and call subroutine                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINTABLE/SSTACK_JOBSR)
0012F4 0F92F4 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F4 0F92F4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F4 0F92F4 8F 1C 98                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012F7 0F92F7 18 25 02 70                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012FB 0F92FB 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0012FE 0F92FE 18 22 02 6F                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001302 0F9302 -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001302 0F9302 -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001302 0F9302 16 19 F0                                        JOBSR   \1                                               (STRING_PRINTABLE/SSTACK_JOBSR)
001305 0F9305 MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
001305 0F9305 MACRO                                           SCI_CALL_BL     SCI_TX_NB, 5                             (SCI_TX_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (SCI_TX_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (SCI_TX_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_TX_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_TX_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_TX_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (SCI_TX_BL/SCI_CALL_BL)
001305 0F9305 14 10                   LOOP                    SEI                                                      (SCI_TX_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (SCI_TX_BL/SCI_CALL_BL)
001307 0F9307 MACRO                                           SSTACK_JOBSR    \1, \2                                   (SCI_TX_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
001307 0F9307 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001307 0F9307 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001307 0F9307 8F 1C 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00130A 0F930A 18 25 02 5D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00130E 0F930E 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001311 0F9311 18 22 02 5C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001315 0F9315 -> $1571                UF                      EQU     SSTACK_UF                                        (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001315 0F9315 -> $156B                OF                      EQU     SSTACK_OF                                        (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001315 0F9315 16 15 9C                                        JOBSR   \1                                               (SCI_TX_BL/SCI_CALL_BL/SSTACK_JOBSR)
001318 0F9318 25 1D                                           BCS     DONE            ;function successful             (SCI_TX_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (SCI_TX_BL/SCI_CALL_BL)
00131A 0F931A MACRO                                           ISTACK_WAIT                                              (SCI_TX_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
00131A 0F931A 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
00131D 0F931D 18 25 02 56                                     BLO     OF ;ISTACK_OF                                    (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001321 0F9321 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001324 0F9324 18 22 02 55                                     BHI     UF ;ISTACK_UF                                    (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001328 0F9328 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001328 0F9328 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00132D 0F932D 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001332 0F9332 10 EF                                           CLI                                                      (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001334 0F9334 3E                                              WAI                                                      (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001335 0F9335 -> $1577                OF                      EQU     ISTACK_OF                                        (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001335 0F9335 -> $157D                UF                      EQU     ISTACK_UF                                        (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
001335 0F9335 -> $1335                DONE                    EQU     *                                                (SCI_TX_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_TX_BL/SCI_CALL_BL)
001335 0F9335 20 CE                                           JOB     LOOP                                             (SCI_TX_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (SCI_TX_BL/SCI_CALL_BL)
001337 0F9337 10 EF                   DONE                    CLI                                                      (SCI_TX_BL/SCI_CALL_BL)
                                                              ;Print hexadecimal value (char in X)
001339 0F9339 CD 00 00                                        LDY     #$0000
00133C 0F933C C6 10                                           LDAB    #16
00133E 0F933E MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00133E 0F933E MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00133E 0F933E MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00133E 0F933E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00133E 0F933E 8F 1C A8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001341 0F9341 18 25 02 26                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001345 0F9345 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001348 0F9348 18 22 02 25                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00134C 0F934C -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00134C 0F934C -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00134C 0F934C 16 1A 3A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00134F 0F934F B7 76                                           TFR     SP, Y
001351 0F9351 40                                              NEGA
001352 0F9352 8B 05                                           ADDA    #5
001354 0F9354 C6 20                                           LDAB    #" "
001356 0F9356 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001356 0F9356 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
001356 0F9356 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001356 0F9356 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001356 0F9356 8F 1C 9F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001359 0F9359 18 25 02 0E                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00135D 0F935D 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001360 0F9360 18 22 02 0D                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001364 0F9364 -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001364 0F9364 -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001364 0F9364 16 19 8D                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
001367 0F9367 C6 10                                           LDAB    #16
001369 0F9369 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
001369 0F9369 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
001369 0F9369                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
001369 0F9369 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
001369 0F9369 MACRO                                           SCI_CALL_BL     SCI_TX_READY_NB, 4                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001369 0F9369 14 10                   LOOP                    SEI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00136B 0F936B MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
00136B 0F936B MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00136B 0F936B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00136B 0F936B 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00136E 0F936E 18 25 01 F9                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001372 0F9372 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001375 0F9375 18 22 01 F8                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001379 0F9379 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001379 0F9379 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001379 0F9379 16 16 0C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
00137C 0F937C 25 1D                                           BCS     DONE            ;function successful             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00137E 0F937E MACRO                                           ISTACK_WAIT                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00137E 0F937E 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001381 0F9381 18 25 01 F2                                     BLO     OF ;ISTACK_OF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001385 0F9385 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001388 0F9388 18 22 01 F1                                     BHI     UF ;ISTACK_UF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00138C 0F938C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00138C 0F938C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001391 0F9391 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001396 0F9396 10 EF                                           CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001398 0F9398 3E                                              WAI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001399 0F9399 -> $1577                OF                      EQU     ISTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001399 0F9399 -> $157D                UF                      EQU     ISTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001399 0F9399 -> $1399                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001399 0F9399 20 CE                                           JOB     LOOP                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00139B 0F939B 10 EF                   DONE                    CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00139D 0F939D MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00139D 0F939D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00139D 0F939D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00139D 0F939D 8F 1C A9                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013A0 0F93A0 18 25 01 C7                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013A4 0F93A4 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013A7 0F93A7 18 22 01 C6                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013AB 0F93AB -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013AB 0F93AB -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013AB 0F93AB 16 1A CB                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0013AE 0F93AE 24 B9                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0013B0 0F93B0 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
0013B0 0F93B0 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013B0 0F93B0 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013B0 0F93B0 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013B3 0F93B3 18 25 01 B4                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013B7 0F93B7 8F 1C AB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013BA 0F93BA 18 22 01 B3                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013BE 0F93BE -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013BE 0F93BE -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0013BE 0F93BE 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
0013C0 0F93C0 CD 00 00                                        LDY     #$0000
0013C3 0F93C3 C6 0A                                           LDAB    #10
0013C5 0F93C5 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0013C5 0F93C5 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0013C5 0F93C5 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013C5 0F93C5 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013C5 0F93C5 8F 1C A8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013C8 0F93C8 18 25 01 9F                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013CC 0F93CC 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013CF 0F93CF 18 22 01 9E                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013D3 0F93D3 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013D3 0F93D3 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013D3 0F93D3 16 1A 3A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0013D6 0F93D6 B7 76                                           TFR     SP, Y
0013D8 0F93D8 40                                              NEGA
0013D9 0F93D9 8B 05                                           ADDA    #5
0013DB 0F93DB C6 20                                           LDAB    #" "
0013DD 0F93DD MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0013DD 0F93DD MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0013DD 0F93DD MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013DD 0F93DD MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013DD 0F93DD 8F 1C 9F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013E0 0F93E0 18 25 01 87                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013E4 0F93E4 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013E7 0F93E7 18 22 01 86                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013EB 0F93EB -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013EB 0F93EB -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013EB 0F93EB 16 19 8D                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0013EE 0F93EE C6 0A                                           LDAB    #10
0013F0 0F93F0 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0013F0 0F93F0 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0013F0 0F93F0                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0013F0 0F93F0 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0013F0 0F93F0 MACRO                                           SCI_CALL_BL     SCI_TX_READY_NB, 4                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
0013F0 0F93F0 14 10                   LOOP                    SEI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
0013F2 0F93F2 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
0013F2 0F93F2 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013F2 0F93F2 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F2 0F93F2 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F5 0F93F5 18 25 01 72                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013F9 0F93F9 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0013FC 0F93FC 18 22 01 71                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001400 0F9400 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001400 0F9400 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001400 0F9400 16 16 0C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
001403 0F9403 25 1D                                           BCS     DONE            ;function successful             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001405 0F9405 MACRO                                           ISTACK_WAIT                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001405 0F9405 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001408 0F9408 18 25 01 6B                                     BLO     OF ;ISTACK_OF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00140C 0F940C 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00140F 0F940F 18 22 01 6A                                     BHI     UF ;ISTACK_UF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001413 0F9413 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001413 0F9413 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001418 0F9418 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00141D 0F941D 10 EF                                           CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00141F 0F941F 3E                                              WAI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001420 0F9420 -> $1577                OF                      EQU     ISTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001420 0F9420 -> $157D                UF                      EQU     ISTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001420 0F9420 -> $1420                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001420 0F9420 20 CE                                           JOB     LOOP                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001422 0F9422 10 EF                   DONE                    CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
001424 0F9424 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
001424 0F9424 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001424 0F9424 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001424 0F9424 8F 1C A9                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001427 0F9427 18 25 01 40                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00142B 0F942B 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00142E 0F942E 18 22 01 3F                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001432 0F9432 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001432 0F9432 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001432 0F9432 16 1A CB                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
001435 0F9435 24 B9                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
001437 0F9437 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
001437 0F9437 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001437 0F9437 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001437 0F9437 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00143A 0F943A 18 25 01 2D                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00143E 0F943E 8F 1C AB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001441 0F9441 18 22 01 2C                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001445 0F9445 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001445 0F9445 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001445 0F9445 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
001447 0F9447 CD 00 00                                        LDY     #$0000
00144A 0F944A C6 08                                           LDAB    #8
00144C 0F944C MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00144C 0F944C MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00144C 0F944C MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00144C 0F944C MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00144C 0F944C 8F 1C A8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00144F 0F944F 18 25 01 18                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001453 0F9453 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001456 0F9456 18 22 01 17                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00145A 0F945A -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00145A 0F945A -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00145A 0F945A 16 1A 3A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00145D 0F945D B7 76                                           TFR     SP, Y
00145F 0F945F 40                                              NEGA
001460 0F9460 8B 05                                           ADDA    #5
001462 0F9462 C6 20                                           LDAB    #" "
001464 0F9464 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001464 0F9464 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
001464 0F9464 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001464 0F9464 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001464 0F9464 8F 1C 9F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001467 0F9467 18 25 01 00                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00146B 0F946B 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00146E 0F946E 18 22 00 FF                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001472 0F9472 -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001472 0F9472 -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001472 0F9472 16 19 8D                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
001475 0F9475 C6 08                                           LDAB    #8
001477 0F9477 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
001477 0F9477 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
001477 0F9477                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
001477 0F9477 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
001477 0F9477 MACRO                                           SCI_CALL_BL     SCI_TX_READY_NB, 4                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001477 0F9477 14 10                   LOOP                    SEI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001479 0F9479 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
001479 0F9479 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001479 0F9479 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001479 0F9479 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00147C 0F947C 18 25 00 EB                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001480 0F9480 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001483 0F9483 18 22 00 EA                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001487 0F9487 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001487 0F9487 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001487 0F9487 16 16 0C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
00148A 0F948A 25 1D                                           BCS     DONE            ;function successful             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00148C 0F948C MACRO                                           ISTACK_WAIT                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00148C 0F948C 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00148F 0F948F 18 25 00 E4                                     BLO     OF ;ISTACK_OF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001493 0F9493 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001496 0F9496 18 22 00 E3                                     BHI     UF ;ISTACK_UF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00149A 0F949A MACRO                                           COP_SERVICE                     ;already taken care of by WAI (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00149A 0F949A 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00149F 0F949F 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
0014A4 0F94A4 10 EF                                           CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
0014A6 0F94A6 3E                                              WAI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
0014A7 0F94A7 -> $1577                OF                      EQU     ISTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
0014A7 0F94A7 -> $157D                UF                      EQU     ISTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
0014A7 0F94A7 -> $14A7                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
0014A7 0F94A7 20 CE                                           JOB     LOOP                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
0014A9 0F94A9 10 EF                   DONE                    CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0014AB 0F94AB MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0014AB 0F94AB MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014AB 0F94AB MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014AB 0F94AB 8F 1C A9                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014AE 0F94AE 18 25 00 B9                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014B2 0F94B2 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014B5 0F94B5 18 22 00 B8                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014B9 0F94B9 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014B9 0F94B9 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014B9 0F94B9 16 1A CB                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0014BC 0F94BC 24 B9                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0014BE 0F94BE MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
0014BE 0F94BE MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014BE 0F94BE MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014BE 0F94BE 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014C1 0F94C1 18 25 00 A6                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014C5 0F94C5 8F 1C AB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014C8 0F94C8 18 22 00 A5                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014CC 0F94CC -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014CC 0F94CC -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0014CC 0F94CC 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
0014CE 0F94CE 86 02                                           LDAA    #2
0014D0 0F94D0 C6 20                                           LDAB    #" "
0014D2 0F94D2 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0014D2 0F94D2 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0014D2 0F94D2 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014D2 0F94D2 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014D2 0F94D2 8F 1C 9F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014D5 0F94D5 18 25 00 92                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014D9 0F94D9 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014DC 0F94DC 18 22 00 91                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014E0 0F94E0 -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014E0 0F94E0 -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014E0 0F94E0 16 19 8D                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0014E3 0F94E3 CD 00 00                                        LDY     #$0000
0014E6 0F94E6 C6 02                                           LDAB    #2
0014E8 0F94E8 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0014E8 0F94E8 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0014E8 0F94E8 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0014E8 0F94E8 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014E8 0F94E8 8F 1C A8                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014EB 0F94EB 25 7E                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014ED 0F94ED 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F0 0F94F0 22 7F                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F2 0F94F2 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F2 0F94F2 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014F2 0F94F2 16 1A 3A                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0014F5 0F94F5 B7 76                                           TFR     SP, Y
0014F7 0F94F7 40                                              NEGA
0014F8 0F94F8 8B 08                                           ADDA    #8
0014FA 0F94FA C6 30                                           LDAB    #"0"
0014FC 0F94FC MACRO                                           STRING_fill_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0014FC 0F94FC MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0014FC 0F94FC MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014FC 0F94FC MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014FC 0F94FC 8F 1C 9F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0014FF 0F94FF 25 6A                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001501 0F9501 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001504 0F9504 22 6B                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001506 0F9506 -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001506 0F9506 -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001506 0F9506 16 19 8D                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
001509 0F9509 C6 02                                           LDAB    #2
00150B 0F950B MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00150B 0F950B MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00150B 0F950B                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00150B 0F950B MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00150B 0F950B MACRO                                           SCI_CALL_BL     SCI_TX_READY_NB, 4                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00150B 0F950B 14 10                   LOOP                    SEI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00150D 0F950D MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
00150D 0F950D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00150D 0F950D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00150D 0F950D 8F 1C 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001510 0F9510 25 59                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001512 0F9512 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001515 0F9515 22 5A                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001517 0F9517 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001517 0F9517 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001517 0F9517 16 16 0C                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/SSTACK_JOBSR)
00151A 0F951A 25 19                                           BCS     DONE            ;function successful             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
00151C 0F951C MACRO                                           ISTACK_WAIT                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00151C 0F951C 8F 1C 96                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
00151F 0F951F 25 56                                           BLO     OF ;ISTACK_OF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001521 0F9521 8F 1C B1                                        CPS     #ISTACK_BOTTOM                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001524 0F9524 22 57                                           BHI     UF ;ISTACK_UF                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001526 0F9526 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001526 0F9526 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00152B 0F952B 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001530 0F9530 10 EF                                           CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001532 0F9532 3E                                              WAI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001533 0F9533 -> $1577                OF                      EQU     ISTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001533 0F9533 -> $157D                UF                      EQU     ISTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
001533 0F9533 -> $1533                DONE                    EQU     *                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001533 0F9533 20 D6                                           JOB     LOOP                                             (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
001535 0F9535 10 EF                   DONE                    CLI                                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
001537 0F9537 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
001537 0F9537 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001537 0F9537 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001537 0F9537 8F 1C A9                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00153A 0F953A 25 2F                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00153C 0F953C 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00153F 0F953F 22 30                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001541 0F9541 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001541 0F9541 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001541 0F9541 16 1A CB                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
001544 0F9544 24 C5                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
001546 0F9546 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
001546 0F9546 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001546 0F9546 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001546 0F9546 8F 1C 96                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001549 0F9549 25 20                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00154B 0F954B 8F 1C AB                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00154E 0F954E 22 21                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001550 0F9550 -> $1571                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001550 0F9550 -> $156B                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001550 0F9550 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print new line
001552 0F9552 CE 22 0F                                        LDX     #STRING_STR_NL
001555 0F9555 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
001555 0F9555 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
001555 0F9555 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001555 0F9555 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001555 0F9555 8F 1C A0                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001558 0F9558 25 11                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00155A 0F955A 8F 1C B1                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00155D 0F955D 22 12                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00155F 0F955F -> $1571                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00155F 0F955F -> $156B                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00155F 0F955F 16 19 1E                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
001562 0F9562 06 12 A2                                        JOB     DEMO_LOOP
                                      ;                       ;Dump trace buffer
                                      ;DEMO_DUMP_TRACE                CLR     DBGC1
                                      ;                       LDD     2*64
                                      ;                       LDX     #DEMO_TRACE
                                      ;                       STX     DBGTBH
                                      ;DEMO_DUMP_TRACE_1      LDY     DBGTBH
                                      ;                       MOVW    DBGTBH, 2,X+
                                      ;                       STY     2,X+
                                      ;                       DBNE    D, DEMO_DUMP_TRACE_1
                                      ;                       BGND
001565 0F9565 -> $1565                DEMO_CODE_END           EQU     *
001565 0F9565 -> $F9565               DEMO_CODE_END_LIN       EQU     @
                                      ;                       ;Overwrite SWI interrupt vector
                                      ;                       ORG     VEC_SWI
                                      ;                       DW      DEMO_DUMP_TRACE
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001CE5 0F9CE5                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
001CE5 0F9CE5 MACRO                   DEMO_HEADER             STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001CE5 0F9CE5 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001CE6 0F9CE6 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001CE7 0F9CE7 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001CE7 0F9CE7 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001CE8 0F9CE8 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001CE9 0F9CE9 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
001D07 0F9D07 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001D07 0F9D07 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001D08 0F9D08 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001D09 0F9D09 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
001D27 0F9D27 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001D27 0F9D27 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001D28 0F9D28 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
001D29 0F9D29 -> $1D29                DEMO_TABS_END           EQU     *
001D29 0F9D29 -> $F9D29               DEMO_TABS_END_LIN       EQU     @
