#ifndef DFONT
#define	DFONT	
;###############################################################################
;# AriCalculator - DFONT - Font Generator for the Display Driver               #
;###############################################################################
;#    Copyright 2010-2017 Dirk Heisswolf                                       #
;#    This file is part of the S12CBase framework for NXP's S12C MCU family.   #
;#                                                                             #
;#    S12CBase is free software: you can redistribute it and/or modify         #
;#    it under the terms of the GNU General Public License as published by     #
;#    the Free Software Foundation, either version 3 of the License, or        #
;#    (at your option) any later version.                                      #
;#                                                                             #
;#    S12CBase is distributed in the hope that it will be useful,              #
;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
;#    GNU General Public License for more details.                             #
;#                                                                             #
;#    You should have received a copy of the GNU General Public License        #
;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
;###############################################################################
;# Description:                                                                #
;#    This is the low level driver for LCD using a ST7565R controller. This    #
;#    driver assumes, that the ST7565R is connected via the 4-wire SPI         #
;#    interface. The default pin mapping matches AriCalculator hardware RevC   #
;#                                                                             #
;#    By convention, the display must be switched to data mode when idle.      #
;#                                                                             #
;###############################################################################
;# Required Modules:                                                           #
;#    REGDEF - Register Definitions                                            #
;#    VECMAP - Vector Map                                                      #
;#    CLOCK  - Clock driver                                                    #
;#    GPIO   - GPIO driver                                                     #
;#    ISTACK - Interrupt Stack Handler                                         #
;#    SSTACK - Subroutine Stack Handler                                        #
;#    GPIO   - GPIO driver                                                     #
;#                                                                             #
;###############################################################################
;# Version History:                                                            #
;#    May 19, 2017                                                           #
;#      - Initial release                                                      #
;#                                                                             #
;###############################################################################

;###############################################################################
;# Configuration                                                               #
;###############################################################################

;###############################################################################
;# Constants                                                                   #
;###############################################################################
;
;###############################################################################
;# Variables                                                                   #
;###############################################################################
#ifdef DFONT_VARS_START_LIN
			ORG 	DFONT_VARS_START, DFONT_VARS_START_LIN
#else
			ORG 	DFONT_VARS_START
DFONT_VARS_START_LIN	EQU	@			
#endif	

	
DFONT_VARS_END		EQU	*
DFONT_VARS_END_LIN	EQU	@
	
;###############################################################################
;# Macros                                                                      #
;###############################################################################
;#Initialization
#macro	DFONT_INIT, 0
#emac


;###############################################################################
;# Code                                                                        #
;###############################################################################
#ifdef DFONT_CODE_START_LIN
			ORG 	DFONT_CODE_START, DFONT_CODE_START_LIN
#else
			ORG 	DFONT_CODE_START
DFONT_CODE_START_LIN	EQU	@
#endif
	
	
DFONT_CODE_END		EQU	*	
DFONT_CODE_END_LIN	EQU	@	
	
;###############################################################################
;# Tables                                                                      #
;###############################################################################
#ifdef DFONT_TABS_START_LIN
			ORG 	DFONT_TABS_START, DFONT_TABS_START_LIN
#else
			ORG 	DFONT_TABS_START
DFONT_TABS_START_LIN	EQU	@	
#endif	

Char_045		db	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00	; (-)

	
Char_048		db	0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00	; (0)
Char_049		db	0x00, 0x02, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00	; (1)
Char_050		db	0x62, 0x73, 0x59, 0x49, 0x4F, 0x46, 0x00, 0x00	; (2)
Char_051		db	0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00	; (3)
Char_052		db	0x18, 0x1C, 0x16, 0x13, 0x7F, 0x7F, 0x10, 0x00	; (4)
Char_053		db	0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00	; (5)
Char_054		db	0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00	; (6)
Char_055		db	0x01, 0x01, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00	; (7)
Char_056		db	0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00	; (8)
Char_057		db	0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00	; (9)

Char_065		db	0x00, 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00	; (A)
Char_066		db	0x00, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00	; (B)
Char_067		db	0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00	; (C)
Char_068		db	0x00, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00	; (D)
Char_069		db	0x00, 0x7F, 0x7F, 0x49, 0x49, 0x41, 0x41, 0x00	; (E)
Char_070		db	0x00, 0x7F, 0x7F, 0x09, 0x09, 0x01, 0x01, 0x00	; (F)



{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
 { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
 { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
 { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
 { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
 { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
 { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
 { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
 { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
 { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
 { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
 { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
 { 0x00, 0x00, 0x00, 0x50, 0x30, 0x00 },   // ,
 { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
 { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
 { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
 { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
 { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
 { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
 { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
 { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
 { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
 { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
 { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
 { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
 { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
 { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
 { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
 { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
 { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
 { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
 { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
 { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
 { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
 { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
 { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
 { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
 { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
 { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
 { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
 { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
 { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
 { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
 { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
 { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
 { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
 { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
 { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
 { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
 { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
 { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
 { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
 { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
 { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
 { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
 { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
 { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
 { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
 { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
 { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
 { 0x00, 0x04, 0x08, 0x10, 0x20, 0x40 },   // /
 { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
 { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
 { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
 { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
 { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
 { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
 { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
 { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
 { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
 { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
 { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
 { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
 { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
 { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
 { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
 { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
 { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
 { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
 { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
 { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
 { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
 { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
 { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
 { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
 { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
 { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
 { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
 { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
 { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
 { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
 { 0x00, 0x08, 0x36, 0x41, 0x41, 0x00 },   // {
 { 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00 },   // |
 { 0x00, 0x41, 0x41, 0x36, 0x08, 0x00 },   // }
 { 0x00, 0x02, 0x04, 0x02, 0x01, 0x02 }    // ~


	
	
DFONT_TABS_END		EQU	*
DFONT_TABS_END_LIN	EQU	@
#endif
