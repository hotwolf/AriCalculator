                                      ;###############################################################################
                                      ;# S12CBase - Demo (Mini-BDM-Pod)                                              #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
??????        -> $0001                CLOCK_CRG               EQU     1               ;CPMU
??????        -> $989680              CLOCK_OSC_FREQ          EQU     10000000        ;10 MHz
??????        -> $2FAF080             CLOCK_BUS_FREQ          EQU     50000000        ;50 MHz
??????        -> $989680              CLOCK_REF_FREQ          EQU     10000000        ;10 MHz
??????        -> $0003                CLOCK_VCOFRQ            EQU     3               ;VCO=100MHz
??????        -> $0002                CLOCK_REFFRQ            EQU     2               ;Ref=10Mhz
                                      ;# Memory map:
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;# Interrupt stack
??????        -> $0001                ISTACK_LEVELS           EQU     1               ;interrupt nesting not guaranteed
                                      ;ISTACK_DEBUG           EQU     1               ;don't enter wait mode
??????        -> $0001                ISTACK_NO_WAI           EQU     1               ;keep WAIs out
??????        -> $0001                ISTACK_S12X             EQU     1               ;S12X interrupt handling
                                      ;# Subroutine stack
??????        -> $001B                SSTACK_DEPTH            EQU     27              ;no interrupt nesting
                                      ;SSTACK_DEBUG           EQU     1               ;debug behavior
                                      ;# COP
                                      ;COP_DEBUG              EQU     1               ;disable COP
                                      ;# RESET
??????        -> $0001                RESET_CODERUN_OFF       EQU     1               ;don't report code runaways
??????        -> $1C56                RESET_WELCOME           EQU     DEMO_WELCOME    ;welcome message
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# SCI
??????        -> $0001                SCI_FC_XONXOFF          EQU     1               ;XON/XOFF flow control
??????        -> $0001                SCI_HANDLE_BREAK        EQU     1               ;react to BREAK symbol
??????        -> $0001                SCI_HANDLE_SUSPEND      EQU     1               ;react to SUSPEND symbol
??????        -> $0001                SCI_BD_ON               EQU     1               ;use baud rate detection
??????        -> $0001                SCI_BD_ECT              EQU     1               ;TIM
??????        -> $0000                SCI_BD_IC               EQU     0               ;IC0
??????        -> $0002                SCI_BD_OC               EQU     2               ;OC2
??????        -> $0003                SCI_DLY_OC              EQU     3               ;OC3
??????        -> $0001                SCI_ERRSIG_ON           EQU     1               ;signal errors
??????        -> $0001                SCI_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001000 0F9000                                                 ORG     MMAP_RAM_START, MMAP_RAM_START_LIN
                                      ;Code
001000 0F9000 -> $1000                START_OF_CODE           EQU     *
001000 0F9000 -> $1000                DEMO_CODE_START         EQU     *
001000 0F9000 -> $F9000               DEMO_CODE_START_LIN     EQU     @
001000 0F9000 -> $14D7                BASE_CODE_START         EQU     DEMO_CODE_END
001000 0F9000 -> $F94D7               BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Variables
001000 0F9000 -> $1BFB                DEMO_VARS_START         EQU     BASE_CODE_END
001000 0F9000 -> $F9BFB               DEMO_VARS_START_LIN     EQU     BASE_CODE_END_LIN
001000 0F9000 -> $1BFB                BASE_VARS_START         EQU     DEMO_VARS_END
001000 0F9000 -> $F9BFB               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
                                      ;Tables
001000 0F9000 -> $1C56                DEMO_TABS_START         EQU     BASE_VARS_END
001000 0F9000 -> $F9C56               DEMO_TABS_START_LIN     EQU     BASE_VARS_END_LIN
001000 0F9000 -> $1CC8                BASE_TABS_START         EQU     DEMO_TABS_END
001000 0F9000 -> $F9CC8               BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (Mini-BDM-Pod)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 20, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
001000 0F9000 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
                                      ;# RESET
001000 0F9000 -> $0001                RESET_COP_OFF           EQU     1
001000 0F9000 -> $0001                RESET_CLKFAIL_OFF       EQU     1
                                      ;# SCI
001000 0F9000 -> $0001                SCI_FC_XON_XOFF         EQU     1               ;XON/XOFF flow control
                                      ;# TIM
001000 0F9000 -> $0001                TIM_DIV2_ON             EQU     1               ;run TIM at half bus frequency
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001BFB 0F9BFB -> $1BFB                GPIO_VARS_START         EQU     *
001BFB 0F9BFB -> $F9BFB               GPIO_VARS_START_LIN     EQU     @
001BFB 0F9BFB -> $1BFB                MMAP_VARS_START         EQU     GPIO_VARS_END
001BFB 0F9BFB -> $F9BFB               MMAP_VARS_START_LIN     EQU     GPIO_VARS_END_LIN
001BFB 0F9BFB -> $1BFB                SSTACK_VARS_START       EQU     MMAP_VARS_END
001BFB 0F9BFB -> $F9BFB               SSTACK_VARS_START_LIN   EQU     MMAP_VARS_END_LIN
001BFB 0F9BFB -> $1BFB                ISTACK_VARS_START       EQU     SSTACK_VARS_END
001BFB 0F9BFB -> $F9BFB               ISTACK_VARS_START_LIN   EQU     SSTACK_VARS_END_LIN
001BFB 0F9BFB -> $1C20                CLOCK_VARS_START        EQU     ISTACK_VARS_END
001BFB 0F9BFB -> $F9C20               CLOCK_VARS_START_LIN    EQU     ISTACK_VARS_END_LIN
001BFB 0F9BFB -> $1C20                COP_VARS_START          EQU     CLOCK_VARS_END
001BFB 0F9BFB -> $F9C20               COP_VARS_START_LIN      EQU     CLOCK_VARS_END_LIN
001BFB 0F9BFB -> $1C20                TIM_VARS_START          EQU     COP_VARS_END
001BFB 0F9BFB -> $F9C20               TIM_VARS_START_LIN      EQU     COP_VARS_END_LIN
001BFB 0F9BFB -> $1C20                LED_VARS_START          EQU     TIM_VARS_END
001BFB 0F9BFB -> $F9C20               LED_VARS_START_LIN      EQU     TIM_VARS_END_LIN
001BFB 0F9BFB -> $1C20                TVMON_VARS_START        EQU     LED_VARS_END
001BFB 0F9BFB -> $F9C20               TVMON_VARS_START_LIN    EQU     LED_VARS_END_LIN
001BFB 0F9BFB -> $1C20                SCI_VARS_START          EQU     TVMON_VARS_END
001BFB 0F9BFB -> $F9C20               SCI_VARS_START_LIN      EQU     TVMON_VARS_END_LIN
001BFB 0F9BFB -> $1C52                STRING_VARS_START       EQU     SCI_VARS_END
001BFB 0F9BFB -> $F9C52               STRING_VARS_START_LIN   EQU     SCI_VARS_END_LIN
001BFB 0F9BFB -> $1C52                RESET_VARS_START        EQU     STRING_VARS_END
001BFB 0F9BFB -> $F9C52               RESET_VARS_START_LIN    EQU     STRING_VARS_END_LIN
001BFB 0F9BFB -> $1C56                NUM_VARS_START          EQU     RESET_VARS_END
001BFB 0F9BFB -> $F9C56               NUM_VARS_START_LIN      EQU     RESET_VARS_END_LIN
001BFB 0F9BFB -> $1C56                NVM_VARS_START          EQU     NUM_VARS_END
001BFB 0F9BFB -> $F9C56               NVM_VARS_START_LIN      EQU     NUM_VARS_END_LIN
001BFB 0F9BFB -> $1C56                VECTAB_VARS_START       EQU     NVM_VARS_END
001BFB 0F9BFB -> $F9C56               VECTAB_VARS_START_LIN   EQU     NVM_VARS_END_LIN
001BFB 0F9BFB -> $1C56                BASE_VARS_END           EQU     VECTAB_VARS_START
001BFB 0F9BFB -> $F9C56               BASE_VARS_END_LIN       EQU     VECTAB_VARS_START_LIN
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0014D7 0F94D7                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
0014D7 0F94D7 -> $14D7                GPIO_CODE_START         EQU     *
0014D7 0F94D7 -> $F94D7               GPIO_CODE_START_LIN     EQU     @
0014D7 0F94D7 -> $14D7                MMAP_CODE_START         EQU     GPIO_CODE_END
0014D7 0F94D7 -> $F94D7               MMAP_CODE_START_LIN     EQU     GPIO_CODE_END_LIN
0014D7 0F94D7 -> $14DD                SSTACK_CODE_START       EQU     MMAP_CODE_END
0014D7 0F94D7 -> $F94DD               SSTACK_CODE_START_LIN   EQU     MMAP_CODE_END_LIN
0014D7 0F94D7 -> $14E9                ISTACK_CODE_START       EQU     SSTACK_CODE_END
0014D7 0F94D7 -> $F94E9               ISTACK_CODE_START_LIN   EQU     SSTACK_CODE_END_LIN
0014D7 0F94D7 -> $14F5                CLOCK_CODE_START        EQU     ISTACK_CODE_END
0014D7 0F94D7 -> $F94F5               CLOCK_CODE_START_LIN    EQU     ISTACK_CODE_END_LIN
0014D7 0F94D7 -> $150E                COP_CODE_START          EQU     CLOCK_CODE_END
0014D7 0F94D7 -> $F950E               COP_CODE_START_LIN      EQU     CLOCK_CODE_END_LIN
0014D7 0F94D7 -> $150E                TIM_CODE_START          EQU     COP_CODE_END
0014D7 0F94D7 -> $F950E               TIM_CODE_START_LIN      EQU     COP_CODE_END_LIN
0014D7 0F94D7 -> $150E                LED_CODE_START          EQU     TIM_CODE_END
0014D7 0F94D7 -> $F950E               LED_CODE_START_LIN      EQU     TIM_CODE_END_LIN
0014D7 0F94D7 -> $150E                TVMON_CODE_START        EQU     LED_CODE_END
0014D7 0F94D7 -> $F950E               TVMON_CODE_START_LIN    EQU     LED_CODE_END_LIN
0014D7 0F94D7 -> $1555                SCI_CODE_START          EQU     TVMON_CODE_END
0014D7 0F94D7 -> $F9555               SCI_CODE_START_LIN      EQU     TVMON_CODE_END_LIN
0014D7 0F94D7 -> $1A40                STRING_CODE_START       EQU     SCI_CODE_END
0014D7 0F94D7 -> $F9A40               STRING_CODE_START_LIN   EQU     SCI_CODE_END_LIN
0014D7 0F94D7 -> $1AA4                RESET_CODE_START        EQU     STRING_CODE_END
0014D7 0F94D7 -> $F9AA4               RESET_CODE_START_LIN    EQU     STRING_CODE_END_LIN
0014D7 0F94D7 -> $1AF6                NUM_CODE_START          EQU     RESET_CODE_END
0014D7 0F94D7 -> $F9AF6               NUM_CODE_START_LIN      EQU     RESET_CODE_END_LIN
0014D7 0F94D7 -> $1BF6                NVM_CODE_START          EQU     NUM_CODE_END
0014D7 0F94D7 -> $F9BF6               NVM_CODE_START_LIN      EQU     NUM_CODE_END_LIN
0014D7 0F94D7 -> $1BFB                VECTAB_CODE_START       EQU     NVM_CODE_END
0014D7 0F94D7 -> $F9BFB               VECTAB_CODE_START_LIN   EQU     NVM_CODE_END_LIN
0014D7 0F94D7 -> $1BFB                BASE_CODE_END           EQU     VECTAB_CODE_START
0014D7 0F94D7 -> $F9BFB               BASE_CODE_END_LIN       EQU     VECTAB_CODE_START_LIN
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001CC8 0F9CC8                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
001CC8 0F9CC8 -> $1CC8                GPIO_TABS_START         EQU     *
001CC8 0F9CC8 -> $F9CC8               GPIO_TABS_START_LIN     EQU     @
001CC8 0F9CC8 -> $1CC8                MMAP_TABS_START         EQU     GPIO_TABS_END
001CC8 0F9CC8 -> $F9CC8               MMAP_TABS_START_LIN     EQU     GPIO_TABS_END_LIN
001CC8 0F9CC8 -> $1CD1                SSTACK_TABS_START       EQU     MMAP_TABS_END
001CC8 0F9CC8 -> $F9CD1               SSTACK_TABS_START_LIN   EQU     MMAP_TABS_END_LIN
001CC8 0F9CC8 -> $1D04                ISTACK_TABS_START       EQU     SSTACK_TABS_END
001CC8 0F9CC8 -> $F9D04               ISTACK_TABS_START_LIN   EQU     SSTACK_TABS_END_LIN
001CC8 0F9CC8 -> $1D35                CLOCK_TABS_START        EQU     ISTACK_TABS_END
001CC8 0F9CC8 -> $F9D35               CLOCK_TABS_START_LIN    EQU     ISTACK_TABS_END_LIN
001CC8 0F9CC8 -> $1D35                COP_TABS_START          EQU     CLOCK_TABS_END
001CC8 0F9CC8 -> $F9D35               COP_TABS_START_LIN      EQU     CLOCK_TABS_END_LIN
001CC8 0F9CC8 -> $1D35                TIM_TABS_START          EQU     COP_TABS_END
001CC8 0F9CC8 -> $F9D35               TIM_TABS_START_LIN      EQU     COP_TABS_END_LIN
001CC8 0F9CC8 -> $1D35                LED_TABS_START          EQU     TIM_TABS_END
001CC8 0F9CC8 -> $F9D35               LED_TABS_START_LIN      EQU     TIM_TABS_END_LIN
001CC8 0F9CC8 -> $1D35                TVMON_TABS_START        EQU     LED_TABS_END
001CC8 0F9CC8 -> $F9D35               TVMON_TABS_START_LIN    EQU     LED_TABS_END_LIN
001CC8 0F9CC8 -> $1D35                SCI_TABS_START          EQU     TVMON_TABS_END
001CC8 0F9CC8 -> $F9D35               SCI_TABS_START_LIN      EQU     TVMON_TABS_END_LIN
001CC8 0F9CC8 -> $2176                STRING_TABS_START       EQU     SCI_TABS_END
001CC8 0F9CC8 -> $FA176               STRING_TABS_START_LIN   EQU     SCI_TABS_END_LIN
001CC8 0F9CC8 -> $2179                RESET_TABS_START        EQU     STRING_TABS_END
001CC8 0F9CC8 -> $FA179               RESET_TABS_START_LIN    EQU     STRING_TABS_END_LIN
001CC8 0F9CC8 -> $219B                NUM_TABS_START          EQU     RESET_TABS_END
001CC8 0F9CC8 -> $FA19B               NUM_TABS_START_LIN      EQU     RESET_TABS_END_LIN
001CC8 0F9CC8 -> $21AC                NVM_TABS_START          EQU     NUM_TABS_END
001CC8 0F9CC8 -> $FA1AC               NVM_TABS_START_LIN      EQU     NUM_TABS_END_LIN
001CC8 0F9CC8 -> $21AC                VECTAB_TABS_START       EQU     NVM_TABS_END
001CC8 0F9CC8 -> $FA1AC               VECTAB_TABS_START_LIN   EQU     NVM_TABS_END_LIN
001CC8 0F9CC8 -> $21AC                BASE_TABS_END           EQU     VECTAB_TABS_START
001CC8 0F9CC8 -> $FA1AC               BASE_TABS_END_LIN       EQU     VECTAB_TABS_START_LIN
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
001CC8 0F9CC8 S12X CODE:                                      CPU     S12X
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (Mini-BDM-Pod)                     #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12C128.                     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;##################################
                                      ;# S12XEP100 Register Definitions #
                                      ;##################################
001CC8 0F9CC8 -> $0000                PORTA           EQU     $0000
001CC8 0F9CC8 -> $0080                PTA7            EQU     $80
001CC8 0F9CC8 -> $0040                PTA6            EQU     $40
001CC8 0F9CC8 -> $0020                PTA5            EQU     $20
001CC8 0F9CC8 -> $0010                PTA4            EQU     $10
001CC8 0F9CC8 -> $0008                PTA3            EQU     $08
001CC8 0F9CC8 -> $0004                PTA2            EQU     $04
001CC8 0F9CC8 -> $0002                PTA1            EQU     $02
001CC8 0F9CC8 -> $0001                PTA0            EQU     $01
001CC8 0F9CC8 -> $0080                PA7             EQU     $80
001CC8 0F9CC8 -> $0040                PA6             EQU     $40
001CC8 0F9CC8 -> $0020                PA5             EQU     $20
001CC8 0F9CC8 -> $0010                PA4             EQU     $10
001CC8 0F9CC8 -> $0008                PA3             EQU     $08
001CC8 0F9CC8 -> $0004                PA2             EQU     $04
001CC8 0F9CC8 -> $0002                PA1             EQU     $02
001CC8 0F9CC8 -> $0001                PA0             EQU     $01
001CC8 0F9CC8 -> $0001                PORTB           EQU     $0001
001CC8 0F9CC8 -> $0080                PTB7            EQU     $80
001CC8 0F9CC8 -> $0040                PTB6            EQU     $40
001CC8 0F9CC8 -> $0020                PTB5            EQU     $20
001CC8 0F9CC8 -> $0010                PTB4            EQU     $10
001CC8 0F9CC8 -> $0008                PTB3            EQU     $08
001CC8 0F9CC8 -> $0004                PTB2            EQU     $04
001CC8 0F9CC8 -> $0002                PTB1            EQU     $02
001CC8 0F9CC8 -> $0001                PTB0            EQU     $01
001CC8 0F9CC8 -> $0080                PB7             EQU     $80
001CC8 0F9CC8 -> $0040                PB6             EQU     $40
001CC8 0F9CC8 -> $0020                PB5             EQU     $20
001CC8 0F9CC8 -> $0010                PB4             EQU     $10
001CC8 0F9CC8 -> $0008                PB3             EQU     $08
001CC8 0F9CC8 -> $0004                PB2             EQU     $04
001CC8 0F9CC8 -> $0002                PB1             EQU     $02
001CC8 0F9CC8 -> $0001                PB0             EQU     $01
001CC8 0F9CC8 -> $0002                DDRA            EQU     $0002
001CC8 0F9CC8 -> $0080                DDRA7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRA6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRA5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRA4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRA3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRA2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRA1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRA0           EQU     $01
001CC8 0F9CC8 -> $0003                DDRB            EQU     $0003
001CC8 0F9CC8 -> $0080                DDRB7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRB6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRB5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRB4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRB3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRB2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRB1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRB0           EQU     $01
001CC8 0F9CC8 -> $0004                PORTC           EQU     $0004
001CC8 0F9CC8 -> $0080                PTC7            EQU     $80
001CC8 0F9CC8 -> $0040                PTC6            EQU     $40
001CC8 0F9CC8 -> $0020                PTC5            EQU     $20
001CC8 0F9CC8 -> $0010                PTC4            EQU     $10
001CC8 0F9CC8 -> $0008                PTC3            EQU     $08
001CC8 0F9CC8 -> $0004                PTC2            EQU     $04
001CC8 0F9CC8 -> $0002                PTC1            EQU     $02
001CC8 0F9CC8 -> $0001                PTC0            EQU     $01
001CC8 0F9CC8 -> $0080                PC7             EQU     $80
001CC8 0F9CC8 -> $0040                PC6             EQU     $40
001CC8 0F9CC8 -> $0020                PC5             EQU     $20
001CC8 0F9CC8 -> $0010                PC4             EQU     $10
001CC8 0F9CC8 -> $0008                PC3             EQU     $08
001CC8 0F9CC8 -> $0004                PC2             EQU     $04
001CC8 0F9CC8 -> $0002                PC1             EQU     $02
001CC8 0F9CC8 -> $0001                PC0             EQU     $01
001CC8 0F9CC8 -> $0005                PORTD           EQU     $0005
001CC8 0F9CC8 -> $0080                PTD7            EQU     $80
001CC8 0F9CC8 -> $0040                PTD6            EQU     $40
001CC8 0F9CC8 -> $0020                PTD5            EQU     $20
001CC8 0F9CC8 -> $0010                PTD4            EQU     $10
001CC8 0F9CC8 -> $0008                PTD3            EQU     $08
001CC8 0F9CC8 -> $0004                PTD2            EQU     $04
001CC8 0F9CC8 -> $0002                PTD1            EQU     $02
001CC8 0F9CC8 -> $0001                PTD0            EQU     $01
001CC8 0F9CC8 -> $0080                PD7             EQU     $80
001CC8 0F9CC8 -> $0040                PD6             EQU     $40
001CC8 0F9CC8 -> $0020                PD5             EQU     $20
001CC8 0F9CC8 -> $0010                PD4             EQU     $10
001CC8 0F9CC8 -> $0008                PD3             EQU     $08
001CC8 0F9CC8 -> $0004                PD2             EQU     $04
001CC8 0F9CC8 -> $0002                PD1             EQU     $02
001CC8 0F9CC8 -> $0001                PD0             EQU     $01
001CC8 0F9CC8 -> $0006                DDRC            EQU     $0006
001CC8 0F9CC8 -> $0080                DDRC7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRC6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRC5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRC4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRC3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRC2           EQU     $04
001CC8 0F9CC8 -> $0007                DDRD            EQU     $0007
001CC8 0F9CC8 -> $0080                DDRD7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRD6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRD5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRD4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRD3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRD2           EQU     $04
001CC8 0F9CC8 -> $0008                PORTE           EQU     $0008
001CC8 0F9CC8 -> $0080                PTE7            EQU     $80
001CC8 0F9CC8 -> $0040                PTE6            EQU     $40
001CC8 0F9CC8 -> $0020                PTE5            EQU     $20
001CC8 0F9CC8 -> $0010                PTE4            EQU     $10
001CC8 0F9CC8 -> $0008                PTE3            EQU     $08
001CC8 0F9CC8 -> $0004                PTE2            EQU     $04
001CC8 0F9CC8 -> $0002                PTE1            EQU     $02
001CC8 0F9CC8 -> $0001                PTE0            EQU     $01
001CC8 0F9CC8 -> $0080                PE7             EQU     $80
001CC8 0F9CC8 -> $0040                PE6             EQU     $40
001CC8 0F9CC8 -> $0020                PE5             EQU     $20
001CC8 0F9CC8 -> $0010                PE4             EQU     $10
001CC8 0F9CC8 -> $0008                PE3             EQU     $08
001CC8 0F9CC8 -> $0004                PE2             EQU     $04
001CC8 0F9CC8 -> $0002                PE1             EQU     $02
001CC8 0F9CC8 -> $0001                PE0             EQU     $01
001CC8 0F9CC8 -> $0009                DDRE            EQU     $0009
001CC8 0F9CC8 -> $0080                DDRE7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRE6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRE5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRE4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRE3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRE2           EQU     $04
001CC8 0F9CC8 -> $000A                MMCCTL0         EQU     $000A
001CC8 0F9CC8 -> $0080                CS3E1           EQU     $80
001CC8 0F9CC8 -> $0040                CS3E0           EQU     $40
001CC8 0F9CC8 -> $0020                CS2E1           EQU     $20
001CC8 0F9CC8 -> $0010                CS2E0           EQU     $10
001CC8 0F9CC8 -> $0008                CS1E1           EQU     $08
001CC8 0F9CC8 -> $0004                CS1E0           EQU     $04
001CC8 0F9CC8 -> $0002                CS0E1           EQU     $02
001CC8 0F9CC8 -> $0001                CS0E0           EQU     $01
001CC8 0F9CC8 -> $000B                MODE            EQU     $000B
001CC8 0F9CC8 -> $0080                MODC            EQU     $80
001CC8 0F9CC8 -> $0040                MODB            EQU     $40
001CC8 0F9CC8 -> $0020                MODA            EQU     $20
001CC8 0F9CC8 -> $000C                PUCR            EQU     $000C
001CC8 0F9CC8 -> $0080                PUPKE           EQU     $80
001CC8 0F9CC8 -> $0040                BKPUE           EQU     $40
001CC8 0F9CC8 -> $0010                PUPEE           EQU     $10
001CC8 0F9CC8 -> $0008                PUPDE           EQU     $08
001CC8 0F9CC8 -> $0004                PUPCE           EQU     $04
001CC8 0F9CC8 -> $0002                PUPBE           EQU     $02
001CC8 0F9CC8 -> $0001                PUPAE           EQU     $01
001CC8 0F9CC8 -> $000D                RDRIV           EQU     $000D
001CC8 0F9CC8 -> $0080                RDPK            EQU     $80
001CC8 0F9CC8 -> $0010                RDPE            EQU     $10
001CC8 0F9CC8 -> $0008                RDPD            EQU     $08
001CC8 0F9CC8 -> $0004                RDPC            EQU     $04
001CC8 0F9CC8 -> $0002                RDPB            EQU     $02
001CC8 0F9CC8 -> $0001                RDPA            EQU     $01
001CC8 0F9CC8 -> $000E                EBICTL0         EQU     $000E
001CC8 0F9CC8 -> $0080                ITHRS           EQU     $80
001CC8 0F9CC8 -> $0040                HDBE            EQU     $40
001CC8 0F9CC8 -> $0010                ASIZ4           EQU     $10
001CC8 0F9CC8 -> $0008                ASIZ3           EQU     $08
001CC8 0F9CC8 -> $0004                ASIZ2           EQU     $04
001CC8 0F9CC8 -> $0002                ASIZ1           EQU     $02
001CC8 0F9CC8 -> $0001                ASIZ0           EQU     $01
001CC8 0F9CC8 -> $000F                EBICTL1         EQU     $000F
001CC8 0F9CC8 -> $0040                EXSTR12         EQU     $40
001CC8 0F9CC8 -> $0020                EXSTR11         EQU     $20
001CC8 0F9CC8 -> $0010                EXSTR10         EQU     $10
001CC8 0F9CC8 -> $0004                EXSTR02         EQU     $04
001CC8 0F9CC8 -> $0002                EXSTR01         EQU     $02
001CC8 0F9CC8 -> $0001                EXSTR00         EQU     $01
001CC8 0F9CC8 -> $0010                GPAGE           EQU     $0010
001CC8 0F9CC8 -> $0020                GP6             EQU     $20
001CC8 0F9CC8 -> $0010                GP5             EQU     $10
001CC8 0F9CC8 -> $0008                GP4             EQU     $08
001CC8 0F9CC8 -> $0004                GP3             EQU     $04
001CC8 0F9CC8 -> $0002                GP2             EQU     $02
001CC8 0F9CC8 -> $0001                GP1             EQU     $01
001CC8 0F9CC8                         GP0
001CC8 0F9CC8 -> $0011                DIRECT          EQU     $0011
001CC8 0F9CC8 -> $0080                DP15            EQU     $80
001CC8 0F9CC8 -> $0040                DP14            EQU     $40
001CC8 0F9CC8 -> $0020                DP13            EQU     $20
001CC8 0F9CC8 -> $0010                DP12            EQU     $10
001CC8 0F9CC8 -> $0008                DP11            EQU     $08
001CC8 0F9CC8 -> $0004                DP10            EQU     $04
001CC8 0F9CC8 -> $0002                DP9             EQU     $02
001CC8 0F9CC8 -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
001CC8 0F9CC8 -> $0013                MMCCTL1         EQU     $0013
001CC8 0F9CC8 -> $0080                TGMRAMON        EQU     $80
001CC8 0F9CC8 -> $0020                EEEIFRON        EQU     $20
001CC8 0F9CC8 -> $0010                PGMIFRON        EQU     $10
001CC8 0F9CC8 -> $0008                RAMHM           EQU     $08
001CC8 0F9CC8 -> $0004                EROMON          EQU     $04
001CC8 0F9CC8 -> $0002                ROMHM           EQU     $02
001CC8 0F9CC8 -> $0001                ROMON           EQU     $01
                                      ;$0015 reserved
001CC8 0F9CC8 -> $0015                PPAGE           EQU     $0015
001CC8 0F9CC8 -> $0080                PIX7            EQU     $80
001CC8 0F9CC8 -> $0040                PIX6            EQU     $40
001CC8 0F9CC8 -> $0020                PIX5            EQU     $20
001CC8 0F9CC8 -> $0010                PIX4            EQU     $10
001CC8 0F9CC8 -> $0008                PIX3            EQU     $08
001CC8 0F9CC8 -> $0004                PIX2            EQU     $04
001CC8 0F9CC8 -> $0002                PIX1            EQU     $02
001CC8 0F9CC8 -> $0001                PIX0            EQU     $01
001CC8 0F9CC8 -> $0016                RPAGE           EQU     $0016
001CC8 0F9CC8 -> $0080                RP7             EQU     $80
001CC8 0F9CC8 -> $0040                RP6             EQU     $40
001CC8 0F9CC8 -> $0020                RP5             EQU     $20
001CC8 0F9CC8 -> $0010                RP4             EQU     $10
001CC8 0F9CC8 -> $0008                RP3             EQU     $08
001CC8 0F9CC8 -> $0004                RP2             EQU     $04
001CC8 0F9CC8 -> $0002                RP1             EQU     $02
001CC8 0F9CC8 -> $0001                RP0             EQU     $01
001CC8 0F9CC8 -> $0017                EPAGE           EQU     $0017
001CC8 0F9CC8 -> $0080                EP7             EQU     $80
001CC8 0F9CC8 -> $0040                EP6             EQU     $40
001CC8 0F9CC8 -> $0020                EP5             EQU     $20
001CC8 0F9CC8 -> $0010                EP4             EQU     $10
001CC8 0F9CC8 -> $0008                EP3             EQU     $08
001CC8 0F9CC8 -> $0004                EP2             EQU     $04
001CC8 0F9CC8 -> $0002                EP1             EQU     $02
001CC8 0F9CC8 -> $0001                EP0             EQU     $01
                                      ;$0018 to $0019 reserved
001CC8 0F9CC8 -> $001A                PARTIDH         EQU     $001A
001CC8 0F9CC8 -> $0080                ID15            EQU     $80
001CC8 0F9CC8 -> $0040                ID14            EQU     $40
001CC8 0F9CC8 -> $0020                ID13            EQU     $20
001CC8 0F9CC8 -> $0010                ID12            EQU     $10
001CC8 0F9CC8 -> $0008                ID11            EQU     $08
001CC8 0F9CC8 -> $0004                ID10            EQU     $04
001CC8 0F9CC8 -> $0002                ID9             EQU     $02
001CC8 0F9CC8 -> $0001                ID8             EQU     $01
001CC8 0F9CC8 -> $001B                PARTIDL         EQU     $001B
001CC8 0F9CC8 -> $0080                ID7             EQU     $80
001CC8 0F9CC8 -> $0040                ID6             EQU     $40
001CC8 0F9CC8 -> $0020                ID5             EQU     $20
001CC8 0F9CC8 -> $0010                ID4             EQU     $10
001CC8 0F9CC8 -> $0008                ID3             EQU     $08
001CC8 0F9CC8 -> $0004                ID2             EQU     $04
001CC8 0F9CC8 -> $0002                ID1             EQU     $02
001CC8 0F9CC8 -> $0001                ID0             EQU     $01
001CC8 0F9CC8 -> $001C                ECLKCTL         EQU     $001C
001CC8 0F9CC8 -> $0080                NECLK           EQU     $80
001CC8 0F9CC8 -> $0040                NCLKX2          EQU     $40
001CC8 0F9CC8 -> $0020                DIV16           EQU     $20
001CC8 0F9CC8 -> $0010                EDIV4           EQU     $10
001CC8 0F9CC8 -> $0008                EDIV3           EQU     $08
001CC8 0F9CC8 -> $0004                EDIV2           EQU     $04
001CC8 0F9CC8 -> $0002                EDIV1           EQU     $02
001CC8 0F9CC8 -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
001CC8 0F9CC8 -> $001E                IRQCR           EQU     $001E
001CC8 0F9CC8 -> $0080                IRQE            EQU     $80
001CC8 0F9CC8 -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
001CC8 0F9CC8 -> $0020                DBGC1           EQU     $0020
001CC8 0F9CC8 -> $0080                ARM             EQU     $80
001CC8 0F9CC8 -> $0040                TRIG            EQU     $40
001CC8 0F9CC8 -> $0020                XGSBPE          EQU     $20
001CC8 0F9CC8 -> $0010                BDM             EQU     $10
001CC8 0F9CC8 -> $0004                DBGBRK          EQU     $04
001CC8 0F9CC8 -> $0001                COMRV           EQU     $01
001CC8 0F9CC8 -> $0021                DBGSR           EQU     $0021
001CC8 0F9CC8 -> $0080                TBF             EQU     $80
001CC8 0F9CC8 -> $0040                EXTF            EQU     $40
001CC8 0F9CC8 -> $0004                SSF2            EQU     $04
001CC8 0F9CC8 -> $0002                SSF1            EQU     $02
001CC8 0F9CC8 -> $0001                SSF0            EQU     $01
001CC8 0F9CC8 -> $0022                DBGTCR          EQU     $0022
001CC8 0F9CC8 -> $00C0                TSOURCE         EQU     $C0
001CC8 0F9CC8 -> $0030                TRANGE          EQU     $30
001CC8 0F9CC8 -> $000C                TRCMOD          EQU     $0C
001CC8 0F9CC8 -> $0003                TALIGN          EQU     $03
001CC8 0F9CC8 -> $0023                DBGC2           EQU     $0023
001CC8 0F9CC8 -> $000C                CDCM            EQU     $0C
001CC8 0F9CC8 -> $0003                ABCM            EQU     $03
001CC8 0F9CC8 -> $0024                DBGTBH          EQU     $0024
001CC8 0F9CC8 -> $0080                DBGTB15         EQU     $80
001CC8 0F9CC8 -> $0040                DBGTB14         EQU     $40
001CC8 0F9CC8 -> $0020                DBGTB13         EQU     $20
001CC8 0F9CC8 -> $0010                DBGTB12         EQU     $10
001CC8 0F9CC8 -> $0008                DBGTB11         EQU     $08
001CC8 0F9CC8 -> $0004                DBGTB10         EQU     $04
001CC8 0F9CC8 -> $0002                DBGTB9          EQU     $02
001CC8 0F9CC8 -> $0001                DBGTB8          EQU     $01
001CC8 0F9CC8 -> $0025                DBGTBL          EQU     $0025
001CC8 0F9CC8 -> $0080                DBGTB7          EQU     $80
001CC8 0F9CC8 -> $0040                DBGTB6          EQU     $40
001CC8 0F9CC8 -> $0020                DBGTB5          EQU     $20
001CC8 0F9CC8 -> $0010                DBGTB4          EQU     $10
001CC8 0F9CC8 -> $0008                DBGTB3          EQU     $08
001CC8 0F9CC8 -> $0004                DBGTB2          EQU     $04
001CC8 0F9CC8 -> $0002                DBGTB1          EQU     $02
001CC8 0F9CC8 -> $0001                DBGTB0          EQU     $01
001CC8 0F9CC8 -> $0026                DBGCNT          EQU     $0026
001CC8 0F9CC8 -> $0027                DBGSCRX         EQU     $0027
001CC8 0F9CC8 -> $0008                SC3             EQU     $08
001CC8 0F9CC8 -> $0004                SC2             EQU     $04
001CC8 0F9CC8 -> $0002                SC1             EQU     $02
001CC8 0F9CC8 -> $0001                SC0             EQU     $01
001CC8 0F9CC8 -> $0027                DBGMFR          EQU     $0027
001CC8 0F9CC8 -> $0008                MC3             EQU     $08
001CC8 0F9CC8 -> $0004                MC2             EQU     $04
001CC8 0F9CC8 -> $0002                MC1             EQU     $02
001CC8 0F9CC8 -> $0001                MC0             EQU     $01
001CC8 0F9CC8 -> $0028                DBGXCTL         EQU     $0028
001CC8 0F9CC8 -> $0080                SZE             EQU     $80
001CC8 0F9CC8 -> $0040                SZ              EQU     $40
001CC8 0F9CC8 -> $0020                TAG             EQU     $20
001CC8 0F9CC8 -> $0010                BRK             EQU     $10
001CC8 0F9CC8 -> $0008                RW              EQU     $08
001CC8 0F9CC8 -> $0004                RWE             EQU     $04
001CC8 0F9CC8 -> $0002                SRC             EQU     $02
001CC8 0F9CC8 -> $0001                COMPE           EQU     $01
001CC8 0F9CC8 -> $0029                DBGXAH          EQU    $0029
001CC8 0F9CC8 -> $0040                DBGXA22         EQU    $40
001CC8 0F9CC8 -> $0020                DBGXA21         EQU    $20
001CC8 0F9CC8 -> $0010                DBGXA20         EQU    $10
001CC8 0F9CC8 -> $0008                DBGXA19         EQU    $08
001CC8 0F9CC8 -> $0004                DBGXA18         EQU    $04
001CC8 0F9CC8 -> $0002                DBGXA17         EQU    $02
001CC8 0F9CC8 -> $0001                DBGXA16         EQU    $01
001CC8 0F9CC8 -> $002A                DBGXAM          EQU     $002A
001CC8 0F9CC8 -> $0080                DBGXA15         EQU     $80
001CC8 0F9CC8 -> $0040                DBGXA14         EQU     $40
001CC8 0F9CC8 -> $0020                DBGXA13         EQU     $20
001CC8 0F9CC8 -> $0010                DBGXA12         EQU     $10
001CC8 0F9CC8 -> $0008                DBGXA11         EQU     $08
001CC8 0F9CC8 -> $0004                DBGXA10         EQU     $04
001CC8 0F9CC8 -> $0002                DBGXA9          EQU     $02
001CC8 0F9CC8 -> $0001                DBGXA8          EQU     $01
001CC8 0F9CC8 -> $002B                DBGXAL          EQU     $002B
001CC8 0F9CC8 -> $0080                DBGXA7          EQU     $80
001CC8 0F9CC8 -> $0040                DBGXA6          EQU     $40
001CC8 0F9CC8 -> $0020                DBGXA5          EQU     $20
001CC8 0F9CC8 -> $0010                DBGXA4          EQU     $10
001CC8 0F9CC8 -> $0008                DBGXA3          EQU     $08
001CC8 0F9CC8 -> $0004                DBGXA2          EQU     $04
001CC8 0F9CC8 -> $0002                DBGXA1          EQU     $02
001CC8 0F9CC8 -> $0001                DBGXA0          EQU     $01
001CC8 0F9CC8 -> $002C                DBGXDH          EQU     $002C
001CC8 0F9CC8 -> $0080                DBGXD15         EQU     $80
001CC8 0F9CC8 -> $0040                DBGXD14         EQU     $40
001CC8 0F9CC8 -> $0020                DBGXD13         EQU     $20
001CC8 0F9CC8 -> $0010                DBGXD12         EQU     $10
001CC8 0F9CC8 -> $0008                DBGXD11         EQU     $08
001CC8 0F9CC8 -> $0004                DBGXD10         EQU     $04
001CC8 0F9CC8 -> $0002                DBGXD9          EQU     $02
001CC8 0F9CC8 -> $0001                DBGXD8          EQU     $01
001CC8 0F9CC8 -> $002D                DBGXDL          EQU     $002D
001CC8 0F9CC8 -> $0080                DBGXD7          EQU     $80
001CC8 0F9CC8 -> $0040                DBGXD6          EQU     $40
001CC8 0F9CC8 -> $0020                DBGXD5          EQU     $20
001CC8 0F9CC8 -> $0010                DBGXD4          EQU     $10
001CC8 0F9CC8 -> $0008                DBGXD3          EQU     $08
001CC8 0F9CC8 -> $0004                DBGXD2          EQU     $04
001CC8 0F9CC8 -> $0002                DBGXD1          EQU     $02
001CC8 0F9CC8 -> $0001                DBGXD0          EQU     $01
001CC8 0F9CC8 -> $002E                DBGXDHM         EQU     $002E
001CC8 0F9CC8 -> $0080                DBGXDM15        EQU     $80
001CC8 0F9CC8 -> $0040                DBGXDM14        EQU     $40
001CC8 0F9CC8 -> $0020                DBGXDM13        EQU     $20
001CC8 0F9CC8 -> $0010                DBGXDM12        EQU     $10
001CC8 0F9CC8 -> $0008                DBGXDM11        EQU     $08
001CC8 0F9CC8 -> $0004                DBGXDM10        EQU     $04
001CC8 0F9CC8 -> $0002                DBGXDM9         EQU     $02
001CC8 0F9CC8 -> $0001                DBGXDM8         EQU     $01
001CC8 0F9CC8 -> $002F                DBGXDLM         EQU     $002F
001CC8 0F9CC8 -> $0080                DBGXDM7         EQU     $80
001CC8 0F9CC8 -> $0040                DBGXDM6         EQU     $40
001CC8 0F9CC8 -> $0020                DBGXDM5         EQU     $20
001CC8 0F9CC8 -> $0010                DBGXDM4         EQU     $10
001CC8 0F9CC8 -> $0008                DBGXDM3         EQU     $08
001CC8 0F9CC8 -> $0004                DBGXDM2         EQU     $04
001CC8 0F9CC8 -> $0002                DBGXDM1         EQU     $02
001CC8 0F9CC8 -> $0001                DBGXDM0         EQU     $01
                                      ;$0030 to $0031 reserved
001CC8 0F9CC8 -> $0032                PORTK           EQU     $0032
001CC8 0F9CC8 -> $0080                PTK7            EQU     $80
001CC8 0F9CC8 -> $0040                PTK6            EQU     $40
001CC8 0F9CC8 -> $0020                PTK5            EQU     $20
001CC8 0F9CC8 -> $0010                PTK4            EQU     $10
001CC8 0F9CC8 -> $0008                PTK3            EQU     $08
001CC8 0F9CC8 -> $0004                PTK2            EQU     $04
001CC8 0F9CC8 -> $0002                PTK1            EQU     $02
001CC8 0F9CC8 -> $0001                PK0             EQU     $01
001CC8 0F9CC8 -> $0080                PK7             EQU     $80
001CC8 0F9CC8 -> $0040                PK6             EQU     $40
001CC8 0F9CC8 -> $0020                PK5             EQU     $20
001CC8 0F9CC8 -> $0010                PK4             EQU     $10
001CC8 0F9CC8 -> $0008                PK3             EQU     $08
001CC8 0F9CC8 -> $0004                PK2             EQU     $04
001CC8 0F9CC8 -> $0002                PK1             EQU     $02
001CC8 0F9CC8 -> $0001                PK0             EQU     $01
001CC8 0F9CC8 -> $0033                DDRK            EQU     $0033
001CC8 0F9CC8 -> $0080                DDRK7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRK6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRK5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRK4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRK3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRK2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRK1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRK0           EQU     $01
001CC8 0F9CC8 -> $0034                SYNR            EQU     $0034
001CC8 0F9CC8 -> $0080                VCOFRQ1         EQU     $80
001CC8 0F9CC8 -> $0040                VCOFRQ0         EQU     $40
001CC8 0F9CC8 -> $0020                SYNDIV5         EQU     $20
001CC8 0F9CC8 -> $0010                SYNDIV4         EQU     $10
001CC8 0F9CC8 -> $0008                SYNDIV3         EQU     $08
001CC8 0F9CC8 -> $0004                SYNDIV2         EQU     $04
001CC8 0F9CC8 -> $0002                SYNDIV1         EQU     $02
001CC8 0F9CC8 -> $0001                SYNDIV0         EQU     $01
001CC8 0F9CC8 -> $0035                REFDV           EQU     $0035
001CC8 0F9CC8 -> $0080                REFFRQ1         EQU     $80
001CC8 0F9CC8 -> $0040                REFFRQ0         EQU     $40
001CC8 0F9CC8 -> $0008                REFDIV3         EQU     $08
001CC8 0F9CC8 -> $0004                REFDIV2         EQU     $04
001CC8 0F9CC8 -> $0002                REFDIV1         EQU     $02
001CC8 0F9CC8 -> $0001                REFDIV0         EQU     $01
001CC8 0F9CC8 -> $0036                POSTDIV         EQU     $0036
001CC8 0F9CC8 -> $0010                POSTDIV4        EQU     $10
001CC8 0F9CC8 -> $0008                POSTDIV3        EQU     $08
001CC8 0F9CC8 -> $0004                POSTDIV2        EQU     $04
001CC8 0F9CC8 -> $0002                POSTDIV1        EQU     $02
001CC8 0F9CC8 -> $0001                POSTDIV0        EQU     $01
001CC8 0F9CC8 -> $0037                CRGFLG          EQU     $0037
001CC8 0F9CC8 -> $0080                RTIF            EQU     $80
001CC8 0F9CC8 -> $0040                PORF            EQU     $40
001CC8 0F9CC8 -> $0020                LVRF            EQU     $20
001CC8 0F9CC8 -> $0010                LOCKIF          EQU     $10
001CC8 0F9CC8 -> $0008                LOCK            EQU     $08
001CC8 0F9CC8 -> $0004                ILAF            EQU     $04
001CC8 0F9CC8 -> $0002                SCMIF           EQU     $02
001CC8 0F9CC8 -> $0001                SCM             EQU     $01
001CC8 0F9CC8 -> $0038                CRGINT          EQU     $0038
001CC8 0F9CC8 -> $0080                RTIE            EQU     $80
001CC8 0F9CC8 -> $0010                LOCKIE          EQU     $10
001CC8 0F9CC8 -> $0002                SCMIE           EQU     $02
001CC8 0F9CC8 -> $0039                CLKSEL          EQU     $0039
001CC8 0F9CC8 -> $0080                PLLSEL          EQU     $80
001CC8 0F9CC8 -> $0040                PSTP            EQU     $40
001CC8 0F9CC8 -> $0020                XCLKS           EQU     $20
001CC8 0F9CC8 -> $0008                PLLWAI          EQU     $08
001CC8 0F9CC8 -> $0002                RTIWAI          EQU     $02
001CC8 0F9CC8 -> $0001                COPWAI          EQU     $01
001CC8 0F9CC8 -> $003A                PLLCTL          EQU     $003A
001CC8 0F9CC8 -> $0080                CME             EQU     $80
001CC8 0F9CC8 -> $0040                PLLON           EQU     $40
001CC8 0F9CC8 -> $0020                FM1             EQU     $20
001CC8 0F9CC8 -> $0010                FM0             EQU     $10
001CC8 0F9CC8 -> $0008                FSTWKP          EQU     $08
001CC8 0F9CC8 -> $0004                PRE             EQU     $04
001CC8 0F9CC8 -> $0002                PCE             EQU     $02
001CC8 0F9CC8 -> $0001                SCME            EQU     $01
001CC8 0F9CC8 -> $003B                RTICTL          EQU     $003B
001CC8 0F9CC8 -> $0080                RTDEC           EQU     $80
001CC8 0F9CC8 -> $0040                RTR6            EQU     $40
001CC8 0F9CC8 -> $0020                RTR5            EQU     $20
001CC8 0F9CC8 -> $0010                RTR4            EQU     $10
001CC8 0F9CC8 -> $0008                RTR3            EQU     $08
001CC8 0F9CC8 -> $0004                RTR2            EQU     $04
001CC8 0F9CC8 -> $0002                RTR1            EQU     $02
001CC8 0F9CC8 -> $0001                RTR0            EQU     $01
001CC8 0F9CC8 -> $003C                COPCTL          EQU     $003C
001CC8 0F9CC8 -> $0080                WCOP            EQU     $80
001CC8 0F9CC8 -> $0040                RSBCK           EQU     $40
001CC8 0F9CC8 -> $0020                WRTMASK         EQU     $20
001CC8 0F9CC8 -> $0004                CR2             EQU     $04
001CC8 0F9CC8 -> $0002                CR1             EQU     $02
001CC8 0F9CC8 -> $0001                CR0             EQU     $01
001CC8 0F9CC8 -> $003D                FORBYP          EQU     $003D
001CC8 0F9CC8 -> $003E                CTCTL           EQU     $003E
001CC8 0F9CC8 -> $003F                ARMCOP          EQU     $003F
001CC8 0F9CC8 -> $0040                TIOS            EQU     $0040
001CC8 0F9CC8 -> $0040                ECT_TIOS        EQU     $0040
001CC8 0F9CC8 -> $0080                IOS7            EQU     $80
001CC8 0F9CC8 -> $0040                IOS6            EQU     $40
001CC8 0F9CC8 -> $0020                IOS5            EQU     $20
001CC8 0F9CC8 -> $0010                IOS4            EQU     $10
001CC8 0F9CC8 -> $0008                IOS3            EQU     $08
001CC8 0F9CC8 -> $0004                IOS2            EQU     $04
001CC8 0F9CC8 -> $0002                IOS1            EQU     $02
001CC8 0F9CC8 -> $0001                IOS0            EQU     $01
001CC8 0F9CC8 -> $0041                TCFORC          EQU     $0041
001CC8 0F9CC8 -> $0041                ECT_TCFORC      EQU     $0041
001CC8 0F9CC8 -> $0080                FOC7            EQU     $80
001CC8 0F9CC8 -> $0040                FOC6            EQU     $40
001CC8 0F9CC8 -> $0020                FOC5            EQU     $20
001CC8 0F9CC8 -> $0010                FOC4            EQU     $10
001CC8 0F9CC8 -> $0008                FOC3            EQU     $08
001CC8 0F9CC8 -> $0004                FOC2            EQU     $04
001CC8 0F9CC8 -> $0002                FOC1            EQU     $02
001CC8 0F9CC8 -> $0001                FOC0            EQU     $01
001CC8 0F9CC8 -> $0042                TOC7M           EQU     $0042
001CC8 0F9CC8 -> $0042                ECT_TOC7M       EQU     $0042
001CC8 0F9CC8 -> $0080                OC7M7           EQU     $80
001CC8 0F9CC8 -> $0040                OC7M6           EQU     $40
001CC8 0F9CC8 -> $0020                OC7M5           EQU     $20
001CC8 0F9CC8 -> $0010                OC7M4           EQU     $10
001CC8 0F9CC8 -> $0008                OC7M3           EQU     $08
001CC8 0F9CC8 -> $0004                OC7M2           EQU     $04
001CC8 0F9CC8 -> $0002                OC7M1           EQU     $02
001CC8 0F9CC8 -> $0001                OC7M0           EQU     $01
001CC8 0F9CC8 -> $0043                TOC7D           EQU     $0043
001CC8 0F9CC8 -> $0043                ECT_TOC7D       EQU     $0043
001CC8 0F9CC8 -> $0080                OC7D7           EQU     $80
001CC8 0F9CC8 -> $0040                OC7D6           EQU     $40
001CC8 0F9CC8 -> $0020                OC7D5           EQU     $20
001CC8 0F9CC8 -> $0010                OC7D4           EQU     $10
001CC8 0F9CC8 -> $0008                OC7D3           EQU     $08
001CC8 0F9CC8 -> $0004                OC7D2           EQU     $04
001CC8 0F9CC8 -> $0002                OC7D1           EQU     $02
001CC8 0F9CC8 -> $0001                OC7D0           EQU     $01
001CC8 0F9CC8 -> $0044                TCNT            EQU     $0044
001CC8 0F9CC8 -> $0044                ECT_TCNT        EQU     $0044
001CC8 0F9CC8 -> $0046                TSCR1           EQU     $0046
001CC8 0F9CC8 -> $0046                ECT_TSCR1       EQU     $0046
001CC8 0F9CC8 -> $0080                TEN             EQU     $80
001CC8 0F9CC8 -> $0040                TSWAI           EQU     $40
001CC8 0F9CC8 -> $0020                TSFRZ           EQU     $20
001CC8 0F9CC8 -> $0010                TFFCA           EQU     $10
001CC8 0F9CC8 -> $0047                TTOV            EQU     $0047
001CC8 0F9CC8 -> $0047                ECT_TTOV        EQU     $0047
001CC8 0F9CC8 -> $0080                TOV7            EQU     $80
001CC8 0F9CC8 -> $0040                TOV6            EQU     $40
001CC8 0F9CC8 -> $0020                TOV5            EQU     $20
001CC8 0F9CC8 -> $0010                TOV4            EQU     $10
001CC8 0F9CC8 -> $0008                TOV3            EQU     $08
001CC8 0F9CC8 -> $0004                TOV2            EQU     $04
001CC8 0F9CC8 -> $0002                TOV1            EQU     $02
001CC8 0F9CC8 -> $0001                TOV0            EQU     $01
001CC8 0F9CC8 -> $0048                TCTL1           EQU     $0048
001CC8 0F9CC8 -> $0048                ECT_TCTL1       EQU     $0048
001CC8 0F9CC8 -> $0080                OM7             EQU     $80
001CC8 0F9CC8 -> $0040                OL7             EQU     $40
001CC8 0F9CC8 -> $0020                OM6             EQU     $20
001CC8 0F9CC8 -> $0010                OL6             EQU     $10
001CC8 0F9CC8 -> $0008                OM5             EQU     $08
001CC8 0F9CC8 -> $0004                OL5             EQU     $04
001CC8 0F9CC8 -> $0002                OM4             EQU     $02
001CC8 0F9CC8 -> $0001                OL4             EQU     $01
001CC8 0F9CC8 -> $0049                TCTL2           EQU     $0049
001CC8 0F9CC8 -> $0049                ECT_TCTL2       EQU     $0049
001CC8 0F9CC8 -> $0080                OM3             EQU     $80
001CC8 0F9CC8 -> $0040                OL3             EQU     $40
001CC8 0F9CC8 -> $0020                OM2             EQU     $20
001CC8 0F9CC8 -> $0010                OL2             EQU     $10
001CC8 0F9CC8 -> $0008                OM1             EQU     $08
001CC8 0F9CC8 -> $0004                OL1             EQU     $04
001CC8 0F9CC8 -> $0002                OM0             EQU     $02
001CC8 0F9CC8 -> $0001                OL0             EQU     $01
001CC8 0F9CC8 -> $004A                TCTL3           EQU     $004A
001CC8 0F9CC8 -> $004A                ECT_TCTL3       EQU     $004A
001CC8 0F9CC8 -> $0080                EDG7B           EQU     $80
001CC8 0F9CC8 -> $0040                EDG7A           EQU     $40
001CC8 0F9CC8 -> $0020                EDG6B           EQU     $20
001CC8 0F9CC8 -> $0010                EDG6A           EQU     $10
001CC8 0F9CC8 -> $0008                EDG5B           EQU     $08
001CC8 0F9CC8 -> $0004                EDG5A           EQU     $04
001CC8 0F9CC8 -> $0002                EDG4B           EQU     $02
001CC8 0F9CC8 -> $0001                EDG4A           EQU     $01
001CC8 0F9CC8 -> $004B                TCTL4           EQU     $004B
001CC8 0F9CC8 -> $004B                ECT_TCTL4       EQU     $004B
001CC8 0F9CC8 -> $0080                EDG3B           EQU     $80
001CC8 0F9CC8 -> $0040                EDG3A           EQU     $40
001CC8 0F9CC8 -> $0020                EDG2B           EQU     $20
001CC8 0F9CC8 -> $0010                EDG2A           EQU     $10
001CC8 0F9CC8 -> $0008                EDG1B           EQU     $08
001CC8 0F9CC8 -> $0004                EDG1A           EQU     $04
001CC8 0F9CC8 -> $0002                EDG0B           EQU     $02
001CC8 0F9CC8 -> $0001                EDG0A           EQU     $01
001CC8 0F9CC8 -> $004C                TIE             EQU     $004C
001CC8 0F9CC8 -> $004C                ECT_TIE         EQU     $004C
001CC8 0F9CC8 -> $0080                C7I             EQU     $80
001CC8 0F9CC8 -> $0040                C6I             EQU     $40
001CC8 0F9CC8 -> $0020                C5I             EQU     $20
001CC8 0F9CC8 -> $0010                C4I             EQU     $10
001CC8 0F9CC8 -> $0008                C3I             EQU     $08
001CC8 0F9CC8 -> $0004                C2I             EQU     $04
001CC8 0F9CC8 -> $0002                C1I             EQU     $02
001CC8 0F9CC8 -> $0001                C0I             EQU     $01
001CC8 0F9CC8 -> $004D                TSCR2           EQU     $004D
001CC8 0F9CC8 -> $004D                ECT_TSCR2       EQU     $004D
001CC8 0F9CC8 -> $0080                TOI             EQU     $80
001CC8 0F9CC8 -> $0008                TCRE            EQU     $08
001CC8 0F9CC8 -> $0004                PR2             EQU     $04
001CC8 0F9CC8 -> $0002                PR1             EQU     $02
001CC8 0F9CC8 -> $0001                PR0             EQU     $01
001CC8 0F9CC8 -> $004E                TFLG1           EQU     $004E
001CC8 0F9CC8 -> $004E                ECT_TFLG1       EQU     $004E
001CC8 0F9CC8 -> $0080                C7F             EQU     $80
001CC8 0F9CC8 -> $0040                C6F             EQU     $40
001CC8 0F9CC8 -> $0020                C5F             EQU     $20
001CC8 0F9CC8 -> $0010                C4F             EQU     $10
001CC8 0F9CC8 -> $0008                C3F             EQU     $08
001CC8 0F9CC8 -> $0004                C2F             EQU     $04
001CC8 0F9CC8 -> $0002                C1F             EQU     $02
001CC8 0F9CC8 -> $0001                C0F             EQU     $01
001CC8 0F9CC8 -> $004F                TFLG2           EQU     $004F
001CC8 0F9CC8 -> $004F                ECT_TFLG2       EQU     $004F
001CC8 0F9CC8 -> $0080                TOF             EQU     $80
001CC8 0F9CC8 -> $0050                TC0             EQU     $0050
001CC8 0F9CC8 -> $0050                ECT_TC0         EQU     $0050
001CC8 0F9CC8 -> $0052                TC1             EQU     $0052
001CC8 0F9CC8 -> $0052                ECT_TC1         EQU     $0052
001CC8 0F9CC8 -> $0054                TC2             EQU     $0054
001CC8 0F9CC8 -> $0056                ECT_TC3         EQU     $0056
001CC8 0F9CC8 -> $0056                TC3             EQU     $0056
001CC8 0F9CC8 -> $0058                ECT_TC4         EQU     $0058
001CC8 0F9CC8 -> $0058                TC4             EQU     $0058
001CC8 0F9CC8 -> $005A                ECT_TC5         EQU     $005A
001CC8 0F9CC8 -> $005A                TC5             EQU     $005A
001CC8 0F9CC8 -> $005C                ECT_TC6         EQU     $005C
001CC8 0F9CC8 -> $005E                TC7             EQU     $005E
001CC8 0F9CC8 -> $005E                ECT_TC7         EQU     $005E
001CC8 0F9CC8 -> $0060                PACTL           EQU     $0060
001CC8 0F9CC8 -> $0060                ECT_PACTL       EQU     $0060
001CC8 0F9CC8 -> $0040                PAEN            EQU     $40
001CC8 0F9CC8 -> $0020                PAMOD           EQU     $20
001CC8 0F9CC8 -> $0010                PEDGE           EQU     $10
001CC8 0F9CC8 -> $0008                CLK1            EQU     $08
001CC8 0F9CC8 -> $0004                CLK0            EQU     $04
001CC8 0F9CC8 -> $0002                PAOVI           EQU     $02
001CC8 0F9CC8 -> $0001                PAI             EQU     $01
001CC8 0F9CC8 -> $0061                PAFLG           EQU     $0061
001CC8 0F9CC8 -> $0061                ECT_PAFLG       EQU     $0061
001CC8 0F9CC8 -> $0002                PAOVF           EQU     $02
001CC8 0F9CC8 -> $0001                PAIF            EQU     $01
001CC8 0F9CC8 -> $0062                PACNT           EQU     $0062
001CC8 0F9CC8 -> $0062                ECT_PACNT       EQU     $0062
001CC8 0F9CC8 -> $0062                PACN3           EQU     $0062
001CC8 0F9CC8 -> $0062                ECT_PACN3       EQU     $0062
001CC8 0F9CC8 -> $0063                PACN2           EQU     $0063
001CC8 0F9CC8 -> $0063                ECT_PACN2       EQU     $0063
001CC8 0F9CC8 -> $0064                PACN1           EQU     $0064
001CC8 0F9CC8 -> $0064                ECT_PACN1       EQU     $0064
001CC8 0F9CC8 -> $0065                PACN0           EQU     $0065
001CC8 0F9CC8 -> $0065                ECT_PACN0       EQU     $0065
001CC8 0F9CC8 -> $0066                MCCTL           EQU     $0066
001CC8 0F9CC8 -> $0066                ECT_MCCTL       EQU     $0066
001CC8 0F9CC8 -> $0080                MCZI            EQU     $80
001CC8 0F9CC8 -> $0040                MODMC           EQU     $40
001CC8 0F9CC8 -> $0020                RDMCL           EQU     $20
001CC8 0F9CC8 -> $0010                ICLAT           EQU     $10
001CC8 0F9CC8 -> $0008                FLMC            EQU     $08
001CC8 0F9CC8 -> $0004                MCEN            EQU     $04
001CC8 0F9CC8 -> $0002                MCPR1           EQU     $02
001CC8 0F9CC8 -> $0001                MCPR0           EQU     $01
001CC8 0F9CC8 -> $0067                MCFLG           EQU     $0067
001CC8 0F9CC8 -> $0067                ECT_MCFLG       EQU     $0067
001CC8 0F9CC8 -> $0080                MCZF            EQU     $80
001CC8 0F9CC8 -> $0008                POLF3           EQU     $08
001CC8 0F9CC8 -> $0004                POLF2           EQU     $04
001CC8 0F9CC8 -> $0002                POLF1           EQU     $02
001CC8 0F9CC8 -> $0001                POLF0           EQU     $01
001CC8 0F9CC8 -> $0068                ICPAR           EQU     $0068
001CC8 0F9CC8 -> $0068                ECT_ICPAR       EQU     $0068
001CC8 0F9CC8 -> $0008                PA3EN           EQU     $08
001CC8 0F9CC8 -> $0004                PA2EN           EQU     $04
001CC8 0F9CC8 -> $0002                PA1EN           EQU     $02
001CC8 0F9CC8 -> $0001                PA0EN           EQU     $01
001CC8 0F9CC8 -> $0069                DLYCT           EQU     $0069
001CC8 0F9CC8 -> $0069                ECT_DLYCT       EQU     $0069
001CC8 0F9CC8 -> $0080                DLY7            EQU     $80
001CC8 0F9CC8 -> $0040                DLY6            EQU     $40
001CC8 0F9CC8 -> $0020                DLY5            EQU     $20
001CC8 0F9CC8 -> $0010                DLY4            EQU     $10
001CC8 0F9CC8 -> $0008                DLY3            EQU     $08
001CC8 0F9CC8 -> $0004                DLY2            EQU     $04
001CC8 0F9CC8 -> $0002                DLY1            EQU     $02
001CC8 0F9CC8 -> $0001                DLY0            EQU     $01
001CC8 0F9CC8 -> $006A                ICOVW           EQU     $006A
001CC8 0F9CC8 -> $006A                ECT_ICOVW       EQU     $006A
001CC8 0F9CC8 -> $0080                NOVW7           EQU     $80
001CC8 0F9CC8 -> $0040                NOVW6           EQU     $40
001CC8 0F9CC8 -> $0020                NOVW5           EQU     $20
001CC8 0F9CC8 -> $0010                NOVW4           EQU     $10
001CC8 0F9CC8 -> $0008                NOVW3           EQU     $08
001CC8 0F9CC8 -> $0004                NOVW2           EQU     $04
001CC8 0F9CC8 -> $0002                NOVW1           EQU     $02
001CC8 0F9CC8 -> $0001                NOVW0           EQU     $01
001CC8 0F9CC8 -> $006B                ICSYS           EQU     $006B
001CC8 0F9CC8 -> $006B                ECT_ICSYS       EQU     $006B
001CC8 0F9CC8 -> $0080                SH37            EQU     $80
001CC8 0F9CC8 -> $0040                SH26            EQU     $40
001CC8 0F9CC8 -> $0020                SH15            EQU     $20
001CC8 0F9CC8 -> $0010                SH04            EQU     $10
001CC8 0F9CC8 -> $0008                TFMOD           EQU     $08
001CC8 0F9CC8 -> $0004                PACMX           EQU     $04
001CC8 0F9CC8 -> $0002                BUFEN           EQU     $02
001CC8 0F9CC8 -> $0001                LATQ            EQU     $01
001CC8 0F9CC8 -> $006C                OCPD            EQU     $006C
001CC8 0F9CC8 -> $006C                ECT_OCPD        EQU     $006C
001CC8 0F9CC8 -> $0080                OCPD7           EQU     $80
001CC8 0F9CC8 -> $0040                OCPD6           EQU     $40
001CC8 0F9CC8 -> $0020                OCPD5           EQU     $20
001CC8 0F9CC8 -> $0010                OCPD4           EQU     $10
001CC8 0F9CC8 -> $0008                OCPD3           EQU     $08
001CC8 0F9CC8 -> $0004                OCPD2           EQU     $04
001CC8 0F9CC8 -> $0002                OCPD1           EQU     $02
001CC8 0F9CC8 -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
001CC8 0F9CC8 -> $006E                PTPSR           EQU     $006E
001CC8 0F9CC8 -> $006E                ECT_PTPSR       EQU     $006E
001CC8 0F9CC8 -> $0080                PTPS7           EQU     $80
001CC8 0F9CC8 -> $0040                PTPS6           EQU     $40
001CC8 0F9CC8 -> $0020                PTPS5           EQU     $20
001CC8 0F9CC8 -> $0010                PTPS4           EQU     $10
001CC8 0F9CC8 -> $0008                PTPS3           EQU     $08
001CC8 0F9CC8 -> $0004                PTPS2           EQU     $04
001CC8 0F9CC8 -> $0002                PTPS1           EQU     $02
001CC8 0F9CC8 -> $0001                PTPS0           EQU     $01
001CC8 0F9CC8 -> $006F                PTMCPSR         EQU     $006F
001CC8 0F9CC8 -> $006F                ECT_PTMCPSR             EQU     $006F
001CC8 0F9CC8 -> $0001                PTMPS0          EQU     $01
001CC8 0F9CC8 -> $0002                PTMPS1          EQU     $02
001CC8 0F9CC8 -> $0004                PTMPS2          EQU     $04
001CC8 0F9CC8 -> $0008                PTMPS3          EQU     $08
001CC8 0F9CC8 -> $0010                PTMPS4          EQU     $10
001CC8 0F9CC8 -> $0020                PTMPS5          EQU     $20
001CC8 0F9CC8 -> $0040                PTMPS6          EQU     $40
001CC8 0F9CC8 -> $0080                PTMPS7          EQU     $80
001CC8 0F9CC8 -> $0070                PBCTL           EQU     $0070
001CC8 0F9CC8 -> $0070                ECT_PBCTL       EQU     $0070
001CC8 0F9CC8 -> $0040                PBEN            EQU     $40
001CC8 0F9CC8 -> $0002                PBOVI           EQU     $02
001CC8 0F9CC8 -> $0071                PBFLG           EQU     $00071
001CC8 0F9CC8 -> $0071                ECT_PBFLG       EQU     $00071
001CC8 0F9CC8 -> $0002                PBOVF           EQU     $02
001CC8 0F9CC8 -> $0072                PA32H           EQU     $0072
001CC8 0F9CC8 -> $0072                ECT_PA32H       EQU     $0072
001CC8 0F9CC8 -> $0072                PA3H            EQU     $0072
001CC8 0F9CC8 -> $0073                PA2H            EQU     $0073
001CC8 0F9CC8 -> $0074                PA10H           EQU     $0074
001CC8 0F9CC8 -> $0074                ECT_PA10H       EQU     $0074
001CC8 0F9CC8 -> $0074                PA1H            EQU     $0074
001CC8 0F9CC8 -> $0075                PA0H            EQU     $0075
001CC8 0F9CC8 -> $0076                MCCNT           EQU     $0076
001CC8 0F9CC8 -> $0076                ECT_MCCNT       EQU     $0076
001CC8 0F9CC8 -> $0078                TC0H            EQU     $0078
001CC8 0F9CC8 -> $0078                ECT_TC0H        EQU     $0078
001CC8 0F9CC8 -> $007A                TC1H            EQU     $007A
001CC8 0F9CC8 -> $007A                ECT_TC1H        EQU     $007A
001CC8 0F9CC8 -> $007C                TC2H            EQU     $007C
001CC8 0F9CC8 -> $007C                ECT_TC2H        EQU     $007C
001CC8 0F9CC8 -> $007E                TC3H            EQU     $007E
001CC8 0F9CC8 -> $007E                ECT_TC3H        EQU     $007E
001CC8 0F9CC8 -> $0080                ATD1CTL0        EQU     $0080
001CC8 0F9CC8 -> $0008                WRAP3           EQU     $08
001CC8 0F9CC8 -> $0004                WRAP2           EQU     $04
001CC8 0F9CC8 -> $0002                WRAP1           EQU     $02
001CC8 0F9CC8 -> $0001                WRAP0           EQU     $01
001CC8 0F9CC8 -> $0081                ATD1CTL1        EQU     $0081
001CC8 0F9CC8 -> $0080                ETRIGSEL        EQU     $80
001CC8 0F9CC8 -> $0040                SRES1           EQU     $40
001CC8 0F9CC8 -> $0020                SRES0           EQU     $20
001CC8 0F9CC8 -> $0010                DIS             EQU     $10
001CC8 0F9CC8 -> $0008                ETRIGCH3        EQU     $08
001CC8 0F9CC8 -> $0004                ETRIGCH2        EQU     $04
001CC8 0F9CC8 -> $0002                ETRIGCH1        EQU     $02
001CC8 0F9CC8 -> $0001                ETRIGCH0        EQU     $01
001CC8 0F9CC8 -> $0082                ATD1CTL2        EQU     $0082
001CC8 0F9CC8 -> $0040                AFFC            EQU     $40
001CC8 0F9CC8 -> $0020                ICLKSTP         EQU     $20
001CC8 0F9CC8 -> $0010                ETRIGLE         EQU     $10
001CC8 0F9CC8 -> $0008                ETRIGP          EQU     $08
001CC8 0F9CC8 -> $0004                ETRIGE          EQU     $04
001CC8 0F9CC8 -> $0002                ASCIE           EQU     $02
001CC8 0F9CC8 -> $0001                ASCIF           EQU     $01
001CC8 0F9CC8 -> $0083                ATD1CTL3        EQU     $0083
001CC8 0F9CC8 -> $0080                DJM             EQU     $80
001CC8 0F9CC8 -> $0040                S8C             EQU     $40
001CC8 0F9CC8 -> $0020                S4C             EQU     $20
001CC8 0F9CC8 -> $0010                S2C             EQU     $10
001CC8 0F9CC8 -> $0008                S1C             EQU     $08
001CC8 0F9CC8 -> $0004                FIFO            EQU     $04
001CC8 0F9CC8 -> $0002                FRZ1            EQU     $02
001CC8 0F9CC8 -> $0001                FRZ0            EQU     $01
001CC8 0F9CC8 -> $0084                ATD1CTL4        EQU     $0084
001CC8 0F9CC8 -> $0080                SMP2            EQU     $80
001CC8 0F9CC8 -> $0040                SMP1            EQU     $40
001CC8 0F9CC8 -> $0020                SMP0            EQU     $20
001CC8 0F9CC8 -> $0010                PRS4            EQU     $10
001CC8 0F9CC8 -> $0008                PRS3            EQU     $08
001CC8 0F9CC8 -> $0004                PRS2            EQU     $04
001CC8 0F9CC8 -> $0002                PRS1            EQU     $02
001CC8 0F9CC8 -> $0001                PRS0            EQU     $01
001CC8 0F9CC8 -> $0085                ATD1CTL5        EQU     $0085
001CC8 0F9CC8 -> $0040                SC              EQU     $40
001CC8 0F9CC8 -> $0020                SCAN            EQU     $20
001CC8 0F9CC8 -> $0010                MULT            EQU     $10
001CC8 0F9CC8 -> $0008                CD              EQU     $08
001CC8 0F9CC8 -> $0004                CC              EQU     $04
001CC8 0F9CC8 -> $0002                CB              EQU     $02
001CC8 0F9CC8 -> $0001                CA              EQU     $01
001CC8 0F9CC8 -> $0086                ATD1STAT0       EQU     $0086
001CC8 0F9CC8 -> $0080                SCF             EQU     $80
001CC8 0F9CC8 -> $0020                ETORF           EQU     $20
001CC8 0F9CC8 -> $0010                FIFOR           EQU     $10
001CC8 0F9CC8 -> $0004                CC2             EQU     $04
001CC8 0F9CC8 -> $0002                CC1             EQU     $02
001CC8 0F9CC8 -> $0001                CC0             EQU     $01
                                      ;$0087 reserved
001CC8 0F9CC8 -> $0088                ATD1CMPEH       EQU     $0088
001CC8 0F9CC8 -> $0080                CMPE15          EQU     $80
001CC8 0F9CC8 -> $0040                CMPE14          EQU     $40
001CC8 0F9CC8 -> $0020                CMPE13          EQU     $20
001CC8 0F9CC8 -> $0010                CMPE12          EQU     $10
001CC8 0F9CC8 -> $0008                CMPE11          EQU     $08
001CC8 0F9CC8 -> $0004                CMPE10          EQU     $04
001CC8 0F9CC8 -> $0002                CMPE9           EQU     $02
001CC8 0F9CC8 -> $0001                CMPE8           EQU     $01
001CC8 0F9CC8 -> $0089                ATD1CMPEL       EQU     $0089
001CC8 0F9CC8 -> $0080                CMPE7           EQU     $80
001CC8 0F9CC8 -> $0040                CMPE6           EQU     $40
001CC8 0F9CC8 -> $0020                CMPE5           EQU     $20
001CC8 0F9CC8 -> $0010                CMPE4           EQU     $10
001CC8 0F9CC8 -> $0008                CMPE3           EQU     $08
001CC8 0F9CC8 -> $0004                CMPE2           EQU     $04
001CC8 0F9CC8 -> $0002                CMPE1           EQU     $02
001CC8 0F9CC8 -> $0001                CMPE0           EQU     $01
001CC8 0F9CC8 -> $008A                ATD1STAT2H      EQU     $008A
001CC8 0F9CC8 -> $0080                CCF15           EQU     $80
001CC8 0F9CC8 -> $0040                CCF14           EQU     $40
001CC8 0F9CC8 -> $0020                CCF13           EQU     $20
001CC8 0F9CC8 -> $0010                CCF12           EQU     $10
001CC8 0F9CC8 -> $0008                CCF11           EQU     $08
001CC8 0F9CC8 -> $0004                CCF10           EQU     $04
001CC8 0F9CC8 -> $0002                CCF9            EQU     $02
001CC8 0F9CC8 -> $0001                CCF8            EQU     $01
001CC8 0F9CC8 -> $008B                ATD1STAT2L      EQU     $008B
001CC8 0F9CC8 -> $0080                CCF7            EQU     $80
001CC8 0F9CC8 -> $0040                CCF6            EQU     $40
001CC8 0F9CC8 -> $0020                CCF5            EQU     $20
001CC8 0F9CC8 -> $0010                CCF4            EQU     $10
001CC8 0F9CC8 -> $0008                CCF3            EQU     $08
001CC8 0F9CC8 -> $0004                CCF2            EQU     $04
001CC8 0F9CC8 -> $0002                CCF1            EQU     $02
001CC8 0F9CC8 -> $0001                CCF0            EQU     $01
001CC8 0F9CC8 -> $008C                ATD1DIENH       EQU     $008C
001CC8 0F9CC8 -> $0080                IEN15           EQU     $80
001CC8 0F9CC8 -> $0040                IEN14           EQU     $40
001CC8 0F9CC8 -> $0020                IEN13           EQU     $20
001CC8 0F9CC8 -> $0010                IEN12           EQU     $10
001CC8 0F9CC8 -> $0008                IEN11           EQU     $08
001CC8 0F9CC8 -> $0004                IEN10           EQU     $04
001CC8 0F9CC8 -> $0002                IEN9            EQU     $02
001CC8 0F9CC8 -> $0001                IEN8            EQU     $01
001CC8 0F9CC8 -> $008D                ATD1DIENL       EQU     $008D
001CC8 0F9CC8 -> $0080                IEN7            EQU     $80
001CC8 0F9CC8 -> $0040                IEN6            EQU     $40
001CC8 0F9CC8 -> $0020                IEN5            EQU     $20
001CC8 0F9CC8 -> $0010                IEN4            EQU     $10
001CC8 0F9CC8 -> $0008                IEN3            EQU     $08
001CC8 0F9CC8 -> $0004                IEN2            EQU     $04
001CC8 0F9CC8 -> $0002                IEN1            EQU     $02
001CC8 0F9CC8 -> $0001                IEN0            EQU     $01
001CC8 0F9CC8 -> $008E                ATD1CMPHTH      EQU     $008E
001CC8 0F9CC8 -> $0080                CMPHT15         EQU     $80
001CC8 0F9CC8 -> $0040                CMPHT14         EQU     $40
001CC8 0F9CC8 -> $0020                CMPHT13         EQU     $20
001CC8 0F9CC8 -> $0010                CMPHT12         EQU     $10
001CC8 0F9CC8 -> $0008                CMPHT11         EQU     $08
001CC8 0F9CC8 -> $0004                CMPHT10         EQU     $04
001CC8 0F9CC8 -> $0002                CMPHT9          EQU     $02
001CC8 0F9CC8 -> $0001                CMPHT8          EQU     $01
001CC8 0F9CC8 -> $008F                ATD1CMPHTL      EQU     $008F
001CC8 0F9CC8 -> $0001                CMPHT0          EQU     $01
001CC8 0F9CC8 -> $0002                CMPHT1          EQU     $02
001CC8 0F9CC8 -> $0004                CMPHT2          EQU     $04
001CC8 0F9CC8 -> $0008                CMPHT3          EQU     $08
001CC8 0F9CC8 -> $0010                CMPHT4          EQU     $10
001CC8 0F9CC8 -> $0020                CMPHT5          EQU     $20
001CC8 0F9CC8 -> $0040                CMPHT6          EQU     $40
001CC8 0F9CC8 -> $0080                CMPHT7          EQU     $80
001CC8 0F9CC8 -> $0090                ATD1DR0         EQU     $0090
001CC8 0F9CC8 -> $0090                ATD1DR0H        EQU     $0090
001CC8 0F9CC8 -> $0091                ATD1DR0L        EQU     $0091
001CC8 0F9CC8 -> $0092                ATD1DR1         EQU     $0092
001CC8 0F9CC8 -> $0092                ATD1DR1H        EQU     $0092
001CC8 0F9CC8 -> $0093                ATD1DR1L        EQU     $0093
001CC8 0F9CC8 -> $0094                ATD1DR2         EQU     $0094
001CC8 0F9CC8 -> $0094                ATD1DR2H        EQU     $0094
001CC8 0F9CC8 -> $0095                ATD1DR2L        EQU     $0095
001CC8 0F9CC8 -> $0096                ATD1DR3         EQU     $0096
001CC8 0F9CC8 -> $0096                ATD1DR3H        EQU     $0096
001CC8 0F9CC8 -> $0097                ATD1DR3L        EQU     $0097
001CC8 0F9CC8 -> $0098                ATD1DR4         EQU     $0098
001CC8 0F9CC8 -> $0098                ATD1DR4H        EQU     $0098
001CC8 0F9CC8 -> $0099                ATD1DR4L        EQU     $0099
001CC8 0F9CC8 -> $009A                ATD1DR5         EQU     $009A
001CC8 0F9CC8 -> $009A                ATD1DR5H        EQU     $009A
001CC8 0F9CC8 -> $009B                ATD1DR5L        EQU     $009B
001CC8 0F9CC8 -> $009C                ATD1DR6         EQU     $009C
001CC8 0F9CC8 -> $009C                ATD1DR6H        EQU     $009C
001CC8 0F9CC8 -> $009D                ATD1DR6L        EQU     $009D
001CC8 0F9CC8 -> $009E                ATD1DR7         EQU     $009E
001CC8 0F9CC8 -> $009E                ATD1DR7H        EQU     $009E
001CC8 0F9CC8 -> $009F                ATD1DR7L        EQU     $009F
001CC8 0F9CC8 -> $00A0                ATD1DR8         EQU     $00A0
001CC8 0F9CC8 -> $00A0                ATD1DR8H        EQU     $00A0
001CC8 0F9CC8 -> $00A1                ATD1DR8L        EQU     $00A1
001CC8 0F9CC8 -> $00A2                ATD1DR9         EQU     $00A2
001CC8 0F9CC8 -> $00A2                ATD1DR9H        EQU     $00A2
001CC8 0F9CC8 -> $00A3                ATD1DR9L        EQU     $00A3
001CC8 0F9CC8 -> $00A3                ATD1DR10        EQU     $00A3
001CC8 0F9CC8 -> $00A3                ATD1DR10H       EQU     $00A3
001CC8 0F9CC8 -> $00A5                ATD1DR10L       EQU     $00A5
001CC8 0F9CC8 -> $00A6                ATD1DR11        EQU     $00A6
001CC8 0F9CC8 -> $00A6                ATD1DR11H       EQU     $00A6
001CC8 0F9CC8 -> $00A7                ATD1DR11L       EQU     $00A7
001CC8 0F9CC8 -> $00A8                ATD1DR12        EQU     $00A8
001CC8 0F9CC8 -> $00A8                ATD1DR12H       EQU     $00A8
001CC8 0F9CC8 -> $00A9                ATD1DR12L       EQU     $00A9
001CC8 0F9CC8 -> $00AA                ATD1DR13        EQU     $00AA
001CC8 0F9CC8 -> $00AA                ATD1DR13H       EQU     $00AA
001CC8 0F9CC8 -> $00AB                ATD1DR13L       EQU     $00AB
001CC8 0F9CC8 -> $00AC                ATD1DR14        EQU     $00AC
001CC8 0F9CC8 -> $00AC                ATD1DR14H       EQU     $00AC
001CC8 0F9CC8 -> $00AD                ATD1DR14L       EQU     $00AD
001CC8 0F9CC8 -> $00AE                ATD1DR15        EQU     $00AE
001CC8 0F9CC8 -> $00AE                ATD1DR15H       EQU     $00AE
001CC8 0F9CC8 -> $00AF                ATD1DR15L       EQU     $00AF
001CC8 0F9CC8 -> $00B0                I1BAD           EQU     $00B0
001CC8 0F9CC8 -> $0080                ADR7            EQU     $80
001CC8 0F9CC8 -> $0040                ADR6            EQU     $40
001CC8 0F9CC8 -> $0020                ADR5            EQU     $20
001CC8 0F9CC8 -> $0010                ADR4            EQU     $10
001CC8 0F9CC8 -> $0008                ADR3            EQU     $08
001CC8 0F9CC8 -> $0004                ADR2            EQU     $04
001CC8 0F9CC8 -> $0002                ADR1            EQU     $02
001CC8 0F9CC8 -> $00B1                I1BFD           EQU     $00B1
001CC8 0F9CC8 -> $0080                IBC7            EQU     $80
001CC8 0F9CC8 -> $0040                IBC6            EQU     $40
001CC8 0F9CC8 -> $0020                IBC5            EQU     $20
001CC8 0F9CC8 -> $0010                IBC4            EQU     $10
001CC8 0F9CC8 -> $0008                IBC3            EQU     $08
001CC8 0F9CC8 -> $0004                IBC2            EQU     $04
001CC8 0F9CC8 -> $0002                IBC1            EQU     $02
001CC8 0F9CC8 -> $0001                IBC0            EQU     $01
001CC8 0F9CC8 -> $00B2                I1BCR           EQU     $00B2
001CC8 0F9CC8 -> $0080                IBEN            EQU     $80
001CC8 0F9CC8 -> $0040                IBIE            EQU     $40
001CC8 0F9CC8 -> $0020                SL              EQU     $20
001CC8 0F9CC8 -> $0010                RX              EQU     $10
001CC8 0F9CC8 -> $0008                TXAK            EQU     $08
001CC8 0F9CC8 -> $0004                RSTA            EQU     $04
001CC8 0F9CC8 -> $0001                IBSWAI          EQU     $01
001CC8 0F9CC8 -> $00B3                I1BSR           EQU     $00B3
001CC8 0F9CC8 -> $0080                TCF             EQU     $80
001CC8 0F9CC8 -> $0040                IAAS            EQU     $40
001CC8 0F9CC8 -> $0020                IBB             EQU     $20
001CC8 0F9CC8 -> $0001                RXAK            EQU     $01
001CC8 0F9CC8 -> $0004                SRW             EQU     $04
001CC8 0F9CC8 -> $0002                IBIF            EQU     $02
001CC8 0F9CC8 -> $00B4                I1BDR           EQU     $00B4
001CC8 0F9CC8 -> $00B5                I1BCR2          EQU     $00B5
001CC8 0F9CC8 -> $0080                GCEN            EQU     $80
001CC8 0F9CC8 -> $0040                ADTYPE          EQU     $40
001CC8 0F9CC8 -> $0004                ADR2            EQU     $04
001CC8 0F9CC8 -> $0002                ADR1            EQU     $02
001CC8 0F9CC8 -> $0001                ADR0            EQU     $01
                                      ;$00B6 to $00B7 reserved
001CC8 0F9CC8 -> $00B8                SCI2BDH         EQU     $00B8
001CC8 0F9CC8 -> $0080                IREN            EQU     $80
001CC8 0F9CC8 -> $0040                TNP1            EQU     $40
001CC8 0F9CC8 -> $0020                TNP0            EQU     $20
001CC8 0F9CC8 -> $0010                SBR12           EQU     $10
001CC8 0F9CC8 -> $0008                SBR11           EQU     $08
001CC8 0F9CC8 -> $0004                SBR10           EQU     $04
001CC8 0F9CC8 -> $0002                SBR9            EQU     $02
001CC8 0F9CC8 -> $0001                SBR8            EQU     $01
001CC8 0F9CC8 -> $00B8                SCI2ASR1        EQU     $00B8
001CC8 0F9CC8 -> $0080                RXEDGIF         EQU     $80
001CC8 0F9CC8 -> $0004                BERRV           EQU     $04
001CC8 0F9CC8 -> $0002                BERRIF          EQU     $02
001CC8 0F9CC8 -> $0001                BKDIF           EQU     $01
001CC8 0F9CC8 -> $00B9                SCI2BDL         EQU     $00B9
001CC8 0F9CC8 -> $0080                SBR7            EQU     $80
001CC8 0F9CC8 -> $0040                SBR6            EQU     $40
001CC8 0F9CC8 -> $0020                SBR5            EQU     $20
001CC8 0F9CC8 -> $0010                SBR4            EQU     $10
001CC8 0F9CC8 -> $0008                SBR3            EQU     $08
001CC8 0F9CC8 -> $0004                SBR2            EQU     $04
001CC8 0F9CC8 -> $0002                SBR1            EQU     $02
001CC8 0F9CC8 -> $0001                SBR0            EQU     $01
001CC8 0F9CC8 -> $00B9                SCI2ACR1        EQU     $00B9
001CC8 0F9CC8 -> $0080                RXEDGIE         EQU     $80
001CC8 0F9CC8 -> $0002                BERRIE          EQU     $02
001CC8 0F9CC8 -> $0001                BKDIE           EQU     $01
001CC8 0F9CC8 -> $00BA                SCI2CR1         EQU     $00BA
001CC8 0F9CC8 -> $0080                LOOPS           EQU     $80
001CC8 0F9CC8 -> $0040                SCISWAI         EQU     $40
001CC8 0F9CC8 -> $0020                RSRC            EQU     $20
001CC8 0F9CC8 -> $0010                M               EQU     $10
001CC8 0F9CC8 -> $0008                WAKE            EQU     $08
001CC8 0F9CC8 -> $0004                ILT             EQU     $04
001CC8 0F9CC8 -> $0002                PE              EQU     $02
001CC8 0F9CC8 -> $0001                PT              EQU     $01
001CC8 0F9CC8 -> $00BA                SCI2ACR2        EQU     $00BA
001CC8 0F9CC8 -> $0004                BERRM1          EQU     $04
001CC8 0F9CC8 -> $0002                BERRM0          EQU     $02
001CC8 0F9CC8 -> $0001                BKDFE           EQU     $01
001CC8 0F9CC8 -> $00BB                SCI2CR2         EQU     $00BB
001CC8 0F9CC8 -> $0080                TXIE            EQU     $80
001CC8 0F9CC8 -> $0040                TCIE            EQU     $40
001CC8 0F9CC8 -> $0020                RIE             EQU     $20
001CC8 0F9CC8 -> $0010                ILIE            EQU     $10
001CC8 0F9CC8 -> $0008                TE              EQU     $08
001CC8 0F9CC8 -> $0004                RE              EQU     $04
001CC8 0F9CC8 -> $0002                RWU             EQU     $02
001CC8 0F9CC8 -> $0001                SBK             EQU     $01
001CC8 0F9CC8 -> $00BC                SCI2SR1         EQU     $00BC
001CC8 0F9CC8 -> $0080                TDRE            EQU     $80
001CC8 0F9CC8 -> $0040                TC              EQU     $40
001CC8 0F9CC8 -> $0020                RDRFF           EQU     $20
001CC8 0F9CC8 -> $0010                IDLE            EQU     $10
001CC8 0F9CC8 -> $0008                OR              EQU     $08
001CC8 0F9CC8 -> $0004                NF              EQU     $04
001CC8 0F9CC8 -> $0002                FE              EQU     $02
001CC8 0F9CC8 -> $0001                PF              EQU     $01
001CC8 0F9CC8 -> $00BD                SCI2SR2         EQU     $00BD
001CC8 0F9CC8 -> $0004                BRK13           EQU     $04
001CC8 0F9CC8 -> $0002                TXDIR           EQU     $02
001CC8 0F9CC8 -> $0001                RAF             EQU     $01
001CC8 0F9CC8 -> $00BE                SCI2DRH         EQU     $00BE
001CC8 0F9CC8 -> $0080                R8              EQU     $80
001CC8 0F9CC8 -> $0040                T8              EQU     $40
001CC8 0F9CC8 -> $00BF                SCI2DRL         EQU     $00BF
001CC8 0F9CC8 -> $00C0                SCI3BDH         EQU     $00C0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $00C0                SCI3ASR1        EQU     $00C0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $00C1                SCI3BDL         EQU     $00C1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $00C1                SCI3ACR1        EQU     $00C1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $00C2                SCI3CR1         EQU     $00C2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $00C2                SCI3ACR2        EQU     $00C2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $00C3                SCI3CR2         EQU     $00C3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $00C4                SCI3SR1         EQU     $00C4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF           EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $00C5                SCI3SR2         EQU     $00C5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $00C6                SCI3DRH         EQU     $00C6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $00C7                SCI3DRL         EQU     $00C7
001CC8 0F9CC8 -> $00C8                SCIBDH          EQU     $00C8
001CC8 0F9CC8 -> $00C8                SCI0BDH         EQU     $00C8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $00C9                SCI0ASR1        EQU     $00C9
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $00C9                SCIBDL          EQU     $00C9
001CC8 0F9CC8 -> $00C9                SCI0BDL         EQU     $00C9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $00C9                SCI0ACR1        EQU     $00C9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $00CA                SCICR1          EQU     $00CA
001CC8 0F9CC8 -> $00CA                SCI0CR1         EQU     $00CA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $00CA                SCI0ACR2        EQU     $00CA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $00CB                SCICR2          EQU     $00CB
001CC8 0F9CC8 -> $00CB                SCI0CR2         EQU     $00CB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $00CC                SCISR1          EQU     $00CC
001CC8 0F9CC8 -> $00CC                SCI0SR1         EQU     $00CC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $00CD                SCISR2          EQU     $00CD
001CC8 0F9CC8 -> $00CD                SCI0SR2         EQU     $00CD
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $00CE                SCIDRH          EQU     $00CE
001CC8 0F9CC8 -> $00CE                SCI0DRH         EQU     $00CE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $00CF                SCIDRL          EQU     $00CF
001CC8 0F9CC8 -> $00CF                SCI0DRL         EQU     $00CF
001CC8 0F9CC8 -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $00D7                SCI1DRL         EQU     $00D7
001CC8 0F9CC8 -> $00D8                SPICR1          EQU     $00D8
001CC8 0F9CC8 -> $00D8                SPI0CR1         EQU     $00D8
001CC8 0F9CC8 -> $0080                SPIE            EQU     $80
001CC8 0F9CC8 -> $0040                SPE             EQU     $40
001CC8 0F9CC8 -> $0020                SPTIE           EQU     $20
001CC8 0F9CC8 -> $0010                MSTR            EQU     $10
001CC8 0F9CC8 -> $0008                CPOL            EQU     $08
001CC8 0F9CC8 -> $0004                CPHA            EQU     $04
001CC8 0F9CC8 -> $0002                SSOE            EQU     $02
001CC8 0F9CC8 -> $0001                LSBFE           EQU     $01
001CC8 0F9CC8 -> $00D9                SPICR2          EQU     $00D9
001CC8 0F9CC8 -> $00D9                SPI0CR2         EQU     $00D9
001CC8 0F9CC8 -> $0040                XFRW            EQU     $40
001CC8 0F9CC8 -> $0010                MODFEN          EQU     $10
001CC8 0F9CC8 -> $0008                BIDIROE         EQU     $08
001CC8 0F9CC8 -> $0002                SPISWAI         EQU     $02
001CC8 0F9CC8 -> $0001                SPC0            EQU     $01
001CC8 0F9CC8 -> $00DA                SPIBR           EQU     $00DA
001CC8 0F9CC8 -> $00DA                SPI0BR          EQU     $00DA
001CC8 0F9CC8 -> $0040                SPPR2           EQU     $40
001CC8 0F9CC8 -> $0020                SPPR1           EQU     $20
001CC8 0F9CC8 -> $0010                SPPR0           EQU     $10
001CC8 0F9CC8 -> $0004                SPR2            EQU     $04
001CC8 0F9CC8 -> $0002                SPR1            EQU     $02
001CC8 0F9CC8 -> $0001                SPR0            EQU     $01
001CC8 0F9CC8 -> $00DB                SPISR           EQU     $00DB
001CC8 0F9CC8 -> $00DB                SPI0SR          EQU     $00DB
001CC8 0F9CC8 -> $0080                SPIF            EQU     $80
001CC8 0F9CC8 -> $0020                SPTEF           EQU     $20
001CC8 0F9CC8 -> $0010                MODF            EQU     $10
001CC8 0F9CC8 -> $00DC                SPIDRH          EQU     $00DC
001CC8 0F9CC8 -> $00DC                SPI0DRH         EQU     $00DC
001CC8 0F9CC8 -> $00DD                SPIDRL          EQU     $00DD
001CC8 0F9CC8 -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00DF reserved
001CC8 0F9CC8 -> $00E0                IBAD            EQU     $00E0
001CC8 0F9CC8 -> $00E0                I0BAD           EQU     $00E0
                                      ;ADR7           EQU     $80
                                      ;ADR6           EQU     $40
                                      ;ADR5           EQU     $20
                                      ;ADR4           EQU     $10
                                      ;ADR3           EQU     $08
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
001CC8 0F9CC8 -> $00E1                IBFD            EQU     $00E1
001CC8 0F9CC8 -> $00E1                I0BFD           EQU     $00E1
                                      ;IBC7           EQU     $80
                                      ;IBC6           EQU     $40
                                      ;IBC5           EQU     $20
                                      ;IBC4           EQU     $10
                                      ;IBC3           EQU     $08
                                      ;IBC2           EQU     $04
                                      ;IBC1           EQU     $02
                                      ;IBC0           EQU     $01
001CC8 0F9CC8 -> $00E2                IBCR            EQU     $00E2
001CC8 0F9CC8 -> $00E2                I0BCR           EQU     $00E2
                                      ;IBEN           EQU     $80
                                      ;IBIE           EQU     $40
                                      ;SL             EQU     $20
                                      ;RX             EQU     $10
                                      ;TXAK           EQU     $08
                                      ;RSTA           EQU     $04
                                      ;IBSWAI         EQU     $01
001CC8 0F9CC8 -> $00E3                IBSR            EQU     $00E3
001CC8 0F9CC8 -> $00E3                I0BSR           EQU     $00E3
                                      ;TCF            EQU     $80
                                      ;IAAS           EQU     $40
                                      ;IBB            EQU     $20
                                      ;RXAK           EQU     $01
                                      ;SRW            EQU     $04
                                      ;IBIF           EQU     $02
001CC8 0F9CC8 -> $00E4                IBDR            EQU     $00E4
001CC8 0F9CC8 -> $00E4                I0BDR           EQU     $00E4
001CC8 0F9CC8 -> $00E5                IBCR2           EQU     $00E5
001CC8 0F9CC8 -> $00E5                I0BCR2          EQU     $00E5
                                      ;GCEN           EQU     $80
                                      ;ADTYPE         EQU     $40
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
                                      ;ADR0           EQU     $01
                                      ;$00E6 to $00EF reserved
001CC8 0F9CC8 -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
001CC8 0F9CC8 -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
001CC8 0F9CC8 -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
001CC8 0F9CC8 -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
001CC8 0F9CC8 -> $00F4                SPI1DRH         EQU     $00F4
001CC8 0F9CC8 -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
001CC8 0F9CC8 -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
001CC8 0F9CC8 -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
001CC8 0F9CC8 -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
001CC8 0F9CC8 -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
001CC8 0F9CC8 -> $00FC                SPI2DRH         EQU     $00FC
001CC8 0F9CC8 -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
001CC8 0F9CC8 -> $0100                FCLKDIV         EQU     $0100
001CC8 0F9CC8 -> $0080                FDIVLD          EQU     $80
001CC8 0F9CC8 -> $0040                FDIV6           EQU     $40
001CC8 0F9CC8 -> $0020                FDIV5           EQU     $20
001CC8 0F9CC8 -> $0010                FDIV4           EQU     $10
001CC8 0F9CC8 -> $0008                FDIV3           EQU     $08
001CC8 0F9CC8 -> $0004                FDIV2           EQU     $04
001CC8 0F9CC8 -> $0002                FDIV1           EQU     $02
001CC8 0F9CC8 -> $0001                FDIV0           EQU     $01
001CC8 0F9CC8 -> $0101                FSEC            EQU     $0101
001CC8 0F9CC8 -> $0080                KEYEN1          EQU     $80
001CC8 0F9CC8 -> $0040                KEYEN2          EQU     $40
001CC8 0F9CC8 -> $0020                RNV5            EQU     $20
001CC8 0F9CC8 -> $0010                RNV4            EQU     $10
001CC8 0F9CC8 -> $0008                RNV3            EQU     $08
001CC8 0F9CC8 -> $0004                RNV2            EQU     $04
001CC8 0F9CC8 -> $0002                SEC1            EQU     $02
001CC8 0F9CC8 -> $0001                SEC0            EQU     $01
001CC8 0F9CC8 -> $0102                FCCOBIX         EQU     $0102
001CC8 0F9CC8 -> $0004                CCOBIX2         EQU     $04
001CC8 0F9CC8 -> $0002                CCOBIX1         EQU     $02
001CC8 0F9CC8 -> $0001                CCOBIX0         EQU     $01
001CC8 0F9CC8 -> $0103                FECCRIX         EQU     $0103
001CC8 0F9CC8 -> $0004                ECCRIX2         EQU     $04
001CC8 0F9CC8 -> $0002                ECCRIX1         EQU     $02
001CC8 0F9CC8 -> $0001                ECCRIX0         EQU     $01
001CC8 0F9CC8 -> $0104                FCNFG           EQU     $0104
001CC8 0F9CC8 -> $0080                CCIE            EQU     $80
001CC8 0F9CC8 -> $0010                IGNSF           EQU     $10
001CC8 0F9CC8 -> $0002                FDFD            EQU     $02
001CC8 0F9CC8 -> $0001                FSFD            EQU     $01
001CC8 0F9CC8 -> $0105                FERCNFG         EQU     $0105
001CC8 0F9CC8 -> $0080                ERSERIE         EQU     $80
001CC8 0F9CC8 -> $0040                PGMERIE         EQU     $40
001CC8 0F9CC8 -> $0010                EPVIOLIE        EQU     $10
001CC8 0F9CC8 -> $0008                ERSVIE1         EQU     $08
001CC8 0F9CC8 -> $0004                ERSVIE0         EQU     $04
001CC8 0F9CC8 -> $0002                DFDIE           EQU     $02
001CC8 0F9CC8 -> $0001                SFDIE           EQU     $01
001CC8 0F9CC8 -> $0106                FSTAT           EQU     $0106
001CC8 0F9CC8 -> $0080                CCIF            EQU     $80
001CC8 0F9CC8 -> $0020                ACCERR          EQU     $20
001CC8 0F9CC8 -> $0010                FPVIOL          EQU     $10
001CC8 0F9CC8 -> $0008                MGBUSY          EQU     $08
001CC8 0F9CC8 -> $0002                MGSTAT1         EQU     $02
001CC8 0F9CC8 -> $0001                MGSTAT0         EQU     $01
001CC8 0F9CC8 -> $0107                FERSTAT         EQU     $0107
001CC8 0F9CC8 -> $0080                ERSERIF         EQU     $80
001CC8 0F9CC8 -> $0040                PGMERIF         EQU     $40
001CC8 0F9CC8 -> $0010                EPVIOLIF        EQU     $10
001CC8 0F9CC8 -> $0008                ERSVIF1         EQU     $08
001CC8 0F9CC8 -> $0004                ERSVIF0         EQU     $04
001CC8 0F9CC8 -> $0002                DFDIF           EQU     $02
001CC8 0F9CC8 -> $0001                SFDIF           EQU     $01
001CC8 0F9CC8 -> $0108                FPROT           EQU     $0108
001CC8 0F9CC8 -> $0080                FPOPEN          EQU     $80
001CC8 0F9CC8 -> $0040                RNV6            EQU     $40
001CC8 0F9CC8 -> $0020                FPHDIS          EQU     $20
001CC8 0F9CC8 -> $0010                FPHS1           EQU     $10
001CC8 0F9CC8 -> $0008                FPHS0           EQU     $08
001CC8 0F9CC8 -> $0004                FPLDIS          EQU     $04
001CC8 0F9CC8 -> $0002                FPLS1           EQU     $02
001CC8 0F9CC8 -> $0001                FPLS0           EQU     $01
001CC8 0F9CC8 -> $0109                EPROT           EQU     $0109
001CC8 0F9CC8 -> $0080                EPOPEN          EQU     $80
001CC8 0F9CC8 -> $0040                RNV6            EQU     $40
001CC8 0F9CC8 -> $0020                RNV5            EQU     $20
001CC8 0F9CC8 -> $0010                RNV4            EQU     $10
001CC8 0F9CC8 -> $0008                EPDIS           EQU     $08
001CC8 0F9CC8 -> $0004                EPS2            EQU     $04
001CC8 0F9CC8 -> $0002                EPS1            EQU     $02
001CC8 0F9CC8 -> $0001                EPS0            EQU     $01
001CC8 0F9CC8 -> $010A                FCCOBHI         EQU     $010A
001CC8 0F9CC8 -> $0080                CCOB15          EQU     $80
001CC8 0F9CC8 -> $0040                CCOB14          EQU     $40
001CC8 0F9CC8 -> $0020                CCOB13          EQU     $20
001CC8 0F9CC8 -> $0010                CCOB12          EQU     $10
001CC8 0F9CC8 -> $0008                CCOB11          EQU     $08
001CC8 0F9CC8 -> $0004                CCOB10          EQU     $04
001CC8 0F9CC8 -> $0002                CCOB9           EQU     $02
001CC8 0F9CC8 -> $0001                CCOB8           EQU     $01
001CC8 0F9CC8 -> $010B                FCCOBLO         EQU     $010B
001CC8 0F9CC8 -> $0080                CCOB7           EQU     $80
001CC8 0F9CC8 -> $0040                CCOB6           EQU     $40
001CC8 0F9CC8 -> $0020                CCOB5           EQU     $20
001CC8 0F9CC8 -> $0010                CCOB4           EQU     $10
001CC8 0F9CC8 -> $0008                CCOB3           EQU     $08
001CC8 0F9CC8 -> $0004                CCOB2           EQU     $04
001CC8 0F9CC8 -> $0002                CCOB1           EQU     $02
001CC8 0F9CC8 -> $0001                CCOB0           EQU     $01
001CC8 0F9CC8 -> $010C                ETAGHI          EQU     $010C
001CC8 0F9CC8 -> $010D                ETAGLO          EQU     $010D
001CC8 0F9CC8 -> $010E                FECCRHI         EQU     $010E
001CC8 0F9CC8 -> $010F                FECCRLO         EQU     $010F
001CC8 0F9CC8 -> $0110                FOPT            EQU     $0110
001CC8 0F9CC8 -> $0080                NV7             EQU     $80
001CC8 0F9CC8 -> $0040                NV6             EQU     $40
001CC8 0F9CC8 -> $0020                NV5             EQU     $20
001CC8 0F9CC8 -> $0010                NV4             EQU     $10
001CC8 0F9CC8 -> $0008                NV3             EQU     $08
001CC8 0F9CC8 -> $0004                NV2             EQU     $04
001CC8 0F9CC8 -> $0002                NV1             EQU     $02
001CC8 0F9CC8 -> $0001                NV0             EQU     $01
                                      ;$0111 to $0113 reserved
001CC8 0F9CC8 -> $0114                MPUFLG          EQU     $0114
001CC8 0F9CC8 -> $0080                AEF             EQU     $80
001CC8 0F9CC8 -> $0040                WPF             EQU     $40
001CC8 0F9CC8 -> $0020                NEXF            EQU     $20
001CC8 0F9CC8 -> $0001                SVSF            EQU     $01
001CC8 0F9CC8 -> $0115                MPUASTAT0       EQU     $0115
001CC8 0F9CC8 -> $0040                ADDR22          EQU     $40
001CC8 0F9CC8 -> $0020                ADDR21          EQU     $20
001CC8 0F9CC8 -> $0010                ADDR20          EQU     $10
001CC8 0F9CC8 -> $0008                ADDR19          EQU     $08
001CC8 0F9CC8 -> $0004                ADDR18          EQU     $04
001CC8 0F9CC8 -> $0002                ADDR17          EQU     $02
001CC8 0F9CC8 -> $0001                ADDR16          EQU     $01
001CC8 0F9CC8 -> $0116                MPUASTAT1       EQU     $0116
001CC8 0F9CC8 -> $0080                ADDR15          EQU     $80
001CC8 0F9CC8 -> $0040                ADDR14          EQU     $40
001CC8 0F9CC8 -> $0020                ADDR13          EQU     $20
001CC8 0F9CC8 -> $0010                ADDR12          EQU     $10
001CC8 0F9CC8 -> $0008                ADDR11          EQU     $08
001CC8 0F9CC8 -> $0004                ADDR10          EQU     $04
001CC8 0F9CC8 -> $0002                ADDR9           EQU     $02
001CC8 0F9CC8 -> $0001                ADDR8           EQU     $01
001CC8 0F9CC8 -> $0117                MPUASTAT2       EQU     $0117
001CC8 0F9CC8 -> $0080                ADDR7           EQU     $80
001CC8 0F9CC8 -> $0040                ADDR6           EQU     $40
001CC8 0F9CC8 -> $0020                ADDR5           EQU     $20
001CC8 0F9CC8 -> $0010                ADDR4           EQU     $10
001CC8 0F9CC8 -> $0008                ADDR3           EQU     $08
001CC8 0F9CC8 -> $0004                ADDR2           EQU     $04
001CC8 0F9CC8 -> $0002                ADDR1           EQU     $02
001CC8 0F9CC8 -> $0001                ADDR0           EQU     $01
                                      ;$0118 reserved
001CC8 0F9CC8 -> $0119                MPUSEL          EQU     $0119
001CC8 0F9CC8 -> $0080                SVSEN           EQU     $80
001CC8 0F9CC8 -> $0007                SEL             EQU     $07
001CC8 0F9CC8 -> $011A                MPUDESC0        EQU     $011A
001CC8 0F9CC8 -> $0080                MSTR0           EQU     $80
001CC8 0F9CC8 -> $0040                MSTR1           EQU     $40
001CC8 0F9CC8 -> $0020                MSTR2           EQU     $20
001CC8 0F9CC8 -> $0010                MSTR3           EQU     $10
001CC8 0F9CC8 -> $0008                LOW_ADDR22      EQU     $08
001CC8 0F9CC8 -> $0004                LOW_ADDR21      EQU     $04
001CC8 0F9CC8 -> $0002                LOW_ADDR20      EQU     $02
001CC8 0F9CC8 -> $0001                LOW_ADDR19      EQU     $01
001CC8 0F9CC8 -> $011B                MPUDESC1        EQU     $011B
001CC8 0F9CC8 -> $0080                LOW_ADDR18      EQU     $80
001CC8 0F9CC8 -> $0040                LOW_ADDR17      EQU     $40
001CC8 0F9CC8 -> $0020                LOW_ADDR16      EQU     $20
001CC8 0F9CC8 -> $0010                LOW_ADDR15      EQU     $10
001CC8 0F9CC8 -> $0008                LOW_ADDR14      EQU     $08
001CC8 0F9CC8 -> $0004                LOW_ADDR13      EQU     $04
001CC8 0F9CC8 -> $0002                LOW_ADDR12      EQU     $02
001CC8 0F9CC8 -> $0001                LOW_ADDR11      EQU     $01
001CC8 0F9CC8 -> $011C                MPUDESC2        EQU     $011C
001CC8 0F9CC8 -> $0080                LOW_ADDR10      EQU     $80
001CC8 0F9CC8 -> $0040                LOW_ADDR9       EQU     $40
001CC8 0F9CC8 -> $0020                LOW_ADDR8       EQU     $20
001CC8 0F9CC8 -> $0010                LOW_ADDR7       EQU     $10
001CC8 0F9CC8 -> $0008                LOW_ADDR6       EQU     $08
001CC8 0F9CC8 -> $0004                LOW_ADDR5       EQU     $04
001CC8 0F9CC8 -> $0002                LOW_ADDR4       EQU     $02
001CC8 0F9CC8 -> $0001                LOW_ADDR3       EQU     $01
001CC8 0F9CC8 -> $011D                MPUDESC3        EQU     $011D
001CC8 0F9CC8 -> $0080                WP              EQU     $80
001CC8 0F9CC8 -> $0040                NEX             EQU     $40
001CC8 0F9CC8 -> $0008                HIGH_ADDR22     EQU     $08
001CC8 0F9CC8 -> $0004                HIGH_ADDR21     EQU     $04
001CC8 0F9CC8 -> $0002                HIGH_ADDR20     EQU     $02
001CC8 0F9CC8 -> $0001                HIGH_ADDR19     EQU     $01
001CC8 0F9CC8 -> $011E                MPUDESC4        EQU     $011E
001CC8 0F9CC8 -> $0080                HIGH_ADDR18     EQU     $80
001CC8 0F9CC8 -> $0040                HIGH_ADDR17     EQU     $40
001CC8 0F9CC8 -> $0020                HIGH_ADDR16     EQU     $20
001CC8 0F9CC8 -> $0010                HIGH_ADDR15     EQU     $10
001CC8 0F9CC8 -> $0008                HIGH_ADDR14     EQU     $08
001CC8 0F9CC8 -> $0004                HIGH_ADDR13     EQU     $04
001CC8 0F9CC8 -> $0002                HIGH_ADDR12     EQU     $02
001CC8 0F9CC8 -> $0001                HIGH_ADDR11     EQU     $01
001CC8 0F9CC8 -> $011F                MPUDESC5        EQU     $011F
001CC8 0F9CC8 -> $0080                HIGH_ADDR10     EQU     $80
001CC8 0F9CC8 -> $0040                HIGH_ADDR9      EQU     $40
001CC8 0F9CC8 -> $0020                HIGH_ADDR8      EQU     $20
001CC8 0F9CC8 -> $0010                HIGH_ADDR7      EQU     $10
001CC8 0F9CC8 -> $0008                HIGH_ADDR6      EQU     $08
001CC8 0F9CC8 -> $0004                HIGH_ADDR5      EQU     $04
001CC8 0F9CC8 -> $0002                HIGH_ADDR4      EQU     $02
001CC8 0F9CC8 -> $0001                HIGH_ADDR3      EQU     $01
                                      ;$0120 reserved
001CC8 0F9CC8 -> $0121                IVBR            EQU     $0121
                                      ;$0122 to $0125reserved
001CC8 0F9CC8 -> $0126                XGPRIO          EQU     $0126
001CC8 0F9CC8 -> $0007                XILVL           EQU     $07
001CC8 0F9CC8 -> $0127                CFADDR          EQU     $0127
001CC8 0F9CC8 -> $0128                CFDATA0         EQU     $0128
001CC8 0F9CC8 -> $0129                CFDATA1         EQU     $0129
001CC8 0F9CC8 -> $012A                CFDATA2         EQU     $012A
001CC8 0F9CC8 -> $012B                CFDATA3         EQU     $012B
001CC8 0F9CC8 -> $012C                CFDATA4         EQU     $012C
001CC8 0F9CC8 -> $012D                CFDATA5         EQU     $012D
001CC8 0F9CC8 -> $012E                CFDATA6         EQU     $012E
001CC8 0F9CC8 -> $012F                CFDATA7         EQU     $012F
001CC8 0F9CC8 -> $0080                RQST            EQU     $80
001CC8 0F9CC8 -> $0007                PRIOLVL         EQU     $07
001CC8 0F9CC8 -> $0130                SCI4BDH         EQU     $0130
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $0130                SCI4ASR1        EQU     $0130
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $0131                SCI4BDL         EQU     $0131
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $0131                SCI4ACR1        EQU     $0131
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $0132                SCI4CR1         EQU     $0132
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $0132                SCI4ACR2        EQU     $0132
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $0133                SCI4CR2         EQU     $0133
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $0134                SCI4SR1         EQU     $0134
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $0135                SCI4SR2         EQU     $0135
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $0136                SCI4DRH         EQU     $0136
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $0137                SCI4DRL         EQU     $0137
001CC8 0F9CC8 -> $0138                SCI5BDH         EQU     $0138
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $0138                SCI5ASR1        EQU     $0138
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $0139                SCI5BDL         EQU     $0139
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $0139                SCI5ACR1        EQU     $0139
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $013A                SCI5CR1         EQU     $013A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $013A                SCI5ACR2        EQU     $013A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $013B                SCI5CR2         EQU     $013B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $013C                SCI5SR1         EQU     $013C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $013D                SCI5SR2         EQU     $013D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $013E                SCI5DRH         EQU     $013E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $013F                SCI5DRL         EQU     $013F
001CC8 0F9CC8 -> $0140                CANCTL0         EQU     $0140
001CC8 0F9CC8 -> $0140                CAN0CTL0        EQU     $0140
001CC8 0F9CC8 -> $0080                RXFRM           EQU     $80
001CC8 0F9CC8 -> $0040                RXACT           EQU     $40
001CC8 0F9CC8 -> $0020                CSWAI           EQU     $20
001CC8 0F9CC8 -> $0010                SYNCH           EQU     $10
001CC8 0F9CC8 -> $0008                TIMEN           EQU     $08
001CC8 0F9CC8 -> $0004                WUPE            EQU     $04
001CC8 0F9CC8 -> $0002                SLPRQ           EQU     $02
001CC8 0F9CC8 -> $0001                INITRQ          EQU     $01
001CC8 0F9CC8 -> $0141                CANCTL1         EQU     $0141
001CC8 0F9CC8 -> $0141                CAN0CTL1        EQU     $0141
001CC8 0F9CC8 -> $0080                CANE            EQU     $80
001CC8 0F9CC8 -> $0040                CLKSRC          EQU     $40
001CC8 0F9CC8 -> $0020                LOOPB           EQU     $20
001CC8 0F9CC8 -> $0010                LISTEN          EQU     $10
001CC8 0F9CC8 -> $0004                WUPM            EQU     $04
001CC8 0F9CC8 -> $0002                SLPAK           EQU     $02
001CC8 0F9CC8 -> $0001                INITAK          EQU     $01
001CC8 0F9CC8 -> $0142                CANBTR0         EQU     $0142
001CC8 0F9CC8 -> $0142                CAN0BTR0        EQU     $0142
001CC8 0F9CC8 -> $0080                SJW1            EQU     $80
001CC8 0F9CC8 -> $0040                SJW0            EQU     $40
001CC8 0F9CC8 -> $0020                BRP5            EQU     $20
001CC8 0F9CC8 -> $0010                BRP4            EQU     $10
001CC8 0F9CC8 -> $0008                BRP3            EQU     $08
001CC8 0F9CC8 -> $0004                BRP2            EQU     $04
001CC8 0F9CC8 -> $0002                BRP1            EQU     $02
001CC8 0F9CC8 -> $0001                BRP0            EQU     $01
001CC8 0F9CC8 -> $0143                CANBTR1         EQU     $0143
001CC8 0F9CC8 -> $0143                CAN0BTR1        EQU     $0143
001CC8 0F9CC8 -> $0080                SAMP            EQU     $80
001CC8 0F9CC8 -> $0040                TSEG22          EQU     $40
001CC8 0F9CC8 -> $0020                TSEG21          EQU     $20
001CC8 0F9CC8 -> $0010                TSEG20          EQU     $10
001CC8 0F9CC8 -> $0008                TSEG13          EQU     $08
001CC8 0F9CC8 -> $0004                TSEG12          EQU     $04
001CC8 0F9CC8 -> $0002                TSEG11          EQU     $02
001CC8 0F9CC8 -> $0001                TESG10          EQU     $01
001CC8 0F9CC8 -> $0144                CANRFLG         EQU     $0144
001CC8 0F9CC8 -> $0144                CAN0RFLG        EQU     $0144
001CC8 0F9CC8 -> $0080                WUPIF           EQU     $80
001CC8 0F9CC8 -> $0040                CSCIF           EQU     $40
001CC8 0F9CC8 -> $0020                RSTAT1          EQU     $20
001CC8 0F9CC8 -> $0010                RSTAT0          EQU     $10
001CC8 0F9CC8 -> $0008                TSTAT1          EQU     $08
001CC8 0F9CC8 -> $0004                TSTAT0          EQU     $04
001CC8 0F9CC8 -> $0002                OVRIF           EQU     $02
001CC8 0F9CC8 -> $0001                RXF             EQU     $01
001CC8 0F9CC8 -> $0145                CANRIER         EQU     $0145
001CC8 0F9CC8 -> $0145                CAN0RIER        EQU     $0145
001CC8 0F9CC8 -> $0080                WUPIE           EQU     $80
001CC8 0F9CC8 -> $0040                CSCIE           EQU     $40
001CC8 0F9CC8 -> $0020                RSTATE1         EQU     $20
001CC8 0F9CC8 -> $0010                RSTATE0         EQU     $10
001CC8 0F9CC8 -> $0008                TSTATE1         EQU     $08
001CC8 0F9CC8 -> $0004                TSTATE0         EQU     $04
001CC8 0F9CC8 -> $0002                OVRIE           EQU     $02
001CC8 0F9CC8 -> $0001                RXFIE           EQU     $01
001CC8 0F9CC8 -> $0146                CANTFLG         EQU     $0146
001CC8 0F9CC8 -> $0146                CAN0TFLG        EQU     $0146
001CC8 0F9CC8 -> $0004                TXE2            EQU     $04
001CC8 0F9CC8 -> $0002                TXE1            EQU     $02
001CC8 0F9CC8 -> $0001                TXE0            EQU     $01
001CC8 0F9CC8 -> $0147                CANTIER         EQU     $0147
001CC8 0F9CC8 -> $0147                CAN0TIER        EQU     $0147
001CC8 0F9CC8 -> $0004                TXEIE2          EQU     $04
001CC8 0F9CC8 -> $0002                TXEIE1          EQU     $02
001CC8 0F9CC8 -> $0001                TXEIE0          EQU     $01
001CC8 0F9CC8 -> $0148                CANTARQ         EQU     $0148
001CC8 0F9CC8 -> $0148                CAN0TARQ        EQU     $0148
001CC8 0F9CC8 -> $0004                ABTRQ2          EQU     $04
001CC8 0F9CC8 -> $0002                ABTRQ1          EQU     $02
001CC8 0F9CC8 -> $0001                ABTRQ0          EQU     $01
001CC8 0F9CC8 -> $0149                CANTAAK         EQU     $0149
001CC8 0F9CC8 -> $0149                CAN0TAAK        EQU     $0149
001CC8 0F9CC8 -> $0004                ABTAK2          EQU     $04
001CC8 0F9CC8 -> $0002                ABTAK1          EQU     $02
001CC8 0F9CC8 -> $0001                ABTAK0          EQU     $01
001CC8 0F9CC8 -> $014A                CANTBSEL        EQU     $014A
001CC8 0F9CC8 -> $014A                CAN0TBSEL       EQU     $014A
001CC8 0F9CC8 -> $0004                TX2             EQU     $04
001CC8 0F9CC8 -> $0002                TX1             EQU     $02
001CC8 0F9CC8 -> $0001                TX0             EQU     $01
001CC8 0F9CC8 -> $014B                CANIDAC         EQU     $014B
001CC8 0F9CC8 -> $014B                CAN0IDAC        EQU     $014B
001CC8 0F9CC8 -> $0020                IDAM1           EQU     $20
001CC8 0F9CC8 -> $0010                IDAM0           EQU     $10
001CC8 0F9CC8 -> $0004                IDHIT2          EQU     $04
001CC8 0F9CC8 -> $0002                IDHIT1          EQU     $02
001CC8 0F9CC8 -> $0001                IDHIT0          EQU     $01
                                      ; $14c  reserved
001CC8 0F9CC8 -> $014D                CANMISC         EQU     $014D
001CC8 0F9CC8 -> $014D                CAN0MISC        EQU     $014D
001CC8 0F9CC8 -> $0001                BOHOLD          EQU     $01
001CC8 0F9CC8 -> $014E                CANRXERR        EQU     $014E
001CC8 0F9CC8 -> $014E                CAN0RXERR       EQU     $014E
001CC8 0F9CC8 -> $014F                CANTXERR        EQU     $014F
001CC8 0F9CC8 -> $014F                CAN0TXERR       EQU     $014F
001CC8 0F9CC8 -> $0150                CANIDAR0        EQU     $0150
001CC8 0F9CC8 -> $0150                CAN0IDAR0       EQU     $0150
001CC8 0F9CC8 -> $0151                CANIDAR1        EQU     $0151
001CC8 0F9CC8 -> $0151                CAN0IDAR1       EQU     $0151
001CC8 0F9CC8 -> $0152                CANIDAR2        EQU     $0152
001CC8 0F9CC8 -> $0152                CAN0IDAR2       EQU     $0152
001CC8 0F9CC8 -> $0153                CANIDAR3        EQU     $0153
001CC8 0F9CC8 -> $0153                CAN0IDAR3       EQU     $0153
001CC8 0F9CC8 -> $0154                CANIDMR0        EQU     $0154
001CC8 0F9CC8 -> $0154                CAN0IDMR0       EQU     $0154
001CC8 0F9CC8 -> $0155                CANIDMR1        EQU     $0155
001CC8 0F9CC8 -> $0155                CAN0IDMR1       EQU     $0155
001CC8 0F9CC8 -> $0156                CANIDMR2        EQU     $0156
001CC8 0F9CC8 -> $0156                CAN0IDMR2       EQU     $0156
001CC8 0F9CC8 -> $0157                CANIDMR3        EQU     $0157
001CC8 0F9CC8 -> $0157                CAN0IDMR3       EQU     $0157
001CC8 0F9CC8 -> $0158                CANIDAR4        EQU     $0158
001CC8 0F9CC8 -> $0158                CAN0IDAR4       EQU     $0158
001CC8 0F9CC8 -> $0159                CANIDAR5        EQU     $0159
001CC8 0F9CC8 -> $0159                CAN0IDAR5       EQU     $0159
001CC8 0F9CC8 -> $015A                CANIDAR6        EQU     $015A
001CC8 0F9CC8 -> $015A                CAN0IDAR6       EQU     $015A
001CC8 0F9CC8 -> $015B                CANIDAR7        EQU     $015B
001CC8 0F9CC8 -> $015B                CAN0IDAR7       EQU     $015B
001CC8 0F9CC8 -> $015C                CANIDMR4        EQU     $015C
001CC8 0F9CC8 -> $015C                CAN0IDMR4       EQU     $015C
001CC8 0F9CC8 -> $015D                CANIDMR5        EQU     $015D
001CC8 0F9CC8 -> $015D                CAN0IDMR5       EQU     $015D
001CC8 0F9CC8 -> $015E                CANIDMR6        EQU     $015E
001CC8 0F9CC8 -> $015E                CAN0IDMR6       EQU     $015E
001CC8 0F9CC8 -> $015F                CANIDMR7        EQU     $015F
001CC8 0F9CC8 -> $015F                CAN0IDMR7       EQU     $015F
001CC8 0F9CC8 -> $0160                CANRXIDR0       EQU     $0160
001CC8 0F9CC8 -> $0160                CAN0RXIDR0      EQU     $0160
001CC8 0F9CC8 -> $0161                CANRXIDR1       EQU     $0161
001CC8 0F9CC8 -> $0161                CAN0RXIDR1      EQU     $0161
001CC8 0F9CC8 -> $0162                CANRXIDR2       EQU     $0162
001CC8 0F9CC8 -> $0162                CAN0RXIDR2      EQU     $0162
001CC8 0F9CC8 -> $0163                CANRXIDR3       EQU     $0163
001CC8 0F9CC8 -> $0163                CAN0RXIDR3      EQU     $0163
001CC8 0F9CC8 -> $0164                CANRXDSR0       EQU     $0164
001CC8 0F9CC8 -> $0164                CAN0RXDSR0      EQU     $0164
001CC8 0F9CC8 -> $0165                CANRXDSR1       EQU     $0165
001CC8 0F9CC8 -> $0165                CAN0RXDSR1      EQU     $0165
001CC8 0F9CC8 -> $0166                CANRXDSR2       EQU     $0166
001CC8 0F9CC8 -> $0166                CAN0RXDSR2      EQU     $0166
001CC8 0F9CC8 -> $0167                CANRXDSR3       EQU     $0167
001CC8 0F9CC8 -> $0167                CAN0RXDSR3      EQU     $0167
001CC8 0F9CC8 -> $0168                CANRXDSR4       EQU     $0168
001CC8 0F9CC8 -> $0168                CAN0RXDSR4      EQU     $0168
001CC8 0F9CC8 -> $0169                CANRXDSR5       EQU     $0169
001CC8 0F9CC8 -> $0169                CAN0RXDSR5      EQU     $0169
001CC8 0F9CC8 -> $016A                CANRXDSR6       EQU     $016A
001CC8 0F9CC8 -> $016A                CAN0RXDSR6      EQU     $016A
001CC8 0F9CC8 -> $016B                CANRXDSR7       EQU     $016B
001CC8 0F9CC8 -> $016B                CAN0RXDSR7      EQU     $016B
001CC8 0F9CC8 -> $016C                CANRXDLR        EQU     $016C
001CC8 0F9CC8 -> $016C                CAN0RXDLR       EQU     $016C
                                      ;$016D reserved
001CC8 0F9CC8 -> $016E                CANRTSRH        EQU     $016E
001CC8 0F9CC8 -> $016E                CAN0RTSRH       EQU     $016E
001CC8 0F9CC8 -> $016F                CANRTSRL        EQU     $016F
001CC8 0F9CC8 -> $016F                CAN0RTSRL       EQU     $016F
001CC8 0F9CC8 -> $0170                CANTXIDR0       EQU     $0170
001CC8 0F9CC8 -> $0170                CAN0TXIDR0      EQU     $0170
001CC8 0F9CC8 -> $0171                CANTXIDR1       EQU     $0171
001CC8 0F9CC8 -> $0171                CAN0TXIDR1      EQU     $0171
001CC8 0F9CC8 -> $0172                CANTXIDR2       EQU     $0172
001CC8 0F9CC8 -> $0172                CAN0TXIDR2      EQU     $0172
001CC8 0F9CC8 -> $0172                CANTXIDR2       EQU     $0172
001CC8 0F9CC8 -> $0172                CAN0TXIDR2      EQU     $0172
001CC8 0F9CC8 -> $0173                CANTXIDR3       EQU     $0173
001CC8 0F9CC8 -> $0173                CAN0TXIDR3      EQU     $0173
001CC8 0F9CC8 -> $0174                CANTXDSR0       EQU     $0174
001CC8 0F9CC8 -> $0174                CAN0TXDSR0      EQU     $0174
001CC8 0F9CC8 -> $0175                CANTXDSR1       EQU     $0175
001CC8 0F9CC8 -> $0175                CAN0TXDSR1      EQU     $0175
001CC8 0F9CC8 -> $0176                CANTXDSR2       EQU     $0176
001CC8 0F9CC8 -> $0176                CAN0TXDSR2      EQU     $0176
001CC8 0F9CC8 -> $0177                CANTXDSR3       EQU     $0177
001CC8 0F9CC8 -> $0177                CAN0TXDSR3      EQU     $0177
001CC8 0F9CC8 -> $0178                CANTXDSR4       EQU     $0178
001CC8 0F9CC8 -> $0178                CAN0TXDSR4      EQU     $0178
001CC8 0F9CC8 -> $0179                CANTXDSR5       EQU     $0179
001CC8 0F9CC8 -> $0179                CAN0TXDSR5      EQU     $0179
001CC8 0F9CC8 -> $017A                CANTXDSR6       EQU     $017A
001CC8 0F9CC8 -> $017A                CAN0TXDSR6      EQU     $017A
001CC8 0F9CC8 -> $017B                CANTXDSR7       EQU     $017B
001CC8 0F9CC8 -> $017B                CAN0TXDSR7      EQU     $017B
001CC8 0F9CC8 -> $017C                CANTXDLR        EQU     $017C
001CC8 0F9CC8 -> $017C                CAN0TXDLR       EQU     $017C
001CC8 0F9CC8 -> $017D                CANTXTBPR       EQU     $017D
001CC8 0F9CC8 -> $017D                CAN0TXTBPR      EQU     $017D
001CC8 0F9CC8 -> $017E                CANTXTSRH       EQU     $017E
001CC8 0F9CC8 -> $017E                CAN0TXTSRH      EQU     $017E
001CC8 0F9CC8 -> $017F                CANTXTSRL       EQU     $017F
001CC8 0F9CC8 -> $017F                CAN0TXTSRL      EQU     $017F
001CC8 0F9CC8 -> $0180                CAN1CTL0        EQU     $0180
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CC8 0F9CC8 -> $0181                CAN1CTL1        EQU     $0181
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CC8 0F9CC8 -> $0182                CAN1BTR0        EQU     $0182
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CC8 0F9CC8 -> $0183                CAN1BTR1        EQU     $0183
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CC8 0F9CC8 -> $0184                CAN1RFLG        EQU     $0184
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CC8 0F9CC8 -> $0185                CAN1RIER        EQU     $0185
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CC8 0F9CC8 -> $0186                CAN1TFLG        EQU     $0186
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CC8 0F9CC8 -> $0187                CAN1TIER        EQU     $0187
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CC8 0F9CC8 -> $0188                CAN1TARQ        EQU     $0188
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CC8 0F9CC8 -> $0189                CAN1TAAK        EQU     $0189
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CC8 0F9CC8 -> $018A                CAN1TBSEL       EQU     $018A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CC8 0F9CC8 -> $018B                CAN1IDAC        EQU     $018B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$18C  reserved
001CC8 0F9CC8 -> $018D                CAN1MISC        EQU     $018D
                                      ;BOHOLD         EQU     $01
001CC8 0F9CC8 -> $018E                CAN1RXERR       EQU     $018E
001CC8 0F9CC8 -> $018F                CAN1TXERR       EQU     $018F
001CC8 0F9CC8 -> $0190                CAN1IDAR0       EQU     $0190
001CC8 0F9CC8 -> $0191                CAN1IDAR1       EQU     $0191
001CC8 0F9CC8 -> $0192                CAN1IDAR2       EQU     $0192
001CC8 0F9CC8 -> $0193                CAN1IDAR3       EQU     $0193
001CC8 0F9CC8 -> $0194                CAN1IDMR0       EQU     $0194
001CC8 0F9CC8 -> $0195                CAN1IDMR1       EQU     $0195
001CC8 0F9CC8 -> $0196                CAN1IDMR2       EQU     $0196
001CC8 0F9CC8 -> $0197                CAN1IDMR3       EQU     $0197
001CC8 0F9CC8 -> $0198                CAN1IDAR4       EQU     $0198
001CC8 0F9CC8 -> $0199                CAN1IDAR5       EQU     $0199
001CC8 0F9CC8 -> $019A                CAN1IDAR6       EQU     $019A
001CC8 0F9CC8 -> $019B                CAN1IDAR7       EQU     $019B
001CC8 0F9CC8 -> $019C                CAN1IDMR4       EQU     $019C
001CC8 0F9CC8 -> $019D                CAN1IDMR5       EQU     $019D
001CC8 0F9CC8 -> $019E                CAN1IDMR6       EQU     $019E
001CC8 0F9CC8 -> $019F                CAN1IDMR7       EQU     $019F
001CC8 0F9CC8 -> $01A0                CAN1RXIDR0      EQU     $01A0
001CC8 0F9CC8 -> $01A1                CAN1RXIDR1      EQU     $01A1
001CC8 0F9CC8 -> $01A2                CAN1RXIDR2      EQU     $01A2
001CC8 0F9CC8 -> $01A3                CAN1RXIDR3      EQU     $01A3
001CC8 0F9CC8 -> $01A4                CAN1RXDSR0      EQU     $01A4
001CC8 0F9CC8 -> $01A5                CAN1RXDSR1      EQU     $01A5
001CC8 0F9CC8 -> $01A6                CAN1RXDSR2      EQU     $01A6
001CC8 0F9CC8 -> $01A7                CAN1RXDSR3      EQU     $01A7
001CC8 0F9CC8 -> $01A8                CAN1RXDSR4      EQU     $01A8
001CC8 0F9CC8 -> $01A9                CAN1RXDSR5      EQU     $01A9
001CC8 0F9CC8 -> $01AA                CAN1RXDSR6      EQU     $01AA
001CC8 0F9CC8 -> $01AB                CAN1RXDSR7      EQU     $01AB
001CC8 0F9CC8 -> $01AC                CAN1RXDLR       EQU     $01AC
                                      ;$01AD reserved
001CC8 0F9CC8 -> $01AE                CAN1RTSRH       EQU     $01AE
001CC8 0F9CC8 -> $01AF                CAN1RTSRL       EQU     $01AF
001CC8 0F9CC8 -> $01B0                CAN1TXIDR0      EQU     $01B0
001CC8 0F9CC8 -> $01B1                CAN1TXIDR1      EQU     $01B1
001CC8 0F9CC8 -> $01B2                CAN1TXIDR2      EQU     $01B2
001CC8 0F9CC8 -> $01B2                CAN1TXIDR2      EQU     $01B2
001CC8 0F9CC8 -> $01B3                CAN1TXIDR3      EQU     $01B3
001CC8 0F9CC8 -> $01B4                CAN1TXDSR0      EQU     $01B4
001CC8 0F9CC8 -> $01B5                CAN1TXDSR1      EQU     $01B5
001CC8 0F9CC8 -> $01B6                CAN1TXDSR2      EQU     $01B6
001CC8 0F9CC8 -> $01B7                CAN1XDSR3       EQU     $01B7
001CC8 0F9CC8 -> $01B7                CAN1TXDSR3      EQU     $01B7
001CC8 0F9CC8 -> $01B8                CAN1TXDSR4      EQU     $01B8
001CC8 0F9CC8 -> $01B9                CAN1TXDSR5      EQU     $01B9
001CC8 0F9CC8 -> $01BA                CAN1TXDSR6      EQU     $01BA
001CC8 0F9CC8 -> $01BB                CAN1TXDSR7      EQU     $01BB
001CC8 0F9CC8 -> $01BC                CAN1TXDLR       EQU     $01BC
001CC8 0F9CC8 -> $01BD                CAN1TXTBPR      EQU     $01BD
001CC8 0F9CC8 -> $01BE                CAN1TXTSRH      EQU     $01BE
001CC8 0F9CC8 -> $01BF                CAN1TXTSRL      EQU     $01BF
001CC8 0F9CC8 -> $01C0                CAN2CTL0        EQU     $01C0
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CC8 0F9CC8 -> $01C1                CAN2CTL1        EQU     $01C1
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CC8 0F9CC8 -> $01C2                CAN2BTR0        EQU     $01C2
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CC8 0F9CC8 -> $01C3                CAN2BTR1        EQU     $01C3
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CC8 0F9CC8 -> $01C4                CAN2RFLG        EQU     $01C4
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CC8 0F9CC8 -> $01C5                CAN2RIER        EQU     $01C5
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CC8 0F9CC8 -> $01C6                CAN2TFLG        EQU     $01C6
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CC8 0F9CC8 -> $01C7                CAN2TIER        EQU     $01C7
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CC8 0F9CC8 -> $01C8                CAN2TARQ        EQU     $01C8
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CC8 0F9CC8 -> $01C9                CAN2TAAK        EQU     $01C9
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CC8 0F9CC8 -> $01CA                CAN2TBSEL       EQU     $01CA
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CC8 0F9CC8 -> $01CB                CAN2IDAC        EQU     $01CB
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$01CC  reserved
001CC8 0F9CC8 -> $01CD                CAN2MISC        EQU     $01CD
                                      ;BOHOLD         EQU     $01
001CC8 0F9CC8 -> $01CE                CAN2RXERR       EQU     $01CE
001CC8 0F9CC8 -> $01CF                CAN2TXERR       EQU     $01CF
001CC8 0F9CC8 -> $01D0                CAN2IDAR0       EQU     $01D0
001CC8 0F9CC8 -> $01D1                CAN2IDAR1       EQU     $01D1
001CC8 0F9CC8 -> $01D2                CAN2IDAR2       EQU     $01D2
001CC8 0F9CC8 -> $01D3                CAN2IDAR3       EQU     $01D3
001CC8 0F9CC8 -> $01D4                CAN2IDMR0       EQU     $01D4
001CC8 0F9CC8 -> $01D5                CAN2IDMR1       EQU     $01D5
001CC8 0F9CC8 -> $01D6                CAN2IDMR2       EQU     $01D6
001CC8 0F9CC8 -> $01D7                CAN2IDMR3       EQU     $01D7
001CC8 0F9CC8 -> $01D8                CAN2IDAR4       EQU     $01D8
001CC8 0F9CC8 -> $01D9                CAN2IDAR5       EQU     $01D9
001CC8 0F9CC8 -> $01DA                CAN2IDAR6       EQU     $01DA
001CC8 0F9CC8 -> $01DB                CAN2IDAR7       EQU     $01DB
001CC8 0F9CC8 -> $01DC                CAN2IDMR4       EQU     $01DC
001CC8 0F9CC8 -> $01DD                CAN2IDMR5       EQU     $01DD
001CC8 0F9CC8 -> $01DE                CAN2IDMR6       EQU     $01DE
001CC8 0F9CC8 -> $01DF                CAN2IDMR7       EQU     $01DF
001CC8 0F9CC8 -> $01E0                CAN2RXIDR0      EQU     $01E0
001CC8 0F9CC8 -> $01E1                CAN2RXIDR1      EQU     $01E1
001CC8 0F9CC8 -> $01E2                CAN2RXIDR2      EQU     $01E2
001CC8 0F9CC8 -> $01E3                CAN2RXIDR3      EQU     $01E3
001CC8 0F9CC8 -> $01E4                CAN2RXDSR0      EQU     $01E4
001CC8 0F9CC8 -> $01E5                CAN2RXDSR1      EQU     $01E5
001CC8 0F9CC8 -> $01E6                CAN2RXDSR2      EQU     $01E6
001CC8 0F9CC8 -> $01E7                CAN2RXDSR3      EQU     $01E7
001CC8 0F9CC8 -> $01E8                CAN2RXDSR4      EQU     $01E8
001CC8 0F9CC8 -> $01E9                CAN2RXDSR5      EQU     $01E9
001CC8 0F9CC8 -> $01EA                CAN2RXDSR6      EQU     $01EA
001CC8 0F9CC8 -> $01EB                CAN2RXDSR7      EQU     $01EB
001CC8 0F9CC8 -> $01EC                CAN2RXDLR       EQU     $01EC
                                      ;$01ED reserved
001CC8 0F9CC8 -> $01EE                CAN2RTSRH       EQU     $01EE
001CC8 0F9CC8 -> $01EF                CAN2RTSRL       EQU     $01EF
001CC8 0F9CC8 -> $01F0                CAN2TXIDR0      EQU     $01F0
001CC8 0F9CC8 -> $01F1                CAN2TXIDR1      EQU     $01F1
001CC8 0F9CC8 -> $01F2                CAN2TXIDR2      EQU     $01F2
001CC8 0F9CC8 -> $01F2                CAN2TXIDR2      EQU     $01F2
001CC8 0F9CC8 -> $01F3                CAN2TXIDR3      EQU     $01F3
001CC8 0F9CC8 -> $01F4                CAN2TXDSR0      EQU     $01F4
001CC8 0F9CC8 -> $01F5                CAN2TXDSR1      EQU     $01F5
001CC8 0F9CC8 -> $01F6                CAN2TXDSR2      EQU     $01F6
001CC8 0F9CC8 -> $01F7                CAN2XDSR3       EQU     $01F7
001CC8 0F9CC8 -> $01F7                CAN2TXDSR3      EQU     $01F7
001CC8 0F9CC8 -> $01F8                CAN2TXDSR4      EQU     $01F8
001CC8 0F9CC8 -> $01F9                CAN2TXDSR5      EQU     $01F9
001CC8 0F9CC8 -> $01FA                CAN2TXDSR6      EQU     $01FA
001CC8 0F9CC8 -> $01FB                CAN2TXDSR7      EQU     $01FB
001CC8 0F9CC8 -> $01FC                CAN2TXDLR       EQU     $01FC
001CC8 0F9CC8 -> $01FD                CAN2TXTBPR      EQU     $01FD
001CC8 0F9CC8 -> $01FE                CAN2TXTSRH      EQU     $01FE
001CC8 0F9CC8 -> $01FF                CAN2TXTSRL      EQU     $01FF
001CC8 0F9CC8 -> $0200                CAN3CTL0        EQU     $0200
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CC8 0F9CC8 -> $0201                CAN3CTL1        EQU     $0201
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CC8 0F9CC8 -> $0202                CAN3BTR0        EQU     $0202
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CC8 0F9CC8 -> $0203                CAN3BTR1        EQU     $0203
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CC8 0F9CC8 -> $0204                CAN3RFLG        EQU     $0204
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CC8 0F9CC8 -> $0205                CAN3RIER        EQU     $0205
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CC8 0F9CC8 -> $0206                CAN3TFLG        EQU     $0206
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CC8 0F9CC8 -> $0207                CAN3TIER        EQU     $0207
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CC8 0F9CC8 -> $0208                CAN3TARQ        EQU     $0208
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CC8 0F9CC8 -> $0209                CAN3TAAK        EQU     $0209
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CC8 0F9CC8 -> $020A                CAN3TBSEL       EQU     $020A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CC8 0F9CC8 -> $020B                CAN3IDAC        EQU     $020B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$020C  reserved
001CC8 0F9CC8 -> $020D                CAN3MISC        EQU     $020D
                                      ;BOHOLD         EQU     $01
001CC8 0F9CC8 -> $020E                CAN3RXERR       EQU     $020E
001CC8 0F9CC8 -> $020F                CAN3TXERR       EQU     $020F
001CC8 0F9CC8 -> $0210                CAN3IDAR0       EQU     $0210
001CC8 0F9CC8 -> $0211                CAN3IDAR1       EQU     $0211
001CC8 0F9CC8 -> $0212                CAN3IDAR2       EQU     $0212
001CC8 0F9CC8 -> $0213                CAN3IDAR3       EQU     $0213
001CC8 0F9CC8 -> $0214                CAN3IDMR0       EQU     $0214
001CC8 0F9CC8 -> $0215                CAN3IDMR1       EQU     $0215
001CC8 0F9CC8 -> $0216                CAN3IDMR2       EQU     $0216
001CC8 0F9CC8 -> $0217                CAN3IDMR3       EQU     $0217
001CC8 0F9CC8 -> $0218                CAN3IDAR4       EQU     $0218
001CC8 0F9CC8 -> $0219                CAN3IDAR5       EQU     $0219
001CC8 0F9CC8 -> $021A                CAN3IDAR6       EQU     $021A
001CC8 0F9CC8 -> $021B                CAN3IDAR7       EQU     $021B
001CC8 0F9CC8 -> $021C                CAN3IDMR4       EQU     $021C
001CC8 0F9CC8 -> $021D                CAN3IDMR5       EQU     $021D
001CC8 0F9CC8 -> $021E                CAN3IDMR6       EQU     $021E
001CC8 0F9CC8 -> $021F                CAN3IDMR7       EQU     $021F
001CC8 0F9CC8 -> $0220                CAN3RXIDR0      EQU     $0220
001CC8 0F9CC8 -> $0221                CAN3RXIDR1      EQU     $0221
001CC8 0F9CC8 -> $0222                CAN3RXIDR2      EQU     $0222
001CC8 0F9CC8 -> $0223                CAN3RXIDR3      EQU     $0223
001CC8 0F9CC8 -> $0224                CAN3RXDSR0      EQU     $0224
001CC8 0F9CC8 -> $0225                CAN3RXDSR1      EQU     $0225
001CC8 0F9CC8 -> $0226                CAN3RXDSR2      EQU     $0226
001CC8 0F9CC8 -> $0227                CAN3RXDSR3      EQU     $0227
001CC8 0F9CC8 -> $0228                CAN3RXDSR4      EQU     $0228
001CC8 0F9CC8 -> $0229                CAN3RXDSR5      EQU     $0229
001CC8 0F9CC8 -> $022A                CAN3RXDSR6      EQU     $022A
001CC8 0F9CC8 -> $022B                CAN3RXDSR7      EQU     $022B
001CC8 0F9CC8 -> $022C                CAN3RXDLR       EQU     $022C
                                      ;$022D reserved
001CC8 0F9CC8 -> $022E                CAN3RTSRH       EQU     $022E
001CC8 0F9CC8 -> $022F                CAN3RTSRL       EQU     $022F
001CC8 0F9CC8 -> $0230                CAN3TXIDR0      EQU     $0230
001CC8 0F9CC8 -> $0231                CAN3TXIDR1      EQU     $0231
001CC8 0F9CC8 -> $0232                CAN3TXIDR2      EQU     $0232
001CC8 0F9CC8 -> $0232                CAN3TXIDR2      EQU     $0232
001CC8 0F9CC8 -> $0233                CAN3TXIDR3      EQU     $0233
001CC8 0F9CC8 -> $0234                CAN3TXDSR0      EQU     $0234
001CC8 0F9CC8 -> $0235                CAN3TXDSR1      EQU     $0235
001CC8 0F9CC8 -> $0236                CAN3TXDSR2      EQU     $0236
001CC8 0F9CC8 -> $0237                CAN3XDSR3       EQU     $0237
001CC8 0F9CC8 -> $0237                CAN3TXDSR3      EQU     $0237
001CC8 0F9CC8 -> $0238                CAN3TXDSR4      EQU     $0238
001CC8 0F9CC8 -> $0239                CAN3TXDSR5      EQU     $0239
001CC8 0F9CC8 -> $023A                CAN3TXDSR6      EQU     $023A
001CC8 0F9CC8 -> $023B                CAN3TXDSR7      EQU     $023B
001CC8 0F9CC8 -> $023C                CAN3TXDLR       EQU     $023C
001CC8 0F9CC8 -> $023D                CAN3TXTBPR      EQU     $023D
001CC8 0F9CC8 -> $023E                CAN3TXTSRH      EQU     $023E
001CC8 0F9CC8 -> $023F                CAN3TXTSRL      EQU     $023F
001CC8 0F9CC8 -> $0240                PTT             EQU     $0240
001CC8 0F9CC8 -> $0080                PTT7            EQU     $80
001CC8 0F9CC8 -> $0040                PTT6            EQU     $40
001CC8 0F9CC8 -> $0020                PTT5            EQU     $20
001CC8 0F9CC8 -> $0010                PTT4            EQU     $10
001CC8 0F9CC8 -> $0008                PTT3            EQU     $08
001CC8 0F9CC8 -> $0004                PTT2            EQU     $04
001CC8 0F9CC8 -> $0002                PTT1            EQU     $02
001CC8 0F9CC8 -> $0001                PTT0            EQU     $01
001CC8 0F9CC8 -> $0080                PT7             EQU     $80
001CC8 0F9CC8 -> $0040                PT6             EQU     $40
001CC8 0F9CC8 -> $0020                PT5             EQU     $20
001CC8 0F9CC8 -> $0010                PT4             EQU     $10
001CC8 0F9CC8 -> $0008                PT3             EQU     $08
001CC8 0F9CC8 -> $0004                PT2             EQU     $04
001CC8 0F9CC8 -> $0002                PT1             EQU     $02
001CC8 0F9CC8 -> $0001                PT0             EQU     $01
001CC8 0F9CC8 -> $0241                PTIT            EQU     $0241
001CC8 0F9CC8 -> $0080                PTIT7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIT6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIT5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIT4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIT3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIT2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIT1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIT0           EQU     $01
001CC8 0F9CC8 -> $0242                DDRT            EQU     $0242
001CC8 0F9CC8 -> $0080                DDRT7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRT6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRT5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRT4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRT3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRT2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRT1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRT0           EQU     $01
001CC8 0F9CC8 -> $0243                RDRT            EQU     $0243
001CC8 0F9CC8 -> $0080                RDRT7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRT6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRT5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRT4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRT3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRT2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRT1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRT0           EQU     $01
001CC8 0F9CC8 -> $0244                PERT            EQU     $0244
001CC8 0F9CC8 -> $0080                PERT7           EQU     $80
001CC8 0F9CC8 -> $0040                PERT6           EQU     $40
001CC8 0F9CC8 -> $0020                PERT5           EQU     $20
001CC8 0F9CC8 -> $0010                PERT4           EQU     $10
001CC8 0F9CC8 -> $0008                PERT3           EQU     $08
001CC8 0F9CC8 -> $0004                PERT2           EQU     $04
001CC8 0F9CC8 -> $0002                PERT1           EQU     $02
001CC8 0F9CC8 -> $0001                PERT0           EQU     $01
001CC8 0F9CC8 -> $0245                PPST            EQU     $0245
001CC8 0F9CC8 -> $0080                PPST7           EQU     $80
001CC8 0F9CC8 -> $0040                PPST6           EQU     $40
001CC8 0F9CC8 -> $0020                PPST5           EQU     $20
001CC8 0F9CC8 -> $0010                PPST4           EQU     $10
001CC8 0F9CC8 -> $0008                PPST3           EQU     $08
001CC8 0F9CC8 -> $0004                PPST2           EQU     $04
001CC8 0F9CC8 -> $0002                PPST1           EQU     $02
001CC8 0F9CC8 -> $0001                PPST0           EQU     $01
                                      ;$0246 to $0247 reserved
001CC8 0F9CC8 -> $0248                PTS             EQU     $0248
001CC8 0F9CC8 -> $0080                PTS7            EQU     $80
001CC8 0F9CC8 -> $0040                PTS6            EQU     $40
001CC8 0F9CC8 -> $0020                PTS5            EQU     $20
001CC8 0F9CC8 -> $0010                PTS4            EQU     $10
001CC8 0F9CC8 -> $0008                PTS3            EQU     $08
001CC8 0F9CC8 -> $0004                PTS2            EQU     $04
001CC8 0F9CC8 -> $0002                PTS1            EQU     $02
001CC8 0F9CC8 -> $0001                PTS0            EQU     $01
001CC8 0F9CC8 -> $0080                PS7             EQU     $80
001CC8 0F9CC8 -> $0040                PS6             EQU     $40
001CC8 0F9CC8 -> $0020                PS5             EQU     $20
001CC8 0F9CC8 -> $0010                PS4             EQU     $10
001CC8 0F9CC8 -> $0008                PS3             EQU     $08
001CC8 0F9CC8 -> $0004                PS2             EQU     $04
001CC8 0F9CC8 -> $0002                PS1             EQU     $02
001CC8 0F9CC8 -> $0001                PS0             EQU     $01
001CC8 0F9CC8 -> $0249                PTIS            EQU     $0249
001CC8 0F9CC8 -> $0080                PTIS7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIS6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIS5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIS4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIS3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIS2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIS1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIS0           EQU     $01
001CC8 0F9CC8 -> $024A                DDRS            EQU     $024A
001CC8 0F9CC8 -> $0080                DDRS7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRS6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRS5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRS4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRS3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRS2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRS1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRS0           EQU     $01
001CC8 0F9CC8 -> $024B                RDRS            EQU     $024B
001CC8 0F9CC8 -> $0080                RDRS7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRS6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRS5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRS4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRS3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRS2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRS1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRS0           EQU     $01
001CC8 0F9CC8 -> $024C                PERS            EQU     $024C
001CC8 0F9CC8 -> $0080                PERS7           EQU     $80
001CC8 0F9CC8 -> $0040                PERS6           EQU     $40
001CC8 0F9CC8 -> $0020                PERS5           EQU     $20
001CC8 0F9CC8 -> $0010                PERS4           EQU     $10
001CC8 0F9CC8 -> $0008                PERS3           EQU     $08
001CC8 0F9CC8 -> $0004                PERS2           EQU     $04
001CC8 0F9CC8 -> $0002                PERS1           EQU     $02
001CC8 0F9CC8 -> $0001                PERS0           EQU     $01
001CC8 0F9CC8 -> $024D                PPSS            EQU     $024D
001CC8 0F9CC8 -> $0080                PPSS7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSS6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSS5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSS4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSS3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSS2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSS1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSS0           EQU     $01
001CC8 0F9CC8 -> $024E                WOMS            EQU     $024E
001CC8 0F9CC8 -> $0080                WOMS7           EQU     $80
001CC8 0F9CC8 -> $0040                WOMS6           EQU     $40
001CC8 0F9CC8 -> $0020                WOMS5           EQU     $20
001CC8 0F9CC8 -> $0010                WOMS4           EQU     $10
001CC8 0F9CC8 -> $0008                WOMS3           EQU     $08
001CC8 0F9CC8 -> $0004                WOMS2           EQU     $04
001CC8 0F9CC8 -> $0002                WOMS1           EQU     $02
001CC8 0F9CC8 -> $0001                WOMS0           EQU     $01
                                      ;$024F reserved
001CC8 0F9CC8 -> $0250                PTM             EQU     $0250
001CC8 0F9CC8 -> $0080                PTM7            EQU     $80
001CC8 0F9CC8 -> $0040                PTM6            EQU     $40
001CC8 0F9CC8 -> $0020                PTM5            EQU     $20
001CC8 0F9CC8 -> $0010                PTM4            EQU     $10
001CC8 0F9CC8 -> $0008                PTM3            EQU     $08
001CC8 0F9CC8 -> $0004                PTM2            EQU     $04
001CC8 0F9CC8 -> $0002                PTM1            EQU     $02
001CC8 0F9CC8 -> $0001                PTM0            EQU     $01
001CC8 0F9CC8 -> $0080                PM7             EQU     $80
001CC8 0F9CC8 -> $0040                PM6             EQU     $40
001CC8 0F9CC8 -> $0020                PM5             EQU     $20
001CC8 0F9CC8 -> $0010                PM4             EQU     $10
001CC8 0F9CC8 -> $0008                PM3             EQU     $08
001CC8 0F9CC8 -> $0004                PM2             EQU     $04
001CC8 0F9CC8 -> $0002                PM1             EQU     $02
001CC8 0F9CC8 -> $0001                PM0             EQU     $01
001CC8 0F9CC8 -> $0251                PTIM            EQU     $0251
001CC8 0F9CC8 -> $0080                PTIM7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIM6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIM5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIM4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIM3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIM2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIM1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIM0           EQU     $01
001CC8 0F9CC8 -> $0252                DDRM            EQU     $0252
001CC8 0F9CC8 -> $0080                DDRM7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRM6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRM5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRM4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRM3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRM2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRM1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRM0           EQU     $01
001CC8 0F9CC8 -> $0253                RDRM            EQU     $0253
001CC8 0F9CC8 -> $0080                RDRM7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRM6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRM5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRM4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRM3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRM2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRM1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRM0           EQU     $01
001CC8 0F9CC8 -> $0254                PERM            EQU     $0254
001CC8 0F9CC8 -> $0080                PERM7           EQU     $80
001CC8 0F9CC8 -> $0040                PERM6           EQU     $40
001CC8 0F9CC8 -> $0020                PERM5           EQU     $20
001CC8 0F9CC8 -> $0010                PERM4           EQU     $10
001CC8 0F9CC8 -> $0008                PERM3           EQU     $08
001CC8 0F9CC8 -> $0004                PERM2           EQU     $04
001CC8 0F9CC8 -> $0002                PERM1           EQU     $02
001CC8 0F9CC8 -> $0001                PERM0           EQU     $01
001CC8 0F9CC8 -> $0255                PPSM            EQU     $0255
001CC8 0F9CC8 -> $0080                PPSM7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSM6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSM5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSM4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSM3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSM2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSM1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSM0           EQU     $01
001CC8 0F9CC8 -> $0256                WOMM            EQU     $0256
001CC8 0F9CC8 -> $0080                WOMM7           EQU     $80
001CC8 0F9CC8 -> $0040                WOMM6           EQU     $40
001CC8 0F9CC8 -> $0020                WOMM5           EQU     $20
001CC8 0F9CC8 -> $0010                WOMM4           EQU     $10
001CC8 0F9CC8 -> $0008                WOMM3           EQU     $08
001CC8 0F9CC8 -> $0004                WOMM2           EQU     $04
001CC8 0F9CC8 -> $0002                WOMM1           EQU     $02
001CC8 0F9CC8 -> $0001                WOMM0           EQU     $01
001CC8 0F9CC8 -> $0257                MODRR           EQU     $0257
001CC8 0F9CC8 -> $0040                MODRR6          EQU     $40
001CC8 0F9CC8 -> $0020                MODRR5          EQU     $20
001CC8 0F9CC8 -> $0010                MODRR4          EQU     $10
001CC8 0F9CC8 -> $0008                MODRR3          EQU     $08
001CC8 0F9CC8 -> $0004                MODRR2          EQU     $04
001CC8 0F9CC8 -> $0002                MODRR1          EQU     $02
001CC8 0F9CC8 -> $0001                MODRR0          EQU     $01
001CC8 0F9CC8 -> $0258                PTP             EQU     $0258
001CC8 0F9CC8 -> $0080                PTP7            EQU     $80
001CC8 0F9CC8 -> $0040                PTP6            EQU     $40
001CC8 0F9CC8 -> $0020                PTP5            EQU     $20
001CC8 0F9CC8 -> $0010                PTP4            EQU     $10
001CC8 0F9CC8 -> $0008                PTP3            EQU     $08
001CC8 0F9CC8 -> $0004                PTP2            EQU     $04
001CC8 0F9CC8 -> $0002                PTP1            EQU     $02
001CC8 0F9CC8 -> $0001                PTP0            EQU     $01
001CC8 0F9CC8 -> $0080                PP7             EQU     $80
001CC8 0F9CC8 -> $0040                PP6             EQU     $40
001CC8 0F9CC8 -> $0020                PP5             EQU     $20
001CC8 0F9CC8 -> $0010                PP4             EQU     $10
001CC8 0F9CC8 -> $0008                PP3             EQU     $08
001CC8 0F9CC8 -> $0004                PP2             EQU     $04
001CC8 0F9CC8 -> $0002                PP1             EQU     $02
001CC8 0F9CC8 -> $0001                PP0             EQU     $01
001CC8 0F9CC8 -> $0259                PTIP            EQU     $0259
001CC8 0F9CC8 -> $0080                PTIP7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIP6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIP5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIP4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIP3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIP2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIP1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIP0           EQU     $01
001CC8 0F9CC8 -> $025A                DDRP            EQU     $025A
001CC8 0F9CC8 -> $0080                DDRP7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRP6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRP5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRP4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRP3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRP2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRP1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRP0           EQU     $01
001CC8 0F9CC8 -> $025B                RDRP            EQU     $025B
001CC8 0F9CC8 -> $0080                RDRP7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRP6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRP5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRP4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRP3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRP2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRP1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRP0           EQU     $01
001CC8 0F9CC8 -> $025C                PERP            EQU     $025C
001CC8 0F9CC8 -> $0080                PERP7           EQU     $80
001CC8 0F9CC8 -> $0040                PERP6           EQU     $40
001CC8 0F9CC8 -> $0020                PERP5           EQU     $20
001CC8 0F9CC8 -> $0010                PERP4           EQU     $10
001CC8 0F9CC8 -> $0008                PERP3           EQU     $08
001CC8 0F9CC8 -> $0004                PERP2           EQU     $04
001CC8 0F9CC8 -> $0002                PERP1           EQU     $02
001CC8 0F9CC8 -> $0001                PERP0           EQU     $01
001CC8 0F9CC8 -> $025D                PPSP            EQU     $025D
001CC8 0F9CC8 -> $0080                PPSP7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSP6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSP5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSP4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSP3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSP2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSP1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSP0           EQU     $01
001CC8 0F9CC8 -> $025E                PIEP            EQU     $025E
001CC8 0F9CC8 -> $0080                PIEP7           EQU     $80
001CC8 0F9CC8 -> $0040                PIEP6           EQU     $40
001CC8 0F9CC8 -> $0020                PIEP5           EQU     $20
001CC8 0F9CC8 -> $0010                PIEP4           EQU     $10
001CC8 0F9CC8 -> $0008                PIEP3           EQU     $08
001CC8 0F9CC8 -> $0004                PIEP2           EQU     $04
001CC8 0F9CC8 -> $0002                PIEP1           EQU     $02
001CC8 0F9CC8 -> $0001                PIEP0           EQU     $01
001CC8 0F9CC8 -> $025F                PIFP            EQU     $025F
001CC8 0F9CC8 -> $0080                PIFP7           EQU     $80
001CC8 0F9CC8 -> $0040                PIFP6           EQU     $40
001CC8 0F9CC8 -> $0020                PIFP5           EQU     $20
001CC8 0F9CC8 -> $0010                PIFP4           EQU     $10
001CC8 0F9CC8 -> $0008                PIFP3           EQU     $08
001CC8 0F9CC8 -> $0004                PIFP2           EQU     $04
001CC8 0F9CC8 -> $0002                PIFP1           EQU     $02
001CC8 0F9CC8 -> $0001                PIFP0           EQU     $01
001CC8 0F9CC8 -> $0260                PTH             EQU     $0260
001CC8 0F9CC8 -> $0080                PTH7            EQU     $80
001CC8 0F9CC8 -> $0040                PTH6            EQU     $40
001CC8 0F9CC8 -> $0020                PTH5            EQU     $20
001CC8 0F9CC8 -> $0010                PTH4            EQU     $10
001CC8 0F9CC8 -> $0008                PTH3            EQU     $08
001CC8 0F9CC8 -> $0004                PTH2            EQU     $04
001CC8 0F9CC8 -> $0002                PTH1            EQU     $02
001CC8 0F9CC8 -> $0001                PTH0            EQU     $01
001CC8 0F9CC8 -> $0080                PH7             EQU     $80
001CC8 0F9CC8 -> $0040                PH6             EQU     $40
001CC8 0F9CC8 -> $0020                PH5             EQU     $20
001CC8 0F9CC8 -> $0010                PH4             EQU     $10
001CC8 0F9CC8 -> $0008                PH3             EQU     $08
001CC8 0F9CC8 -> $0004                PH2             EQU     $04
001CC8 0F9CC8 -> $0002                PH1             EQU     $02
001CC8 0F9CC8 -> $0001                PH0             EQU     $01
001CC8 0F9CC8 -> $0261                PTIH            EQU     $0261
001CC8 0F9CC8 -> $0080                PTIH7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIH6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIH5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIH4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIH3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIH2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIH1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIH0           EQU     $01
001CC8 0F9CC8 -> $0262                DDRH            EQU     $0262
001CC8 0F9CC8 -> $0080                DDRH7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRH6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRH5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRH4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRH3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRH2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRH1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRH0           EQU     $01
001CC8 0F9CC8 -> $0263                RDRH            EQU     $0263
001CC8 0F9CC8 -> $0080                RDRH7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRH6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRH5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRH4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRH3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRH2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRH1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRH0           EQU     $01
001CC8 0F9CC8 -> $0264                PERH            EQU     $0264
001CC8 0F9CC8 -> $0080                PERH7           EQU     $80
001CC8 0F9CC8 -> $0040                PERH6           EQU     $40
001CC8 0F9CC8 -> $0020                PERH5           EQU     $20
001CC8 0F9CC8 -> $0010                PERH4           EQU     $10
001CC8 0F9CC8 -> $0008                PERH3           EQU     $08
001CC8 0F9CC8 -> $0004                PERH2           EQU     $04
001CC8 0F9CC8 -> $0002                PERH1           EQU     $02
001CC8 0F9CC8 -> $0001                PERH0           EQU     $01
001CC8 0F9CC8 -> $0265                PPSH            EQU     $0265
001CC8 0F9CC8 -> $0080                PPSH7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSH6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSH5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSH4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSH3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSH2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSH1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSH0           EQU     $01
001CC8 0F9CC8 -> $0266                PIEH            EQU     $0266
001CC8 0F9CC8 -> $0080                PIEH7           EQU     $80
001CC8 0F9CC8 -> $0040                PIEH6           EQU     $40
001CC8 0F9CC8 -> $0020                PIEH5           EQU     $20
001CC8 0F9CC8 -> $0010                PIEH4           EQU     $10
001CC8 0F9CC8 -> $0008                PIEH3           EQU     $08
001CC8 0F9CC8 -> $0004                PIEH2           EQU     $04
001CC8 0F9CC8 -> $0002                PIEH1           EQU     $02
001CC8 0F9CC8 -> $0001                PIEH0           EQU     $01
001CC8 0F9CC8 -> $0267                PIFH            EQU     $0267
001CC8 0F9CC8 -> $0080                PIFH7           EQU     $80
001CC8 0F9CC8 -> $0040                PIFH6           EQU     $40
001CC8 0F9CC8 -> $0020                PIFH5           EQU     $20
001CC8 0F9CC8 -> $0010                PIFH4           EQU     $10
001CC8 0F9CC8 -> $0008                PIFH3           EQU     $08
001CC8 0F9CC8 -> $0004                PIFH2           EQU     $04
001CC8 0F9CC8 -> $0002                PIFH1           EQU     $02
001CC8 0F9CC8 -> $0001                PIFH0           EQU     $01
001CC8 0F9CC8 -> $0268                PTJ             EQU     $0268
001CC8 0F9CC8 -> $0080                PTJ7            EQU     $80
001CC8 0F9CC8 -> $0040                PTJ6            EQU     $40
001CC8 0F9CC8 -> $0020                PTJ5            EQU     $20
001CC8 0F9CC8 -> $0010                PTJ4            EQU     $10
001CC8 0F9CC8 -> $0008                PTJ3            EQU     $08
001CC8 0F9CC8 -> $0004                PTJ2            EQU     $04
001CC8 0F9CC8 -> $0002                PTJ1            EQU     $02
001CC8 0F9CC8 -> $0001                PTJ0            EQU     $01
001CC8 0F9CC8 -> $0080                PJ7             EQU     $80
001CC8 0F9CC8 -> $0040                PJ6             EQU     $40
001CC8 0F9CC8 -> $0020                PJ5             EQU     $20
001CC8 0F9CC8 -> $0010                PJ4             EQU     $10
001CC8 0F9CC8 -> $0008                PJ3             EQU     $08
001CC8 0F9CC8 -> $0004                PJ2             EQU     $04
001CC8 0F9CC8 -> $0002                PJ1             EQU     $02
001CC8 0F9CC8 -> $0001                PJ0             EQU     $01
001CC8 0F9CC8 -> $0269                PTIJ            EQU     $0269
001CC8 0F9CC8 -> $0080                PTIJ7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIJ6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIJ5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIJ4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIJ3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIJ2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIJ1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIJ0           EQU     $01
001CC8 0F9CC8 -> $026A                DDRJ            EQU     $026A
001CC8 0F9CC8 -> $0080                DDRJ7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRJ6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRJ5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRJ4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRJ3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRJ2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRJ1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRJ0           EQU     $01
001CC8 0F9CC8 -> $026B                RDRJ            EQU     $026B
001CC8 0F9CC8 -> $0080                RDRJ7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRJ6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRJ5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRJ4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRJ3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRJ2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRJ1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRJ0           EQU     $01
001CC8 0F9CC8 -> $026C                PERJ            EQU     $026C
001CC8 0F9CC8 -> $0080                PERJ7           EQU     $80
001CC8 0F9CC8 -> $0040                PERJ6           EQU     $40
001CC8 0F9CC8 -> $0020                PERJ5           EQU     $20
001CC8 0F9CC8 -> $0010                PERJ4           EQU     $10
001CC8 0F9CC8 -> $0008                PERJ3           EQU     $08
001CC8 0F9CC8 -> $0004                PERJ2           EQU     $04
001CC8 0F9CC8 -> $0002                PERJ1           EQU     $02
001CC8 0F9CC8 -> $0001                PERJ0           EQU     $01
001CC8 0F9CC8 -> $026D                PPSJ            EQU     $026D
001CC8 0F9CC8 -> $0080                PPSJ7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSJ6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSJ5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSJ4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSJ3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSJ2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSJ1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSJ0           EQU     $01
001CC8 0F9CC8 -> $026E                PIEJ            EQU     $026E
001CC8 0F9CC8 -> $0080                PIEJ7           EQU     $80
001CC8 0F9CC8 -> $0040                PIEJ6           EQU     $40
001CC8 0F9CC8 -> $0020                PIEJ5           EQU     $20
001CC8 0F9CC8 -> $0010                PIEJ4           EQU     $10
001CC8 0F9CC8 -> $0008                PIEJ3           EQU     $08
001CC8 0F9CC8 -> $0004                PIEJ2           EQU     $04
001CC8 0F9CC8 -> $0002                PIEJ1           EQU     $02
001CC8 0F9CC8 -> $0001                PIEJ0           EQU     $01
001CC8 0F9CC8 -> $026F                PIFJ            EQU     $026F
001CC8 0F9CC8 -> $0080                PIFJ7           EQU     $80
001CC8 0F9CC8 -> $0040                PIFJ6           EQU     $40
001CC8 0F9CC8 -> $0020                PIFJ5           EQU     $20
001CC8 0F9CC8 -> $0010                PIFJ4           EQU     $10
001CC8 0F9CC8 -> $0008                PIFJ3           EQU     $08
001CC8 0F9CC8 -> $0004                PIFJ2           EQU     $04
001CC8 0F9CC8 -> $0002                PIFJ1           EQU     $02
001CC8 0F9CC8 -> $0001                PIFJ0           EQU     $01
001CC8 0F9CC8 -> $0270                PT0AD0          EQU     $0270
001CC8 0F9CC8 -> $0080                PT0AD07         EQU     $80
001CC8 0F9CC8 -> $0040                PT0AD06         EQU     $40
001CC8 0F9CC8 -> $0020                PT0AD05         EQU     $20
001CC8 0F9CC8 -> $0010                PT0AD04         EQU     $10
001CC8 0F9CC8 -> $0008                PT0AD03         EQU     $08
001CC8 0F9CC8 -> $0004                PT0AD02         EQU     $04
001CC8 0F9CC8 -> $0002                PT0AD01         EQU     $02
001CC8 0F9CC8 -> $0001                PT0AD00         EQU     $01
001CC8 0F9CC8 -> $0271                PT1AD0          EQU     $0271
001CC8 0F9CC8 -> $0080                PT1AD07         EQU     $80
001CC8 0F9CC8 -> $0040                PT1AD06         EQU     $40
001CC8 0F9CC8 -> $0020                PT1AD05         EQU     $20
001CC8 0F9CC8 -> $0010                PT1AD04         EQU     $10
001CC8 0F9CC8 -> $0008                PT1AD03         EQU     $08
001CC8 0F9CC8 -> $0004                PT1AD02         EQU     $04
001CC8 0F9CC8 -> $0002                PT1AD01         EQU     $02
001CC8 0F9CC8 -> $0001                PT1AD00         EQU     $01
001CC8 0F9CC8 -> $0272                DDR0AD0         EQU     $0272
001CC8 0F9CC8 -> $0080                DDR0AD07        EQU     $80
001CC8 0F9CC8 -> $0040                DDR0AD06        EQU     $40
001CC8 0F9CC8 -> $0020                DDR0AD05        EQU     $20
001CC8 0F9CC8 -> $0010                DDR0AD04        EQU     $10
001CC8 0F9CC8 -> $0008                DDR0AD03        EQU     $08
001CC8 0F9CC8 -> $0004                DDR0AD02        EQU     $04
001CC8 0F9CC8 -> $0002                DDR0AD01        EQU     $02
001CC8 0F9CC8 -> $0001                DDR0AD00        EQU     $01
001CC8 0F9CC8 -> $0273                DDR1AD0         EQU     $0273
001CC8 0F9CC8 -> $0080                DDR1AD07        EQU     $80
001CC8 0F9CC8 -> $0040                DDR1AD06        EQU     $40
001CC8 0F9CC8 -> $0020                DDR1AD05        EQU     $20
001CC8 0F9CC8 -> $0010                DDR1AD04        EQU     $10
001CC8 0F9CC8 -> $0008                DDR1AD03        EQU     $08
001CC8 0F9CC8 -> $0004                DDR1AD02        EQU     $04
001CC8 0F9CC8 -> $0002                DDR1AD01        EQU     $02
001CC8 0F9CC8 -> $0001                DDR1AD00        EQU     $01
001CC8 0F9CC8 -> $0274                RDR0AD0         EQU     $0274
001CC8 0F9CC8 -> $0080                RDR0AD07        EQU     $80
001CC8 0F9CC8 -> $0040                RDR0AD06        EQU     $40
001CC8 0F9CC8 -> $0020                RDR0AD05        EQU     $20
001CC8 0F9CC8 -> $0010                RDR0AD04        EQU     $10
001CC8 0F9CC8 -> $0008                RDR0AD03        EQU     $08
001CC8 0F9CC8 -> $0004                RDR0AD02        EQU     $04
001CC8 0F9CC8 -> $0002                RDR0AD01        EQU     $02
001CC8 0F9CC8 -> $0001                RDR0AD00        EQU     $01
001CC8 0F9CC8 -> $0275                RDR1AD0         EQU     $0275
001CC8 0F9CC8 -> $0080                RDR1AD07        EQU     $80
001CC8 0F9CC8 -> $0040                RDR1AD06        EQU     $40
001CC8 0F9CC8 -> $0020                RDR1AD05        EQU     $20
001CC8 0F9CC8 -> $0010                RDR1AD04        EQU     $10
001CC8 0F9CC8 -> $0008                RDR1AD03        EQU     $08
001CC8 0F9CC8 -> $0004                RDR1AD02        EQU     $04
001CC8 0F9CC8 -> $0002                RDR1AD01        EQU     $02
001CC8 0F9CC8 -> $0001                RDR1AD00        EQU     $01
001CC8 0F9CC8 -> $0276                PER0AD0         EQU     $0276
001CC8 0F9CC8 -> $0080                PER0AD07        EQU     $80
001CC8 0F9CC8 -> $0040                PER0AD06        EQU     $40
001CC8 0F9CC8 -> $0020                PER0AD05        EQU     $20
001CC8 0F9CC8 -> $0010                PER0AD04        EQU     $10
001CC8 0F9CC8 -> $0008                PER0AD03        EQU     $08
001CC8 0F9CC8 -> $0004                PER0AD02        EQU     $04
001CC8 0F9CC8 -> $0002                PER0AD01        EQU     $02
001CC8 0F9CC8 -> $0001                PER0AD00        EQU     $01
001CC8 0F9CC8 -> $0277                PER1AD0         EQU     $0277
001CC8 0F9CC8 -> $0080                PER1AD07        EQU     $80
001CC8 0F9CC8 -> $0040                PER1AD06        EQU     $40
001CC8 0F9CC8 -> $0020                PER1AD05        EQU     $20
001CC8 0F9CC8 -> $0010                PER1AD04        EQU     $10
001CC8 0F9CC8 -> $0008                PER1AD03        EQU     $08
001CC8 0F9CC8 -> $0004                PER1AD02        EQU     $04
001CC8 0F9CC8 -> $0002                PER1AD01        EQU     $02
001CC8 0F9CC8 -> $0001                PER1AD00        EQU     $01
001CC8 0F9CC8 -> $0278                PT0AD1          EQU     $0278
001CC8 0F9CC8 -> $0080                PT0AD17         EQU     $80
001CC8 0F9CC8 -> $0040                PT0AD16         EQU     $40
001CC8 0F9CC8 -> $0020                PT0AD15         EQU     $20
001CC8 0F9CC8 -> $0010                PT0AD14         EQU     $10
001CC8 0F9CC8 -> $0008                PT0AD13         EQU     $08
001CC8 0F9CC8 -> $0004                PT0AD12         EQU     $04
001CC8 0F9CC8 -> $0002                PT0AD11         EQU     $02
001CC8 0F9CC8 -> $0001                PT0AD10         EQU     $01
001CC8 0F9CC8 -> $0279                PT1AD1          EQU     $0279
001CC8 0F9CC8 -> $0080                PT1AD17         EQU     $80
001CC8 0F9CC8 -> $0040                PT1AD16         EQU     $40
001CC8 0F9CC8 -> $0020                PT1AD15         EQU     $20
001CC8 0F9CC8 -> $0010                PT1AD14         EQU     $10
001CC8 0F9CC8 -> $0008                PT1AD13         EQU     $08
001CC8 0F9CC8 -> $0004                PT1AD12         EQU     $04
001CC8 0F9CC8 -> $0002                PT1AD11         EQU     $02
001CC8 0F9CC8 -> $0001                PT1AD10         EQU     $01
001CC8 0F9CC8 -> $027A                DDR0AD1         EQU     $027A
001CC8 0F9CC8 -> $0080                DDR0AD17        EQU     $80
001CC8 0F9CC8 -> $0040                DDR0AD16        EQU     $40
001CC8 0F9CC8 -> $0020                DDR0AD15        EQU     $20
001CC8 0F9CC8 -> $0010                DDR0AD14        EQU     $10
001CC8 0F9CC8 -> $0008                DDR0AD13        EQU     $08
001CC8 0F9CC8 -> $0004                DDR0AD12        EQU     $04
001CC8 0F9CC8 -> $0002                DDR0AD11        EQU     $02
001CC8 0F9CC8 -> $0001                DDR0AD10        EQU     $01
001CC8 0F9CC8 -> $027B                DDR1AD1         EQU     $027B
001CC8 0F9CC8 -> $0080                DDR1AD17        EQU     $80
001CC8 0F9CC8 -> $0040                DDR1AD16        EQU     $40
001CC8 0F9CC8 -> $0020                DDR1AD15        EQU     $20
001CC8 0F9CC8 -> $0010                DDR1AD14        EQU     $10
001CC8 0F9CC8 -> $0008                DDR1AD13        EQU     $08
001CC8 0F9CC8 -> $0004                DDR1AD12        EQU     $04
001CC8 0F9CC8 -> $0002                DDR1AD11        EQU     $02
001CC8 0F9CC8 -> $0001                DDR1AD10        EQU     $01
001CC8 0F9CC8 -> $027C                RDR0AD1         EQU     $027C
001CC8 0F9CC8 -> $0080                RDR0AD17        EQU     $80
001CC8 0F9CC8 -> $0040                RDR0AD16        EQU     $40
001CC8 0F9CC8 -> $0020                RDR0AD15        EQU     $20
001CC8 0F9CC8 -> $0010                RDR0AD14        EQU     $10
001CC8 0F9CC8 -> $0008                RDR0AD13        EQU     $08
001CC8 0F9CC8 -> $0004                RDR0AD12        EQU     $04
001CC8 0F9CC8 -> $0002                RDR0AD11        EQU     $02
001CC8 0F9CC8 -> $0001                RDR0AD10        EQU     $01
001CC8 0F9CC8 -> $027D                RDR1AD1         EQU     $027D
001CC8 0F9CC8 -> $0080                RDR1AD17        EQU     $80
001CC8 0F9CC8 -> $0040                RDR1AD16        EQU     $40
001CC8 0F9CC8 -> $0020                RDR1AD15        EQU     $20
001CC8 0F9CC8 -> $0010                RDR1AD14        EQU     $10
001CC8 0F9CC8 -> $0008                RDR1AD13        EQU     $08
001CC8 0F9CC8 -> $0004                RDR1AD12        EQU     $04
001CC8 0F9CC8 -> $0002                RDR1AD11        EQU     $02
001CC8 0F9CC8 -> $0001                RDR1AD10        EQU     $01
001CC8 0F9CC8 -> $027E                PER0AD1         EQU     $027E
001CC8 0F9CC8 -> $0080                PER0AD17        EQU     $80
001CC8 0F9CC8 -> $0040                PER0AD16        EQU     $40
001CC8 0F9CC8 -> $0020                PER0AD15        EQU     $20
001CC8 0F9CC8 -> $0010                PER0AD14        EQU     $10
001CC8 0F9CC8 -> $0008                PER0AD13        EQU     $08
001CC8 0F9CC8 -> $0004                PER0AD12        EQU     $04
001CC8 0F9CC8 -> $0002                PER0AD11        EQU     $02
001CC8 0F9CC8 -> $0001                PER0AD10        EQU     $01
001CC8 0F9CC8 -> $027F                PER1AD1         EQU     $027F
001CC8 0F9CC8 -> $0080                PER1AD17        EQU     $80
001CC8 0F9CC8 -> $0040                PER1AD16        EQU     $40
001CC8 0F9CC8 -> $0020                PER1AD15        EQU     $20
001CC8 0F9CC8 -> $0010                PER1AD14        EQU     $10
001CC8 0F9CC8 -> $0008                PER1AD13        EQU     $08
001CC8 0F9CC8 -> $0004                PER1AD12        EQU     $04
001CC8 0F9CC8 -> $0002                PER1AD11        EQU     $02
001CC8 0F9CC8 -> $0001                PER1AD10        EQU     $01
001CC8 0F9CC8 -> $0280                CAN4CTL0        EQU     $0280
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
001CC8 0F9CC8 -> $0281                CAN4CTL1        EQU     $0281
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
001CC8 0F9CC8 -> $0282                CAN4BTR0        EQU     $0282
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
001CC8 0F9CC8 -> $0283                CAN4BTR1        EQU     $0283
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
001CC8 0F9CC8 -> $0284                CAN4RFLG        EQU     $0284
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
001CC8 0F9CC8 -> $0285                CAN4RIER        EQU     $0285
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
001CC8 0F9CC8 -> $0286                CAN4TFLG        EQU     $0286
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
001CC8 0F9CC8 -> $0287                CAN4TIER        EQU     $0287
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
001CC8 0F9CC8 -> $0288                CAN4TARQ        EQU     $0288
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
001CC8 0F9CC8 -> $0289                CAN4TAAK        EQU     $0289
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
001CC8 0F9CC8 -> $028A                CAN4TBSEL       EQU     $028A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
001CC8 0F9CC8 -> $028B                CAN4IDAC        EQU     $028B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$028C  reserved
001CC8 0F9CC8 -> $028D                CAN4MISC        EQU     $028D
                                      ;BOHOLD         EQU     $01
001CC8 0F9CC8 -> $028E                CAN4RXERR       EQU     $028E
001CC8 0F9CC8 -> $028F                CAN4TXERR       EQU     $028F
001CC8 0F9CC8 -> $0290                CAN4IDAR0       EQU     $0290
001CC8 0F9CC8 -> $0291                CAN4IDAR1       EQU     $0291
001CC8 0F9CC8 -> $0292                CAN4IDAR2       EQU     $0292
001CC8 0F9CC8 -> $0293                CAN4IDAR3       EQU     $0293
001CC8 0F9CC8 -> $0294                CAN4IDMR0       EQU     $0294
001CC8 0F9CC8 -> $0295                CAN4IDMR1       EQU     $0295
001CC8 0F9CC8 -> $0296                CAN4IDMR2       EQU     $0296
001CC8 0F9CC8 -> $0297                CAN4IDMR3       EQU     $0297
001CC8 0F9CC8 -> $0298                CAN4IDAR4       EQU     $0298
001CC8 0F9CC8 -> $0299                CAN4IDAR5       EQU     $0299
001CC8 0F9CC8 -> $029A                CAN4IDAR6       EQU     $029A
001CC8 0F9CC8 -> $029B                CAN4IDAR7       EQU     $029B
001CC8 0F9CC8 -> $029C                CAN4IDMR4       EQU     $029C
001CC8 0F9CC8 -> $029D                CAN4IDMR5       EQU     $029D
001CC8 0F9CC8 -> $029E                CAN4IDMR6       EQU     $029E
001CC8 0F9CC8 -> $029F                CAN4IDMR7       EQU     $029F
001CC8 0F9CC8 -> $02A0                CAN4RXIDR0      EQU     $02A0
001CC8 0F9CC8 -> $02A1                CAN4RXIDR1      EQU     $02A1
001CC8 0F9CC8 -> $02A2                CAN4RXIDR2      EQU     $02A2
001CC8 0F9CC8 -> $02A3                CAN4RXIDR3      EQU     $02A3
001CC8 0F9CC8 -> $02A4                CAN4RXDSR0      EQU     $02A4
001CC8 0F9CC8 -> $02A5                CAN4RXDSR1      EQU     $02A5
001CC8 0F9CC8 -> $02A6                CAN4RXDSR2      EQU     $02A6
001CC8 0F9CC8 -> $02A7                CAN4RXDSR3      EQU     $02A7
001CC8 0F9CC8 -> $02A8                CAN4RXDSR4      EQU     $02A8
001CC8 0F9CC8 -> $02A9                CAN4RXDSR5      EQU     $02A9
001CC8 0F9CC8 -> $02AA                CAN4RXDSR6      EQU     $02AA
001CC8 0F9CC8 -> $02AB                CAN4RXDSR7      EQU     $02AB
001CC8 0F9CC8 -> $02AC                CAN4RXDLR       EQU     $02AC
                                      ;$02AD reserved
001CC8 0F9CC8 -> $02AE                CAN4RTSRH       EQU     $02AE
001CC8 0F9CC8 -> $02AF                CAN4RTSRL       EQU     $02AF
001CC8 0F9CC8 -> $02B0                CAN4TXIDR0      EQU     $02B0
001CC8 0F9CC8 -> $02B1                CAN4TXIDR1      EQU     $02B1
001CC8 0F9CC8 -> $02B2                CAN4TXIDR2      EQU     $02B2
001CC8 0F9CC8 -> $02B2                CAN4TXIDR2      EQU     $02B2
001CC8 0F9CC8 -> $02B3                CAN4TXIDR3      EQU     $02B3
001CC8 0F9CC8 -> $02B4                CAN4TXDSR0      EQU     $02B4
001CC8 0F9CC8 -> $02B5                CAN4TXDSR1      EQU     $02B5
001CC8 0F9CC8 -> $02B6                CAN4TXDSR2      EQU     $02B6
001CC8 0F9CC8 -> $02B7                CAN4XDSR3       EQU     $02B7
001CC8 0F9CC8 -> $02B7                CAN4TXDSR3      EQU     $02B7
001CC8 0F9CC8 -> $02B8                CAN4TXDSR4      EQU     $02B8
001CC8 0F9CC8 -> $02B9                CAN4TXDSR5      EQU     $02B9
001CC8 0F9CC8 -> $02BA                CAN4TXDSR6      EQU     $02BA
001CC8 0F9CC8 -> $02BB                CAN4TXDSR7      EQU     $02BB
001CC8 0F9CC8 -> $02BC                CAN4TXDLR       EQU     $02BC
001CC8 0F9CC8 -> $02BD                CAN4TXTBPR      EQU     $02BD
001CC8 0F9CC8 -> $02BE                CAN4TXTSRH      EQU     $02BE
001CC8 0F9CC8 -> $02BF                CAN4TXTSRL      EQU     $02BF
001CC8 0F9CC8 -> $02C0                ATD0CTL0        EQU     $02C0
001CC8 0F9CC8 -> $02C0                ATDCTL0         EQU     $02C0
001CC8 0F9CC8 -> $0008                WRAP3           EQU     $08
001CC8 0F9CC8 -> $0004                WRAP2           EQU     $04
001CC8 0F9CC8 -> $0002                WRAP1           EQU     $02
001CC8 0F9CC8 -> $0001                WRAP0           EQU     $01
001CC8 0F9CC8 -> $02C1                ATD0CTL1        EQU     $02C1
001CC8 0F9CC8 -> $02C1                ATDCTL1         EQU     $02C1
001CC8 0F9CC8 -> $0080                ETRIGSEL        EQU     $80
001CC8 0F9CC8 -> $0040                SRES1           EQU     $40
001CC8 0F9CC8 -> $0020                SRES0           EQU     $20
001CC8 0F9CC8 -> $0010                DIS             EQU     $10
001CC8 0F9CC8 -> $0008                ETRIGCH3        EQU     $08
001CC8 0F9CC8 -> $0004                ETRIGCH2        EQU     $04
001CC8 0F9CC8 -> $0002                ETRIGCH1        EQU     $02
001CC8 0F9CC8 -> $0001                ETRIGCH0        EQU     $01
001CC8 0F9CC8 -> $02C2                ATD0CTL2        EQU     $02C2
001CC8 0F9CC8 -> $02C2                ATDCTL2         EQU     $02C2
001CC8 0F9CC8 -> $0040                AFFC            EQU     $40
001CC8 0F9CC8 -> $0020                ICLKSTP         EQU     $20
001CC8 0F9CC8 -> $0010                ETRIGLE         EQU     $10
001CC8 0F9CC8 -> $0008                ETRIGP          EQU     $08
001CC8 0F9CC8 -> $0004                ETRIGE          EQU     $04
001CC8 0F9CC8 -> $0002                ASCIE           EQU     $02
001CC8 0F9CC8 -> $0001                ASCIF           EQU     $01
001CC8 0F9CC8 -> $02C3                ATD0CTL3        EQU     $02C3
001CC8 0F9CC8 -> $02C3                ATDCTL3         EQU     $02C3
001CC8 0F9CC8 -> $0080                DJM             EQU     $80
001CC8 0F9CC8 -> $0040                S8C             EQU     $40
001CC8 0F9CC8 -> $0020                S4C             EQU     $20
001CC8 0F9CC8 -> $0010                S2C             EQU     $10
001CC8 0F9CC8 -> $0008                S1C             EQU     $08
001CC8 0F9CC8 -> $0004                FIFO            EQU     $04
001CC8 0F9CC8 -> $0002                FRZ1            EQU     $02
001CC8 0F9CC8 -> $0001                FRZ0            EQU     $01
001CC8 0F9CC8 -> $02C4                ATD0CTL4        EQU     $02C4
001CC8 0F9CC8 -> $02C4                ATDCTL4         EQU     $02C4
001CC8 0F9CC8 -> $0080                SMP2            EQU     $80
001CC8 0F9CC8 -> $0040                SMP1            EQU     $40
001CC8 0F9CC8 -> $0020                SMP0            EQU     $20
001CC8 0F9CC8 -> $0010                PRS4            EQU     $10
001CC8 0F9CC8 -> $0008                PRS3            EQU     $08
001CC8 0F9CC8 -> $0004                PRS2            EQU     $04
001CC8 0F9CC8 -> $0002                PRS1            EQU     $02
001CC8 0F9CC8 -> $0001                PRS0            EQU     $01
001CC8 0F9CC8 -> $02C5                ATD0CTL5        EQU     $02C5
001CC8 0F9CC8 -> $02C5                ATDCTL5         EQU     $02C5
001CC8 0F9CC8 -> $0040                SC              EQU     $40
001CC8 0F9CC8 -> $0020                SCAN            EQU     $20
001CC8 0F9CC8 -> $0010                MULT            EQU     $10
001CC8 0F9CC8 -> $0008                CD              EQU     $08
001CC8 0F9CC8 -> $0004                CC              EQU     $04
001CC8 0F9CC8 -> $0002                CB              EQU     $02
001CC8 0F9CC8 -> $0001                CA              EQU     $01
001CC8 0F9CC8 -> $02C6                ATD0STAT0       EQU     $02C6
001CC8 0F9CC8 -> $02C6                ATDSTAT0        EQU     $02C6
001CC8 0F9CC8 -> $0080                SCF             EQU     $80
001CC8 0F9CC8 -> $0020                ETORF           EQU     $20
001CC8 0F9CC8 -> $0010                FIFOR           EQU     $10
001CC8 0F9CC8 -> $0004                CC2             EQU     $04
001CC8 0F9CC8 -> $0002                CC1             EQU     $02
001CC8 0F9CC8 -> $0001                CC0             EQU     $01
                                      ;$02C7 reserved
001CC8 0F9CC8 -> $02C8                ATD0CMPEH       EQU     $02C8
001CC8 0F9CC8 -> $02C8                ATDCMPEH        EQU     $02C8
001CC8 0F9CC8 -> $0080                CMPE15          EQU     $80
001CC8 0F9CC8 -> $0040                CMPE14          EQU     $40
001CC8 0F9CC8 -> $0020                CMPE13          EQU     $20
001CC8 0F9CC8 -> $0010                CMPE12          EQU     $10
001CC8 0F9CC8 -> $0008                CMPE11          EQU     $08
001CC8 0F9CC8 -> $0004                CMPE10          EQU     $04
001CC8 0F9CC8 -> $0002                CMPE9           EQU     $02
001CC8 0F9CC8 -> $0001                CMPE8           EQU     $01
001CC8 0F9CC8 -> $02C9                ATD0CMPEL       EQU     $02C9
001CC8 0F9CC8 -> $02C9                ATDCMPEL        EQU     $02C9
001CC8 0F9CC8 -> $0080                CMPE7           EQU     $80
001CC8 0F9CC8 -> $0040                CMPE6           EQU     $40
001CC8 0F9CC8 -> $0020                CMPE5           EQU     $20
001CC8 0F9CC8 -> $0010                CMPE4           EQU     $10
001CC8 0F9CC8 -> $0008                CMPE3           EQU     $08
001CC8 0F9CC8 -> $0004                CMPE2           EQU     $04
001CC8 0F9CC8 -> $0002                CMPE1           EQU     $02
001CC8 0F9CC8 -> $0001                CMPE0           EQU     $01
001CC8 0F9CC8 -> $02CA                ATD0STAT2H      EQU     $02CA
001CC8 0F9CC8 -> $02CA                ATDSTAT2H       EQU     $02CA
001CC8 0F9CC8 -> $0080                CCF15           EQU     $80
001CC8 0F9CC8 -> $0040                CCF14           EQU     $40
001CC8 0F9CC8 -> $0020                CCF13           EQU     $20
001CC8 0F9CC8 -> $0010                CCF12           EQU     $10
001CC8 0F9CC8 -> $0008                CCF11           EQU     $08
001CC8 0F9CC8 -> $0004                CCF10           EQU     $04
001CC8 0F9CC8 -> $0002                CCF9            EQU     $02
001CC8 0F9CC8 -> $0001                CCF8            EQU     $01
001CC8 0F9CC8 -> $02CB                ATD0STAT2L      EQU     $02CB
001CC8 0F9CC8 -> $02CB                ATDSTAT2L       EQU     $02CB
001CC8 0F9CC8 -> $0080                CCF7            EQU     $80
001CC8 0F9CC8 -> $0040                CCF6            EQU     $40
001CC8 0F9CC8 -> $0020                CCF5            EQU     $20
001CC8 0F9CC8 -> $0010                CCF4            EQU     $10
001CC8 0F9CC8 -> $0008                CCF3            EQU     $08
001CC8 0F9CC8 -> $0004                CCF2            EQU     $04
001CC8 0F9CC8 -> $0002                CCF1            EQU     $02
001CC8 0F9CC8 -> $0001                CCF0            EQU     $01
001CC8 0F9CC8 -> $02CC                ATD0DIENH       EQU     $02CC
001CC8 0F9CC8 -> $02CC                ATDDIENH        EQU     $02CC
001CC8 0F9CC8 -> $0080                IEN15           EQU     $80
001CC8 0F9CC8 -> $0040                IEN14           EQU     $40
001CC8 0F9CC8 -> $0020                IEN13           EQU     $20
001CC8 0F9CC8 -> $0010                IEN12           EQU     $10
001CC8 0F9CC8 -> $0008                IEN11           EQU     $08
001CC8 0F9CC8 -> $0004                IEN10           EQU     $04
001CC8 0F9CC8 -> $0002                IEN9            EQU     $02
001CC8 0F9CC8 -> $0001                IEN8            EQU     $01
001CC8 0F9CC8 -> $02CD                ATD0DIENL       EQU     $02CD
001CC8 0F9CC8 -> $02CD                ATDDIENL        EQU     $02CD
001CC8 0F9CC8 -> $0080                IEN7            EQU     $80
001CC8 0F9CC8 -> $0040                IEN6            EQU     $40
001CC8 0F9CC8 -> $0020                IEN5            EQU     $20
001CC8 0F9CC8 -> $0010                IEN4            EQU     $10
001CC8 0F9CC8 -> $0008                IEN3            EQU     $08
001CC8 0F9CC8 -> $0004                IEN2            EQU     $04
001CC8 0F9CC8 -> $0002                IEN1            EQU     $02
001CC8 0F9CC8 -> $0001                IEN0            EQU     $01
001CC8 0F9CC8 -> $02CE                ATD0CMPHTH      EQU     $02CE
001CC8 0F9CC8 -> $02CE                ATDCMPHTH       EQU     $02CE
001CC8 0F9CC8 -> $0080                CMPHT15         EQU     $80
001CC8 0F9CC8 -> $0040                CMPHT14         EQU     $40
001CC8 0F9CC8 -> $0020                CMPHT13         EQU     $20
001CC8 0F9CC8 -> $0010                CMPHT12         EQU     $10
001CC8 0F9CC8 -> $0008                CMPHT11         EQU     $08
001CC8 0F9CC8 -> $0004                CMPHT10         EQU     $04
001CC8 0F9CC8 -> $0002                CMPHT9          EQU     $02
001CC8 0F9CC8 -> $0001                CMPHT8          EQU     $01
001CC8 0F9CC8 -> $02CF                ATD0CMPHTL      EQU     $02CF
001CC8 0F9CC8 -> $02CF                ATDCMPHTL       EQU     $02CF
001CC8 0F9CC8 -> $0001                CMPHT0          EQU     $01
001CC8 0F9CC8 -> $0002                CMPHT1          EQU     $02
001CC8 0F9CC8 -> $0004                CMPHT2          EQU     $04
001CC8 0F9CC8 -> $0008                CMPHT3          EQU     $08
001CC8 0F9CC8 -> $0010                CMPHT4          EQU     $10
001CC8 0F9CC8 -> $0020                CMPHT5          EQU     $20
001CC8 0F9CC8 -> $0040                CMPHT6          EQU     $40
001CC8 0F9CC8 -> $0080                CMPHT7          EQU     $80
001CC8 0F9CC8 -> $02D0                ATD0DR0         EQU     $02D0
001CC8 0F9CC8 -> $02D0                ATDDR0          EQU     $02D0
001CC8 0F9CC8 -> $02D0                ATD0DR0H        EQU     $02D0
001CC8 0F9CC8 -> $02D1                ATD0DR0L        EQU     $02D1
001CC8 0F9CC8 -> $02D2                ATD0DR1         EQU     $02D2
001CC8 0F9CC8 -> $02D2                ATDDR1          EQU     $02D2
001CC8 0F9CC8 -> $02D2                ATD0DR1H        EQU     $02D2
001CC8 0F9CC8 -> $02D3                ATD0DR1L        EQU     $02D3
001CC8 0F9CC8 -> $02D4                ATD0DR2         EQU     $02D4
001CC8 0F9CC8 -> $02D4                ATDDR2          EQU     $02D4
001CC8 0F9CC8 -> $02D4                ATD0DR2H        EQU     $02D4
001CC8 0F9CC8 -> $02D5                ATD0DR2L        EQU     $02D5
001CC8 0F9CC8 -> $02D6                ATD0DR3         EQU     $02D6
001CC8 0F9CC8 -> $02D6                ATDDR3          EQU     $02D6
001CC8 0F9CC8 -> $02D6                ATD0DR3H        EQU     $02D6
001CC8 0F9CC8 -> $02D7                ATD0DR3L        EQU     $02D7
001CC8 0F9CC8 -> $02D8                ATD0DR4         EQU     $02D8
001CC8 0F9CC8 -> $02D8                ATDDR4          EQU     $02D8
001CC8 0F9CC8 -> $02D8                ATD0DR4H        EQU     $02D8
001CC8 0F9CC8 -> $02D9                ATD0DR4L        EQU     $02D9
001CC8 0F9CC8 -> $02DA                ATD0DR5         EQU     $02DA
001CC8 0F9CC8 -> $02DA                ATDDR5          EQU     $02DA
001CC8 0F9CC8 -> $02DA                ATD0DR5H        EQU     $02DA
001CC8 0F9CC8 -> $02DB                ATD0DR5L        EQU     $02DB
001CC8 0F9CC8 -> $02DC                ATD0DR6         EQU     $02DC
001CC8 0F9CC8 -> $02DC                ATDDR6          EQU     $02DC
001CC8 0F9CC8 -> $02DC                ATD0DR6H        EQU     $02DC
001CC8 0F9CC8 -> $02DD                ATD0DR6L        EQU     $02DD
001CC8 0F9CC8 -> $02DE                ATD0DR7         EQU     $02DE
001CC8 0F9CC8 -> $02DE                ATDDR7          EQU     $02DE
001CC8 0F9CC8 -> $02DE                ATD0DR7H        EQU     $02DE
001CC8 0F9CC8 -> $02DF                ATD0DR7L        EQU     $02DF
001CC8 0F9CC8 -> $02E0                ATD0DR8         EQU     $02E0
001CC8 0F9CC8 -> $02E0                ATDDR8          EQU     $02E0
001CC8 0F9CC8 -> $02E0                ATD0DR8H        EQU     $02E0
001CC8 0F9CC8 -> $02E1                ATD0DR8L        EQU     $02E1
001CC8 0F9CC8 -> $02E2                ATD0DR9         EQU     $02E2
001CC8 0F9CC8 -> $02E2                ATDDR9          EQU     $02E2
001CC8 0F9CC8 -> $02E2                ATD0DR9H        EQU     $02E2
001CC8 0F9CC8 -> $02E3                ATD0DR9L        EQU     $02E3
001CC8 0F9CC8 -> $02E3                ATD0DR10        EQU     $02E3
001CC8 0F9CC8 -> $02E3                ATDDR10         EQU     $02E3
001CC8 0F9CC8 -> $02E3                ATD0DR10H       EQU     $02E3
001CC8 0F9CC8 -> $02E5                ATD0DR10L       EQU     $02E5
001CC8 0F9CC8 -> $02E6                ATD0DR11        EQU     $02E6
001CC8 0F9CC8 -> $02E6                ATDDR11         EQU     $02E6
001CC8 0F9CC8 -> $02E6                ATD0DR11H       EQU     $02E6
001CC8 0F9CC8 -> $02E7                ATD0DR11L       EQU     $02E7
001CC8 0F9CC8 -> $02E8                ATD0DR12        EQU     $02E8
001CC8 0F9CC8 -> $02E8                ATDDR12         EQU     $02E8
001CC8 0F9CC8 -> $02E8                ATD0DR12H       EQU     $02E8
001CC8 0F9CC8 -> $02E9                ATD0DR12L       EQU     $02E9
001CC8 0F9CC8 -> $02EA                ATD0DR13        EQU     $02EA
001CC8 0F9CC8 -> $02EA                ATDDR13         EQU     $02EA
001CC8 0F9CC8 -> $02EA                ATD0DR13H       EQU     $02EA
001CC8 0F9CC8 -> $02EB                ATD0DR13L       EQU     $02EB
001CC8 0F9CC8 -> $02EC                ATD0DR14        EQU     $02EC
001CC8 0F9CC8 -> $02EC                ATDDR14         EQU     $02EC
001CC8 0F9CC8 -> $02EC                ATD0DR14H       EQU     $02EC
001CC8 0F9CC8 -> $02ED                ATD0DR14L       EQU     $02ED
001CC8 0F9CC8 -> $02EE                ATD0DR15        EQU     $02EE
001CC8 0F9CC8 -> $02EE                ATDDR15         EQU     $02EE
001CC8 0F9CC8 -> $02EE                ATD0DR15H       EQU     $02EE
001CC8 0F9CC8 -> $02EF                ATD0DR15L       EQU     $02EF
001CC8 0F9CC8 -> $02F0                VREGHTCL        EQU     $02F0
001CC8 0F9CC8 -> $0020                VSEL            EQU     $20
001CC8 0F9CC8 -> $0010                VAE             EQU     $10
001CC8 0F9CC8 -> $0008                HTEN            EQU     $08
001CC8 0F9CC8 -> $0004                HTDS            EQU     $04
001CC8 0F9CC8 -> $0002                HTIE            EQU     $02
001CC8 0F9CC8 -> $0001                HTIF            EQU     $01
001CC8 0F9CC8 -> $02F1                VREGCTRL        EQU     $02F1
001CC8 0F9CC8 -> $0004                LVDS            EQU     $04
001CC8 0F9CC8 -> $0002                LVIE            EQU     $02
001CC8 0F9CC8 -> $0001                LVIF            EQU     $01
001CC8 0F9CC8 -> $02F2                VREGAPICTL      EQU     $02F2
001CC8 0F9CC8 -> $0080                APICLK          EQU     $80
001CC8 0F9CC8 -> $0010                APIES           EQU     $10
001CC8 0F9CC8 -> $0008                APIEA           EQU     $08
001CC8 0F9CC8 -> $0004                APIFE           EQU     $04
001CC8 0F9CC8 -> $0002                APIE            EQU     $02
001CC8 0F9CC8 -> $0001                APIF            EQU     $01
001CC8 0F9CC8 -> $02F3                VREGAPITR       EQU     $02F3
001CC8 0F9CC8 -> $0080                APITR5          EQU     $80
001CC8 0F9CC8 -> $0040                APITR4          EQU     $40
001CC8 0F9CC8 -> $0020                APITR3          EQU     $20
001CC8 0F9CC8 -> $0010                APITR2          EQU     $10
001CC8 0F9CC8 -> $0008                APITR1          EQU     $08
001CC8 0F9CC8 -> $0004                APITR0          EQU     $04
001CC8 0F9CC8 -> $02F4                VREGAPIRH       EQU     $02F4
001CC8 0F9CC8 -> $0080                APIR15          EQU     $80
001CC8 0F9CC8 -> $0040                APIR14          EQU     $40
001CC8 0F9CC8 -> $0020                APIR13          EQU     $20
001CC8 0F9CC8 -> $0010                APIR12          EQU     $10
001CC8 0F9CC8 -> $0008                APIR11          EQU     $08
001CC8 0F9CC8 -> $0004                APIR10          EQU     $04
001CC8 0F9CC8 -> $0002                APIR9           EQU     $02
001CC8 0F9CC8 -> $0001                APIR8           EQU     $01
001CC8 0F9CC8 -> $02F5                VREGAPIRL       EQU     $02F5
001CC8 0F9CC8 -> $0080                APIR7           EQU     $80
001CC8 0F9CC8 -> $0040                APIR6           EQU     $40
001CC8 0F9CC8 -> $0020                APIR5           EQU     $20
001CC8 0F9CC8 -> $0010                APIR4           EQU     $10
001CC8 0F9CC8 -> $0008                APIR3           EQU     $08
001CC8 0F9CC8 -> $0004                APIR2           EQU     $04
001CC8 0F9CC8 -> $0002                APIR1           EQU     $02
001CC8 0F9CC8 -> $0001                APIR0           EQU     $01
                                      ;$02F6 reserved
001CC8 0F9CC8 -> $02F7                VREGHTTR        EQU     $02F7
001CC8 0F9CC8 -> $0080                HTOEN           EQU     $80
001CC8 0F9CC8 -> $000F                HTTR            EQU     $0F
                                      ;$02F8 to $02FF reserved
001CC8 0F9CC8 -> $0300                PWME            EQU     $0300
001CC8 0F9CC8 -> $0080                PWME7           EQU     $80
001CC8 0F9CC8 -> $0040                PWME6           EQU     $40
001CC8 0F9CC8 -> $0020                PWME5           EQU     $20
001CC8 0F9CC8 -> $0010                PWME4           EQU     $10
001CC8 0F9CC8 -> $0008                PWME3           EQU     $08
001CC8 0F9CC8 -> $0004                PWME2           EQU     $04
001CC8 0F9CC8 -> $0002                PWME1           EQU     $02
001CC8 0F9CC8 -> $0001                PWME0           EQU     $01
001CC8 0F9CC8 -> $0301                PWMPOL          EQU     $0301
001CC8 0F9CC8 -> $0080                PPOL7           EQU     $80
001CC8 0F9CC8 -> $0040                PPOL6           EQU     $40
001CC8 0F9CC8 -> $0020                PPOL5           EQU     $20
001CC8 0F9CC8 -> $0010                PPOL4           EQU     $10
001CC8 0F9CC8 -> $0008                PPOL3           EQU     $08
001CC8 0F9CC8 -> $0004                PPOL2           EQU     $04
001CC8 0F9CC8 -> $0002                PPOL1           EQU     $02
001CC8 0F9CC8 -> $0001                PPOL0           EQU     $01
001CC8 0F9CC8 -> $0302                PWMCLK          EQU     $0302
001CC8 0F9CC8 -> $0080                PCLK7           EQU     $80
001CC8 0F9CC8 -> $0040                PCLK6           EQU     $40
001CC8 0F9CC8 -> $0020                PCLK5           EQU     $20
001CC8 0F9CC8 -> $0010                PCLK4           EQU     $10
001CC8 0F9CC8 -> $0008                PCLK3           EQU     $08
001CC8 0F9CC8 -> $0004                PCLK2           EQU     $04
001CC8 0F9CC8 -> $0002                PCLK1           EQU     $02
001CC8 0F9CC8 -> $0001                PCLK0           EQU     $01
001CC8 0F9CC8 -> $0303                PWMPRCLK        EQU     $0303
001CC8 0F9CC8 -> $0040                PCKB2           EQU     $40
001CC8 0F9CC8 -> $0020                PCKB1           EQU     $20
001CC8 0F9CC8 -> $0010                PCKB0           EQU     $10
001CC8 0F9CC8 -> $0004                PCKA2           EQU     $04
001CC8 0F9CC8 -> $0002                PCKA1           EQU     $02
001CC8 0F9CC8 -> $0001                PCKA0           EQU     $01
001CC8 0F9CC8 -> $0304                PWMCAE          EQU     $0304
001CC8 0F9CC8 -> $0080                CAE7            EQU     $80
001CC8 0F9CC8 -> $0040                CAE6            EQU     $40
001CC8 0F9CC8 -> $0020                CAE5            EQU     $20
001CC8 0F9CC8 -> $0010                CAE4            EQU     $10
001CC8 0F9CC8 -> $0008                CAE3            EQU     $08
001CC8 0F9CC8 -> $0004                CAE2            EQU     $04
001CC8 0F9CC8 -> $0002                CAE1            EQU     $02
001CC8 0F9CC8 -> $0001                CAE0            EQU     $01
001CC8 0F9CC8 -> $0305                PWMCTL          EQU     $0305
001CC8 0F9CC8 -> $0080                CON67           EQU     $80
001CC8 0F9CC8 -> $0040                CON45           EQU     $40
001CC8 0F9CC8 -> $0020                CON23           EQU     $20
001CC8 0F9CC8 -> $0010                CON01           EQU     $10
001CC8 0F9CC8 -> $0008                PSWAI           EQU     $08
001CC8 0F9CC8 -> $0004                PFRZ            EQU     $04
001CC8 0F9CC8 -> $0306                PWMTST          EQU     $0306
001CC8 0F9CC8 -> $0307                PWMPRSC         EQU     $0307
001CC8 0F9CC8 -> $030A                PWMSCNTA        EQU     $030A
001CC8 0F9CC8 -> $030B                PWMSCNTB        EQU     $030B
001CC8 0F9CC8 -> $030C                PWMCNT0         EQU     $030C
001CC8 0F9CC8 -> $030D                PWMCNT1         EQU     $030D
001CC8 0F9CC8 -> $030E                PWMCNT2         EQU     $030E
001CC8 0F9CC8 -> $030F                PWMCNT3         EQU     $030F
001CC8 0F9CC8 -> $0310                PWMCNT4         EQU     $0310
001CC8 0F9CC8 -> $0311                PWMCNT5         EQU     $0311
001CC8 0F9CC8 -> $0312                PWMCNT6         EQU     $0312
001CC8 0F9CC8 -> $0313                PWMCNT7         EQU     $0313
001CC8 0F9CC8 -> $0314                PWMPER0         EQU     $0314
001CC8 0F9CC8 -> $0315                PWMPER1         EQU     $0315
001CC8 0F9CC8 -> $0316                PWMPER2         EQU     $0316
001CC8 0F9CC8 -> $0317                PWMPER3         EQU     $0317
001CC8 0F9CC8 -> $0318                PWMPER4         EQU     $0318
001CC8 0F9CC8 -> $0319                PWMPER5         EQU     $0319
001CC8 0F9CC8 -> $031A                PWMPER6         EQU     $031A
001CC8 0F9CC8 -> $031B                PWMPER7         EQU     $031B
001CC8 0F9CC8 -> $031C                PWMDTY0         EQU     $031C
001CC8 0F9CC8 -> $031D                PWMDTY1         EQU     $031D
001CC8 0F9CC8 -> $031E                PWMDTY2         EQU     $031E
001CC8 0F9CC8 -> $031F                PWMDTY3         EQU     $031F
001CC8 0F9CC8 -> $0320                PWMDTY4         EQU     $0320
001CC8 0F9CC8 -> $0321                PWMDTY5         EQU     $0321
001CC8 0F9CC8 -> $0322                PWMDTY6         EQU     $0322
001CC8 0F9CC8 -> $0323                PWMDTY7         EQU     $0323
001CC8 0F9CC8 -> $0324                PWMSDN          EQU     $0324
001CC8 0F9CC8 -> $0080                PWMIF           EQU     $80
001CC8 0F9CC8 -> $0040                PWMIE           EQU     $40
001CC8 0F9CC8 -> $0020                PWMRSTRT        EQU     $20
001CC8 0F9CC8 -> $0010                PWMLVL          EQU     $10
001CC8 0F9CC8 -> $0004                PWM7IN          EQU     $04
001CC8 0F9CC8 -> $0002                PWM7INL         EQU     $02
001CC8 0F9CC8 -> $0001                PWM7ENA         EQU     $01
                                      ;$0325 to $032F reserved
001CC8 0F9CC8 -> $0330                SCI6BDH         EQU     $0330
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $0330                SCI6ASR1        EQU     $0330
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $0331                SCI6BDL         EQU     $0331
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $0331                SCI6ACR1        EQU     $0331
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $0332                SCI6CR1         EQU     $0332
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $0332                SCI6ACR2        EQU     $0332
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $0333                SCI6CR2         EQU     $0333
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $0334                SCI6SR1         EQU     $0334
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $0335                SCI6SR2         EQU     $0335
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $0336                SCI6DRH         EQU     $0336
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $0337                SCI6DRL         EQU     $0337
001CC8 0F9CC8 -> $0338                SCI7BDH         EQU     $0338
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
001CC8 0F9CC8 -> $0338                SCI7ASR1        EQU     $0338
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
001CC8 0F9CC8 -> $0339                SCI7BDL         EQU     $0339
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
001CC8 0F9CC8 -> $0339                SCI7ACR1        EQU     $0339
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
001CC8 0F9CC8 -> $033A                SCI7CR1         EQU     $033A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
001CC8 0F9CC8 -> $033A                SCI7ACR2        EQU     $033A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
001CC8 0F9CC8 -> $033B                SCI7CR2         EQU     $033B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
001CC8 0F9CC8 -> $033C                SCI7SR1         EQU     $033C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
001CC8 0F9CC8 -> $335D                SCI7SR2         EQU     $0335D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
001CC8 0F9CC8 -> $033E                SCI7DRH         EQU     $033E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
001CC8 0F9CC8 -> $033F                SCI7DRL         EQU     $033F
001CC8 0F9CC8 -> $0340                PITCFLMT        EQU     $0340
001CC8 0F9CC8 -> $0080                PITE            EQU     $80
001CC8 0F9CC8 -> $0040                PITSWAI         EQU     $40
001CC8 0F9CC8 -> $0020                PITFRZ          EQU     $20
001CC8 0F9CC8 -> $0002                PFLMT1          EQU     $02
001CC8 0F9CC8 -> $0001                PFLMT0          EQU     $01
001CC8 0F9CC8 -> $0341                PITFLT          EQU     $0341
001CC8 0F9CC8 -> $0080                PFLT7           EQU     $80
001CC8 0F9CC8 -> $0040                PFLT6           EQU     $40
001CC8 0F9CC8 -> $0020                PFLT5           EQU     $20
001CC8 0F9CC8 -> $0010                PFLT4           EQU     $10
001CC8 0F9CC8 -> $0008                PFLT3           EQU     $08
001CC8 0F9CC8 -> $0004                PFLT2           EQU     $04
001CC8 0F9CC8 -> $0002                PFLT1           EQU     $02
001CC8 0F9CC8 -> $0001                PFLT0           EQU     $01
001CC8 0F9CC8 -> $0342                PITCE           EQU     $0342
001CC8 0F9CC8 -> $0080                PCE7            EQU     $80
001CC8 0F9CC8 -> $0040                PCE6            EQU     $40
001CC8 0F9CC8 -> $0020                PCE5            EQU     $20
001CC8 0F9CC8 -> $0010                PCE4            EQU     $10
001CC8 0F9CC8 -> $0008                PCE3            EQU     $08
001CC8 0F9CC8 -> $0004                PCE2            EQU     $04
001CC8 0F9CC8 -> $0002                PCE1            EQU     $02
001CC8 0F9CC8 -> $0001                PCE0            EQU     $01
001CC8 0F9CC8 -> $0343                PITMUX          EQU     $0343
001CC8 0F9CC8 -> $0080                PMUX7           EQU     $80
001CC8 0F9CC8 -> $0040                PMUX6           EQU     $40
001CC8 0F9CC8 -> $0020                PMUX5           EQU     $20
001CC8 0F9CC8 -> $0010                PMUX4           EQU     $10
001CC8 0F9CC8 -> $0008                PMUX3           EQU     $08
001CC8 0F9CC8 -> $0004                PMUX2           EQU     $04
001CC8 0F9CC8 -> $0002                PMUX1           EQU     $02
001CC8 0F9CC8 -> $0001                PMUX0           EQU     $01
001CC8 0F9CC8 -> $0344                PITINTE         EQU     $0344
001CC8 0F9CC8 -> $0080                PINTE7          EQU     $80
001CC8 0F9CC8 -> $0040                PINTE6          EQU     $40
001CC8 0F9CC8 -> $0020                PINTE5          EQU     $20
001CC8 0F9CC8 -> $0010                PINTE4          EQU     $10
001CC8 0F9CC8 -> $0008                PINTE3          EQU     $08
001CC8 0F9CC8 -> $0004                PINTE2          EQU     $04
001CC8 0F9CC8 -> $0002                PINTE1          EQU     $02
001CC8 0F9CC8 -> $0001                PINTE0          EQU     $01
001CC8 0F9CC8 -> $0345                PITTF           EQU     $0345
001CC8 0F9CC8 -> $0080                PTF7            EQU     $80
001CC8 0F9CC8 -> $0040                PTF6            EQU     $40
001CC8 0F9CC8 -> $0020                PTF5            EQU     $20
001CC8 0F9CC8 -> $0010                PTF4            EQU     $10
001CC8 0F9CC8 -> $0008                PTF3            EQU     $08
001CC8 0F9CC8 -> $0004                PTF2            EQU     $04
001CC8 0F9CC8 -> $0002                PTF1            EQU     $02
001CC8 0F9CC8 -> $0001                PTF0            EQU     $01
001CC8 0F9CC8 -> $0346                PITMTLD0        EQU     $0346
001CC8 0F9CC8 -> $0080                PMTLD7          EQU     $80
001CC8 0F9CC8 -> $0040                PMTLD6          EQU     $40
001CC8 0F9CC8 -> $0020                PMTLD5          EQU     $20
001CC8 0F9CC8 -> $0010                PMTLD4          EQU     $10
001CC8 0F9CC8 -> $0008                PMTLD3          EQU     $08
001CC8 0F9CC8 -> $0004                PMTLD2          EQU     $04
001CC8 0F9CC8 -> $0002                PMTLD1          EQU     $02
001CC8 0F9CC8 -> $0001                PMTLD0          EQU     $01
001CC8 0F9CC8 -> $0347                PITMTLD1        EQU     $0347
                                      ;PMTLD7         EQU     $80
                                      ;PMTLD6         EQU     $40
                                      ;PMTLD5         EQU     $20
                                      ;PMTLD4         EQU     $10
                                      ;PMTLD3         EQU     $08
                                      ;PMTLD2         EQU     $04
                                      ;PMTLD1         EQU     $02
                                      ;PMTLD0         EQU     $01
001CC8 0F9CC8 -> $0348                PITLD0          EQU     $0348
001CC8 0F9CC8 -> $034A                PITCNT0         EQU     $034A
001CC8 0F9CC8 -> $034C                PITLD1          EQU     $034C
001CC8 0F9CC8 -> $034E                PITCNT1         EQU     $034E
001CC8 0F9CC8 -> $0350                PITLD2          EQU     $0350
001CC8 0F9CC8 -> $0352                PITCNT2         EQU     $0352
001CC8 0F9CC8 -> $0354                PITLD3          EQU     $0354
001CC8 0F9CC8 -> $0356                PITCNT3         EQU     $0356
001CC8 0F9CC8 -> $0358                PITLD4          EQU     $0358
001CC8 0F9CC8 -> $035A                PITCNT4         EQU     $035A
001CC8 0F9CC8 -> $035C                PITLD5          EQU     $035C
001CC8 0F9CC8 -> $035E                PITCNT5         EQU     $035E
001CC8 0F9CC8 -> $0360                PITLD6          EQU     $0360
001CC8 0F9CC8 -> $0362                PITCNT6         EQU     $0362
001CC8 0F9CC8 -> $0364                PITLD7          EQU     $0364
001CC8 0F9CC8 -> $0366                PITCNT7         EQU     $0366
001CC8 0F9CC8 -> $0368                PTR             EQU     $0368
001CC8 0F9CC8 -> $0080                PTR7            EQU     $80
001CC8 0F9CC8 -> $0040                PTR6            EQU     $40
001CC8 0F9CC8 -> $0020                PTR5            EQU     $20
001CC8 0F9CC8 -> $0010                PTR4            EQU     $10
001CC8 0F9CC8 -> $0008                PTR3            EQU     $08
001CC8 0F9CC8 -> $0004                PTR2            EQU     $04
001CC8 0F9CC8 -> $0002                PTR1            EQU     $02
001CC8 0F9CC8 -> $0001                PTR0            EQU     $01
001CC8 0F9CC8 -> $0369                PTIR            EQU     $0369
001CC8 0F9CC8 -> $0080                PTIR7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIR6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIR5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIR4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIR3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIR2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIR1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIR0           EQU     $01
001CC8 0F9CC8 -> $036A                DDRR            EQU     $036A
001CC8 0F9CC8 -> $0080                DDRR7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRR6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRR5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRR4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRR3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRR2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRR1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRR0           EQU     $01
001CC8 0F9CC8 -> $036B                RDRR            EQU     $036B
001CC8 0F9CC8 -> $0080                RDRR7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRR6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRR5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRR4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRR3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRR2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRR1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRR0           EQU     $01
001CC8 0F9CC8 -> $036C                PERR            EQU     $036C
001CC8 0F9CC8 -> $0080                PERR7           EQU     $80
001CC8 0F9CC8 -> $0040                PERR6           EQU     $40
001CC8 0F9CC8 -> $0020                PERR5           EQU     $20
001CC8 0F9CC8 -> $0010                PERR4           EQU     $10
001CC8 0F9CC8 -> $0008                PERR3           EQU     $08
001CC8 0F9CC8 -> $0004                PERR2           EQU     $04
001CC8 0F9CC8 -> $0002                PERR1           EQU     $02
001CC8 0F9CC8 -> $0001                PERR0           EQU     $01
001CC8 0F9CC8 -> $036D                PPSR            EQU     $036D
001CC8 0F9CC8 -> $0080                PPSR7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSR6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSR5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSR4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSR3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSR2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSR1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSR0           EQU     $01
001CC8 0F9CC8 -> $036F                PTRRR           EQU     $036F
001CC8 0F9CC8 -> $0080                PTRRR7          EQU     $80
001CC8 0F9CC8 -> $0040                PTRRR6          EQU     $40
001CC8 0F9CC8 -> $0020                PTRRR5          EQU     $20
001CC8 0F9CC8 -> $0010                PTRRR4          EQU     $10
001CC8 0F9CC8 -> $0008                PTRRR3          EQU     $08
001CC8 0F9CC8 -> $0004                PTRRR2          EQU     $04
001CC8 0F9CC8 -> $0002                PTRRR1          EQU     $02
001CC8 0F9CC8 -> $0001                PTRRR0          EQU     $01
001CC8 0F9CC8 -> $0370                PTL             EQU     $0370
001CC8 0F9CC8 -> $0080                PTL7            EQU     $80
001CC8 0F9CC8 -> $0040                PTL6            EQU     $40
001CC8 0F9CC8 -> $0020                PTL5            EQU     $20
001CC8 0F9CC8 -> $0010                PTL4            EQU     $10
001CC8 0F9CC8 -> $0008                PTL3            EQU     $08
001CC8 0F9CC8 -> $0004                PTL2            EQU     $04
001CC8 0F9CC8 -> $0002                PTL1            EQU     $02
001CC8 0F9CC8 -> $0001                PTL0            EQU     $01
001CC8 0F9CC8 -> $0371                PTIL            EQU     $0371
001CC8 0F9CC8 -> $0080                PTIL7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIL6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIL5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIL4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIL3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIL2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIL1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIL0           EQU     $01
001CC8 0F9CC8 -> $0372                DDRL            EQU     $0372
001CC8 0F9CC8 -> $0080                DDRL7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRL6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRL5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRL4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRL3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRL2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRL1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRL0           EQU     $01
001CC8 0F9CC8 -> $0373                RDRL            EQU     $0373
001CC8 0F9CC8 -> $0080                RDRL7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRL6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRL5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRL4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRL3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRL2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRL1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRL0           EQU     $01
001CC8 0F9CC8 -> $0374                PERL            EQU     $0374
001CC8 0F9CC8 -> $0080                PERL7           EQU     $80
001CC8 0F9CC8 -> $0040                PERL6           EQU     $40
001CC8 0F9CC8 -> $0020                PERL5           EQU     $20
001CC8 0F9CC8 -> $0010                PERL4           EQU     $10
001CC8 0F9CC8 -> $0008                PERL3           EQU     $08
001CC8 0F9CC8 -> $0004                PERL2           EQU     $04
001CC8 0F9CC8 -> $0002                PERL1           EQU     $02
001CC8 0F9CC8 -> $0001                PERL0           EQU     $01
001CC8 0F9CC8 -> $0375                PPSL            EQU     $0375
001CC8 0F9CC8 -> $0080                PPSL7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSL6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSL5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSL4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSL3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSL2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSL1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSL0           EQU     $01
001CC8 0F9CC8 -> $0376                WOML            EQU     $0376
001CC8 0F9CC8 -> $0080                WOML7           EQU     $80
001CC8 0F9CC8 -> $0040                WOML6           EQU     $40
001CC8 0F9CC8 -> $0020                WOML5           EQU     $20
001CC8 0F9CC8 -> $0010                WOML4           EQU     $10
001CC8 0F9CC8 -> $0008                WOML3           EQU     $08
001CC8 0F9CC8 -> $0004                WOML2           EQU     $04
001CC8 0F9CC8 -> $0002                WOML1           EQU     $02
001CC8 0F9CC8 -> $0001                WOML0           EQU     $01
001CC8 0F9CC8 -> $0377                PTLRR           EQU     $0377
001CC8 0F9CC8 -> $0080                PTLRR7          EQU     $80
001CC8 0F9CC8 -> $0040                PTLRR6          EQU     $40
001CC8 0F9CC8 -> $0020                PTLRR5          EQU     $20
001CC8 0F9CC8 -> $0010                PTLRR4          EQU     $10
001CC8 0F9CC8 -> $0378                PTF             EQU     $0378
001CC8 0F9CC8 -> $0080                PTF7            EQU     $80
001CC8 0F9CC8 -> $0040                PTF6            EQU     $40
001CC8 0F9CC8 -> $0020                PTF5            EQU     $20
001CC8 0F9CC8 -> $0010                PTF4            EQU     $10
001CC8 0F9CC8 -> $0008                PTF3            EQU     $08
001CC8 0F9CC8 -> $0004                PTF2            EQU     $04
001CC8 0F9CC8 -> $0002                PTF1            EQU     $02
001CC8 0F9CC8 -> $0001                PTF0            EQU     $01
001CC8 0F9CC8 -> $0379                PTIF            EQU     $0379
001CC8 0F9CC8 -> $0080                PTIF7           EQU     $80
001CC8 0F9CC8 -> $0040                PTIF6           EQU     $40
001CC8 0F9CC8 -> $0020                PTIF5           EQU     $20
001CC8 0F9CC8 -> $0010                PTIF4           EQU     $10
001CC8 0F9CC8 -> $0008                PTIF3           EQU     $08
001CC8 0F9CC8 -> $0004                PTIF2           EQU     $04
001CC8 0F9CC8 -> $0002                PTIF1           EQU     $02
001CC8 0F9CC8 -> $0001                PTIF0           EQU     $01
001CC8 0F9CC8 -> $037A                DDRF            EQU     $037A
001CC8 0F9CC8 -> $0080                DDRF7           EQU     $80
001CC8 0F9CC8 -> $0040                DDRF6           EQU     $40
001CC8 0F9CC8 -> $0020                DDRF5           EQU     $20
001CC8 0F9CC8 -> $0010                DDRF4           EQU     $10
001CC8 0F9CC8 -> $0008                DDRF3           EQU     $08
001CC8 0F9CC8 -> $0004                DDRF2           EQU     $04
001CC8 0F9CC8 -> $0002                DDRF1           EQU     $02
001CC8 0F9CC8 -> $0001                DDRF0           EQU     $01
001CC8 0F9CC8 -> $037B                RDRF            EQU     $037B
001CC8 0F9CC8 -> $0080                RDRF7           EQU     $80
001CC8 0F9CC8 -> $0040                RDRF6           EQU     $40
001CC8 0F9CC8 -> $0020                RDRF5           EQU     $20
001CC8 0F9CC8 -> $0010                RDRF4           EQU     $10
001CC8 0F9CC8 -> $0008                RDRF3           EQU     $08
001CC8 0F9CC8 -> $0004                RDRF2           EQU     $04
001CC8 0F9CC8 -> $0002                RDRF1           EQU     $02
001CC8 0F9CC8 -> $0001                RDRF0           EQU     $01
001CC8 0F9CC8 -> $037C                PERF            EQU     $037C
001CC8 0F9CC8 -> $0080                PERF7           EQU     $80
001CC8 0F9CC8 -> $0040                PERF6           EQU     $40
001CC8 0F9CC8 -> $0020                PERF5           EQU     $20
001CC8 0F9CC8 -> $0010                PERF4           EQU     $10
001CC8 0F9CC8 -> $0008                PERF3           EQU     $08
001CC8 0F9CC8 -> $0004                PERF2           EQU     $04
001CC8 0F9CC8 -> $0002                PERF1           EQU     $02
001CC8 0F9CC8 -> $0001                PERF0           EQU     $01
001CC8 0F9CC8 -> $037D                PPSF            EQU     $037D
001CC8 0F9CC8 -> $0080                PPSF7           EQU     $80
001CC8 0F9CC8 -> $0040                PPSF6           EQU     $40
001CC8 0F9CC8 -> $0020                PPSF5           EQU     $20
001CC8 0F9CC8 -> $0010                PPSF4           EQU     $10
001CC8 0F9CC8 -> $0008                PPSF3           EQU     $08
001CC8 0F9CC8 -> $0004                PPSF2           EQU     $04
001CC8 0F9CC8 -> $0002                PPSF1           EQU     $02
001CC8 0F9CC8 -> $0001                PPSF0           EQU     $01
001CC8 0F9CC8 -> $037F                PTFRR           EQU     $037F
001CC8 0F9CC8 -> $0020                PTFRR5          EQU     $20
001CC8 0F9CC8 -> $0010                PTFRR4          EQU     $10
001CC8 0F9CC8 -> $0008                PTFRR3          EQU     $08
001CC8 0F9CC8 -> $0004                PTFRR2          EQU     $04
001CC8 0F9CC8 -> $0002                PTFRR1          EQU     $02
001CC8 0F9CC8 -> $0001                PTFRR0          EQU     $01
001CC8 0F9CC8 -> $0380                XGMCTL          EQU     $0380
001CC8 0F9CC8 -> $8000                XGEM            EQU     $8000
001CC8 0F9CC8 -> $4000                XGFRZM          EQU     $4000
001CC8 0F9CC8 -> $2000                XGDBGM          EQU     $2000
001CC8 0F9CC8 -> $1000                XGSSM           EQU     $1000
001CC8 0F9CC8 -> $0800                XGFACTM         EQU     $0800
001CC8 0F9CC8 -> $0200                XGSWEFM         EQU     $0200
001CC8 0F9CC8 -> $0100                XGIEM           EQU     $0100
001CC8 0F9CC8 -> $0080                XGE             EQU     $0080
001CC8 0F9CC8 -> $0040                XGFRZ           EQU     $0040
001CC8 0F9CC8 -> $0020                XGDBG           EQU     $0020
001CC8 0F9CC8 -> $0010                XGSS            EQU     $0010
001CC8 0F9CC8 -> $0008                XGFACT          EQU     $0008
001CC8 0F9CC8 -> $0002                XGSWEF          EQU     $0002
001CC8 0F9CC8 -> $0001                XGIE            EQU     $0001
001CC8 0F9CC8 -> $0382                XGCHID          EQU     $0382
001CC8 0F9CC8 -> $0383                XGCHPL          EQU     $0383
001CC8 0F9CC8 -> $0385                XGISPSEL        EQU     $0385
001CC8 0F9CC8 -> $0386                XGISP31         EQU     $0386
001CC8 0F9CC8 -> $0386                XGISP74         EQU     $0386
001CC8 0F9CC8 -> $0386                XGVBR           EQU     $0386
001CC8 0F9CC8 -> $0388                XGIF_7F_78      EQU     $0388
001CC8 0F9CC8 -> $0080                XGIF_7F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_7E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_7D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_7C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_7B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_7A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_79         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_78         EQU     $01
001CC8 0F9CC8 -> $0389                XGIF_77_70      EQU     $0389
001CC8 0F9CC8 -> $0080                XGIF_77         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_76         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_75         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_74         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_73         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_72         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_71         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_70         EQU     $01
001CC8 0F9CC8 -> $038A                XGIF_6F_68      EQU     $038A
001CC8 0F9CC8 -> $0080                XGIF_6F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_6E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_6D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_6C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_6B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_6A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_69         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_68         EQU     $01
001CC8 0F9CC8 -> $038B                XGIF_67_60      EQU     $038B
001CC8 0F9CC8 -> $0080                XGIF_67         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_66         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_65         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_64         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_63         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_62         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_61         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_60         EQU     $01
001CC8 0F9CC8 -> $038C                XGIF_5F_58      EQU     $038C
001CC8 0F9CC8 -> $0080                XGIF_5F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_5E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_5D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_5C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_5B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_5A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_59         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_58         EQU     $01
001CC8 0F9CC8 -> $038D                XGIF_57_50      EQU     $038D
001CC8 0F9CC8 -> $0080                XGIF_57         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_56         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_55         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_54         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_53         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_52         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_51         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_50         EQU     $01
001CC8 0F9CC8 -> $038E                XGIF_4F_48      EQU     $038E
001CC8 0F9CC8 -> $0080                XGIF_4F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_4E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_4D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_4C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_4B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_4A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_49         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_48         EQU     $01
001CC8 0F9CC8 -> $038F                XGIF_47_40      EQU     $038F
001CC8 0F9CC8 -> $0080                XGIF_47         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_46         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_45         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_44         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_43         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_42         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_41         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_40         EQU     $01
001CC8 0F9CC8 -> $0390                XGIF_3F_38      EQU     $0390
001CC8 0F9CC8 -> $0080                XGIF_3F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_3E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_3D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_3C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_3B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_3A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_39         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_38         EQU     $01
001CC8 0F9CC8 -> $0391                XGIF_37_30      EQU     $0391
001CC8 0F9CC8 -> $0080                XGIF_37         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_36         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_35         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_34         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_33         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_32         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_31         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_30         EQU     $01
001CC8 0F9CC8 -> $0392                XGIF_2F_28      EQU     $0392
001CC8 0F9CC8 -> $0080                XGIF_2F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_2E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_2D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_2C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_2B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_2A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_29         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_28         EQU     $01
001CC8 0F9CC8 -> $0393                XGIF_27_20      EQU     $0393
001CC8 0F9CC8 -> $0080                XGIF_27         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_26         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_25         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_24         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_23         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_22         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_21         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_20         EQU     $01
001CC8 0F9CC8 -> $0394                XGIF_1F_18      EQU     $0394
001CC8 0F9CC8 -> $0080                XGIF_1F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_1E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_1D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_1C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_1B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_1A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_19         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_18         EQU     $01
001CC8 0F9CC8 -> $0395                XGIF_17_10      EQU     $0395
001CC8 0F9CC8 -> $0080                XGIF_17         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_16         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_15         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_14         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_13         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_12         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_11         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_10         EQU     $01
001CC8 0F9CC8 -> $0396                XGIF_0F_08      EQU     $0396
001CC8 0F9CC8 -> $0080                XGIF_0F         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_0E         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_0D         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_0C         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_0B         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_0A         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_09         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_08         EQU     $01
001CC8 0F9CC8 -> $0397                XGIF_07_00      EQU     $0397
001CC8 0F9CC8 -> $0080                XGIF_07         EQU     $80
001CC8 0F9CC8 -> $0040                XGIF_06         EQU     $40
001CC8 0F9CC8 -> $0020                XGIF_05         EQU     $20
001CC8 0F9CC8 -> $0010                XGIF_04         EQU     $10
001CC8 0F9CC8 -> $0008                XGIF_03         EQU     $08
001CC8 0F9CC8 -> $0004                XGIF_02         EQU     $04
001CC8 0F9CC8 -> $0002                XGIF_01         EQU     $02
001CC8 0F9CC8 -> $0001                XGIF_00         EQU     $01
001CC8 0F9CC8 -> $0398                XGSWT           EQU     $0398
001CC8 0F9CC8 -> $039A                XGSEM           EQU     $039A
                                      ;$039C reserved
001CC8 0F9CC8 -> $039D                XGCCR           EQU     $039D
001CC8 0F9CC8 -> $0008                XGN             EQU     $08
001CC8 0F9CC8 -> $0004                XGZ             EQU     $04
001CC8 0F9CC8 -> $0002                XGV             EQU     $02
001CC8 0F9CC8 -> $0001                XGC             EQU     $01
001CC8 0F9CC8 -> $039E                XGPC            EQU     $039E
                                      ;$03A0 to $03A2 reserved
001CC8 0F9CC8 -> $03A2                XGR1            EQU     $03A2
001CC8 0F9CC8 -> $03A4                XGR2            EQU     $03A4
001CC8 0F9CC8 -> $03A6                XGR3            EQU     $03A6
001CC8 0F9CC8 -> $03A8                XGR4            EQU     $03A8
001CC8 0F9CC8 -> $03AA                XGR5            EQU     $03AA
001CC8 0F9CC8 -> $03AC                XGR6            EQU     $03AC
001CC8 0F9CC8 -> $03AE                XGR7            EQU     $03AE
                                      ;$03B0 to $03CF reserved
001CC8 0F9CC8 -> $03D0                TIM_TIOS        EQU     $03D0
                                      ;IOS7           EQU     $80
                                      ;IOS6           EQU     $40
                                      ;IOS5           EQU     $20
                                      ;IOS4           EQU     $10
                                      ;IOS3           EQU     $08
                                      ;IOS2           EQU     $04
                                      ;IOS1           EQU     $02
                                      ;IOS0           EQU     $01
001CC8 0F9CC8 -> $03D1                TIM_TCFORC      EQU     $03D1
                                      ;FOC7           EQU     $80
                                      ;FOC6           EQU     $40
                                      ;FOC5           EQU     $20
                                      ;FOC4           EQU     $10
                                      ;FOC3           EQU     $08
                                      ;FOC2           EQU     $04
                                      ;FOC1           EQU     $02
                                      ;FOC0           EQU     $01
001CC8 0F9CC8 -> $03D2                TIM_TOC7M       EQU     $03D2
                                      ;OC7M7          EQU     $80
                                      ;OC7M6          EQU     $40
                                      ;OC7M5          EQU     $20
                                      ;OC7M4          EQU     $10
                                      ;OC7M3          EQU     $08
                                      ;OC7M2          EQU     $04
                                      ;OC7M1          EQU     $02
                                      ;OC7M0          EQU     $01
001CC8 0F9CC8 -> $03D3                TIM_TOC7D       EQU     $03D3
                                      ;OC7D7          EQU     $80
                                      ;OC7D6          EQU     $40
                                      ;OC7D5          EQU     $20
                                      ;OC7D4          EQU     $10
                                      ;OC7D3          EQU     $08
                                      ;OC7D2          EQU     $04
                                      ;OC7D1          EQU     $02
                                      ;OC7D0          EQU     $01
001CC8 0F9CC8 -> $03D4                TIM_TCNT        EQU     $03D4
001CC8 0F9CC8 -> $03D6                TIM_TSCR1       EQU     $03D6
                                      ;TEN            EQU     $80
                                      ;TSWAI          EQU     $40
                                      ;TSFRZ          EQU     $20
                                      ;TFFCA          EQU     $10
001CC8 0F9CC8 -> $03D7                TIM_TTOV        EQU     $03D7
                                      ;TOV7           EQU     $80
                                      ;TOV6           EQU     $40
                                      ;TOV5           EQU     $20
                                      ;TOV4           EQU     $10
                                      ;TOV3           EQU     $08
                                      ;TOV2           EQU     $04
                                      ;TOV1           EQU     $02
                                      ;TOV0           EQU     $01
001CC8 0F9CC8 -> $03D8                TIM_TCTL1       EQU     $03D8
                                      ;OM7            EQU     $80
                                      ;OL7            EQU     $40
                                      ;OM6            EQU     $20
                                      ;OL6            EQU     $10
                                      ;OM5            EQU     $08
                                      ;OL5            EQU     $04
                                      ;OM4            EQU     $02
                                      ;OL4            EQU     $01
001CC8 0F9CC8 -> $03D9                TIM_TCTL2       EQU     $03D9
                                      ;OM3            EQU     $80
                                      ;OL3            EQU     $40
                                      ;OM2            EQU     $20
                                      ;OL2            EQU     $10
                                      ;OM1            EQU     $08
                                      ;OL1            EQU     $04
                                      ;OM0            EQU     $02
                                      ;OL0            EQU     $01
001CC8 0F9CC8 -> $03DA                TIM_TCTL3       EQU     $03DA
                                      ;EDG7B          EQU     $80
                                      ;EDG7A          EQU     $40
                                      ;EDG6B          EQU     $20
                                      ;EDG6A          EQU     $10
                                      ;EDG5B          EQU     $08
                                      ;EDG5A          EQU     $04
                                      ;EDG4B          EQU     $02
                                      ;EDG4A          EQU     $01
001CC8 0F9CC8 -> $03DB                TIM_TCTL4       EQU     $03DB
                                      ;EDG3B          EQU     $80
                                      ;EDG3A          EQU     $40
                                      ;EDG2B          EQU     $20
                                      ;EDG2A          EQU     $10
                                      ;EDG1B          EQU     $08
                                      ;EDG1A          EQU     $04
                                      ;EDG0B          EQU     $02
                                      ;EDG0A          EQU     $01
001CC8 0F9CC8 -> $03DC                TIM_TIE         EQU     $03DC
                                      ;C7I            EQU     $80
                                      ;C6I            EQU     $40
                                      ;C5I            EQU     $20
                                      ;C4I            EQU     $10
                                      ;C3I            EQU     $08
                                      ;C2I            EQU     $04
                                      ;C1I            EQU     $02
                                      ;C0I            EQU     $01
001CC8 0F9CC8 -> $03DD                TIM_TSCR2       EQU     $03DD
                                      ;TOI            EQU     $80
                                      ;TCRE           EQU     $08
                                      ;PR2            EQU     $04
                                      ;PR1            EQU     $02
                                      ;PR0            EQU     $01
001CC8 0F9CC8 -> $03DE                TIM_TFLG1       EQU     $03DE
                                      ;C7F            EQU     $80
                                      ;C6F            EQU     $40
                                      ;C5F            EQU     $20
                                      ;C4F            EQU     $10
                                      ;C3F            EQU     $08
                                      ;C2F            EQU     $04
                                      ;C1F            EQU     $02
                                      ;C0F            EQU     $01
001CC8 0F9CC8 -> $03DF                TIM_TFLG2       EQU     $03DF
                                      ;TOF            EQU     $80
001CC8 0F9CC8 -> $03E0                TIM_TC0         EQU     $03E0
001CC8 0F9CC8 -> $0052                TIM_TC1         EQU     $0052
001CC8 0F9CC8 -> $0054                TIM_TC2         EQU     $0054
001CC8 0F9CC8 -> $0056                TIM_TC3         EQU     $0056
001CC8 0F9CC8 -> $0058                TIM_TC4         EQU     $0058
001CC8 0F9CC8 -> $005A                TIM_TC5         EQU     $005A
001CC8 0F9CC8 -> $005C                TIM_TC6         EQU     $005C
001CC8 0F9CC8 -> $005E                TIM_TC7         EQU     $005E
001CC8 0F9CC8 -> $03F0                TIM_PACTL       EQU     $03F0
                                      ;PAEN           EQU     $40
                                      ;PAMOD          EQU     $20
                                      ;PEDGE          EQU     $10
                                      ;CLK1           EQU     $08
                                      ;CLK0           EQU     $04
                                      ;PAOVI          EQU     $02
                                      ;PAI            EQU     $01
001CC8 0F9CC8 -> $03F1                TIM_PAFLG       EQU     $03F1
                                      ;PAOVF          EQU     $02
                                      ;PAIF           EQU     $01
001CC8 0F9CC8 -> $03F2                TIM_PACNT       EQU     $03F2
001CC8 0F9CC8 -> $03F2                TIM_PACN1       EQU     $03F2
001CC8 0F9CC8 -> $03F2                TIM_PACNH       EQU     $03F2
001CC8 0F9CC8 -> $03F3                TIM_PACN0       EQU     $03F3
001CC8 0F9CC8 -> $03F3                TIM_PACNL       EQU     $03F3
                                      ;$03F4 to $03FB reserved
001CC8 0F9CC8 -> $03FC                TIM_OCPD        EQU     $03FC
                                      ;OCPD0          EQU     $01
                                      ;OCPD1          EQU     $02
                                      ;OCPD2          EQU     $04
                                      ;OCPD3          EQU     $08
                                      ;OCPD4          EQU     $10
                                      ;OCPD5          EQU     $20
                                      ;OCPD6          EQU     $40
                                      ;OCPD7          EQU     $80
                                      ;$03FD reserved
001CC8 0F9CC8 -> $03FE                TIM_PTPSR       EQU     $03FE
                                      ;PTPS0          EQU     $01
                                      ;PTPS1          EQU     $02
                                      ;PTPS2          EQU     $04
                                      ;PTPS3          EQU     $08
                                      ;PTPS4          EQU     $10
                                      ;PTPS5          EQU     $20
                                      ;PTPS6          EQU     $40
                                      ;PTPS7          EQU     $80
                                      ;$03FF to $07FF reserved
                                      ;NVM locations
001CC8 0F9CC8 -> $FF00                BAKEY0          EQU     $FF00
001CC8 0F9CC8 -> $FF02                BAKEY1          EQU     $FF02
001CC8 0F9CC8 -> $FF04                BAKEY2          EQU     $FF04
001CC8 0F9CC8 -> $FF06                BAKEY3          EQU     $FF06
001CC8 0F9CC8 -> $FF0C                NVFPROT         EQU     $FF0C
001CC8 0F9CC8 -> $0080                FPOPEN          EQU     $80
001CC8 0F9CC8 -> $0040                RNV6            EQU     $40
001CC8 0F9CC8 -> $0020                FPHDIS          EQU     $20
001CC8 0F9CC8 -> $0010                FPHS1           EQU     $10
001CC8 0F9CC8 -> $0008                FPHS0           EQU     $08
001CC8 0F9CC8 -> $0004                FPLDIS          EQU     $04
001CC8 0F9CC8 -> $0002                FPLS1           EQU     $02
001CC8 0F9CC8 -> $0001                FPLS0           EQU     $01
001CC8 0F9CC8 -> $FF0D                NVEPROT         EQU     $FF0D
001CC8 0F9CC8 -> $0080                EPOPEN          EQU     $80
001CC8 0F9CC8 -> $0040                RNV6            EQU     $40
001CC8 0F9CC8 -> $0020                RNV5            EQU     $20
001CC8 0F9CC8 -> $0010                RNV4            EQU     $10
001CC8 0F9CC8 -> $0008                EPDIS           EQU     $08
001CC8 0F9CC8 -> $0004                EPS2            EQU     $04
001CC8 0F9CC8 -> $0002                EPS1            EQU     $02
001CC8 0F9CC8 -> $0001                EPS0            EQU     $01
001CC8 0F9CC8 -> $FF0E                NVFOPT          EQU     $FF0E
001CC8 0F9CC8 -> $0080                NV7             EQU     $80
001CC8 0F9CC8 -> $0040                NV6             EQU     $40
001CC8 0F9CC8 -> $0020                NV5             EQU     $20
001CC8 0F9CC8 -> $0010                NV4             EQU     $10
001CC8 0F9CC8 -> $0008                NV3             EQU     $08
001CC8 0F9CC8 -> $0004                NV2             EQU     $04
001CC8 0F9CC8 -> $0002                NV1             EQU     $02
001CC8 0F9CC8 -> $0001                NV0             EQU     $01
001CC8 0F9CC8 -> $FF0F                NVFSEC          EQU     $FF0F
001CC8 0F9CC8 -> $0080                KEYEN1          EQU     $80
001CC8 0F9CC8 -> $0040                KEYEN0          EQU     $40
001CC8 0F9CC8 -> $0020                RNV5            EQU     $20
001CC8 0F9CC8 -> $0010                RNV4            EQU     $10
001CC8 0F9CC8 -> $0008                RNV3            EQU     $08
001CC8 0F9CC8 -> $0004                RNV2            EQU     $04
001CC8 0F9CC8 -> $0002                SEC1            EQU     $02
001CC8 0F9CC8 -> $0001                SEC0            EQU     $01
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (Mini-BDM-Pod)                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports. The OpenBDM firmware      #
                                      ;#    assumes the following I/O pin configuration of the S12C128 MCU:          #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD00 - unused                     (analog       no pull  )             #
                                      ;#     PAD01 - unused                     (analog       no pull  )             #
                                      ;#     PAD02 - NC                         (input        pull-up  )             #
                                      ;#     PAD03 - NC                         (input        pull-up  )             #
                                      ;#     PAD04 - NC                         (input        pull-up  )             #
                                      ;#     PAD05 - NC                         (input        pull-up  )             #
                                      ;#     PAD06 - NC                         (input        pull-up  )             #
                                      ;#     PAD07 - NC                         (input        pull-up  )             #
                                      ;#     PAD08 - unused                     (analog       no pull  )             #
                                      ;#     PAD09 - unused                     (analog       no pull  )             #
                                      ;#     PAD10 - unused                     (analog       no pull  )             #
                                      ;#     PAD11 - Target VDD                 (analog       no pull  )             #
                                      ;#     PAD12 - NC                         (input        pull-up  )             #
                                      ;#     PAD13 - NC                         (input        pull-up  )             #
                                      ;#     PAD14 - NC                         (input        pull-up  )             #
                                      ;#     PAD15 - NC                         (input        pull-up  )             #
                                      ;#     PAD16 - NC                         (input        pull-up  )             #
                                      ;#     PAD17 - NC                         (input        pull-up  )             #
                                      ;#     PAD18 - NC                         (input        pull-up  )             #
                                      ;#     PAD19 - NC                         (input        pull-up  )             #
                                      ;#     PAD20 - NC                         (input        pull-up  )             #
                                      ;#     PAD21 - NC                         (input        pull-up  )             #
                                      ;#     PAD22 - NC                         (input        pull-up  )             #
                                      ;#     PAD23 - NC                         (input        pull-up  )             #
                                      ;#     PAD24 - NC                         (input        pull-up  )             #
                                      ;#     PAD25 - NC                         (input        pull-up  )             #
                                      ;#     PAD26 - NC                         (input        pull-up  )             #
                                      ;#     PAD27 - NC                         (input        pull-up  )             #
                                      ;#     PAD28 - NC                         (input        pull-up  )             #
                                      ;#     PAD29 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - unused                       (output       low      )             #
                                      ;#     PA1 - unused                       (output       low      )             #
                                      ;#     PA2 - unused                       (output       low      )             #
                                      ;#     PA3 - unused                       (output       low      )             #
                                      ;#     PA4 - unused                       (output       low      )             #
                                      ;#     PA5 - unused                       (output       low      )             #
                                      ;#     PA6 - unused                       (output       low      )             #
                                      ;#     PA7 - unused                       (output       low      )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - unused                       (output       low      )             #
                                      ;#     PB1 - unused                       (output       low      )             #
                                      ;#     PB2 - unused                       (output       low      )             #
                                      ;#     PB3 - unused                       (output       low      )             #
                                      ;#     PB4 - unused                       (output       low      )             #
                                      ;#     PB5 - unused                       (output       low      )             #
                                      ;#     PB6 - unused                       (output       low      )             #
                                      ;#     PB7 - unused                       (output       low      )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - unused                       (input        no pull  )             #
                                      ;#     PE1 - unused                       (input        no pull  )             #
                                      ;#     PE2 - unused                       (output       low      )             #
                                      ;#     PE3 - NC                           (input        pull-up  )             #
                                      ;#     PE4 - NC                           (input        pull-up  )             #
                                      ;#     PE5 - MODA                         (input        pull-down)             #
                                      ;#     PE6 - MODB                         (input        pull-down)             #
                                      ;#     PE7 - unused                       (input        no pull  )             #
                                      ;#    Port F:                                                                  #
                                      ;#     PF0 - NC                           (input        pull-up  )             #
                                      ;#     PF1 - NC                           (input        pull-up  )             #
                                      ;#     PF2 - NC                           (input        pull-up  )             #
                                      ;#     PF3 - NC                           (input        pull-up  )             #
                                      ;#     PF4 - NC                           (input        pull-up  )             #
                                      ;#     PF5 - NC                           (input        pull-up  )             #
                                      ;#     PF6 - NC                           (input        pull-up  )             #
                                      ;#     PF7 - NC                           (input        pull-up  )             #
                                      ;#    Port H:                                                                  #
                                      ;#     PH0 - unused                       (input        pull-up  )             #
                                      ;#     PH1 - unused                       (input        pull-up  )             #
                                      ;#     PH2 - unused                       (input        pull-up  )             #
                                      ;#     PH3 - unused                       (input        pull-up  )             #
                                      ;#     PH4 - unused                       (input        pull-up  )             #
                                      ;#     PH5 - unused                       (input        pull-up  )             #
                                      ;#     PH6 - unused                       (input        pull-up  )             #
                                      ;#     PH7 - unused                       (input        pull-up  )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - NC                           (input        pull-up  )             #
                                      ;#     PJ1 - NC                           (input        pull-up  )             #
                                      ;#     PJ2 - NC                           (input        pull-up  )             #
                                      ;#     PJ3 - NC                           (input        pull-up  )             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - unused                       (input        no pull  )             #
                                      ;#     PJ7 - unused                       (input        no pull  )             #
                                      ;#    Port K:                                                                  #
                                      ;#     PK0 - unused                       (output       high     )             #
                                      ;#     PK1 - unused                       (output       high     )             #
                                      ;#     PK2 - unused                       (output       high     )             #
                                      ;#     PK3 - NC                           (input        pull-up  )             #
                                      ;#     PK4 - NC                           (input        pull-up  )             #
                                      ;#     PK5 - NC                           (input        pull-up  )             #
                                      ;#     PK6 - NC                           (input        pull-up  )             #
                                      ;#     PK7 - NC                           (input        pull-up  )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - unused                       (output       low      )             #
                                      ;#     PM1 - unused                       (output       low      )             #
                                      ;#     PM2 - unused                       (output       low      )             #
                                      ;#     PM3 - unused                       (output       low      )             #
                                      ;#     PM4 - unused                       (output       low      )             #
                                      ;#     PM5 - unused                       (output       low      )             #
                                      ;#     PM6 - Switch                       (input        no pull  )             #
                                      ;#     PM7 - Target interface enable      (open-drain   no-pull  )             #
                                      ;#    Port L:                                                                  #
                                      ;#     PL0 - NC                           (input        pull-up  )             #
                                      ;#     PL1 - NC                           (input        pull-up  )             #
                                      ;#     PL2 - NC                           (input        pull-up  )             #
                                      ;#     PL3 - NC                           (input        pull-up  )             #
                                      ;#     PL4 - NC                           (input        pull-up  )             #
                                      ;#     PL5 - NC                           (input        pull-up  )             #
                                      ;#     PL6 - NC                           (input        pull-up  )             #
                                      ;#     PL7 - NC                           (input        pull-up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - unused                       (output       low      )             #
                                      ;#     PP1 - unused                       (output       low      )             #
                                      ;#     PP2 - LED switch                   (output       high     )             #
                                      ;#     PP3 - LED switch                   (output       high     )             #
                                      ;#     PP4 - LED 4 green                  (output       high     )             #
                                      ;#     PP5 - LED 3 green                  (output       high     )             #
                                      ;#     PP6 - LED 2 green                  (output       high     )             #
                                      ;#     PP7 - LED 1 red                    (output       high     )             #
                                      ;#    Port R:                                                                  #
                                      ;#     PR0 - NC                           (input        pull-up  )             #
                                      ;#     PR1 - NC                           (input        pull-up  )             #
                                      ;#     PR2 - NC                           (input        pull-up  )             #
                                      ;#     PR3 - NC                           (input        pull-up  )             #
                                      ;#     PR4 - NC                           (input        pull-up  )             #
                                      ;#     PR5 - NC                           (input        pull-up  )             #
                                      ;#     PR6 - NC                           (input        pull-up  )             #
                                      ;#     PR7 - NC                           (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI RX                       (input        no pull  )             #
                                      ;#     PS1 - SCI TX                       (output       high     )             #
                                      ;#     PS2 - NC                           (input        pull-up  )             #
                                      ;#     PS3 - NC                           (input        pull-up  )             #
                                      ;#     PS4 - NC                           (input        pull-up  )             #
                                      ;#     PS5 - unused                       (output       low      )             #
                                      ;#     PS6 - unused                       (output       low      )             #
                                      ;#     PS7 - unused                       (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - SCI RX                       (input        no pull  )             #
                                      ;#     PT1 - NC                           (input        pull-up  )             #
                                      ;#     PT2 - NC                           (input        pull-up  )             #
                                      ;#     PT3 - NC                           (input        pull-up  )             #
                                      ;#     PT4 - NC                           (input        pull-up  )             #
                                      ;#     PT5 - NC                           (input        pull-up  )             #
                                      ;#     PT6 - Target BKGD                  (input/output pull-up  )             #
                                      ;#     PT7 - Target RESET                 (input/output pull-up  )             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001BFB 0F9BFB -> $1BFB                GPIO_VARS_END           EQU     *
001BFB 0F9BFB -> $F9BFB               GPIO_VARS_END_LIN       EQU     @
                                                      ;CLR    PPST
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0014D7 0F94D7                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
0014D7 0F94D7 -> $14D7                GPIO_CODE_END           EQU     *
0014D7 0F94D7 -> $F94D7               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001CC8 0F9CC8                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
001CC8 0F9CC8 -> $1CC8                GPIO_TABS_END           EQU     *
001CC8 0F9CC8 -> $F9CC8               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (Mini-BDM-Pod)                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module module performs all the necessary steps to initialize the    #
                                      ;#    device after each reset.                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Updated memory mapping                                               #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $0800
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;       Flash->+ +-------------+ $4000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $DF10
                                      ;              | |   Vectors   |
                                      ;              | +-------------+ $E000
                                      ;              | | BootLoader  |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $7F10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $8000
                                      ;                |/////////////|
                                      ;                +-------------+ $E000
                                      ;                | BootLoader  |
                                      ;                +-------------+
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;RAM or flash
                                      ;S12XEP100 or S12XEQ512
001CC8 0F9CC8 -> $0001                MMAP_S12XEP100          EQU     1               ;default is S12XEP100
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                                              ;Set within bootloader code
                                                              ;ORG    $FF0D   ;unprotect
                                                              ;DB     $FF
                                                              ;ORG    $FF0F   ;unsecure
                                                              ;DB     $FE
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Locations
                                      ;Register space
001CC8 0F9CC8 -> $0000                MMAP_REG_GLOBAL_START   EQU     $00_0000
001CC8 0F9CC8 -> $0800                MMAP_REG_GLOBAL_END     EQU     $0_0800
001CC8 0F9CC8 -> $0000                MMAP_REG_START          EQU     $0000
001CC8 0F9CC8 -> $0000                MMAP_REG_START_LIN      EQU     MMAP_REG_GLOBAL_START
001CC8 0F9CC8 -> $0800                MMAP_REG_END            EQU     $0800
001CC8 0F9CC8 -> $0000                MMAP_REG_END_LIN        EQU     MMAP_REG_GLOBAL_START
                                      ;EEE RAM
001CC8 0F9CC8 -> $13F000              MMAP_EERAM_GLOBAL_START EQU     $13_F000
001CC8 0F9CC8 -> $140000              MMAP_EERAM_GLOBAL_END   EQU     $14_0000
001CC8 0F9CC8 -> $0800                MMAP_EERAM_START        EQU     $0800
001CC8 0F9CC8 -> $13F800              MMAP_EERAM_START_LIN    EQU     $13_F800
001CC8 0F9CC8 -> $0C00                MMAP_EERAM_WIN_START    EQU     $0C00
001CC8 0F9CC8 -> $1000                MMAP_EERAM_END          EQU     $1000
001CC8 0F9CC8 -> $140000              MMAP_EERAM_END_LIN      EQU     MMAP_EERAM_GLOBAL_END
                                      ;RAM
001CC8 0F9CC8 -> $F8000               MMAP_RAM_GLOBAL_START   EQU     $0F_8000        ;32K
001CC8 0F9CC8 -> $100000              MMAP_RAM_GLOBAL_END     EQU     $10_0000
001CC8 0F9CC8 -> $1000                MMAP_RAM_START          EQU     $1000
001CC8 0F9CC8 -> $F9000               MMAP_RAM_START_LIN      EQU     $0F_9000
001CC8 0F9CC8 -> $2000                MMAP_RAM_WIN_START      EQU     $2000
001CC8 0F9CC8 -> $8000                MMAP_RAM_END            EQU     $8000
001CC8 0F9CC8 -> $100000              MMAP_RAM_END_LIN        EQU     MMAP_RAM_GLOBAL_END
                                      ;Flash
001CC8 0F9CC8 -> $788000              MMAP_FLASH_GLOBAL_START EQU     $78_8000        ;512K
001CC8 0F9CC8 -> $800000              MMAP_FLASH_GLOBAL_END   EQU     $80_0000
001CC8 0F9CC8 -> $4000                MMAP_FLASH_FD_START     EQU     $4000
001CC8 0F9CC8 -> $7F4000              MMAP_FLASH_FD_START_LIN EQU     $7F_4000
001CC8 0F9CC8 -> $8000                MMAP_FLASH_WIN_START    EQU     $8000
001CC8 0F9CC8 -> $C000                MMAP_FLASH_FE_START     EQU     $C000
001CC8 0F9CC8 -> $7FC000              MMAP_FLASH_FE_START_LIN EQU     $7F_C000
001CC8 0F9CC8 -> $10000               MMAP_FLASH_END          EQU     $10000
001CC8 0F9CC8 -> $800000              MMAP_FLASH_END_LIN      EQU     MMAP_FLASH_GLOBAL_END
                                      ;#Memory sizes
001CC8 0F9CC8 -> $0800                MMAP_REG_SIZE           EQU     MMAP_REG_END-MMAP_REG_START
001CC8 0F9CC8 -> $1000                MMAP_EERAM_SIZE         EQU     MMAP_EERAM_GLOBAL_END-MMAP_EERAM_GLOBAL_START
001CC8 0F9CC8 -> $8000                MMAP_RAM_SIZE           EQU     MMAP_RAM_GLOBAL_END-MMAP_RAM_GLOBAL_START
001CC8 0F9CC8 -> $78000               MMAP_FLASH_SIZE         EQU     MMAP_FLASH_GLOBAL_END-MMAP_FLASH_GLOBAL_START
                                      ;#MPU desccriptors
001CC8 0F9CC8 -> $0000                MMAP_D_REG_LOADDR       EQU     MMAP_REG_GLOBAL_START   ;register space
001CC8 0F9CC8 -> $07FF                MMAP_D_REG_HIADDR       EQU     MMAP_REG_GLOBAL_END-1
001CC8 0F9CC8 -> $0040                MMAP_D_REG_PROTECT      EQU     NEX                     ;read and write
001CC8 0F9CC8 -> $00C0                MMAP_D_REG_BYTE0        EQU            (MSTR0|MSTR1|(MMAP_D_REG_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_REG_BYTE1        EQU                        ((MMAP_D_REG_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_REG_BYTE2        EQU                        ((MMAP_D_REG_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $0040                MMAP_D_REG_BYTE3        EQU     (MMAP_D_REG_PROTECT|(MMAP_D_REG_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_REG_BYTE4        EQU                        ((MMAP_D_REG_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_REG_BYTE5        EQU                        ((MMAP_D_REG_HIADDR>>03))&$FF
001CC8 0F9CC8 -> $0800                MMAP_D_URAM_LOADDR      EQU     MMAP_REG_GLOBAL_END     ;unimplemented RAM space
001CC8 0F9CC8 -> $F7FFF               MMAP_D_URAM_HIADDR      EQU     MMAP_RAM_GLOBAL_START-1
001CC8 0F9CC8 -> $00C0                MMAP_D_URAM_PROTECT     EQU     WP|NEX                  ;read omly
001CC8 0F9CC8 -> $00C0                MMAP_D_URAM_BYTE0       EQU             (MSTR0|MSTR1|(MMAP_D_URAM_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $0001                MMAP_D_URAM_BYTE1       EQU                         ((MMAP_D_URAM_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_URAM_BYTE2       EQU                         ((MMAP_D_URAM_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $00C1                MMAP_D_URAM_BYTE3       EQU     (MMAP_D_URAM_PROTECT|(MMAP_D_URAM_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $00EF                MMAP_D_URAM_BYTE4       EQU                         ((MMAP_D_URAM_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_URAM_BYTE5       EQU                         ((MMAP_D_URAM_HIADDR>>03))&$FF
001CC8 0F9CC8 -> $F8000               MMAP_D_RAM_LOADDR       EQU     MMAP_RAM_GLOBAL_START   ;RAM
001CC8 0F9CC8 -> $FFFFF               MMAP_D_RAM_HIADDR       EQU     MMAP_RAM_GLOBAL_END-1
001CC8 0F9CC8 -> $0000                MMAP_D_RAM_PROTECT      EQU     0                       ;read, write, and execute
001CC8 0F9CC8 -> $00C1                MMAP_D_RAM_BYTE0        EQU             (MSTR0|MSTR1|(MMAP_D_RAM_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $00F0                MMAP_D_RAM_BYTE1        EQU                         ((MMAP_D_RAM_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_RAM_BYTE2        EQU                         ((MMAP_D_RAM_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $0001                MMAP_D_RAM_BYTE3        EQU      (MMAP_D_RAM_PROTECT|(MMAP_D_RAM_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_RAM_BYTE4        EQU                         ((MMAP_D_RAM_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_RAM_BYTE5        EQU                         ((MMAP_D_RAM_HIADDR>>03))&$FF
001CC8 0F9CC8 -> $100000              MMAP_D_UEERAM_LOADDR    EQU     MMAP_RAM_GLOBAL_END     ;unimplemented EERAM space
001CC8 0F9CC8 -> $13EFFF              MMAP_D_UEERAM_HIADDR    EQU     MMAP_EERAM_GLOBAL_START-1
001CC8 0F9CC8 -> $00C0                MMAP_D_UEERAM_PROTECT   EQU     WP|NEX                  ;read only
001CC8 0F9CC8 -> $00C2                MMAP_D_UEERAM_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UEERAM_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_UEERAM_BYTE1     EQU                         ((MMAP_D_UEERAM_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_UEERAM_BYTE2     EQU                         ((MMAP_D_UEERAM_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $00C2                MMAP_D_UEERAM_BYTE3     EQU   (MMAP_D_UEERAM_PROTECT|(MMAP_D_UEERAM_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $007D                MMAP_D_UEERAM_BYTE4     EQU                         ((MMAP_D_UEERAM_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_UEERAM_BYTE5     EQU                         ((MMAP_D_UEERAM_HIADDR>>03))&$FF
001CC8 0F9CC8 -> $13F000              MMAP_D_EERAM_LOADDR     EQU     MMAP_EERAM_GLOBAL_START ;EERAM
001CC8 0F9CC8 -> $0FFF                MMAP_D_EERAM_HIADDR     EQU     MMAP_EERAM_END-1
001CC8 0F9CC8 -> $0000                MMAP_D_EERAM_PROTECT    EQU     0                       ;read, write and execute
001CC8 0F9CC8 -> $00C2                MMAP_D_EERAM_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_EERAM_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $007E                MMAP_D_EERAM_BYTE1      EQU                         ((MMAP_D_EERAM_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_EERAM_BYTE2      EQU                         ((MMAP_D_EERAM_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_EERAM_BYTE3      EQU    (MMAP_D_EERAM_PROTECT|(MMAP_D_EERAM_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $0001                MMAP_D_EERAM_BYTE4      EQU                         ((MMAP_D_EERAM_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_EERAM_BYTE5      EQU                         ((MMAP_D_EERAM_HIADDR>>03))&$FF
001CC8 0F9CC8 -> $140000              MMAP_D_UFLASH_LOADDR    EQU     MMAP_EERAM_GLOBAL_END   ;unimplemented flash space
001CC8 0F9CC8 -> $787FFF              MMAP_D_UFLASH_HIADDR    EQU     MMAP_FLASH_GLOBAL_START-1
001CC8 0F9CC8 -> $00C0                MMAP_D_UFLASH_PROTECT   EQU     WP|NEX                  ;read only
001CC8 0F9CC8 -> $00C2                MMAP_D_UFLASH_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UFLASH_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $0080                MMAP_D_UFLASH_BYTE1     EQU                         ((MMAP_D_UFLASH_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_UFLASH_BYTE2     EQU                         ((MMAP_D_UFLASH_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $00CF                MMAP_D_UFLASH_BYTE3     EQU   (MMAP_D_UFLASH_PROTECT|(MMAP_D_UFLASH_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $000F                MMAP_D_UFLASH_BYTE4     EQU                         ((MMAP_D_UFLASH_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_UFLASH_BYTE5     EQU                         ((MMAP_D_UFLASH_HIADDR>>03))&$FF
001CC8 0F9CC8 -> $788000              MMAP_D_FLASH_LOADDR     EQU     MMAP_FLASH_GLOBAL_START ;Flash
001CC8 0F9CC8 -> $7FFFFF              MMAP_D_FLASH_HIADDR     EQU     MMAP_FLASH_GLOBAL_END-1
001CC8 0F9CC8 -> $0080                MMAP_D_FLASH_PROTECT    EQU     WP                      ;read and execute
001CC8 0F9CC8 -> $00CF                MMAP_D_FLASH_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_FLASH_LOADDR>>19))&$FF
001CC8 0F9CC8 -> $0010                MMAP_D_FLASH_BYTE1      EQU                         ((MMAP_D_FLASH_LOADDR>>11))&$FF
001CC8 0F9CC8 -> $0000                MMAP_D_FLASH_BYTE2      EQU                         ((MMAP_D_FLASH_LOADDR>>03))&$FF
001CC8 0F9CC8 -> $008F                MMAP_D_FLASH_BYTE3      EQU    (MMAP_D_FLASH_PROTECT|(MMAP_D_FLASH_HIADDR>>19))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_FLASH_BYTE4      EQU                         ((MMAP_D_FLASH_HIADDR>>11))&$FF
001CC8 0F9CC8 -> $00FF                MMAP_D_FLASH_BYTE5      EQU                         ((MMAP_D_FLASH_HIADDR>>03))&$FF
                                      ;# Vector table
001CC8 0F9CC8 -> $7F10                VECTAB_START            EQU     $7F10
001CC8 0F9CC8 -> $FFF10               VECTAB_START_LIN        EQU     $0FFF10
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001BFB 0F9BFB -> $1BFB                MMAP_VARS_END           EQU     *
001BFB 0F9BFB -> $F9BFB               MMAP_VARS_END_LIN       EQU     @
                                      ;#endif
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0014D7 0F94D7                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
                                      ;#Trigger a fatal error if a reset accurs
0014D7 0F94D7 -> $14D7                MMAP_ISR_MPU            EQU     *
0014D7 0F94D7 MACRO                                           RESET_FATAL     MMAP_STR_MPU
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
0014D7 0F94D7 CE 1C C8                                        LDX     #\1                                              (RESET_FATAL)
0014DA 0F94DA 06 1A AD                                        JOB     RESET_FATAL                                      (RESET_FATAL)
0014DD 0F94DD -> $14DD                MMAP_CODE_END           EQU     *
0014DD 0F94DD -> $F94DD               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001CC8 0F9CC8                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
001CC8 0F9CC8 4D 50 55 20 65 72 72 6F MMAP_STR_MPU            FCS     "MPU error"
              F2                      
001CD1 0F9CD1 -> $1CD1                MMAP_TABS_END           EQU     *
001CD1 0F9CD1 -> $F9CD1               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001CD1 0F9CD1 -> $1C05                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
001CD1 0F9CD1 -> $1C20                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001BFB 0F9BFB -> $1BFB                SSTACK_VARS_END         EQU     *
001BFB 0F9BFB -> $F9BFB               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0014DD 0F94DD                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
0014DD 0F94DD -> $14DD                SSTACK_OF               EQU     *
0014DD 0F94DD MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
0014DD 0F94DD CE 1C D1                                        LDX     #\1                                              (RESET_FATAL)
0014E0 0F94E0 06 1A AD                                        JOB     RESET_FATAL                                      (RESET_FATAL)
                                      ;#Handle stack underflows
0014E3 0F94E3 -> $14E3                SSTACK_UF               EQU     *
0014E3 0F94E3 MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
0014E3 0F94E3 CE 1C EA                                        LDX     #\1                                              (RESET_FATAL)
0014E6 0F94E6 06 1A AD                                        JOB     RESET_FATAL                                      (RESET_FATAL)
0014E9 0F94E9 -> $14E9                SSTACK_CODE_END         EQU     *
0014E9 0F94E9 -> $F94E9               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001CD1 0F9CD1                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
001CD1 0F9CD1 53 75 62 72 6F 75 74 69 SSTACK_MSG_OF           FCS     "Subroutine stack overflow"
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
001CEA 0F9CEA 53 75 62 72 6F 75 74 69 SSTACK_MSG_UF           FCS     "Subroutine stack underflow"
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
001D04 0F9D04 -> $1D04                SSTACK_TABS_END         EQU     *
001D04 0F9D04 -> $F9D04               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
                                      ;CPU
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001D04 0F9D04 -> $0040                ISTACK_CCR              EQU     %0100_0000
001D04 0F9D04 -> $000A                ISTACK_FRAME_SIZE       EQU     10
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001BFB 0F9BFB -> $1BFB                ISTACK_TOP              EQU     *
001BFB 0F9BFB                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
001C05 0F9C05                                                 DS      SSTACK_DEPTH
001C20 0F9C20 -> $1C20                ISTACK_BOTTOM           EQU     *
001C20 0F9C20 -> $1C20                ISTACK_VARS_END         EQU     *
001C20 0F9C20 -> $F9C20               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0014E9 0F94E9                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
0014E9 0F94E9 -> $14E9                ISTACK_OF               EQU     *
0014E9 0F94E9 MACRO                                           RESET_FATAL     ISTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
0014E9 0F94E9 CE 1D 04                                        LDX     #\1                                              (RESET_FATAL)
0014EC 0F94EC 06 1A AD                                        JOB     RESET_FATAL                                      (RESET_FATAL)
                                      ;#Handle stack underflows
0014EF 0F94EF -> $14EF                ISTACK_UF               EQU     *
0014EF 0F94EF MACRO                                           RESET_FATAL     ISTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
0014EF 0F94EF CE 1D 1C                                        LDX     #\1                                              (RESET_FATAL)
0014F2 0F94F2 06 1A AD                                        JOB     RESET_FATAL                                      (RESET_FATAL)
0014F5 0F94F5 -> $14F5                ISTACK_CODE_END         EQU     *
0014F5 0F94F5 -> $F94F5               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D04 0F9D04                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
001D04 0F9D04 49 6E 74 65 72 72 75 70 ISTACK_MSG_OF           FCS     "Interrupt stack overflow"
              74 20 73 74 61 63 6B 20 
              6F 76 65 72 66 6C 6F F7 
001D1C 0F9D1C 49 6E 74 65 72 72 75 70 ISTACK_MSG_UF           FCS     "Interrupt stack underflow"
              74 20 73 74 61 63 6B 20 
              75 6E 64 65 72 66 6C 6F 
              F7                      
001D35 0F9D35 -> $1D35                ISTACK_TABS_END         EQU     *
001D35 0F9D35 -> $F9D35               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
001D35 0F9D35 -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
001D35 0F9D35 -> $0004                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
001D35 0F9D35 -> $C480                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C20 0F9C20                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001C20 0F9C20 -> $1C20                CLOCK_VARS_END          EQU     *
001C20 0F9C20 -> $F9C20               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0014F5 0F94F5                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
0014F5 0F94F5 -> $14F5                CLOCK_ISR               EQU     *
0014F5 0F94F5 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
0014FA 0F94FA 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
0014FF 0F94FF MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0014FF 0F94FF 8F 1B FB                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001502 0F9502 25 06                                           BLO     OF                                               (ISTACK_RTI)
001504 0F9504 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001507 0F9507 22 03                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001509 0F9509 0B                                              RTI                                                      (ISTACK_RTI)
00150A 0F950A 20 DD                   OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00150C 0F950C 20 E1                   UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
00150E 0F950E -> $150E                CLOCK_CODE_END          EQU     *
00150E 0F950E -> $F950E               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D35 0F9D35                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
001D35 0F9D35 -> $1D35                CLOCK_TABS_END          EQU     *
001D35 0F9D35 -> $F9D35               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
001D35 0F9D35 -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
001D35 0F9D35 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C20 0F9C20                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
001C20 0F9C20 -> $1C20                COP_VARS_END            EQU     *
001C20 0F9C20 -> $F9C20               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00150E 0F950E                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00150E 0F950E -> $150E                COP_CODE_END            EQU     *
00150E 0F950E -> $F950E               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D35 0F9D35                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
001D35 0F9D35 -> $1D35                COP_TABS_END            EQU     *
001D35 0F9D35 -> $F9D35               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     unasigned                                                     #
                                      ;#      IC5:     BDM (capture posedges on BKGD pin)                            #
                                      ;#      IC6/OC5: BDM (capture negedges on BKGD pin/toggle BKGD pin)            #
                                      ;#      OC7:     BDM (toggle BKGD pin/timeouts)                                #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
001D35 0F9D35 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
001D35 0F9D35 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
001D35 0F9D35 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
001D35 0F9D35 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
001D35 0F9D35 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
001D35 0F9D35 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
001D35 0F9D35 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
001D35 0F9D35 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
001D35 0F9D35 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C20 0F9C20                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001C20 0F9C20 -> $1C20                TIM_VARS_END            EQU     *
001C20 0F9C20 -> $F9C20               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00150E 0F950E                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00150E 0F950E -> $150E                TIM_CODE_END            EQU     *
00150E 0F950E -> $F950E               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D35 0F9D35                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
001D35 0F9D35 -> $1D35                TIM_TABS_END            EQU     *
001D35 0F9D35 -> $F9D35               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - LED - LED Driver (Mini-BDM-Port)                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module controls the LED on the OpenBDM Pod.                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Removed sequential patterns                                          #
                                      ;#    August 7, 2012                                                           #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001D35 0F9D35 -> $0258                LED_PORT                EQU     PTP
001D35 0F9D35 -> $0080                LED_GREEN1              EQU     PTP7
001D35 0F9D35 -> $0040                LED_GREEN2              EQU     PTP6
001D35 0F9D35 -> $0020                LED_GREEN3              EQU     PTP5
001D35 0F9D35 -> $0010                LED_RED                 EQU     PTP4
001D35 0F9D35 -> $000C                LED_BICOLOR             EQU     PTP2|PTP3
001D35 0F9D35 -> $0008                LED_BICOLOR_GREEN       EQU     PTP3
001D35 0F9D35 -> $0004                LED_BICOLOR_RED         EQU     PTP2
001D35 0F9D35 -> $00FC                LED_ALL                 EQU     LED_GREEN1|LED_GREEN2|LED_GREEN3|LED_RED|LED_BICOLOR
001D35 0F9D35 -> $0020                LED_BUSY                EQU     LED_GREEN3
001D35 0F9D35 -> $0010                LED_COMERR              EQU     LED_RED
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C20 0F9C20                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
001C20 0F9C20 -> $1C20                LED_VARS_END            EQU     *
001C20 0F9C20 -> $F9C20               LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00150E 0F950E                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
00150E 0F950E -> $150E                LED_CODE_END            EQU     *
00150E 0F950E -> $F950E               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D35 0F9D35                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
001D35 0F9D35 -> $1D35                LED_TABS_END            EQU     *
001D35 0F9D35 -> $F9D35               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TVMON - Target Vdd Monitor (Mini-BDM-Pod)                        #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module monitors the target voltage on the LFMPGMR pod.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    February 13, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    August 7, 2012                                                           #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    LED - LED driver                                                         #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
001D35 0F9D35 -> $4CCC                TVMON_UPPER_THRESHOLD   EQU     (30*$FFFF)/100 ;3V
001D35 0F9D35 -> $0CCC                TVMON_LOWER_THRESHOLD   EQU      (5*$FFFF)/100 ;0.5V
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C20 0F9C20                                                 ORG     TVMON_VARS_START, TVMON_VARS_START_LIN
001C20 0F9C20 -> $1C20                TVMON_VARS_END          EQU     *
001C20 0F9C20 -> $F9C20               TVMON_VARS_END_LIN      EQU     @
                                                              ;          ^^^^^^^
                                                              ;      SC--+||||||
                                                              ;    SCAN---+|||||
                                                              ;    MULT----+||||
                                                              ;      CD-----+|||
                                                              ;      CC------+||
                                                              ;      CB-------+|
                                                              ;      CA--------+
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00150E 0F950E                                                 ORG     TVMON_CODE_START, TVMON_CODE_START_LIN
00150E 0F950E -> $150E                TVMON_ISR               EQU     *
00150E 0F950E 1E 02 CF 01 17                                  BRSET   ATDCMPHTH+$1, #$01, TVMON_ISR_1 ;target Vdd detected
                                                              ;Target Vdd missing
001513 0F9513 MACRO                                           LED_BICOLOR_RED                         ;flag missing target Vdd
                                      ;#Turn red bi-color LED on                                                       (LED_BICOLOR_RED)
001513 0F9513 1C 02 58 08                                     BSET    LED_PORT, #LED_BICOLOR_GREEN                     (LED_BICOLOR_RED)
001517 0F9517 1D 02 58 04                                     BCLR    LED_PORT, #LED_BICOLOR_RED                       (LED_BICOLOR_RED)
00151B 0F951B 1C 02 CF 01                                     BSET    ATDCMPHTL, #$01                 ;target Vdd must be higher than threshold
00151F 0F951F 18 03 4C CC 02 D0                               MOVW    #TVMON_UPPER_THRESHOLD, ATDDR0  ;set upper threshold value
001525 0F9525 79 02 50                                        CLR     PTM                             ;disable target interface
001528 0F9528 20 17                                           JOB     TVMON_ISR_2                     ;restart ADC conversion
                                                              ;Target Vdd detected
00152A 0F952A MACRO                   TVMON_ISR_1             LED_BICOLOR_GREEN                       ;flag detected target Vdd
                                      ;#Turn green bi-color LED on                                                     (LED_BICOLOR_GREEN)
00152A 0F952A 1C 02 58 04                                     BSET    LED_PORT, #LED_BICOLOR_RED                       (LED_BICOLOR_GREEN)
00152E 0F952E 1D 02 58 08                                     BCLR    LED_PORT, #LED_BICOLOR_GREEN                     (LED_BICOLOR_GREEN)
001532 0F9532 1D 02 CF 01                                     BCLR    ATDCMPHTL, #$01                 ;target Vdd must be lower than threshold
001536 0F9536 18 03 0C CC 02 D0                               MOVW    #TVMON_LOWER_THRESHOLD, ATDDR0  ;set lower threshold value
00153C 0F953C 18 0B 80 02 50                                  MOVB    #PM7, PTM                       ;enable target interface
                                                              ;Restart ATD conversions
001541 0F9541 18 0B 2B 02 C5          TVMON_ISR_2             MOVB    #%00101011, ATDCTL5
                                                              ;          ^^^^^^^
                                                              ;      SC--+||||||
                                                              ;    SCAN---+|||||
                                                              ;    MULT----+||||
                                                              ;      CD-----+|||
                                                              ;      CC------+||
                                                              ;      CB-------+|
                                                              ;      CA--------+
                                                              ;Done
001546 0F9546 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001546 0F9546 8F 1B FB                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001549 0F9549 25 06                                           BLO     OF                                               (ISTACK_RTI)
00154B 0F954B 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00154E 0F954E 22 03                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001550 0F9550 0B                                              RTI                                                      (ISTACK_RTI)
001551 0F9551 20 96                   OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
001553 0F9553 20 9A                   UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
001555 0F9555 -> $1555                TVMON_CODE_END          EQU     *
001555 0F9555 -> $F9555               TVMON_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D35 0F9D35                                                 ORG     TVMON_TABS_START, TVMON_TABS_START_LIN
001D35 0F9D35 -> $1D35                TVMON_TABS_END          EQU     *
001D35 0F9D35 -> $F9D35               TVMON_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - The bus clock must be set to 24.576MHz                                 #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - changed selection of detectable baud rates                           #
                                      ;#      - stop baud rate detection when receiving a corret character           #
                                      ;#      - stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
001D35 0F9D35 -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF reminder intervall
001D35 0F9D35 -> $1DCD                SCI_XONXOFF_REMINDER    EQU     (10*CLOCK_BUS_FREQ)/65536
                                      ;RTS/CTS pins
                                      ;Delay counter
                                      ;-------------
001D35 0F9D35 -> $0003                SCI_DLY_OC              EQU     $3              ;default is OC3
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character
                                      ;Detect SUSPEND character
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;ECT or TIM (SCI_BD_ECT or SCI_BD_TIM)
                                      ;Input capture channels
001D35 0F9D35 -> $0000                SCI_BD_ICPE             EQU     $0              ;default is IC0
001D35 0F9D35 -> $0001                SCI_BD_ICNE             EQU     $1              ;default is IC1
001D35 0F9D35 -> $0000                SCI_BD_IC               EQU     $0              ;default is IC0
                                      ;Output compare channels
                                      ;Log captured BD pulse length
001D35 0F9D35 -> $0001                SCI_BD_LOG_OFF          EQU     1               ;default is SCI_BD_LOG_OFF
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Enable error signaling (if enabled, macros SCI_ERRSIG_ON and SCI_ERRSIG_OFF must be defined)
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;.MC9S12DP25625 SCI IRQ workaround (MUCts00510)
                                      ;----------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
001D35 0F9D35 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
001D35 0F9D35 -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
001D35 0F9D35 -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
001D35 0F9D35 -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
001D35 0F9D35 -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
001D35 0F9D35 -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
001D35 0F9D35 -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
001D35 0F9D35 -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
001D35 0F9D35 -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
001D35 0F9D35 -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
001D35 0F9D35 -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
001D35 0F9D35 -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
001D35 0F9D35 -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
001D35 0F9D35 -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
001D35 0F9D35 -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
001D35 0F9D35 -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
001D35 0F9D35 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
001D35 0F9D35 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
001D35 0F9D35 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
001D35 0F9D35 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
001D35 0F9D35 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
001D35 0F9D35 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
001D35 0F9D35 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
001D35 0F9D35 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
001D35 0F9D35 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
001D35 0F9D35 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
001D35 0F9D35 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
001D35 0F9D35 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
001D35 0F9D35 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
001D35 0F9D35 -> $0007                SCI_TXBUF_MASK          EQU     $07             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
001D35 0F9D35 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
001D35 0F9D35 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
001D35 0F9D35 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
001D35 0F9D35 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
001D35 0F9D35 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
001D35 0F9D35 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
001D35 0F9D35 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
001D35 0F9D35 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup
001D35 0F9D35 -> $0001                SCI_SET_TIOS            EQU     1
001D35 0F9D35 -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
001D35 0F9D35 -> $0001                SCI_SET_TCTL3           EQU     1
001D35 0F9D35 -> $0003                SCI_BD_TCTL3_VAL        EQU     (3<<(2*SCI_BD_IC))
001D35 0F9D35 -> $0001                SCI_SET_ICSYS           EQU     1
001D35 0F9D35 -> $0001                SCI_SET_TIOS            EQU     1
001D35 0F9D35 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
                                      ;#Baud rate detection
001D35 0F9D35 -> $0008                SCI_BD_RECOVCNT_INIT    EQU     8
001D35 0F9D35 -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C20 0F9C20                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001C20 0F9C20 -> $1C20                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
001C20 0F9C20                                                 ALIGN   1
                                      ;#Receive buffer
001C20 0F9C20                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
001C40 0F9C40                         SCI_RXBUF_IN            DS      1               ;points to the next free space
001C41 0F9C41                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
001C42 0F9C42                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
001C4A 0F9C4A                         SCI_TXBUF_IN            DS      1               ;points to the next free space
001C4B 0F9C4B                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
001C4C 0F9C4C                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
001C4E 0F9C4E                         SCI_AUTO_LOC2           DS      1               ;2nd auto-place location
001C4F 0F9C4F                                                 UNALIGN 1
                                      ;#Flags
001C4F 0F9C4F -> $1C4E                SCI_FLGS                EQU     ((SCI_VARS_START&1)*SCI_AUTO_LOC1)+((~SCI_VARS_START&1)*SCI_AUTO_LOC2)
001C4F 0F9C4F                                                 UNALIGN (~SCI_AUTO_LOC1&1)
                                      ;#XON/XOFF reminder count
001C4F 0F9C4F                         SCI_XONXOFF_REMCNT      DS      2               ;counter for XON/XOFF reminder
                                      ;#Baud rate detection registers
                                      ;SCI_BD_RECOVCNT        DS      1               ;recover counter
001C51 0F9C51                         SCI_BD_LIST             DS      1               ;list of potential baud rates
                                      ;#BD log buffer
001C52 0F9C52 -> $1C52                SCI_VARS_END            EQU     *
001C52 0F9C52 -> $F9C52               SCI_VARS_END_LIN        EQU     @
                                      ;Clear BD pulse log
                                      ; args:   none
                                      ; SSTACK: none
                                      ;         X, and Y are preserved
                                      ;Log BD pulse length
                                      ; args: X: pulse length
                                      ;       Y: search tree pointer
                                      ; SSTACK: none
                                      ;         X, and Y are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001555 0F9555                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
001555 0F9555 -> $1555                SCI_TX_NB               EQU     *
                                                              ;Save registers (data in B)
001555 0F9555 35                                              PSHY
001556 0F9556 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
001557 0F9557 CD 1C 42                                        LDY     #SCI_TXBUF
00155A 0F955A B6 1C 4A                                        LDAA    SCI_TXBUF_IN
00155D 0F955D 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
00155F 0F955F 42                                              INCA                                            ;increment index
001560 0F9560 84 07                                           ANDA    #SCI_TXBUF_MASK
001562 0F9562 B1 1C 4B                                        CMPA    SCI_TXBUF_OUT
001565 0F9565 27 1B                                           BEQ     SCI_TX_NB_1                             ;buffer is full
                                                              ;Update buffer
001567 0F9567 7A 1C 4A                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
00156A 0F956A 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
00156F 0F956F MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00156F 0F956F 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001572 0F9572 18 25 FF 67                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001576 0F9576 8F 1C 1B                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001579 0F9579 18 22 FF 66                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00157D 0F957D -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00157D 0F957D -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00157D 0F957D 32                                              PULA
00157E 0F957E 31                                              PULY
                                                              ;Signal success
00157F 0F957F 14 01                                           SEC
                                                              ;Done
001581 0F9581 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
001582 0F9582 MACRO                   SCI_TX_NB_1             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001582 0F9582 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001585 0F9585 18 25 FF 54                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001589 0F9589 8F 1C 1B                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00158C 0F958C 18 22 FF 53                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001590 0F9590 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001590 0F9590 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001590 0F9590 32                                              PULA
001591 0F9591 31                                              PULY
                                                              ;Signal failure
001592 0F9592 10 FE                                           CLC
                                                              ;Done
001594 0F9594 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
001595 0F9595 -> $1595                SCI_TX_BL               EQU     *
001595 0F9595 MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001595 0F9595 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001597 0F9597                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001597 0F9597 07 BC                                           JOBSR   \1                                               (SCI_MAKE_BL)
001599 0F9599 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00159B 0F959B 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00159D 0F959D MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00159D 0F959D 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0015A0 0F95A0 18 25 FF 39                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0015A4 0F95A4 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0015A7 0F95A7 18 22 FF 38                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
0015AB 0F95AB -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
0015AB 0F95AB -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
0015AB 0F95AB 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0015AC 0F95AC MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0015AC 0F95AC 8F 1C 05                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0015AF 0F95AF 18 25 FF 36                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0015B3 0F95B3 8F 1C 20                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0015B6 0F95B6 18 22 FF 35                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0015BA 0F95BA MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; 10^24 oscillator cyles timeout =2.44s (CR2|CR1|CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0015BA 0F95BA 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0015BF 0F95BF 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0015C4 0F95C4 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0015C6 0F95C6 -> $14E9                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0015C6 0F95C6 -> $14EF                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0015C6 0F95C6 -> $15C6                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0015C6 0F95C6 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0015C6 0F95C6 8F 1C 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0015C9 0F95C9 18 25 FF 10                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0015CD 0F95CD 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0015D0 0F95D0 18 22 FF 0F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0015D4 0F95D4 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
0015D4 0F95D4 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
0015D4 0F95D4 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissionsare complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
0015D6 0F95D6 -> $15D6                SCI_TX_DONE_NB          EQU     *
                                                              ;Save registers
0015D6 0F95D6 3B                                              PSHD
                                                              ;Check TX queue
0015D7 0F95D7 FC 1C 4A                                        LDD     SCI_TXBUF_IN
0015DA 0F95DA 18 17                                           CBA
0015DC 0F95DC 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
0015DE 0F95DE 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2 ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
0015E2 0F95E2 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0015E2 0F95E2 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0015E5 0F95E5 18 25 FE F4                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0015E9 0F95E9 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0015EC 0F95EC 18 22 FE F3                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0015F0 0F95F0 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
0015F0 0F95F0 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
0015F0 0F95F0 3A                                              PULD
                                                              ;Signal failure
0015F1 0F95F1 10 FE                                           CLC
                                                              ;Done
0015F3 0F95F3 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
0015F4 0F95F4 MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0015F4 0F95F4 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0015F7 0F95F7 18 25 FE E2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0015FB 0F95FB 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0015FE 0F95FE 18 22 FE E1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001602 0F9602 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001602 0F9602 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001602 0F9602 3A                                              PULD
                                                              ;Signal failure
001603 0F9603 14 01                                           SEC
                                                              ;Done
001605 0F9605 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
001606 0F9606 -> $1606                SCI_TX_DONE_BL          EQU     *
001606 0F9606 MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001606 0F9606 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001608 0F9608                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001608 0F9608 07 CC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00160A 0F960A 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00160C 0F960C 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00160E 0F960E MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00160E 0F960E 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001611 0F9611 18 25 FE C8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001615 0F9615 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001618 0F9618 18 22 FE C7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00161C 0F961C -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00161C 0F961C -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00161C 0F961C 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00161D 0F961D MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00161D 0F961D 8F 1C 05                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001620 0F9620 18 25 FE C5                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001624 0F9624 8F 1C 20                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001627 0F9627 18 22 FE C4                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00162B 0F962B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; 10^24 oscillator cyles timeout =2.44s (CR2|CR1|CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00162B 0F962B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001630 0F9630 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001635 0F9635 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001637 0F9637 -> $14E9                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
001637 0F9637 -> $14EF                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
001637 0F9637 -> $1637                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001637 0F9637 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001637 0F9637 8F 1C 09                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00163A 0F963A 18 25 FE 9F                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00163E 0F963E 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
001641 0F9641 18 22 FE 9E                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
001645 0F9645 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
001645 0F9645 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
001645 0F9645 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
001647 0F9647 -> $1647                SCI_TX_READY_NB         EQU     *
                                                              ;Save registers
001647 0F9647 3B                                              PSHD
                                                              ;Check if there is room for this entry
001648 0F9648 FC 1C 4A                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
00164B 0F964B 42                                              INCA
00164C 0F964C 84 07                                           ANDA    #SCI_TXBUF_MASK
00164E 0F964E B1 1C 4B                                        CMPA    SCI_TXBUF_OUT
001651 0F9651 27 12                                           BEQ     SCI_TX_READY_NB_1                               ;buffer is full
                                                              ;Restore registers
001653 0F9653 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001653 0F9653 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001656 0F9656 18 25 FE 83                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00165A 0F965A 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00165D 0F965D 18 22 FE 82                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001661 0F9661 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001661 0F9661 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001661 0F9661 3A                                              PULD
                                                              ;Done
001662 0F9662 14 01                                           SEC
001664 0F9664 3D                                              RTS
                                                              ;TX buffer is full
001665 0F9665 MACRO                   SCI_TX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001665 0F9665 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001668 0F9668 18 25 FE 71                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00166C 0F966C 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00166F 0F966F 18 22 FE 70                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001673 0F9673 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001673 0F9673 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001673 0F9673 3A                                              PULD
                                                              ;Done
001674 0F9674 10 FE                                           CLC
001676 0F9676 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
001677 0F9677 -> $1677                SCI_TX_READY_BL         EQU     *
001677 0F9677 MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001677 0F9677 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001679 0F9679                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001679 0F9679 07 CC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00167B 0F967B 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00167D 0F967D 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00167F 0F967F MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00167F 0F967F 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001682 0F9682 18 25 FE 57                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001686 0F9686 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001689 0F9689 18 22 FE 56                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00168D 0F968D -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00168D 0F968D -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00168D 0F968D 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00168E 0F968E MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00168E 0F968E 8F 1C 05                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001691 0F9691 18 25 FE 54                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001695 0F9695 8F 1C 20                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001698 0F9698 18 22 FE 53                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00169C 0F969C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; 10^24 oscillator cyles timeout =2.44s (CR2|CR1|CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00169C 0F969C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0016A1 0F96A1 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0016A6 0F96A6 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0016A8 0F96A8 -> $14E9                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0016A8 0F96A8 -> $14EF                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0016A8 0F96A8 -> $16A8                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0016A8 0F96A8 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0016A8 0F96A8 8F 1C 09                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0016AB 0F96AB 18 25 FE 2E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0016AF 0F96AF 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0016B2 0F96B2 18 22 FE 2D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0016B6 0F96B6 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
0016B6 0F96B6 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
0016B6 0F96B6 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
0016B8 0F96B8 -> $16B8                SCI_RX_NB               EQU     *
                                                              ;Save registers
0016B8 0F96B8 34                                              PSHX
                                                              ;Check if there is data in the RX queue
0016B9 0F96B9 FC 1C 40                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
0016BC 0F96BC 18 16                                           SBA                                             ;A=in-out
0016BE 0F96BE 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
0016C0 0F96C0 84 1F                                           ANDA    #SCI_RXBUF_MASK
0016C2 0F96C2 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
0016C4 0F96C4 27 32                                           BEQ     SCI_RX_NB_3                             ;unblock flow control
                                                              ;Pull entry from the RX queue (out-index in B)
0016C6 0F96C6 CE 1C 20                SCI_RX_NB_1             LDX     #SCI_RXBUF
0016C9 0F96C9 EE E5                                           LDX     B,X
0016CB 0F96CB CB 02                                           ADDB    #$02                                    ;increment out pointer
0016CD 0F96CD C4 1F                                           ANDB    #SCI_RXBUF_MASK
0016CF 0F96CF 7B 1C 41                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
0016D2 0F96D2 B7 54                                           TFR     X, D
                                                              ;Restore registers
0016D4 0F96D4 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0016D4 0F96D4 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0016D7 0F96D7 18 25 FE 02                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0016DB 0F96DB 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0016DE 0F96DE 18 22 FE 01                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0016E2 0F96E2 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
0016E2 0F96E2 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
0016E2 0F96E2 30                                              PULX
                                                              ;Done
0016E3 0F96E3 14 01                                           SEC
0016E5 0F96E5 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
0016E6 0F96E6 MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0016E6 0F96E6 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0016E9 0F96E9 18 25 FD F0                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0016ED 0F96ED 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0016F0 0F96F0 18 22 FD EF                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0016F4 0F96F4 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
0016F4 0F96F4 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
0016F4 0F96F4 30                                              PULX
                                                              ;Done
0016F5 0F96F5 10 FE                                           CLC
0016F7 0F96F7 3D                                              RTS
                                                              ;Unblock flow control (out-index in B, CCR in X)
0016F8 0F96F8 -> $16F8                SCI_RX_NB_3             EQU     *
0016F8 0F96F8 MACRO                                           SCI_ASSERT_CTS
0016F8 0F96F8 MACRO                                           SCI_SEND_XONXOFF
                                      ;#Assert CTS (allow incoming data)                                               (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
0016F8 0F96F8 1C 1C 4E 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
0016FC 0F96FC 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
001701 0F9701 20 C3                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
001703 0F9703 -> $1703                SCI_RX_BL               EQU     *
001703 0F9703 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001703 0F9703 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001705 0F9705                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001705 0F9705 07 B1                                           JOBSR   \1                                               (SCI_MAKE_BL)
001707 0F9707 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001709 0F9709 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00170B 0F970B MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00170B 0F970B 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00170E 0F970E 18 25 FD CB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001712 0F9712 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001715 0F9715 18 22 FD CA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001719 0F9719 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
001719 0F9719 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
001719 0F9719 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00171A 0F971A MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00171A 0F971A 8F 1C 05                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00171D 0F971D 18 25 FD C8                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001721 0F9721 8F 1C 20                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001724 0F9724 18 22 FD C7                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001728 0F9728 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; 10^24 oscillator cyles timeout =2.44s (CR2|CR1|CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001728 0F9728 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00172D 0F972D 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001732 0F9732 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001734 0F9734 -> $14E9                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
001734 0F9734 -> $14EF                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
001734 0F9734 -> $1734                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001734 0F9734 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001734 0F9734 8F 1C 09                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
001737 0F9737 18 25 FD A2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00173B 0F973B 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00173E 0F973E 18 22 FD A1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
001742 0F9742 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
001742 0F9742 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
001742 0F9742 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
001744 0F9744 -> $1744                SCI_RX_READY_NB         EQU     *
                                                              ;Save registers
001744 0F9744 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
001745 0F9745 FC 1C 40                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
001748 0F9748 18 17                                           CBA
00174A 0F974A 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
00174C 0F974C MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00174C 0F974C 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00174F 0F974F 18 25 FD 8A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001753 0F9753 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001756 0F9756 18 22 FD 89                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00175A 0F975A -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00175A 0F975A -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00175A 0F975A 3A                                              PULD
                                                              ;Done
00175B 0F975B 14 01                                           SEC
00175D 0F975D 3D                                              RTS
                                                              ;RX buffer is empty
00175E 0F975E MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00175E 0F975E 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001761 0F9761 18 25 FD 78                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001765 0F9765 8F 1C 1C                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001768 0F9768 18 22 FD 77                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00176C 0F976C -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00176C 0F976C -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00176C 0F976C 3A                                              PULD
                                                              ;Done
00176D 0F976D 10 FE                                           CLC
00176F 0F976F 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
001770 0F9770 -> $1770                SCI_RX_READY_BL         EQU     *
001770 0F9770 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001770 0F9770 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001772 0F9772                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001772 0F9772 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
001774 0F9774 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001776 0F9776 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001778 0F9778 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001778 0F9778 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00177B 0F977B 18 25 FD 5E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00177F 0F977F 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001782 0F9782 18 22 FD 5D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
001786 0F9786 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
001786 0F9786 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
001786 0F9786 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001787 0F9787 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001787 0F9787 8F 1C 05                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00178A 0F978A 18 25 FD 5B                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00178E 0F978E 8F 1C 20                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001791 0F9791 18 22 FD 5A                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001795 0F9795 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; 10^24 oscillator cyles timeout =2.44s (CR2|CR1|CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001795 0F9795 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00179A 0F979A 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00179F 0F979F 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0017A1 0F97A1 -> $14E9                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0017A1 0F97A1 -> $14EF                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
0017A1 0F97A1 -> $17A1                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0017A1 0F97A1 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0017A1 0F97A1 8F 1C 09                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0017A4 0F97A4 18 25 FD 35                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0017A8 0F97A8 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0017AB 0F97AB 18 22 FD 34                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
0017AF 0F97AF -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
0017AF 0F97AF -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
0017AF 0F97AF 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0017B1 0F97B1 -> $17B1                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
0017B1 0F97B1 35                                              PSHY                                    ;push Y onto the SSTACK
0017B2 0F97B2 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
0017B3 0F97B3 5C C8                                           STD     SCIBDH                          ;set baud rate
0017B5 0F97B5 CD 0C CC                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
0017B8 0F97B8 13                                              EMUL                                    ;D*Y -> Y:D
0017B9 0F97B9 7C 1C 4C                                        STD     SCI_BVAL
                                                              ;Clear input buffer
0017BC 0F97BC 18 03 00 00 1C 40                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
0017C2 0F97C2 MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0017C2 0F97C2 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0017C5 0F97C5 18 25 FD 14                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0017C9 0F97C9 8F 1C 1A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
0017CC 0F97CC 18 22 FD 13                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
0017D0 0F97D0 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
0017D0 0F97D0 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
0017D0 0F97D0 3A                                              PULD                                    ;pull D from the SSTACK
0017D1 0F97D1 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
0017D2 0F97D2 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTL polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
0017D3 0F97D3 -> $17D3                SCI_ISR_DELAY           EQU     *
0017D3 0F97D3 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Check XON/XOFF reminder count (retrigger request in C-flag)
0017D5 0F97D5 FC 1C 4F                                        LDD     SCI_XONXOFF_REMCNT
0017D8 0F97D8 27 13                                           BEQ     SCI_ISR_DELAY_5                                         ;XON/XOFF reminder disabled
0017DA 0F97DA 04 24 0B                                        DBNE    D, SCI_ISR_DELAY_3                                      ;don't send XON/XOFF yet
0017DD 0F97DD 1C 1C 4E 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF                         ;request XON/XOFF reminder
0017E1 0F97E1 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
0017E6 0F97E6 20 02                                           JOB     SCI_ISR_DELAY_4
0017E8 0F97E8 -> $17E8                SCI_ISR_DELAY_3         EQU     *
0017E8 0F97E8 14 01                                           SEC                                                             ;retrigger
0017EA 0F97EA 7C 1C 4F                SCI_ISR_DELAY_4         STD     SCI_XONXOFF_REMCNT
0017ED 0F97ED -> $17ED                SCI_ISR_DELAY_5         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
0017ED 0F97ED 24 23                                           BCC     SCI_ISR_DELAY_7
0017EF 0F97EF MACRO                                           SCI_RESET_DELAY
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
0017EF 0F97EF MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
0017EF 0F97EF MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0017EF 0F97EF 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0017F4 0F97F4 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
0017F6 0F97F6 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
0017F9 0F97F9 B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
0017FB 0F97FB C7                                              CLRB                                                     (SCI_RESET_DELAY)
0017FC 0F97FC MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
0017FC 0F97FC 49                                              LSRD                                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
0017FD 0F97FD D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
0017FF 0F97FF 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
001801 0F9801 -> $1801                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
001801 0F9801 MACRO                   SCI_ISR_DELAY_6         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001801 0F9801 8F 1B FB                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001804 0F9804 25 06                                           BLO     OF                                               (ISTACK_RTI)
001806 0F9806 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001809 0F9809 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00180B 0F980B 0B                                              RTI                                                      (ISTACK_RTI)
00180C 0F980C 06 14 E9                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00180F 0F980F 06 14 EF                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
001812 0F9812 MACRO                   SCI_ISR_DELAY_7         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
001812 0F9812 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
001812 0F9812 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001812 0F9812 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001815 0F9815 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001817 0F9817 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00181A 0F981A -> $181A                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00181A 0F981A -> $181A                                        EQU     *                                                (SCI_STOP_DELAY)
00181A 0F981A 20 E5                                           JOB     SCI_ISR_DELAY_6
                                                              ;#Transmit ISR (status flags in A)
00181C 0F981C -> $181C                SCI_ISR_TX              EQU     *
00181C 0F981C 85 80                                           BITA    #TDRE                                   ;check if SCI is ready for new TX data
00181E 0F981E 27 54                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Don't escape any XON/XOFF symbol
001820 0F9820 1E 1C 4E 02 1D                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_1 ;Don't escape any XON/XOFF symbols
                                                              ;Transmit XON/XOFF symbols
001825 0F9825 1F 1C 4E 80 18                                  BRCLR   SCI_FLGS, #SCI_FLG_SEND_XONXOFF, SCI_ISR_TX_1 ;XON/XOFF not requested
                                                              ;Clear XON/XOFF request
00182A 0F982A 1D 1C 4E 80                                     BCLR    SCI_FLGS, #SCI_FLG_SEND_XONXOFF
                                                              ;Check RX queue
00182E 0F982E FC 1C 40                                        LDD     SCI_RXBUF_IN
001831 0F9831 18 16                                           SBA
001833 0F9833 84 1F                                           ANDA    #SCI_RXBUF_MASK
                                                              ;Check XOFF theshold
001835 0F9835 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
001837 0F9837 24 53                                           BHS     <SCI_ISR_TX_6                           ;transmit XOFF
                                                              ;Check XON theshold
001839 0F9839 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
00183B 0F983B 23 48                                           BLS     <SCI_ISR_TX_5                           ;transmit XON
                                                              ;Check XOFF status
00183D 0F983D 1E 1C 4E 08 28                                  BRSET   SCI_FLGS, #SCI_FLG_TX_BLOCKED, SCI_ISR_TX_3 ;stop transmitting
                                                              ;Check TX buffer
001842 0F9842 FC 1C 4A                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
001845 0F9845 18 17                                           CBA
001847 0F9847 27 21                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
001849 0F9849 CD 1C 42                                        LDY     #SCI_TXBUF
                                                              ;Check for DLE
00184C 0F984C 1D 1C 4E 02                                     BCLR    SCI_FLGS, #SCI_FLG_TX_ESC
001850 0F9850 B7 45                                           TFR     D, X
001852 0F9852 E6 ED                                           LDAB    B,Y
001854 0F9854 C1 10                                           CMPB    #SCI_DLE
001856 0F9856 26 04                                           BNE     SCI_ISR_TX_2
001858 0F9858 1C 1C 4E 02                                     BSET    SCI_FLGS, #SCI_FLG_TX_ESC
00185C 0F985C 5B CF                   SCI_ISR_TX_2            STAB    SCIDRL
00185E 0F985E B7 54                                           TFR     X, D
                                                              ;Increment index
001860 0F9860 52                                              INCB
001861 0F9861 C4 07                                           ANDB    #SCI_TXBUF_MASK
001863 0F9863 7B 1C 4B                                        STAB    SCI_TXBUF_OUT
001866 0F9866 18 17                                           CBA
001868 0F9868 26 0A                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
00186A 0F986A -> $186A                SCI_ISR_TX_3            EQU     *
00186A 0F986A 1E 1C 4E 02 05                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_4 ;consider pending XON/XOFF symbols
00186F 0F986F 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
001874 0F9874 MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001874 0F9874 8F 1B FB                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001877 0F9877 25 06                                           BLO     OF                                               (ISTACK_RTI)
001879 0F9879 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00187C 0F987C 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00187E 0F987E 0B                                              RTI                                                      (ISTACK_RTI)
00187F 0F987F 06 14 E9                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
001882 0F9882 06 14 EF                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;Transmit XON
001885 0F9885 18 0B 11 00 CF          SCI_ISR_TX_5            MOVB    #SCI_XON, SCIDRL
00188A 0F988A 20 05                                           JOB     SCI_ISR_TX_7                            ;schedule reminder
                                                              ;Transmit XOFF
00188C 0F988C 18 0B 13 00 CF          SCI_ISR_TX_6            MOVB    #SCI_XOFF, SCIDRL
                                                              ;Schedule reminder
001891 0F9891 18 03 1D CD 1C 4F       SCI_ISR_TX_7            MOVW    #SCI_XONXOFF_REMINDER, SCI_XONXOFF_REMCNT
001897 0F9897 MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (approx. 2 SCI frames)                                             (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
001897 0F9897 4E 4C 08 1F                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
00189B 0F989B MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY)
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY)
00189B 0F989B MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
00189B 0F989B MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00189B 0F989B 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0018A0 0F98A0 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_RESET_DELAY)
0018A2 0F98A2 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_RESET_DELAY)
0018A5 0F98A5 B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_RESET_DELAY)
0018A7 0F98A7 C7                                              CLRB                                                     (SCI_START_DELAY/SCI_RESET_DELAY)
0018A8 0F98A8 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0018A8 0F98A8 49                                              LSRD                                                     (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0018A9 0F98A9 D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0018AB 0F98AB 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0018AD 0F98AD -> $18AD                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_RESET_DELAY)
0018AD 0F98AD MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN)
0018AD 0F98AD MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/TIM_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0018AD 0F98AD 18 0B 08 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0018B2 0F98B2 4C 4C 08                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0018B5 0F98B5 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
0018BA 0F98BA -> $18BA                DONE                    EQU     *                                                (SCI_START_DELAY)
0018BA 0F98BA 20 B8                                           JOB     SCI_ISR_TX_4                            ;done
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
0018BC 0F98BC -> $18BC                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
0018BC 0F98BC 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
0018BE 0F98BE 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
0018C0 0F98C0 18 27 FF 58                                     BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
0018C4 0F98C4 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
0018C6 0F98C6 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
0018C8 0F98C8 1F 1C 4E 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
0018CD 0F98CD 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
0018CF 0F98CF 1D 1C 4E 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
0018D3 0F98D3 -> $18D3                SCI_ISR_RX_1            EQU     *
                                                              ;Check for RX errors (status flags in A, RX data in B)
0018D3 0F98D3 85 07                                           BITA    #(NF|FE|PF)                             ;check for: noise, frame errors, parity errors
0018D5 0F98D5 26 46                                           BNE     <SCI_ISR_RX_8                           ;RX error detected (skip special caracter detection)
                                                              ;No RX error detected (status flags in A, RX data in B)
                                      ;                       DEC     SCI_BD_RECOVCNT                         ;decrement recovery count if >$00
                                      ;                       BCS     <SCI_ISR_RX_2                           ;keep recovery count at $00
                                      ;                       BNE     <SCI_ISR_RX_3                           ;baud rate detection is ongoing
                                      ;                       ;Auto-recover from baud rate detection (status flags in A, RX data in B)
                                      ;                       SCI_ERRSIG_OFF                                  ;clear error signal
                                      ;                       SCI_STOP_BD                                     ;disable baud rate detection
                                      ;SCI_ISR_RX_2           EQU     *-6
                                                              ;Check for control characters (status flags in A, RX data in B)
0018D7 0F98D7 -> $18D7                SCI_ISR_RX_3            EQU     *
0018D7 0F98D7 1E 1C 4E 04 04                                  BRSET   SCI_FLGS, #SCI_FLG_RX_ESC, SCI_ISR_RX_4 ;charakter is escaped (skip detection)
0018DC 0F98DC C1 1A                                           CMPB    #SCI_SUSPEND
                                                              ;BLE    <SCI_ISR_RX_11                          ;determine control signal
0018DE 0F98DE 2F 79                                           BLE     SCI_ISR_RX_11                           ;determine control signal
0018E0 0F98E0 1D 1C 4E 04             SCI_ISR_RX_4            BCLR    SCI_FLGS, #SCI_FLG_RX_ESC               ;clear escape marker
                                                              ;Place data into RX queue (status flags in A, RX data in B)
0018E4 0F98E4 B7 46                   SCI_ISR_RX_5            TFR     D, Y                                    ;flags:data -> Y
0018E6 0F98E6 CE 1C 20                                        LDX     #SCI_RXBUF
0018E9 0F98E9 FC 1C 40                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
0018EC 0F98EC 6D E4                                           STY     A,X
0018EE 0F98EE 8B 02                                           ADDA    #2
0018F0 0F98F0 84 1F                                           ANDA    #SCI_RXBUF_MASK
0018F2 0F98F2 18 17                                           CBA
0018F4 0F98F4 27 52                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
0018F6 0F98F6 7A 1C 40                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check flow control threshold (in:out in D)
0018F9 0F98F9 18 16                                           SBA
0018FB 0F98FB 84 1F                                           ANDA    #SCI_RXBUF_MASK
0018FD 0F98FD 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
0018FF 0F98FF 24 4D                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
001901 0F9901 -> $1901                SCI_ISR_RX_6            EQU     *
                                                              ;Delay reminder in case it is running
001901 0F9901 FC 1C 4F                                        LDD     SCI_XONXOFF_REMCNT
001904 0F9904 27 06                                           BEQ     SCI_ISR_RX_7                            ;done
001906 0F9906 18 03 1D CD 1C 4F                               MOVW    #SCI_XONXOFF_REMINDER, SCI_XONXOFF_REMCNT
00190C 0F990C -> $190C                SCI_ISR_RX_7            EQU     *
                                                              ;Done
00190C 0F990C MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00190C 0F990C 8F 1B FB                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00190F 0F990F 25 06                                           BLO     OF                                               (ISTACK_RTI)
001911 0F9911 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001914 0F9914 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001916 0F9916 0B                                              RTI                                                      (ISTACK_RTI)
001917 0F9917 06 14 E9                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00191A 0F991A 06 14 EF                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;RX error detected (status flags in A, RX data in B)
00191D 0F991D MACRO                   SCI_ISR_RX_8            SCI_ERRSIG_ON
                                      ;#Turn on error signaling                                                        (SCI_ERRSIG_ON)
                                      ; args:   none                                                                   (SCI_ERRSIG_ON)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_ON)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_ON)
00191D 0F991D MACRO                                           LED_COMERR_ON                                            (SCI_ERRSIG_ON)
                                      ;#Start signaling communication error                                            (SCI_ERRSIG_ON/LED_COMERR_ON)
00191D 0F991D 1D 02 58 10                                     BCLR    LED_PORT, #LED_COMERR                            (SCI_ERRSIG_ON/LED_COMERR_ON)
001921 0F9921 MACRO                                           SCI_START_BD
                                      ;Start baud rate detection (I-bit must be set)                                   (SCI_START_BD)
                                      ; args:   none                                                                   (SCI_START_BD)
                                      ; SSTACK: none                                                                   (SCI_START_BD)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD)
001921 0F9921 F7 1C 51                                        TST     SCI_BD_LIST                                      (SCI_START_BD)
001924 0F9924 26 20                                           BNE     DONE                                    ;baud rate detection is already running (SCI_START_BD)
                                                              ;Clear BD log                                            (SCI_START_BD)
001926 0F9926 MACRO                                           SCI_BD_CLEAR_LOG                                         (SCI_START_BD)
                                                              ;Enable timer                                            (SCI_START_BD)
001926 0F9926 MACRO                                           TIM_MULT_EN     (1<<SCI_BD_IC)                           (SCI_START_BD)
                                                              ;TTOV                                                    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_BD/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_BD/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_BD/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_BD/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_BD/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_BD/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_BD/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_BD/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_BD/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_BD/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_BD/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_BD/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_BD/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_BD/TIM_MULT_EN)
001926 0F9926 18 0B 01 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_BD/TIM_MULT_EN)
00192B 0F992B 4C 4C 01                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_BD/TIM_MULT_EN)
00192E 0F992E 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_BD/TIM_MULT_EN)
                                                              ;Make sure that the timeout bit is set                   (SCI_START_BD)
001933 0F9933 4E 4E 04 07                                     BRSET   TFLG1, #(1<<SCI_BD_OC), SKIP                     (SCI_START_BD)
                                                              ;SEI                                                     (SCI_START_BD)
001937 0F9937 MACRO                                           TIM_SET_DLY_IMM SCI_BD_OC, 6                             (SCI_START_BD)
                                      ;#Setup timer delay                                                              (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ; args: 1: channel number                                                        (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ;       2: delay (in bus cycles)                                                 (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ; SSTACK: none                                                                   (SCI_START_BD/TIM_SET_DLY_IMM)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/TIM_SET_DLY_IMM)
001937 0F9937 CC 00 03                                        LDD     #(\2>>1)                                         (SCI_START_BD/TIM_SET_DLY_IMM)
00193A 0F993A D3 44                                           ADDD    TCNT            ;RPO                             (SCI_START_BD/TIM_SET_DLY_IMM)
00193C 0F993C 5C 54                                           STD     (TC0+(2*\1))    ;PWO                             (SCI_START_BD/TIM_SET_DLY_IMM)
                                                              ;CLI                                                     (SCI_START_BD)
00193E 0F993E -> $193E                SKIP                    EQU     *                                                (SCI_START_BD)
                                                              ;Reset baud rate list and recover counter                (SCI_START_BD)
00193E 0F993E 18 0B FF 1C 51                                  MOVB    #SCI_BD_LIST_INIT, SCI_BD_LIST                   (SCI_START_BD)
                                                              ;Start edge detection                                    (SCI_START_BD)
001943 0F9943 MACRO                                           SCI_BD_START_EDGE_DETECT                                 (SCI_START_BD)
                                      ;Start edge detection                                                            (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;start edge detection (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
001943 0F9943 4C 4B 03                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_START_BD/SCI_BD_START_EDGE_DETECT)
                                      ;DONE                   MOVB    #SCI_BD_RECOVCNT_INIT, SCI_BD_RECOVCNT           (SCI_START_BD)
001946 0F9946 -> $1946                DONE                    EQU     *                                                (SCI_START_BD)
001946 0F9946 20 98                                           JOB     SCI_ISR_RX_4                            ;queue RX data
                                                              ;Buffer overflow
001948 0F9948 1C 1C 4E 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
00194C 0F994C 20 B3                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;RX buffer is getting full
00194E 0F994E MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
00194E 0F994E MACRO                                           SCI_SEND_XONXOFF
                                      ;#Assert CTS (allow incoming data)                                               (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
00194E 0F994E 1C 1C 4E 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
001952 0F9952 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
001957 0F9957 20 A8                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;Determine control signal (status flags in A, RX data in B)
001959 0F9959 -> $1959                SCI_ISR_RX_11           EQU     *
                                                              ;Check for XON/XOFF (status flags in A, RX data in B)
001959 0F9959 C1 13                                           CMPB    #SCI_XOFF
00195B 0F995B 26 06                                           BNE     <SCI_ISR_RX_12                          ;determine control signal
00195D 0F995D 1C 1C 4E 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_BLOCKED
001961 0F9961 20 9E                                           JOB     SCI_ISR_RX_6                            ;done
001963 0F9963 C1 11                   SCI_ISR_RX_12           CMPB    #SCI_XON
001965 0F9965 26 0B                                           BNE     <SCI_ISR_RX_13                          ;determine control signal
001967 0F9967 1D 1C 4E 08                                     BCLR    SCI_FLGS, #SCI_FLG_TX_BLOCKED           ;clear TX block
00196B 0F996B 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupt
001970 0F9970 20 8F                                           JOB     SCI_ISR_RX_6                            ;done
001972 0F9972 -> $1972                SCI_ISR_RX_13           EQU     *
                                                              ;Check for SUSPEND (status flags in A, RX data in B)
001972 0F9972 C1 1A                                           CMPB    #SCI_SUSPEND
001974 0F9974 26 06                                           BNE     <SCI_ISR_RX_14                          ;determine control signal
001976 0F9976 MACRO                                           SCI_SUSPEND_ACTION
                                      ;Suspend handler                                                                 (SCI_SUSPEND_ACTION)
001976 0F9976 MACRO                                           LED_BUSY_OFF                                             (SCI_SUSPEND_ACTION)
                                      ;#Stop busy signal                                                               (SCI_SUSPEND_ACTION/LED_BUSY_OFF)
001976 0F9976 1C 02 58 20                                     BSET    LED_PORT, #LED_BUSY                              (SCI_SUSPEND_ACTION/LED_BUSY_OFF)
00197A 0F997A 20 85                                           JOB     SCI_ISR_RX_6                            ;done
00197C 0F997C -> $197C                SCI_ISR_RX_14           EQU     *
                                                              ;Check for BREAK (status flags in A, RX data in B)
00197C 0F997C C1 03                                           CMPB    #SCI_BREAK
00197E 0F997E 26 04                                           BNE     <SCI_ISR_RX_15                          ;determine control signal
001980 0F9980 MACRO                                           SCI_BREAK_ACTION
                                      ;############################################################################### (SCI_BREAK_ACTION)
                                      ;# Macros                                                                      # (SCI_BREAK_ACTION)
                                      ;############################################################################### (SCI_BREAK_ACTION)
                                      ;Break handler                                                                   (SCI_BREAK_ACTION)
001980 0F9980 MACRO                                           LED_BUSY_ON                                              (SCI_BREAK_ACTION)
                                      ;#Start busy signal                                                              (SCI_BREAK_ACTION/LED_BUSY_ON)
001980 0F9980 1D 02 58 20                                     BCLR    LED_PORT, #LED_BUSY                              (SCI_BREAK_ACTION/LED_BUSY_ON)
001984 0F9984 C1 10                   SCI_ISR_RX_15           CMPB    #SCI_DLE
001986 0F9986 26 04                                           BNE     <SCI_ISR_RX_16                          ;done
001988 0F9988 1C 1C 4E 04                                     BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;set escape marker
00198C 0F998C 06 19 01                SCI_ISR_RX_16           JOB     SCI_ISR_RX_6                            ;done
                                      ;#Edge on RX pin captured (default IC0)
00198F 0F998F -> $198F                SCI_ISR_BD_NEPE         EQU     *
                                                              ;Clear IC interrupt
00198F 0F998F MACRO                                           TIM_CLRIF       SCI_BD_IC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00198F 0F998F MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00198F 0F998F 18 0B 01 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
001994 0F9994 DE 50                                           LDX     (TC0+(2*SCI_BD_IC))                     ;capture current edge (posedge)
001996 0F9996 DD 78                                           LDY     (TC0H+(2*SCI_BD_IC))                    ;capture previous edge (posedge)
001998 0F9998 D6 67                                           LDAB    MCFLG                                   ;capture polarity flags
                                                              ;Make sure no time-out has and no early edge has occured
00199A 0F999A 4F 4E 05 09                                     BRCLR   TFLG1, ((1<<SCI_BD_IC)|(1<<SCI_BD_OC)), SCI_ISR_BD_NEPE_1
                                                              ;Reset time-out and discard captured values
00199E 0F999E 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
0019A0 0F99A0 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0019A0 0F99A0 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0019A0 0F99A0 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
0019A5 0F99A5 20 4C                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, polarity flags in B)
0019A7 0F99A7 5E 54                   SCI_ISR_BD_NEPE_1       STX     (TC0+(2*SCI_BD_OC))
0019A9 0F99A9 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0019A9 0F99A9 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0019A9 0F99A9 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, polarity flags in B)
0019AE 0F99AE MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
0019AE 0F99AE 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
0019B1 0F99B1 22 06                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
                                                              ;LDAA   #$00                                             (ISTACK_CHECK_AND_CLI)
0019B3 0F99B3 86 01                                           LDAA    #$01                                             (ISTACK_CHECK_AND_CLI)
0019B5 0F99B5 B7 0A                                           TFR     A, CCRH                                          (ISTACK_CHECK_AND_CLI)
0019B7 0F99B7 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
0019B9 0F99B9 -> $19B9                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
0019B9 0F99B9 B7 C6                                           EXG     D,Y                                     ;precious edge -> D
0019BB 0F99BB 41                                              COMA                                            ;calculate 2's comlplement
0019BC 0F99BC 51                                              COMB
0019BD 0F99BD C3 00 01                                        ADDD    #1
0019C0 0F99C0 1A E6                                           LEAX    D,X                                     ;subtract timestamps
0019C2 0F99C2 04 45 2E                                        TBEQ    X, SCI_ISR_BD_NEPE_4                    ;discard zero-length pulses (for whatever reasson they may occur)
0019C5 0F99C5 B7 64                                           TFR     Y,D
                                                              ;Select search tree tree (pulse length in X, polarity flags in B)
0019C7 0F99C7 CD 21 3E                                        LDY     #SCI_BD_HIGH_PULSE_TREE
0019CA 0F99CA C5 01                                           BITB    #(1<<SCI_BD_IC)
0019CC 0F99CC 26 03                                           BNE     SCI_ISR_BD_NEPE_2
                                                              ;BEQ    SCI_ISR_BD_NEPE_2       ;!!!
0019CE 0F99CE CD 1D 46                                        LDY     #SCI_BD_LOW_PULSE_TREE
                                                              ;Log pluse length for debuging (pulse length in X, search tree in Y)
0019D1 0F99D1 MACRO                   SCI_ISR_BD_NEPE_2       SCI_BD_LOG
                                                              ;Parse tree  (pulse length in X, search tree in Y)
0019D1 0F99D1 MACRO                                           SCI_BD_PARSE
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;# Parse routine                                                               # (SCI_BD_PARSE)
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;#Parse search tree for detected pulse length                                    (SCI_BD_PARSE)
                                      ; args:   Y: root of the search tree                                             (SCI_BD_PARSE)
                                      ;         X: pulse length                                                        (SCI_BD_PARSE)
                                      ; result: D: list of matching baud rates (mirrored in high and low byte)         (SCI_BD_PARSE)
                                      ; SSTACK: 0 bytes                                                                (SCI_BD_PARSE)
                                      ;         X is preserved                                                         (SCI_BD_PARSE)
0019D1 0F99D1 CC 00 00                                LDD     #$0000          ;  2 cycs       ;initialize X            (SCI_BD_PARSE)
0019D4 0F99D4 E7 40                   LOOP            TST     0,Y             ;  3 cycs       ;check if lower boundary exists (SCI_BD_PARSE)
0019D6 0F99D6 27 0A                                   BEQ     DONE            ;1/3 cycs       ;search done             (SCI_BD_PARSE)
0019D8 0F99D8 AE 75                                   CPX     6,Y+            ;  3 cycs       ;check if pulse length is shorter than lower boundary (SCI_BD_PARSE)
0019DA 0F99DA 25 F8                                   BLO     LOOP            ;1/3 cycs       ;pulse length is shorter than lower boundary -> try a shorter range (SCI_BD_PARSE)
0019DC 0F99DC EC 5C                                   LDD     -4,Y            ;  3 cycs       ;new lowest boundary found -> store valid baud rate field in index X (SCI_BD_PARSE)
0019DE 0F99DE ED 5E                                   LDY     -2,Y            ;  3 cycs       ;switch to the branch with higher compare values (SCI_BD_PARSE)
0019E0 0F99E0 26 F2                                   BNE     LOOP            ;1/3 cycs       ;parse branch if it exists (SCI_BD_PARSE)
0019E2 0F99E2 -> $19E2                DONE            EQU     *                               ;done, result in X       (SCI_BD_PARSE)
                                                              ;Update list of potential batd rates (matching baud rates in D)
0019E2 0F99E2 14 10                                           SEI
0019E4 0F99E4 F4 1C 51                                        ANDB    SCI_BD_LIST                             ;remove mismatching baud rates from the list
0019E7 0F99E7 27 1B                                           BEQ     SCI_ISR_BD_NEPE_5                       ;no valid baud rate found
0019E9 0F99E9 7B 1C 51                                        STAB    SCI_BD_LIST
                                                              ;Check if baud rate has been determined (potential baud rates in B (not zero))
0019EC 0F99EC 87                                              CLRA
0019ED 0F99ED 42                      SCI_ISR_BD_NEPE_3       INCA
0019EE 0F99EE 54                                              LSRB
0019EF 0F99EF 24 FC                                           BCC     SCI_ISR_BD_NEPE_3
0019F1 0F99F1 27 1D                                           BEQ     SCI_ISR_BD_NEPE_6                       ;new baud rate found (index in A)
                                                              ;Done
0019F3 0F99F3 MACRO                   SCI_ISR_BD_NEPE_4       ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0019F3 0F99F3 8F 1B FB                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
0019F6 0F99F6 25 06                                           BLO     OF                                               (ISTACK_RTI)
0019F8 0F99F8 8F 1C 16                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
0019FB 0F99FB 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0019FD 0F99FD 0B                                              RTI                                                      (ISTACK_RTI)
0019FE 0F99FE 06 14 E9                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
001A01 0F9A01 06 14 EF                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;No valid baud rate found
001A04 0F9A04 1F 1C 51 FF EA          SCI_ISR_BD_NEPE_5       BRCLR   SCI_BD_LIST, #$FF, SCI_ISR_BD_NEPE_4    ;done
                                                              ;Restart baud rate detection
001A09 0F9A09 18 0B FF 1C 51                                  MOVB    #$FF, SCI_BD_LIST
001A0E 0F9A0E 20 E3                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;New baud rate found (index+1 in A, $00 in B)
001A10 0F9A10 MACRO                   SCI_ISR_BD_NEPE_6       SCI_STOP_BD
                                      ;Stop baud rate detection                                                        (SCI_STOP_BD)
                                      ; args:   none                                                                   (SCI_STOP_BD)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD)
001A10 0F9A10 1F 1C 51 FF 0E                                  BRCLR   SCI_BD_LIST, #$FF, DONE                 ;baud rate detection already inactive (SCI_STOP_BD)
                                                              ;Stop edge detection                                     (SCI_STOP_BD)
001A15 0F9A15 MACRO                                           SCI_BD_STOP_EDGE_DETECT                                  (SCI_STOP_BD)
                                      ;Stop edge detection                                                             (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;BCLR   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;stop edge detection (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
001A15 0F9A15 4D 4B 03                                        BCLR    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;Disable timer                                           (SCI_STOP_BD)
001A18 0F9A18 MACRO                                           TIM_MULT_DIS    ((1<<SCI_BD_ICPE)|(1<<SCI_BD_IC)|(1<<SCI_BD_IC)|(1<<SCI_BD_OC)) (SCI_STOP_BD)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD/TIM_MULT_DIS)
001A18 0F9A18 4D 4C 05                                        BCLR    TIE, #\1                                         (SCI_STOP_BD/TIM_MULT_DIS)
001A1B 0F9A1B 26 03                                           BNE     DONE                                             (SCI_STOP_BD/TIM_MULT_DIS)
001A1D 0F9A1D 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_BD/TIM_MULT_DIS)
001A20 0F9A20 -> $1A20                DONE                    EQU     *                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;                       MOVW    #$0000, SCI_BD_RECOVCNT                 ;clear recovery count and BD list (SCI_STOP_BD)
                                      ;                                                                       ;This must be the last instruction in the macro!!! (SCI_STOP_BD)
                                      ;                                                                       ;See  SCI_ISR_RX_2 (SCI_STOP_BD)
001A20 0F9A20 79 1C 51                                        CLR     SCI_BD_LIST                             ;clear check list (SCI_STOP_BD)
001A23 0F9A23 -> $1A23                DONE                    EQU     *                                                (SCI_STOP_BD)
                                                              ;Set baud rate (index+1 in A, $00 in B)
001A23 0F9A23 48                                              LSLA                                            ;index -> addess offset
001A24 0F9A24 CE 1D 34                                        LDX     #SCI_BTAB-2                             ;look up prescaler value
001A27 0F9A27 EC E4                                           LDD     A,X                                     ;look up divider value
001A29 0F9A29 MACRO                                           SCI_SET_BAUD
                                      ;#Set baud rate                                                                  (SCI_SET_BAUD)
                                      ; args:   D: new SCIBD value                                                     (SCI_SET_BAUD)
                                      ; result: none                                                                   (SCI_SET_BAUD)
                                      ; SSTACK: 6 bytes                                                                (SCI_SET_BAUD)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD)
001A29 0F9A29 MACRO                                           SSTACK_JOBSR    SCI_SET_BAUD, 6                          (SCI_SET_BAUD)
                                      ;#Check stack and call subroutine                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_SET_BAUD/SSTACK_JOBSR)
001A29 0F9A29 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A29 0F9A29 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A2C 0F9A2C 18 25 FA AD                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A30 0F9A30 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A33 0F9A33 18 22 FA AC                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A37 0F9A37 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A37 0F9A37 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001A37 0F9A37 16 17 B1                                        JOBSR   \1                                               (SCI_SET_BAUD/SSTACK_JOBSR)
                                                              ;Clear error signal
001A3A 0F9A3A MACRO                                           SCI_ERRSIG_OFF
                                      ;#Turn off error signaling                                                       (SCI_ERRSIG_OFF)
                                      ; args:   none                                                                   (SCI_ERRSIG_OFF)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_OFF)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_OFF)
001A3A 0F9A3A MACRO                                           LED_COMERR_OFF                                           (SCI_ERRSIG_OFF)
                                      ;#Stop signaling communication error                                             (SCI_ERRSIG_OFF/LED_COMERR_OFF)
001A3A 0F9A3A 1C 02 58 10                                     BSET    LED_PORT, #LED_COMERR                            (SCI_ERRSIG_OFF/LED_COMERR_OFF)
001A3E 0F9A3E 20 B3                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
001A40 0F9A40 -> $1A40                SCI_CODE_END            EQU     *
001A40 0F9A40 -> $F9A40               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001D35 0F9D35                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
001D36 0F9D36                                                 ALIGN   1
                                                              ;List of prescaler values
001D36 0F9D36 -> $1D36                SCI_BTAB                EQU     *
001D36 0F9D36 02 8B                                           DW      SCI_4800
001D38 0F9D38 01 B2                                           DW      SCI_7200
001D3A 0F9D3A 01 46                                           DW      SCI_9600
001D3C 0F9D3C 00 D9                                           DW      SCI_14400
001D3E 0F9D3E 00 A3                                           DW      SCI_19200
001D40 0F9D40 00 6D                                           DW      SCI_28800
001D42 0F9D42 00 51                                           DW      SCI_38400
001D44 0F9D44 00 36                                           DW      SCI_57600
001D46 0F9D46 -> $1D46                SCI_BTAB_END            EQU     *
                                                              ;Search tree for low pulses
001D46 0F9D46 MACRO                   SCI_BD_LOW_PULSE_TREE   SCI_BD_LOW_PULSE_TREE
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# S12CBase - SCI Baud Detection Search Trees                                  # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Copyright 2009-2012 Dirk Heisswolf                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    families.                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    it under the terms of the GNU General Public License as published by     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    the Free Software Foundation, either version 3 of the License, or        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    (at your option) any later version.                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is distributed in the hope that it will be useful,              # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    GNU General Public License for more details.                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    You should have received a copy of the GNU General Public License        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Description:                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file contains the two search trees which are required for the SCI   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    modules baud rate detection.                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    One is used to determine the set of baud rates that are valid for a      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    certain high pulse.                                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The other one is used to determine the set of baud rates that are valid  # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    for a certain low pulse.                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Each table assigs a set of valid baud rates to a range of pulse lengths. # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    lower boundary <= pulse length < upper boundary -> set of baud rates     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The format of a node entry is the following:                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    start of entry -> | lower boundary  | value of lower boundary            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  BRs   |  BRs   | set of boud rates - twice          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   | pointer to node with longer        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+ boundary value                     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    node node with -> | lower boundary  |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    even lower        +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    boundary value    |  BRs   |  BRs   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Generated on Thu, Nov 15 2012                                               # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Bus clock:              50.00 MHz divided by  2                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Frame format:           8N1                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Supported baud rates:                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        4800 ( 28B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        7200 ( 1B2)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        9600 ( 146)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       14400 (  D9)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       19200 (  A3)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       28800 (  6D)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       38400 (  51)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       57600 (  36)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Low pulse search tree                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_LOW_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    271 ( 10F)      1 . . . . . . . (80)   2001      2       27                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    416 ( 1A0)      1 1 . . . . . . (C0)   1621      1       35                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    542 ( 21E)      1 1 1 . . . . . (E0)   1091      3       44                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    624 ( 270)      . 1 1 . . . . . (60)    428      2       52                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    705 ( 2C1)      2 1 1 . . . . . (E0)    379      4       69                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    813 ( 32D)      2 1 1 1 . . . . (F0)    248      5       86                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    959 ( 3BF)      2 . 1 1 . . . . (B0)     70      6       95                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1058 ( 422)      . . 1 1 . . . . (30)     24      3       99                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1083 ( 43B)      . 2 1 1 . . . . (70)     31      8      108                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1095 ( 447)      . 2 1 1 1 . . . (78)     38      7       98                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1139 ( 473)      3 2 1 1 1 . . . (F8)     36      6      106                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1248 ( 4E0)      3 2 . 1 1 . . . (D8)     15      8      123                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1410 ( 582)      3 2 2 1 1 . . . (F8)      9      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1492 ( 5D4)      . 2 2 1 1 . . . (78)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1573 ( 625)      4 2 2 1 1 . . . (F8)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1626 ( 65A)      4 . 2 1 1 . . . (B8)      4     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1637 ( 665)      4 . 2 1 1 1 . . (BC)      5      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1750 ( 6D6)      4 3 2 1 1 1 . . (FC)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1872 ( 750)      4 3 2 . 1 1 . . (EC)      5      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1926 ( 786)      . 3 2 . 1 1 . . (6C)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2007 ( 7D7)      5 3 2 . 1 1 . . (EC)      5      5      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2115 ( 843)      5 3 2 2 1 1 . . (FC)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2116 ( 844)      5 3 . 2 1 1 . . (DC)      5      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2170 ( 87A)      5 3 . 2 1 1 1 . (DE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2278 ( 8E6)      5 3 3 2 1 1 1 . (FE)      7      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2293 ( 8F5)      5 . 3 2 1 1 1 . (BE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2361 ( 939)      . . 3 2 1 1 1 . (3E)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2418 ( 972)      . 4 3 2 1 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2441 ( 989)      6 4 3 2 1 1 1 . (FE)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2519 ( 9D7)      6 4 3 2 . 1 1 . (F6)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2795 ( AEB)      . 4 3 2 . 1 1 . (76)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2847 ( B1F)      . 4 3 2 2 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2875 ( B3B)      7 4 3 2 2 1 1 . (FE)      7      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2960 ( B90)      7 . 3 2 2 1 1 . (BE)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2984 ( BA8)      7 . . 2 2 1 1 . (9E)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3085 ( C0D)      7 5 . 2 2 1 1 . (DE)      6      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3146 ( C4A)      7 5 4 2 2 1 1 . (FE)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3174 ( C66)      7 5 4 . 2 1 1 . (EE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3229 ( C9D)      . 5 4 . 2 1 1 . (6E)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3265 ( CC1)      . 5 4 . 2 1 1 1 (6F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3309 ( CED)      8 5 4 . 2 1 1 1 (EF)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3417 ( D59)      8 5 4 3 2 1 1 1 (FF)      8      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3628 ( E2C)      8 . 4 3 2 1 1 1 (BF)      7      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3663 ( E4F)      . . 4 3 2 1 1 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3743 ( E9F)      9 . 4 3 2 1 1 1 (BF)      7      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3752 ( EA8)      9 6 4 3 2 1 1 1 (FF)      8      8      137                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3767 ( EB7)      9 6 4 3 2 . 1 1 (FB)      7      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3852 ( F0C)      9 6 . 3 2 . 1 1 (DB)      6     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4014 ( FAE)      9 6 5 3 2 . 1 1 (FB)      7      4      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4097 (1001)      . 6 5 3 2 . 1 1 (7B)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4257 (10A1)      . 6 5 3 2 2 1 1 (7F)      7      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4271 (10AF)      . 6 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4295 (10C7)      . . 5 3 . 2 1 1 (37)      5      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4419 (1143)      . 7 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4476 (117C)      . 7 5 . . 2 1 1 (67)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4599 (11F7)      . 7 5 . 3 2 1 1 (6F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4720 (1270)      . 7 5 4 3 2 1 1 (7F)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4721 (1271)      . 7 . 4 3 2 1 1 (5F)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4882 (1312)      . 7 6 4 3 2 1 1 (7F)      7      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4962 (1362)      . . 6 4 3 2 1 1 (3F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4992 (1380)      . . 6 4 3 2 . 1 (3D)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5086 (13DE)      . 8 6 4 3 2 . 1 (7D)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5589 (15D5)      . 8 . 4 3 2 . 1 (5D)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5629 (15FD)      . . . 4 3 2 . 1 (1D)      4      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5642 (160A)      . . . 4 3 2 2 1 (1F)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5750 (1676)      . . 7 4 3 2 2 1 (3F)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5753 (1679)      . 9 7 4 3 2 2 1 (7F)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5778 (1692)      . 9 7 . 3 2 2 1 (6F)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6022 (1786)      . 9 7 5 3 2 2 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6023 (1787)      . 9 7 5 . 2 2 1 (77)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6296 (1898)      . . 7 5 . 2 2 1 (37)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6351 (18CF)      . . 7 5 4 2 2 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6387 (18F3)      . . 7 5 4 . 2 1 (3B)      5      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6457 (1939)      . . . 5 4 . 2 1 (1B)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6618 (19DA)      . . 8 5 4 . 2 1 (3B)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6877 (1ADD)      . . 8 5 4 3 2 1 (3F)      6      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7081 (1BA9)      . . 8 . 4 3 2 1 (2F)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7324 (1C9C)      . . 8 6 4 3 2 1 (3F)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7325 (1C9D)      . . . 6 4 3 2 1 (1F)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7486 (1D3E)      . . 9 6 4 3 2 1 (3F)      6      5      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7510 (1D56)      . . 9 6 4 3 2 . (3E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7775 (1E5F)      . . 9 6 . 3 2 . (36)      4      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8103 (1FA7)      . . 9 6 5 3 2 . (3E)      5     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8193 (2001)      . . . 6 5 3 2 . (1E)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8383 (20BF)      . . . . 5 3 2 . ( E)      3      8      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8464 (2110)      . . . . 5 3 . . ( C)      2     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8489 (2129)      . . . . 5 3 . 2 ( D)      3     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8626 (21B2)      . . . 7 5 3 . 2 (1D)      4      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9007 (232F)      . . . 7 5 . . 2 (19)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9114 (239A)      . . . 7 5 . 3 2 (1B)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9498 (251A)      . . . 7 5 4 3 2 (1F)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9528 (2538)      . . . 7 . 4 3 2 (17)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9685 (25D5)      . . . . . 4 3 2 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9855 (267F)      . . . . 6 4 3 2 ( F)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9928 (26C8)      . . . 8 6 4 3 2 (1F)      5     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  10987 (2AEB)      . . . . 6 4 3 2 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11230 (2BDE)      . . . 9 6 4 3 2 (1F)      5      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11280 (2C10)      . . . 9 . 4 3 2 (17)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11607 (2D57)      . . . 9 7 4 3 2 (1F)      5      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11627 (2D6B)      . . . 9 7 . 3 2 (1B)      4     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11936 (2EA0)      . . . 9 7 . . 2 (19)      3     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12118 (2F56)      . . . 9 7 5 . 2 (1D)      4      6      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12289 (3001)      . . . . 7 5 . 2 ( D)      3     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12586 (312A)      . . . . 7 5 4 2 ( F)      4     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12735 (31BF)      . . . . 7 5 4 . ( E)      3      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13032 (32E8)      . . . . . 5 4 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13359 (342F)      . . . . 8 5 4 . ( E)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13713 (3591)      . . . . 8 5 4 3 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14248 (37A8)      . . . . 8 . 4 3 ( B)      3      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14738 (3992)      . . . . 8 6 4 3 ( F)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14784 (39C0)      . . . . . 6 4 3 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15111 (3B07)      . . . . 9 6 4 3 ( F)      4      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15408 (3C30)      . . . . 9 6 . 3 ( D)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16059 (3EBB)      . . . . 9 6 5 3 ( F)      4     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16536 (4098)      . . . . . 6 5 3 ( 7)      3      7      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16868 (41E4)      . . . . . . 5 3 ( 3)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17358 (43CE)      . . . . . 7 5 3 ( 7)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17959 (4627)      . . . . . 7 5 . ( 6)      2     11      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18881 (49C1)      . . . . . 7 . . ( 4)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18938 (49FA)      . . . . . 7 . 4 ( 5)      2      9      174                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19488 (4C20)      . . . . . . . 4 ( 1)      1     12      183                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19531 (4C4B)      . . . . . . 6 4 ( 3)      2     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19978 (4E0A)      . . . . . 8 6 4 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22108 (565C)      . . . . . . 6 4 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22353 (5751)      . . . . . . . 4 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22598 (5846)      . . . . . 9 . 4 ( 5)      2      8      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23003 (59DB)      . . . . . 9 7 4 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23183 (5A8F)      . . . . . 9 7 . ( 6)      2     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24162 (5E62)      . . . . . 9 7 5 ( 7)      3     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24728 (6098)      . . . . . . 7 5 ( 3)      2     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  25825 (64E1)      . . . . . . . 5 ( 1)      1      9      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  26475 (676B)      . . . . . . 8 5 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28408 (6EF8)      . . . . . . 8 . ( 2)      1     12      215                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29297 (7271)      . . . . . . . . ( 0)      0     14      224                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29386 (72CA)      . . . . . . . 6 ( 1)      1     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29947 (74FB)      . . . . . . 9 6 ( 3)      2     10      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32770 (8002)      . . . . . . . 6 ( 1)      1     12      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  33632 (8360)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  34611 (8733)      . . . . . . . 7 ( 1)      1     11      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  38856 (97C8)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  39835 (9B9B)      . . . . . . . 8 ( 1)      1     12      222                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  44081 (AC31)      . . . . . . . . ( 0)      0     14      231                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  45059 (B003)      . . . . . . . 9 ( 1)      1     13      229                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  49305 (C099)      . . . . . . . . ( 0)      0     14      238                (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      1                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#+-----0-----+                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#1           2                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#0           7                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#F +---------0----------+                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  2                    4                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  1                    2                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  E +------------------2------------------+                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2                                     F                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    C                                     A                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    1            +------------------------E-----------------------+            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                |            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                1            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3            7                                                D            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2            D                                                3            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    D  +---------7--------+                        +--------------E---------------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        |                              | (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        1                              2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3  4                  C                        5                              F (SCI_BD_LOW_PULSE_TREE)
                                      ;#    B  7                  0                        F                              5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    F +3-+          +-----D-----+           +------D-----+               +--------6---------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           |            |               |                  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           1            1               2                  4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  6          9           E           2            8               5                  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  2          8           2           7            9               1                  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      7 +5-+     +--9---+     +-C--+     +--0--+      +--8---+       +---A---+        +-----8------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     |     |      |      |       |       |        |            | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     1     1      1      1       2       2        3            5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4 4  6     8      B     C    E     0     3      6      A       0       B        7            8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      3 E  D     E      3     C    A     C     6      9      D       B       D        A            4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      B 0 +6+  +-6-+   +B-+  +1-+ +8+  +-7-+  +2-+   +2-+  +-D-+   +-F-+   +-E-+   +--8--+     +---6---+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  |   |  |  |   |  |  |   |   |   |   |   |   |     |     |       | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  1   1  1  1   1  1  1   1   1   2   2   2   3     3     4       6 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7  8   9   A  B  C  D E E  0   1  3  3   6  7  8   C   E   1   6   D   1     B     9       4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        8 6 5  4   3   E  9  6  5 9 B  A   7  1  D   7  8  F   9   5   B   7   5   B     0     F       E (SCI_BD_LOW_PULSE_TREE)
                                      ;#        2 5 0 +4+ +9+ +B+ 0 +6+ 9 F 7 +1+ +C+ 2 +E+ +6+ 6 +3+ +C+ +F+ +2+ +F+ +7+ +F-+  +7+  +-A-+   +-1-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |  |  | |  |   |   |   | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3  3  3 3  4   4   5   7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7 8 8 8 9 9 B B C C C E F 0 0 1 1 2 3 5 6 6 7 8 9 B C D F 1 3 5 6 C D 1  4  9 E  3   E   A   4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        D 5 8 4 7 F 7 D 1 A 4 9 E 4 0 0 A 4 F 7 8 D 0 7 8 C D A 9 5 A 2 9 3 C 1 6 2  2  9 B  C   0   8   F (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4 A 6 3 A 5 2 7 F 8 A D D F C 1 F 3 7 1 0 5 A 9 7 F A 9 D 6 7 9 A 8 8 0 B A +F+ 2 B +E+ +A+ +F+ +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            |       | | | | |   | | | | | | | | | | | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            1       2 2 2 2 2   2 3 3 3 3 3 4 4 4 5 5 5 6  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       0 1 3 5 A   E 0 2 5 9 C 1 6 C 6 9 E 7  7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            3       0 1 2 D E   A 0 E 9 C 3 E 2 4 5 D 6 6  3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       1 0 F 5 B   0 1 8 1 0 0 4 7 B C B 2 B +3-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              | | |   | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              4 4 5   6 6 8  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              9 C 7   0 E 0  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              C 2 5   9 F 0  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              1 0 1   8 8 2 +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7 8 9  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2 3 7  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        C 6 C  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        A 0 8 +3+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        |     | | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     A C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2     C 0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     3 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        1     1 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
001D46 0F9D46 01 A0 C0 C0 1D 54       N__1A0          DW      $01A0   $C0C0   N__270          ;if pulse >= 416 then check N__270 else check N__10F (SCI_BD_LOW_PULSE_TREE)
001D4C 0F9D4C 01 0F 80 80 00 00       N__10F          DW      $010F   $8080   $0000           ;if pulse >= 271 then the result is 80 else the result is 00 (SCI_BD_LOW_PULSE_TREE)
001D52 0F9D52 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001D54 0F9D54 02 70 60 60 1D 62       N__270          DW      $0270   $6060   N__422          ;if pulse >= 624 then check N__422 else check N__21E (SCI_BD_LOW_PULSE_TREE)
001D5A 0F9D5A 02 1E E0 E0 00 00       N__21E          DW      $021E   $E0E0   $0000           ;if pulse >= 542 then the result is E0 else the result is C0 (SCI_BD_LOW_PULSE_TREE)
001D60 0F9D60 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001D62 0F9D62 04 22 30 30 1D 80       N__422          DW      $0422   $3030   N__FAE          ;if pulse >= 1058 then check N__FAE else check N__2C1 (SCI_BD_LOW_PULSE_TREE)
001D68 0F9D68 02 C1 E0 E0 1D 70       N__2C1          DW      $02C1   $E0E0   N__32D          ;if pulse >= 705 then check N__32D else the result is 60 (SCI_BD_LOW_PULSE_TREE)
001D6E 0F9D6E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001D70 0F9D70 03 2D F0 F0 1D 78       N__32D          DW      $032D   $F0F0   N__3BF          ;if pulse >= 813 then check N__3BF else the result is E0 (SCI_BD_LOW_PULSE_TREE)
001D76 0F9D76 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001D78 0F9D78 03 BF B0 B0 00 00       N__3BF          DW      $03BF   $B0B0   $0000           ;if pulse >= 959 then the result is B0 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
001D7E 0F9D7E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001D80 0F9D80 0F AE FB FB 1E A0       N__FAE          DW      $0FAE   $FBFB   N_1D3E          ;if pulse >= 4014 then check N_1D3E else check N__7D7 (SCI_BD_LOW_PULSE_TREE)
001D86 0F9D86 07 D7 EC EC 1D E2       N__7D7          DW      $07D7   $ECEC   N__C0D          ;if pulse >= 2007 then check N__C0D else check N__473 (SCI_BD_LOW_PULSE_TREE)
001D8C 0F9D8C 04 73 F8 F8 1D A0       N__473          DW      $0473   $F8F8   N__625          ;if pulse >= 1139 then check N__625 else check N__447 (SCI_BD_LOW_PULSE_TREE)
001D92 0F9D92 04 47 78 78 00 00       N__447          DW      $0447   $7878   $0000           ;if pulse >= 1095 then the result is 78 else check N__43B (SCI_BD_LOW_PULSE_TREE)
001D98 0F9D98 04 3B 70 70 00 00       N__43B          DW      $043B   $7070   $0000           ;if pulse >= 1083 then the result is 70 else the result is 30 (SCI_BD_LOW_PULSE_TREE)
001D9E 0F9D9E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DA0 0F9DA0 06 25 F8 F8 1D BE       N__625          DW      $0625   $F8F8   N__6D6          ;if pulse >= 1573 then check N__6D6 else check N__4E0 (SCI_BD_LOW_PULSE_TREE)
001DA6 0F9DA6 04 E0 D8 D8 1D AE       N__4E0          DW      $04E0   $D8D8   N__582          ;if pulse >= 1248 then check N__582 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
001DAC 0F9DAC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DAE 0F9DAE 05 82 F8 F8 1D B6       N__582          DW      $0582   $F8F8   N__5D4          ;if pulse >= 1410 then check N__5D4 else the result is D8 (SCI_BD_LOW_PULSE_TREE)
001DB4 0F9DB4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DB6 0F9DB6 05 D4 78 78 00 00       N__5D4          DW      $05D4   $7878   $0000           ;if pulse >= 1492 then the result is 78 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
001DBC 0F9DBC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DBE 0F9DBE 06 D6 FC FC 1D D2       N__6D6          DW      $06D6   $FCFC   N__750          ;if pulse >= 1750 then check N__750 else check N__665 (SCI_BD_LOW_PULSE_TREE)
001DC4 0F9DC4 06 65 BC BC 00 00       N__665          DW      $0665   $BCBC   $0000           ;if pulse >= 1637 then the result is BC else check N__65A (SCI_BD_LOW_PULSE_TREE)
001DCA 0F9DCA 06 5A B8 B8 00 00       N__65A          DW      $065A   $B8B8   $0000           ;if pulse >= 1626 then the result is B8 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
001DD0 0F9DD0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DD2 0F9DD2 07 50 EC EC 1D DA       N__750          DW      $0750   $ECEC   N__786          ;if pulse >= 1872 then check N__786 else the result is FC (SCI_BD_LOW_PULSE_TREE)
001DD8 0F9DD8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DDA 0F9DDA 07 86 6C 6C 00 00       N__786          DW      $0786   $6C6C   $0000           ;if pulse >= 1926 then the result is 6C else the result is EC (SCI_BD_LOW_PULSE_TREE)
001DE0 0F9DE0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001DE2 0F9DE2 0C 0D DE DE 1E 4C       N__C0D          DW      $0C0D   $DEDE   N__E2C          ;if pulse >= 3085 then check N__E2C else check N__989 (SCI_BD_LOW_PULSE_TREE)
001DE8 0F9DE8 09 89 FE FE 1E 20       N__989          DW      $0989   $FEFE   N__B3B          ;if pulse >= 2441 then check N__B3B else check N__8E6 (SCI_BD_LOW_PULSE_TREE)
001DEE 0F9DEE 08 E6 FE FE 1E 0A       N__8E6          DW      $08E6   $FEFE   N__939          ;if pulse >= 2278 then check N__939 else check N__844 (SCI_BD_LOW_PULSE_TREE)
001DF4 0F9DF4 08 44 DC DC 1E 02       N__844          DW      $0844   $DCDC   N__87A          ;if pulse >= 2116 then check N__87A else check N__843 (SCI_BD_LOW_PULSE_TREE)
001DFA 0F9DFA 08 43 FC FC 00 00       N__843          DW      $0843   $FCFC   $0000           ;if pulse >= 2115 then the result is FC else the result is EC (SCI_BD_LOW_PULSE_TREE)
001E00 0F9E00 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E02 0F9E02 08 7A DE DE 00 00       N__87A          DW      $087A   $DEDE   $0000           ;if pulse >= 2170 then the result is DE else the result is DC (SCI_BD_LOW_PULSE_TREE)
001E08 0F9E08 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E0A 0F9E0A 09 39 3E 3E 1E 18       N__939          DW      $0939   $3E3E   N__972          ;if pulse >= 2361 then check N__972 else check N__8F5 (SCI_BD_LOW_PULSE_TREE)
001E10 0F9E10 08 F5 BE BE 00 00       N__8F5          DW      $08F5   $BEBE   $0000           ;if pulse >= 2293 then the result is BE else the result is FE (SCI_BD_LOW_PULSE_TREE)
001E16 0F9E16 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E18 0F9E18 09 72 7E 7E 00 00       N__972          DW      $0972   $7E7E   $0000           ;if pulse >= 2418 then the result is 7E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
001E1E 0F9E1E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E20 0F9E20 0B 3B FE FE 1E 3C       N__B3B          DW      $0B3B   $FEFE   N__B90          ;if pulse >= 2875 then check N__B90 else check N__AEB (SCI_BD_LOW_PULSE_TREE)
001E26 0F9E26 0A EB 76 76 1E 34       N__AEB          DW      $0AEB   $7676   N__B1F          ;if pulse >= 2795 then check N__B1F else check N__9D7 (SCI_BD_LOW_PULSE_TREE)
001E2C 0F9E2C 09 D7 F6 F6 00 00       N__9D7          DW      $09D7   $F6F6   $0000           ;if pulse >= 2519 then the result is F6 else the result is FE (SCI_BD_LOW_PULSE_TREE)
001E32 0F9E32 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E34 0F9E34 0B 1F 7E 7E 00 00       N__B1F          DW      $0B1F   $7E7E   $0000           ;if pulse >= 2847 then the result is 7E else the result is 76 (SCI_BD_LOW_PULSE_TREE)
001E3A 0F9E3A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E3C 0F9E3C 0B 90 BE BE 1E 44       N__B90          DW      $0B90   $BEBE   N__BA8          ;if pulse >= 2960 then check N__BA8 else the result is FE (SCI_BD_LOW_PULSE_TREE)
001E42 0F9E42 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E44 0F9E44 0B A8 9E 9E 00 00       N__BA8          DW      $0BA8   $9E9E   $0000           ;if pulse >= 2984 then the result is 9E else the result is BE (SCI_BD_LOW_PULSE_TREE)
001E4A 0F9E4A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E4C 0F9E4C 0E 2C BF BF 1E 7C       N__E2C          DW      $0E2C   $BFBF   N__EA8          ;if pulse >= 3628 then check N__EA8 else check N__CC1 (SCI_BD_LOW_PULSE_TREE)
001E52 0F9E52 0C C1 6F 6F 1E 6E       N__CC1          DW      $0CC1   $6F6F   N__D59          ;if pulse >= 3265 then check N__D59 else check N__C66 (SCI_BD_LOW_PULSE_TREE)
001E58 0F9E58 0C 66 EE EE 1E 66       N__C66          DW      $0C66   $EEEE   N__C9D          ;if pulse >= 3174 then check N__C9D else check N__C4A (SCI_BD_LOW_PULSE_TREE)
001E5E 0F9E5E 0C 4A FE FE 00 00       N__C4A          DW      $0C4A   $FEFE   $0000           ;if pulse >= 3146 then the result is FE else the result is DE (SCI_BD_LOW_PULSE_TREE)
001E64 0F9E64 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E66 0F9E66 0C 9D 6E 6E 00 00       N__C9D          DW      $0C9D   $6E6E   $0000           ;if pulse >= 3229 then the result is 6E else the result is EE (SCI_BD_LOW_PULSE_TREE)
001E6C 0F9E6C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E6E 0F9E6E 0D 59 FF FF 00 00       N__D59          DW      $0D59   $FFFF   $0000           ;if pulse >= 3417 then the result is FF else check N__CED (SCI_BD_LOW_PULSE_TREE)
001E74 0F9E74 0C ED EF EF 00 00       N__CED          DW      $0CED   $EFEF   $0000           ;if pulse >= 3309 then the result is EF else the result is 6F (SCI_BD_LOW_PULSE_TREE)
001E7A 0F9E7A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E7C 0F9E7C 0E A8 FF FF 1E 90       N__EA8          DW      $0EA8   $FFFF   N__EB7          ;if pulse >= 3752 then check N__EB7 else check N__E9F (SCI_BD_LOW_PULSE_TREE)
001E82 0F9E82 0E 9F BF BF 00 00       N__E9F          DW      $0E9F   $BFBF   $0000           ;if pulse >= 3743 then the result is BF else check N__E4F (SCI_BD_LOW_PULSE_TREE)
001E88 0F9E88 0E 4F 3F 3F 00 00       N__E4F          DW      $0E4F   $3F3F   $0000           ;if pulse >= 3663 then the result is 3F else the result is BF (SCI_BD_LOW_PULSE_TREE)
001E8E 0F9E8E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E90 0F9E90 0E B7 FB FB 1E 98       N__EB7          DW      $0EB7   $FBFB   N__F0C          ;if pulse >= 3767 then check N__F0C else the result is FF (SCI_BD_LOW_PULSE_TREE)
001E96 0F9E96 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001E98 0F9E98 0F 0C DB DB 00 00       N__F0C          DW      $0F0C   $DBDB   $0000           ;if pulse >= 3852 then the result is DB else the result is FB (SCI_BD_LOW_PULSE_TREE)
001E9E 0F9E9E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EA0 0F9EA0 1D 3E 3F 3F 1F 78       N_1D3E          DW      $1D3E   $3F3F   N_2F56          ;if pulse >= 7486 then check N_2F56 else check N_15FD (SCI_BD_LOW_PULSE_TREE)
001EA6 0F9EA6 15 FD 1D 1D 1F 0E       N_15FD          DW      $15FD   $1D1D   N_1898          ;if pulse >= 5629 then check N_1898 else check N_1270 (SCI_BD_LOW_PULSE_TREE)
001EAC 0F9EAC 12 70 7F 7F 1E E4       N_1270          DW      $1270   $7F7F   N_1362          ;if pulse >= 4720 then check N_1362 else check N_10C7 (SCI_BD_LOW_PULSE_TREE)
001EB2 0F9EB2 10 C7 37 37 1E CE       N_10C7          DW      $10C7   $3737   N_117C          ;if pulse >= 4295 then check N_117C else check N_10A1 (SCI_BD_LOW_PULSE_TREE)
001EB8 0F9EB8 10 A1 7F 7F 1E C6       N_10A1          DW      $10A1   $7F7F   N_10AF          ;if pulse >= 4257 then check N_10AF else check N_1001 (SCI_BD_LOW_PULSE_TREE)
001EBE 0F9EBE 10 01 7B 7B 00 00       N_1001          DW      $1001   $7B7B   $0000           ;if pulse >= 4097 then the result is 7B else the result is FB (SCI_BD_LOW_PULSE_TREE)
001EC4 0F9EC4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EC6 0F9EC6 10 AF 77 77 00 00       N_10AF          DW      $10AF   $7777   $0000           ;if pulse >= 4271 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
001ECC 0F9ECC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001ECE 0F9ECE 11 7C 67 67 1E DC       N_117C          DW      $117C   $6767   N_11F7          ;if pulse >= 4476 then check N_11F7 else check N_1143 (SCI_BD_LOW_PULSE_TREE)
001ED4 0F9ED4 11 43 77 77 00 00       N_1143          DW      $1143   $7777   $0000           ;if pulse >= 4419 then the result is 77 else the result is 37 (SCI_BD_LOW_PULSE_TREE)
001EDA 0F9EDA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EDC 0F9EDC 11 F7 6F 6F 00 00       N_11F7          DW      $11F7   $6F6F   $0000           ;if pulse >= 4599 then the result is 6F else the result is 67 (SCI_BD_LOW_PULSE_TREE)
001EE2 0F9EE2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EE4 0F9EE4 13 62 3F 3F 1E F8       N_1362          DW      $1362   $3F3F   N_13DE          ;if pulse >= 4962 then check N_13DE else check N_1312 (SCI_BD_LOW_PULSE_TREE)
001EEA 0F9EEA 13 12 7F 7F 00 00       N_1312          DW      $1312   $7F7F   $0000           ;if pulse >= 4882 then the result is 7F else check N_1271 (SCI_BD_LOW_PULSE_TREE)
001EF0 0F9EF0 12 71 5F 5F 00 00       N_1271          DW      $1271   $5F5F   $0000           ;if pulse >= 4721 then the result is 5F else the result is 7F (SCI_BD_LOW_PULSE_TREE)
001EF6 0F9EF6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001EF8 0F9EF8 13 DE 7D 7D 1F 06       N_13DE          DW      $13DE   $7D7D   N_15D5          ;if pulse >= 5086 then check N_15D5 else check N_1380 (SCI_BD_LOW_PULSE_TREE)
001EFE 0F9EFE 13 80 3D 3D 00 00       N_1380          DW      $1380   $3D3D   $0000           ;if pulse >= 4992 then the result is 3D else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001F04 0F9F04 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F06 0F9F06 15 D5 5D 5D 00 00       N_15D5          DW      $15D5   $5D5D   $0000           ;if pulse >= 5589 then the result is 5D else the result is 7D (SCI_BD_LOW_PULSE_TREE)
001F0C 0F9F0C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F0E 0F9F0E 18 98 37 37 1F 40       N_1898          DW      $1898   $3737   N_1ADD          ;if pulse >= 6296 then check N_1ADD else check N_1692 (SCI_BD_LOW_PULSE_TREE)
001F14 0F9F14 16 92 6F 6F 1F 30       N_1692          DW      $1692   $6F6F   N_1786          ;if pulse >= 5778 then check N_1786 else check N_1676 (SCI_BD_LOW_PULSE_TREE)
001F1A 0F9F1A 16 76 3F 3F 1F 28       N_1676          DW      $1676   $3F3F   N_1679          ;if pulse >= 5750 then check N_1679 else check N_160A (SCI_BD_LOW_PULSE_TREE)
001F20 0F9F20 16 0A 1F 1F 00 00       N_160A          DW      $160A   $1F1F   $0000           ;if pulse >= 5642 then the result is 1F else the result is 1D (SCI_BD_LOW_PULSE_TREE)
001F26 0F9F26 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F28 0F9F28 16 79 7F 7F 00 00       N_1679          DW      $1679   $7F7F   $0000           ;if pulse >= 5753 then the result is 7F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001F2E 0F9F2E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F30 0F9F30 17 86 7F 7F 1F 38       N_1786          DW      $1786   $7F7F   N_1787          ;if pulse >= 6022 then check N_1787 else the result is 6F (SCI_BD_LOW_PULSE_TREE)
001F36 0F9F36 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F38 0F9F38 17 87 77 77 00 00       N_1787          DW      $1787   $7777   $0000           ;if pulse >= 6023 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
001F3E 0F9F3E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F40 0F9F40 1A DD 3F 3F 1F 62       N_1ADD          DW      $1ADD   $3F3F   N_1C9C          ;if pulse >= 6877 then check N_1C9C else check N_18F3 (SCI_BD_LOW_PULSE_TREE)
001F46 0F9F46 18 F3 3B 3B 1F 54       N_18F3          DW      $18F3   $3B3B   N_19DA          ;if pulse >= 6387 then check N_19DA else check N_18CF (SCI_BD_LOW_PULSE_TREE)
001F4C 0F9F4C 18 CF 3F 3F 00 00       N_18CF          DW      $18CF   $3F3F   $0000           ;if pulse >= 6351 then the result is 3F else the result is 37 (SCI_BD_LOW_PULSE_TREE)
001F52 0F9F52 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F54 0F9F54 19 DA 3B 3B 00 00       N_19DA          DW      $19DA   $3B3B   $0000           ;if pulse >= 6618 then the result is 3B else check N_1939 (SCI_BD_LOW_PULSE_TREE)
001F5A 0F9F5A 19 39 1B 1B 00 00       N_1939          DW      $1939   $1B1B   $0000           ;if pulse >= 6457 then the result is 1B else the result is 3B (SCI_BD_LOW_PULSE_TREE)
001F60 0F9F60 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F62 0F9F62 1C 9C 3F 3F 1F 70       N_1C9C          DW      $1C9C   $3F3F   N_1C9D          ;if pulse >= 7324 then check N_1C9D else check N_1BA9 (SCI_BD_LOW_PULSE_TREE)
001F68 0F9F68 1B A9 2F 2F 00 00       N_1BA9          DW      $1BA9   $2F2F   $0000           ;if pulse >= 7081 then the result is 2F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001F6E 0F9F6E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F70 0F9F70 1C 9D 1F 1F 00 00       N_1C9D          DW      $1C9D   $1F1F   $0000           ;if pulse >= 7325 then the result is 1F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001F76 0F9F76 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F78 0F9F78 2F 56 1D 1D 20 14       N_2F56          DW      $2F56   $1D1D   N_4098          ;if pulse >= 12118 then check N_4098 else check N_251A (SCI_BD_LOW_PULSE_TREE)
001F7E 0F9F7E 25 1A 1F 1F 1F CA       N_251A          DW      $251A   $1F1F   N_2BDE          ;if pulse >= 9498 then check N_2BDE else check N_20BF (SCI_BD_LOW_PULSE_TREE)
001F84 0F9F84 20 BF 0E 0E 1F A8       N_20BF          DW      $20BF   $0E0E   N_21B2          ;if pulse >= 8383 then check N_21B2 else check N_1E5F (SCI_BD_LOW_PULSE_TREE)
001F8A 0F9F8A 1E 5F 36 36 1F 98       N_1E5F          DW      $1E5F   $3636   N_1FA7          ;if pulse >= 7775 then check N_1FA7 else check N_1D56 (SCI_BD_LOW_PULSE_TREE)
001F90 0F9F90 1D 56 3E 3E 00 00       N_1D56          DW      $1D56   $3E3E   $0000           ;if pulse >= 7510 then the result is 3E else the result is 3F (SCI_BD_LOW_PULSE_TREE)
001F96 0F9F96 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001F98 0F9F98 1F A7 3E 3E 1F A0       N_1FA7          DW      $1FA7   $3E3E   N_2001          ;if pulse >= 8103 then check N_2001 else the result is 36 (SCI_BD_LOW_PULSE_TREE)
001F9E 0F9F9E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FA0 0F9FA0 20 01 1E 1E 00 00       N_2001          DW      $2001   $1E1E   $0000           ;if pulse >= 8193 then the result is 1E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
001FA6 0F9FA6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FA8 0F9FA8 21 B2 1D 1D 1F BC       N_21B2          DW      $21B2   $1D1D   N_239A          ;if pulse >= 8626 then check N_239A else check N_2129 (SCI_BD_LOW_PULSE_TREE)
001FAE 0F9FAE 21 29 0D 0D 00 00       N_2129          DW      $2129   $0D0D   $0000           ;if pulse >= 8489 then the result is 0D else check N_2110 (SCI_BD_LOW_PULSE_TREE)
001FB4 0F9FB4 21 10 0C 0C 00 00       N_2110          DW      $2110   $0C0C   $0000           ;if pulse >= 8464 then the result is 0C else the result is 0E (SCI_BD_LOW_PULSE_TREE)
001FBA 0F9FBA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FBC 0F9FBC 23 9A 1B 1B 00 00       N_239A          DW      $239A   $1B1B   $0000           ;if pulse >= 9114 then the result is 1B else check N_232F (SCI_BD_LOW_PULSE_TREE)
001FC2 0F9FC2 23 2F 19 19 00 00       N_232F          DW      $232F   $1919   $0000           ;if pulse >= 9007 then the result is 19 else the result is 1D (SCI_BD_LOW_PULSE_TREE)
001FC8 0F9FC8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FCA 0F9FCA 2B DE 1F 1F 1F F6       N_2BDE          DW      $2BDE   $1F1F   N_2D57          ;if pulse >= 11230 then check N_2D57 else check N_267F (SCI_BD_LOW_PULSE_TREE)
001FD0 0F9FD0 26 7F 0F 0F 1F E6       N_267F          DW      $267F   $0F0F   N_26C8          ;if pulse >= 9855 then check N_26C8 else check N_2538 (SCI_BD_LOW_PULSE_TREE)
001FD6 0F9FD6 25 38 17 17 1F DE       N_2538          DW      $2538   $1717   N_25D5          ;if pulse >= 9528 then check N_25D5 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
001FDC 0F9FDC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FDE 0F9FDE 25 D5 07 07 00 00       N_25D5          DW      $25D5   $0707   $0000           ;if pulse >= 9685 then the result is 07 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
001FE4 0F9FE4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FE6 0F9FE6 26 C8 1F 1F 1F EE       N_26C8          DW      $26C8   $1F1F   N_2AEB          ;if pulse >= 9928 then check N_2AEB else the result is 0F (SCI_BD_LOW_PULSE_TREE)
001FEC 0F9FEC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FEE 0F9FEE 2A EB 0F 0F 00 00       N_2AEB          DW      $2AEB   $0F0F   $0000           ;if pulse >= 10987 then the result is 0F else the result is 1F (SCI_BD_LOW_PULSE_TREE)
001FF4 0F9FF4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
001FF6 0F9FF6 2D 57 1F 1F 20 04       N_2D57          DW      $2D57   $1F1F   N_2D6B          ;if pulse >= 11607 then check N_2D6B else check N_2C10 (SCI_BD_LOW_PULSE_TREE)
001FFC 0F9FFC 2C 10 17 17 00 00       N_2C10          DW      $2C10   $1717   $0000           ;if pulse >= 11280 then the result is 17 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002002 0FA002 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002004 0FA004 2D 6B 1B 1B 20 0C       N_2D6B          DW      $2D6B   $1B1B   N_2EA0          ;if pulse >= 11627 then check N_2EA0 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00200A 0FA00A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00200C 0FA00C 2E A0 19 19 00 00       N_2EA0          DW      $2EA0   $1919   $0000           ;if pulse >= 11936 then the result is 19 else the result is 1B (SCI_BD_LOW_PULSE_TREE)
002012 0FA012 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002014 0FA014 40 98 07 07 20 6E       N_4098          DW      $4098   $0707   N_5846          ;if pulse >= 16536 then check N_5846 else check N_37A8 (SCI_BD_LOW_PULSE_TREE)
00201A 0FA01A 37 A8 0B 0B 20 4A       N_37A8          DW      $37A8   $0B0B   N_3B07          ;if pulse >= 14248 then check N_3B07 else check N_31BF (SCI_BD_LOW_PULSE_TREE)
002020 0FA020 31 BF 0E 0E 20 34       N_31BF          DW      $31BF   $0E0E   N_342F          ;if pulse >= 12735 then check N_342F else check N_312A (SCI_BD_LOW_PULSE_TREE)
002026 0FA026 31 2A 0F 0F 00 00       N_312A          DW      $312A   $0F0F   $0000           ;if pulse >= 12586 then the result is 0F else check N_3001 (SCI_BD_LOW_PULSE_TREE)
00202C 0FA02C 30 01 0D 0D 00 00       N_3001          DW      $3001   $0D0D   $0000           ;if pulse >= 12289 then the result is 0D else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002032 0FA032 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002034 0FA034 34 2F 0E 0E 20 42       N_342F          DW      $342F   $0E0E   N_3591          ;if pulse >= 13359 then check N_3591 else check N_32E8 (SCI_BD_LOW_PULSE_TREE)
00203A 0FA03A 32 E8 06 06 00 00       N_32E8          DW      $32E8   $0606   $0000           ;if pulse >= 13032 then the result is 06 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002040 0FA040 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002042 0FA042 35 91 0F 0F 00 00       N_3591          DW      $3591   $0F0F   $0000           ;if pulse >= 13713 then the result is 0F else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002048 0FA048 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00204A 0FA04A 3B 07 0F 0F 20 60       N_3B07          DW      $3B07   $0F0F   N_3EBB          ;if pulse >= 15111 then check N_3EBB else check N_3992 (SCI_BD_LOW_PULSE_TREE)
002050 0FA050 39 92 0F 0F 20 58       N_3992          DW      $3992   $0F0F   N_39C0          ;if pulse >= 14738 then check N_39C0 else the result is 0B (SCI_BD_LOW_PULSE_TREE)
002056 0FA056 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002058 0FA058 39 C0 07 07 00 00       N_39C0          DW      $39C0   $0707   $0000           ;if pulse >= 14784 then the result is 07 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00205E 0FA05E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002060 0FA060 3E BB 0F 0F 00 00       N_3EBB          DW      $3EBB   $0F0F   $0000           ;if pulse >= 16059 then the result is 0F else check N_3C30 (SCI_BD_LOW_PULSE_TREE)
002066 0FA066 3C 30 0D 0D 00 00       N_3C30          DW      $3C30   $0D0D   $0000           ;if pulse >= 15408 then the result is 0D else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00206C 0FA06C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00206E 0FA06E 58 46 05 05 20 BC       N_5846          DW      $5846   $0505   N_64E1          ;if pulse >= 22598 then check N_64E1 else check N_49FA (SCI_BD_LOW_PULSE_TREE)
002074 0FA074 49 FA 05 05 20 98       N_49FA          DW      $49FA   $0505   N_4E0A          ;if pulse >= 18938 then check N_4E0A else check N_43CE (SCI_BD_LOW_PULSE_TREE)
00207A 0FA07A 43 CE 07 07 20 88       N_43CE          DW      $43CE   $0707   N_4627          ;if pulse >= 17358 then check N_4627 else check N_41E4 (SCI_BD_LOW_PULSE_TREE)
002080 0FA080 41 E4 03 03 00 00       N_41E4          DW      $41E4   $0303   $0000           ;if pulse >= 16868 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002086 0FA086 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002088 0FA088 46 27 06 06 20 90       N_4627          DW      $4627   $0606   N_49C1          ;if pulse >= 17959 then check N_49C1 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00208E 0FA08E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002090 0FA090 49 C1 04 04 00 00       N_49C1          DW      $49C1   $0404   $0000           ;if pulse >= 18881 then the result is 04 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
002096 0FA096 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002098 0FA098 4E 0A 07 07 20 AC       N_4E0A          DW      $4E0A   $0707   N_565C          ;if pulse >= 19978 then check N_565C else check N_4C4B (SCI_BD_LOW_PULSE_TREE)
00209E 0FA09E 4C 4B 03 03 00 00       N_4C4B          DW      $4C4B   $0303   $0000           ;if pulse >= 19531 then the result is 03 else check N_4C20 (SCI_BD_LOW_PULSE_TREE)
0020A4 0FA0A4 4C 20 01 01 00 00       N_4C20          DW      $4C20   $0101   $0000           ;if pulse >= 19488 then the result is 01 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
0020AA 0FA0AA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020AC 0FA0AC 56 5C 03 03 20 B4       N_565C          DW      $565C   $0303   N_5751          ;if pulse >= 22108 then check N_5751 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
0020B2 0FA0B2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020B4 0FA0B4 57 51 01 01 00 00       N_5751          DW      $5751   $0101   $0000           ;if pulse >= 22353 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
0020BA 0FA0BA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020BC 0FA0BC 64 E1 01 01 20 E0       N_64E1          DW      $64E1   $0101   N_74FB          ;if pulse >= 25825 then check N_74FB else check N_5A8F (SCI_BD_LOW_PULSE_TREE)
0020C2 0FA0C2 5A 8F 06 06 20 D0       N_5A8F          DW      $5A8F   $0606   N_5E62          ;if pulse >= 23183 then check N_5E62 else check N_59DB (SCI_BD_LOW_PULSE_TREE)
0020C8 0FA0C8 59 DB 07 07 00 00       N_59DB          DW      $59DB   $0707   $0000           ;if pulse >= 23003 then the result is 07 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
0020CE 0FA0CE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020D0 0FA0D0 5E 62 07 07 20 D8       N_5E62          DW      $5E62   $0707   N_6098          ;if pulse >= 24162 then check N_6098 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
0020D6 0FA0D6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020D8 0FA0D8 60 98 03 03 00 00       N_6098          DW      $6098   $0303   $0000           ;if pulse >= 24728 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
0020DE 0FA0DE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020E0 0FA0E0 74 FB 03 03 21 04       N_74FB          DW      $74FB   $0303   N_8733          ;if pulse >= 29947 then check N_8733 else check N_676B (SCI_BD_LOW_PULSE_TREE)
0020E6 0FA0E6 67 6B 03 03 20 EE       N_676B          DW      $676B   $0303   N_6EF8          ;if pulse >= 26475 then check N_6EF8 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
0020EC 0FA0EC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020EE 0FA0EE 6E F8 02 02 20 F6       N_6EF8          DW      $6EF8   $0202   N_72CA          ;if pulse >= 28408 then check N_72CA else the result is 03 (SCI_BD_LOW_PULSE_TREE)
0020F4 0FA0F4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0020F6 0FA0F6 72 CA 01 01 00 00       N_72CA          DW      $72CA   $0101   $0000           ;if pulse >= 29386 then the result is 01 else check N_7271 (SCI_BD_LOW_PULSE_TREE)
0020FC 0FA0FC 72 71 00 00 00 00       N_7271          DW      $7271   $0000   $0000           ;if pulse >= 29297 then the result is 00 else the result is 02 (SCI_BD_LOW_PULSE_TREE)
002102 0FA102 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002104 0FA104 87 33 01 01 21 1A       N_8733          DW      $8733   $0101   N_9B9B          ;if pulse >= 34611 then check N_9B9B else check N_8002 (SCI_BD_LOW_PULSE_TREE)
00210A 0FA10A 80 02 01 01 21 12       N_8002          DW      $8002   $0101   N_8360          ;if pulse >= 32770 then check N_8360 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002110 0FA110 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002112 0FA112 83 60 00 00 00 00       N_8360          DW      $8360   $0000   $0000           ;if pulse >= 33632 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002118 0FA118 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00211A 0FA11A 9B 9B 01 01 21 28       N_9B9B          DW      $9B9B   $0101   N_B003          ;if pulse >= 39835 then check N_B003 else check N_97C8 (SCI_BD_LOW_PULSE_TREE)
002120 0FA120 97 C8 00 00 00 00       N_97C8          DW      $97C8   $0000   $0000           ;if pulse >= 38856 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002126 0FA126 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002128 0FA128 B0 03 01 01 21 36       N_B003          DW      $B003   $0101   N_C099          ;if pulse >= 45059 then check N_C099 else check N_AC31 (SCI_BD_LOW_PULSE_TREE)
00212E 0FA12E AC 31 00 00 00 00       N_AC31          DW      $AC31   $0000   $0000           ;if pulse >= 44081 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002134 0FA134 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002136 0FA136 C0 99 00 00 00 00       N_C099          DW      $C099   $0000   $0000           ;if pulse >= 49305 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00213C 0FA13C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
                                                              ;Search tree for high pulses
00213E 0FA13E MACRO                   SCI_BD_HIGH_PULSE_TREE  SCI_BD_HIGH_PULSE_TREE
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;# High pulse search tree                                                      # (SCI_BD_HIGH_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    412 ( 19C)      1 . . . . . . . (80)     11      3       37                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    633 ( 279)      1 1 . . . . . . (C0)     18      2       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    824 ( 338)      1 1 1 . . . . . (E0)     22      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1236 ( 4D4)      1 1 1 1 . . . . (F0)     19      1       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1664 ( 680)      1 1 1 1 1 . . . (F8)     14      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   2489 ( 9B9)      1 1 1 1 1 1 . . (FC)      6      2       52                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   3298 ( CE2)      1 1 1 1 1 1 1 . (FE)      7      4       61                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4963 (1363)      1 1 1 1 1 1 1 1 (FF)      8      3       51                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   D                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;# +-4-+                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 2   9                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 7   B                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;#+9+ +9+                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | 1                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#1 3 6 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#9 3 8 6                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#C 8 0 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      C                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      E                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      2                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
00213E 0FA13E 04 D4 F0 F0 21 5A       N__4D4          DW      $04D4   $F0F0   N__9B9          ;if pulse >= 1236 then check N__9B9 else check N__279 (SCI_BD_HIGH_PULSE_TREE)
002144 0FA144 02 79 C0 C0 21 52       N__279          DW      $0279   $C0C0   N__338          ;if pulse >= 633 then check N__338 else check N__19C (SCI_BD_HIGH_PULSE_TREE)
00214A 0FA14A 01 9C 80 80 00 00       N__19C          DW      $019C   $8080   $0000           ;if pulse >= 412 then the result is 80 else the result is 00 (SCI_BD_HIGH_PULSE_TREE)
002150 0FA150 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002152 0FA152 03 38 E0 E0 00 00       N__338          DW      $0338   $E0E0   $0000           ;if pulse >= 824 then the result is E0 else the result is C0 (SCI_BD_HIGH_PULSE_TREE)
002158 0FA158 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00215A 0FA15A 09 B9 FC FC 21 68       N__9B9          DW      $09B9   $FCFC   N_1363          ;if pulse >= 2489 then check N_1363 else check N__680 (SCI_BD_HIGH_PULSE_TREE)
002160 0FA160 06 80 F8 F8 00 00       N__680          DW      $0680   $F8F8   $0000           ;if pulse >= 1664 then the result is F8 else the result is F0 (SCI_BD_HIGH_PULSE_TREE)
002166 0FA166 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002168 0FA168 13 63 FF FF 00 00       N_1363          DW      $1363   $FFFF   $0000           ;if pulse >= 4963 then the result is FF else check N__CE2 (SCI_BD_HIGH_PULSE_TREE)
00216E 0FA16E 0C E2 FE FE 00 00       N__CE2          DW      $0CE2   $FEFE   $0000           ;if pulse >= 3298 then the result is FE else the result is FC (SCI_BD_HIGH_PULSE_TREE)
002174 0FA174 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002176 0FA176 -> $2176                SCI_TABS_END            EQU     *
002176 0FA176 -> $FA176               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB  - print a string (non-blocking)                         #
                                      ;#    STRING_PRINT_BL  - print a string (blocking)                             #
                                      ;#    STRING_FILL_NB   - print a number of filler characters (non-blocking)    #
                                      ;#    STRING_FILL_BL   - print a number of filler characters (blocking)        #
                                      ;#    STRING_UPPER_B   - convert a character to upper case                     #
                                      ;#    STRING_LOWER_B   - convert a character to lower case                     #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
002176 0FA176 -> $0001                STRING_BLOCKING_OFF     EQU     1       ;blocking functions disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
002176 0FA176 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
002176 0FA176 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
002176 0FA176 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
002176 0FA176 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
002176 0FA176 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
002176 0FA176 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
002176 0FA176 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
002176 0FA176 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
002176 0FA176 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C52 0F9C52                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
001C52 0F9C52 -> $1C52                STRING_VARS_END         EQU     *
001C52 0F9C52 -> $F9C52               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001A40 0F9A40                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
001A40 0F9A40 -> $1A40                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
001A40 0F9A40 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
001A41 0F9A41 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
001A43 0F9A43 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
001A45 0F9A45 16 15 55                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
001A48 0F9A48 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
001A4A 0F9A4A 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
001A4C 0F9A4C MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A4C 0F9A4C 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A4F 0F9A4F 18 25 FA 8A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A53 0F9A53 8F 1C 1D                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A56 0F9A56 18 22 FA 89                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A5A 0F9A5A -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001A5A 0F9A5A -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001A5A 0F9A5A 33                                              PULB
                                                              ;Signal failure (string pointer in X)
001A5B 0F9A5B 10 FE                                           CLC
                                                              ;Done
001A5D 0F9A5D 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
001A5E 0F9A5E C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
001A60 0F9A60 16 15 55                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
001A63 0F9A63 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
001A65 0F9A65 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A65 0F9A65 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A68 0F9A68 18 25 FA 71                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A6C 0F9A6C 8F 1C 1D                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A6F 0F9A6F 18 22 FA 70                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A73 0F9A73 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001A73 0F9A73 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001A73 0F9A73 33                                              PULB
                                                              ;Signal success (next string pointer in X)
001A74 0F9A74 14 01                                           SEC
                                                              ;Done
001A76 0F9A76 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
                                      ;#Print a number of filler characters - non-blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
001A77 0F9A77 -> $1A77                STRING_FILL_NB  EQU     *
                                                              ;Print characters (requested spaces in A)
001A77 0F9A77 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
001A7A 0F9A7A 16 15 55                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
001A7D 0F9A7D 24 14                                           BCC     STRING_FILL_NB_3        ;unsuccessful
001A7F 0F9A7F 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
001A82 0F9A82 MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A82 0F9A82 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A85 0F9A85 18 25 FA 54                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A89 0F9A89 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A8C 0F9A8C 18 22 FA 53                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A90 0F9A90 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001A90 0F9A90 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
                                                              ;Signal success (remaining spaces in A)
001A90 0F9A90 14 01                                           SEC
                                                              ;Done
001A92 0F9A92 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
001A93 0F9A93 MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A93 0F9A93 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A96 0F9A96 18 25 FA 43                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001A9A 0F9A9A 8F 1C 1E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001A9D 0F9A9D 18 22 FA 42                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001AA1 0F9AA1 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001AA1 0F9AA1 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
                                                              ;Signal failure (remaining spaces in A)
001AA1 0F9AA1 10 FE                                           CLC
                                                              ;Done
001AA3 0F9AA3 3D                                              RTS
                                      ;#Print a number of filler characters - blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
001AA4 0F9AA4 -> $1AA4                STRING_CODE_END         EQU     *
001AA4 0F9AA4 -> $F9AA4               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002176 0FA176                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
002176 0FA176 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
002177 0FA177 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
002177 0FA177 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002178 0FA178 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
002179 0FA179 -> $2179                STRING_TABS_END         EQU     *
002179 0FA179 -> $FA179               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING - String printing routines                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    COP    - Watchdog handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Error detection
                                      ;---------------
                                      ;COP detection
                                      ;Clock failure detection
                                      ;Power failure detection
002179 0FA179 -> $0001                RESET_POWFAIL_ON        EQU     1               ;default is RESET_POWFAIL_ON
                                      ;Code runaway detection
                                      ;Welcome message
                                      ;---------------
                                      ;RESET_WELCOME  FCS     "Hello, this is S12CBase!"
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Flags
002179 0FA179 -> $0040                RESET_FLG_POR           EQU     $40             ;power on     (PORF)
002179 0FA179 -> $0020                RESET_FLG_POWFAIL       EQU     $20             ;power loss   (LVRF)
002179 0FA179 -> $0004                RESET_FLG_CODERUN       EQU     $04             ;code runaway (ILAF)
002179 0FA179 -> $0002                RESET_FLG_COP           EQU     $02             ;watchdog timeout
002179 0FA179 -> $0001                RESET_FLG_CLKFAIL       EQU     $01             ;clock faiure
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C52 0F9C52                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
001C52 0F9C52 -> $1C52                RESET_AUTO_LOC1         EQU     *               ;1st auto-place location
001C52 0F9C52                                                 ALIGN   1
001C52 0F9C52                         RESET_MSG               DS      2               ;error message to be displayed
001C54 0F9C54                         RESET_MSG_CHKSUM        DS      1               ;checksum for the errormessage
001C55 0F9C55 -> $1C55                RESET_AUTO_LOC2         EQU     *               ;2nd auto-place location
001C55 0F9C55 -> $1C55                RESET_FLGS              EQU     ((RESET_VARS_START&1)*RESET_AUTO_LOC1)+((~(RESET_VARS_START)&1)*RESET_AUTO_LOC2)
001C55 0F9C55                                                 DS      (~(RESET_VARS_START)&1)
001C56 0F9C56 -> $1C56                RESET_VARS_END          EQU     *
001C56 0F9C56 -> $F9C56               RESET_VARS_END_LIN      EQU     @
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;         C-flag: set if message is valid
                                      ;         none of the registers are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001AA4 0F9AA4                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#COP reset entry point
                                      ;----------------------
001AA4 0F9AA4 -> $1AA4                RESET_COP_ENTRY         EQU     RESET_EXT_ENTRY
                                      ;#Clock monitor reset entry point
                                      ;--------------------------------
001AA4 0F9AA4 -> $1AA4                RESET_CM_ENTRY          EQU     RESET_EXT_ENTRY
                                      ;#External reset entry point
                                      ;---------------------------
001AA4 0F9AA4 -> $1AA4                RESET_EXT_ENTRY         EQU     *
                                                              ;Capture CRG/CPMU flags
001AA4 0F9AA4 18 0C 00 37 1C 55                               MOVB    CRGFLG, RESET_FLGS
001AAA 0F9AAA 06 10 00                                        JOB     START_OF_CODE
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
001AAD 0F9AAD -> $1AAD                RESET_FATAL             EQU     *
001AAD 0F9AAD 7E 1C 52                                        STX     RESET_MSG
001AB0 0F9AB0 FD 1A DD                                        LDY     RESET_FATAL_1
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;;        C-flag: set if message is valid
                                      ;         none of the registers are preserved
001AB3 0F9AB3 -> $1AB3                RESET_CALC_CHECKSUM     EQU     *
                                                              ;Initialize checksum generation
001AB3 0F9AB3 87                                              CLRA
                                                              ;Get next character
001AB4 0F9AB4 E6 30                   RESET_CALC_CHECKSUM_1   LDAB    1,X+
001AB6 0F9AB6 2B 0F                                           BMI     RESET_CALC_CHECKSUM_2   ;last charcter reached
001AB8 0F9AB8 C1 20                                           CMPB    #STRING_SYM_SPACE
001ABA 0F9ABA 25 1D                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
001ABC 0F9ABC C1 7E                                           CMPB    #STRING_SYM_TILDE
001ABE 0F9ABE 22 19                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
001AC0 0F9AC0 18 06                                           ABA
001AC2 0F9AC2 45                                              ROLA
001AC3 0F9AC3 89 00                                           ADCA    #$00
001AC5 0F9AC5 20 ED                                           JOB     RESET_CALC_CHECKSUM_1
                                                              ;Last charcter reached
001AC7 0F9AC7 C1 A0                   RESET_CALC_CHECKSUM_2   CMPB    #(STRING_SYM_SPACE|$80)
001AC9 0F9AC9 25 0E                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
001ACB 0F9ACB C1 7E                                           CMPB    #(STRING_SYM_TILDE|80)
001ACD 0F9ACD 22 0A                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
                                                              ;Message is valid
001ACF 0F9ACF 18 06                                           ABA
001AD1 0F9AD1 45                                              ROLA
001AD2 0F9AD2 89 00                                           ADCA    #$00
001AD4 0F9AD4 41                                              COMA
001AD5 0F9AD5 14 01                                           SEC
001AD7 0F9AD7 05 40                                           JMP     0,Y
                                                              ;Message is invalid
001AD9 0F9AD9 10 FE                   RESET_CALC_CHECKSUM_3   CLC
001ADB 0F9ADB 05 40                                           JMP     0,Y
                                      ;#Perform a reset due to a fatal error...continued
                                                              ;Check if message is valid (checksum in A, valid/invalid in C-flag)
001ADD 0F9ADD 24 08                   RESET_FATAL_1           BCC     RESET_FATAL_3           ;clear message
001ADF 0F9ADF 7A 1C 54                                        STAA    RESET_MSG_CHKSUM
                                                              ;Trigger COP
001AE2 0F9AE2 MACRO                   RESET_FATAL_2           COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
001AE2 0F9AE2 18 0B FF 00 3F                                  MOVB    #$FF, COP_ARMREG                                 (COP_RESET)
                                                              ;Clear message
001AE7 0F9AE7 87                      RESET_FATAL_3           CLRA
001AE8 0F9AE8 C7                                              CLRB
001AE9 0F9AE9 7C 1C 52                                        STD     RESET_MSG
001AEC 0F9AEC 7A 1C 54                                        STAA    RESET_MSG_CHKSUM
001AEF 0F9AEF 20 F1                                           JOB     RESET_FATAL_2           ;trigger COP
                                      ;#Trigger a fatal error if a reset accurs
001AF1 0F9AF1 -> $1AF1                RESET_ISR_FATAL         EQU     *
001AF1 0F9AF1 MACRO                                           RESET_FATAL     RESET_STR_ILLIRQ
                                      ;#Perform a reset due to a fatal error                                           (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                                              ;BGND                                                    (RESET_FATAL)
001AF1 0F9AF1 CE 21 8A                                        LDX     #\1                                              (RESET_FATAL)
001AF4 0F9AF4 20 B7                                           JOB     RESET_FATAL                                      (RESET_FATAL)
001AF6 0F9AF6 -> $1AF6                RESET_CODE_END          EQU     *
001AF6 0F9AF6 -> $F9AF6               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002179 0FA179                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Welcome string
                                      ;#Error indicator
002179 0FA179 46 61 74 61 6C 21 A0    RESET_STR_FATAL         FCS     "Fatal! "
                                      ;#Error messages
002180 0FA180 50 6F 77 65 72 20 6C 6F RESET_STR_POWFAIL       FCS     "Power loss"
              73 F3                   
00218A 0FA18A 49 6C 6C 65 67 61 6C 20 RESET_STR_ILLIRQ        FCS     "Illegal interrupt"
              69 6E 74 65 72 72 75 70 
              F4                      
00219B 0FA19B -> $219B                RESET_TABS_END          EQU     *
00219B 0FA19B -> $FA19B               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
00219B 0FA19B -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
00219B 0FA19B -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
00219B 0FA19B -> $000A                NUM_BASE_DEF            EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C56 0F9C56                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
001C56 0F9C56 -> $1C56                NUM_VARS_END            EQU     *
001C56 0F9C56 -> $F9C56               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001AF6 0F9AF6                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
001AF6 0F9AF6 -> $1AF6                NUM_REVERSE             EQU     *
                                      ;Stack layout:
001AF6 0F9AF6 -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
001AF6 0F9AF6 -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
001AF6 0F9AF6 -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
001AF6 0F9AF6 -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
001AF6 0F9AF6 -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
001AF6 0F9AF6 -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
001AF6 0F9AF6 -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
001AF6 0F9AF6 -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
001AF6 0F9AF6 -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
001AF6 0F9AF6 -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
001AF6 0F9AF6 87                                              CLRA
001AF7 0F9AF7 18 02 80 AA                                     MOVW    0,SP, 6,-SP     ;move return address to SP+10
001AFB 0F9AFB 6C 86                                           STD     6,SP            ;initialize reverse number
001AFD 0F9AFD 18 00 84 00 00                                  MOVW    #$0000, 4,SP    ;  reverse number = base
001B02 0F9B02 18 00 82 00 00                                  MOVW    #$0000, 2,SP
001B07 0F9B07 34                                              PSHX                    ;store X at SP+8
001B08 0F9B08 35                                              PSHY                    ;store Y at SP+6
001B09 0F9B09 3B                                              PSHD                    ;store count:base at SP+4
001B0A 0F9B0A 34                                              PSHX                    ;store double value at SP+0
001B0B 0F9B0B 35                                              PSHY
                                                              ;Divide FHW by base
001B0C 0F9B0C EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
001B0E 0F9B0E 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
001B10 0F9B10 87                                              CLRA                            ;base => D
001B11 0F9B11 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001B13 0F9B13 B7 D4                                           EXG     X, D
001B15 0F9B15 18 10                                           IDIV                            ;D / X => X,  D % X => D
001B17 0F9B17 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
001B19 0F9B19 B7 45                                           TFR     D, X                    ;remainder => X
001B1B 0F9B1B 87                      NUM_REVERSE_2           CLRA                            ;base => D
001B1C 0F9B1C E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001B1E 0F9B1E ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
001B20 0F9B20 B7 D6                                           EXG     X, Y
001B22 0F9B22 B7 D4                                           EXG     X, D
001B24 0F9B24 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001B25 0F9B25 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
001B27 0F9B27 E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
001B2A 0F9B2A 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
001B2D 0F9B2D EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
001B2F 0F9B2F C9 00                                           ADCB    #$00
001B31 0F9B31 89 00                                           ADCA    #$00
001B33 0F9B33 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001B35 0F9B35 EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
001B37 0F9B37 C9 00                                           ADCB    #$00
001B39 0F9B39 89 00                                           ADCA    #$00
001B3B 0F9B3B 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
001B3D 0F9B3D 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
001B3F 0F9B3F EC 82                                           LDD     NUM_REVERSE_FLW,SP
001B41 0F9B41 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
001B43 0F9B43 EC 80                                           LDD     NUM_REVERSE_FHW,SP
001B45 0F9B45 27 28                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
001B47 0F9B47 ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
001B4A 0F9B4A 87                                              CLRA
001B4B 0F9B4B E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001B4D 0F9B4D 13                                              EMUL                            ;Y * D => Y:D
001B4E 0F9B4E 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
001B51 0F9B51 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
001B53 0F9B53 B7 C6                                           EXG     D, Y
001B55 0F9B55 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001B57 0F9B57 87                                              CLRA
001B58 0F9B58 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001B5A 0F9B5A 13                                              EMUL                            ;Y * D => Y:D
001B5B 0F9B5B E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
001B5D 0F9B5D 6C 8E                                           STD     NUM_REVERSE_RMW,SP
                                                              ;Multiply RHW by base (carry-over in Y)
001B5F 0F9B5F EC 8C                                           LDD     NUM_REVERSE_RHW,SP
001B61 0F9B61 B7 C6                                           EXG     D, Y
001B63 0F9B63 6C 8C                                           STD     NUM_REVERSE_RHW,SP
001B65 0F9B65 87                                              CLRA
001B66 0F9B66 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001B68 0F9B68 13                                              EMUL                            ;Y * D => Y:D
001B69 0F9B69 E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
001B6B 0F9B6B 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
001B6D 0F9B6D 20 9D                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
001B6F 0F9B6F MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001B6F 0F9B6F 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001B72 0F9B72 18 25 F9 67                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001B76 0F9B76 8F 1C 0E                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001B79 0F9B79 18 22 F9 66                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001B7D 0F9B7D -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001B7D 0F9B7D -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001B7D 0F9B7D 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
001B7F 0F9B7F 3A                                              PULD                            ;
001B80 0F9B80 31                                              PULY
001B81 0F9B81 30                                              PULX
                                                              ;Done
001B82 0F9B82 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
001B83 0F9B83 -> $1B83                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
001B83 0F9B83 -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
001B83 0F9B83 -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
001B83 0F9B83 -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
001B83 0F9B83 -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
001B83 0F9B83 -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
001B83 0F9B83 -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
001B83 0F9B83 -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
001B83 0F9B83 -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
001B83 0F9B83 34                                              PSHX                                    ;store X at SP+8
001B84 0F9B84 35                                              PSHY                                    ;store Y at SP+6
001B85 0F9B85 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
001B86 0F9B86 MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
001B86 0F9B86 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
001B86 0F9B86 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B86 0F9B86 8F 1C 09                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B89 0F9B89 18 25 F9 50                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B8D 0F9B8D 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B90 0F9B90 18 22 F9 4F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B94 0F9B94 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B94 0F9B94 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001B94 0F9B94 16 16 47                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
001B97 0F9B97 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
001B9B 0F9B9B ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
001B9D 0F9B9D 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
001B9F 0F9B9F B7 65                                           TFR     Y, X
001BA1 0F9BA1 87                                              CLRA                            ;base => D
001BA2 0F9BA2 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001BA4 0F9BA4 B7 D4                                           EXG     X, D
001BA6 0F9BA6 18 10                                           IDIV                            ;D / X => X,  D % X => D
001BA8 0F9BA8 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
001BAA 0F9BAA B7 46                                           TFR     D, Y                    ;remainder => Y
001BAC 0F9BAC 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
001BAD 0F9BAD E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001BAF 0F9BAF EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
001BB1 0F9BB1 B7 C5                                           EXG     D, X
001BB3 0F9BB3 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001BB4 0F9BB4 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
001BB6 0F9BB6 B7 46                                           TFR     D, Y                    ;remainder => Y
001BB8 0F9BB8 EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
001BBA 0F9BBA 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001BBB 0F9BBB 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
001BBD 0F9BBD CE 21 9B                                        LdX     #NUM_SYMTAB
001BC0 0F9BC0 E6 E5                                           LDAB    B,X
001BC2 0F9BC2 16 15 55                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
001BC5 0F9BC5 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
001BC8 0F9BC8 EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
001BCA 0F9BCA 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
001BCC 0F9BCC EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
001BCE 0F9BCE 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
001BD0 0F9BD0 MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001BD0 0F9BD0 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001BD3 0F9BD3 18 25 F9 06                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001BD7 0F9BD7 8F 1C 12                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001BDA 0F9BDA 18 22 F9 05                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001BDE 0F9BDE -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001BDE 0F9BDE -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001BDE 0F9BDE 14 01                                           SEC
001BE0 0F9BE0 3A                      NUM_REVPRINT_NB_3       PULD
001BE1 0F9BE1 31                                              PULY
001BE2 0F9BE2 30                                              PULX
                                                              ;Done
001BE3 0F9BE3 3D                                              RTS
                                                              ;Printing incomplete
001BE4 0F9BE4 MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001BE4 0F9BE4 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001BE7 0F9BE7 18 25 F8 F2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001BEB 0F9BEB 8F 1C 12                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
001BEE 0F9BEE 18 22 F8 F1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
001BF2 0F9BF2 -> $14E3                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
001BF2 0F9BF2 -> $14DD                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
001BF2 0F9BF2 10 FE                                           CLC
001BF4 0F9BF4 20 EA                                           JOB     NUM_REVPRINT_NB_3
001BF6 0F9BF6 -> $1BF6                NUM_CODE_END            EQU     *
001BF6 0F9BF6 -> $F9BF6               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00219B 0FA19B                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
00219B 0FA19B 30                      NUM_SYMTAB              DB      "0"
00219C 0FA19C 31                                              DB      "1"
00219D 0FA19D 32                                              DB      "2"
00219E 0FA19E 33                                              DB      "3"
00219F 0FA19F 34                                              DB      "4"
0021A0 0FA1A0 35                                              DB      "5"
0021A1 0FA1A1 36                                              DB      "6"
0021A2 0FA1A2 37                                              DB      "7"
0021A3 0FA1A3 38                                              DB      "8"
0021A4 0FA1A4 39                                              DB      "9"
0021A5 0FA1A5 41                                              DB      "A"
0021A6 0FA1A6 42                                              DB      "B"
0021A7 0FA1A7 43                                              DB      "C"
0021A8 0FA1A8 44                                              DB      "D"
0021A9 0FA1A9 45                                              DB      "E"
0021AA 0FA1AA 46                                              DB      "F"
0021AB 0FA1AB AB                      NUM_SYMTAB_END  DB      *
0021AC 0FA1AC -> $21AC                NUM_TABS_END            EQU     *
0021AC 0FA1AC -> $FA1AC               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - Non-Volatile Memory Driver (Mini-BDM-Pod)                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module erase and programing routines for the on-chip NVMs.          #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;  Flash Map:
                                      ;  ----------
                                      ;  Block 3                Block 2                Block 1S               Block 1N               Block 0
                                      ;  +---------+ $70_0000   +---------+ $74_0000   +---------+ $78_0000   +---------+ $7A_0000   +---------+ $7C_0000
                                      ;  | Page C0 |            | Page D0 |            | Page E0 |            | Page E8 |            | Page F0 |
                                      ;  +---------+ $70_4000   +---------+ $74_4000   +---------+ $78_4000   +---------+ $7A_4000   +---------+ $7C_4000
                                      ;  | Page C1 |            | Page D1 |            | Page E1 |            | Page E9 |            | Page F1 |
                                      ;  +---------+ $70_8000   +---------+ $74_8000   +---------+ $78_8000   +---------+ $7A_8000   +---------+ $7C_8000
                                      ;  | Page C2 |            | Page D2 |            | Page E2 |            | Page EA |            | Page F2 |
                                      ;  +---------+ $70_C000   +---------+ $74_C000   +---------+ $78_C000   +---------+ $7A_C000   +---------+ $7C_C000
                                      ;  | Page C3 |            | Page D3 |            | Page E3 |            | Page EB |            | Page F3 |
                                      ;  +---------+ $71_0000   +---------+ $74_0000   +---------+ $79_0000   +---------+ $7B_0000   +---------+ $7D_0000
                                      ;  | Page C4 |            | Page D4 |            | Page E4 |            | Page EC |            | Page F4 |
                                      ;  +---------+ $71_4000   +---------+ $75_4000   +---------+ $79_4000   +---------+ $7B_4000   +---------+ $7D_4000
                                      ;  | Page C5 |            | Page D5 |            | Page E5 |            | Page ED |            | Page F5 |
                                      ;  +---------+ $71_8000   +---------+ $75_8000   +---------+ $79_8000   +---------+ $7B_8000   +---------+ $7D_8000
                                      ;  | Page C6 |            | Page D6 |            | Page E6 |            | Page EE |            | Page F6 |
                                      ;  +---------+ $71_C000   +---------+ $75_C000   +---------+ $79_C000   +---------+ $7B_C000   +---------+ $7D_C000
                                      ;  | Page C7 |            | Page D7 |            | Page E7 |            | Page EF |            | Page F7 |
                                      ;  +---------+ $72_0000   +---------+ $75_0000   +---------+            +---------+            +---------+ $7E_0000
                                      ;  | Page C8 |            | Page D8 |                                                          | Page F8 |
                                      ;  +---------+ $72_4000   +---------+ $76_4000                                                 +---------+ $7E_4000
                                      ;  | Page C9 |            | Page D9 |                                                          | Page F9 |
                                      ;  +---------+ $72_8000   +---------+ $76_8000                                                 +---------+ $7E_8000
                                      ;  | Page CA |            | Page DA |                                                          | Page FA |
                                      ;  +---------+ $72_C000   +---------+ $76_C000                                                 +---------+ $7E_C000
                                      ;  | Page CB |            | Page DB |                                                          | Page FB |
                                      ;  +---------+ $73_0000   +---------+ $77_0000                                                 +---------+ $7F_0000
                                      ;  | Page CC |            | Page DC |                                                          | Page FC |
                                      ;  +---------+ $73_4000   +---------+ $77_4000                                                 +---------+ $7F_4000
                                      ;  | Page CD |            | Page DD |                                                          | Program |
                                      ;  +---------+ $73_8000   +---------+ $77_8000                                                 +---------+ $7F_8000
                                      ;  | Page CE |            | Page DE |                                                          | Page FE |
                                      ;  +---------+ $73_C000   +---------+ $77_C000                                                 +---------+
                                      ;  | Page CF |            | Page DF |                                                          | Program |
                                      ;  +---------+            +---------+                                                          +---------+
                                      ;
                                      ;  Status Byte:
                                      ;  ------------
                                      ;  Last byte of each page (local address BFFF).
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Oscillator frequency
                                      ;NVM settings
                                      ;-------------
                                      ;Clock divider
0021AC 0FA1AC -> $0009                NVM_FDIV_VAL            EQU     ((CLOCK_OSC_FREQ/1000000)-1) ;default is $0A
                                      ;Flash size
0021AC 0FA1AC -> $0001                NVM_1024K               EQU     1               ;default is 1MB
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Status byte
0021AC 0FA1AC -> $BFFF                NVM_SBYTE_ADDR          EQU     $BFFF
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C56 0F9C56                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
001C56 0F9C56 -> $1C56                NVM_VARS_END            EQU     *
001C56 0F9C56 -> $F9C56               NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;                       ;Flash configuration
                                      ;                       MOVB    #NVM_FDIV_VAL, FCLKDIV          ;set prescaler
                                      ;                       MOVW    #((IGNSF<<8)|DFDIE), FCNFG
                                      ;                       MOVB    #(FPOPEN|FPHS1|FPHS0|FPLDIS), FPROT
                                      ;
                                      ;                       ;Select the most recent PPAGE
                                      ;                       NVM_SET_PPAGE
                                      ;#Set PPAGE
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: ? bytes
                                      ;         X, Y and D are preserved
                                      ;#Invalidate current page and start a new one
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: ? bytes
                                      ;         X, Y and D are preserved
                                      ;#Erase all flash pages
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: ? bytes
                                      ;         X, Y and D are preserved
                                      ;#Copy data string into flash
                                      ; args:   X: start of source (RAM address)
                                      ;         Y: start of destination (paged flash address)
                                      ;         D: number of bytes to copy
                                      ; result: C-flag: set if successful
                                      ; SSTACK: ? bytes
                                      ;         X, Y and D are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001BF6 0F9BF6                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
                                      ;#Set PPAGE
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: ? bytes
                                      ;         X, Y and D are preserved
001BF6 0F9BF6 -> $1BF6                NVM_SET_PPAGE           EQU     *
                                                              ;Set first PPAGE
001BF6 0F9BF6 18 0B C0 00 15                                  MOVB    #$C0, PPAGE
                                      ;#Erase flash
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: ? bytes
                                      ;         X, Y and D are preserved
001BFB 0F9BFB -> $1BFB                NVM_ERASE_FLASH         EQU     *
                                                              ;Command complete interrupt
001BFB 0F9BFB -> $1BFB                NVM_ISR_CC              EQU     *
                                                              ;Error interrupt
001BFB 0F9BFB -> $1BFB                NVM_ISR_ERROR           EQU     *
001BFB 0F9BFB -> $1BFB                NVM_CODE_END            EQU     *
001BFB 0F9BFB -> $F9BFB               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0021AC 0FA1AC                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
0021AC 0FA1AC -> $21AC                NVM_TABS_END            EQU     *
0021AC 0FA1AC -> $FA1AC               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (Mini-BDM-Pod)                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Error handler                                                   #
                                      ;#    BDM    - BDM driver                                                      #
                                      ;#    CLOCK  - Clock handler                                                   #
                                      ;#    SCI    - UART driver                                                     #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    July 31, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added dummy vectors                                                  #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Restructured table                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001C56 0F9C56                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001C56 0F9C56 -> $1C56                VECTAB_VARS_END         EQU     *
001C56 0F9C56 -> $F9C56               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
001BFB 0F9BFB -> $1BFB                VECTAB_CODE_END         EQU     *
001BFB 0F9BFB -> $F9BFB               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0021AC 0FA1AC                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
0021AC 0FA1AC 00                      ISR_SPURIOUS            BGND                            ;vector base + $10
0021AD 0FA1AD 00                      ISR_SYS                 BGND                            ;vector base + $12
0021AE 0FA1AE 00                      ISR_MPU                 BGND                            ;vector base + $14
0021AF 0FA1AF 00                      ISR_XGSWE               BGND                            ;vector base + $16
0021B0 0FA1B0 00                      ISR_RES18               BGND                            ;vector base + $18
0021B1 0FA1B1 00                      ISR_RES1A               BGND                            ;vector base + $1A
0021B2 0FA1B2 00                      ISR_RES1C               BGND                            ;vector base + $1C
0021B3 0FA1B3 00                      ISR_RES1E               BGND                            ;vector base + $1E
0021B4 0FA1B4 00                      ISR_RES20               BGND                            ;vector base + $20
0021B5 0FA1B5 00                      ISR_RES22               BGND                            ;vector base + $22
0021B6 0FA1B6 00                      ISR_RES24               BGND                            ;vector base + $24
0021B7 0FA1B7 00                      ISR_RES26               BGND                            ;vector base + $26
0021B8 0FA1B8 00                      ISR_RES28               BGND                            ;vector base + $28
0021B9 0FA1B9 00                      ISR_RES2A               BGND                            ;vector base + $2A
0021BA 0FA1BA 00                      ISR_RES2C               BGND                            ;vector base + $2C
0021BB 0FA1BB 00                      ISR_RES2E               BGND                            ;vector base + $2E
0021BC 0FA1BC 00                      ISR_RES30               BGND                            ;vector base + $30
0021BD 0FA1BD 00                      ISR_RES32               BGND                            ;vector base + $32
0021BE 0FA1BE 00                      ISR_RES34               BGND                            ;vector base + $34
0021BF 0FA1BF 00                      ISR_RES36               BGND                            ;vector base + $36
0021C0 0FA1C0 00                      ISR_RES38               BGND                            ;vector base + $38
0021C1 0FA1C1 00                      ISR_RES3A               BGND                            ;vector base + $3A
0021C2 0FA1C2 00                      ISR_ATD1COMP            BGND                            ;vector base + $3C
0021C3 0FA1C3 -> $150E                ISR_ATD0COMP            EQU     TVMON_ISR
0021C3 0FA1C3 00                      ISR_TIM_PAIE            BGND                            ;vector base + $40
0021C4 0FA1C4 00                      ISR_TIM_PAOV            BGND                            ;vector base + $42
0021C5 0FA1C5 00                      ISR_TIM_TOV             BGND                            ;vector base + $44
0021C6 0FA1C6 00                      ISR_TIM_TC7             BGND                            ;vector base + $46
0021C7 0FA1C7 00                      ISR_TIM_TC6             BGND                            ;vector base + $48
0021C8 0FA1C8 00                      ISR_TIM_TC5             BGND                            ;vector base + $4A
0021C9 0FA1C9 00                      ISR_TIM_TC4             BGND                            ;vector base + $4C
0021CA 0FA1CA 00                      ISR_TIM_TC3             BGND                            ;vector base + $4E
0021CB 0FA1CB 00                      ISR_TIM_TC2             BGND                            ;vector base + $50
0021CC 0FA1CC 00                      ISR_TIM_TC1             BGND                            ;vector base + $52
0021CD 0FA1CD 00                      ISR_TIM_TC0             BGND                            ;vector base + $54
0021CE 0FA1CE 00                      ISR_SCI7                BGND                            ;vector base + $56
0021CF 0FA1CF 00                      ISR_PITCH7              BGND                            ;vector base + $58
0021D0 0FA1D0 00                      ISR_PITCH6              BGND                            ;vector base + $5A
0021D1 0FA1D1 00                      ISR_PITCH5              BGND                            ;vector base + $5C
0021D2 0FA1D2 00                      ISR_PITCH4              BGND                            ;vector base + $5E
0021D3 0FA1D3 00                      ISR_RES60               BGND                            ;vector base + $60
0021D4 0FA1D4 00                      ISR_RES62               BGND                            ;vector base + $62
0021D5 0FA1D5 00                      ISR_XGSWT7              BGND                            ;vector base + $64
0021D6 0FA1D6 00                      ISR_XGSWT6              BGND                            ;vector base + $66
0021D7 0FA1D7 00                      ISR_XGSWT5              BGND                            ;vector base + $68
0021D8 0FA1D8 00                      ISR_XGSWT4              BGND                            ;vector base + $6A
0021D9 0FA1D9 00                      ISR_XGSWT3              BGND                            ;vector base + $6C
0021DA 0FA1DA 00                      ISR_XGSWT2              BGND                            ;vector base + $6E
0021DB 0FA1DB 00                      ISR_XGSWT1              BGND                            ;vector base + $70
0021DC 0FA1DC 00                      ISR_XGSWT0              BGND                            ;vector base + $72
0021DD 0FA1DD 00                      ISR_PITCH3              BGND                            ;vector base + $74
0021DE 0FA1DE 00                      ISR_PITCH2              BGND                            ;vector base + $76
0021DF 0FA1DF 00                      ISR_PITCH1              BGND                            ;vector base + $78
0021E0 0FA1E0 00                      ISR_PITCH0              BGND                            ;vector base + $7A
0021E1 0FA1E1 00                      ISR_HT                  BGND                            ;vector base + $7C
0021E2 0FA1E2 00                      ISR_API                 BGND                            ;vector base + $7E
0021E3 0FA1E3 00                      ISR_LVI                 BGND                            ;vector base + $80
0021E4 0FA1E4 00                      ISR_IIC1                BGND                            ;vector base + $82
0021E5 0FA1E5 00                      ISR_SCI5                BGND                            ;vector base + $84
0021E6 0FA1E6 00                      ISR_SCI4                BGND                            ;vector base + $86
0021E7 0FA1E7 00                      ISR_SCI3                BGND                            ;vector base + $88
0021E8 0FA1E8 00                      ISR_SCI2                BGND                            ;vector base + $8A
0021E9 0FA1E9 00                      ISR_PWMSDN              BGND                            ;vector base + $8C
0021EA 0FA1EA 00                      ISR_PORTP               BGND                            ;vector base + $8E
0021EB 0FA1EB 00                      ISR_CAN4TX              BGND                            ;vector base + $90
0021EC 0FA1EC 00                      ISR_CAN4RX              BGND                            ;vector base + $92
0021ED 0FA1ED 00                      ISR_CAN4ERR             BGND                            ;vector base + $94
0021EE 0FA1EE 00                      ISR_CAN4WUP             BGND                            ;vector base + $96
0021EF 0FA1EF 00                      ISR_CAN3TX              BGND                            ;vector base + $98
0021F0 0FA1F0 00                      ISR_CAN3RX              BGND                            ;vector base + $9A
0021F1 0FA1F1 00                      ISR_CAN3ERR             BGND                            ;vector base + $9C
0021F2 0FA1F2 00                      ISR_CAN3WUP             BGND                            ;vector base + $9E
0021F3 0FA1F3 00                      ISR_CAN2TX              BGND                            ;vector base + $A0
0021F4 0FA1F4 00                      ISR_CAN2RX              BGND                            ;vector base + $A2
0021F5 0FA1F5 00                      ISR_CAN2ERR             BGND                            ;vector base + $A4
0021F6 0FA1F6 00                      ISR_CAN2WUP             BGND                            ;vector base + $A6
0021F7 0FA1F7 00                      ISR_CAN1TX              BGND                            ;vector base + $A8
0021F8 0FA1F8 00                      ISR_CAN1RX              BGND                            ;vector base + $AA
0021F9 0FA1F9 00                      ISR_CAN1ERR             BGND                            ;vector base + $AC
0021FA 0FA1FA 00                      ISR_CAN1WUP             BGND                            ;vector base + $AE
0021FB 0FA1FB 00                      ISR_CAN0TX              BGND                            ;vector base + $A0
0021FC 0FA1FC 00                      ISR_CAN0RX              BGND                            ;vector base + $B2
0021FD 0FA1FD 00                      ISR_CAN0ERR             BGND                            ;vector base + $B4
0021FE 0FA1FE 00                      ISR_CAN0WUP             BGND                            ;vector base + $B6
0021FF 0FA1FF 00                      ISR_FLASH               BGND                            ;vector base + $B8
002200 0FA200 00                      ISR_FLASHFLT            BGND                            ;vector base + $BA
002201 0FA201 00                      ISR_SPI2                BGND                            ;vector base + $BC
002202 0FA202 00                      ISR_SPI1                BGND                            ;vector base + $BE
002203 0FA203 00                      ISR_IIC0                BGND                            ;vector base + $C0
002204 0FA204 00                      ISR_SCI6                BGND                            ;vector base + $C2
002205 0FA205 00                      ISR_SCM                 BGND                            ;vector base + $C4
002206 0FA206 -> $14F5                ISR_PLLLOCK             EQU     CLOCK_ISR
002206 0FA206 00                      ISR_ECT_PBOV            BGND                            ;vector base + $C8
002207 0FA207 00                      ISR_ECT_MODCNT          BGND                            ;vector base + $CA
002208 0FA208 00                      ISR_PORTH               BGND                            ;vector base + $CC
002209 0FA209 00                      ISR_PORTJ               BGND                            ;vector base + $CC
00220A 0FA20A 00                      ISR_ATD1                BGND                            ;vector base + $D0
00220B 0FA20B 00                      ISR_ATD0                BGND                            ;vector base + $D2
00220C 0FA20C 00                      ISR_SCI1                BGND                            ;vector base + $D4
00220D 0FA20D -> $18BC                ISR_SCI0                EQU     SCI_ISR_RXTX
00220D 0FA20D 00                      ISR_SPI0                BGND                            ;vector base + $D8
00220E 0FA20E 00                      ISR_ECT_PAIE            BGND                            ;vector base + $DA
00220F 0FA20F 00                      ISR_ECT_PAOV            BGND                            ;vector base + $DC
002210 0FA210 00                      ISR_ECT_TOV             BGND                            ;vector base + $DE
002211 0FA211 00                      ISR_ECT_TC7             BGND                            ;vector base + $E0
002212 0FA212 00                      ISR_ECT_TC6             BGND                            ;vector base + $E2
002213 0FA213 00                      ISR_ECT_TC5             BGND                            ;vector base + $E4
002214 0FA214 00                      ISR_ECT_TC4             BGND                            ;vector base + $E6
002215 0FA215 -> $17D3                ISR_ECT_TC3             EQU     SCI_ISR_DELAY
002215 0FA215 00                      ISR_ECT_TC2             BGND                            ;vector base + $EA
002216 0FA216 00                      ISR_ECT_TC1             BGND                            ;vector base + $EC
002217 0FA217 -> $198F                ISR_ECT_TC0             EQU     SCI_ISR_BD_NEPE
002217 0FA217 00                      ISR_RTI                 BGND                            ;vector base + $F0
002218 0FA218 00                      ISR_IRQ                 BGND                            ;vector base + $F2
002219 0FA219 00                      ISR_XIRQ                BGND                            ;vector base + $F4
00221A 0FA21A 00                      ISR_SWI                 BGND                            ;vector base + $F6
00221B 0FA21B 00                      ISR_TRAP                BGND                            ;vector base + $F8
                                      ;#Code entry points
                                      ;#-----------------
00221C 0FA21C -> $1000                RES_COP                 EQU     RES_EXT
00221C 0FA21C -> $1000                RES_CM                  EQU     RES_EXT
00221C 0FA21C -> $1000                RES_EXT                 EQU     START_OF_CODE
00221C 0FA21C -> $221C                VECTAB_TABS_END         EQU     *
00221C 0FA21C -> $FA21C               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12XEP100 Vector Table                                                      #
                                      ;###############################################################################
007F10 0FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN
007F10 0FFF10 21 AC                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $10
007F12 0FFF12 21 AD                   VEC_SYS                 DW      ISR_SYS                 ;vector base + $12
007F14 0FFF14 21 AE                   VEC_MPU                 DW      ISR_MPU                 ;vector base + $14
007F16 0FFF16 21 AF                   VEC_XGSWE               DW      ISR_XGSWE               ;vector base + $16
007F18 0FFF18 21 B0                   VEC_RES18               DW      ISR_RES18               ;vector base + $18
007F1A 0FFF1A 21 B1                   VEC_RES1A               DW      ISR_RES1A               ;vector base + $1A
007F1C 0FFF1C 21 B2                   VEC_RES1C               DW      ISR_RES1C               ;vector base + $1C
007F1E 0FFF1E 21 B3                   VEC_RES1E               DW      ISR_RES1E               ;vector base + $1E
007F20 0FFF20 21 B4                   VEC_RES20               DW      ISR_RES20               ;vector base + $20
007F22 0FFF22 21 B5                   VEC_RES22               DW      ISR_RES22               ;vector base + $22
007F24 0FFF24 21 B6                   VEC_RES24               DW      ISR_RES24               ;vector base + $24
007F26 0FFF26 21 B7                   VEC_RES26               DW      ISR_RES26               ;vector base + $26
007F28 0FFF28 21 B8                   VEC_RES28               DW      ISR_RES28               ;vector base + $28
007F2A 0FFF2A 21 B9                   VEC_RES2A               DW      ISR_RES2A               ;vector base + $2A
007F2C 0FFF2C 21 BA                   VEC_RES2C               DW      ISR_RES2C               ;vector base + $2C
007F2E 0FFF2E 21 BB                   VEC_RES2E               DW      ISR_RES2E               ;vector base + $2E
007F30 0FFF30 21 BC                   VEC_RES30               DW      ISR_RES30               ;vector base + $30
007F32 0FFF32 21 BD                   VEC_RES32               DW      ISR_RES32               ;vector base + $32
007F34 0FFF34 21 BE                   VEC_RES34               DW      ISR_RES34               ;vector base + $34
007F36 0FFF36 21 BF                   VEC_RES36               DW      ISR_RES36               ;vector base + $36
007F38 0FFF38 21 C0                   VEC_RES38               DW      ISR_RES38               ;vector base + $38
007F3A 0FFF3A 21 C1                   VEC_RES3A               DW      ISR_RES3A               ;vector base + $3A
007F3C 0FFF3C 21 C2                   VEC_ATD1COMP            DW      ISR_ATD1COMP            ;vector base + $3C
007F3E 0FFF3E 15 0E                   VEC_ATD0COMP            DW      ISR_ATD0COMP            ;vector base + $3E
007F40 0FFF40 21 C3                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $40
007F42 0FFF42 21 C4                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $42
007F44 0FFF44 21 C5                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $44
007F46 0FFF46 21 C6                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $46
007F48 0FFF48 21 C7                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $48
007F4A 0FFF4A 21 C8                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $4A
007F4C 0FFF4C 21 C9                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $4C
007F4E 0FFF4E 21 CA                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $4E
007F50 0FFF50 21 CB                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $50
007F52 0FFF52 21 CC                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $52
007F54 0FFF54 21 CD                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $54
007F56 0FFF56 21 CE                   VEC_SCI7                DW      ISR_SCI7                ;vector base + $56
007F58 0FFF58 21 CF                   VEC_PITCH7              DW      ISR_PITCH7              ;vector base + $58
007F5A 0FFF5A 21 D0                   VEC_PITCH6              DW      ISR_PITCH6              ;vector base + $5A
007F5C 0FFF5C 21 D1                   VEC_PITCH5              DW      ISR_PITCH5              ;vector base + $5C
007F5E 0FFF5E 21 D2                   VEC_PITCH4              DW      ISR_PITCH4              ;vector base + $5E
007F60 0FFF60 21 D3                   VEC_RES60               DW      ISR_RES60               ;vector base + $60
007F62 0FFF62 21 D4                   VEC_RES62               DW      ISR_RES62               ;vector base + $62
007F64 0FFF64 21 D5                   VEC_XGSWT7              DW      ISR_XGSWT7              ;vector base + $64
007F66 0FFF66 21 D6                   VEC_XGSWT6              DW      ISR_XGSWT6              ;vector base + $66
007F68 0FFF68 21 D7                   VEC_XGSWT5              DW      ISR_XGSWT5              ;vector base + $68
007F6A 0FFF6A 21 D8                   VEC_XGSWT4              DW      ISR_XGSWT4              ;vector base + $6A
007F6C 0FFF6C 21 D9                   VEC_XGSWT3              DW      ISR_XGSWT3              ;vector base + $6C
007F6E 0FFF6E 21 DA                   VEC_XGSWT2              DW      ISR_XGSWT2              ;vector base + $6E
007F70 0FFF70 21 DB                   VEC_XGSWT1              DW      ISR_XGSWT1              ;vector base + $70
007F72 0FFF72 21 DC                   VEC_XGSWT0              DW      ISR_XGSWT0              ;vector base + $72
007F74 0FFF74 21 DD                   VEC_PITCH3              DW      ISR_PITCH3              ;vector base + $74
007F76 0FFF76 21 DE                   VEC_PITCH2              DW      ISR_PITCH2              ;vector base + $76
007F78 0FFF78 21 DF                   VEC_PITCH1              DW      ISR_PITCH1              ;vector base + $78
007F7A 0FFF7A 21 E0                   VEC_PITCH0              DW      ISR_PITCH0              ;vector base + $7A
007F7C 0FFF7C 21 E1                   VEC_HT                  DW      ISR_HT                  ;vector base + $7C
007F7E 0FFF7E 21 E2                   VEC_API                 DW      ISR_API                 ;vector base + $7E
007F80 0FFF80 21 E3                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $80
007F82 0FFF82 21 E4                   VEC_IIC1                DW      ISR_IIC1                ;vector base + $82
007F84 0FFF84 21 E5                   VEC_SCI5                DW      ISR_SCI5                ;vector base + $84
007F86 0FFF86 21 E6                   VEC_SCI4                DW      ISR_SCI4                ;vector base + $86
007F88 0FFF88 21 E7                   VEC_SCI3                DW      ISR_SCI3                ;vector base + $88
007F8A 0FFF8A 21 E8                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $8A
007F8C 0FFF8C 21 E9                   VEC_PWMSDN              DW      ISR_PWMSDN              ;vector base + $8C
007F8E 0FFF8E 21 EA                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
007F90 0FFF90 21 EB                   VEC_CAN4TX              DW      ISR_CAN4TX              ;vector base + $90
007F92 0FFF92 21 EC                   VEC_CAN4RX              DW      ISR_CAN4RX              ;vector base + $92
007F94 0FFF94 21 ED                   VEC_CAN4ERR             DW      ISR_CAN4ERR             ;vector base + $94
007F96 0FFF96 21 EE                   VEC_CAN4WUP             DW      ISR_CAN4WUP             ;vector base + $96
007F98 0FFF98 21 EF                   VEC_CAN3TX              DW      ISR_CAN3TX              ;vector base + $98
007F9A 0FFF9A 21 F0                   VEC_CAN3RX              DW      ISR_CAN3RX              ;vector base + $9A
007F9C 0FFF9C 21 F1                   VEC_CAN3ERR             DW      ISR_CAN3ERR             ;vector base + $9C
007F9E 0FFF9E 21 F2                   VEC_CAN3WUP             DW      ISR_CAN3WUP             ;vector base + $9E
007FA0 0FFFA0 21 F3                   VEC_CAN2TX              DW      ISR_CAN2TX              ;vector base + $A0
007FA2 0FFFA2 21 F4                   VEC_CAN2RX              DW      ISR_CAN2RX              ;vector base + $A2
007FA4 0FFFA4 21 F5                   VEC_CAN2ERR             DW      ISR_CAN2ERR             ;vector base + $A4
007FA6 0FFFA6 21 F6                   VEC_CAN2WUP             DW      ISR_CAN2WUP             ;vector base + $A6
007FA8 0FFFA8 21 F7                   VEC_CAN1TX              DW      ISR_CAN1TX              ;vector base + $A8
007FAA 0FFFAA 21 F8                   VEC_CAN1RX              DW      ISR_CAN1RX              ;vector base + $AA
007FAC 0FFFAC 21 F9                   VEC_CAN1ERR             DW      ISR_CAN1ERR             ;vector base + $AC
007FAE 0FFFAE 21 FA                   VEC_CAN1WUP             DW      ISR_CAN1WUP             ;vector base + $AE
007FB0 0FFFB0 21 FB                   VEC_CAN0TX              DW      ISR_CAN0TX              ;vector base + $A0
007FB2 0FFFB2 21 FC                   VEC_CAN0RX              DW      ISR_CAN0RX              ;vector base + $B2
007FB4 0FFFB4 21 FD                   VEC_CAN0ERR             DW      ISR_CAN0ERR             ;vector base + $B4
007FB6 0FFFB6 21 FE                   VEC_CAN0WUP             DW      ISR_CAN0WUP             ;vector base + $B6
007FB8 0FFFB8 21 FF                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
007FBA 0FFFBA 22 00                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
007FBC 0FFFBC 22 01                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
007FBE 0FFFBE 22 02                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
007FC0 0FFFC0 22 03                   VEC_IIC0                DW      ISR_IIC0                ;vector base + $C0
007FC2 0FFFC2 22 04                   VEC_SCI6                DW      ISR_SCI6                ;vector base + $C2
007FC4 0FFFC4 22 05                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
007FC6 0FFFC6 14 F5                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
007FC8 0FFFC8 22 06                   VEC_ECT_PBOV            DW      ISR_ECT_PBOV            ;vector base + $C8
007FCA 0FFFCA 22 07                   VEC_ECT_MODCNT          DW      ISR_ECT_MODCNT          ;vector base + $CA
007FCC 0FFFCC 22 08                   VEC_PORTH               DW      ISR_PORTH               ;vector base + $CC
007FCE 0FFFCE 22 09                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CE
007FD0 0FFFD0 22 0A                   VEC_ATD1                DW      ISR_ATD1                ;vector base + $D0
007FD2 0FFFD2 22 0B                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
007FD4 0FFFD4 22 0C                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
007FD6 0FFFD6 18 BC                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
007FD8 0FFFD8 22 0D                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
007FDA 0FFFDA 22 0E                   VEC_ECT_PAIE            DW      ISR_ECT_PAIE            ;vector base + $DA
007FDC 0FFFDC 22 0F                   VEC_ECT_PAOV            DW      ISR_ECT_PAOV            ;vector base + $DC
007FDE 0FFFDE 22 10                   VEC_ECT_TOV             DW      ISR_ECT_TOV             ;vector base + $DE
007FE0 0FFFE0 22 11                   VEC_ECT_TC7             DW      ISR_ECT_TC7             ;vector base + $E0
007FE2 0FFFE2 22 12                   VEC_ECT_TC6             DW      ISR_ECT_TC6             ;vector base + $E2
007FE4 0FFFE4 22 13                   VEC_ECT_TC5             DW      ISR_ECT_TC5             ;vector base + $E4
007FE6 0FFFE6 22 14                   VEC_ECT_TC4             DW      ISR_ECT_TC4             ;vector base + $E6
007FE8 0FFFE8 17 D3                   VEC_ECT_TC3             DW      ISR_ECT_TC3             ;vector base + $E8
007FEA 0FFFEA 22 15                   VEC_ECT_TC2             DW      ISR_ECT_TC2             ;vector base + $EA
007FEC 0FFFEC 22 16                   VEC_ECT_TC1             DW      ISR_ECT_TC1             ;vector base + $EC
007FEE 0FFFEE 19 8F                   VEC_ECT_TC0             DW      ISR_ECT_TC0             ;vector base + $EE
007FF0 0FFFF0 22 17                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
007FF2 0FFFF2 22 18                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
007FF4 0FFFF4 22 19                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
007FF6 0FFFF6 22 1A                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
007FF8 0FFFF8 22 1B                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
007FFA 0FFFFA 10 00                   VEC_RESET_COP           DW      RES_COP                 ;vector base + $FA
007FFC 0FFFFC 10 00                   VEC_RESET_CM            DW      RES_CM                  ;vector base + $FC
007FFE 0FFFFE 10 00                   VEC_RESET_EXT           DW      RES_EXT                 ;vector base + $FE
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001BFB 0F9BFB                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
                                      ;                       ALIGN   16
                                      ;DEMO_TRACE             DS      8*64
001BFB 0F9BFB -> $1BFB                DEMO_VARS_END           EQU     *
001BFB 0F9BFB -> $F9BFB               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001000 0F9000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
001000 0F9000 MACRO                                           BASE_INIT
                                      ;############################################################################### (BASE_INIT)
                                      ;# Macros                                                                      # (BASE_INIT)
                                      ;############################################################################### (BASE_INIT)
                                      ;#Initialization                                                                 (BASE_INIT)
001000 0F9000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
001000 0F9000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
001002 0F9002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
001004 0F9004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
001006 0F9006 18 03 FF FF 00 8C                       MOVW    #%1111_1111_1111_1111, ATD1DIENH        ;switch unused pins to digital (BASE_INIT/GPIO_INIT)
00100C 0F900C 18 03 F0 FC 02 CC                       MOVW    #%1111_0000_1111_1100, ATD0DIENH                         (BASE_INIT/GPIO_INIT)
001012 0F9012 18 03 FF FF 02 7E                       MOVW    #%1111_1111_1111_1111, PER0AD1          ;enable pull-up on all unused pins (BASE_INIT/GPIO_INIT)
001018 0F9018 18 03 F0 FC 02 76                       MOVW    #%1111_0000_1111_1100, PER0AD0                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A & B                                                     (BASE_INIT/GPIO_INIT)
00101E 0F901E 18 03 DC 9F 00 0C                       MOVW    #(((PUPKE|BKPUE|PUPEE|PUPDE|PUPCE)<<8)|RDPK|RDPE|RDPD|RDPC|PUPBE|PUPAE), PUCR ;enable pull-ups and reduced drive (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                                            (BASE_INIT/GPIO_INIT)
001024 0F9024 18 03 FF FF 00 02                       MOVW    #$FFFF, DDRA                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port C & D                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PORTE                                              (BASE_INIT/GPIO_INIT)
00102A 0F902A 18 0B 04 00 09                          MOVB    #$04, DDRE                                               (BASE_INIT/GPIO_INIT)
00102F 0F902F 79 00 1E                                CLR     IRQCR           ;disable IRQ                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port F                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRF                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERF                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port H                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRH                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERH                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRJ                                                     (BASE_INIT/GPIO_INIT)
001032 0F9032 18 0B FC 02 6C                          MOVB    #$FC, PERJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port K                                                         (BASE_INIT/GPIO_INIT)
001037 0F9037 18 03 07 07 00 32                       MOVW    #$0707, PORTK                                            (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PTM                                                      (BASE_INIT/GPIO_INIT)
00103D 0F903D 18 03 BF FF 02 52                       MOVW    #$BFFF, DDRM                                             (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PERM                                                     (BASE_INIT/GPIO_INIT)
001043 0F9043 18 0B 80 02 56                          MOVB    #$80, WOMM                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port L                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRL                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   $#FF00, PERL                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
001048 0F9048 18 0B F3 02 58                          MOVB    #$F3, PTP                                                (BASE_INIT/GPIO_INIT)
00104D 0F904D 18 0B FF 02 5A                          MOVB    #$FF, DDRP                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRP                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port R                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRR                                                     (BASE_INIT/GPIO_INIT)
001052 0F9052 18 0B FF 03 6C                          MOVB    #$FF, PERR                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSR                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
001057 0F9057 18 0B 82 02 48                          MOVB    #$82, PTS                                                (BASE_INIT/GPIO_INIT)
00105C 0F905C 18 0B 70 02 4A                          MOVB    #$70, DDRS                                               (BASE_INIT/GPIO_INIT)
001061 0F9061 18 0B 1C 02 4C                          MOVB    #$1C, PERS                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSS                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRT                                                     (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRT                                                     (BASE_INIT/GPIO_INIT)
001066 0F9066 18 0B FE 02 44                          MOVB    #$FE, PERT                                               (BASE_INIT/GPIO_INIT)
00106B 0F906B MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
00106B 0F906B 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
001070 0F9070 18 03 C4 80 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
001076 0F9076 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
00107C 0F907C MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00107C 0F907C 18 0B 47 00 3C                                  MOVB    #(RSBCK|CR2|CR1|CR0), COP_CTLREG         ;COP configuration: (BASE_INIT/COP_INIT)
001081 0F9081 MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup MPU                                               (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 0: Register space                   -> read and write (BASE_INIT/MMAP_INIT)
001081 0F9081 79 01 19                                        CLR     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001084 0F9084 18 03 C0 00 01 1A                               MOVW    #((MMAP_D_REG_BYTE0<<8)|(MMAP_D_REG_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00108A 0F908A 18 03 00 40 01 1C                               MOVW    #((MMAP_D_REG_BYTE2<<8)|(MMAP_D_REG_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001090 0F9090 18 03 00 FF 01 1E                               MOVW    #((MMAP_D_REG_BYTE4<<8)|(MMAP_D_REG_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: Unimplemented RAM                -> read only (BASE_INIT/MMAP_INIT)
001096 0F9096 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001099 0F9099 18 03 C0 01 01 1A                               MOVW    #((MMAP_D_URAM_BYTE0<<8)|(MMAP_D_URAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00109F 0F909F 18 03 00 C1 01 1C                               MOVW    #((MMAP_D_URAM_BYTE2<<8)|(MMAP_D_URAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010A5 0F90A5 18 03 EF FF 01 1E                               MOVW    #((MMAP_D_URAM_BYTE4<<8)|(MMAP_D_URAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: RAM                              -> read, write, and execute (BASE_INIT/MMAP_INIT)
0010AB 0F90AB 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010AE 0F90AE 18 03 C1 F0 01 1A                               MOVW    #((MMAP_D_RAM_BYTE0<<8)|(MMAP_D_RAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010B4 0F90B4 18 03 00 01 01 1C                               MOVW    #((MMAP_D_RAM_BYTE2<<8)|(MMAP_D_RAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010BA 0F90BA 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_RAM_BYTE4<<8)|(MMAP_D_RAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  Unimplemented EERAM             -> read only (BASE_INIT/MMAP_INIT)
0010C0 0F90C0 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010C3 0F90C3 18 03 C2 00 01 1A                               MOVW    #((MMAP_D_UEERAM_BYTE0<<8)|(MMAP_D_UEERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010C9 0F90C9 18 03 00 C2 01 1C                               MOVW    #((MMAP_D_UEERAM_BYTE2<<8)|(MMAP_D_UEERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010CF 0F90CF 18 03 7D FF 01 1E                               MOVW    #((MMAP_D_UEERAM_BYTE4<<8)|(MMAP_D_UEERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  EERAM                           -> read, write, and execute (BASE_INIT/MMAP_INIT)
0010D5 0F90D5 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010D8 0F90D8 18 03 C2 7E 01 1A                               MOVW    #((MMAP_D_EERAM_BYTE0<<8)|(MMAP_D_EERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010DE 0F90DE 18 03 00 00 01 1C                               MOVW    #((MMAP_D_EERAM_BYTE2<<8)|(MMAP_D_EERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010E4 0F90E4 18 03 01 FF 01 1E                               MOVW    #((MMAP_D_EERAM_BYTE4<<8)|(MMAP_D_EERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 3:  Unimplemented Flash             -> read only (BASE_INIT/MMAP_INIT)
0010EA 0F90EA 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010ED 0F90ED 18 03 C2 80 01 1A                               MOVW    #((MMAP_D_UFLASH_BYTE0<<8)|(MMAP_D_UFLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010F3 0F90F3 18 03 00 CF 01 1C                               MOVW    #((MMAP_D_UFLASH_BYTE2<<8)|(MMAP_D_UFLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010F9 0F90F9 18 03 0F FF 01 1E                               MOVW    #((MMAP_D_UFLASH_BYTE4<<8)|(MMAP_D_UFLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 4:  Unimplemented Flash             -> read and execute (BASE_INIT/MMAP_INIT)
0010FF 0F90FF 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001102 0F9102 18 03 CF 10 01 1A                               MOVW    #((MMAP_D_FLASH_BYTE0<<8)|(MMAP_D_FLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001108 0F9108 18 03 00 8F 01 1C                               MOVW    #((MMAP_D_FLASH_BYTE2<<8)|(MMAP_D_FLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00110E 0F910E 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_FLASH_BYTE4<<8)|(MMAP_D_FLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Enable descriptors in supervisor mode                   (BASE_INIT/MMAP_INIT)
001114 0F9114 18 0B 80 01 19                                  MOVB    #SVSEN, MPUSEL                                   (BASE_INIT/MMAP_INIT)
                                      ;#ifndef MMAP_RAM                       ;Don't write to RPAGE while executing code from RAM (BASE_INIT/MMAP_INIT)
                                      ;                       ;Initialize RPAGE                                        (BASE_INIT/MMAP_INIT)
001119 0F9119 18 0B F9 00 16                                  MOVB    #(MMAP_RAM_START_LIN>>12), RPAGE                 (BASE_INIT/MMAP_INIT)
00111E 0F911E MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (BASE_INIT/VECTAB_INIT)
00111E 0F911E 18 0B 7F 01 21                                  MOVB    #(VECTAB_START>>8), IVBR                         (BASE_INIT/VECTAB_INIT)
                                                              ;Disable XGATE interrupts                                (BASE_INIT/VECTAB_INIT)
001123 0F9123 79 01 26                                        CLR     XGPRIO                                           (BASE_INIT/VECTAB_INIT)
                                                              ;Give TC0 high priority                                  (BASE_INIT/VECTAB_INIT)
001126 0F9126 18 0B E0 01 27                                  MOVB    #(VEC_ECT_TC0&$F0), CFADDR                       (BASE_INIT/VECTAB_INIT)
00112B 0F912B 18 0B 07 01 2F                                  MOVB    #$07, (CFDATA0+((VEC_ECT_TC0&$000E)>>1))         (BASE_INIT/VECTAB_INIT)
001130 0F9130 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
001130 0F9130 CF 1C 20                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
001133 0F9133 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
001135 0F9135 MACRO                                           TIM_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TIM_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%1_0_0_1_1_1_0_0, TIOS         ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;B B B   S S S S               ;  0=input capture (BASE_INIT/TIM_INIT)
                                                                       ;D D D   C C C C               ;  1=output compare (BASE_INIT/TIM_INIT)
                                                                       ;M M M   I I I I                                (BASE_INIT/TIM_INIT)
                                                                       ;T N P   T B B B                                (BASE_INIT/TIM_INIT)
                                                                       ;O E E   O D D D                                (BASE_INIT/TIM_INIT)
                                                                       ;          T N P                                (BASE_INIT/TIM_INIT)
                                                                       ;          O E E                                (BASE_INIT/TIM_INIT)
                                                              ;CFORC                                                   (BASE_INIT/TIM_INIT)
                                                              ;OC7M                                                    (BASE_INIT/TIM_INIT)
                                                                       ;7 6 5 4 3 2 1 0                                (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_1_0_0_0_0_0_0, TOC7D        ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;B B B   S S S S                                (BASE_INIT/TIM_INIT)
                                                                       ;D D D   C C C C                                (BASE_INIT/TIM_INIT)
                                                                       ;M M M   I I I I                                (BASE_INIT/TIM_INIT)
                                                                       ;T N P   T B B B                                (BASE_INIT/TIM_INIT)
                                                                       ;O E E   O D D D                                (BASE_INIT/TIM_INIT)
                                                                       ;          T N P                                (BASE_INIT/TIM_INIT)
                                                                       ;          O E E                                (BASE_INIT/TIM_INIT)
                                                              ;TCNT                                                    (BASE_INIT/TIM_INIT)
001135 0F9135 18 0B 01 00 4D                                  MOVB    #$01, TSCR2                     ;run on half bus frequency (BASE_INIT/TIM_INIT)
00113A 0F913A MACRO                                           STRING_INIT                                              (BASE_INIT)
00113A 0F913A MACRO                                           NUM_INIT                                                 (BASE_INIT)
00113A 0F913A MACRO                                           NVM_INIT                                                 (BASE_INIT)
00113A 0F913A MACRO                                           LED_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/LED_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/LED_INIT)
00113A 0F913A MACRO                                           LED_OFF                                                  (BASE_INIT/LED_INIT)
                                      ;#Turn LED on (do nothing)                                                       (BASE_INIT/LED_INIT/LED_OFF)
                                      ;#Turn LED off (turn all LEDs off)                                               (BASE_INIT/LED_INIT/LED_OFF)
00113A 0F913A 1C 02 58 FC                                     BSET    LED_PORT, #(LED_ALL)                             (BASE_INIT/LED_INIT/LED_OFF)
00113E 0F913E MACRO                                           TVMON_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TVMON_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TVMON_INIT)
                                      ;############################################################################### (BASE_INIT/TVMON_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TVMON_INIT)
00113E 0F913E 18 0B 00 02 C0                                  MOVB    #%00000000, ATDCTL0                              (BASE_INIT/TVMON_INIT)
                                                              ;             ^  ^                                       (BASE_INIT/TVMON_INIT)
                                                              ;    WRAP-----+--+                                       (BASE_INIT/TVMON_INIT)
001143 0F9143 18 0B 40 02 C1                                  MOVB    #%01000000, ATDCTL1                              (BASE_INIT/TVMON_INIT)
                                                              ;         ^^^^^  ^                                       (BASE_INIT/TVMON_INIT)
                                                              ;ETRIGSEL-+||||  |                                       (BASE_INIT/TVMON_INIT)
                                                              ;    SRES--++||  |                                       (BASE_INIT/TVMON_INIT)
                                                              ; SMP_DIS----+|  |                                       (BASE_INIT/TVMON_INIT)
                                                              ; ETRIGCH-----+--+                                       (BASE_INIT/TVMON_INIT)
001148 0F9148 18 0B 41 02 C2                                  MOVB    #%01000001, ATDCTL2                              (BASE_INIT/TVMON_INIT)
                                                              ;          ^^^^^^^                                       (BASE_INIT/TVMON_INIT)
                                                              ;    AFFC--+||||||                                       (BASE_INIT/TVMON_INIT)
                                                              ; ICLKSTP---+|||||                                       (BASE_INIT/TVMON_INIT)
                                                              ; ETRIGLE----+||||                                       (BASE_INIT/TVMON_INIT)
                                                              ;  ETRIGP-----+|||                                       (BASE_INIT/TVMON_INIT)
                                                              ;  ETRIGE------+||                                       (BASE_INIT/TVMON_INIT)
                                                              ;   ASCIE-------+|                                       (BASE_INIT/TVMON_INIT)
                                                              ;  ACMPIE--------+                                       (BASE_INIT/TVMON_INIT)
00114D 0F914D 18 0B 13 02 C3                                  MOVB    #%00010011, ATDCTL3                              (BASE_INIT/TVMON_INIT)
                                                              ;         ^^^^^^^^                                       (BASE_INIT/TVMON_INIT)
                                                              ;     DJM-+|||||||                                       (BASE_INIT/TVMON_INIT)
                                                              ;     S8C--+||||||                                       (BASE_INIT/TVMON_INIT)
                                                              ;     S4C---+|||||                                       (BASE_INIT/TVMON_INIT)
                                                              ;     S2C----+||||                                       (BASE_INIT/TVMON_INIT)
                                                              ;     S1C-----+|||                                       (BASE_INIT/TVMON_INIT)
                                                              ;    FIFO------+||                                       (BASE_INIT/TVMON_INIT)
                                                              ;     FRZ-------++                                       (BASE_INIT/TVMON_INIT)
001152 0F9152 18 0B FF 02 C4                                  MOVB    #%11111111, ATDCTL4                              (BASE_INIT/TVMON_INIT)
                                                              ;         ^ ^^   ^                                       (BASE_INIT/TVMON_INIT)
                                                              ;     SMP-+-+|   |                                       (BASE_INIT/TVMON_INIT)
                                                              ;     PRS----+---+                                       (BASE_INIT/TVMON_INIT)
                                                              ;ATDSTAT0                                                (BASE_INIT/TVMON_INIT)
001157 0F9157 18 0B 01 02 C9                                  MOVB    #$01, ATDCMPEL                                   (BASE_INIT/TVMON_INIT)
                                                              ;ATDSTAT2                                                (BASE_INIT/TVMON_INIT)
                                                              ;ATDIEN                                                  (BASE_INIT/TVMON_INIT)
00115C 0F915C 18 0B 01 02 CF                                  MOVB    #$01, ATDCMPHTL                                  (BASE_INIT/TVMON_INIT)
001161 0F9161 18 03 4C CC 02 D0                               MOVW    #TVMON_UPPER_THRESHOLD, ATDDR0                   (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR1                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR2                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR3                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR4                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR5                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR5                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR6                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR7                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR8                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR9                                                  (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR10                                                 (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR11                                                 (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR12                                                 (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR13                                                 (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR14                                                 (BASE_INIT/TVMON_INIT)
                                                              ;ATDDR15                                                 (BASE_INIT/TVMON_INIT)
                                                              ;Initially flag missing target                           (BASE_INIT/TVMON_INIT)
001167 0F9167 MACRO                                           LED_BICOLOR_RED                                          (BASE_INIT/TVMON_INIT)
                                      ;#Turn red bi-color LED on                                                       (BASE_INIT/TVMON_INIT/LED_BICOLOR_RED)
001167 0F9167 1C 02 58 08                                     BSET    LED_PORT, #LED_BICOLOR_GREEN                     (BASE_INIT/TVMON_INIT/LED_BICOLOR_RED)
00116B 0F916B 1D 02 58 04                                     BCLR    LED_PORT, #LED_BICOLOR_RED                       (BASE_INIT/TVMON_INIT/LED_BICOLOR_RED)
                                                              ;Start ATD conversions                                   (BASE_INIT/TVMON_INIT)
00116F 0F916F 18 0B 2B 02 C5                                  MOVB    #%00101011, ATDCTL5                              (BASE_INIT/TVMON_INIT)
001174 0F9174 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                                              ;MOVW   #(((RTIE|LOCKIE)<<8)|CWAI|COPWAI), CRGINT        (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ;CRG configuration: (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; real-time interrupt enabled           (RTIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL lock interrupt enabled            (LOCKIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no self-clock mode interrupt          (~SCMIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no pseudo-stop                        (~PSTP) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; system/bus clock in wait mode         (~SYSWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no reduced oscillator amplitude       (~ROAWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL in wait mode                      (~PLLWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; core/CPU clock stops in wait mode     (CWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; RTI keeps running in wait mode        (~RTIWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; COP stops in wait mode                (COPWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;BSET   PLLCTL, #(CME|PLLON|AUTO)                       ; clock monitor enabled                 (CME) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL enabled                           (PLLON) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; automatic bandwith control            (AUTO) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
001174 0F9174 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
001176 0F9176 4E 39 80 1C                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00117A 0F917A MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00117A 0F917A 8F 1C 05                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00117D 0F917D 18 25 03 68                                     BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001181 0F9181 8F 1C 20                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001184 0F9184 18 22 03 67                                     BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001188 0F9188 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; 10^24 oscillator cyles timeout =2.44s (CR2|CR1|CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
001188 0F9188 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00118D 0F918D 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
001192 0F9192 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001194 0F9194 -> $14E9                OF                      EQU     ISTACK_OF                                        (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001194 0F9194 -> $14EF                UF                      EQU     ISTACK_UF                                        (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001194 0F9194 -> $1194                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
001194 0F9194 20 DE                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
001196 0F9196 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
001198 0F9198 MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_INIT)
001198 0F9198 CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_INIT)
00119B 0F919B 7C 1C 4A                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_INIT)
00119E 0F919E 7C 1C 40                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_INIT)
0011A1 0F91A1 18 0B 80 1C 4E                                  MOVB    #SCI_FLG_SEND_XONXOFF,  SCI_FLGS        ;request transmission of XON/XOFF (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                      ;                       STD     SCI_BD_RECOVCNT                         ;reset baud rate check list and recovery count (BASE_INIT/SCI_INIT)
0011A6 0F91A6 7A 1C 51                                        STAA    SCI_BD_LIST                             ;reset baud rate check list (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
0011A9 0F91A9 4C 40 0C                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
0011AC 0F91AC 18 0B 02 00 6B                                  MOVB    #BUFEN, ICSYS                                    (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
0011B1 0F91B1 FC 1C 4C                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
0011B4 0F91B4 27 16                                           BEQ     SCI_INIT_2                              ;use default value if zero (BASE_INIT/SCI_INIT)
0011B6 0F91B6 CE 0C CC                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
0011B9 0F91B9 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
0011BB 0F91BB 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
0011BE 0F91BE 26 0C                                           BNE     SCI_INIT_2                              ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
0011C0 0F91C0 CD 1D 36                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
0011C3 0F91C3 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
0011C5 0F91C5 27 0E                                           BEQ     SCI_INIT_3                              ;match   (BASE_INIT/SCI_INIT)
0011C7 0F91C7 8D 1D 46                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
0011CA 0F91CA 26 F7                                           BNE     SCI_INIT_1                              ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
0011CC 0F91CC CE 01 46                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
0011CF 0F91CF 18 03 4B C8 1C 4C                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
0011D5 0F91D5 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format and enable transmission                (BASE_INIT/SCI_INIT)
0011D7 0F91D7 18 03 04 AC 00 CA                               MOVW    #((SCI_8N1<<8)|TXIE|RIE|TE|RE), SCICR1  ;8N1 (transmit XON) (BASE_INIT/SCI_INIT)
                                                              ;Initialize CTS                                          (BASE_INIT/SCI_INIT)
0011DD 0F91DD MACRO                                           SCI_ASSERT_CTS                                           (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)                    (BASE_INIT/SCI_INIT)
0011DD 0F91DD 4C 4B 03                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (BASE_INIT/SCI_INIT)
0011E0 0F91E0 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Check for POR                                           (BASE_INIT/RESET_INIT)
0011E0 0F91E0 B6 1C 55                                        LDAA    RESET_FLGS                                       (BASE_INIT/RESET_INIT)
0011E3 0F91E3 85 40                                           BITA    #RESET_FLG_POR                                   (BASE_INIT/RESET_INIT)
0011E5 0F91E5 26 45                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Check for power failure (flags in A)                    (BASE_INIT/RESET_INIT)
0011E7 0F91E7 CD 21 80                                        LDY     #RESET_STR_POWFAIL                               (BASE_INIT/RESET_INIT)
0011EA 0F91EA 85 20                                           BITA    #RESET_FLG_POWFAIL                               (BASE_INIT/RESET_INIT)
0011EC 0F91EC 26 13                                           BNE     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Check for clock failure (flags in A)                    (BASE_INIT/RESET_INIT)
                                                              ;Check for code runaway (flags in A)                     (BASE_INIT/RESET_INIT)
                                                              ;Check for COP reset (flags in A)                        (BASE_INIT/RESET_INIT)
                                                              ;Check custom error                                      (BASE_INIT/RESET_INIT)
0011EE 0F91EE FE 1C 52                                        LDX     RESET_MSG                                        (BASE_INIT/RESET_INIT)
0011F1 0F91F1 CD 11 F7                                        LDY     #RESET_INIT_1                                    (BASE_INIT/RESET_INIT)
0011F4 0F91F4 06 1A B3                                        JOB     RESET_CALC_CHECKSUM                              (BASE_INIT/RESET_INIT)
0011F7 0F91F7 -> $11F7                RESET_INIT_1            EQU     *                                                (BASE_INIT/RESET_INIT)
0011F7 0F91F7 24 33                                           BCC     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Verify checksum (checksum in A)                         (BASE_INIT/RESET_INIT)
0011F9 0F91F9 B1 1C 54                                        CMPA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
0011FC 0F91FC 26 2E                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
0011FE 0F91FE FD 1C 52                                        LDY     RESET_MSG                                        (BASE_INIT/RESET_INIT)
                                                              ;Print error message (error message in Y)                (BASE_INIT/RESET_INIT)
001201 0F9201 CE 21 79                RESET_INIT_2            LDX     #RESET_STR_FATAL                                 (BASE_INIT/RESET_INIT)
001204 0F9204 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
001204 0F9204 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
001204 0F9204                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
001204 0F9204 MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
001204 0F9204 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
001204 0F9204 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001204 0F9204 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001207 0F9207 18 25 02 D2                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00120B 0F920B 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00120E 0F920E 18 22 02 D1                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001212 0F9212 -> $14E3                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001212 0F9212 -> $14DD                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001212 0F9212 16 16 77                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
001215 0F9215 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
001215 0F9215 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001215 0F9215 8F 1C 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001218 0F9218 18 25 02 C1                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00121C 0F921C 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00121F 0F921F 18 22 02 C0                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001223 0F9223 -> $14E3                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001223 0F9223 -> $14DD                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001223 0F9223 16 1A 40                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
001226 0F9226 24 DC                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
001228 0F9228 B7 65                                           TFR     Y, X                                             (BASE_INIT/RESET_INIT)
00122A 0F922A 20 03                                           JOB     RESET_INIT_4                                     (BASE_INIT/RESET_INIT)
                                                              ;Print welcome message                                   (BASE_INIT/RESET_INIT)
00122C 0F922C CE 1C 56                RESET_INIT_3            LDX     #RESET_WELCOME                                   (BASE_INIT/RESET_INIT)
00122F 0F922F MACRO                   RESET_INIT_4            STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
00122F 0F922F MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00122F 0F922F                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00122F 0F922F MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00122F 0F922F MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00122F 0F922F MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00122F 0F922F 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001232 0F9232 18 25 02 A7                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001236 0F9236 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001239 0F9239 18 22 02 A6                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00123D 0F923D -> $14E3                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00123D 0F923D -> $14DD                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00123D 0F923D 16 16 77                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
001240 0F9240 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
001240 0F9240 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001240 0F9240 8F 1C 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001243 0F9243 18 25 02 96                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001247 0F9247 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00124A 0F924A 18 22 02 95                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00124E 0F924E -> $14E3                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00124E 0F924E -> $14DD                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00124E 0F924E 16 1A 40                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
001251 0F9251 24 DC                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                                              ;Print exlamation mark and new line                      (BASE_INIT/RESET_INIT)
                                                              ;LDX    #STRING_STR_EXCLAM_NL                            (BASE_INIT/RESET_INIT)
                                                              ;STRING_PRINT_BL                                         (BASE_INIT/RESET_INIT)
                                                              ;Remove custom error message                             (BASE_INIT/RESET_INIT)
001253 0F9253 DC 00                                           LDD     $0000                                            (BASE_INIT/RESET_INIT)
001255 0F9255 7C 1C 52                                        STD     RESET_MSG                                        (BASE_INIT/RESET_INIT)
001258 0F9258 7A 1C 54                                        STAA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
                                                              ;Wait until message has been transmitted                 (BASE_INIT/RESET_INIT)
00125B 0F925B MACRO                                           SCI_TX_DONE_BL                                           (BASE_INIT/RESET_INIT)
                                      ;#Wait until all pending data is sent                                            (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; result: A: number of entries left in TX queue                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
00125B 0F925B MACRO                                           SSTACK_JOBSR    SCI_TX_DONE_BL, 6                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
00125B 0F925B MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00125B 0F925B 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00125E 0F925E 18 25 02 7B                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001262 0F9262 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001265 0F9265 18 22 02 7A                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001269 0F9269 -> $14E3                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001269 0F9269 -> $14DD                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001269 0F9269 16 16 06                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;;Setup trace buffer
                                      ;                       ;Configure DBG module
                                      ;                       CLR     DBGC1
                                      ;                       ;MOVB   #$40, DBGTCR  ;trace CPU in normal mode
                                      ;                       MOVB    #$4C, DBGTCR  ;trace CPU in pure PC mode
                                      ;                       MOVB    #$02, DBGC2   ;Comparators A/B outside range
                                      ;                       MOVB    #$02, DBGSCRX ;first match triggers final state
                                      ;                       ;Comperator A
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_START_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_START_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Comperator A
                                      ;                       MOVB    #$01, DBGC1
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_END_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_END_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Arm DBG module
                                      ;                       MOVB    #ARM, DBGC1
                                      ;Application code
00126C 0F926C MACRO                   DEMO_LOOP               SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00126C 0F926C MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00126C 0F926C MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00126C 0F926C 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00126F 0F926F 18 25 02 6A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001273 0F9273 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001276 0F9276 18 22 02 69                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00127A 0F927A -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00127A 0F927A -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00127A 0F927A 16 17 03                                        JOBSR   \1                                               (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors
00127D 0F927D 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
00127F 0F927F 26 EB                                           BNE     DEMO_LOOP
                                                              ;TBNE   A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
001281 0F9281 B7 45                                           TFR     D, X
001283 0F9283 86 04                                           LDAA    #4
001285 0F9285 C6 20                                           LDAB    #" "
001287 0F9287 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001287 0F9287 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
001287 0F9287                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
001287 0F9287 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
001287 0F9287 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
001287 0F9287 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001287 0F9287 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00128A 0F928A 18 25 02 4F                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00128E 0F928E 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001291 0F9291 18 22 02 4E                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001295 0F9295 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001295 0F9295 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001295 0F9295 16 16 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
001298 0F9298 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
001298 0F9298 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001298 0F9298 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00129B 0F929B 18 25 02 3E                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00129F 0F929F 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012A2 0F92A2 18 22 02 3D                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012A6 0F92A6 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012A6 0F92A6 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012A6 0F92A6 16 1A 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0012A9 0F92A9 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
0012AB 0F92AB B7 54                                           TFR     X, D
0012AD 0F92AD 87                                              CLRA
0012AE 0F92AE MACRO                                           STRING_MAKE_PRINTABLE_B
                                      ;#Make ASCII character printable                                                 (STRING_MAKE_PRINTABLE_B)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_MAKE_PRINTABLE_B)
                                      ; result: B: printable ASCII character or "."                                    (STRING_MAKE_PRINTABLE_B)
                                      ; SSTACK: none                                                                   (STRING_MAKE_PRINTABLE_B)
                                      ;         X, Y, and A are preserved                                              (STRING_MAKE_PRINTABLE_B)
0012AE 0F92AE C1 20                                           CMPB    #$20            ;" "                             (STRING_MAKE_PRINTABLE_B)
0012B0 0F92B0 25 04                                           BLO     ADJUST                                           (STRING_MAKE_PRINTABLE_B)
0012B2 0F92B2 C1 7E                                           CMPB    #$7E            ;"~"                             (STRING_MAKE_PRINTABLE_B)
0012B4 0F92B4 23 02                                           BLS     DONE                                             (STRING_MAKE_PRINTABLE_B)
0012B6 0F92B6 C6 2E                   ADJUST                  LDAB    #$2E            ;"."                             (STRING_MAKE_PRINTABLE_B)
0012B8 0F92B8 -> $12B8                DONE                    EQU     *                                                (STRING_MAKE_PRINTABLE_B)
0012B8 0F92B8 MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
0012B8 0F92B8 MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 7                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
0012B8 0F92B8 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012B8 0F92B8 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012BB 0F92BB 18 25 02 1E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012BF 0F92BF 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012C2 0F92C2 18 22 02 1D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012C6 0F92C6 -> $14E3                UF                      EQU     SSTACK_UF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012C6 0F92C6 -> $14DD                OF                      EQU     SSTACK_OF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012C6 0F92C6 16 15 95                                        JOBSR   \1                                               (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
0012C9 0F92C9 CD 00 00                                        LDY     #$0000
0012CC 0F92CC C6 10                                           LDAB    #16
0012CE 0F92CE MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0012CE 0F92CE MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0012CE 0F92CE MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012CE 0F92CE 8F 1C 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012D1 0F92D1 18 25 02 08                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012D5 0F92D5 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012D8 0F92D8 18 22 02 07                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012DC 0F92DC -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012DC 0F92DC -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0012DC 0F92DC 16 1A F6                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0012DF 0F92DF B7 76                                           TFR     SP, Y
0012E1 0F92E1 40                                              NEGA
0012E2 0F92E2 8B 05                                           ADDA    #5
0012E4 0F92E4 C6 20                                           LDAB    #" "
0012E6 0F92E6 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012E6 0F92E6 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
0012E6 0F92E6                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
0012E6 0F92E6 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
0012E6 0F92E6 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0012E6 0F92E6 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012E6 0F92E6 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012E9 0F92E9 18 25 01 F0                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012ED 0F92ED 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F0 0F92F0 18 22 01 EF                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F4 0F92F4 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F4 0F92F4 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F4 0F92F4 16 16 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
0012F7 0F92F7 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0012F7 0F92F7 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012F7 0F92F7 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012FA 0F92FA 18 25 01 DF                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0012FE 0F92FE 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001301 0F9301 18 22 01 DE                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001305 0F9305 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001305 0F9305 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001305 0F9305 16 1A 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
001308 0F9308 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00130A 0F930A C6 10                                           LDAB    #16
00130C 0F930C MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00130C 0F930C MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00130C 0F930C                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00130C 0F930C MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00130C 0F930C MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00130C 0F930C MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00130C 0F930C 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00130F 0F930F 18 25 01 CA                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001313 0F9313 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001316 0F9316 18 22 01 C9                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00131A 0F931A -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00131A 0F931A -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00131A 0F931A 16 16 77                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00131D 0F931D MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00131D 0F931D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00131D 0F931D 8F 1C 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001320 0F9320 18 25 01 B9                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001324 0F9324 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001327 0F9327 18 22 01 B8                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00132B 0F932B -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00132B 0F932B -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00132B 0F932B 16 1B 83                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00132E 0F932E 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
001330 0F9330 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
001330 0F9330 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001330 0F9330 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001333 0F9333 18 25 01 A6                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001337 0F9337 8F 1C 1A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00133A 0F933A 18 22 01 A5                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00133E 0F933E -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00133E 0F933E -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00133E 0F933E 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
001340 0F9340 CD 00 00                                        LDY     #$0000
001343 0F9343 C6 0A                                           LDAB    #10
001345 0F9345 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
001345 0F9345 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
001345 0F9345 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001345 0F9345 8F 1C 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001348 0F9348 18 25 01 91                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00134C 0F934C 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00134F 0F934F 18 22 01 90                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001353 0F9353 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001353 0F9353 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001353 0F9353 16 1A F6                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
001356 0F9356 B7 76                                           TFR     SP, Y
001358 0F9358 40                                              NEGA
001359 0F9359 8B 05                                           ADDA    #5
00135B 0F935B C6 20                                           LDAB    #" "
00135D 0F935D MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00135D 0F935D MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00135D 0F935D                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00135D 0F935D MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00135D 0F935D MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00135D 0F935D MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00135D 0F935D 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001360 0F9360 18 25 01 79                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001364 0F9364 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001367 0F9367 18 22 01 78                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00136B 0F936B -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00136B 0F936B -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00136B 0F936B 16 16 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00136E 0F936E MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00136E 0F936E MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00136E 0F936E 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001371 0F9371 18 25 01 68                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001375 0F9375 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001378 0F9378 18 22 01 67                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00137C 0F937C -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00137C 0F937C -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00137C 0F937C 16 1A 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00137F 0F937F 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
001381 0F9381 C6 0A                                           LDAB    #10
001383 0F9383 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
001383 0F9383 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
001383 0F9383                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
001383 0F9383 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
001383 0F9383 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
001383 0F9383 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001383 0F9383 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001386 0F9386 18 25 01 53                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00138A 0F938A 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00138D 0F938D 18 22 01 52                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001391 0F9391 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001391 0F9391 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001391 0F9391 16 16 77                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
001394 0F9394 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
001394 0F9394 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001394 0F9394 8F 1C 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001397 0F9397 18 25 01 42                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00139B 0F939B 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00139E 0F939E 18 22 01 41                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013A2 0F93A2 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013A2 0F93A2 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013A2 0F93A2 16 1B 83                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0013A5 0F93A5 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0013A7 0F93A7 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
0013A7 0F93A7 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013A7 0F93A7 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013AA 0F93AA 18 25 01 2F                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013AE 0F93AE 8F 1C 1A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013B1 0F93B1 18 22 01 2E                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013B5 0F93B5 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013B5 0F93B5 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0013B5 0F93B5 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
0013B7 0F93B7 CD 00 00                                        LDY     #$0000
0013BA 0F93BA C6 08                                           LDAB    #8
0013BC 0F93BC MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0013BC 0F93BC MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0013BC 0F93BC MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013BC 0F93BC 8F 1C 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013BF 0F93BF 18 25 01 1A                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013C3 0F93C3 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013C6 0F93C6 18 22 01 19                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013CA 0F93CA -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013CA 0F93CA -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0013CA 0F93CA 16 1A F6                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0013CD 0F93CD B7 76                                           TFR     SP, Y
0013CF 0F93CF 40                                              NEGA
0013D0 0F93D0 8B 05                                           ADDA    #5
0013D2 0F93D2 C6 20                                           LDAB    #" "
0013D4 0F93D4 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0013D4 0F93D4 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
0013D4 0F93D4                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
0013D4 0F93D4 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
0013D4 0F93D4 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0013D4 0F93D4 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013D4 0F93D4 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013D7 0F93D7 18 25 01 02                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013DB 0F93DB 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013DE 0F93DE 18 22 01 01                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013E2 0F93E2 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013E2 0F93E2 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013E2 0F93E2 16 16 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
0013E5 0F93E5 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0013E5 0F93E5 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013E5 0F93E5 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013E8 0F93E8 18 25 00 F1                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013EC 0F93EC 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013EF 0F93EF 18 22 00 F0                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013F3 0F93F3 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013F3 0F93F3 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013F3 0F93F3 16 1A 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
0013F6 0F93F6 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
0013F8 0F93F8 C6 08                                           LDAB    #8
0013FA 0F93FA MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0013FA 0F93FA MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0013FA 0F93FA                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0013FA 0F93FA MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0013FA 0F93FA MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0013FA 0F93FA MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013FA 0F93FA 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0013FD 0F93FD 18 25 00 DC                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001401 0F9401 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001404 0F9404 18 22 00 DB                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001408 0F9408 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001408 0F9408 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001408 0F9408 16 16 77                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00140B 0F940B MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00140B 0F940B MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00140B 0F940B 8F 1C 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00140E 0F940E 18 25 00 CB                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001412 0F9412 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001415 0F9415 18 22 00 CA                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001419 0F9419 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001419 0F9419 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001419 0F9419 16 1B 83                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00141C 0F941C 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00141E 0F941E MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00141E 0F941E MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00141E 0F941E 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001421 0F9421 18 25 00 B8                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001425 0F9425 8F 1C 1A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
001428 0F9428 18 22 00 B7                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00142C 0F942C -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00142C 0F942C -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00142C 0F942C 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
00142E 0F942E 86 02                                           LDAA    #2
001430 0F9430 C6 20                                           LDAB    #" "
001432 0F9432 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001432 0F9432 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
001432 0F9432                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
001432 0F9432 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
001432 0F9432 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
001432 0F9432 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001432 0F9432 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001435 0F9435 18 25 00 A4                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001439 0F9439 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00143C 0F943C 18 22 00 A3                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001440 0F9440 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001440 0F9440 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001440 0F9440 16 16 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
001443 0F9443 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
001443 0F9443 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001443 0F9443 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001446 0F9446 18 25 00 93                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00144A 0F944A 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00144D 0F944D 18 22 00 92                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001451 0F9451 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001451 0F9451 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001451 0F9451 16 1A 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
001454 0F9454 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
001456 0F9456 CD 00 00                                        LDY     #$0000
001459 0F9459 C6 02                                           LDAB    #2
00145B 0F945B MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00145B 0F945B MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00145B 0F945B MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00145B 0F945B 8F 1C 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00145E 0F945E 25 7D                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001460 0F9460 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001463 0F9463 22 7E                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001465 0F9465 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001465 0F9465 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
001465 0F9465 16 1A F6                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
001468 0F9468 B7 76                                           TFR     SP, Y
00146A 0F946A 40                                              NEGA
00146B 0F946B 8B 08                                           ADDA    #8
00146D 0F946D C6 30                                           LDAB    #"0"
00146F 0F946F MACRO                                           STRING_fill_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00146F 0F946F MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00146F 0F946F                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00146F 0F946F MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00146F 0F946F MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00146F 0F946F MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00146F 0F946F 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001472 0F9472 25 69                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001474 0F9474 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001477 0F9477 22 6A                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001479 0F9479 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001479 0F9479 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001479 0F9479 16 16 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00147C 0F947C MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00147C 0F947C MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00147C 0F947C 8F 1C 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00147F 0F947F 25 5C                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001481 0F9481 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001484 0F9484 22 5D                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001486 0F9486 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001486 0F9486 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001486 0F9486 16 1A 77                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
001489 0F9489 24 E4                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00148B 0F948B C6 02                                           LDAB    #2
00148D 0F948D MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00148D 0F948D MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00148D 0F948D                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00148D 0F948D MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00148D 0F948D MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00148D 0F948D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00148D 0F948D 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001490 0F9490 25 4B                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001492 0F9492 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001495 0F9495 22 4C                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001497 0F9497 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001497 0F9497 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001497 0F9497 16 16 77                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00149A 0F949A MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00149A 0F949A MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00149A 0F949A 8F 1C 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00149D 0F949D 25 3E                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00149F 0F949F 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014A2 0F94A2 22 3F                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014A4 0F94A4 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014A4 0F94A4 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014A4 0F94A4 16 1B 83                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0014A7 0F94A7 24 E4                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0014A9 0F94A9 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
0014A9 0F94A9 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014A9 0F94A9 8F 1C 05                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014AC 0F94AC 25 2F                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014AE 0F94AE 8F 1C 1A                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014B1 0F94B1 22 30                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014B3 0F94B3 -> $14E3                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014B3 0F94B3 -> $14DD                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0014B3 0F94B3 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print new line
0014B5 0F94B5 CE 21 77                                        LDX     #STRING_STR_NL
0014B8 0F94B8 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
0014B8 0F94B8 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_PRINT_BL/STRING_CALL_BL)
0014B8 0F94B8                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_PRINT_BL/STRING_CALL_BL)
0014B8 0F94B8 MACRO                                           SCI_TX_READY_BL                                          (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
0014B8 0F94B8 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0014B8 0F94B8 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014B8 0F94B8 8F 1C 0B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014BB 0F94BB 25 20                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014BD 0F94BD 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014C0 0F94C0 22 21                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014C2 0F94C2 -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014C2 0F94C2 -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014C2 0F94C2 16 16 77                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_PRINT_BL/STRING_CALL_BL)
0014C5 0F94C5 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
0014C5 0F94C5 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014C5 0F94C5 8F 1C 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014C8 0F94C8 25 13                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014CA 0F94CA 8F 1C 20                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014CD 0F94CD 22 14                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014CF 0F94CF -> $14E3                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014CF 0F94CF -> $14DD                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0014CF 0F94CF 16 1A 40                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
0014D2 0F94D2 24 E4                                           BCC     LOOP            ;function unsuccessful           (STRING_PRINT_BL/STRING_CALL_BL)
0014D4 0F94D4 06 12 6C                                        JOB     DEMO_LOOP
                                      ;                       ;Dump trace buffer
                                      ;DEMO_DUMP_TRACE                CLR     DBGC1
                                      ;                       LDD     2*64
                                      ;                       LDX     #DEMO_TRACE
                                      ;                       STX     DBGTBH
                                      ;DEMO_DUMP_TRACE_1      LDY     DBGTBH
                                      ;                       MOVW    DBGTBH, 2,X+
                                      ;                       STY     2,X+
                                      ;                       DBNE    D, DEMO_DUMP_TRACE_1
                                      ;                       BGND
0014D7 0F94D7 -> $14D7                DEMO_CODE_END           EQU     *
0014D7 0F94D7 -> $F94D7               DEMO_CODE_END_LIN       EQU     @
                                      ;                       ;Overwrite SWI interrupt vector
                                      ;                       ORG     VEC_SWI
                                      ;                       DW      DEMO_DUMP_TRACE
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C56 0F9C56                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
001C56 0F9C56 54 68 69 73 20 69 73 20 DEMO_WELCOME            FCC     "This is the S12CBase Demo for the Mini-BDM-Pod"
              74 68 65 20 53 31 32 43 
              42 61 73 65 20 44 65 6D 
              6F 20 66 6F 72 20 74 68 
              65 20 4D 69 6E 69 2D 42 
              44 4D 2D 50 6F 64       
001C84 0F9C84 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001C84 0F9C84 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001C85 0F9C85 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001C86 0F9C86 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001C86 0F9C86 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001C87 0F9C87 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001C88 0F9C88 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
001CA6 0F9CA6 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001CA6 0F9CA6 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
001CA7 0F9CA7 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
001CA8 0F9CA8 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
001CC6 0F9CC6 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001CC6 0F9CC6 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
001CC7 0F9CC7 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
001CC8 0F9CC8 -> $1CC8                DEMO_TABS_END           EQU     *
001CC8 0F9CC8 -> $F9CC8               DEMO_TABS_END_LIN       EQU     @
