                                      ;###############################################################################
                                      ;# AriCalculator - Demo                                                        #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 18, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# LRE or flash
??????        -> $0001                DEMO_LRE                EQU     1               ;default is LRE
                                      ;# Memory map:
??????        -> $0001                MMAP_S12G240            EQU     1               ;S12G240
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# COP debug
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ; ISTACK debug
??????        -> $0001                ISTACK_DEBUG            EQU     1               ;don't execute WAI
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001400 001400                                                 ORG     MMAP_RAM_START, MMAP_RAM_START
                                      ;Code
001400 001400 -> $1400                DEMO_CODE_START         EQU     *
001400 001400 -> $1400                DEMO_CODE_START_LIN     EQU     @
00238B 00238B                                                 ORG     DEMO_CODE_END,  DEMO_CODE_END_LIN
                                      ;Tables
00238B 00238B -> $238B                DEMO_TABS_START         EQU     *
00238B 00238B -> $238B                DEMO_TABS_START_LIN     EQU     @
002D5D 002D5D                                                 ORG     DEMO_TABS_END,  DEMO_TABS_END_LIN
                                      ;Variables
002D5D 002D5D -> $2D5D                DEMO_VARS_START         EQU     *
002D5D 002D5D -> $2D5D                DEMO_VARS_START_LIN     EQU     @
002DFA 002DFA                                                 ORG     DEMO_VARS_END,  DEMO_VARS_END_LIN
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D5D 002D5D                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
002D5D 002D5D                         DEMO_KEY_CODE           DS      1       ;pushed key stroke
002D5E 002D5E                         DEMO_PAGE               DS      1       ;current display page
002D5F 002D5F                         DEMO_COL                DS      1       ;current key pad ccolumn
002D60 002D60                         DEMO_CUR_KEY            DS      1       ;current key code
002D61 002D61 -> $2D61                BASE_VARS_START         EQU     *
002D61 002D61 -> $2D61                BASE_VARS_START_LIN     EQU     @
002DFA 002DFA                                                 ORG     BASE_VARS_END,  BASE_VARS_END_LIN
002DFA 002DFA -> $2DFA                DEMO_VARS_END           EQU     *
002DFA 002DFA -> $2DFA                DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001400 001400                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Application code
001400 001400 -> $1400                START_OF_CODE           EQU     *               ;Start of code
                                                              ;Initialization
001400 001400 MACRO                                           BASE_INIT
                                      ;############################################################################### (BASE_INIT)
                                      ;# Macros                                                                      # (BASE_INIT)
                                      ;############################################################################### (BASE_INIT)
                                      ;#Initialization                                                                 (BASE_INIT)
                                      ;---------------                                                                 (BASE_INIT)
                                                              ;Urgent initialization                                   (BASE_INIT)
001400 001400 MACRO                                           GPIO_INIT       ;urgent!                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#Urgent initializations                                         (BASE_INIT/GPIO_INIT)
001400 001400 18 0B 03 02 4D                          MOVB    #03, PPSS                               ;switch to pull-downs on PS[1:0] (TX/RX) (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
001405 001405 18 03 FC FF 00 7C                       MOVW    #%1111_1100_1111_1111, ATDDIEN          ;switch unused pins to digital (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PT0AD                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDR0AD                                           (BASE_INIT/GPIO_INIT)
00140B 00140B 18 03 FC FF 02 78                       MOVW    #%1111_1100_1111_1111, PER0AD                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PPS0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PIE0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A, B, C, D, and E                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                           ;port A/B        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRA                            ;port A/B        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                           ;port C/D        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                            ;port C/D        (BASE_INIT/GPIO_INIT)
001411 001411 18 03 03 03 00 08                       MOVW    #$0303, PORTE                           ;port E (PORTE/DDRE) (BASE_INIT/GPIO_INIT)
001417 001417 18 0B 4F 00 0C                          MOVB    #$4F,   PUCR                            ;BKPUE|~PDPEE|PUPDE|PUPCE|PUPBE|PUPAE (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$C0,   ECLKCTL                                          (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   IRQCR                                            (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTJ                                              (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   DDRJ                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF    PERJ                                             (BASE_INIT/GPIO_INIT)
00141C 00141C 18 0B 0F 02 6D                          MOVB    #$0F,   PPSJ                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEJ                            ;PIEJ/PIFJ       (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTM                                              (BASE_INIT/GPIO_INIT)
001421 001421 18 0B 02 02 52                          MOVB    #$02,   DDRM                                             (BASE_INIT/GPIO_INIT)
001426 001426 18 03 0D 01 02 54                       MOVW    #$0D01  PERM                            ;PERM/PPSM       (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMM                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTP                                              (BASE_INIT/GPIO_INIT)
00142C 00142C 18 0B 3F 02 5A                          MOVB    #$3F,   DDRP                            ;drive keyboard columns low (BASE_INIT/GPIO_INIT)
001431 001431 18 0B FF 02 5C                          MOVB    #$FF    PERP                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPSP                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEP                            ;PIEP/PIFP       (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
001436 001436 18 0B 80 02 48                          MOVB    #$80,   PTS                                              (BASE_INIT/GPIO_INIT)
00143B 00143B 18 0B FA 02 4A                          MOVB    #$FA,   DDRS                                             (BASE_INIT/GPIO_INIT)
001440 001440 18 03 0A 01 02 4C                       MOVW    #$0A01, PERS                            ;PERS/PPSS       (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMS                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
001446 001446 18 0B 20 02 40                          MOVB    #$20,   PTT                                              (BASE_INIT/GPIO_INIT)
00144B 00144B 18 0B 20 02 42                          MOVB    #$20,   DDRT                                             (BASE_INIT/GPIO_INIT)
001450 001450 18 0B DC 02 44                          MOVB    #$DC    PERT                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPST                                             (BASE_INIT/GPIO_INIT)
                                                      ;General setup                                                   (BASE_INIT/GPIO_INIT)
001455 001455 86 80                                   LDAA    #MODC                                   ;lock MODE register into NSC mode (BASE_INIT/GPIO_INIT)
001457 001457 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
001459 001459 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
00145B 00145B 18 0C 02 57 02 57                       MOVB    PKGCR, PKGCR                            ;lock PKGCR      (BASE_INIT/GPIO_INIT)
001461 001461 MACRO                                           COP_INIT        ;urgent!                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
001461 001461 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
001466 001466 MACRO                                           CLOCK_INIT      ;urgent!                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/CLOCK_INIT)
001466 001466 18 0B FF 00 37                                  MOVB    #$FF, CPMUFLG                                   ;clear all flags (BASE_INIT/CLOCK_INIT)
00146B 00146B 18 03 58 00 00 34                               MOVW    #CLOCK_PLL_CONFIG, CPMUSYNR                     ;setup PLL (BASE_INIT/CLOCK_INIT)
001471 001471 79 00 36                                        CLR     CPMUPOSTDIV                                     ;disable POSTDIV divider (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUINT                                         ;disable PLL lock interrupts (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #LOCKIE, CPMUINT                                ;enable PLL lock interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #PLLSEL, CPMUCLKS                               ;enable PLL (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUPLL                                         ;no frequency modulation (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMURTI                                         ;no real time interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #(RSBCK|CR1|CR2|CR3), CPMUCOP                   ;configure COP (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMULVCTL                                       ;no low-voltage interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPICTL                                      ;no API (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRH                                       ;no API (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRL                                       ;no API (BASE_INIT/CLOCK_INIT)
001474 001474 18 0B 01 02 FB                                  MOVB    #PROT, CPMUPROT                                 ;lock CPMU configuration (BASE_INIT/CLOCK_INIT)
                                                              ;Initialization w/o PLL lock                             (BASE_INIT)
001479 001479 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Capture and clear CRG/CPMU flags                        (BASE_INIT/RESET_INIT)
001479 001479 96 37                                           LDAA    CPMUFLG                 ;capture flags;          (BASE_INIT/RESET_INIT)
00147B 00147B 18 0B FF 00 37                                  MOVB    #$FF, CPMUFLG           ;clear flags             (BASE_INIT/RESET_INIT)
                                                              ;Check for low voltage reset (flags in A)                (BASE_INIT/RESET_INIT)
001480 001480 CD 2D 1A                                        LDY     #RESET_MSG_POWFAIL                               (BASE_INIT/RESET_INIT)
001483 001483 85 20                                           BITA    #LVRF                                            (BASE_INIT/RESET_INIT)
001485 001485 26 4E                                           BNE     RESET_INIT_4            ;low voltage reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for illegal address reset (flags in A)            (BASE_INIT/RESET_INIT)
001487 001487 CD 2D 26                                        LDY     #RESET_MSG_ILLADDR                               (BASE_INIT/RESET_INIT)
00148A 00148A 85 04                                           BITA    #ILAF                                            (BASE_INIT/RESET_INIT)
00148C 00148C 26 47                                           BNE     RESET_INIT_4            ;illegal address reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for power-on or external pin reset (flags in A)   (BASE_INIT/RESET_INIT)
00148E 00148E FD 2D D2                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/RESET_INIT)
001491 001491 27 45                                           BEQ     RESET_INIT_5            ;power-on or external pin reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (string in Y)           (BASE_INIT/RESET_INIT)
001493 001493 87                                              CLRA                            ;initialize C0           (BASE_INIT/RESET_INIT)
001494 001494 CE 3F 00                                        LDX     #((RESET_MSG_LENGTH-1)<<8);initialize char limit and C1 (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (striing pointer in Y, char limit:C1 in X, C0 in A) (BASE_INIT/RESET_INIT)
001497 001497 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
001499 001499 2B 1F                                           BMI     RESET_INIT_2            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
00149B 00149B C1 20                   RESET_INIT_1            CMPB    #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
00149D 00149D 25 33                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
00149F 00149F C1 7E                                           CMPB    #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0014A1 0014A1 22 2F                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0014A3 0014A3 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0014A5 0014A5 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0014A7 0014A7 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0014A9 0014A9 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
0014AB 0014AB B7 81                                           EXG     A, B                    ;C0:C1  -> D             (BASE_INIT/RESET_INIT)
0014AD 0014AD B7 D4                                           EXG     X, D                    ;C0:C1  -> X, char limit -> A (BASE_INIT/RESET_INIT)
0014AF 0014AF B7 51                                           TFR     X, B                    ;char limit:C1 -> D      (BASE_INIT/RESET_INIT)
                                                              ;Check character limit ((string pointer in Y, C0:C1 in X, char limit:C1 in D) (BASE_INIT/RESET_INIT)
0014B1 0014B1 04 00 1E                                        DBEQ    A, RESET_INIT_3         ;invalid message         (BASE_INIT/RESET_INIT)
0014B4 0014B4 B7 D4                                           EXG     X, D                    ;C0:C1  -> D, char limit:C1 ->  X (BASE_INIT/RESET_INIT)
0014B6 0014B6 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0014B8 0014B8 2A E1                                           BPL     RESET_INIT_1            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;String termination found (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0014BA 0014BA                         RESET_INIT_2            ;ANDB   #$7F                    ;ignore termination      (BASE_INIT/RESET_INIT)
                                                              ;;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BLO    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BHI    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0014BA 0014BA C1 A0                                           CMPB    #$A0            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0014BC 0014BC 25 14                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0014BE 0014BE C1 FE                                           CMPB    #$FE            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0014C0 0014C0 22 10                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0014C2 0014C2 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0014C4 0014C4 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0014C6 0014C6 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0014C8 0014C8 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
                                                              ;Check Fletcher's checksum (string in pointer Y, C1 in A, C0 in B) (BASE_INIT/RESET_INIT)
0014CA 0014CA A1 70                                           CMPA    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0014CC 0014CC 26 04                                           BNE     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0014CE 0014CE E1 70                                           CMPB    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0014D0 0014D0 27 06                                           BEQ     RESET_INIT_5            ;valid message           (BASE_INIT/RESET_INIT)
                                                              ;Invalid error message                                   (BASE_INIT/RESET_INIT)
0014D2 0014D2 CD 2D 34                RESET_INIT_3            LDY     #RESET_MSG_UNKNOWN      ;unknown error           (BASE_INIT/RESET_INIT)
                                                              ;Update error message                                    (BASE_INIT/RESET_INIT)
0014D5 0014D5 7D 2D D2                RESET_INIT_4            STY     RESET_MSG_PTR           ;set error message       (BASE_INIT/RESET_INIT)
                                                              ;Done                                                    (BASE_INIT/RESET_INIT)
0014D8 0014D8 -> $14D8                RESET_INIT_5            EQU     *                                                (BASE_INIT/RESET_INIT)
0014D8 0014D8 MACRO                                           MMAP_INIT                                                (BASE_INIT)
0014D8 0014D8 MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (BASE_INIT/VECTAB_INIT)
0014D8 0014D8 18 0B 3F 01 20                                  MOVB    #(VECTAB_START>>8), IVBR                         (BASE_INIT/VECTAB_INIT)
0014DD 0014DD MACRO                                           SSTACK_INIT                                              (BASE_INIT)
0014DD 0014DD MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
0014DD 0014DD CF 2D A0                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
0014E0 0014E0 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
0014E2 0014E2 MACRO                                           VMON_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VMON_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VMON_INIT)
                                      ;############################################################################### (BASE_INIT/VMON_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VMON_INIT)
                                      ;#--------------                                                                 (BASE_INIT/VMON_INIT)
                                                              ;Monitor VBAT and VUSB                                   (BASE_INIT/VMON_INIT)
0014E2 0014E2 18 03 09 10 00 70                               MOVW    #((VMON_ATDCTL0_CONFIG<<8)|VMON_ATDCTL1_CONFIG), ATDCTL0 (BASE_INIT/VMON_INIT)
0014E8 0014E8 18 03 01 10 00 72                               MOVW    #((VMON_ATDCTL2_CONFIG<<8)|VMON_ATDCTL3_CONFIG), ATDCTL2 (BASE_INIT/VMON_INIT)
0014EE 0014EE 18 0B FF 00 74                                  MOVB    #VMON_ATDCTL4_CONFIG, ATDCTL4                    (BASE_INIT/VMON_INIT)
0014F3 0014F3 18 0B 03 00 79                                  MOVB    #((1<<VMON_VBAT_CONVERSION)|(1<<VMON_VUSB_CONVERSION)), ATDCMPEL (BASE_INIT/VMON_INIT)
0014F8 0014F8 18 0B 03 00 7F                                  MOVB    #((1<<VMON_VBAT_CONVERSION)|(1<<VMON_VUSB_CONVERSION)), ATDCMPHTL (BASE_INIT/VMON_INIT)
0014FD 0014FD 18 03 BA 2D 00 80                               MOVW    #VMON_VBAT_UPPER_THRESHOLD, VMON_VBAT_ATDDR      (BASE_INIT/VMON_INIT)
001503 001503 18 03 BA 2D 00 82                               MOVW    #VMON_VUSB_UPPER_THRESHOLD, VMON_VUSB_ATDDR      (BASE_INIT/VMON_INIT)
                                                                      ;Start ATD conversions                           (BASE_INIT/VMON_INIT)
001509 001509 18 03 FF FF 00 7A                               MOVW    #$FFFF, ATDSTAT2H                                (BASE_INIT/VMON_INIT)
00150F 00150F 18 0B FF 00 76                                  MOVB    #$FF, ATDSTAT0                                   (BASE_INIT/VMON_INIT)
001514 001514 18 0B 38 00 75                                  MOVB    #VMON_ATDCTL5_CONFIG, ATDCTL5                    (BASE_INIT/VMON_INIT)
001519 001519 MACRO                                           TIM_INIT                                                 (BASE_INIT)
001519 001519 MACRO                                           LED_INIT                                                 (BASE_INIT)
001519 001519 MACRO                                           KEYS_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/KEYS_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/KEYS_INIT)
                                      ;############################################################################### (BASE_INIT/KEYS_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/KEYS_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/KEYS_INIT)
001519 001519 4C 40 10                                        BSET    TIOS, #(1<<KEYS_OC)                              (BASE_INIT/KEYS_INIT)
                                                              ;BCLR   TCTL2, #(3<<(2*(KEYS_OC-4)))                     (BASE_INIT/KEYS_INIT)
                                                              ;BCLR   TIE, #(1<<KEYS_OC)                               (BASE_INIT/KEYS_INIT)
                                                              ;Check for any key                                       (BASE_INIT/KEYS_INIT)
                                                              ;MOVB   #KEY_PP_MASK, DDRP      ;drive all columns low   (BASE_INIT/KEYS_INIT)
                                                              ;Clear delay counter                                     (BASE_INIT/KEYS_INIT)
00151C 00151C 79 2D E7                                        CLR     KEYS_DELAY_COUNT                                 (BASE_INIT/KEYS_INIT)
                                                              ;Clear input buffer                                      (BASE_INIT/KEYS_INIT)
00151F 00151F 18 03 00 00 2D F8                               MOVW    #$0000, KEYS_BUF_IN     ;clear input buffer      (BASE_INIT/KEYS_INIT)
                                                              ;Observe all columns                                     (BASE_INIT/KEYS_INIT)
                                                              ;MOVB   #KEYS_ROW_MASK, KEYS_ROW_PORT           ;drive all colums (shortcut for unshared row port) (BASE_INIT/KEYS_INIT)
                                                              ;BSET   KEYS_ROW_PORT, #KEYS_ROW_MASK           ;drive all colums (generic) (BASE_INIT/KEYS_INIT)
                                                              ;Clear and enable row interrupts                         (BASE_INIT/KEYS_INIT)
001525 001525 18 0B 7F 02 7F                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IF                      (BASE_INIT/KEYS_INIT)
00152A 00152A 18 0B 7F 02 7D                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IE                      (BASE_INIT/KEYS_INIT)
00152F 00152F MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                      ;#--------------                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
00152F 00152F 4C 40 0C                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
001532 001532 18 0B 18 00 CD                                  MOVB    #(TXPOL|RXPOL), SCISR2                           (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
001537 001537 FC 2D CC                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
00153A 00153A 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
00153C 00153C CE 19 99                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
00153F 00153F 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
001541 001541 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
001544 001544 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
001546 001546 CD 28 A2                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
001549 001549 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
00154B 00154B 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
00154D 00154D 8D 28 B2                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
001550 001550 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
001552 001552 CE 00 A3                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
001555 001555 18 03 4C 6B 2D CC                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
00155B 00155B 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format                                        (BASE_INIT/SCI_INIT)
00155D 00155D 18 0B 04 00 CA                                  MOVB    #SCI_8N1, SCICR1                        ;8N1     (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)                    (BASE_INIT/SCI_INIT)
001562 001562 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (BASE_INIT/SCI_INIT)
001565 001565 MACRO                                           STRING_INIT                                              (BASE_INIT)
001565 001565 MACRO                                           NUM_INIT                                                 (BASE_INIT)
001565 001565 MACRO                                           DISP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/DISP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/DISP_INIT)
                                      ;############################################################################### (BASE_INIT/DISP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/DISP_INIT)
                                                              ;Deassert display reset                                  (BASE_INIT/DISP_INIT)
                                                              ;BSET   DISP_RESET_PORT, #DISP_RESET_PIN                 (BASE_INIT/DISP_INIT)
001565 001565 18 0B 08 02 48                                  MOVB    #DISP_RESET_PIN, DISP_RESET_PORT ;shortcut       (BASE_INIT/DISP_INIT)
                                                              ;Initialize Variables                                    (BASE_INIT/DISP_INIT)
00156A 00156A 18 03 00 00 2D E4                               MOVW    #$0000, DISP_BUF_IN                              (BASE_INIT/DISP_INIT)
001570 001570 79 2D E6                                        CLR     DISP_STAT                                        (BASE_INIT/DISP_INIT)
                                                              ;Initialize SPI                                          (BASE_INIT/DISP_INIT)
001573 001573 18 03 9E 19 00 D8                               MOVW    #((DISP_SPICR1_CONFIG<<8)|DISP_SPICR2_CONFIG), SPICR1 (BASE_INIT/DISP_INIT)
001579 001579 18 0B 00 00 DA                                  MOVB    #DISP_SPIBR_CONFIG, SPIBR                        (BASE_INIT/DISP_INIT)
                                                              ;Setup display                                           (BASE_INIT/DISP_INIT)
00157E 00157E CE 2D 4C                                        LDX     #DISP_SEQ_INIT_START                             (BASE_INIT/DISP_INIT)
001581 001581 CD 00 0D                                        LDY     #(DISP_SEQ_INIT_END-DISP_SEQ_INIT_START)         (BASE_INIT/DISP_INIT)
001584 001584 MACRO                                           DISP_STREAM_BL                                           (BASE_INIT/DISP_INIT)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
001584 001584 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
001584 001584 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001584 001584 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001584 001584 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001587 001587 18 25 03 0E                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00158B 00158B 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00158E 00158E 18 22 03 0D                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001592 001592 -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001592 001592 -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001592 001592 16 21 64                                        JOBSR   \1                                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Show welcome/error screen on DISP                       (BASE_INIT)
001595 001595 MACRO                                           RESET_BR_ERR    BASE_DISP_ERROR                          (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
001595 001595 FD 2D D2                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
001598 001598 26 19                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
00159A 00159A MACRO                                           BASE_DISP_WELCOME                                        (BASE_INIT)
                                      ;#DISP                                                                           (BASE_INIT/BASE_DISP_WELCOME)
00159A 00159A CE 23 9F                                        LDX     #BASE_DISP_WELCOME_SCR                           (BASE_INIT/BASE_DISP_WELCOME)
00159D 00159D CD 03 17                                        LDY     #BASE_DISP_WELCOME_SIZE                          (BASE_INIT/BASE_DISP_WELCOME)
0015A0 0015A0 MACRO                                           DISP_STREAM_BL                                           (BASE_INIT/BASE_DISP_WELCOME)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
0015A0 0015A0 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
0015A0 0015A0 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0015A0 0015A0 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015A0 0015A0 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015A3 0015A3 18 25 02 F2                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015A7 0015A7 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015AA 0015AA 18 22 02 F1                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015AE 0015AE -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015AE 0015AE -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015AE 0015AE 16 21 64                                        JOBSR   \1                                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
0015B1 0015B1 20 17                                           JOB     BASE_DISP_DONE                                   (BASE_INIT)
0015B3 0015B3 MACRO                   BASE_DISP_ERROR         BASE_DISP_ERROR                                          (BASE_INIT)
                                      ;#DISP                                                                           (BASE_INIT/BASE_DISP_ERROR)
0015B3 0015B3 CE 26 B6                                        LDX     #BASE_DISP_ERROR_SCR                             (BASE_INIT/BASE_DISP_ERROR)
0015B6 0015B6 CD 01 54                                        LDY     #BASE_DISP_ERROR_SIZE                            (BASE_INIT/BASE_DISP_ERROR)
0015B9 0015B9 MACRO                                           DISP_STREAM_BL                                           (BASE_INIT/BASE_DISP_ERROR)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
0015B9 0015B9 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
0015B9 0015B9 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0015B9 0015B9 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015B9 0015B9 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015BC 0015BC 18 25 02 D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015C0 0015C0 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015C3 0015C3 18 22 02 D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015C7 0015C7 -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015C7 0015C7 -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0015C7 0015C7 16 21 64                                        JOBSR   \1                                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
0015CA 0015CA -> $15CA                BASE_DISP_DONE          EQU     *                                                (BASE_INIT)
                                                              ;Wait for PLL lock                                       (BASE_INIT)
0015CA 0015CA MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0015CA 0015CA 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0015CC 0015CC 4E 39 80 1C                             BRSET   CPMUCLKS, #PLLSEL, DONE                         ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0015D0 0015D0 MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015D0 0015D0 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015D3 0015D3 25 13                                           BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015D5 0015D5 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015D8 0015D8 22 0F                                           BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015DA 0015DA MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0015DA 0015DA 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0015DF 0015DF 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0015E4 0015E4 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015E6 0015E6 20 02                                           JOB     DONE                                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015E8 0015E8 00                      OF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015E9 0015E9 00                      UF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015EA 0015EA -> $15EA                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0015EA 0015EA 20 DE                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0015EC 0015EC 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;Wait for voltage monitor                                (BASE_INIT)
0015EE 0015EE MACRO                                           VMON_WAIT_FOR_1ST_RESULTS                                (BASE_INIT)
                                      ;#Wait for first connversion results                                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
                                      ;#----------------------------------                                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
0015EE 0015EE 14 10                   LOOP            SEI                                                              (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
0015F0 0015F0 4E 76 80 1C                             BRSET   ATDSTAT0, #SCF, DONE                    ;Conversion sequence complete (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
0015F4 0015F4 MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
0015F4 0015F4 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
0015F7 0015F7 25 13                                           BLO     OF ;ISTACK_OF                                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
0015F9 0015F9 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
0015FC 0015FC 22 0F                                           BHI     UF ;ISTACK_UF                                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
0015FE 0015FE MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
0015FE 0015FE 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
001603 001603 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
001608 001608 10 EF                                           CLI                                                      (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00160A 00160A 20 02                                           JOB     DONE                                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00160C 00160C 00                      OF                      BGND                                                     (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00160D 00160D 00                      UF                      BGND                                                     (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00160E 00160E -> $160E                DONE                    EQU     *                                                (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00160E 00160E 20 DE                                   JOB     LOOP                                                     (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
001610 001610 10 EF                   DONE            CLI                                                              (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
                                                              ;Send welcome/error message through                      (BASE_INIT)
001612 001612 MACRO                                           SCI_BR_DISABLED BASE_SCI_DONE                            (BASE_INIT)
                                      ;#Check if disabled                                                              (BASE_INIT/SCI_BR_DISABLED)
                                      ;#-----------------                                                              (BASE_INIT/SCI_BR_DISABLED)
                                                              ;Branch if disabled                                      (BASE_INIT/SCI_BR_DISABLED)
001612 001612 4F CB 0C 56                                     BRCLR   SCICR2, #(TE|RE), \1                             (BASE_INIT/SCI_BR_DISABLED)
001616 001616 MACRO                                           RESET_BR_ERR    BASE_SCI_ERROR                           (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
001616 001616 FD 2D D2                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
001619 001619 26 16                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
00161B 00161B MACRO                                           BASE_SCI_WELCOME                                         (BASE_INIT)
                                      ;#Enable SCI whenever USB is connected, disable otherwise                        (BASE_INIT/BASE_SCI_WELCOME)
                                      ;--------------------------------------------------------                        (BASE_INIT/BASE_SCI_WELCOME)
                                      ;#Welcome messages                                                               (BASE_INIT/BASE_SCI_WELCOME)
                                      ;-----------------                                                               (BASE_INIT/BASE_SCI_WELCOME)
                                      ;#SCI                                                                            (BASE_INIT/BASE_SCI_WELCOME)
00161B 00161B CE 28 0A                                        LDX     #BASE_SCI_WELCOME_MSG   ;print welcome message   (BASE_INIT/BASE_SCI_WELCOME)
00161E 00161E MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_WELCOME)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
00161E 00161E MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
00161E 00161E MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00161E 00161E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00161E 00161E 8F 2D 74                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001621 001621 18 25 02 74                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001625 001625 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001628 001628 18 22 02 73                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00162C 00162C -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00162C 00162C -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00162C 00162C 16 1D 21                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
00162F 00162F 20 3B                                           JOB     BASE_SCI_DONE                                    (BASE_INIT)
001631 001631 MACRO                   BASE_SCI_ERROR          BASE_SCI_ERROR                                           (BASE_INIT)
                                      ;#Error messages                                                                 (BASE_INIT/BASE_SCI_ERROR)
                                      ;---------------                                                                 (BASE_INIT/BASE_SCI_ERROR)
                                      ; args:   Y: error message                                                       (BASE_INIT/BASE_SCI_ERROR)
                                      ;#SCI                                                                            (BASE_INIT/BASE_SCI_ERROR)
001631 001631 CE 28 26                                        LDX     #BASE_SCI_ERROR_HEADER  ;print error header      (BASE_INIT/BASE_SCI_ERROR)
001634 001634 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_ERROR)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
001634 001634 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
001634 001634 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001634 001634 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001634 001634 8F 2D 74                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001637 001637 18 25 02 5E                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00163B 00163B 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00163E 00163E 18 22 02 5D                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001642 001642 -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001642 001642 -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001642 001642 16 1D 21                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
001645 001645 B7 65                                           TFR     Y, X                    ;print error message     (BASE_INIT/BASE_SCI_ERROR)
001647 001647 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_ERROR)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
001647 001647 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
001647 001647 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001647 001647 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001647 001647 8F 2D 74                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00164A 00164A 18 25 02 4B                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00164E 00164E 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001651 001651 18 22 02 4A                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001655 001655 -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001655 001655 -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001655 001655 16 1D 21                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
001658 001658 CE 28 33                                        LDX     #BASE_SCI_ERROR_TRAILER ;print error TRAILER     (BASE_INIT/BASE_SCI_ERROR)
00165B 00165B MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_ERROR)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
00165B 00165B MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00165B 00165B MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00165B 00165B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00165B 00165B 8F 2D 74                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00165E 00165E 18 25 02 37                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001662 001662 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001665 001665 18 22 02 36                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001669 001669 -> $189F                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001669 001669 -> $1899                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001669 001669 16 1D 21                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00166C 00166C -> $166C                BASE_SCI_DONE           EQU     *                                                (BASE_INIT)
00166C 00166C -> $166C                DEMO_KEY_STROKE_LOOP    EQU     *
                                                              ;Wait for key stroke
00166C 00166C MACRO                                           KEYS_GET_BL             ;key code -> A
                                      ;#Receive one byte - blocking                                                    (KEYS_GET_BL)
                                      ; args:   none                                                                   (KEYS_GET_BL)
                                      ; result: A: key code                                                            (KEYS_GET_BL)
                                      ; SSTACK: 7 bytes                                                                (KEYS_GET_BL)
                                      ;         X, Y, and B are preserved                                              (KEYS_GET_BL)
00166C 00166C MACRO                                           KEYS_CALL_BL    KEYS_GET_NB, 4                           (KEYS_GET_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (KEYS_GET_BL/KEYS_CALL_BL)
                                      ; args:   1: non-blocking function                                               (KEYS_GET_BL/KEYS_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (KEYS_GET_BL/KEYS_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (KEYS_GET_BL/KEYS_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (KEYS_GET_BL/KEYS_CALL_BL)
00166C 00166C MACRO                                           SCI_CALL_BL     \1, \2                                   (KEYS_GET_BL/KEYS_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00166C 00166C 14 10                   LOOP                    SEI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00166E 00166E MACRO                                           SSTACK_JOBSR    \1, \2                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
00166E 00166E MACRO                                           SSTACK_PREPUSH  \2                                       (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00166E 00166E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00166E 00166E 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001671 001671 18 25 02 24                                     BLO     OF                      ;=> 3 cycles     4 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001675 001675 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001678 001678 18 22 02 23                                     BHI     UF                      ;=> 3 cycles     4 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00167C 00167C -> $189F                UF                      EQU     SSTACK_UF                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00167C 00167C -> $1899                OF                      EQU     SSTACK_OF                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00167C 00167C 16 22 8C                                        JOBSR   \1                                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
00167F 00167F 25 1C                                           BCS     DONE            ;function successful             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
001681 001681 MACRO                                           ISTACK_WAIT                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
001681 001681 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
001684 001684 25 13                                           BLO     OF ;ISTACK_OF                                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
001686 001686 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
001689 001689 22 0F                                           BHI     UF ;ISTACK_UF                                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00168B 00168B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00168B 00168B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001690 001690 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
001695 001695 10 EF                                           CLI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
001697 001697 20 02                                           JOB     DONE                                             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
001699 001699 00                      OF                      BGND                                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00169A 00169A 00                      UF                      BGND                                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00169B 00169B -> $169B                DONE                    EQU     *                                                (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00169B 00169B 20 CF                                           JOB     LOOP                                             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00169D 00169D 10 EF                   DONE                    CLI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00169F 00169F 7A 2D 5D                                        STAA    DEMO_KEY_CODE
                                                              ;Print key code (key code in A)
0016A2 0016A2 CE 23 93                                        LDX     #DEMO_PRINT_HEADER              ;print header
0016A5 0016A5 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
0016A5 0016A5 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
0016A5 0016A5 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0016A5 0016A5 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016A5 0016A5 8F 2D 74                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016A8 0016A8 18 25 01 ED                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016AC 0016AC 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016AF 0016AF 18 22 01 EC                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016B3 0016B3 -> $189F                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016B3 0016B3 -> $1899                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016B3 0016B3 16 1D 21                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
0016B6 0016B6 CD 00 00                                        LDY     #$0000                          ;reverse digits
0016B9 0016B9 B7 05                                           TFR     A, X
0016BB 0016BB C6 10                                           LDAB    #16                             ;set base
0016BD 0016BD MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0016BD 0016BD MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0016BD 0016BD MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0016BD 0016BD MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016BD 0016BD 8F 2D 7C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016C0 0016C0 18 25 01 D5                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016C4 0016C4 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016C7 0016C7 18 22 01 D4                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016CB 0016CB -> $189F                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016CB 0016CB -> $1899                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016CB 0016CB 16 1D 9C                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0016CE 0016CE MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0016CE 0016CE MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0016CE 0016CE                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0016CE 0016CE MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0016CE 0016CE MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0016CE 0016CE MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0016CE 0016CE MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016CE 0016CE 8F 2D 70                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016D1 0016D1 18 25 01 C4                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016D5 0016D5 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016D8 0016D8 18 22 01 C3                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016DC 0016DC -> $189F                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016DC 0016DC -> $1899                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016DC 0016DC 16 19 C3                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0016DF 0016DF MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0016DF 0016DF MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0016DF 0016DF MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016DF 0016DF 8F 2D 7D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016E2 0016E2 18 25 01 B3                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016E6 0016E6 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016E9 0016E9 18 22 01 B2                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016ED 0016ED -> $189F                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016ED 0016ED -> $1899                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0016ED 0016ED 16 1E 2D                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0016F0 0016F0 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0016F2 0016F2 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
0016F2 0016F2 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0016F2 0016F2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016F2 0016F2 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016F5 0016F5 18 25 01 A0                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016F9 0016F9 8F 2D 9A                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0016FC 0016FC 18 22 01 9F                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001700 001700 -> $189F                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001700 001700 -> $1899                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001700 001700 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Display keystroke
                                                              ;Clear page 0
001702 001702 C7                                              CLRB                                    ;switch to page 0
001703 001703 MACRO                                           DEMO_SWITCH_PAGE_BL
                                      ;Switch page macro                                                               (DEMO_SWITCH_PAGE_BL)
001703 001703 MACRO                                           SSTACK_JOBSR    DEMO_SWITCH_PAGE_BL, 13                  (DEMO_SWITCH_PAGE_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
001703 001703 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001703 001703 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001703 001703 8F 2D 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001706 001706 18 25 01 8F                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00170A 00170A 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00170D 00170D 18 22 01 8E                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001711 001711 -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001711 001711 -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001711 001711 16 17 C9                                        JOBSR   \1                                               (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
001714 001714 MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 128           ;clear entire page
001714 001714 86 80                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
001716 001716 MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
001716 001716 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001716 001716 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001716 001716 8F 2D 73                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001719 001719 18 25 01 7C                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00171D 00171D 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001720 001720 18 22 01 7B                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001724 001724 -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001724 001724 -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001724 001724 16 18 39                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                                              ;Initialize variables
001727 001727 79 2D 5E                                        CLR     DEMO_PAGE
00172A 00172A 79 2D 60                                        CLR     DEMO_CUR_KEY
                                                              ;Switch to next page
00172D 00172D F6 2D 5E                DEMO_PAGE_LOOP          LDAB    DEMO_PAGE                       ;increment page count
001730 001730 C1 07                                           CMPB    #7                              ;check is key search is complete
001732 001732 18 24 FF 36                                     BHS     DEMO_KEY_STROKE_LOOP            ;wait for next key stroke
001736 001736 52                                              INCB
001737 001737 7B 2D 5E                                        STAB    DEMO_PAGE
00173A 00173A MACRO                                           DEMO_SWITCH_PAGE_BL                     ;transmit command sequence
                                      ;Switch page macro                                                               (DEMO_SWITCH_PAGE_BL)
00173A 00173A MACRO                                           SSTACK_JOBSR    DEMO_SWITCH_PAGE_BL, 13                  (DEMO_SWITCH_PAGE_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
00173A 00173A MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00173A 00173A MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00173A 00173A 8F 2D 77                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00173D 00173D 18 25 01 58                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001741 001741 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001744 001744 18 22 01 57                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001748 001748 -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001748 001748 -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001748 001748 07 7F                                           JOBSR   \1                                               (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
00174A 00174A 79 2D 5F                                        CLR     DEMO_COL                        ;clear column counter
                                                              ;Right margin
00174D 00174D MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 31            ;draw right margin
00174D 00174D 86 1F                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00174F 00174F MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00174F 00174F MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00174F 00174F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00174F 00174F 8F 2D 73                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001752 001752 18 25 01 43                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001756 001756 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001759 001759 18 22 01 42                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00175D 00175D -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00175D 00175D -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00175D 00175D 16 18 39                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                                              ;Draw next box
001760 001760 B6 2D 60                DEMO_COL_LOOP           LDAA    DEMO_CUR_KEY
001763 001763 B1 2D 5D                                        CMPA    DEMO_KEY_CODE
001766 001766 27 05                                           BEQ     DEMO_COL_LOOP_1                 ;draw black box
001768 001768 16 18 71                                        JOBSR   DEMO_WHITE_BOX
00176B 00176B 20 03                                           JOB     DEMO_COL_LOOP_2
00176D 00176D 16 18 85                DEMO_COL_LOOP_1         JOBSR   DEMO_BLACK_BOX
001770 001770 72 2D 5F                DEMO_COL_LOOP_2         INC     DEMO_COL
001773 001773 72 2D 60                                        INC     DEMO_CUR_KEY
                                                              ;Draw space
001776 001776 86 05                                           LDAA    #5
001778 001778 B1 2D 5E                                        CMPA    DEMO_PAGE
00177B 00177B 23 33                                           BLS     DEMO_COL_LOOP_5                 ;rows E-G
                                                              ;Rows A-D (5 in A)
00177D 00177D B1 2D 5F                                        CMPA    DEMO_COL
001780 001780 23 15                                           BLS     DEMO_COL_LOOP_3                 ;col 5
                                                              ;Rows A-D, cols 0-4
001782 001782 MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 9             ;draw wide space
001782 001782 86 09                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
001784 001784 MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
001784 001784 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001784 001784 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001784 001784 8F 2D 73                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001787 001787 18 25 01 0E                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00178B 00178B 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00178E 00178E 18 22 01 0D                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001792 001792 -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001792 001792 -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001792 001792 16 18 39                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
001795 001795 20 C9                                           JOB     DEMO_COL_LOOP
                                                              ;Rows A-D, col 5
001797 001797 72 2D 60                DEMO_COL_LOOP_3         INC     DEMO_CUR_KEY                    ;skip key
00179A 00179A MACRO                   DEMO_COL_LOOP_4         DEMO_CLEAR_COLUMNS_IMM_BL 31            ;draw left margin
00179A 00179A 86 1F                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00179C 00179C MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00179C 00179C MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00179C 00179C MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00179C 00179C 8F 2D 73                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00179F 00179F 18 25 00 F6                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017A3 0017A3 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017A6 0017A6 18 22 00 F5                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017AA 0017AA -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017AA 0017AA -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017AA 0017AA 16 18 39                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
0017AD 0017AD 06 17 2D                                        JOB     DEMO_PAGE_LOOP
                                                              ;Rows E-G (5 in A)
0017B0 0017B0 B1 2D 5F                DEMO_COL_LOOP_5         CMPA    DEMO_COL
0017B3 0017B3 25 E5                                           BLO     DEMO_COL_LOOP_4                 ;draw left margin
                                                              ;Rows E-G, cols 0-5
0017B5 0017B5 MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 6             ;draw narrow space
0017B5 0017B5 86 06                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
0017B7 0017B7 MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
0017B7 0017B7 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0017B7 0017B7 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017B7 0017B7 8F 2D 73                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017BA 0017BA 18 25 00 DB                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017BE 0017BE 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017C1 0017C1 18 22 00 DA                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017C5 0017C5 -> $189F                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017C5 0017C5 -> $1899                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017C5 0017C5 07 72                                           JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
0017C7 0017C7 20 97                                           JOB     DEMO_COL_LOOP
                                      ;#Switch page (blocking)
                                      ; args:   B: target page
                                      ; result: none (data input active)
                                      ; SSTACK: 13 bytes
                                      ;         D is preserved
0017C9 0017C9 -> $17C9                DEMO_SWITCH_PAGE_BL     EQU     *
                                                              ;Save registers
0017C9 0017C9 37                                              PSHB                                                    ;push accu B onto the SSTACK
                                                              ;Switch to command input
0017CA 0017CA MACRO                                           DISP_CMD_INPUT_BL                                       ;(SSTACK: 10 bytes)
                                      ;#Switch to command input (blocking)                                             (DISP_CMD_INPUT_BL)
                                      ; args:   none                                                                   (DISP_CMD_INPUT_BL)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_CMD_INPUT_BL)
                                      ;         D is preserved                                                         (DISP_CMD_INPUT_BL)
0017CA 0017CA MACRO                                           DISP_STREAM_FROM_TO_BL  DISP_SEQ_CMD_START, DISP_SEQ_CMD_END (DISP_CMD_INPUT_BL)
                                      ;# Convenience macros                                                            (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
0017CA 0017CA CE 2D 59                                        LDX     #\1                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
0017CD 0017CD CD 00 02                                        LDY     #(\2-\1)                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
0017D0 0017D0 MACRO                                           DISP_STREAM_BL                                           (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
0017D0 0017D0 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
0017D0 0017D0 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0017D0 0017D0 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017D0 0017D0 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017D3 0017D3 18 25 00 C2                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017D7 0017D7 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017DA 0017DA 18 22 00 C1                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017DE 0017DE -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017DE 0017DE -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017DE 0017DE 16 21 64                                        JOBSR   \1                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Set page address
0017E1 0017E1 CA B0                                           ORAB    #$B0
0017E3 0017E3 MACRO                                           DISP_TX_BL                                              ;(SSTACK: 7 bytes)
                                      ;#Transmit commands and data (blocking)                                          (DISP_TX_BL)
                                      ; args:   B: buffer entry                                                        (DISP_TX_BL)
                                      ; result: none                                                                   (DISP_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_BL)
                                      ;         X, Y and D are preserved                                               (DISP_TX_BL)
0017E3 0017E3 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_BL/SSTACK_JOBSR)
0017E3 0017E3 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0017E3 0017E3 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017E3 0017E3 8F 2D 71                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017E6 0017E6 18 25 00 AF                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017EA 0017EA 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017ED 0017ED 18 22 00 AE                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017F1 0017F1 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017F1 0017F1 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017F1 0017F1 16 21 23                                        JOBSR   \1                                               (DISP_TX_BL/SSTACK_JOBSR)
                                                              ;Switch to first column
0017F4 0017F4 MACRO                                           DISP_TX_IMM_BL  $10                                     ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
0017F4 0017F4 C6 10                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
0017F6 0017F6 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
0017F6 0017F6 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0017F6 0017F6 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017F6 0017F6 8F 2D 71                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017F9 0017F9 18 25 00 9C                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0017FD 0017FD 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001800 001800 18 22 00 9B                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001804 001804 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001804 001804 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001804 001804 16 21 23                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
001807 001807 MACRO                                           DISP_TX_IMM_BL  $04                                     ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
001807 001807 C6 04                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
001809 001809 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
001809 001809 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001809 001809 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001809 001809 8F 2D 71                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00180C 00180C 18 25 00 89                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001810 001810 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001813 001813 18 22 00 88                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001817 001817 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001817 001817 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001817 001817 16 21 23                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                                              ;Switch to data input
00181A 00181A MACRO                                           DISP_DATA_INPUT_BL                                      ;(SSTACK: 10 bytes)
                                      ;#Switch to data input (blocking)                                                (DISP_DATA_INPUT_BL)
                                      ; args:   none                                                                   (DISP_DATA_INPUT_BL)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_DATA_INPUT_BL)
                                      ;         D is preserved                                                         (DISP_DATA_INPUT_BL)
00181A 00181A MACRO                                           DISP_STREAM_FROM_TO_BL  DISP_SEQ_DATA_START, DISP_SEQ_DATA_END (DISP_DATA_INPUT_BL)
                                      ;# Convenience macros                                                            (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00181A 00181A CE 2D 5B                                        LDX     #\1                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00181D 00181D CD 00 02                                        LDY     #(\2-\1)                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
001820 001820 MACRO                                           DISP_STREAM_BL                                           (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
001820 001820 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
001820 001820 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001820 001820 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001820 001820 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001823 001823 25 74                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001825 001825 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001828 001828 22 75                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00182A 00182A -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00182A 00182A -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00182A 00182A 16 21 64                                        JOBSR   \1                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Restore registers
00182D 00182D MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00182D 00182D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00182D 00182D 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001830 001830 25 67                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001832 001832 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001835 001835 22 68                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001837 001837 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001837 001837 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001837 001837 33                                              PULB                                                    ;pull accu B from the SSTACK
                                                              ;Done
001838 001838 3D                                              RTS
                                      ;#Clear columns (blocking)
                                      ; args:   A: number of columns (data input active)
                                      ; result: none (data input active)
                                      ; SSTACK: 9 bytes
                                      ;         X, Y, and D are preserved
001839 001839 -> $1839                DEMO_CLEAR_COLUMNS_BL   EQU     *
                                                              ;Transmit sequence
001839 001839 MACRO                                           DISP_TX_IMM_BL  DISP_ESC_START                          ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
001839 001839 C6 E3                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
00183B 00183B MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
00183B 00183B MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00183B 00183B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00183B 00183B 8F 2D 71                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00183E 00183E 25 59                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001840 001840 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001843 001843 22 5A                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001845 001845 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001845 001845 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001845 001845 16 21 23                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
001848 001848 18 0E                                           TAB
00184A 00184A MACRO                                           DISP_TX_BL                                              ;(SSTACK: 7 bytes)
                                      ;#Transmit commands and data (blocking)                                          (DISP_TX_BL)
                                      ; args:   B: buffer entry                                                        (DISP_TX_BL)
                                      ; result: none                                                                   (DISP_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_BL)
                                      ;         X, Y and D are preserved                                               (DISP_TX_BL)
00184A 00184A MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_BL/SSTACK_JOBSR)
00184A 00184A MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00184A 00184A MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00184A 00184A 8F 2D 71                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00184D 00184D 25 4A                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00184F 00184F 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001852 001852 22 4B                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001854 001854 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001854 001854 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001854 001854 16 21 23                                        JOBSR   \1                                               (DISP_TX_BL/SSTACK_JOBSR)
001857 001857 MACRO                                           DISP_TX_IMM_BL  $00                                     ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
001857 001857 C6 00                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
001859 001859 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
001859 001859 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001859 001859 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001859 001859 8F 2D 71                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00185C 00185C 25 3B                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00185E 00185E 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001861 001861 22 3C                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001863 001863 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001863 001863 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001863 001863 16 21 23                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                                              ;Done
001866 001866 MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001866 001866 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001866 001866 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001869 001869 25 2E                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00186B 00186B 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00186E 00186E 22 2F                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001870 001870 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001870 001870 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001870 001870 3D                                              RTS
                                      ;#Draw a white box
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 10 bytes
                                      ;         D is preserved
001871 001871 MACRO                   DEMO_WHITE_BOX          DISP_STREAM_FROM_TO_BL  DEMO_WHITE_BOX_START, DEMO_WHITE_BOX_END
                                      ;# Convenience macros                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL)
001871 001871 CE 23 8B                                        LDX     #\1                                              (DISP_STREAM_FROM_TO_BL)
001874 001874 CD 00 05                                        LDY     #(\2-\1)                                         (DISP_STREAM_FROM_TO_BL)
001877 001877 MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
001877 001877 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
001877 001877 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
001877 001877 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001877 001877 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00187A 00187A 25 1D                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00187C 00187C 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00187F 00187F 22 1E                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001881 001881 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001881 001881 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001881 001881 16 21 64                                        JOBSR   \1                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
001884 001884 3D                                              RTS
                                      ;#Draw a black box
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 10 bytes
                                      ;         D is preserved
001885 001885 MACRO                   DEMO_BLACK_BOX          DISP_STREAM_FROM_TO_BL  DEMO_BLACK_BOX_START, DEMO_BLACK_BOX_END
                                      ;# Convenience macros                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL)
001885 001885 CE 23 90                                        LDX     #\1                                              (DISP_STREAM_FROM_TO_BL)
001888 001888 CD 00 03                                        LDY     #(\2-\1)                                         (DISP_STREAM_FROM_TO_BL)
00188B 00188B MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00188B 00188B MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00188B 00188B MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00188B 00188B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00188B 00188B 8F 2D 75                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00188E 00188E 25 09                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001890 001890 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001893 001893 22 0A                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001895 001895 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001895 001895 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001895 001895 16 21 64                                        JOBSR   \1                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
001898 001898 3D                                              RTS
001899 001899 -> $1899                BASE_CODE_START         EQU     *
001899 001899 -> $1899                BASE_CODE_START_LIN     EQU     @
00238B 00238B                                                 ORG     BASE_CODE_END,  BASE_CODE_END_LIN
00238B 00238B -> $238B                DEMO_CODE_END           EQU     *
00238B 00238B -> $238B                DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00238B 00238B                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
00238B 00238B 7E E3 04 42 7E          DEMO_WHITE_BOX_START    DB      $7E DISP_ESC_START $04 $42 $7E
002390 002390 -> $2390                DEMO_WHITE_BOX_END      EQU     *
002390 002390 E3 06 7E                DEMO_BLACK_BOX_START    DB      DISP_ESC_START $06 $7E
002393 002393 -> $2393                DEMO_BLACK_BOX_END      EQU     *
002393 002393 MACRO                   DEMO_PRINT_HEADER       STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
002393 002393 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
002394 002394 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
002395 002395 4B 65 79 20 63 6F 64 65                         FCS     "Key code: "
              3A A0                   
00239F 00239F -> $239F                BASE_TABS_START         EQU     *
00239F 00239F -> $239F                BASE_TABS_START_LIN     EQU     @
002D5D 002D5D                                                 ORG     BASE_TABS_END,  BASE_TABS_END_LIN
002D5D 002D5D -> $2D5D                DEMO_TABS_END           EQU     *
002D5D 002D5D -> $2D5D                DEMO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (AriCalculator)                                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# TIM channel allocation                                                      #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     KEYS (debounce delay)                                         #
                                      ;#      OC5:     LCD backlight PWM                                             #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# CLOCK
002D5D 002D5D -> $0001                CLOCK_CPMU              EQU     1               ;CPMU
002D5D 002D5D -> $0001                CLOCK_IRC               EQU     1               ;use IRC
002D5D 002D5D -> $F4240               CLOCK_OSC_FREQ          EQU      1000000        ; 1 MHz IRC frequency
002D5D 002D5D -> $17D7840             CLOCK_BUS_FREQ          EQU     25000000        ; 25 MHz bus frequency
002D5D 002D5D -> $F4240               CLOCK_REF_FREQ          EQU      1000000        ; 1 MHz reference clock frequency
002D5D 002D5D -> $0001                CLOCK_VCOFRQ            EQU     $1              ; 10 MHz VCO frequency
002D5D 002D5D -> $0000                CLOCK_REFFRQ            EQU     $0              ;  1 MHz reference clock frequency
                                      ;# ISTACK
002D5D 002D5D -> $0004                ISTACK_LEVELS           EQU     4               ;max. interrupt nesting levels
                                      ;# SCI
002D5D 002D5D -> $0001                SCI_RXTX_ACTHI          EQU     1               ;RXD/TXD are inverted (active high)
002D5D 002D5D -> $0001                SCI_FC_RTSCTS           EQU     1               ;RTS/CTS flow control
002D5D 002D5D -> $0250                SCI_RTS_PORT            EQU     PTM             ;PTM
002D5D 002D5D -> $0001                SCI_RTS_PIN             EQU     PM0             ;PM0
002D5D 002D5D -> $0250                SCI_CTS_PORT            EQU     PTM             ;PTM
002D5D 002D5D -> $0252                SCI_CTS_DDR             EQU     DDRM            ;DDRM
002D5D 002D5D -> $0255                SCI_CTS_PPS             EQU     PPSM            ;PPSM
002D5D 002D5D -> $0002                SCI_CTS_PIN             EQU     PM1             ;PM1
002D5D 002D5D -> $0001                SCI_CTS_WEAK_DRIVE      EQU     1               ;weak CTS drive
002D5D 002D5D -> $0003                SCI_DLY_OC              EQU     3               ;delay timer OC3
002D5D 002D5D -> $0001                SCI_BD_ON               EQU     1               ;use baud rate detection
002D5D 002D5D -> $0001                SCI_BD_TIM              EQU     1               ;TIM
002D5D 002D5D -> $0000                SCI_BD_ICPE             EQU     0               ;RX posedge capture IC0
002D5D 002D5D -> $0001                SCI_BD_ICNE             EQU     1               ;RX negedge capture IC1
002D5D 002D5D -> $0002                SCI_BD_OC               EQU     2               ;BD delay timer OC2
002D5D 002D5D -> $0001                SCI_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;# NUM
002D5D 002D5D -> $0001                NUM_MAX_BASE_16         EQU     1               ;BASE<=16
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D61 002D61                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
002D61 002D61 -> $2D61                MMAP_VARS_START         EQU     *
002D61 002D61 -> $2D61                MMAP_VARS_START_LIN     EQU     @
002D61 002D61                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
002D61 002D61 -> $2D61                VECTAB_VARS_START       EQU     *
002D61 002D61 -> $2D61                VECTAB_VARS_START_LIN   EQU     @
002D61 002D61                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
002D61 002D61 -> $2D61                GPIO_VARS_START         EQU     *
002D61 002D61 -> $2D61                GPIO_VARS_START_LIN     EQU     @
002D61 002D61                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
002D61 002D61 -> $2D61                SSTACK_VARS_START       EQU     *
002D61 002D61 -> $2D61                SSTACK_VARS_START_LIN   EQU     @
002D61 002D61                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
002D61 002D61 -> $2D61                ISTACK_VARS_START       EQU     *
002D61 002D61 -> $2D61                ISTACK_VARS_START_LIN   EQU     @
002DA0 002DA0                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
002DA0 002DA0 -> $2DA0                CLOCK_VARS_START        EQU     *
002DA0 002DA0 -> $2DA0                CLOCK_VARS_START_LIN    EQU     @
002DA0 002DA0                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
002DA0 002DA0 -> $2DA0                COP_VARS_START          EQU     *
002DA0 002DA0 -> $2DA0                COP_VARS_START_LIN      EQU     @
002DA0 002DA0                                                 ORG     COP_VARS_END, COP_VARS_END_LIN
002DA0 002DA0 -> $2DA0                TIM_VARS_START          EQU     *
002DA0 002DA0 -> $2DA0                TIM_VARS_START_LIN      EQU     @
002DA0 002DA0                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
002DA0 002DA0 -> $2DA0                SCI_VARS_START          EQU     *
002DA0 002DA0 -> $2DA0                SCI_VARS_START_LIN      EQU     @
002DD0 002DD0                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
002DD0 002DD0 -> $2DD0                STRING_VARS_START       EQU     *
002DD0 002DD0 -> $2DD0                STRING_VARS_START_LIN   EQU     @
002DD0 002DD0                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
002DD0 002DD0 -> $2DD0                NUM_VARS_START          EQU     *
002DD0 002DD0 -> $2DD0                NUM_VARS_START_LIN      EQU     @
002DD0 002DD0                                                 ORG     NUM_VARS_END, NUM_VARS_END_LIN
002DD0 002DD0 -> $2DD0                RESET_VARS_START        EQU     *
002DD0 002DD0 -> $2DD0                RESET_VARS_START_LIN    EQU     @
002DD4 002DD4                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
002DD4 002DD4 -> $2DD4                LED_VARS_START          EQU     *
002DD4 002DD4 -> $2DD4                LED_VARS_START_LIN      EQU     @
002DD4 002DD4                                                 ORG     LED_VARS_END, LED_VARS_END_LIN
002DD4 002DD4 -> $2DD4                VMON_VARS_START EQU     *
002DD4 002DD4 -> $2DD4                VMON_VARS_START_LIN     EQU     @
002DD4 002DD4                                                 ORG     VMON_VARS_END, VMON_VARS_END_LIN
002DD4 002DD4 -> $2DD4                NVM_VARS_START          EQU     *
002DD4 002DD4 -> $2DD4                NVM_VARS_START_LIN      EQU     @
002DD4 002DD4                                                 ORG     NVM_VARS_END, NVM_VARS_END_LIN
002DD4 002DD4 -> $2DD4                DISP_VARS_START         EQU     *
002DD4 002DD4 -> $2DD4                DISP_VARS_START_LIN     EQU     @
002DE7 002DE7                                                 ORG     DISP_VARS_END, DISP_VARS_END_LIN
002DE7 002DE7 -> $2DE7                KEYS_VARS_START         EQU     *
002DE7 002DE7 -> $2DE7                KEYS_VARS_START_LIN     EQU     @
002DFA 002DFA                                                 ORG     KEYS_VARS_END, KEYS_VARS_END_LIN
002DFA 002DFA -> $2DFA                BASE_VARS_END           EQU     *
002DFA 002DFA -> $2DFA                BASE_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001899 001899                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
001899 001899 -> $1899                MMAP_CODE_START         EQU     *
001899 001899 -> $1899                MMAP_CODE_START_LIN     EQU     @
001899 001899                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
001899 001899 -> $1899                VECTAB_CODE_START       EQU     *
001899 001899 -> $1899                VECTAB_CODE_START_LIN   EQU     @
001899 001899                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
001899 001899 -> $1899                GPIO_CODE_START         EQU     *
001899 001899 -> $1899                GPIO_CODE_START_LIN     EQU     @
001899 001899                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
001899 001899 -> $1899                SSTACK_CODE_START       EQU     *
001899 001899 -> $1899                SSTACK_CODE_START_LIN   EQU     @
0018A5 0018A5                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
0018A5 0018A5 -> $18A5                ISTACK_CODE_START       EQU     *
0018A5 0018A5 -> $18A5                ISTACK_CODE_START_LIN   EQU     @
0018A5 0018A5                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
0018A5 0018A5 -> $18A5                CLOCK_CODE_START        EQU     *
0018A5 0018A5 -> $18A5                CLOCK_CODE_START_LIN    EQU     @
0018A5 0018A5                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
0018A5 0018A5 -> $18A5                COP_CODE_START          EQU     *
0018A5 0018A5 -> $18A5                COP_CODE_START_LIN      EQU     @
0018A5 0018A5                                                 ORG     COP_CODE_END, COP_CODE_END_LIN
0018A5 0018A5 -> $18A5                TIM_CODE_START          EQU     *
0018A5 0018A5 -> $18A5                TIM_CODE_START_LIN      EQU     @
0018A5 0018A5                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
0018A5 0018A5 -> $18A5                SCI_CODE_START          EQU     *
0018A5 0018A5 -> $18A5                SCI_CODE_START_LIN      EQU     @
001CEA 001CEA                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
001CEA 001CEA -> $1CEA                STRING_CODE_START       EQU     *
001CEA 001CEA -> $1CEA                STRING_CODE_START_LIN   EQU     @
001D9C 001D9C                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
001D9C 001D9C -> $1D9C                NUM_CODE_START          EQU     *
001D9C 001D9C -> $1D9C                NUM_CODE_START_LIN      EQU     @
001EA0 001EA0                                                 ORG     NUM_CODE_END, NUM_CODE_END_LIN
001EA0 001EA0 -> $1EA0                RESET_CODE_START        EQU     *
001EA0 001EA0 -> $1EA0                RESET_CODE_START_LIN    EQU     @
001ED1 001ED1                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
001ED1 001ED1 -> $1ED1                LED_CODE_START          EQU     *
001ED1 001ED1 -> $1ED1                LED_CODE_START_LIN      EQU     @
001ED1 001ED1                                                 ORG     LED_CODE_END, LED_CODE_END_LIN
001ED1 001ED1 -> $1ED1                VMON_CODE_START EQU     *
001ED1 001ED1 -> $1ED1                VMON_CODE_START_LIN     EQU     @
001F7A 001F7A                                                 ORG     VMON_CODE_END, VMON_CODE_END_LIN
001F7A 001F7A -> $1F7A                NVM_CODE_START          EQU     *
001F7A 001F7A -> $1F7A                NVM_CODE_START_LIN      EQU     @
0020C9 0020C9                                                 ORG     NVM_CODE_END, NVM_CODE_END_LIN
0020C9 0020C9 -> $20C9                DISP_CODE_START         EQU     *
0020C9 0020C9 -> $20C9                DISP_CODE_START_LIN     EQU     @
00228C 00228C                                                 ORG     DISP_CODE_END, DISP_CODE_END_LIN
00228C 00228C -> $228C                KEYS_CODE_START         EQU     *
00228C 00228C -> $228C                KEYS_CODE_START_LIN     EQU     @
00238B 00238B                                                 ORG     KEYS_CODE_END, KEYS_CODE_END_LIN
00238B 00238B -> $238B                BASE_CODE_END           EQU     *
00238B 00238B -> $238B                BASE_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00239F 00239F                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
                                      ;#DISP screens
                                      ;-------------
                                      ;Welcome screen
00239F 00239F MACRO                   BASE_DISP_WELCOME_SCR   DISP_WELCOME_STREAM                     ;display splash screen
                                      ;Size = 1024 bytes                                                               (DISP_WELCOME_STREAM)
                                      ;#Frame 0:                                                                       (DISP_WELCOME_STREAM)
                                      ;#----------------------------------------------------------------------         (DISP_WELCOME_STREAM)
                                      ;#Page 0:                                                                        (DISP_WELCOME_STREAM)
00239F 00239F B0 10 04                                DB  $B0 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
0023A2 0023A2 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
0023A4 0023A4 E3 0C 00                                DB  DISP_ESC_START $0C $00          ;repeat 12 times             (DISP_WELCOME_STREAM)
0023A7 0023A7 80 60 18 00 40 20 78 00                 DB  $80 $60 $18 $00 $40 $20 $78 $00                              (DISP_WELCOME_STREAM)
0023AF 0023AF 30 48 30 00 40 F8 40 00                 DB  $30 $48 $30 $00 $40 $F8 $40 $00                              (DISP_WELCOME_STREAM)
0023B7 0023B7 78 48 30 00 F8 00 70 08                 DB  $78 $48 $30 $00 $F8 $00 $70 $08                              (DISP_WELCOME_STREAM)
0023BF 0023BF 70 00 48 48 30 00 F8 00                 DB  $70 $00 $48 $48 $30 $00 $F8 $00                              (DISP_WELCOME_STREAM)
0023C7 0023C7 78 48 30 00 90 08 08 F0                 DB  $78 $48 $30 $00 $90 $08 $08 $F0                              (DISP_WELCOME_STREAM)
0023CF 0023CF 00 78 00 40 20 78 00 78                 DB  $00 $78 $00 $40 $20 $78 $00 $78                              (DISP_WELCOME_STREAM)
0023D7 0023D7 A0 20 A0 78                             DB  $A0 $20 $A0 $78                                              (DISP_WELCOME_STREAM)
0023DB 0023DB E3 08 00                                DB  DISP_ESC_START $08 $00          ;repeat 8 times              (DISP_WELCOME_STREAM)
0023DE 0023DE E0 E0 18 18 60 60 80 80                 DB  $E0 $E0 $18 $18 $60 $60 $80 $80                              (DISP_WELCOME_STREAM)
0023E6 0023E6 F8 F8 98 98 80 80 E0 E0                 DB  $F8 $F8 $98 $98 $80 $80 $E0 $E0                              (DISP_WELCOME_STREAM)
0023EE 0023EE 18 18 80 80 98 98 80 80                 DB  $18 $18 $80 $80 $98 $98 $80 $80                              (DISP_WELCOME_STREAM)
0023F6 0023F6 F8 F8 60 60 78 78 60 60                 DB  $F8 $F8 $60 $60 $78 $78 $60 $60                              (DISP_WELCOME_STREAM)
0023FE 0023FE F8 F8 E0 E0 18 18 98 98                 DB  $F8 $F8 $E0 $E0 $18 $18 $98 $98                              (DISP_WELCOME_STREAM)
002406 002406 00 00 F8 F8 18 18                       DB  $00 $00 $F8 $F8 $18 $18                                      (DISP_WELCOME_STREAM)
00240C 00240C E3 06 98                                DB  DISP_ESC_START $06 $98          ;repeat 6 times              (DISP_WELCOME_STREAM)
00240F 00240F 18 18 F8 F8                             DB  $18 $18 $F8 $F8                                              (DISP_WELCOME_STREAM)
002413 002413 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 1:                                                                        (DISP_WELCOME_STREAM)
002415 002415 B1 10 04                                DB  $B1 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
002418 002418 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00241A 00241A 00 00 C0 30 00 60 90 60                 DB  $00 $00 $C0 $30 $00 $60 $90 $60                              (DISP_WELCOME_STREAM)
002422 002422 00 F0 00 10 01 60 90 F0                 DB  $00 $F0 $00 $10 $01 $60 $90 $F0                              (DISP_WELCOME_STREAM)
00242A 00242A 00 E0 10 E0 00 70 80 F0                 DB  $00 $E0 $10 $E0 $00 $70 $80 $F0                              (DISP_WELCOME_STREAM)
002432 002432 00 80 F0 80 00 F0 00 78                 DB  $00 $80 $F0 $80 $00 $F0 $00 $78                              (DISP_WELCOME_STREAM)
00243A 00243A 95 64 00 10 00 80 80 F0                 DB  $95 $64 $00 $10 $00 $80 $80 $F0                              (DISP_WELCOME_STREAM)
002442 002442 00 F0 01 60 90 60 00 E0                 DB  $00 $F0 $01 $60 $90 $60 $00 $E0                              (DISP_WELCOME_STREAM)
00244A 00244A 10 61 11 E0 00 81 F0 80                 DB  $10 $61 $11 $E0 $00 $81 $F0 $80                              (DISP_WELCOME_STREAM)
002452 002452 00 60 90 60 00 71 80 F0                 DB  $00 $60 $90 $60 $00 $71 $80 $F0                              (DISP_WELCOME_STREAM)
00245A 00245A E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
00245D 00245D 66 66 67 67 9E 9E E0 E0                 DB  $66 $66 $67 $67 $9E $9E $E0 $E0                              (DISP_WELCOME_STREAM)
002465 002465 F9 F9 1F 1F 99 99 19 19                 DB  $F9 $F9 $1F $1F $99 $99 $19 $19                              (DISP_WELCOME_STREAM)
00246D 00246D F9 F9 E6 E6 87 87 01 01                 DB  $F9 $F9 $E6 $E6 $87 $87 $01 $01                              (DISP_WELCOME_STREAM)
002475 002475 67 67 E1 E1 66 66 00 00                 DB  $67 $67 $E1 $E1 $66 $66 $00 $00                              (DISP_WELCOME_STREAM)
00247D 00247D 66 66 01 01 9F 9F 78 78                 DB  $66 $66 $01 $01 $9F $9F $78 $78                              (DISP_WELCOME_STREAM)
002485 002485 7F 7F 00 00 FF FF 80 80                 DB  $7F $7F $00 $00 $FF $FF $80 $80                              (DISP_WELCOME_STREAM)
00248D 00248D E3 06 9F                                DB  DISP_ESC_START $06 $9F          ;repeat 6 times              (DISP_WELCOME_STREAM)
002490 002490 80 80 FF FF                             DB  $80 $80 $FF $FF                                              (DISP_WELCOME_STREAM)
002494 002494 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 2:                                                                        (DISP_WELCOME_STREAM)
002496 002496 B2 10 04                                DB  $B2 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
002499 002499 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00249B 00249B 00 03                                   DB  $00 $03                                                      (DISP_WELCOME_STREAM)
00249D 00249D E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
0024A0 0024A0 02                                      DB  $02                                                          (DISP_WELCOME_STREAM)
0024A1 0024A1 E3 05 00                                DB  DISP_ESC_START $05 $00          ;repeat 5 times              (DISP_WELCOME_STREAM)
0024A4 0024A4 03                                      DB  $03                                                          (DISP_WELCOME_STREAM)
0024A5 0024A5 E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
0024A8 0024A8 03 00 00 01 00 00 02                    DB  $03 $00 $00 $01 $00 $00 $02                                  (DISP_WELCOME_STREAM)
0024AF 0024AF E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
0024B2 0024B2 02 02 01 80 63 00 00 80                 DB  $02 $02 $01 $80 $63 $00 $00 $80                              (DISP_WELCOME_STREAM)
0024BA 0024BA 60 00 20 00 C0 20 F8 00                 DB  $60 $00 $20 $00 $C0 $20 $F8 $00                              (DISP_WELCOME_STREAM)
0024C2 0024C2 00 E1 00 00 00 E0 00 00                 DB  $00 $E1 $00 $00 $00 $E0 $00 $00                              (DISP_WELCOME_STREAM)
0024CA 0024CA E0 00                                   DB  $E0 $00                                                      (DISP_WELCOME_STREAM)
0024CC 0024CC E3 FF                                   DB  DISP_ESC_START DISP_ESC_ESC     ;escape $E3                  (DISP_WELCOME_STREAM)
0024CE 0024CE E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
0024D1 0024D1 1E 1E 7E 7E 9F 9F 87 87                 DB  $1E $1E $7E $7E $9F $9F $87 $87                              (DISP_WELCOME_STREAM)
0024D9 0024D9 FF FF 78 78 F9 F9 78 78                 DB  $FF $FF $78 $78 $F9 $F9 $78 $78                              (DISP_WELCOME_STREAM)
0024E1 0024E1 7F 7F 07 07 E7 E7 9E 9E                 DB  $7F $7F $07 $07 $E7 $E7 $9E $9E                              (DISP_WELCOME_STREAM)
0024E9 0024E9 86 86 99 99 98 98 E0 E0                 DB  $86 $86 $99 $99 $98 $98 $E0 $E0                              (DISP_WELCOME_STREAM)
0024F1 0024F1 E6 E6 1E 1E 07 07 78 78                 DB  $E6 $E6 $1E $1E $07 $07 $78 $78                              (DISP_WELCOME_STREAM)
0024F9 0024F9 66 66 78 78 99 99 79 79                 DB  $66 $66 $78 $78 $99 $99 $79 $79                              (DISP_WELCOME_STREAM)
002501 002501 F9 F9 01 01 61 61 01 01                 DB  $F9 $F9 $01 $01 $61 $61 $01 $01                              (DISP_WELCOME_STREAM)
002509 002509 F9 F9                                   DB  $F9 $F9                                                      (DISP_WELCOME_STREAM)
00250B 00250B E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 3:                                                                        (DISP_WELCOME_STREAM)
00250D 00250D B3 10 04                                DB  $B3 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
002510 002510 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
002512 002512 E3 27 00                                DB  DISP_ESC_START $27 $00          ;repeat 39 times             (DISP_WELCOME_STREAM)
002515 002515 06 01 00 00 06 01 00 00                 DB  $06 $01 $00 $00 $06 $01 $00 $00                              (DISP_WELCOME_STREAM)
00251D 00251D 01 00 00 01 00 00 01 03                 DB  $01 $00 $00 $01 $00 $00 $01 $03                              (DISP_WELCOME_STREAM)
002525 002525 01 00 01 03 01 00 00 01                 DB  $01 $00 $01 $03 $01 $00 $00 $01                              (DISP_WELCOME_STREAM)
00252D 00252D 07                                      DB  $07                                                          (DISP_WELCOME_STREAM)
00252E 00252E E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
002531 002531 06 06 60 60 9F 9F 07 07                 DB  $06 $06 $60 $60 $9F $9F $07 $07                              (DISP_WELCOME_STREAM)
002539 002539 67 67 FE FE 67 67 7E 7E                 DB  $67 $67 $FE $FE $67 $67 $7E $7E                              (DISP_WELCOME_STREAM)
002541 002541 06 06 1E 1E 81 81 19 19                 DB  $06 $06 $1E $1E $81 $81 $19 $19                              (DISP_WELCOME_STREAM)
002549 002549 FF FF F9 F9 67 67 07 07                 DB  $FF $FF $F9 $F9 $67 $67 $07 $07                              (DISP_WELCOME_STREAM)
002551 002551 9F 9F 98 98 7E 7E 86 86                 DB  $9F $9F $98 $98 $7E $7E $86 $86                              (DISP_WELCOME_STREAM)
002559 002559 1E 1E 86 86 99 99 98 98                 DB  $1E $1E $86 $86 $99 $99 $98 $98                              (DISP_WELCOME_STREAM)
002561 002561 07 07 E0 E0 86 86 60 60                 DB  $07 $07 $E0 $E0 $86 $86 $60 $60                              (DISP_WELCOME_STREAM)
002569 002569 1F 1F                                   DB  $1F $1F                                                      (DISP_WELCOME_STREAM)
00256B 00256B E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 4:                                                                        (DISP_WELCOME_STREAM)
00256D 00256D B4 10 04                                DB  $B4 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
002570 002570 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
002572 002572 E3 46 00                                DB  DISP_ESC_START $46 $00          ;repeat 70 times             (DISP_WELCOME_STREAM)
002575 002575 06 06 60 60 1F 1F 18 18                 DB  $06 $06 $60 $60 $1F $1F $18 $18                              (DISP_WELCOME_STREAM)
00257D 00257D 06 06 E7 E7 86 86 66 66                 DB  $06 $06 $E7 $E7 $86 $86 $66 $66                              (DISP_WELCOME_STREAM)
002585 002585 FE FE 06 06 07 07 80 80                 DB  $FE $FE $06 $06 $07 $07 $80 $80                              (DISP_WELCOME_STREAM)
00258D 00258D 67 67 E1 E1 98 98 E0 E0                 DB  $67 $67 $E1 $E1 $98 $98 $E0 $E0                              (DISP_WELCOME_STREAM)
002595 002595 81 81 E1 E1 98 98 81 81                 DB  $81 $81 $E1 $E1 $98 $98 $81 $81                              (DISP_WELCOME_STREAM)
00259D 00259D 06 06 7F 7F 99 99 E7 E7                 DB  $06 $06 $7F $7F $99 $99 $E7 $E7                              (DISP_WELCOME_STREAM)
0025A5 0025A5 E0 E0 99 99 79 79 78 78                 DB  $E0 $E0 $99 $99 $79 $79 $78 $78                              (DISP_WELCOME_STREAM)
0025AD 0025AD 9E 9E                                   DB  $9E $9E                                                      (DISP_WELCOME_STREAM)
0025AF 0025AF E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 5:                                                                        (DISP_WELCOME_STREAM)
0025B1 0025B1 B5 10 04                                DB  $B5 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
0025B4 0025B4 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
0025B6 0025B6 10 18 0F 1F 00 0E 1F 11                 DB  $10 $18 $0F $1F $00 $0E $1F $11                              (DISP_WELCOME_STREAM)
0025BE 0025BE 1F 0E 00 10 7F 7F 10 00                 DB  $1F $0E $00 $10 $7F $7F $10 $00                              (DISP_WELCOME_STREAM)
0025C6 0025C6 1F 1F 11 1F 0E 00 FF FF                 DB  $1F $1F $11 $1F $0E $00 $FF $FF                              (DISP_WELCOME_STREAM)
0025CE 0025CE 00 1E 1F 01 1F 1E 00 11                 DB  $00 $1E $1F $01 $1F $1E $00 $11                              (DISP_WELCOME_STREAM)
0025D6 0025D6 11 1F 0E 00 FF FF 00 1F                 DB  $11 $1F $0E $00 $FF $FF $00 $1F                              (DISP_WELCOME_STREAM)
0025DE 0025DE 1F 11 1F 0E 00 C6 C7 01                 DB  $1F $11 $1F $0E $00 $C6 $C7 $01                              (DISP_WELCOME_STREAM)
0025E6 0025E6 FF FE 00 5F 5F 00 10 18                 DB  $FF $FE $00 $5F $5F $00 $10 $18                              (DISP_WELCOME_STREAM)
0025EE 0025EE 0F 1F 00 3F FF C8 C8 FF                 DB  $0F $1F $00 $3F $FF $C8 $C8 $FF                              (DISP_WELCOME_STREAM)
0025F6 0025F6 3F                                      DB  $3F                                                          (DISP_WELCOME_STREAM)
0025F7 0025F7 E3 05 00                                DB  DISP_ESC_START $05 $00          ;repeat 5 times              (DISP_WELCOME_STREAM)
0025FA 0025FA 86 86 80 80                             DB  $86 $86 $80 $80                                              (DISP_WELCOME_STREAM)
0025FE 0025FE E3 04 98                                DB  DISP_ESC_START $04 $98          ;repeat 4 times              (DISP_WELCOME_STREAM)
002601 002601 9E 9E                                   DB  $9E $9E                                                      (DISP_WELCOME_STREAM)
002603 002603 E3 04 9F                                DB  DISP_ESC_START $04 $9F          ;repeat 4 times              (DISP_WELCOME_STREAM)
002606 002606 06 06 87 87 66 66 9E 9E                 DB  $06 $06 $87 $87 $66 $66 $9E $9E                              (DISP_WELCOME_STREAM)
00260E 00260E 1F 1F 86 86 79 79 81 81                 DB  $1F $1F $86 $86 $79 $79 $81 $81                              (DISP_WELCOME_STREAM)
002616 002616 07 07 87 87 7F 7F 81 81                 DB  $07 $07 $87 $87 $7F $7F $81 $81                              (DISP_WELCOME_STREAM)
00261E 00261E 1F 1F E6 E6 00 00 99 99                 DB  $1F $1F $E6 $E6 $00 $00 $99 $99                              (DISP_WELCOME_STREAM)
002626 002626 9F 9F 99 99 9F 9F 9E 9E                 DB  $9F $9F $99 $99 $9F $9F $9E $9E                              (DISP_WELCOME_STREAM)
00262E 00262E 80 80 9F 9F                             DB  $80 $80 $9F $9F                                              (DISP_WELCOME_STREAM)
002632 002632 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 6:                                                                        (DISP_WELCOME_STREAM)
002634 002634 B6 10 04                                DB  $B6 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
002637 002637 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
002639 002639 E3 2E 00                                DB  DISP_ESC_START $2E $00          ;repeat 46 times             (DISP_WELCOME_STREAM)
00263C 00263C 01 01 01                                DB  $01 $01 $01                                                  (DISP_WELCOME_STREAM)
00263F 00263F E3 0C 00                                DB  DISP_ESC_START $0C $00          ;repeat 12 times             (DISP_WELCOME_STREAM)
002642 002642 01 01                                   DB  $01 $01                                                      (DISP_WELCOME_STREAM)
002644 002644 E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
002647 002647 FF FF 01 01                             DB  $FF $FF $01 $01                                              (DISP_WELCOME_STREAM)
00264B 00264B E3 06 F9                                DB  DISP_ESC_START $06 $F9          ;repeat 6 times              (DISP_WELCOME_STREAM)
00264E 00264E 01 01 FF FF 00 00 81 81                 DB  $01 $01 $FF $FF $00 $00 $81 $81                              (DISP_WELCOME_STREAM)
002656 002656 F8 F8 19 19 7E 7E FF FF                 DB  $F8 $F8 $19 $19 $7E $7E $FF $FF                              (DISP_WELCOME_STREAM)
00265E 00265E E6 E6 F9 F9 66 66 01 01                 DB  $E6 $E6 $F9 $F9 $66 $66 $01 $01                              (DISP_WELCOME_STREAM)
002666 002666 66 66 01 01 18 18 FF FF                 DB  $66 $66 $01 $01 $18 $18 $FF $FF                              (DISP_WELCOME_STREAM)
00266E 00266E 00 00 FF FF 01 01                       DB  $00 $00 $FF $FF $01 $01                                      (DISP_WELCOME_STREAM)
002674 002674 E3 06 F9                                DB  DISP_ESC_START $06 $F9          ;repeat 6 times              (DISP_WELCOME_STREAM)
002677 002677 01 01 FF FF                             DB  $01 $01 $FF $FF                                              (DISP_WELCOME_STREAM)
00267B 00267B E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 7:                                                                        (DISP_WELCOME_STREAM)
00267D 00267D B7 10 04                                DB  $B7 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
002680 002680 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
002682 002682 E3 46 00                                DB  DISP_ESC_START $46 $00          ;repeat 70 times             (DISP_WELCOME_STREAM)
002685 002685 1F 1F 18 18                             DB  $1F $1F $18 $18                                              (DISP_WELCOME_STREAM)
002689 002689 E3 06 19                                DB  DISP_ESC_START $06 $19          ;repeat 6 times              (DISP_WELCOME_STREAM)
00268C 00268C 18 18 1F 1F 00 00                       DB  $18 $18 $1F $1F $00 $00                                      (DISP_WELCOME_STREAM)
002692 002692 E3 04 19                                DB  DISP_ESC_START $04 $19          ;repeat 4 times              (DISP_WELCOME_STREAM)
002695 002695 1E 1E 18 18 19 19                       DB  $1E $1E $18 $18 $19 $19                                      (DISP_WELCOME_STREAM)
00269B 00269B E3 04 07                                DB  DISP_ESC_START $04 $07          ;repeat 4 times              (DISP_WELCOME_STREAM)
00269E 00269E 1E 1E 06 06                             DB  $1E $1E $06 $06                                              (DISP_WELCOME_STREAM)
0026A2 0026A2 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
0026A5 0026A5 01 01 00 00 1F 1F 18 18                 DB  $01 $01 $00 $00 $1F $1F $18 $18                              (DISP_WELCOME_STREAM)
0026AD 0026AD E3 06 19                                DB  DISP_ESC_START $06 $19          ;repeat 6 times              (DISP_WELCOME_STREAM)
0026B0 0026B0 18 18 1F 1F                             DB  $18 $18 $1F $1F                                              (DISP_WELCOME_STREAM)
0026B4 0026B4 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
0026B6 0026B6 -> $0317                BASE_DISP_WELCOME_SIZE  EQU     *-BASE_DISP_WELCOME_SCR
                                      ;Error Screen
0026B6 0026B6 MACRO                   BASE_DISP_ERROR_SCR     DISP_ERROR_STREAM                       ;display splash screen
                                      ;Size = 1024 bytes                                                               (DISP_ERROR_STREAM)
                                      ;#Frame 0:                                                                       (DISP_ERROR_STREAM)
                                      ;#----------------------------------------------------------------------         (DISP_ERROR_STREAM)
                                      ;#Page 0:                                                                        (DISP_ERROR_STREAM)
0026B6 0026B6 B0 10 04                                DB  $B0 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
0026B9 0026B9 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
0026BB 0026BB E3 70 FF                                DB  DISP_ESC_START $70 $FF          ;repeat 113 times            (DISP_ERROR_STREAM)
0026BE 0026BE 7F 1F 1F 0F 0F                          DB  $7F $1F $1F $0F $0F                                          (DISP_ERROR_STREAM)
0026C3 0026C3 E3 05 07                                DB  DISP_ESC_START $05 $07          ;repeat 6 times              (DISP_ERROR_STREAM)
0026C6 0026C6 0F 1F 3F FF                             DB  $0F $1F $3F $FF                                              (DISP_ERROR_STREAM)
0026CA 0026CA E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 1:                                                                        (DISP_ERROR_STREAM)
0026CC 0026CC B1 10 04                                DB  $B1 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
0026CF 0026CF E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
0026D1 0026D1 E3 70 FF                                DB  DISP_ESC_START $70 $FF          ;repeat 113 times            (DISP_ERROR_STREAM)
0026D4 0026D4 F0 E0 C0 C0                             DB  $F0 $E0 $C0 $C0                                              (DISP_ERROR_STREAM)
0026D8 0026D8 E3 04 80                                DB  DISP_ESC_START $04 $80          ;repeat 5 times              (DISP_ERROR_STREAM)
0026DB 0026DB C0 C0 E0 F0 F8 FF                       DB  $C0 $C0 $E0 $F0 $F8 $FF                                      (DISP_ERROR_STREAM)
0026E1 0026E1 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 2:                                                                        (DISP_ERROR_STREAM)
0026E3 0026E3 B2 10 04                                DB  $B2 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
0026E6 0026E6 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
0026E8 0026E8 E3 74 FF                                DB  DISP_ESC_START $74 $FF          ;repeat 117 times            (DISP_ERROR_STREAM)
0026EB 0026EB 3F 0F 0F 07 07 07 7F FF                 DB  $3F $0F $0F $07 $07 $07 $7F $FF                              (DISP_ERROR_STREAM)
0026F3 0026F3 FF FF FF                                DB  $FF $FF $FF                                                  (DISP_ERROR_STREAM)
0026F6 0026F6 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 3:                                                                        (DISP_ERROR_STREAM)
0026F8 0026F8 B3 10 04                                DB  $B3 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
0026FB 0026FB E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
0026FD 0026FD E3 74 FF                                DB  DISP_ESC_START $74 $FF          ;repeat 117 times            (DISP_ERROR_STREAM)
002700 002700 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 7 times              (DISP_ERROR_STREAM)
002703 002703 FF FF FF FF                             DB  $FF $FF $FF $FF                                              (DISP_ERROR_STREAM)
002707 002707 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 4:                                                                        (DISP_ERROR_STREAM)
002709 002709 B4 10 04                                DB  $B4 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00270C 00270C E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00270E 00270E E3 73 FF                                DB  DISP_ESC_START $73 $FF          ;repeat 116 times            (DISP_ERROR_STREAM)
002711 002711 01                                      DB  $01                                                          (DISP_ERROR_STREAM)
002712 002712 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 7 times              (DISP_ERROR_STREAM)
002715 002715 03 FF FF FF                             DB  $03 $FF $FF $FF                                              (DISP_ERROR_STREAM)
002719 002719 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 5:                                                                        (DISP_ERROR_STREAM)
00271B 00271B B5 10 04                                DB  $B5 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00271E 00271E E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
002720 002720 E3 11 FF                                DB  DISP_ESC_START $11 $FF          ;repeat 18 times             (DISP_ERROR_STREAM)
002723 002723 3F 3F 3F FF FF FF 7F                    DB  $3F $3F $3F $FF $FF $FF $7F                                  (DISP_ERROR_STREAM)
00272A 00272A E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00272D 00272D 7F                                      DB  $7F                                                          (DISP_ERROR_STREAM)
00272E 00272E E3 05 FF                                DB  DISP_ESC_START $05 $FF          ;repeat 6 times              (DISP_ERROR_STREAM)
002731 002731 3F 3F 3F                                DB  $3F $3F $3F                                                  (DISP_ERROR_STREAM)
002734 002734 E3 03 FF                                DB  DISP_ESC_START $03 $FF          ;repeat 4 times              (DISP_ERROR_STREAM)
002737 002737 3F 3F 3F FF                             DB  $3F $3F $3F $FF                                              (DISP_ERROR_STREAM)
00273B 00273B E3 08 3F                                DB  DISP_ESC_START $08 $3F          ;repeat 9 times              (DISP_ERROR_STREAM)
00273E 00273E E3 07 FF                                DB  DISP_ESC_START $07 $FF          ;repeat 8 times              (DISP_ERROR_STREAM)
002741 002741 3F 3F 3F FF FF 3F 3F 3F                 DB  $3F $3F $3F $FF $FF $3F $3F $3F                              (DISP_ERROR_STREAM)
002749 002749 7F                                      DB  $7F                                                          (DISP_ERROR_STREAM)
00274A 00274A E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00274D 00274D 7F FF                                   DB  $7F $FF                                                      (DISP_ERROR_STREAM)
00274F 00274F E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
002752 002752 7F FF FF FF 3F 3F 3F 7F                 DB  $7F $FF $FF $FF $3F $3F $3F $7F                              (DISP_ERROR_STREAM)
00275A 00275A E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00275D 00275D 7F                                      DB  $7F                                                          (DISP_ERROR_STREAM)
00275E 00275E E3 06 FF                                DB  DISP_ESC_START $06 $FF          ;repeat 7 times              (DISP_ERROR_STREAM)
002761 002761 3F 3F 3F                                DB  $3F $3F $3F                                                  (DISP_ERROR_STREAM)
002764 002764 E3 08 FF                                DB  DISP_ESC_START $08 $FF          ;repeat 9 times              (DISP_ERROR_STREAM)
002767 002767 1F                                      DB  $1F                                                          (DISP_ERROR_STREAM)
002768 002768 E3 08 00                                DB  DISP_ESC_START $08 $00          ;repeat 9 times              (DISP_ERROR_STREAM)
00276B 00276B 1F FF FF                                DB  $1F $FF $FF                                                  (DISP_ERROR_STREAM)
00276E 00276E E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 6:                                                                        (DISP_ERROR_STREAM)
002770 002770 B6 10 04                                DB  $B6 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
002773 002773 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
002775 002775 E3 0D FF                                DB  DISP_ESC_START $0D $FF          ;repeat 14 times             (DISP_ERROR_STREAM)
002778 002778 1F 1F 8F 01 00 00 FC FF                 DB  $1F $1F $8F $01 $00 $00 $FC $FF                              (DISP_ERROR_STREAM)
002780 002780 C1 80 00 3E 3F 1F 80 80                 DB  $C1 $80 $00 $3E $3F $1F $80 $80                              (DISP_ERROR_STREAM)
002788 002788 E0 FF 1F 1F 8F 01 00 00                 DB  $E0 $FF $1F $1F $8F $01 $00 $00                              (DISP_ERROR_STREAM)
002790 002790 FC 1F 1F 8F 01 00 00 FC                 DB  $FC $1F $1F $8F $01 $00 $00 $FC                              (DISP_ERROR_STREAM)
002798 002798 FF                                      DB  $FF                                                          (DISP_ERROR_STREAM)
002799 002799 E3 03 C6                                DB  DISP_ESC_START $03 $C6          ;repeat 4 times              (DISP_ERROR_STREAM)
00279C 00279C 46 00 00 80 FE                          DB  $46 $00 $00 $80 $FE                                          (DISP_ERROR_STREAM)
0027A1 0027A1 E3 05 FF                                DB  DISP_ESC_START $05 $FF          ;repeat 6 times              (DISP_ERROR_STREAM)
0027A4 0027A4 7F 01 00 80 FE FF 83 80                 DB  $7F $01 $00 $80 $FE $FF $83 $80                              (DISP_ERROR_STREAM)
0027AC 0027AC 00 30 33 33 11 98 D8 3C                 DB  $00 $30 $33 $33 $11 $98 $D8 $3C                              (DISP_ERROR_STREAM)
0027B4 0027B4 3F 3F 07 00 00 30 3F FF                 DB  $3F $3F $07 $00 $00 $30 $3F $FF                              (DISP_ERROR_STREAM)
0027BC 0027BC 83 80 00 30 33 33 11 98                 DB  $83 $80 $00 $30 $33 $33 $11 $98                              (DISP_ERROR_STREAM)
0027C4 0027C4 D8 FC FF                                DB  $D8 $FC $FF                                                  (DISP_ERROR_STREAM)
0027C7 0027C7 E3 03 C7                                DB  DISP_ESC_START $03 $C7          ;repeat 4 times              (DISP_ERROR_STREAM)
0027CA 0027CA 47 01 00 80 FE                          DB  $47 $01 $00 $80 $FE                                          (DISP_ERROR_STREAM)
0027CF 0027CF E3 08 FF                                DB  DISP_ESC_START $08 $FF          ;repeat 9 times              (DISP_ERROR_STREAM)
0027D2 0027D2 E3 0A 00                                DB  DISP_ESC_START $0A $00          ;repeat 11 times             (DISP_ERROR_STREAM)
0027D5 0027D5 FF FF                                   DB  $FF $FF                                                      (DISP_ERROR_STREAM)
0027D7 0027D7 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 7:                                                                        (DISP_ERROR_STREAM)
0027D9 0027D9 B7 10 04                                DB  $B7 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
0027DC 0027DC E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
0027DE 0027DE E3 2C FF                                DB  DISP_ESC_START $2C $FF          ;repeat 45 times             (DISP_ERROR_STREAM)
0027E1 0027E1 E3 08 F8                                DB  DISP_ESC_START $08 $F8          ;repeat 9 times              (DISP_ERROR_STREAM)
0027E4 0027E4 E3 07 FF                                DB  DISP_ESC_START $07 $FF          ;repeat 8 times              (DISP_ERROR_STREAM)
0027E7 0027E7 F8 F8 F8                                DB  $F8 $F8 $F8                                                  (DISP_ERROR_STREAM)
0027EA 0027EA E3 0D FF                                DB  DISP_ESC_START $0D $FF          ;repeat 14 times             (DISP_ERROR_STREAM)
0027ED 0027ED F8 F8 F8 FE                             DB  $F8 $F8 $F8 $FE                                              (DISP_ERROR_STREAM)
0027F1 0027F1 E3 0B FF                                DB  DISP_ESC_START $0B $FF          ;repeat 12 times             (DISP_ERROR_STREAM)
0027F4 0027F4 E3 08 F8                                DB  DISP_ESC_START $08 $F8          ;repeat 9 times              (DISP_ERROR_STREAM)
0027F7 0027F7 E3 09 FF                                DB  DISP_ESC_START $09 $FF          ;repeat 10 times             (DISP_ERROR_STREAM)
0027FA 0027FA E0 C0 C0 C0 E0 E0 F0 F0                 DB  $E0 $C0 $C0 $C0 $E0 $E0 $F0 $F0                              (DISP_ERROR_STREAM)
002802 002802 F8 F8 FC FC FE FF                       DB  $F8 $F8 $FC $FC $FE $FF                                      (DISP_ERROR_STREAM)
002808 002808 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
00280A 00280A -> $0154                BASE_DISP_ERROR_SIZE    EQU     *-BASE_DISP_ERROR_SCR
                                      ;#SCI messages
                                      ;-------------
                                      ;Welcome message
00280A 00280A 48 65 6C 6C 6F 2C 20 49 BASE_SCI_WELCOME_MSG    FCC     "Hello, I'm  AriCalculator!"
              27 6D 20 20 41 72 69 43 
              61 6C 63 75 6C 61 74 6F 
              72 21                   
002824 002824 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
002824 002824 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002825 002825 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
                                      ;Error message format
002826 002826 46 41 54 41 4C 20 45 52 BASE_SCI_ERROR_HEADER   FCS     "FATAL ERROR! "
              52 4F 52 21 A0          
002833 002833 21                      BASE_SCI_ERROR_TRAILER  FCC     "!"
002834 002834 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
002834 002834 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002835 002835 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
002836 002836 -> $2836                MMAP_TABS_START         EQU     *
002836 002836 -> $2836                MMAP_TABS_START_LIN     EQU     @
002836 002836                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
002836 002836 -> $2836                VECTAB_TABS_START       EQU     *
002836 002836 -> $2836                VECTAB_TABS_START_LIN   EQU     @
00286A 00286A                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
00286A 00286A -> $286A                GPIO_TABS_START         EQU     *
00286A 00286A -> $286A                GPIO_TABS_START_LIN     EQU     @
00286A 00286A                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
00286A 00286A -> $286A                SSTACK_TABS_START       EQU     *
00286A 00286A -> $286A                SSTACK_TABS_START_LIN   EQU     @
0028A1 0028A1                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
0028A1 0028A1 -> $28A1                ISTACK_TABS_START       EQU     *
0028A1 0028A1 -> $28A1                ISTACK_TABS_START_LIN   EQU     @
0028A1 0028A1                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
0028A1 0028A1 -> $28A1                CLOCK_TABS_START        EQU     *
0028A1 0028A1 -> $28A1                CLOCK_TABS_START_LIN    EQU     @
0028A1 0028A1                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
0028A1 0028A1 -> $28A1                COP_TABS_START          EQU     *
0028A1 0028A1 -> $28A1                COP_TABS_START_LIN      EQU     @
0028A1 0028A1                                                 ORG     COP_TABS_END, COP_TABS_END_LIN
0028A1 0028A1 -> $28A1                TIM_TABS_START          EQU     *
0028A1 0028A1 -> $28A1                TIM_TABS_START_LIN      EQU     @
0028A1 0028A1                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
0028A1 0028A1 -> $28A1                SCI_TABS_START          EQU     *
0028A1 0028A1 -> $28A1                SCI_TABS_START_LIN      EQU     @
002CE2 002CE2                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
002CE2 002CE2 -> $2CE2                STRING_TABS_START       EQU     *
002CE2 002CE2 -> $2CE2                STRING_TABS_START_LIN   EQU     @
002CE5 002CE5                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
002CE5 002CE5 -> $2CE5                NUM_TABS_START          EQU     *
002CE5 002CE5 -> $2CE5                NUM_TABS_START_LIN      EQU     @
002CF6 002CF6                                                 ORG     NUM_TABS_END, NUM_TABS_END_LIN
002CF6 002CF6 -> $2CF6                RESET_TABS_START        EQU     *
002CF6 002CF6 -> $2CF6                RESET_TABS_START_LIN    EQU     @
002D43 002D43                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
002D43 002D43 -> $2D43                LED_TABS_START          EQU     *
002D43 002D43 -> $2D43                LED_TABS_START_LIN      EQU     @
002D43 002D43                                                 ORG     LED_TABS_END, LED_TABS_END_LIN
002D43 002D43 -> $2D43                VMON_TABS_START         EQU     *
002D43 002D43 -> $2D43                VMON_TABS_START_LIN     EQU     @
002D43 002D43                                                 ORG     VMON_TABS_END, VMON_TABS_END_LIN
002D43 002D43 -> $2D43                NVM_TABS_START          EQU     *
002D43 002D43 -> $2D43                NVM_TABS_START_LIN      EQU     @
002D4C 002D4C                                                 ORG     NVM_TABS_END, NVM_TABS_END_LIN
002D4C 002D4C -> $2D4C                DISP_TABS_START         EQU     *
002D4C 002D4C -> $2D4C                DISP_TABS_START_LIN     EQU     @
002D5D 002D5D                                                 ORG     DISP_TABS_END, DISP_TABS_END_LIN
002D5D 002D5D -> $2D5D                KEYS_TABS_START         EQU     *
002D5D 002D5D -> $2D5D                KEYS_TABS_START_LIN     EQU     @
002D5D 002D5D                                                 ORG     KEYS_TABS_END, KEYS_TABS_END_LIN
002D5D 002D5D -> $2D5D                BASE_TABS_END           EQU     *
002D5D 002D5D -> $2D5D                BASE_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (AriCalculator)                    #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12G-family.                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;#############################
                                      ;# S12G Register Definitions #
                                      ;#############################
002D5D 002D5D -> $0000                PORTA           EQU     $0000
002D5D 002D5D -> $0080                PTA7            EQU     $80
002D5D 002D5D -> $0040                PTA6            EQU     $40
002D5D 002D5D -> $0020                PTA5            EQU     $20
002D5D 002D5D -> $0010                PTA4            EQU     $10
002D5D 002D5D -> $0008                PTA3            EQU     $08
002D5D 002D5D -> $0004                PTA2            EQU     $04
002D5D 002D5D -> $0002                PTA1            EQU     $02
002D5D 002D5D -> $0001                PTA0            EQU     $01
002D5D 002D5D -> $0080                PA7             EQU     $80
002D5D 002D5D -> $0040                PA6             EQU     $40
002D5D 002D5D -> $0020                PA5             EQU     $20
002D5D 002D5D -> $0010                PA4             EQU     $10
002D5D 002D5D -> $0008                PA3             EQU     $08
002D5D 002D5D -> $0004                PA2             EQU     $04
002D5D 002D5D -> $0002                PA1             EQU     $02
002D5D 002D5D -> $0001                PA0             EQU     $01
002D5D 002D5D -> $0001                PORTB           EQU     $0001
002D5D 002D5D -> $0080                PTB7            EQU     $80
002D5D 002D5D -> $0040                PTB6            EQU     $40
002D5D 002D5D -> $0020                PTB5            EQU     $20
002D5D 002D5D -> $0010                PTB4            EQU     $10
002D5D 002D5D -> $0008                PTB3            EQU     $08
002D5D 002D5D -> $0004                PTB2            EQU     $04
002D5D 002D5D -> $0002                PTB1            EQU     $02
002D5D 002D5D -> $0001                PTB0            EQU     $01
002D5D 002D5D -> $0080                PB7             EQU     $80
002D5D 002D5D -> $0040                PB6             EQU     $40
002D5D 002D5D -> $0020                PB5             EQU     $20
002D5D 002D5D -> $0010                PB4             EQU     $10
002D5D 002D5D -> $0008                PB3             EQU     $08
002D5D 002D5D -> $0004                PB2             EQU     $04
002D5D 002D5D -> $0002                PB1             EQU     $02
002D5D 002D5D -> $0001                PB0             EQU     $01
002D5D 002D5D -> $0002                DDRA            EQU     $0002
002D5D 002D5D -> $0080                DDRA7           EQU     $80
002D5D 002D5D -> $0040                DDRA6           EQU     $40
002D5D 002D5D -> $0020                DDRA5           EQU     $20
002D5D 002D5D -> $0010                DDRA4           EQU     $10
002D5D 002D5D -> $0008                DDRA3           EQU     $08
002D5D 002D5D -> $0004                DDRA2           EQU     $04
002D5D 002D5D -> $0002                DDRA1           EQU     $02
002D5D 002D5D -> $0001                DDRA0           EQU     $01
002D5D 002D5D -> $0003                DDRB            EQU     $0003
002D5D 002D5D -> $0080                DDRB7           EQU     $80
002D5D 002D5D -> $0040                DDRB6           EQU     $40
002D5D 002D5D -> $0020                DDRB5           EQU     $20
002D5D 002D5D -> $0010                DDRB4           EQU     $10
002D5D 002D5D -> $0008                DDRB3           EQU     $08
002D5D 002D5D -> $0004                DDRB2           EQU     $04
002D5D 002D5D -> $0002                DDRB1           EQU     $02
002D5D 002D5D -> $0001                DDRB0           EQU     $01
002D5D 002D5D -> $0004                PORTC           EQU     $0004
002D5D 002D5D -> $0080                PTC7            EQU     $80
002D5D 002D5D -> $0040                PTC6            EQU     $40
002D5D 002D5D -> $0020                PTC5            EQU     $20
002D5D 002D5D -> $0010                PTC4            EQU     $10
002D5D 002D5D -> $0008                PTC3            EQU     $08
002D5D 002D5D -> $0004                PTC2            EQU     $04
002D5D 002D5D -> $0002                PTC1            EQU     $02
002D5D 002D5D -> $0001                PTC0            EQU     $01
002D5D 002D5D -> $0080                PC7             EQU     $80
002D5D 002D5D -> $0040                PC6             EQU     $40
002D5D 002D5D -> $0020                PC5             EQU     $20
002D5D 002D5D -> $0010                PC4             EQU     $10
002D5D 002D5D -> $0008                PC3             EQU     $08
002D5D 002D5D -> $0004                PC2             EQU     $04
002D5D 002D5D -> $0002                PC1             EQU     $02
002D5D 002D5D -> $0001                PC0             EQU     $01
002D5D 002D5D -> $0005                PORTD           EQU     $0005
002D5D 002D5D -> $0080                PTD7            EQU     $80
002D5D 002D5D -> $0040                PTD6            EQU     $40
002D5D 002D5D -> $0020                PTD5            EQU     $20
002D5D 002D5D -> $0010                PTD4            EQU     $10
002D5D 002D5D -> $0008                PTD3            EQU     $08
002D5D 002D5D -> $0004                PTD2            EQU     $04
002D5D 002D5D -> $0002                PTD1            EQU     $02
002D5D 002D5D -> $0001                PTD0            EQU     $01
002D5D 002D5D -> $0080                PD7             EQU     $80
002D5D 002D5D -> $0040                PD6             EQU     $40
002D5D 002D5D -> $0020                PD5             EQU     $20
002D5D 002D5D -> $0010                PD4             EQU     $10
002D5D 002D5D -> $0008                PD3             EQU     $08
002D5D 002D5D -> $0004                PD2             EQU     $04
002D5D 002D5D -> $0002                PD1             EQU     $02
002D5D 002D5D -> $0001                PD0             EQU     $01
002D5D 002D5D -> $0006                DDRC            EQU     $0006
002D5D 002D5D -> $0080                DDRC7           EQU     $80
002D5D 002D5D -> $0040                DDRC6           EQU     $40
002D5D 002D5D -> $0020                DDRC5           EQU     $20
002D5D 002D5D -> $0010                DDRC4           EQU     $10
002D5D 002D5D -> $0008                DDRC3           EQU     $08
002D5D 002D5D -> $0004                DDRC2           EQU     $04
002D5D 002D5D -> $0007                DDRD            EQU     $0007
002D5D 002D5D -> $0080                DDRD7           EQU     $80
002D5D 002D5D -> $0040                DDRD6           EQU     $40
002D5D 002D5D -> $0020                DDRD5           EQU     $20
002D5D 002D5D -> $0010                DDRD4           EQU     $10
002D5D 002D5D -> $0008                DDRD3           EQU     $08
002D5D 002D5D -> $0004                DDRD2           EQU     $04
002D5D 002D5D -> $0008                PORTE           EQU     $0008
002D5D 002D5D -> $0002                PTE1            EQU     $02
002D5D 002D5D -> $0001                PTE0            EQU     $01
002D5D 002D5D -> $0002                PE1             EQU     $02
002D5D 002D5D -> $0001                PE0             EQU     $01
002D5D 002D5D -> $0009                DDRE            EQU     $0009
002D5D 002D5D -> $0002                DDRE1           EQU     $02
002D5D 002D5D -> $0001                DDRE0           EQU     $01
                                      ;$000A reserved
002D5D 002D5D -> $000B                MODE            EQU     $000B
002D5D 002D5D -> $0080                MODC            EQU     $80
002D5D 002D5D -> $000C                PUCR            EQU     $000C
002D5D 002D5D -> $0040                BKPUE           EQU     $40
002D5D 002D5D -> $0010                PUPEE           EQU     $10
002D5D 002D5D -> $0008                PUPDE           EQU     $08
002D5D 002D5D -> $0004                PUPCE           EQU     $04
002D5D 002D5D -> $0002                PUPBE           EQU     $02
002D5D 002D5D -> $0001                PUPAE           EQU     $01
                                      ;$000D to $0010 reserved
002D5D 002D5D -> $0011                DIRECT          EQU     $0011
002D5D 002D5D -> $0080                DP15            EQU     $80
002D5D 002D5D -> $0040                DP14            EQU     $40
002D5D 002D5D -> $0020                DP13            EQU     $20
002D5D 002D5D -> $0010                DP12            EQU     $10
002D5D 002D5D -> $0008                DP11            EQU     $08
002D5D 002D5D -> $0004                DP10            EQU     $04
002D5D 002D5D -> $0002                DP9             EQU     $02
002D5D 002D5D -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
002D5D 002D5D -> $0013                MMCCTL          EQU     $0013
002D5D 002D5D -> $0001                NVMRES           EQU     $01
                                      ;$0014 reserved
002D5D 002D5D -> $0015                PPAGE           EQU     $0015
002D5D 002D5D -> $0008                PIX3            EQU     $08
002D5D 002D5D -> $0004                PIX2            EQU     $04
002D5D 002D5D -> $0002                PIX1            EQU     $02
002D5D 002D5D -> $0001                PIX0            EQU     $01
                                      ;$0006 to $0019 reserved
002D5D 002D5D -> $001A                PARTIDH         EQU     $001A
002D5D 002D5D -> $0080                ID15            EQU     $80
002D5D 002D5D -> $0040                ID14            EQU     $40
002D5D 002D5D -> $0020                ID13            EQU     $20
002D5D 002D5D -> $0010                ID12            EQU     $10
002D5D 002D5D -> $0008                ID11            EQU     $08
002D5D 002D5D -> $0004                ID10            EQU     $04
002D5D 002D5D -> $0002                ID9             EQU     $02
002D5D 002D5D -> $0001                ID8             EQU     $01
002D5D 002D5D -> $001B                PARTIDL         EQU     $001B
002D5D 002D5D -> $0080                ID7             EQU     $80
002D5D 002D5D -> $0040                ID6             EQU     $40
002D5D 002D5D -> $0020                ID5             EQU     $20
002D5D 002D5D -> $0010                ID4             EQU     $10
002D5D 002D5D -> $0008                ID3             EQU     $08
002D5D 002D5D -> $0004                ID2             EQU     $04
002D5D 002D5D -> $0002                ID1             EQU     $02
002D5D 002D5D -> $0001                ID0             EQU     $01
002D5D 002D5D -> $001C                ECLKCTL         EQU     $001C
002D5D 002D5D -> $0080                NECLK           EQU     $80
002D5D 002D5D -> $0040                NCLKX2          EQU     $40
002D5D 002D5D -> $0020                DIV16           EQU     $20
002D5D 002D5D -> $0010                EDIV4           EQU     $10
002D5D 002D5D -> $0008                EDIV3           EQU     $08
002D5D 002D5D -> $0004                EDIV2           EQU     $04
002D5D 002D5D -> $0002                EDIV1           EQU     $02
002D5D 002D5D -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
002D5D 002D5D -> $001E                IRQCR           EQU     $001E
002D5D 002D5D -> $0080                IRQE            EQU     $80
002D5D 002D5D -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
002D5D 002D5D -> $0020                DBGC1           EQU     $0020
002D5D 002D5D -> $0080                ARM             EQU     $80
002D5D 002D5D -> $0040                TRIG            EQU     $40
002D5D 002D5D -> $0010                BDM             EQU     $10
002D5D 002D5D -> $0004                DBGBRK          EQU     $04
002D5D 002D5D -> $0003                COMRV           EQU     $03
002D5D 002D5D -> $0021                DBGSR           EQU     $0021
002D5D 002D5D -> $0080                TBF             EQU     $80
002D5D 002D5D -> $0004                SSF2            EQU     $04
002D5D 002D5D -> $0002                SSF1            EQU     $02
002D5D 002D5D -> $0001                SSF0            EQU     $01
002D5D 002D5D -> $0022                DBGTCR          EQU     $0022
002D5D 002D5D -> $0040                TSOURCE         EQU     $40
002D5D 002D5D -> $000C                TRCMOD          EQU     $0C
002D5D 002D5D -> $0001                TALIGN          EQU     $01
002D5D 002D5D -> $0023                DBGC2           EQU     $0023
002D5D 002D5D -> $0003                ABCM            EQU     $03
002D5D 002D5D -> $0024                DBGTBH          EQU     $0024
002D5D 002D5D -> $0080                DBGTB15         EQU     $80
002D5D 002D5D -> $0040                DBGTB14         EQU     $40
002D5D 002D5D -> $0020                DBGTB13         EQU     $20
002D5D 002D5D -> $0010                DBGTB12         EQU     $10
002D5D 002D5D -> $0008                DBGTB11         EQU     $08
002D5D 002D5D -> $0004                DBGTB10         EQU     $04
002D5D 002D5D -> $0002                DBGTB9          EQU     $02
002D5D 002D5D -> $0001                DBGTB8          EQU     $01
002D5D 002D5D -> $0025                DBGTBL          EQU     $0025
002D5D 002D5D -> $0080                DBGTB7          EQU     $80
002D5D 002D5D -> $0040                DBGTB6          EQU     $40
002D5D 002D5D -> $0020                DBGTB5          EQU     $20
002D5D 002D5D -> $0010                DBGTB4          EQU     $10
002D5D 002D5D -> $0008                DBGTB3          EQU     $08
002D5D 002D5D -> $0004                DBGTB2          EQU     $04
002D5D 002D5D -> $0002                DBGTB1          EQU     $02
002D5D 002D5D -> $0001                DBGTB0          EQU     $01
002D5D 002D5D -> $0026                DBGCNT          EQU     $0026
002D5D 002D5D -> $0080                TBF             EQU     $80
002D5D 002D5D -> $007F                CNT             EQU     $7F
002D5D 002D5D -> $0027                DBGSCRX         EQU     $0027
002D5D 002D5D -> $0008                SC3             EQU     $08
002D5D 002D5D -> $0004                SC2             EQU     $04
002D5D 002D5D -> $0002                SC1             EQU     $02
002D5D 002D5D -> $0001                SC0             EQU     $01
002D5D 002D5D -> $0027                DBGMFR          EQU     $0027
002D5D 002D5D -> $0004                MC2             EQU     $04
002D5D 002D5D -> $0002                MC1             EQU     $02
002D5D 002D5D -> $0001                MC0             EQU     $01
002D5D 002D5D -> $0028                DBGXCTL         EQU     $0028
002D5D 002D5D -> $0080                SZE             EQU     $80
002D5D 002D5D -> $0040                SZ              EQU     $40
002D5D 002D5D -> $0020                TAG             EQU     $20
002D5D 002D5D -> $0010                BRK             EQU     $10
002D5D 002D5D -> $0008                RW              EQU     $08
002D5D 002D5D -> $0004                RWE             EQU     $04
002D5D 002D5D -> $0002                NDB             EQU     $02
002D5D 002D5D -> $0001                COMPE           EQU     $01
002D5D 002D5D -> $0029                DBGXAH          EQU    $0029
002D5D 002D5D -> $0002                DBGXA17         EQU    $02
002D5D 002D5D -> $0001                DBGXA16         EQU    $01
002D5D 002D5D -> $002A                DBGXAM          EQU     $002A
002D5D 002D5D -> $0080                DBGXA15         EQU     $80
002D5D 002D5D -> $0040                DBGXA14         EQU     $40
002D5D 002D5D -> $0020                DBGXA13         EQU     $20
002D5D 002D5D -> $0010                DBGXA12         EQU     $10
002D5D 002D5D -> $0008                DBGXA11         EQU     $08
002D5D 002D5D -> $0004                DBGXA10         EQU     $04
002D5D 002D5D -> $0002                DBGXA9          EQU     $02
002D5D 002D5D -> $0001                DBGXA8          EQU     $01
002D5D 002D5D -> $002B                DBGXAL          EQU     $002B
002D5D 002D5D -> $0080                DBGXA7          EQU     $80
002D5D 002D5D -> $0040                DBGXA6          EQU     $40
002D5D 002D5D -> $0020                DBGXA5          EQU     $20
002D5D 002D5D -> $0010                DBGXA4          EQU     $10
002D5D 002D5D -> $0008                DBGXA3          EQU     $08
002D5D 002D5D -> $0004                DBGXA2          EQU     $04
002D5D 002D5D -> $0002                DBGXA1          EQU     $02
002D5D 002D5D -> $0001                DBGXA0          EQU     $01
002D5D 002D5D -> $002C                DBGADH          EQU     $002C
002D5D 002D5D -> $0080                DBGAD15         EQU     $80
002D5D 002D5D -> $0040                DBGAD14         EQU     $40
002D5D 002D5D -> $0020                DBGAD13         EQU     $20
002D5D 002D5D -> $0010                DBGAD12         EQU     $10
002D5D 002D5D -> $0008                DBGAD11         EQU     $08
002D5D 002D5D -> $0004                DBGAD10         EQU     $04
002D5D 002D5D -> $0002                DBGAD9          EQU     $02
002D5D 002D5D -> $0001                DBGAD8          EQU     $01
002D5D 002D5D -> $002D                DBGADL          EQU     $002D
002D5D 002D5D -> $0080                DBGAD7          EQU     $80
002D5D 002D5D -> $0040                DBGAD6          EQU     $40
002D5D 002D5D -> $0020                DBGAD5          EQU     $20
002D5D 002D5D -> $0010                DBGAD4          EQU     $10
002D5D 002D5D -> $0008                DBGAD3          EQU     $08
002D5D 002D5D -> $0004                DBGAD2          EQU     $04
002D5D 002D5D -> $0002                DBGAD1          EQU     $02
002D5D 002D5D -> $0001                DBGAD0          EQU     $01
002D5D 002D5D -> $002E                DBGADHM         EQU     $002E
002D5D 002D5D -> $0080                DBGADM15        EQU     $80
002D5D 002D5D -> $0040                DBGADM14        EQU     $40
002D5D 002D5D -> $0020                DBGADM13        EQU     $20
002D5D 002D5D -> $0010                DBGADM12        EQU     $10
002D5D 002D5D -> $0008                DBGADM11        EQU     $08
002D5D 002D5D -> $0004                DBGADM10        EQU     $04
002D5D 002D5D -> $0002                DBGADM9         EQU     $02
002D5D 002D5D -> $0001                DBGADM8         EQU     $01
002D5D 002D5D -> $002F                DBGADLM         EQU     $002F
002D5D 002D5D -> $0080                DBGADM7         EQU     $80
002D5D 002D5D -> $0040                DBGADM6         EQU     $40
002D5D 002D5D -> $0020                DBGADM5         EQU     $20
002D5D 002D5D -> $0010                DBGADM4         EQU     $10
002D5D 002D5D -> $0008                DBGADM3         EQU     $08
002D5D 002D5D -> $0004                DBGADM2         EQU     $04
002D5D 002D5D -> $0002                DBGADM1         EQU     $02
002D5D 002D5D -> $0001                DBGADM0         EQU     $01
                                      ;$0030 to $0033 reserved
002D5D 002D5D -> $0034                CPMUSYNR        EQU     $0034
002D5D 002D5D -> $0034                SYNR            EQU     $0034
002D5D 002D5D -> $0080                VCOFRQ1         EQU     $80
002D5D 002D5D -> $0040                VCOFRQ0         EQU     $40
002D5D 002D5D -> $0020                SYNDIV5         EQU     $20
002D5D 002D5D -> $0010                SYNDIV4         EQU     $10
002D5D 002D5D -> $0008                SYNDIV3         EQU     $08
002D5D 002D5D -> $0004                SYNDIV2         EQU     $04
002D5D 002D5D -> $0002                SYNDIV1         EQU     $02
002D5D 002D5D -> $0001                SYNDIV0         EQU     $01
002D5D 002D5D -> $0035                CPMUREFDV       EQU     $0035
002D5D 002D5D -> $0035                REFDV           EQU     $0035
002D5D 002D5D -> $0080                REFFRQ1         EQU     $80
002D5D 002D5D -> $0040                REFFRQ0         EQU     $40
002D5D 002D5D -> $0008                REFDIV3         EQU     $08
002D5D 002D5D -> $0004                REFDIV2         EQU     $04
002D5D 002D5D -> $0002                REFDIV1         EQU     $02
002D5D 002D5D -> $0001                REFDIV0         EQU     $01
002D5D 002D5D -> $0036                CPMUPOSTDIV     EQU     $0036
002D5D 002D5D -> $0036                POSTDIV         EQU     $0036
002D5D 002D5D -> $0010                POSTDIV4        EQU     $10
002D5D 002D5D -> $0008                POSTDIV3        EQU     $08
002D5D 002D5D -> $0004                POSTDIV2        EQU     $04
002D5D 002D5D -> $0002                POSTDIV1        EQU     $02
002D5D 002D5D -> $0001                POSTDIV0        EQU     $01
002D5D 002D5D -> $0037                CPMUFLG         EQU     $0037
002D5D 002D5D -> $0080                RTIF            EQU     $80
002D5D 002D5D -> $0040                PORF            EQU     $40
002D5D 002D5D -> $0020                LVRF            EQU     $20
002D5D 002D5D -> $0010                LOCKIF          EQU     $10
002D5D 002D5D -> $0008                LOCK            EQU     $08
002D5D 002D5D -> $0004                ILAF            EQU     $04
002D5D 002D5D -> $0002                OSCIF           EQU     $02
002D5D 002D5D -> $0001                UPOSC           EQU     $01
002D5D 002D5D -> $0038                CPMUINT         EQU     $0038
002D5D 002D5D -> $0080                RTIE            EQU     $80
002D5D 002D5D -> $0010                LOCKIE          EQU     $10
002D5D 002D5D -> $0002                OSCIE           EQU     $02
002D5D 002D5D -> $0039                CPMUCLKS        EQU     $0039
002D5D 002D5D -> $0080                PLLSEL          EQU     $80
002D5D 002D5D -> $0040                PSTP            EQU     $40
002D5D 002D5D -> $0008                PRE             EQU     $08
002D5D 002D5D -> $0004                PCE             EQU     $04
002D5D 002D5D -> $0002                RTIOSCSEL       EQU     $02
002D5D 002D5D -> $0001                COPOSCSEL       EQU     $01
002D5D 002D5D -> $003A                CPMUPLL         EQU     $003A
002D5D 002D5D -> $0020                FM1             EQU     $20
002D5D 002D5D -> $0010                FM0             EQU     $10
002D5D 002D5D -> $003B                CPMURTI         EQU     $003B
002D5D 002D5D -> $0080                RTDEC           EQU     $80
002D5D 002D5D -> $0040                RTR6            EQU     $40
002D5D 002D5D -> $0020                RTR5            EQU     $20
002D5D 002D5D -> $0010                RTR4            EQU     $10
002D5D 002D5D -> $0008                RTR3            EQU     $08
002D5D 002D5D -> $0004                RTR2            EQU     $04
002D5D 002D5D -> $0002                RTR1            EQU     $02
002D5D 002D5D -> $0001                RTR0            EQU     $01
002D5D 002D5D -> $003C                CPMUCOP         EQU     $003C
002D5D 002D5D -> $0080                WCOP            EQU     $80
002D5D 002D5D -> $0040                RSBCK           EQU     $40
002D5D 002D5D -> $0020                WRTMASK         EQU     $20
002D5D 002D5D -> $0004                CR2             EQU     $04
002D5D 002D5D -> $0002                CR1             EQU     $02
002D5D 002D5D -> $0001                CR0             EQU     $01
                                      ;$003D to $003E reserved
002D5D 002D5D -> $003F                CPMUARMCOP      EQU     $003F
002D5D 002D5D -> $003F                ARMCOP          EQU     $003F
002D5D 002D5D -> $0040                TIOS            EQU     $0040
002D5D 002D5D -> $0080                IOS7            EQU     $80
002D5D 002D5D -> $0040                IOS6            EQU     $40
002D5D 002D5D -> $0020                IOS5            EQU     $20
002D5D 002D5D -> $0010                IOS4            EQU     $10
002D5D 002D5D -> $0008                IOS3            EQU     $08
002D5D 002D5D -> $0004                IOS2            EQU     $04
002D5D 002D5D -> $0002                IOS1            EQU     $02
002D5D 002D5D -> $0001                IOS0            EQU     $01
002D5D 002D5D -> $0041                TCFORC          EQU     $0041
002D5D 002D5D -> $0080                FOC7            EQU     $80
002D5D 002D5D -> $0040                FOC6            EQU     $40
002D5D 002D5D -> $0020                FOC5            EQU     $20
002D5D 002D5D -> $0010                FOC4            EQU     $10
002D5D 002D5D -> $0008                FOC3            EQU     $08
002D5D 002D5D -> $0004                FOC2            EQU     $04
002D5D 002D5D -> $0002                FOC1            EQU     $02
002D5D 002D5D -> $0001                FOC0            EQU     $01
002D5D 002D5D -> $0042                TOC7M           EQU     $0042
002D5D 002D5D -> $0080                OC7M7           EQU     $80
002D5D 002D5D -> $0040                OC7M6           EQU     $40
002D5D 002D5D -> $0020                OC7M5           EQU     $20
002D5D 002D5D -> $0010                OC7M4           EQU     $10
002D5D 002D5D -> $0008                OC7M3           EQU     $08
002D5D 002D5D -> $0004                OC7M2           EQU     $04
002D5D 002D5D -> $0002                OC7M1           EQU     $02
002D5D 002D5D -> $0001                OC7M0           EQU     $01
002D5D 002D5D -> $0043                TOC7D           EQU     $0043
002D5D 002D5D -> $0080                OC7D7           EQU     $80
002D5D 002D5D -> $0040                OC7D6           EQU     $40
002D5D 002D5D -> $0020                OC7D5           EQU     $20
002D5D 002D5D -> $0010                OC7D4           EQU     $10
002D5D 002D5D -> $0008                OC7D3           EQU     $08
002D5D 002D5D -> $0004                OC7D2           EQU     $04
002D5D 002D5D -> $0002                OC7D1           EQU     $02
002D5D 002D5D -> $0001                OC7D0           EQU     $01
002D5D 002D5D -> $0044                TCNT            EQU     $0044
002D5D 002D5D -> $0046                TSCR1           EQU     $0046
002D5D 002D5D -> $0080                TEN             EQU     $80
002D5D 002D5D -> $0040                TSWAI           EQU     $40
002D5D 002D5D -> $0020                TSFRZ           EQU     $20
002D5D 002D5D -> $0010                TFFCA           EQU     $10
002D5D 002D5D -> $0008                PRNT            EQU     $08
002D5D 002D5D -> $0047                TTOV            EQU     $0047
002D5D 002D5D -> $0080                TOV7            EQU     $80
002D5D 002D5D -> $0040                TOV6            EQU     $40
002D5D 002D5D -> $0020                TOV5            EQU     $20
002D5D 002D5D -> $0010                TOV4            EQU     $10
002D5D 002D5D -> $0008                TOV3            EQU     $08
002D5D 002D5D -> $0004                TOV2            EQU     $04
002D5D 002D5D -> $0002                TOV1            EQU     $02
002D5D 002D5D -> $0001                TOV0            EQU     $01
002D5D 002D5D -> $0048                TCTL1           EQU     $0048
002D5D 002D5D -> $0080                OM7             EQU     $80
002D5D 002D5D -> $0040                OL7             EQU     $40
002D5D 002D5D -> $0020                OM6             EQU     $20
002D5D 002D5D -> $0010                OL6             EQU     $10
002D5D 002D5D -> $0008                OM5             EQU     $08
002D5D 002D5D -> $0004                OL5             EQU     $04
002D5D 002D5D -> $0002                OM4             EQU     $02
002D5D 002D5D -> $0001                OL4             EQU     $01
002D5D 002D5D -> $0049                TCTL2           EQU     $0049
002D5D 002D5D -> $0080                OM3             EQU     $80
002D5D 002D5D -> $0040                OL3             EQU     $40
002D5D 002D5D -> $0020                OM2             EQU     $20
002D5D 002D5D -> $0010                OL2             EQU     $10
002D5D 002D5D -> $0008                OM1             EQU     $08
002D5D 002D5D -> $0004                OL1             EQU     $04
002D5D 002D5D -> $0002                OM0             EQU     $02
002D5D 002D5D -> $0001                OL0             EQU     $01
002D5D 002D5D -> $004A                TCTL3           EQU     $004A
002D5D 002D5D -> $0080                EDG7B           EQU     $80
002D5D 002D5D -> $0040                EDG7A           EQU     $40
002D5D 002D5D -> $0020                EDG6B           EQU     $20
002D5D 002D5D -> $0010                EDG6A           EQU     $10
002D5D 002D5D -> $0008                EDG5B           EQU     $08
002D5D 002D5D -> $0004                EDG5A           EQU     $04
002D5D 002D5D -> $0002                EDG4B           EQU     $02
002D5D 002D5D -> $0001                EDG4A           EQU     $01
002D5D 002D5D -> $004B                TCTL4           EQU     $004B
002D5D 002D5D -> $0080                EDG3B           EQU     $80
002D5D 002D5D -> $0040                EDG3A           EQU     $40
002D5D 002D5D -> $0020                EDG2B           EQU     $20
002D5D 002D5D -> $0010                EDG2A           EQU     $10
002D5D 002D5D -> $0008                EDG1B           EQU     $08
002D5D 002D5D -> $0004                EDG1A           EQU     $04
002D5D 002D5D -> $0002                EDG0B           EQU     $02
002D5D 002D5D -> $0001                EDG0A           EQU     $01
002D5D 002D5D -> $004C                TIE             EQU     $004C
002D5D 002D5D -> $0080                C7I             EQU     $80
002D5D 002D5D -> $0040                C6I             EQU     $40
002D5D 002D5D -> $0020                C5I             EQU     $20
002D5D 002D5D -> $0010                C4I             EQU     $10
002D5D 002D5D -> $0008                C3I             EQU     $08
002D5D 002D5D -> $0004                C2I             EQU     $04
002D5D 002D5D -> $0002                C1I             EQU     $02
002D5D 002D5D -> $0001                C0I             EQU     $01
002D5D 002D5D -> $004D                TSCR2           EQU     $004D
002D5D 002D5D -> $0080                TOI             EQU     $80
002D5D 002D5D -> $0008                TCRE            EQU     $08
002D5D 002D5D -> $0004                PR2             EQU     $04
002D5D 002D5D -> $0002                PR1             EQU     $02
002D5D 002D5D -> $0001                PR0             EQU     $01
002D5D 002D5D -> $004E                TFLG1           EQU     $004E
002D5D 002D5D -> $0080                C7F             EQU     $80
002D5D 002D5D -> $0040                C6F             EQU     $40
002D5D 002D5D -> $0020                C5F             EQU     $20
002D5D 002D5D -> $0010                C4F             EQU     $10
002D5D 002D5D -> $0008                C3F             EQU     $08
002D5D 002D5D -> $0004                C2F             EQU     $04
002D5D 002D5D -> $0002                C1F             EQU     $02
002D5D 002D5D -> $0001                C0F             EQU     $01
002D5D 002D5D -> $004F                TFLG2           EQU     $004F
002D5D 002D5D -> $0080                TOF             EQU     $80
002D5D 002D5D -> $0050                TC0             EQU     $0050
002D5D 002D5D -> $0052                TC1             EQU     $0052
002D5D 002D5D -> $0054                TC2             EQU     $0054
002D5D 002D5D -> $0056                TC3             EQU     $0056
002D5D 002D5D -> $0058                TC4             EQU     $0058
002D5D 002D5D -> $005A                TC5             EQU     $005A
002D5D 002D5D -> $005C                TC6             EQU     $005C
002D5D 002D5D -> $005E                TC7             EQU     $005E
002D5D 002D5D -> $0060                PACTL           EQU     $0060
002D5D 002D5D -> $0040                PAEN            EQU     $40
002D5D 002D5D -> $0020                PAMOD           EQU     $20
002D5D 002D5D -> $0010                PEDGE           EQU     $10
002D5D 002D5D -> $0008                CLK1            EQU     $08
002D5D 002D5D -> $0004                CLK0            EQU     $04
002D5D 002D5D -> $0002                PAOVI           EQU     $02
002D5D 002D5D -> $0001                PAI             EQU     $01
002D5D 002D5D -> $0061                PAFLG           EQU     $0061
002D5D 002D5D -> $0002                PAOVF           EQU     $02
002D5D 002D5D -> $0001                PAIF            EQU     $01
002D5D 002D5D -> $0062                PACNT           EQU     $0062
                                      ;$0064 to $006B reserved
002D5D 002D5D -> $006C                OCPD            EQU     $006C
002D5D 002D5D -> $0080                OCPD7           EQU     $80
002D5D 002D5D -> $0040                OCPD6           EQU     $40
002D5D 002D5D -> $0020                OCPD5           EQU     $20
002D5D 002D5D -> $0010                OCPD4           EQU     $10
002D5D 002D5D -> $0008                OCPD3           EQU     $08
002D5D 002D5D -> $0004                OCPD2           EQU     $04
002D5D 002D5D -> $0002                OCPD1           EQU     $02
002D5D 002D5D -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
002D5D 002D5D -> $006E                PTPSR           EQU     $006E
002D5D 002D5D -> $0080                PTPS7           EQU     $80
002D5D 002D5D -> $0040                PTPS6           EQU     $40
002D5D 002D5D -> $0020                PTPS5           EQU     $20
002D5D 002D5D -> $0010                PTPS4           EQU     $10
002D5D 002D5D -> $0008                PTPS3           EQU     $08
002D5D 002D5D -> $0004                PTPS2           EQU     $04
002D5D 002D5D -> $0002                PTPS1           EQU     $02
002D5D 002D5D -> $0001                PTPS0           EQU     $01
                                      ;$006F reserved
002D5D 002D5D -> $0070                ATDCTL0         EQU     $0070
002D5D 002D5D -> $0008                WRAP3           EQU     $08
002D5D 002D5D -> $0004                WRAP2           EQU     $04
002D5D 002D5D -> $0002                WRAP1           EQU     $02
002D5D 002D5D -> $0001                WRAP0           EQU     $01
002D5D 002D5D -> $0071                ATDCTL1         EQU     $0071
002D5D 002D5D -> $0080                ETRIGSEL        EQU     $80
002D5D 002D5D -> $0040                SRES1           EQU     $40
002D5D 002D5D -> $0020                SRES0           EQU     $20
002D5D 002D5D -> $0010                DIS             EQU     $10
002D5D 002D5D -> $0008                ETRIGCH3        EQU     $08
002D5D 002D5D -> $0004                ETRIGCH2        EQU     $04
002D5D 002D5D -> $0002                ETRIGCH1        EQU     $02
002D5D 002D5D -> $0001                ETRIGCH0        EQU     $01
002D5D 002D5D -> $0072                ATDCTL2         EQU     $0072
002D5D 002D5D -> $0040                AFFC            EQU     $40
002D5D 002D5D -> $0010                ETRIGLE         EQU     $10
002D5D 002D5D -> $0008                ETRIGP          EQU     $08
002D5D 002D5D -> $0004                ETRIGE          EQU     $04
002D5D 002D5D -> $0002                ASCIE           EQU     $02
002D5D 002D5D -> $0001                ASCIF           EQU     $01
002D5D 002D5D -> $0073                ATDCTL3         EQU     $0073
002D5D 002D5D -> $0080                DJM             EQU     $80
002D5D 002D5D -> $0040                S8C             EQU     $40
002D5D 002D5D -> $0020                S4C             EQU     $20
002D5D 002D5D -> $0010                S2C             EQU     $10
002D5D 002D5D -> $0008                S1C             EQU     $08
002D5D 002D5D -> $0004                FIFO            EQU     $04
002D5D 002D5D -> $0002                FRZ1            EQU     $02
002D5D 002D5D -> $0001                FRZ0            EQU     $01
002D5D 002D5D -> $0074                ATDCTL4         EQU     $0074
002D5D 002D5D -> $0080                SMP2            EQU     $80
002D5D 002D5D -> $0040                SMP1            EQU     $40
002D5D 002D5D -> $0020                SMP0            EQU     $20
002D5D 002D5D -> $0010                PRS4            EQU     $10
002D5D 002D5D -> $0008                PRS3            EQU     $08
002D5D 002D5D -> $0004                PRS2            EQU     $04
002D5D 002D5D -> $0002                PRS1            EQU     $02
002D5D 002D5D -> $0001                PRS0            EQU     $01
002D5D 002D5D -> $0075                ATDCTL5         EQU     $0075
002D5D 002D5D -> $0040                SC              EQU     $40
002D5D 002D5D -> $0020                SCAN            EQU     $20
002D5D 002D5D -> $0010                MULT            EQU     $10
002D5D 002D5D -> $0008                CD              EQU     $08
002D5D 002D5D -> $0004                CC              EQU     $04
002D5D 002D5D -> $0002                CB              EQU     $02
002D5D 002D5D -> $0001                CA              EQU     $01
002D5D 002D5D -> $0076                ATDSTAT0        EQU     $0076
002D5D 002D5D -> $0080                SCF             EQU     $80
002D5D 002D5D -> $0020                ETORF           EQU     $20
002D5D 002D5D -> $0010                FIFOR           EQU     $10
002D5D 002D5D -> $0004                CC3             EQU     $04
002D5D 002D5D -> $0004                CC2             EQU     $04
002D5D 002D5D -> $0002                CC1             EQU     $02
002D5D 002D5D -> $0001                CC0             EQU     $01
                                      ;$0077 reserved
002D5D 002D5D -> $0078                ATDCMPEH        EQU     $0078
002D5D 002D5D -> $0080                CMPE15          EQU     $80
002D5D 002D5D -> $0040                CMPE14          EQU     $40
002D5D 002D5D -> $0020                CMPE13          EQU     $20
002D5D 002D5D -> $0010                CMPE12          EQU     $10
002D5D 002D5D -> $0008                CMPE11          EQU     $08
002D5D 002D5D -> $0004                CMPE10          EQU     $04
002D5D 002D5D -> $0002                CMPE9           EQU     $02
002D5D 002D5D -> $0001                CMPE8           EQU     $01
002D5D 002D5D -> $0079                ATDCMPEL        EQU     $0079
002D5D 002D5D -> $0080                CMPE7           EQU     $80
002D5D 002D5D -> $0040                CMPE6           EQU     $40
002D5D 002D5D -> $0020                CMPE5           EQU     $20
002D5D 002D5D -> $0010                CMPE4           EQU     $10
002D5D 002D5D -> $0008                CMPE3           EQU     $08
002D5D 002D5D -> $0004                CMPE2           EQU     $04
002D5D 002D5D -> $0002                CMPE1           EQU     $02
002D5D 002D5D -> $0001                CMPE0           EQU     $01
002D5D 002D5D -> $007A                ATDSTAT2H       EQU     $007A
002D5D 002D5D -> $0080                CCF15           EQU     $80
002D5D 002D5D -> $0040                CCF14           EQU     $40
002D5D 002D5D -> $0020                CCF13           EQU     $20
002D5D 002D5D -> $0010                CCF12           EQU     $10
002D5D 002D5D -> $0008                CCF11           EQU     $08
002D5D 002D5D -> $0004                CCF10           EQU     $04
002D5D 002D5D -> $0002                CCF9            EQU     $02
002D5D 002D5D -> $0001                CCF8            EQU     $01
002D5D 002D5D -> $007B                ATDSTAT2L       EQU     $007B
002D5D 002D5D -> $0080                CCF7            EQU     $80
002D5D 002D5D -> $0040                CCF6            EQU     $40
002D5D 002D5D -> $0020                CCF5            EQU     $20
002D5D 002D5D -> $0010                CCF4            EQU     $10
002D5D 002D5D -> $0008                CCF3            EQU     $08
002D5D 002D5D -> $0004                CCF2            EQU     $04
002D5D 002D5D -> $0002                CCF1            EQU     $02
002D5D 002D5D -> $0001                CCF0            EQU     $01
002D5D 002D5D -> $007C                ATDDIENH        EQU     $007C
002D5D 002D5D -> $007C                ATDDIEN         EQU     $007C
002D5D 002D5D -> $0080                IEN15           EQU     $80
002D5D 002D5D -> $0040                IEN14           EQU     $40
002D5D 002D5D -> $0020                IEN13           EQU     $20
002D5D 002D5D -> $0010                IEN12           EQU     $10
002D5D 002D5D -> $0008                IEN11           EQU     $08
002D5D 002D5D -> $0004                IEN10           EQU     $04
002D5D 002D5D -> $0002                IEN9            EQU     $02
002D5D 002D5D -> $0001                IEN8            EQU     $01
002D5D 002D5D -> $007D                ATDDIENL        EQU     $007D
002D5D 002D5D -> $0080                IEN7            EQU     $80
002D5D 002D5D -> $0040                IEN6            EQU     $40
002D5D 002D5D -> $0020                IEN5            EQU     $20
002D5D 002D5D -> $0010                IEN4            EQU     $10
002D5D 002D5D -> $0008                IEN3            EQU     $08
002D5D 002D5D -> $0004                IEN2            EQU     $04
002D5D 002D5D -> $0002                IEN1            EQU     $02
002D5D 002D5D -> $0001                IEN0            EQU     $01
002D5D 002D5D -> $007E                ATDCMPHTH       EQU     $007E
002D5D 002D5D -> $0080                CMPHT15         EQU     $80
002D5D 002D5D -> $0040                CMPHT14         EQU     $40
002D5D 002D5D -> $0020                CMPHT13         EQU     $20
002D5D 002D5D -> $0010                CMPHT12         EQU     $10
002D5D 002D5D -> $0008                CMPHT11         EQU     $08
002D5D 002D5D -> $0004                CMPHT10         EQU     $04
002D5D 002D5D -> $0002                CMPHT9          EQU     $02
002D5D 002D5D -> $0001                CMPHT8          EQU     $01
002D5D 002D5D -> $007F                ATDCMPHTL       EQU     $007F
002D5D 002D5D -> $0001                CMPHT0          EQU     $01
002D5D 002D5D -> $0002                CMPHT1          EQU     $02
002D5D 002D5D -> $0004                CMPHT2          EQU     $04
002D5D 002D5D -> $0008                CMPHT3          EQU     $08
002D5D 002D5D -> $0010                CMPHT4          EQU     $10
002D5D 002D5D -> $0020                CMPHT5          EQU     $20
002D5D 002D5D -> $0040                CMPHT6          EQU     $40
002D5D 002D5D -> $0080                CMPHT7          EQU     $80
002D5D 002D5D -> $0080                ATDDR0          EQU     $0080
002D5D 002D5D -> $0080                ATDDR0H         EQU     $0080
002D5D 002D5D -> $0081                ATDDR0L         EQU     $0081
002D5D 002D5D -> $0082                ATDDR1          EQU     $0082
002D5D 002D5D -> $0082                ATDDR1H         EQU     $0082
002D5D 002D5D -> $0083                ATDDR1L         EQU     $0083
002D5D 002D5D -> $0084                ATDDR2          EQU     $0084
002D5D 002D5D -> $0084                ATDDR2H         EQU     $0084
002D5D 002D5D -> $0085                ATDDR2L         EQU     $0085
002D5D 002D5D -> $0086                ATDDR3          EQU     $0086
002D5D 002D5D -> $0086                ATDDR3H         EQU     $0086
002D5D 002D5D -> $0087                ATDDR3L         EQU     $0087
002D5D 002D5D -> $0088                ATDDR4          EQU     $0088
002D5D 002D5D -> $0088                ATDDR4H         EQU     $0088
002D5D 002D5D -> $0089                ATDDR4L         EQU     $0089
002D5D 002D5D -> $008A                ATDDR5          EQU     $008A
002D5D 002D5D -> $008A                ATDDR5H         EQU     $008A
002D5D 002D5D -> $008B                ATDDR5L         EQU     $008B
002D5D 002D5D -> $008C                ATDDR6          EQU     $008C
002D5D 002D5D -> $008C                ATDDR6H         EQU     $008C
002D5D 002D5D -> $008D                ATDDR6L         EQU     $008D
002D5D 002D5D -> $008E                ATDDR7          EQU     $008E
002D5D 002D5D -> $008E                ATDDR7H         EQU     $008E
002D5D 002D5D -> $008F                ATDDR7L         EQU     $008F
002D5D 002D5D -> $0090                ATDDR8          EQU     $0090
002D5D 002D5D -> $0090                ATDDR8H         EQU     $0090
002D5D 002D5D -> $0091                ATDDR8L         EQU     $0091
002D5D 002D5D -> $0092                ATDDR9          EQU     $0092
002D5D 002D5D -> $0092                ATDDR9H         EQU     $0092
002D5D 002D5D -> $0093                ATDDR9L         EQU     $0093
002D5D 002D5D -> $0093                ATDDR10         EQU     $0093
002D5D 002D5D -> $0093                ATDDR10H        EQU     $0093
002D5D 002D5D -> $0095                ATDDR10L        EQU     $0095
002D5D 002D5D -> $0096                ATDDR11         EQU     $0096
002D5D 002D5D -> $0096                ATDDR11H        EQU     $0096
002D5D 002D5D -> $0097                ATDDR11L        EQU     $0097
002D5D 002D5D -> $0098                ATDDR12         EQU     $0098
002D5D 002D5D -> $0098                ATDDR12H        EQU     $0098
002D5D 002D5D -> $0099                ATDDR12L        EQU     $0099
002D5D 002D5D -> $009A                ATDDR13         EQU     $009A
002D5D 002D5D -> $009A                ATDDR13H        EQU     $009A
002D5D 002D5D -> $009B                ATDDR13L        EQU     $009B
002D5D 002D5D -> $009C                ATDDR14         EQU     $009C
002D5D 002D5D -> $009C                ATDDR14H        EQU     $009C
002D5D 002D5D -> $009D                ATDDR14L        EQU     $009D
002D5D 002D5D -> $009E                ATDDR15         EQU     $009E
002D5D 002D5D -> $009E                ATDDR15H        EQU     $009E
002D5D 002D5D -> $009F                ATDDR15L        EQU     $009F
002D5D 002D5D -> $00A0                PWME            EQU     $00A0
002D5D 002D5D -> $0080                PWME7           EQU     $80
002D5D 002D5D -> $0040                PWME6           EQU     $40
002D5D 002D5D -> $0020                PWME5           EQU     $20
002D5D 002D5D -> $0010                PWME4           EQU     $10
002D5D 002D5D -> $0008                PWME3           EQU     $08
002D5D 002D5D -> $0004                PWME2           EQU     $04
002D5D 002D5D -> $0002                PWME1           EQU     $02
002D5D 002D5D -> $0001                PWME0           EQU     $01
002D5D 002D5D -> $00A1                PWMPOL          EQU     $00A1
002D5D 002D5D -> $0080                PPOL7           EQU     $80
002D5D 002D5D -> $0040                PPOL6           EQU     $40
002D5D 002D5D -> $0020                PPOL5           EQU     $20
002D5D 002D5D -> $0010                PPOL4           EQU     $10
002D5D 002D5D -> $0008                PPOL3           EQU     $08
002D5D 002D5D -> $0004                PPOL2           EQU     $04
002D5D 002D5D -> $0002                PPOL1           EQU     $02
002D5D 002D5D -> $0001                PPOL0           EQU     $01
002D5D 002D5D -> $00A2                PWMCLK          EQU     $00A2
002D5D 002D5D -> $0080                PCLK7           EQU     $80
002D5D 002D5D -> $0040                PCLK6           EQU     $40
002D5D 002D5D -> $0020                PCLK5           EQU     $20
002D5D 002D5D -> $0010                PCLK4           EQU     $10
002D5D 002D5D -> $0008                PCLK3           EQU     $08
002D5D 002D5D -> $0004                PCLK2           EQU     $04
002D5D 002D5D -> $0002                PCLK1           EQU     $02
002D5D 002D5D -> $0001                PCLK0           EQU     $01
002D5D 002D5D -> $00A3                PWMPRCLK        EQU     $00A3
002D5D 002D5D -> $0040                PCKB2           EQU     $40
002D5D 002D5D -> $0020                PCKB1           EQU     $20
002D5D 002D5D -> $0010                PCKB0           EQU     $10
002D5D 002D5D -> $0004                PCKA2           EQU     $04
002D5D 002D5D -> $0002                PCKA1           EQU     $02
002D5D 002D5D -> $0001                PCKA0           EQU     $01
002D5D 002D5D -> $00A4                PWMCAE          EQU     $00A4
002D5D 002D5D -> $0080                CAE7            EQU     $80
002D5D 002D5D -> $0040                CAE6            EQU     $40
002D5D 002D5D -> $0020                CAE5            EQU     $20
002D5D 002D5D -> $0010                CAE4            EQU     $10
002D5D 002D5D -> $0008                CAE3            EQU     $08
002D5D 002D5D -> $0004                CAE2            EQU     $04
002D5D 002D5D -> $0002                CAE1            EQU     $02
002D5D 002D5D -> $0001                CAE0            EQU     $01
002D5D 002D5D -> $00A5                PWMCTL          EQU     $00A5
002D5D 002D5D -> $0080                CON67           EQU     $80
002D5D 002D5D -> $0040                CON45           EQU     $40
002D5D 002D5D -> $0020                CON23           EQU     $20
002D5D 002D5D -> $0010                CON01           EQU     $10
002D5D 002D5D -> $0008                PSWAI           EQU     $08
002D5D 002D5D -> $0004                PFRZ            EQU     $04
002D5D 002D5D -> $00A6                PWMCLKAB        EQU     $00A6
002D5D 002D5D -> $0080                PCLKAB7         EQU     $80
002D5D 002D5D -> $0040                PCLKAB6         EQU     $40
002D5D 002D5D -> $0020                PCLKAB5         EQU     $20
002D5D 002D5D -> $0010                PCLKAB4         EQU     $10
002D5D 002D5D -> $0008                PCLKAB3         EQU     $08
002D5D 002D5D -> $0004                PCLKAB2         EQU     $04
002D5D 002D5D -> $0002                PCLKAB1         EQU     $02
002D5D 002D5D -> $0001                PCLKAB0         EQU     $01
                                      ;$00A7 reserved
002D5D 002D5D -> $00A8                PWMSCNTA        EQU     $00A8
002D5D 002D5D -> $00A9                PWMSCNTB        EQU     $00A9
                                      ;$00AA to $00AB reserved
002D5D 002D5D -> $00AC                PWMCNT0         EQU     $00AC
002D5D 002D5D -> $00AD                PWMCNT1         EQU     $00AD
002D5D 002D5D -> $00AE                PWMCNT2         EQU     $00AE
002D5D 002D5D -> $00AF                PWMCNT3         EQU     $00AF
002D5D 002D5D -> $00B0                PWMCNT4         EQU     $00B0
002D5D 002D5D -> $00B1                PWMCNT5         EQU     $00B1
002D5D 002D5D -> $00B2                PWMCNT6         EQU     $00B2
002D5D 002D5D -> $00B3                PWMCNT7         EQU     $00B3
002D5D 002D5D -> $00B4                PWMPER0         EQU     $00B4
002D5D 002D5D -> $00B5                PWMPER1         EQU     $00B5
002D5D 002D5D -> $00B6                PWMPER2         EQU     $00B6
002D5D 002D5D -> $00B7                PWMPER3         EQU     $00B7
002D5D 002D5D -> $00B8                PWMPER4         EQU     $00B8
002D5D 002D5D -> $00B9                PWMPER5         EQU     $00B9
002D5D 002D5D -> $00BA                PWMPER6         EQU     $00BA
002D5D 002D5D -> $00BB                PWMPER7         EQU     $00BB
002D5D 002D5D -> $00BC                PWMDTY0         EQU     $00BC
002D5D 002D5D -> $00BD                PWMDTY1         EQU     $00BD
002D5D 002D5D -> $00BE                PWMDTY2         EQU     $00BE
002D5D 002D5D -> $00BF                PWMDTY3         EQU     $00BF
002D5D 002D5D -> $00C0                PWMDTY4         EQU     $00C0
002D5D 002D5D -> $00C1                PWMDTY5         EQU     $00C1
002D5D 002D5D -> $00C2                PWMDTY6         EQU     $00C2
002D5D 002D5D -> $00C3                PWMDTY7         EQU     $00C3
                                      ;$00C4 to $00C7 reserved
002D5D 002D5D -> $00C8                SCIBDH          EQU     $00C8
002D5D 002D5D -> $00C8                SCI0BDH         EQU     $00C8
002D5D 002D5D -> $0080                IREN            EQU     $80
002D5D 002D5D -> $0040                TNP1            EQU     $40
002D5D 002D5D -> $0020                TNP0            EQU     $20
002D5D 002D5D -> $0010                SBR12           EQU     $10
002D5D 002D5D -> $0008                SBR11           EQU     $08
002D5D 002D5D -> $0004                SBR10           EQU     $04
002D5D 002D5D -> $0002                SBR9            EQU     $02
002D5D 002D5D -> $0001                SBR8            EQU     $01
002D5D 002D5D -> $00C9                SCI0ASR1        EQU     $00C9
002D5D 002D5D -> $0080                RXEDGIF         EQU     $80
002D5D 002D5D -> $0004                BERRV           EQU     $04
002D5D 002D5D -> $0002                BERRIF          EQU     $02
002D5D 002D5D -> $0001                BKDIF           EQU     $01
002D5D 002D5D -> $00C9                SCIBDL          EQU     $00C9
002D5D 002D5D -> $00C9                SCI0BDL         EQU     $00C9
002D5D 002D5D -> $0080                SBR7            EQU     $80
002D5D 002D5D -> $0040                SBR6            EQU     $40
002D5D 002D5D -> $0020                SBR5            EQU     $20
002D5D 002D5D -> $0010                SBR4            EQU     $10
002D5D 002D5D -> $0008                SBR3            EQU     $08
002D5D 002D5D -> $0004                SBR2            EQU     $04
002D5D 002D5D -> $0002                SBR1            EQU     $02
002D5D 002D5D -> $0001                SBR0            EQU     $01
002D5D 002D5D -> $00C9                SCI0ACR1        EQU     $00C9
002D5D 002D5D -> $0080                RXEDGIE         EQU     $80
002D5D 002D5D -> $0002                BERRIE          EQU     $02
002D5D 002D5D -> $0001                BKDIE           EQU     $01
002D5D 002D5D -> $00CA                SCICR1          EQU     $00CA
002D5D 002D5D -> $00CA                SCI0CR1         EQU     $00CA
002D5D 002D5D -> $0080                LOOPS           EQU     $80
002D5D 002D5D -> $0040                SCISWAI         EQU     $40
002D5D 002D5D -> $0020                RSRC            EQU     $20
002D5D 002D5D -> $0010                M               EQU     $10
002D5D 002D5D -> $0008                WAKE            EQU     $08
002D5D 002D5D -> $0004                ILT             EQU     $04
002D5D 002D5D -> $0002                PE              EQU     $02
002D5D 002D5D -> $0001                PT              EQU     $01
002D5D 002D5D -> $00CA                SCI0ACR2        EQU     $00CA
002D5D 002D5D -> $0004                BERRM1          EQU     $04
002D5D 002D5D -> $0002                BERRM0          EQU     $02
002D5D 002D5D -> $0001                BKDFE           EQU     $01
002D5D 002D5D -> $00CB                SCICR2          EQU     $00CB
002D5D 002D5D -> $00CB                SCI0CR2         EQU     $00CB
002D5D 002D5D -> $0080                TXIE            EQU     $80
002D5D 002D5D -> $0040                TCIE            EQU     $40
002D5D 002D5D -> $0020                RIE             EQU     $20
002D5D 002D5D -> $0010                ILIE            EQU     $10
002D5D 002D5D -> $0008                TE              EQU     $08
002D5D 002D5D -> $0004                RE              EQU     $04
002D5D 002D5D -> $0002                RWU             EQU     $02
002D5D 002D5D -> $0001                SBK             EQU     $01
002D5D 002D5D -> $00CC                SCISR1          EQU     $00CC
002D5D 002D5D -> $00CC                SCI0SR1         EQU     $00CC
002D5D 002D5D -> $0080                TDRE            EQU     $80
002D5D 002D5D -> $0040                TC              EQU     $40
002D5D 002D5D -> $0020                RDRFF           EQU     $20
002D5D 002D5D -> $0010                IDLE            EQU     $10
002D5D 002D5D -> $0008                OR              EQU     $08
002D5D 002D5D -> $0004                NF              EQU     $04
002D5D 002D5D -> $0002                FE              EQU     $02
002D5D 002D5D -> $0001                PF              EQU     $01
002D5D 002D5D -> $00CD                SCISR2          EQU     $00CD
002D5D 002D5D -> $00CD                SCI0SR2         EQU     $00CD
002D5D 002D5D -> $0008                AMAP            EQU     $08
002D5D 002D5D -> $0010                TXPOL           EQU     $10
002D5D 002D5D -> $0008                RXPOL           EQU     $08
002D5D 002D5D -> $0004                BRK13           EQU     $04
002D5D 002D5D -> $0002                TXDIR           EQU     $02
002D5D 002D5D -> $0001                RAF             EQU     $01
002D5D 002D5D -> $00CE                SCIDRH          EQU     $00CE
002D5D 002D5D -> $00CE                SCI0DRH         EQU     $00CE
002D5D 002D5D -> $0080                R8              EQU     $80
002D5D 002D5D -> $0040                T8              EQU     $40
002D5D 002D5D -> $00CF                SCIDRL          EQU     $00CF
002D5D 002D5D -> $00CF                SCI0DRL         EQU     $00CF
002D5D 002D5D -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
002D5D 002D5D -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
002D5D 002D5D -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
002D5D 002D5D -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
002D5D 002D5D -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
002D5D 002D5D -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
002D5D 002D5D -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
002D5D 002D5D -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
002D5D 002D5D -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
002D5D 002D5D -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
002D5D 002D5D -> $00D7                SCI1DRL         EQU     $00D7
002D5D 002D5D -> $00D8                SPICR1          EQU     $00D8
002D5D 002D5D -> $00D8                SPI0CR1         EQU     $00D8
002D5D 002D5D -> $0080                SPIE            EQU     $80
002D5D 002D5D -> $0040                SPE             EQU     $40
002D5D 002D5D -> $0020                SPTIE           EQU     $20
002D5D 002D5D -> $0010                MSTR            EQU     $10
002D5D 002D5D -> $0008                CPOL            EQU     $08
002D5D 002D5D -> $0004                CPHA            EQU     $04
002D5D 002D5D -> $0002                SSOE            EQU     $02
002D5D 002D5D -> $0001                LSBFE           EQU     $01
002D5D 002D5D -> $00D9                SPICR2          EQU     $00D9
002D5D 002D5D -> $00D9                SPI0CR2         EQU     $00D9
002D5D 002D5D -> $0040                XFRW            EQU     $40
002D5D 002D5D -> $0010                MODFEN          EQU     $10
002D5D 002D5D -> $0008                BIDIROE         EQU     $08
002D5D 002D5D -> $0002                SPISWAI         EQU     $02
002D5D 002D5D -> $0001                SPC0            EQU     $01
002D5D 002D5D -> $00DA                SPIBR           EQU     $00DA
002D5D 002D5D -> $00DA                SPI0BR          EQU     $00DA
002D5D 002D5D -> $0040                SPPR2           EQU     $40
002D5D 002D5D -> $0020                SPPR1           EQU     $20
002D5D 002D5D -> $0010                SPPR0           EQU     $10
002D5D 002D5D -> $0004                SPR2            EQU     $04
002D5D 002D5D -> $0002                SPR1            EQU     $02
002D5D 002D5D -> $0001                SPR0            EQU     $01
002D5D 002D5D -> $00DB                SPISR           EQU     $00DB
002D5D 002D5D -> $00DB                SPI0SR          EQU     $00DB
002D5D 002D5D -> $0080                SPIF            EQU     $80
002D5D 002D5D -> $0020                SPTEF           EQU     $20
002D5D 002D5D -> $0010                MODF            EQU     $10
002D5D 002D5D -> $00DC                SPIDRH          EQU     $00DC
002D5D 002D5D -> $00DC                SPI0DRH         EQU     $00DC
002D5D 002D5D -> $00DD                SPIDRL          EQU     $00DD
002D5D 002D5D -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00E7 reserved
002D5D 002D5D -> $00E8                SCI2BDH         EQU     $00E8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
002D5D 002D5D -> $00E8                SCI2ASR1        EQU     $00E8
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
002D5D 002D5D -> $00E9                SCI2BDL         EQU     $00E9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
002D5D 002D5D -> $00E9                SCI2ACR1        EQU     $00E9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
002D5D 002D5D -> $00EA                SCI2CR1         EQU     $00EA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
002D5D 002D5D -> $00EA                SCI2ACR2        EQU     $00EA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
002D5D 002D5D -> $00EB                SCI2CR2         EQU     $00EB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
002D5D 002D5D -> $00EC                SCI2SR1         EQU     $00EC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
002D5D 002D5D -> $00ED                SCI2SR2         EQU     $00ED
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
002D5D 002D5D -> $00EE                SCI2DRH         EQU     $00EE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
002D5D 002D5D -> $00EF                SCI2DRL         EQU     $00EF
002D5D 002D5D -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
002D5D 002D5D -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
002D5D 002D5D -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
002D5D 002D5D -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
002D5D 002D5D -> $00F4                SPI1DRH         EQU     $00F4
002D5D 002D5D -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
002D5D 002D5D -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
002D5D 002D5D -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
002D5D 002D5D -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
002D5D 002D5D -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
002D5D 002D5D -> $00FC                SPI2DRH         EQU     $00FC
002D5D 002D5D -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
002D5D 002D5D -> $0100                FCLKDIV         EQU     $0100
002D5D 002D5D -> $0080                FDIVLD          EQU     $80
002D5D 002D5D -> $0040                FDIVLCK         EQU     $40
002D5D 002D5D -> $0020                FDIV5           EQU     $20
002D5D 002D5D -> $0010                FDIV4           EQU     $10
002D5D 002D5D -> $0008                FDIV3           EQU     $08
002D5D 002D5D -> $0004                FDIV2           EQU     $04
002D5D 002D5D -> $0002                FDIV1           EQU     $02
002D5D 002D5D -> $0001                FDIV0           EQU     $01
002D5D 002D5D -> $0101                FSEC            EQU     $0101
002D5D 002D5D -> $0080                KEYEN1          EQU     $80
002D5D 002D5D -> $0040                KEYEN2          EQU     $40
002D5D 002D5D -> $0020                RNV5            EQU     $20
002D5D 002D5D -> $0010                RNV4            EQU     $10
002D5D 002D5D -> $0008                RNV3            EQU     $08
002D5D 002D5D -> $0004                RNV2            EQU     $04
002D5D 002D5D -> $0002                SEC1            EQU     $02
002D5D 002D5D -> $0001                SEC0            EQU     $01
002D5D 002D5D -> $0102                FCCOBIX         EQU     $0102
002D5D 002D5D -> $0004                CCOBIX2         EQU     $04
002D5D 002D5D -> $0002                CCOBIX1         EQU     $02
002D5D 002D5D -> $0001                CCOBIX0         EQU     $01
                                      ;$0103 reserved
002D5D 002D5D -> $0104                FCNFG           EQU     $0104
002D5D 002D5D -> $0080                CCIE            EQU     $80
002D5D 002D5D -> $0010                IGNSF           EQU     $10
002D5D 002D5D -> $0002                FDFD            EQU     $02
002D5D 002D5D -> $0001                FSFD            EQU     $01
002D5D 002D5D -> $0105                FERCNFG         EQU     $0105
002D5D 002D5D -> $0002                DFDIE           EQU     $02
002D5D 002D5D -> $0001                SFDIE           EQU     $01
002D5D 002D5D -> $0106                FSTAT           EQU     $0106
002D5D 002D5D -> $0080                CCIF            EQU     $80
002D5D 002D5D -> $0020                ACCERR          EQU     $20
002D5D 002D5D -> $0010                FPVIOL          EQU     $10
002D5D 002D5D -> $0008                MGBUSY          EQU     $08
002D5D 002D5D -> $0002                MGSTAT1         EQU     $02
002D5D 002D5D -> $0001                MGSTAT0         EQU     $01
002D5D 002D5D -> $0107                FERSTAT         EQU     $0107
002D5D 002D5D -> $0002                DFDIF           EQU     $02
002D5D 002D5D -> $0001                SFDIF           EQU     $01
002D5D 002D5D -> $0108                FPROT           EQU     $0108
002D5D 002D5D -> $0080                FPOPEN          EQU     $80
002D5D 002D5D -> $0040                RNV6            EQU     $40
002D5D 002D5D -> $0020                FPHDIS          EQU     $20
002D5D 002D5D -> $0010                FPHS1           EQU     $10
002D5D 002D5D -> $0008                FPHS0           EQU     $08
002D5D 002D5D -> $0004                FPLDIS          EQU     $04
002D5D 002D5D -> $0002                FPLS1           EQU     $02
002D5D 002D5D -> $0001                FPLS0           EQU     $01
002D5D 002D5D -> $0109                DPROT           EQU     $0109
002D5D 002D5D -> $0109                EPROT           EQU     $0109
002D5D 002D5D -> $0080                DPOPEN          EQU     $80
002D5D 002D5D -> $0080                EPOPEN          EQU     $80
002D5D 002D5D -> $0008                EPDIS           EQU     $08
002D5D 002D5D -> $0004                EPS2            EQU     $04
002D5D 002D5D -> $0002                EPS1            EQU     $02
002D5D 002D5D -> $0001                EPS0            EQU     $01
002D5D 002D5D -> $010A                FCCOBHI         EQU     $010A
002D5D 002D5D -> $0080                CCOB15          EQU     $80
002D5D 002D5D -> $0040                CCOB14          EQU     $40
002D5D 002D5D -> $0020                CCOB13          EQU     $20
002D5D 002D5D -> $0010                CCOB12          EQU     $10
002D5D 002D5D -> $0008                CCOB11          EQU     $08
002D5D 002D5D -> $0004                CCOB10          EQU     $04
002D5D 002D5D -> $0002                CCOB9           EQU     $02
002D5D 002D5D -> $0001                CCOB8           EQU     $01
002D5D 002D5D -> $010B                FCCOBLO         EQU     $010B
002D5D 002D5D -> $0080                CCOB7           EQU     $80
002D5D 002D5D -> $0040                CCOB6           EQU     $40
002D5D 002D5D -> $0020                CCOB5           EQU     $20
002D5D 002D5D -> $0010                CCOB4           EQU     $10
002D5D 002D5D -> $0008                CCOB3           EQU     $08
002D5D 002D5D -> $0004                CCOB2           EQU     $04
002D5D 002D5D -> $0002                CCOB1           EQU     $02
002D5D 002D5D -> $0001                CCOB0           EQU     $01
                                      ;$010C to $010F reserved
002D5D 002D5D -> $0110                FOPT            EQU     $0110
002D5D 002D5D -> $0080                NV7             EQU     $80
002D5D 002D5D -> $0040                NV6             EQU     $40
002D5D 002D5D -> $0020                NV5             EQU     $20
002D5D 002D5D -> $0010                NV4             EQU     $10
002D5D 002D5D -> $0008                NV3             EQU     $08
002D5D 002D5D -> $0004                NV2             EQU     $04
002D5D 002D5D -> $0002                NV1             EQU     $02
002D5D 002D5D -> $0001                NV0             EQU     $01
                                      ;$0111 to $011F reserved
002D5D 002D5D -> $0120                IVBR            EQU     $0120
                                      ;$0121 to $013F reserved
002D5D 002D5D -> $0140                CANCTL0         EQU     $0140
002D5D 002D5D -> $0080                RXFRM           EQU     $80
002D5D 002D5D -> $0040                RXACT           EQU     $40
002D5D 002D5D -> $0020                CSWAI           EQU     $20
002D5D 002D5D -> $0010                SYNCH           EQU     $10
002D5D 002D5D -> $0008                TIMEN           EQU     $08 ;RENAMED
002D5D 002D5D -> $0004                WUPE            EQU     $04
002D5D 002D5D -> $0002                SLPRQ           EQU     $02
002D5D 002D5D -> $0001                INITRQ          EQU     $01
002D5D 002D5D -> $0141                CANCTL1         EQU     $0141
002D5D 002D5D -> $0080                CANE            EQU     $80
002D5D 002D5D -> $0040                CLKSRC          EQU     $40
002D5D 002D5D -> $0020                LOOPB           EQU     $20
002D5D 002D5D -> $0010                LISTEN          EQU     $10
002D5D 002D5D -> $0004                WUPM            EQU     $04
002D5D 002D5D -> $0002                SLPAK           EQU     $02
002D5D 002D5D -> $0001                INITAK          EQU     $01
002D5D 002D5D -> $0142                CANBTR0         EQU     $0142
002D5D 002D5D -> $0080                SJW1            EQU     $80
002D5D 002D5D -> $0040                SJW0            EQU     $40
002D5D 002D5D -> $0020                BRP5            EQU     $20
002D5D 002D5D -> $0010                BRP4            EQU     $10
002D5D 002D5D -> $0008                BRP3            EQU     $08
002D5D 002D5D -> $0004                BRP2            EQU     $04
002D5D 002D5D -> $0002                BRP1            EQU     $02
002D5D 002D5D -> $0001                BRP0            EQU     $01
002D5D 002D5D -> $0143                CANBTR1         EQU     $0143
002D5D 002D5D -> $0080                SAMP            EQU     $80
002D5D 002D5D -> $0040                TSEG22          EQU     $40
002D5D 002D5D -> $0020                TSEG21          EQU     $20
002D5D 002D5D -> $0010                TSEG20          EQU     $10
002D5D 002D5D -> $0008                TSEG13          EQU     $08
002D5D 002D5D -> $0004                TSEG12          EQU     $04
002D5D 002D5D -> $0002                TSEG11          EQU     $02
002D5D 002D5D -> $0001                TESG10          EQU     $01
002D5D 002D5D -> $0144                CANRFLG         EQU     $0144
002D5D 002D5D -> $0080                WUPIF           EQU     $80
002D5D 002D5D -> $0040                CSCIF           EQU     $40
002D5D 002D5D -> $0020                RSTAT1          EQU     $20
002D5D 002D5D -> $0010                RSTAT0          EQU     $10
002D5D 002D5D -> $0008                TSTAT1          EQU     $08
002D5D 002D5D -> $0004                TSTAT0          EQU     $04
002D5D 002D5D -> $0002                OVRIF           EQU     $02
002D5D 002D5D -> $0001                RXF             EQU     $01
002D5D 002D5D -> $0145                CANRIER         EQU     $0145
002D5D 002D5D -> $0080                WUPIE           EQU     $80
002D5D 002D5D -> $0040                CSCIE           EQU     $40
002D5D 002D5D -> $0020                RSTATE1         EQU     $20
002D5D 002D5D -> $0010                RSTATE0         EQU     $10
002D5D 002D5D -> $0008                TSTATE1         EQU     $08
002D5D 002D5D -> $0004                TSTATE0         EQU     $04
002D5D 002D5D -> $0002                OVRIE           EQU     $02
002D5D 002D5D -> $0001                RXFIE           EQU     $01
002D5D 002D5D -> $0146                CANTFLG         EQU     $0146
002D5D 002D5D -> $0004                TXE2            EQU     $04
002D5D 002D5D -> $0002                TXE1            EQU     $02
002D5D 002D5D -> $0001                TXE0            EQU     $01
002D5D 002D5D -> $0147                CANTIER         EQU     $0147
002D5D 002D5D -> $0004                TXEIE2          EQU     $04
002D5D 002D5D -> $0002                TXEIE1          EQU     $02
002D5D 002D5D -> $0001                TXEIE0          EQU     $01
002D5D 002D5D -> $0148                CANTARQ         EQU     $0148
002D5D 002D5D -> $0004                ABTRQ2          EQU     $04
002D5D 002D5D -> $0002                ABTRQ1          EQU     $02
002D5D 002D5D -> $0001                ABTRQ0          EQU     $01
002D5D 002D5D -> $0149                CANTAAK         EQU     $0149
002D5D 002D5D -> $0004                ABTAK2          EQU     $04
002D5D 002D5D -> $0002                ABTAK1          EQU     $02
002D5D 002D5D -> $0001                ABTAK0          EQU     $01
002D5D 002D5D -> $014A                CANTBSEL        EQU     $014A
002D5D 002D5D -> $0004                TX2             EQU     $04
002D5D 002D5D -> $0002                TX1             EQU     $02
002D5D 002D5D -> $0001                TX0             EQU     $01
002D5D 002D5D -> $014B                CANIDAC         EQU     $014B
002D5D 002D5D -> $0020                IDAM1           EQU     $20
002D5D 002D5D -> $0010                IDAM0           EQU     $10
002D5D 002D5D -> $0004                IDHIT2          EQU     $04
002D5D 002D5D -> $0002                IDHIT1          EQU     $02
002D5D 002D5D -> $0001                IDHIT0          EQU     $01
                                      ; $14c and $14d reserved
002D5D 002D5D -> $014E                CANRXERR        EQU     $014E
002D5D 002D5D -> $014F                CANTXERR        EQU     $014F
002D5D 002D5D -> $0150                CANIDAR0        EQU     $0150
002D5D 002D5D -> $0151                CANIDAR1        EQU     $0151
002D5D 002D5D -> $0152                CANIDAR2        EQU     $0152
002D5D 002D5D -> $0153                CANIDAR3        EQU     $0153
002D5D 002D5D -> $0154                CANIDMR0        EQU     $0154
002D5D 002D5D -> $0155                CANIDMR1        EQU     $0155
002D5D 002D5D -> $0156                CANIDMR2        EQU     $0156
002D5D 002D5D -> $0157                CANIDMR3        EQU     $0157
002D5D 002D5D -> $0158                CANIDAR4        EQU     $0158
002D5D 002D5D -> $0159                CANIDAR5        EQU     $0159
002D5D 002D5D -> $015A                CANIDAR6        EQU     $015A
002D5D 002D5D -> $015B                CANIDAR7        EQU     $015B
002D5D 002D5D -> $015C                CANIDMR4        EQU     $015C
002D5D 002D5D -> $015D                CANIDMR5        EQU     $015D
002D5D 002D5D -> $015E                CANIDMR6        EQU     $015E
002D5D 002D5D -> $015F                CANIDMR7        EQU     $015F
002D5D 002D5D -> $0160                CANRXIDR0       EQU     $0160
002D5D 002D5D -> $0161                CANRXIDR1       EQU     $0161
002D5D 002D5D -> $0162                CANRXIDR2       EQU     $0162
002D5D 002D5D -> $0163                CANRXIDR3       EQU     $0163
002D5D 002D5D -> $0164                CANRXDSR0       EQU     $0164
002D5D 002D5D -> $0165                CANRXDSR1       EQU     $0165
002D5D 002D5D -> $0166                CANRXDSR2       EQU     $0166
002D5D 002D5D -> $0167                CANRXDSR3       EQU     $0167
002D5D 002D5D -> $0168                CANRXDSR4       EQU     $0168
002D5D 002D5D -> $0169                CANRXDSR5       EQU     $0169
002D5D 002D5D -> $016A                CANRXDSR6       EQU     $016A
002D5D 002D5D -> $016B                CANRXDSR7       EQU     $016B
002D5D 002D5D -> $016C                CANRXDLR        EQU     $016C
                                      ;$016D reserved
002D5D 002D5D -> $016E                CANRTSRH        EQU     $016E
002D5D 002D5D -> $016F                CANRTSRL        EQU     $016F
002D5D 002D5D -> $0170                CANTXIDR0       EQU     $0170
002D5D 002D5D -> $0171                CANTXIDR1       EQU     $0171
002D5D 002D5D -> $0172                CANTXIDR2       EQU     $0172
002D5D 002D5D -> $0173                CANTXIDR3       EQU     $0173
002D5D 002D5D -> $0174                CANTXDSR0       EQU     $0174
002D5D 002D5D -> $0175                CANTXDSR1       EQU     $0175
002D5D 002D5D -> $0176                CANTXDSR2       EQU     $0176
002D5D 002D5D -> $0177                CANTXDSR3       EQU     $0177
002D5D 002D5D -> $0178                CANTXDSR4       EQU     $0178
002D5D 002D5D -> $0179                CANTXDSR5       EQU     $0179
002D5D 002D5D -> $017A                CANTXDSR6       EQU     $017A
002D5D 002D5D -> $017B                CANTXDSR7       EQU     $017B
002D5D 002D5D -> $017C                CANTXDLR        EQU     $017C
002D5D 002D5D -> $017D                CANTXTBPR       EQU     $017D
002D5D 002D5D -> $017E                CANTXTSRH       EQU     $017E
002D5D 002D5D -> $017F                CANTXTSRL       EQU     $017F
                                      ;$0180 to $023F reserved
002D5D 002D5D -> $0240                PTT             EQU     $0240
002D5D 002D5D -> $0080                PTT7            EQU     $80
002D5D 002D5D -> $0040                PTT6            EQU     $40
002D5D 002D5D -> $0020                PTT5            EQU     $20
002D5D 002D5D -> $0010                PTT4            EQU     $10
002D5D 002D5D -> $0008                PTT3            EQU     $08
002D5D 002D5D -> $0004                PTT2            EQU     $04
002D5D 002D5D -> $0002                PTT1            EQU     $02
002D5D 002D5D -> $0001                PTT0            EQU     $01
002D5D 002D5D -> $0080                PT7             EQU     $80
002D5D 002D5D -> $0040                PT6             EQU     $40
002D5D 002D5D -> $0020                PT5             EQU     $20
002D5D 002D5D -> $0010                PT4             EQU     $10
002D5D 002D5D -> $0008                PT3             EQU     $08
002D5D 002D5D -> $0004                PT2             EQU     $04
002D5D 002D5D -> $0002                PT1             EQU     $02
002D5D 002D5D -> $0001                PT0             EQU     $01
002D5D 002D5D -> $0241                PTIT            EQU     $0241
002D5D 002D5D -> $0080                PTIT7           EQU     $80
002D5D 002D5D -> $0040                PTIT6           EQU     $40
002D5D 002D5D -> $0020                PTIT5           EQU     $20
002D5D 002D5D -> $0010                PTIT4           EQU     $10
002D5D 002D5D -> $0008                PTIT3           EQU     $08
002D5D 002D5D -> $0004                PTIT2           EQU     $04
002D5D 002D5D -> $0002                PTIT1           EQU     $02
002D5D 002D5D -> $0001                PTIT0           EQU     $01
002D5D 002D5D -> $0242                DDRT            EQU     $0242
002D5D 002D5D -> $0080                DDRT7           EQU     $80
002D5D 002D5D -> $0040                DDRT6           EQU     $40
002D5D 002D5D -> $0020                DDRT5           EQU     $20
002D5D 002D5D -> $0010                DDRT4           EQU     $10
002D5D 002D5D -> $0008                DDRT3           EQU     $08
002D5D 002D5D -> $0004                DDRT2           EQU     $04
002D5D 002D5D -> $0002                DDRT1           EQU     $02
002D5D 002D5D -> $0001                DDRT0           EQU     $01
                                      ;$0243 reserved
002D5D 002D5D -> $0244                PERT            EQU     $0244
002D5D 002D5D -> $0080                PERT7           EQU     $80
002D5D 002D5D -> $0040                PERT6           EQU     $40
002D5D 002D5D -> $0020                PERT5           EQU     $20
002D5D 002D5D -> $0010                PERT4           EQU     $10
002D5D 002D5D -> $0008                PERT3           EQU     $08
002D5D 002D5D -> $0004                PERT2           EQU     $04
002D5D 002D5D -> $0002                PERT1           EQU     $02
002D5D 002D5D -> $0001                PERT0           EQU     $01
002D5D 002D5D -> $0245                PPST            EQU     $0245
002D5D 002D5D -> $0080                PPST7           EQU     $80
002D5D 002D5D -> $0040                PPST6           EQU     $40
002D5D 002D5D -> $0020                PPST5           EQU     $20
002D5D 002D5D -> $0010                PPST4           EQU     $10
002D5D 002D5D -> $0008                PPST3           EQU     $08
002D5D 002D5D -> $0004                PPST2           EQU     $04
002D5D 002D5D -> $0002                PPST1           EQU     $02
002D5D 002D5D -> $0001                PPST0           EQU     $01
                                      ;$0246 to 247 reserved
002D5D 002D5D -> $0248                PTS             EQU     $0248
002D5D 002D5D -> $0080                PTS7            EQU     $80
002D5D 002D5D -> $0040                PTS6            EQU     $40
002D5D 002D5D -> $0020                PTS5            EQU     $20
002D5D 002D5D -> $0010                PTS4            EQU     $10
002D5D 002D5D -> $0008                PTS3            EQU     $08
002D5D 002D5D -> $0004                PTS2            EQU     $04
002D5D 002D5D -> $0002                PTS1            EQU     $02
002D5D 002D5D -> $0001                PTS0            EQU     $01
002D5D 002D5D -> $0080                PS7             EQU     $80
002D5D 002D5D -> $0040                PS6             EQU     $40
002D5D 002D5D -> $0020                PS5             EQU     $20
002D5D 002D5D -> $0010                PS4             EQU     $10
002D5D 002D5D -> $0008                PS3             EQU     $08
002D5D 002D5D -> $0004                PS2             EQU     $04
002D5D 002D5D -> $0002                PS1             EQU     $02
002D5D 002D5D -> $0001                PS0             EQU     $01
002D5D 002D5D -> $0249                PTIS            EQU     $0249
002D5D 002D5D -> $0080                PTIS7           EQU     $80
002D5D 002D5D -> $0040                PTIS6           EQU     $40
002D5D 002D5D -> $0020                PTIS5           EQU     $20
002D5D 002D5D -> $0010                PTIS4           EQU     $10
002D5D 002D5D -> $0008                PTIS3           EQU     $08
002D5D 002D5D -> $0004                PTIS2           EQU     $04
002D5D 002D5D -> $0002                PTIS1           EQU     $02
002D5D 002D5D -> $0001                PTIS0           EQU     $01
002D5D 002D5D -> $024A                DDRS            EQU     $024A
002D5D 002D5D -> $0080                DDRS7           EQU     $80
002D5D 002D5D -> $0040                DDRS6           EQU     $40
002D5D 002D5D -> $0020                DDRS5           EQU     $20
002D5D 002D5D -> $0010                DDRS4           EQU     $10
002D5D 002D5D -> $0008                DDRS3           EQU     $08
002D5D 002D5D -> $0004                DDRS2           EQU     $04
002D5D 002D5D -> $0002                DDRS1           EQU     $02
002D5D 002D5D -> $0001                DDRS0           EQU     $01
                                      ;$024B reserved
002D5D 002D5D -> $024C                PERS            EQU     $024C
002D5D 002D5D -> $0080                PERS7           EQU     $80
002D5D 002D5D -> $0040                PERS6           EQU     $40
002D5D 002D5D -> $0020                PERS5           EQU     $20
002D5D 002D5D -> $0010                PERS4           EQU     $10
002D5D 002D5D -> $0008                PERS3           EQU     $08
002D5D 002D5D -> $0004                PERS2           EQU     $04
002D5D 002D5D -> $0002                PERS1           EQU     $02
002D5D 002D5D -> $0001                PERS0           EQU     $01
002D5D 002D5D -> $024D                PPSS            EQU     $024D
002D5D 002D5D -> $0080                PPSS7           EQU     $80
002D5D 002D5D -> $0040                PPSS6           EQU     $40
002D5D 002D5D -> $0020                PPSS5           EQU     $20
002D5D 002D5D -> $0010                PPSS4           EQU     $10
002D5D 002D5D -> $0008                PPSS3           EQU     $08
002D5D 002D5D -> $0004                PPSS2           EQU     $04
002D5D 002D5D -> $0002                PPSS1           EQU     $02
002D5D 002D5D -> $0001                PPSS0           EQU     $01
002D5D 002D5D -> $024E                WOMS            EQU     $024E
002D5D 002D5D -> $0080                WOMS7           EQU     $80
002D5D 002D5D -> $0040                WOMS6           EQU     $40
002D5D 002D5D -> $0020                WOMS5           EQU     $20
002D5D 002D5D -> $0010                WOMS4           EQU     $10
002D5D 002D5D -> $0008                WOMS3           EQU     $08
002D5D 002D5D -> $0004                WOMS2           EQU     $04
002D5D 002D5D -> $0002                WOMS1           EQU     $02
002D5D 002D5D -> $0001                WOMS0           EQU     $01
002D5D 002D5D -> $024F                PRR0            EQU     $024F
002D5D 002D5D -> $0080                PRR0P3          EQU     $80
002D5D 002D5D -> $0040                PRR0P2          EQU     $40
002D5D 002D5D -> $0020                PRR0T31         EQU     $20
002D5D 002D5D -> $0010                PRR0T30         EQU     $10
002D5D 002D5D -> $0008                PRR0T21         EQU     $08
002D5D 002D5D -> $0004                PRR0T20         EQU     $04
002D5D 002D5D -> $0002                PRR0S1          EQU     $02
002D5D 002D5D -> $0001                PRR0S0          EQU     $01
002D5D 002D5D -> $0250                PTM             EQU     $0250
002D5D 002D5D -> $0008                PTM3            EQU     $08
002D5D 002D5D -> $0004                PTM2            EQU     $04
002D5D 002D5D -> $0002                PTM1            EQU     $02
002D5D 002D5D -> $0001                PTM0            EQU     $01
002D5D 002D5D -> $0008                PM3             EQU     $08
002D5D 002D5D -> $0004                PM2             EQU     $04
002D5D 002D5D -> $0002                PM1             EQU     $02
002D5D 002D5D -> $0001                PM0             EQU     $01
002D5D 002D5D -> $0251                PTIM            EQU     $0251
002D5D 002D5D -> $0008                PTIM3           EQU     $08
002D5D 002D5D -> $0004                PTIM2           EQU     $04
002D5D 002D5D -> $0002                PTIM1           EQU     $02
002D5D 002D5D -> $0001                PTIM0           EQU     $01
002D5D 002D5D -> $0252                DDRM            EQU     $0252
002D5D 002D5D -> $0008                DDRM3           EQU     $08
002D5D 002D5D -> $0004                DDRM2           EQU     $04
002D5D 002D5D -> $0002                DDRM1           EQU     $02
002D5D 002D5D -> $0001                DDRM0           EQU     $01
                                      ;$0253 reserved
002D5D 002D5D -> $0254                PERM            EQU     $0254
002D5D 002D5D -> $0008                PERM3           EQU     $08
002D5D 002D5D -> $0004                PERM2           EQU     $04
002D5D 002D5D -> $0002                PERM1           EQU     $02
002D5D 002D5D -> $0001                PERM0           EQU     $01
002D5D 002D5D -> $0255                PPSM            EQU     $0255
002D5D 002D5D -> $0008                PPSM3           EQU     $08
002D5D 002D5D -> $0004                PPSM2           EQU     $04
002D5D 002D5D -> $0002                PPSM1           EQU     $02
002D5D 002D5D -> $0001                PPSM0           EQU     $01
002D5D 002D5D -> $0256                WOMM            EQU     $0256
002D5D 002D5D -> $0008                WOMM3           EQU     $08
002D5D 002D5D -> $0004                WOMM2           EQU     $04
002D5D 002D5D -> $0002                WOMM1           EQU     $02
002D5D 002D5D -> $0001                WOMM0           EQU     $01
002D5D 002D5D -> $0257                PKGCR           EQU     $0257
002D5D 002D5D -> $0080                APICLKS7        EQU     $80
002D5D 002D5D -> $0004                PKGCR2          EQU     $04
002D5D 002D5D -> $0002                PKGCR1          EQU     $02
002D5D 002D5D -> $0001                PKGCR0          EQU     $01
002D5D 002D5D -> $0258                PTP             EQU     $0258
002D5D 002D5D -> $0080                PTP7            EQU     $80
002D5D 002D5D -> $0040                PTP6            EQU     $40
002D5D 002D5D -> $0020                PTP5            EQU     $20
002D5D 002D5D -> $0010                PTP4            EQU     $10
002D5D 002D5D -> $0008                PTP3            EQU     $08
002D5D 002D5D -> $0004                PTP2            EQU     $04
002D5D 002D5D -> $0002                PTP1            EQU     $02
002D5D 002D5D -> $0001                PTP0            EQU     $01
002D5D 002D5D -> $0080                PP7             EQU     $80
002D5D 002D5D -> $0040                PP6             EQU     $40
002D5D 002D5D -> $0020                PP5             EQU     $20
002D5D 002D5D -> $0010                PP4             EQU     $10
002D5D 002D5D -> $0008                PP3             EQU     $08
002D5D 002D5D -> $0004                PP2             EQU     $04
002D5D 002D5D -> $0002                PP1             EQU     $02
002D5D 002D5D -> $0001                PP0             EQU     $01
002D5D 002D5D -> $0259                PTIP            EQU     $0259
002D5D 002D5D -> $0080                PTIP7           EQU     $80
002D5D 002D5D -> $0040                PTIP6           EQU     $40
002D5D 002D5D -> $0020                PTIP5           EQU     $20
002D5D 002D5D -> $0010                PTIP4           EQU     $10
002D5D 002D5D -> $0008                PTIP3           EQU     $08
002D5D 002D5D -> $0004                PTIP2           EQU     $04
002D5D 002D5D -> $0002                PTIP1           EQU     $02
002D5D 002D5D -> $0001                PTIP0           EQU     $01
002D5D 002D5D -> $025A                DDRP            EQU     $025A
002D5D 002D5D -> $0080                DDRP7           EQU     $80
002D5D 002D5D -> $0040                DDRP6           EQU     $40
002D5D 002D5D -> $0020                DDRP5           EQU     $20
002D5D 002D5D -> $0010                DDRP4           EQU     $10
002D5D 002D5D -> $0008                DDRP3           EQU     $08
002D5D 002D5D -> $0004                DDRP2           EQU     $04
002D5D 002D5D -> $0002                DDRP1           EQU     $02
002D5D 002D5D -> $0001                DDRP0           EQU     $01
                                      ;$025B reserved
002D5D 002D5D -> $025C                PERP            EQU     $025C
002D5D 002D5D -> $0080                PERP7           EQU     $80
002D5D 002D5D -> $0040                PERP6           EQU     $40
002D5D 002D5D -> $0020                PERP5           EQU     $20
002D5D 002D5D -> $0010                PERP4           EQU     $10
002D5D 002D5D -> $0008                PERP3           EQU     $08
002D5D 002D5D -> $0004                PERP2           EQU     $04
002D5D 002D5D -> $0002                PERP1           EQU     $02
002D5D 002D5D -> $0001                PERP0           EQU     $01
002D5D 002D5D -> $025D                PPSP            EQU     $025D
002D5D 002D5D -> $0080                PPSP7           EQU     $80
002D5D 002D5D -> $0040                PPSP6           EQU     $40
002D5D 002D5D -> $0020                PPSP5           EQU     $20
002D5D 002D5D -> $0010                PPSP4           EQU     $10
002D5D 002D5D -> $0008                PPSP3           EQU     $08
002D5D 002D5D -> $0004                PPSP2           EQU     $04
002D5D 002D5D -> $0002                PPSP1           EQU     $02
002D5D 002D5D -> $0001                PPSP0           EQU     $01
002D5D 002D5D -> $025E                PIEP            EQU     $025E
002D5D 002D5D -> $0080                PIEP7           EQU     $80
002D5D 002D5D -> $0040                PIEP6           EQU     $40
002D5D 002D5D -> $0020                PIEP5           EQU     $20
002D5D 002D5D -> $0010                PIEP4           EQU     $10
002D5D 002D5D -> $0008                PIEP3           EQU     $08
002D5D 002D5D -> $0004                PIEP2           EQU     $04
002D5D 002D5D -> $0002                PIEP1           EQU     $02
002D5D 002D5D -> $0001                PIEP0           EQU     $01
002D5D 002D5D -> $025F                PIFP            EQU     $025F
002D5D 002D5D -> $0080                PIFP7           EQU     $80
002D5D 002D5D -> $0040                PIFP6           EQU     $40
002D5D 002D5D -> $0020                PIFP5           EQU     $20
002D5D 002D5D -> $0010                PIFP4           EQU     $10
002D5D 002D5D -> $0008                PIFP3           EQU     $08
002D5D 002D5D -> $0004                PIFP2           EQU     $04
002D5D 002D5D -> $0002                PIFP1           EQU     $02
002D5D 002D5D -> $0001                PIFP0           EQU     $01
002D5D 002D5D -> $0260                ACMPC           EQU     $260
002D5D 002D5D -> $0080                ACIE            EQU     $80
002D5D 002D5D -> $0040                ACOPE           EQU     $40
002D5D 002D5D -> $0020                ACICE           EQU     $20
002D5D 002D5D -> $0008                ACMOD1          EQU     $08
002D5D 002D5D -> $0004                ACMOD0          EQU     $04
002D5D 002D5D -> $0001                ACE             EQU     $01
002D5D 002D5D -> $0261                ACMPS           EQU     $261
002D5D 002D5D -> $0080                ACIF            EQU     $80
002D5D 002D5D -> $0040                ACO             EQU     $40
                                      ;$0262 to $0267 reserved
002D5D 002D5D -> $0268                PTJ             EQU     $0268
002D5D 002D5D -> $0080                PTJ7            EQU     $80
002D5D 002D5D -> $0040                PTJ6            EQU     $40
002D5D 002D5D -> $0020                PTJ5            EQU     $20
002D5D 002D5D -> $0010                PTJ4            EQU     $10
002D5D 002D5D -> $0008                PTJ3            EQU     $08
002D5D 002D5D -> $0004                PTJ2            EQU     $04
002D5D 002D5D -> $0002                PTJ1            EQU     $02
002D5D 002D5D -> $0001                PTJ0            EQU     $01
002D5D 002D5D -> $0080                PJ7             EQU     $80
002D5D 002D5D -> $0040                PJ6             EQU     $40
002D5D 002D5D -> $0020                PJ5             EQU     $20
002D5D 002D5D -> $0010                PJ4             EQU     $10
002D5D 002D5D -> $0008                PJ3             EQU     $08
002D5D 002D5D -> $0004                PJ2             EQU     $04
002D5D 002D5D -> $0002                PJ1             EQU     $02
002D5D 002D5D -> $0001                PJ0             EQU     $01
002D5D 002D5D -> $0269                PTIJ            EQU     $0269
002D5D 002D5D -> $0080                PTIJ7           EQU     $80
002D5D 002D5D -> $0040                PTIJ6           EQU     $40
002D5D 002D5D -> $0020                PTIJ5           EQU     $20
002D5D 002D5D -> $0010                PTIJ4           EQU     $10
002D5D 002D5D -> $0008                PTIJ3           EQU     $08
002D5D 002D5D -> $0004                PTIJ2           EQU     $04
002D5D 002D5D -> $0002                PTIJ1           EQU     $02
002D5D 002D5D -> $0001                PTIJ0           EQU     $01
002D5D 002D5D -> $026A                DDRJ            EQU     $026A
002D5D 002D5D -> $0080                DDRJ7           EQU     $80
002D5D 002D5D -> $0040                DDRJ6           EQU     $40
002D5D 002D5D -> $0020                DDRJ5           EQU     $20
002D5D 002D5D -> $0010                DDRJ4           EQU     $10
002D5D 002D5D -> $0008                DDRJ3           EQU     $08
002D5D 002D5D -> $0004                DDRJ2           EQU     $04
002D5D 002D5D -> $0002                DDRJ1           EQU     $02
002D5D 002D5D -> $0001                DDRJ0           EQU     $01
                                      ;$026B reserved
002D5D 002D5D -> $026C                PERJ            EQU     $026C
002D5D 002D5D -> $0080                PERJ7           EQU     $80
002D5D 002D5D -> $0040                PERJ6           EQU     $40
002D5D 002D5D -> $0020                PERJ5           EQU     $20
002D5D 002D5D -> $0010                PERJ4           EQU     $10
002D5D 002D5D -> $0008                PERJ3           EQU     $08
002D5D 002D5D -> $0004                PERJ2           EQU     $04
002D5D 002D5D -> $0002                PERJ1           EQU     $02
002D5D 002D5D -> $0001                PERJ0           EQU     $01
002D5D 002D5D -> $026D                PPSJ            EQU     $026D
002D5D 002D5D -> $0080                PPSJ7           EQU     $80
002D5D 002D5D -> $0040                PPSJ6           EQU     $40
002D5D 002D5D -> $0020                PPSJ5           EQU     $20
002D5D 002D5D -> $0010                PPSJ4           EQU     $10
002D5D 002D5D -> $0008                PPSJ3           EQU     $08
002D5D 002D5D -> $0004                PPSJ2           EQU     $04
002D5D 002D5D -> $0002                PPSJ1           EQU     $02
002D5D 002D5D -> $0001                PPSJ0           EQU     $01
002D5D 002D5D -> $026E                PIEJ            EQU     $026E
002D5D 002D5D -> $0080                PIEJ7           EQU     $80
002D5D 002D5D -> $0040                PIEJ6           EQU     $40
002D5D 002D5D -> $0020                PIEJ5           EQU     $20
002D5D 002D5D -> $0010                PIEJ4           EQU     $10
002D5D 002D5D -> $0008                PIEJ3           EQU     $08
002D5D 002D5D -> $0004                PIEJ2           EQU     $04
002D5D 002D5D -> $0002                PIEJ1           EQU     $02
002D5D 002D5D -> $0001                PIEJ0           EQU     $01
002D5D 002D5D -> $026F                PIFJ            EQU     $026F
002D5D 002D5D -> $0080                PIFJ7           EQU     $80
002D5D 002D5D -> $0040                PIFJ6           EQU     $40
002D5D 002D5D -> $0020                PIFJ5           EQU     $20
002D5D 002D5D -> $0010                PIFJ4           EQU     $10
002D5D 002D5D -> $0008                PIFJ3           EQU     $08
002D5D 002D5D -> $0004                PIFJ2           EQU     $04
002D5D 002D5D -> $0002                PIFJ1           EQU     $02
002D5D 002D5D -> $0001                PIFJ0           EQU     $01
002D5D 002D5D -> $0270                PT0AD           EQU     $0270
002D5D 002D5D -> $0080                PT0AD7          EQU     $80
002D5D 002D5D -> $0040                PT0AD6          EQU     $40
002D5D 002D5D -> $0020                PT0AD5          EQU     $20
002D5D 002D5D -> $0010                PT0AD4          EQU     $10
002D5D 002D5D -> $0008                PT0AD3          EQU     $08
002D5D 002D5D -> $0004                PT0AD2          EQU     $04
002D5D 002D5D -> $0002                PT0AD1          EQU     $02
002D5D 002D5D -> $0001                PT0AD0          EQU     $01
002D5D 002D5D -> $0271                PT1AD           EQU     $0271
002D5D 002D5D -> $0080                PT1AD7          EQU     $80
002D5D 002D5D -> $0040                PT1AD6          EQU     $40
002D5D 002D5D -> $0020                PT1AD5          EQU     $20
002D5D 002D5D -> $0010                PT1AD4          EQU     $10
002D5D 002D5D -> $0008                PT1AD3          EQU     $08
002D5D 002D5D -> $0004                PT1AD2          EQU     $04
002D5D 002D5D -> $0002                PT1AD1          EQU     $02
002D5D 002D5D -> $0001                PT1AD0          EQU     $01
002D5D 002D5D -> $0272                PTI0AD          EQU     $0272
002D5D 002D5D -> $0080                PTI0AD7         EQU     $80
002D5D 002D5D -> $0040                PTI0AD6         EQU     $40
002D5D 002D5D -> $0020                PTI0AD5         EQU     $20
002D5D 002D5D -> $0010                PTI0AD4         EQU     $10
002D5D 002D5D -> $0008                PTI0AD3         EQU     $08
002D5D 002D5D -> $0004                PTI0AD2         EQU     $04
002D5D 002D5D -> $0002                PTI0AD1         EQU     $02
002D5D 002D5D -> $0001                PTI0AD0         EQU     $01
002D5D 002D5D -> $0273                PTI1AD          EQU     $0273
002D5D 002D5D -> $0080                PTI1AD7         EQU     $80
002D5D 002D5D -> $0040                PTI1AD6         EQU     $40
002D5D 002D5D -> $0020                PTI1AD5         EQU     $20
002D5D 002D5D -> $0010                PTI1AD4         EQU     $10
002D5D 002D5D -> $0008                PTI1AD3         EQU     $08
002D5D 002D5D -> $0004                PTI1AD2         EQU     $04
002D5D 002D5D -> $0002                PTI1AD1         EQU     $02
002D5D 002D5D -> $0001                PTI1AD0         EQU     $01
002D5D 002D5D -> $0274                DDR0AD          EQU     $0274
002D5D 002D5D -> $0080                DDR0AD7         EQU     $80
002D5D 002D5D -> $0040                DDR0AD6         EQU     $40
002D5D 002D5D -> $0020                DDR0AD5         EQU     $20
002D5D 002D5D -> $0010                DDR0AD4         EQU     $10
002D5D 002D5D -> $0008                DDR0AD3         EQU     $08
002D5D 002D5D -> $0004                DDR0AD2         EQU     $04
002D5D 002D5D -> $0002                DDR0AD1         EQU     $02
002D5D 002D5D -> $0001                DDR0AD0         EQU     $01
002D5D 002D5D -> $0275                DDR1AD          EQU     $0275
002D5D 002D5D -> $0080                DDR1AD7         EQU     $80
002D5D 002D5D -> $0040                DDR1AD6         EQU     $40
002D5D 002D5D -> $0020                DDR1AD5         EQU     $20
002D5D 002D5D -> $0010                DDR1AD4         EQU     $10
002D5D 002D5D -> $0008                DDR1AD3         EQU     $08
002D5D 002D5D -> $0004                DDR1AD2         EQU     $04
002D5D 002D5D -> $0002                DDR1AD1         EQU     $02
002D5D 002D5D -> $0001                DDR1AD0         EQU     $01
002D5D 002D5D -> $0276                RVACTL          EQU     $0276
002D5D 002D5D -> $0001                RVAON           EQU     $01
002D5D 002D5D -> $0277                PRR1            EQU     $0277
002D5D 002D5D -> $0001                PRR1AN          EQU     $01
002D5D 002D5D -> $0278                PER0AD          EQU     $0278
002D5D 002D5D -> $0080                PER0AD7         EQU     $80
002D5D 002D5D -> $0040                PER0AD6         EQU     $40
002D5D 002D5D -> $0020                PER0AD5         EQU     $20
002D5D 002D5D -> $0010                PER0AD4         EQU     $10
002D5D 002D5D -> $0008                PER0AD3         EQU     $08
002D5D 002D5D -> $0004                PER0AD2         EQU     $04
002D5D 002D5D -> $0002                PER0AD1         EQU     $02
002D5D 002D5D -> $0001                PER0AD0         EQU     $01
002D5D 002D5D -> $0279                PER1AD          EQU     $0279
002D5D 002D5D -> $0080                PER1AD7         EQU     $80
002D5D 002D5D -> $0040                PER1AD6         EQU     $40
002D5D 002D5D -> $0020                PER1AD5         EQU     $20
002D5D 002D5D -> $0010                PER1AD4         EQU     $10
002D5D 002D5D -> $0008                PER1AD3         EQU     $08
002D5D 002D5D -> $0004                PER1AD2         EQU     $04
002D5D 002D5D -> $0002                PER1AD1         EQU     $02
002D5D 002D5D -> $0001                PER1AD0         EQU     $01
002D5D 002D5D -> $027A                PPS0AD          EQU     $027A
002D5D 002D5D -> $0080                PPS0AD7         EQU     $80
002D5D 002D5D -> $0040                PPS0AD6         EQU     $40
002D5D 002D5D -> $0020                PPS0AD5         EQU     $20
002D5D 002D5D -> $0010                PPS0AD4         EQU     $10
002D5D 002D5D -> $0008                PPS0AD3         EQU     $08
002D5D 002D5D -> $0004                PPS0AD2         EQU     $04
002D5D 002D5D -> $0002                PPS0AD1         EQU     $02
002D5D 002D5D -> $0001                PPS0AD0         EQU     $01
002D5D 002D5D -> $027B                PPS1AD          EQU     $027B
002D5D 002D5D -> $0080                PPS1AD7         EQU     $80
002D5D 002D5D -> $0040                PPS1AD6         EQU     $40
002D5D 002D5D -> $0020                PPS1AD5         EQU     $20
002D5D 002D5D -> $0010                PPS1AD4         EQU     $10
002D5D 002D5D -> $0008                PPS1AD3         EQU     $08
002D5D 002D5D -> $0004                PPS1AD2         EQU     $04
002D5D 002D5D -> $0002                PPS1AD1         EQU     $02
002D5D 002D5D -> $0001                PPS1AD0         EQU     $01
002D5D 002D5D -> $027C                PIE0AD          EQU     $027C
002D5D 002D5D -> $0080                PIE0AD7         EQU     $80
002D5D 002D5D -> $0040                PIE0AD6         EQU     $40
002D5D 002D5D -> $0020                PIE0AD5         EQU     $20
002D5D 002D5D -> $0010                PIE0AD4         EQU     $10
002D5D 002D5D -> $0008                PIE0AD3         EQU     $08
002D5D 002D5D -> $0004                PIE0AD2         EQU     $04
002D5D 002D5D -> $0002                PIE0AD1         EQU     $02
002D5D 002D5D -> $0001                PIE0AD0         EQU     $01
002D5D 002D5D -> $027D                PIE1AD          EQU     $027D
002D5D 002D5D -> $0080                PIE1AD7         EQU     $80
002D5D 002D5D -> $0040                PIE1AD6         EQU     $40
002D5D 002D5D -> $0020                PIE1AD5         EQU     $20
002D5D 002D5D -> $0010                PIE1AD4         EQU     $10
002D5D 002D5D -> $0008                PIE1AD3         EQU     $08
002D5D 002D5D -> $0004                PIE1AD2         EQU     $04
002D5D 002D5D -> $0002                PIE1AD1         EQU     $02
002D5D 002D5D -> $0001                PIE1AD0         EQU     $01
002D5D 002D5D -> $027E                PIF0AD          EQU     $027E
002D5D 002D5D -> $0080                PIF0AD7         EQU     $80
002D5D 002D5D -> $0040                PIF0AD6         EQU     $40
002D5D 002D5D -> $0020                PIF0AD5         EQU     $20
002D5D 002D5D -> $0010                PIF0AD4         EQU     $10
002D5D 002D5D -> $0008                PIF0AD3         EQU     $08
002D5D 002D5D -> $0004                PIF0AD2         EQU     $04
002D5D 002D5D -> $0002                PIF0AD1         EQU     $02
002D5D 002D5D -> $0001                PIF0AD0         EQU     $01
002D5D 002D5D -> $027F                PIF1AD          EQU     $027F
002D5D 002D5D -> $0080                PIF1AD7         EQU     $80
002D5D 002D5D -> $0040                PIF1AD6         EQU     $40
002D5D 002D5D -> $0020                PIF1AD5         EQU     $20
002D5D 002D5D -> $0010                PIF1AD4         EQU     $10
002D5D 002D5D -> $0008                PIF1AD3         EQU     $08
002D5D 002D5D -> $0004                PIF1AD2         EQU     $04
002D5D 002D5D -> $0002                PIF1AD1         EQU     $02
002D5D 002D5D -> $0001                PIF1AD0         EQU     $01
                                      ;$0280 to $02F0 reserved
002D5D 002D5D -> $02F1                CPMULVCTL       EQU     $02F1
002D5D 002D5D -> $0004                LVDS            EQU     $04
002D5D 002D5D -> $0002                LVIE            EQU     $02
002D5D 002D5D -> $0001                LVIF            EQU     $01
002D5D 002D5D -> $02F2                CPMUAPICTL      EQU     $02F2
002D5D 002D5D -> $0080                APICLK          EQU     $80
002D5D 002D5D -> $0010                APIES           EQU     $10
002D5D 002D5D -> $0008                APIEA           EQU     $08
002D5D 002D5D -> $0004                APIFE           EQU     $04
002D5D 002D5D -> $0002                APIE            EQU     $02
002D5D 002D5D -> $0001                APIF            EQU     $01
002D5D 002D5D -> $02F3                CPMUAPITR       EQU     $02F3
002D5D 002D5D -> $0080                APITR5          EQU     $80
002D5D 002D5D -> $0040                APITR4          EQU     $40
002D5D 002D5D -> $0020                APITR3          EQU     $20
002D5D 002D5D -> $0010                APITR2          EQU     $10
002D5D 002D5D -> $0008                APITR1          EQU     $08
002D5D 002D5D -> $0004                APITR0          EQU     $04
002D5D 002D5D -> $02F4                CPMUAPIRH       EQU     $02F4
002D5D 002D5D -> $0080                APIR15          EQU     $80
002D5D 002D5D -> $0040                APIR14          EQU     $40
002D5D 002D5D -> $0020                APIR13          EQU     $20
002D5D 002D5D -> $0010                APIR12          EQU     $10
002D5D 002D5D -> $0008                APIR11          EQU     $08
002D5D 002D5D -> $0004                APIR10          EQU     $04
002D5D 002D5D -> $0002                APIR9           EQU     $02
002D5D 002D5D -> $0001                APIR8           EQU     $01
002D5D 002D5D -> $02F5                CPMUAPIRL       EQU     $02F5
002D5D 002D5D -> $0080                APIR7           EQU     $80
002D5D 002D5D -> $0040                APIR6           EQU     $40
002D5D 002D5D -> $0020                APIR5           EQU     $20
002D5D 002D5D -> $0010                APIR4           EQU     $10
002D5D 002D5D -> $0008                APIR3           EQU     $08
002D5D 002D5D -> $0004                APIR2           EQU     $04
002D5D 002D5D -> $0002                APIR1           EQU     $02
002D5D 002D5D -> $0001                APIR0           EQU     $01
                                      ;$02F6 to $02F7 reserved
002D5D 002D5D -> $02F8                CPMUIRCTRIMH    EQU     $02F8
002D5D 002D5D -> $0080                TCTRIM3         EQU     $80
002D5D 002D5D -> $0040                TCTRIM2         EQU     $40
002D5D 002D5D -> $0020                TCTRIM1         EQU     $20
002D5D 002D5D -> $0010                TCTRIM0         EQU     $10
002D5D 002D5D -> $0002                IRCTRIM9        EQU     $02
002D5D 002D5D -> $0001                IRCTRIM8        EQU     $01
002D5D 002D5D -> $02F9                CPMUIRCTRIML    EQU     $02F9
002D5D 002D5D -> $0080                IRCTRIM7        EQU     $80
002D5D 002D5D -> $0040                IRCTRIM6        EQU     $40
002D5D 002D5D -> $0020                IRCTRIM5        EQU     $20
002D5D 002D5D -> $0010                IRCTRIM4        EQU     $10
002D5D 002D5D -> $0008                IRCTRIM3        EQU     $08
002D5D 002D5D -> $0004                IRCTRIM2        EQU     $04
002D5D 002D5D -> $0002                IRCTRIM1        EQU     $02
002D5D 002D5D -> $0001                IRCTRIM0        EQU     $01
002D5D 002D5D -> $02FA                CPMUOSC         EQU     $02FA
002D5D 002D5D -> $0080                OSCE            EQU     $80
002D5D 002D5D -> $0020                OSCPINS_EN      EQU     $20
002D5D 002D5D -> $02FB                CPMUPROT        EQU     $02FB
002D5D 002D5D -> $0001                PROT            EQU     $01
                                      ;$02FC to $03BF reserved
002D5D 002D5D -> $03C0                DAC0CTL         EQU     $03C0
002D5D 002D5D -> $0080                FVR             EQU     $80
002D5D 002D5D -> $0040                DRIVE           EQU     $40
002D5D 002D5D -> $0004                MODE2           EQU     $04
002D5D 002D5D -> $0002                MODE1           EQU     $02
002D5D 002D5D -> $0001                MODE0           EQU     $01
                                      ;$03C1 reserved
002D5D 002D5D -> $03C2                DAC0VOLTAGE     EQU     $03C2
002D5D 002D5D -> $0080                VOLTAGE7        EQU     $80
002D5D 002D5D -> $0040                VOLTAGE6        EQU     $40
002D5D 002D5D -> $0020                VOLTAGE5        EQU     $20
002D5D 002D5D -> $0010                VOLTAGE4        EQU     $10
002D5D 002D5D -> $0008                VOLTAGE3        EQU     $08
002D5D 002D5D -> $0004                VOLTAGE2        EQU     $04
002D5D 002D5D -> $0002                VOLTAGE1        EQU     $02
002D5D 002D5D -> $0001                VOLTAGE0        EQU     $01
                                      ;$03C3 to $03C7 reserved
002D5D 002D5D -> $03C8                DAC1CTL         EQU     $03C8
                                      ;FVR            EQU     $80
                                      ;DRIVE          EQU     $40
                                      ;MODE2          EQU     $04
                                      ;MODE1          EQU     $02
                                      ;MODE0          EQU     $01
                                      ;$03C9 reserved
002D5D 002D5D -> $03CA                DAC1VOLTAGE     EQU     $03CA
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (AriCalculator)                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module module performs all the necessary steps to initialize the    #
                                      ;#    device after each reset.                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                      S12G
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |    EEPROM   |
                                      ;                +-------------+ $0400+EEPROM_SIZE
                                      ;                |/////////////|
                                      ;                +-------------+ $4000-RAM_SIZE
                                      ;                |     RAM     |
                                      ;                +-------------+ $4000
                                      ;                |             |
                                      ;                |    Flash    |
                                      ;                |   Page D    |
                                      ;                |             |
                                      ;                +-------------+ $8000
                                      ;                |             |
                                      ;                |    Flash    |
                                      ;                |   Page E/   |
                                      ;                |   window    |
                                      ;                +-------------+ $C000
                                      ;                |             |
                                      ;                |    Code     |
                                      ;                |   Page F    |
                                      ;                |             |
                                      ;                +-------------+ $10000
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                      S12G
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $4000-RAM_SIZE
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $3F80
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $4000
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;MCU (S12G32, S12G64, S12G128, or S12G240)
                                      ;RAM or flash
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Sizes:
002D5D 002D5D -> $0400                MMAP_REG_SIZE           EQU      $0400  ;  1k
002D5D 002D5D -> $1000                MMAP_EEPROM_SIZE        EQU      $1000  ;  4k
002D5D 002D5D -> $2C00                MMAP_RAM_SIZE           EQU      $2C00  ; 11k
002D5D 002D5D -> $3C000               MMAP_FLASH_SIZE         EQU     $3C000  ;240k
                                      ;# Memory Locations
002D5D 002D5D -> $0000                MMAP_REG_START          EQU     $0000
002D5D 002D5D -> $0400                MMAP_REG_END            EQU     $0400
002D5D 002D5D -> $0400                MMAP_EEPROM_START       EQU     $0400
002D5D 002D5D -> $1400                MMAP_EEPROM_END         EQU     $0400+MMAP_EEPROM_SIZE
002D5D 002D5D -> $1400                MMAP_RAM_START          EQU     $4000-MMAP_RAM_SIZE
002D5D 002D5D -> $4000                MMAP_RAM_END            EQU     $4000
002D5D 002D5D -> $4000                MMAP_FLASH_START        EQU     $4000
002D5D 002D5D -> $10000               MMAP_FLASH_END          EQU     $10000
                                      ;# Vector table
002D5D 002D5D -> $3F80                VECTAB_START            EQU     $3F80
002D5D 002D5D -> $3F80                VECTAB_START_LIN        EQU     $03F80
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D61 002D61                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
002D61 002D61 -> $2D61                MMAP_VARS_END           EQU     *
002D61 002D61 -> $2D61                MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001899 001899                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
001899 001899 -> $1899                MMAP_CODE_END           EQU     *
001899 001899 -> $1899                MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002836 002836                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
002836 002836 -> $2836                MMAP_TABS_END           EQU     *
002836 002836 -> $2836                MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (AriCalculator)                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    RESET   - Reset handler                                                  #
                                      ;#    KEYS    - Keypad controller                                              #
                                      ;#    VMON    - Voltage monitor                                                #
                                      ;#    SCI     - UART driver                                                    #
                                      ;#    DISP    - ST7565R display driver                                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 12, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;#        (based on the S12CBase vector table for the S12G-Mini-EVB)           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Point all unused ISRs to separate BGND instructions
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D61 002D61                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
002D61 002D61 -> $2D61                VECTAB_VARS_END         EQU     *
002D61 002D61 -> $2D61                VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001899 001899                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
001899 001899 -> $1899                VECTAB_CODE_END         EQU     *
001899 001899 -> $1899                VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002836 002836                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
002836 002836 00                      ISR_SPURIOUS            BGND                            ;vector base + $80
002837 002837 -> $22D2                ISR_PAD                 EQU     KEYS_ISR_KWU            ;vector base + $82
002837 002837 -> $1ED1                ISR_ADCCOMP             EQU     VMON_ISR                ;vector base + $84
002837 002837 00                      ISR_RES86               BGND                            ;vector base + $86
002838 002838 00                      ISR_API                 BGND                            ;vector base + $88
002839 002839 00                      ISR_LVI                 BGND                            ;vector base + $8A
00283A 00283A 00                      ISR_RES8C               BGND                            ;vector base + $8C
00283B 00283B 00                      ISR_PORTP               BGND                            ;vector base + $8E
00283C 00283C 00                      ISR_RES90               BGND                            ;vector base + $90
00283D 00283D 00                      ISR_RES92               BGND                            ;vector base + $92
00283E 00283E 00                      ISR_RES94               BGND                            ;vector base + $94
00283F 00283F 00                      ISR_RES96               BGND                            ;vector base + $96
002840 002840 00                      ISR_RES98               BGND                            ;vector base + $98
002841 002841 00                      ISR_RES9A               BGND                            ;vector base + $9A
002842 002842 00                      ISR_RES9C               BGND                            ;vector base + $9C
002843 002843 00                      ISR_RES9E               BGND                            ;vector base + $9E
002844 002844 00                      ISR_RESA0               BGND                            ;vector base + $A0
002845 002845 00                      ISR_RESA2               BGND                            ;vector base + $A2
002846 002846 00                      ISR_RESA4               BGND                            ;vector base + $A4
002847 002847 00                      ISR_RESA6               BGND                            ;vector base + $A6
002848 002848 00                      ISR_RESA8               BGND                            ;vector base + $A8
002849 002849 00                      ISR_RESAA               BGND                            ;vector base + $AA
00284A 00284A 00                      ISR_RESAC               BGND                            ;vector base + $AC
00284B 00284B 00                      ISR_RESAE               BGND                            ;vector base + $AE
00284C 00284C 00                      ISR_CANTX               BGND                            ;vector base + $A0
00284D 00284D 00                      ISR_CANRX               BGND                            ;vector base + $B2
00284E 00284E 00                      ISR_CANERR              BGND                            ;vector base + $B4
00284F 00284F 00                      ISR_CANWUP              BGND                            ;vector base + $B6
002850 002850 00                      ISR_FLASH               BGND                            ;vector base + $B8
002851 002851 -> $20C3                ISR_FLASHFLT            EQU     NVM_ISR_ECCERR          ;vector base + $BA
002851 002851 00                      ISR_SPI2                BGND                            ;vector base + $BC
002852 002852 00                      ISR_SPI1                BGND                            ;vector base + $BE
002853 002853 00                      ISR_RESC0               BGND                            ;vector base + $C0
002854 002854 00                      ISR_SCI2                BGND                            ;vector base + $C2
002855 002855 00                      ISR_RESC4               BGND                            ;vector base + $C4
002856 002856 00                      ISR_PLLLOCK             BGND                            ;vector base + $C6
002857 002857 00                      ISR_OSCSTAT             BGND                            ;vector base + $C8
002858 002858 00                      ISR_RESCA               BGND                            ;vector base + $CA
002859 002859 00                      ISR_ACMP                BGND                            ;vector base + $CC
00285A 00285A 00                      ISR_PORTJ               BGND                            ;vector base + $CC
00285B 00285B 00                      ISR_RESD0               BGND                            ;vector base + $D0
00285C 00285C 00                      ISR_ATD0                BGND                            ;vector base + $D2
00285D 00285D 00                      ISR_SCI1                BGND                            ;vector base + $D4
00285E 00285E -> $1BC9                ISR_SCI0                EQU     SCI_ISR_RXTX            ;vector base + $D6
00285E 00285E -> $21E4                ISR_SPI0                EQU     DISP_ISR                ;vector base + $D8
00285E 00285E 00                      ISR_TIM_PAIE            BGND                            ;vector base + $DA
00285F 00285F 00                      ISR_TIM_PAOV            BGND                            ;vector base + $DC
002860 002860 00                      ISR_TIM_TOV             BGND                            ;vector base + $DE
002861 002861 00                      ISR_TIM_TC7             BGND                            ;vector base + $E0
002862 002862 00                      ISR_TIM_TC6             BGND                            ;vector base + $E2
002863 002863 00                      ISR_TIM_TC5             BGND                            ;vector base + $E4
002864 002864 -> $2354                ISR_TIM_TC4             EQU     KEYS_ISR_TIM            ;vector base + $E6
002864 002864 -> $1B2E                ISR_TIM_TC3             EQU     SCI_ISR_DELAY           ;vector base + $E8
002864 002864 00                      ISR_TIM_TC2             BGND                            ;vector base + $EA
002865 002865 -> $1C2D                ISR_TIM_TC1             EQU     SCI_ISR_BD_NE           ;vector base + $EC
002865 002865 -> $1C59                ISR_TIM_TC0             EQU     SCI_ISR_BD_PE           ;vector base + $EE
002865 002865 00                      ISR_RTI                 BGND                            ;vector base + $F0
002866 002866 00                      ISR_IRQ                 BGND                            ;vector base + $F2
002867 002867 00                      ISR_XIRQ                BGND                            ;vector base + $F4
002868 002868 00                      ISR_SWI                 BGND                            ;vector base + $F6
002869 002869 00                      ISR_TRAP                BGND                            ;vector base + $F8
00286A 00286A -> $286A                VECTAB_TABS_END         EQU     *
00286A 00286A -> $286A                VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12G Vector Table                                                           #
                                      ;###############################################################################
003F80 003F80                                                 ORG     VECTAB_START, VECTAB_START_LIN
003F80 003F80 28 36                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $80
003F82 003F82 22 D2                   VEC_PAD                 DW      ISR_PAD                 ;vector base + $82
003F84 003F84 1E D1                   VEC_ADCCOMP             DW      ISR_ADCCOMP             ;vector base + $84
003F86 003F86 28 37                   VEC_RES86               DW      ISR_RES86               ;vector base + $86
003F88 003F88 28 38                   VEC_API                 DW      ISR_API                 ;vector base + $88
003F8A 003F8A 28 39                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $8A
003F8C 003F8C 28 3A                   VEC_RES8C               DW      ISR_RES8C               ;vector base + $8C
003F8E 003F8E 28 3B                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
003F90 003F90 28 3C                   VEC_RES90               DW      ISR_RES90               ;vector base + $90
003F92 003F92 28 3D                   VEC_RES92               DW      ISR_RES92               ;vector base + $92
003F94 003F94 28 3E                   VEC_RES94               DW      ISR_RES94               ;vector base + $94
003F96 003F96 28 3F                   VEC_RES96               DW      ISR_RES96               ;vector base + $96
003F98 003F98 28 40                   VEC_RES98               DW      ISR_RES98               ;vector base + $98
003F9A 003F9A 28 41                   VEC_RES9A               DW      ISR_RES9A               ;vector base + $9A
003F9C 003F9C 28 42                   VEC_RES9C               DW      ISR_RES9C               ;vector base + $9C
003F9E 003F9E 28 43                   VEC_RES9E               DW      ISR_RES9E               ;vector base + $9E
003FA0 003FA0 28 44                   VEC_RESA0               DW      ISR_RESA0               ;vector base + $A0
003FA2 003FA2 28 45                   VEC_RESA2               DW      ISR_RESA2               ;vector base + $A2
003FA4 003FA4 28 46                   VEC_RESA4               DW      ISR_RESA4               ;vector base + $A4
003FA6 003FA6 28 47                   VEC_RESA6               DW      ISR_RESA6               ;vector base + $A6
003FA8 003FA8 28 48                   VEC_RESA8               DW      ISR_RESA8               ;vector base + $A8
003FAA 003FAA 28 49                   VEC_RESAA               DW      ISR_RESAA               ;vector base + $AA
003FAC 003FAC 28 4A                   VEC_RESAC               DW      ISR_RESAC               ;vector base + $AC
003FAE 003FAE 28 4B                   VEC_RESAE               DW      ISR_RESAE               ;vector base + $AE
003FB0 003FB0 28 4C                   VEC_CANTX               DW      ISR_CANTX               ;vector base + $A0
003FB2 003FB2 28 4D                   VEC_CANRX               DW      ISR_CANRX               ;vector base + $B2
003FB4 003FB4 28 4E                   VEC_CANERR              DW      ISR_CANERR              ;vector base + $B4
003FB6 003FB6 28 4F                   VEC_CANWUP              DW      ISR_CANWUP              ;vector base + $B6
003FB8 003FB8 28 50                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
003FBA 003FBA 20 C3                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
003FBC 003FBC 28 51                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
003FBE 003FBE 28 52                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
003FC0 003FC0 28 53                   VEC_RESC0               DW      ISR_RESC0               ;vector base + $C0
003FC2 003FC2 28 54                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $C2
003FC4 003FC4 28 55                   VEC_RESC4               DW      ISR_RESC4               ;vector base + $C4
003FC6 003FC6 28 56                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
003FC8 003FC8 28 57                   VEC_OSCSTAT             DW      ISR_OSCSTAT             ;vector base + $C8
003FCA 003FCA 28 58                   VEC_RESCA               DW      ISR_RESCA               ;vector base + $CA
003FCC 003FCC 28 59                   VEC_ACMP                DW      ISR_ACMP                ;vector base + $CC
003FCE 003FCE 28 5A                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CC
003FD0 003FD0 28 5B                   VEC_RESD0               DW      ISR_RESD0               ;vector base + $D0
003FD2 003FD2 28 5C                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
003FD4 003FD4 28 5D                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
003FD6 003FD6 1B C9                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
003FD8 003FD8 21 E4                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
003FDA 003FDA 28 5E                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $DA
003FDC 003FDC 28 5F                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $DC
003FDE 003FDE 28 60                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $DE
003FE0 003FE0 28 61                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $E0
003FE2 003FE2 28 62                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $E2
003FE4 003FE4 28 63                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $E4
003FE6 003FE6 23 54                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $E6
003FE8 003FE8 1B 2E                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $E8
003FEA 003FEA 28 64                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $EA
003FEC 003FEC 1C 2D                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $EC
003FEE 003FEE 1C 59                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $EE
003FF0 003FF0 28 65                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
003FF2 003FF2 28 66                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
003FF4 003FF4 28 67                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
003FF6 003FF6 28 68                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
003FF8 003FF8 28 69                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
003FFA 003FFA 14 00                   VEC_RESET_COP           DW      RESET_COP_ENTRY         ;vector base + $FA
003FFC 003FFC 1E AF                   VEC_RESET_CM            DW      RESET_CM_ENTRY          ;vector base + $FC
003FFE 003FFE 1E A0                   VEC_RESET_EXT           DW      RESET_EXT_ENTRY         ;vector base + $FE
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (AriCalculator RevC)                         #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all GPIO ports of the AriCalculator hardware     #
                                      ;#    RevC (not compatible to RevA or RevB). It assumes the following I/O pin  #
                                      ;#      configuration of the S12G MCU:                                         #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD0  - Keyboard row A (bottom)    (input        pull-up  )             #
                                      ;#     PAD1  - Keyboard row B             (input        pull-up  )             #
                                      ;#     PAD2  - Keyboard row C             (input        pull-up  )             #
                                      ;#     PAD3  - Keyboard row D             (input        pull-up  )             #
                                      ;#     PAD4  - Keyboard row E             (input        pull-up  )             #
                                      ;#     PAD5  - Keyboard row F             (input        pull-up  )             #
                                      ;#     PAD6  - Keyboard row G (top)       (input        pull-up  )             #
                                      ;#     PAD7  - NC                         (input        pull-up  )             #
                                      ;#     PAD8  - Vin                        (analog       no pull  )             #
                                      ;#     PAD9  - Vusb                       (analog       no pull  )             #
                                      ;#     PAD10 - NC                         (input        pull-up  )             #
                                      ;#     PAD11 - NC                         (input        pull-up  )             #
                                      ;#     PAD12 - NC                         (input        pull-up  )             #
                                      ;#     PAD13 - NC                         (input        pull-up  )             #
                                      ;#     PAD14 - NC                         (input        pull-up  )             #
                                      ;#     PAD15 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - NC                           (input        pull-up  )             #
                                      ;#     PA1 - NC                           (input        pull-up  )             #
                                      ;#     PA2 - NC                           (input        pull-up  )             #
                                      ;#     PA3 - NC                           (input        pull-up  )             #
                                      ;#     PA4 - NC                           (input        pull-up  )             #
                                      ;#     PA5 - NC                           (input        pull-up  )             #
                                      ;#     PA6 - NC                           (input        pull-up  )             #
                                      ;#     PA7 - NC                           (input        pull-up  )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - NC                           (input        pull-up  )             #
                                      ;#     PB1 - NC                           (input        pull-up  )             #
                                      ;#     PB2 - NC                           (input        pull-up  )             #
                                      ;#     PB3 - NC                           (input        pull-up  )             #
                                      ;#     PB4 - NC                           (input        pull-up  )             #
                                      ;#     PB5 - NC                           (input        pull-up  )             #
                                      ;#     PB6 - NC                           (input        pull-up  )             #
                                      ;#     PB7 - NC                           (input        pull-up  )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - LED (green)                  (output       high     )             #
                                      ;#     PE1 - LED (red)                    (output       high     )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - SPI port MISO                (input        pull-down)             #
                                      ;#     PJ1 - SPI port MOSI                (input        pull-down)             #
                                      ;#     PJ2 - SPI port SCK                 (input        pull-down)             #
                                      ;#     PJ3 - SPI port /SS                 (input        pull-down)             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - NC                           (input        pull-up  )             #
                                      ;#     PJ7 - NC                           (input        pull-up  )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - RTS                          (input        pull_down)             #
                                      ;#     PM1 - CTS                          (output       low      )             #
                                      ;#     PM2 - NC                           (input        pull_up  )             #
                                      ;#     PM3 - NC                           (input        pull_up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - Keyboard column 5 (left)     (output       low      )             #
                                      ;#     PP1 - Keyboard column 4            (output       low      )             #
                                      ;#     PP2 - Keyboard column 3            (output       low      )             #
                                      ;#     PP3 - Keyboard column 2            (output       low      )             #
                                      ;#     PP4 - Keyboard column 1            (output       low      )             #
                                      ;#     PP5 - Keyboard column 0 (right)    (output       low      )             #
                                      ;#     PP6 - NC (used by KEYS driver)     (input        pull-up  )             #
                                      ;#     PP7 - NC (used by KEYS driver)     (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI RX                       (input        pull-down)             #
                                      ;#     PS1 - SCI TX                       (output       low      )             #
                                      ;#     PS2 - NC                           (input        pull-up  )             #
                                      ;#     PS3 - Display RESET                (output       low      )             #
                                      ;#     PS4 - Display A0                   (output       low      )             #
                                      ;#     PS5 - Display MOSI                 (output       low      )             #
                                      ;#     PS6 - Display SCK                  (output       low      )             #
                                      ;#     PS7 - Display /SS                  (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - SCI RX                       (input        no pull  )             #
                                      ;#     PT1 - SCI_RX                       (input        no pull  )             #
                                      ;#     PT2 - NC                           (input        pull-up  )             #
                                      ;#     PT3 - NC                           (input        pull-up  )             #
                                      ;#     PT4 - NC                           (input        pull-up  )             #
                                      ;#     PT5 - Backlight enable             (output       low      )             #
                                      ;#     PT6 - NC                           (input        pull-up  )             #
                                      ;#     PT7 - NC                           (input        pull-up  )             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 12, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;#        (based on the S12CBase GPIO handler for the S12G-Mini-EVB)           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D61 002D61                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
002D61 002D61 -> $2D61                GPIO_VARS_END           EQU     *
002D61 002D61 -> $2D61                GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001899 001899                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
001899 001899 -> $1899                GPIO_CODE_END           EQU     *
001899 001899 -> $1899                GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00286A 00286A                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
00286A 00286A -> $286A                GPIO_TABS_END           EQU     *
00286A 00286A -> $286A                GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
00286A 00286A -> $001B                SSTACK_DEPTH            EQU     27
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00286A 00286A -> $2D6A                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
00286A 00286A -> $2DA0                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D61 002D61                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
002D61 002D61 -> $2D61                SSTACK_VARS_END         EQU     *
002D61 002D61 -> $2D61                SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001899 001899                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
001899 001899 -> $1899                SSTACK_OF               EQU     *
001899 001899 MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001899 001899 CE 28 6A                                        LDX     #\1                                              (RESET_FATAL)
00189C 00189C 06 1E CB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
00189F 00189F -> $189F                SSTACK_UF               EQU     *
00189F 00189F MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00189F 00189F CE 28 85                                        LDX     #\1                                              (RESET_FATAL)
0018A2 0018A2 06 1E CB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
0018A5 0018A5 -> $18A5                SSTACK_CODE_END         EQU     *
0018A5 0018A5 -> $18A5                SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00286A 00286A                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
00286A 00286A MACRO                   SSTACK_MSG_OF           RESET_MSG       "Subroutine stack overflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00286A 00286A 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
002883 002883 AC 7A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002885 002885 MACRO                   SSTACK_MSG_UF           RESET_MSG       "Subroutine stack underflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002885 002885 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
00289F 00289F C9 DC                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
0028A1 0028A1 -> $28A1                SSTACK_TABS_END         EQU     *
0028A1 0028A1 -> $28A1                SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
                                      ;CPU
0028A1 0028A1 -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
0028A1 0028A1 -> $0040                ISTACK_CCR              EQU     %0100_0000
0028A1 0028A1 -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002D61 002D61                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
002D61 002D61 -> $2D61                ISTACK_TOP              EQU     *
002D61 002D61                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
002D85 002D85                                                 DS      SSTACK_DEPTH
002DA0 002DA0 -> $2DA0                ISTACK_BOTTOM           EQU     *
002DA0 002DA0 -> $2DA0                ISTACK_VARS_END         EQU     *
002DA0 002DA0 -> $2DA0                ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018A5 0018A5                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
0018A5 0018A5 -> $18A5                ISTACK_CODE_END         EQU     *
0018A5 0018A5 -> $18A5                ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0028A1 0028A1                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
0028A1 0028A1 -> $28A1                ISTACK_TABS_END         EQU     *
0028A1 0028A1 -> $28A1                ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
0028A1 0028A1 -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
0028A1 0028A1 -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
0028A1 0028A1 -> $5800                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DA0 002DA0                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
002DA0 002DA0 -> $2DA0                CLOCK_VARS_END          EQU     *
002DA0 002DA0 -> $2DA0                CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018A5 0018A5                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
0018A5 0018A5 -> $18A5                CLOCK_CODE_END          EQU     *
0018A5 0018A5 -> $18A5                CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0028A1 0028A1                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
0028A1 0028A1 -> $28A1                CLOCK_TABS_END          EQU     *
0028A1 0028A1 -> $28A1                CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
0028A1 0028A1 -> $003C                COP_CTLREG              EQU     CPMUCOP
                                      ;#Restart register
0028A1 0028A1 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DA0 002DA0                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
002DA0 002DA0 -> $2DA0                COP_VARS_END            EQU     *
002DA0 002DA0 -> $2DA0                COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018A5 0018A5                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
0018A5 0018A5 -> $18A5                COP_CODE_END            EQU     *
0018A5 0018A5 -> $18A5                COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0028A1 0028A1                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
0028A1 0028A1 -> $28A1                COP_TABS_END            EQU     *
0028A1 0028A1 -> $28A1                COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     delay driver                                                  #
                                      ;#      OC5:     unasigned                                                     #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
0028A1 0028A1 -> $0001                TIM_DIV2_OFF            EQU     1       ;default no clock divider
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
0028A1 0028A1 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
0028A1 0028A1 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
0028A1 0028A1 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
0028A1 0028A1 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
0028A1 0028A1 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
0028A1 0028A1 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
0028A1 0028A1 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
0028A1 0028A1 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
0028A1 0028A1 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DA0 002DA0                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
002DA0 002DA0 -> $2DA0                TIM_VARS_END            EQU     *
002DA0 002DA0 -> $2DA0                TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018A5 0018A5                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
0018A5 0018A5 -> $18A5                TIM_CODE_END            EQU     *
0018A5 0018A5 -> $18A5                TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0028A1 0028A1                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
0028A1 0028A1 -> $28A1                TIM_TABS_END            EQU     *
0028A1 0028A1 -> $28A1                TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - Changed selection of detectable baud rates                           #
                                      ;#      - Stop baud rate detection when receiving a corret character           #
                                      ;#      - Stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;#    September 25, 2013                                                       #
                                      ;#      - Fixed reception of C0 characters                                     #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Made SCI_TXBUF_SIZE configurable                                     #
                                      ;#    October 1, 2014                                                          #
                                      ;#      - Added dynamic enable/disable feature                                 #
                                      ;#    January 14, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;#      - Changed control character handling                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF coniguration
                                      ;RTS/CTS coniguration
                                      ;RTS pin
                                      ;CTS pin
                                      ;CTS drive strength
                                      ;MC9S12DP256 SCI IRQ workaround (MUCts00510)
                                      ;-------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
0028A1 0028A1 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;Delay counter
                                      ;-------------
                                      ;SCI_DLY_OC             EQU     $3              ;default is OC3
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;Baud rate detection configuration
                                      ;ECT or TIM
                                      ;TIM configuration
                                      ;Input capture channels (pulse capture)
                                      ;ECT configuration
                                      ;Output compare channels (time out)
                                      ;Log captured BD pulse length
0028A1 0028A1 -> $0001                SCI_BD_LOG_OFF          EQU     1               ;default is SCI_BD_LOG_OFF
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;TX buffer size (minimize to 1 for debugging)
                                      ;--------------------------------------------
                                      ;SCI_TXBUF_SIZE         EQU       1             ;minimum size of the transmit buffer
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character -> define macro SCI_BREAK_ACTION
                                      ;#mac SCI_BREAK_ACTION, 0
                                      ;       ...code to be executed on BREAK condition (inside ISR)
                                      ;#emac
                                      ;Detect SUSPEND character -> define macro SCI_SUSPEND_ACTION
                                      ;#mac SCI_SUSPEND_ACTION, 0
                                      ;       ...code to be executed on SUSPEND condition (inside ISR)
                                      ;#emac
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
0028A1 0028A1 -> $0516                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
0028A1 0028A1 -> $028B                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
0028A1 0028A1 -> $0146                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
0028A1 0028A1 -> $00D9                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
0028A1 0028A1 -> $00A3                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
0028A1 0028A1 -> $006D                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
0028A1 0028A1 -> $0051                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
0028A1 0028A1 -> $0036                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
0028A1 0028A1 -> $0029                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
0028A1 0028A1 -> $001B                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
0028A1 0028A1 -> $0014                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
0028A1 0028A1 -> $000E                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
0028A1 0028A1 -> $000A                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
0028A1 0028A1 -> $00A3                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
0028A1 0028A1 -> $1999                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
0028A1 0028A1 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
0028A1 0028A1 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
0028A1 0028A1 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
0028A1 0028A1 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
0028A1 0028A1 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
0028A1 0028A1 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
0028A1 0028A1 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
0028A1 0028A1 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
0028A1 0028A1 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
0028A1 0028A1 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
0028A1 0028A1 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
0028A1 0028A1 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
0028A1 0028A1 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
0028A1 0028A1 -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
0028A1 0028A1 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
0028A1 0028A1 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
0028A1 0028A1 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
0028A1 0028A1 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
0028A1 0028A1 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
0028A1 0028A1 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
0028A1 0028A1 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
0028A1 0028A1 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Flow control
0028A1 0028A1 -> $0001                SCI_FC_EN               EQU     1
                                      ;#Baud rate detection
0028A1 0028A1 -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;#Timer setup for baud rate detection
0028A1 0028A1 -> $0001                SCI_SET_TIOS            EQU     1
0028A1 0028A1 -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
0028A1 0028A1 -> $0001                SCI_SET_TCTL3           EQU     1
0028A1 0028A1 -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
0028A1 0028A1 -> $0007                SCI_BD_TCS              EQU     (1<<SCI_BD_OC)|(1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)
                                      ;#Timer setup for the delay counter
0028A1 0028A1 -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for RTS polling
                                      ;#Delay counter
0028A1 0028A1 -> $0001                SCI_SET_TIOS            EQU     1
0028A1 0028A1 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
0028A1 0028A1 -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
                                      ;#C0 character handling
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DA0 002DA0                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
002DA0 002DA0 -> $2DA0                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
002DA0 002DA0                                                 ALIGN   1
                                      ;#Receive buffer
002DA0 002DA0                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
002DC0 002DC0                         SCI_RXBUF_IN            DS      1               ;points to the next free space
002DC1 002DC1                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
002DC2 002DC2                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
002DCA 002DCA                         SCI_TXBUF_IN            DS      1               ;points to the next free space
002DCB 002DCB                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
002DCC 002DCC                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
                                      ;#XON/XOFF reminder count
                                      ;#BD log buffer
002DCE 002DCE -> $2DCE                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
                                      ;#Flags
002DCE 002DCE -> $2DCE                SCI_FLGS                EQU     ((SCI_AUTO_LOC1&1)*SCI_AUTO_LOC1)+(((~SCI_AUTO_LOC1)&1)*SCI_AUTO_LOC2)
002DCE 002DCE                                                 UNALIGN ((~SCI_AUTO_LOC1)&1)
                                      ;#Baud rate detection registers
002DCF 002DCF                         SCI_BD_LIST             DS      1               ;list of potential baud rates
002DD0 002DD0 -> $2DD0                SCI_VARS_END            EQU     *
002DD0 002DD0 -> $2DD0                SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0018A5 0018A5                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
0018A5 0018A5 -> $18A5                SCI_TX_NB               EQU     *
                                                              ;Check if SCI transmitter is enabled
0018A5 0018A5 4F CB 08 26                                     BRCLR   SCICR2, #TE, SCI_TX_NB_1                ;do nothing and flag success
                                                              ;Save registers (data in B)
0018A9 0018A9 35                                              PSHY
0018AA 0018AA 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
0018AB 0018AB CD 2D C2                                        LDY     #SCI_TXBUF
0018AE 0018AE B6 2D CA                                        LDAA    SCI_TXBUF_IN
0018B1 0018B1 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
0018B3 0018B3 42                                              INCA                                            ;increment index
0018B4 0018B4 84 01                                           ANDA    #SCI_TXBUF_MASK
0018B6 0018B6 B1 2D CB                                        CMPA    SCI_TXBUF_OUT
0018B9 0018B9 27 17                                           BEQ     SCI_TX_NB_2                             ;buffer is full
                                                              ;Update buffer
0018BB 0018BB 7A 2D CA                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
0018BE 0018BE 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
0018C3 0018C3 MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0018C3 0018C3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C3 0018C3 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C6 0018C6 25 D1                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018C8 0018C8 8F 2D 9B                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018CB 0018CB 22 D2                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018CD 0018CD -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018CD 0018CD -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018CD 0018CD 32                                              PULA
0018CE 0018CE 31                                              PULY
                                                              ;Signal success
0018CF 0018CF 14 01                   SCI_TX_NB_1             SEC
                                                              ;Done
0018D1 0018D1 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
0018D2 0018D2 MACRO                   SCI_TX_NB_2             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0018D2 0018D2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018D2 0018D2 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018D5 0018D5 25 C2                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018D7 0018D7 8F 2D 9B                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018DA 0018DA 22 C3                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018DC 0018DC -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018DC 0018DC -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018DC 0018DC 32                                              PULA
0018DD 0018DD 31                                              PULY
                                                              ;Signal failure
0018DE 0018DE 10 FE                                           CLC
                                                              ;Done
0018E0 0018E0 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
0018E1 0018E1 -> $18E1                SCI_TX_BL               EQU     *
0018E1 0018E1 MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0018E1 0018E1 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0018E3 0018E3                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0018E3 0018E3 07 C0                                           JOBSR   \1                                               (SCI_MAKE_BL)
0018E5 0018E5 24 0D                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0018E7 0018E7 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0018E9 0018E9 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0018E9 0018E9 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018E9 0018E9 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018EC 0018EC 25 AB                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018EE 0018EE 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F1 0018F1 22 AC                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F3 0018F3 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F3 0018F3 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0018F3 0018F3 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0018F4 0018F4 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0018F4 0018F4 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0018F7 0018F7 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0018F9 0018F9 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0018FC 0018FC 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0018FE 0018FE MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0018FE 0018FE 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001903 001903 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001908 001908 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00190A 00190A 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00190C 00190C 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00190D 00190D 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00190E 00190E -> $190E                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00190E 00190E MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00190E 00190E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00190E 00190E 8F 2D 6F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001911 001911 25 86                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001913 001913 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001916 001916 22 87                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001918 001918 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001918 001918 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001918 001918 20 C7                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissions are complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00191A 00191A -> $191A                SCI_TX_DONE_NB          EQU     *
                                                              ;Check if SCI transmitter is enabled
00191A 00191A 4F CB 08 2D                                     BRCLR   SCICR2, #TE, SCI_TX_DONE_NB_3           ;do nothing and flag success
                                                              ;Save registers
00191E 00191E 3B                                              PSHD
                                                              ;Check TX queue
00191F 00191F FC 2D CA                                        LDD     SCI_TXBUF_IN
001922 001922 18 17                                           CBA
001924 001924 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
001926 001926 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2    ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
00192A 00192A MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00192A 00192A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00192A 00192A 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00192D 00192D 18 25 FF 68                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001931 001931 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001934 001934 18 22 FF 67                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001938 001938 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001938 001938 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001938 001938 3A                                              PULD
                                                              ;Signal failure
001939 001939 10 FE                                           CLC
                                                              ;Done
00193B 00193B 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
00193C 00193C MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00193C 00193C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00193C 00193C 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00193F 00193F 18 25 FF 56                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001943 001943 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001946 001946 18 22 FF 55                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00194A 00194A -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00194A 00194A -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00194A 00194A 3A                                              PULD
                                                              ;Signal success
00194B 00194B 14 01                   SCI_TX_DONE_NB_3        SEC
                                                              ;Done
00194D 00194D 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00194E 00194E -> $194E                SCI_TX_DONE_BL          EQU     *
00194E 00194E MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00194E 00194E 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001950 001950                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001950 001950 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
001952 001952 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001954 001954 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001956 001956 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001956 001956 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001956 001956 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001959 001959 18 25 FF 3C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00195D 00195D 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001960 001960 18 22 FF 3B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001964 001964 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001964 001964 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001964 001964 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001965 001965 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001965 001965 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001968 001968 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00196A 00196A 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00196D 00196D 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00196F 00196F MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00196F 00196F 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001974 001974 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001979 001979 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00197B 00197B 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00197D 00197D 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00197E 00197E 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00197F 00197F -> $197F                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00197F 00197F MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00197F 00197F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00197F 00197F 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001982 001982 18 25 FF 13                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001986 001986 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001989 001989 18 22 FF 12                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00198D 00198D -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00198D 00198D -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00198D 00198D 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00198F 00198F -> $198F                SCI_TX_READY_NB         EQU     *
                                                              ;Check if SCI transmitter is enabled
00198F 00198F 4F CB 08 1B                                     BRCLR   SCICR2, #TE, SCI_TX_READY_NB_1          ;do nothing and flag success
                                                              ;Save registers
001993 001993 3B                                              PSHD
                                                              ;Check if there is room for this entry
001994 001994 FC 2D CA                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
001997 001997 42                                              INCA
001998 001998 84 01                                           ANDA    #SCI_TXBUF_MASK
00199A 00199A B1 2D CB                                        CMPA    SCI_TXBUF_OUT
00199D 00199D 27 12                                           BEQ     SCI_TX_READY_NB_2                               ;buffer is full
                                                              ;Restore registers
00199F 00199F MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00199F 00199F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00199F 00199F 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A2 0019A2 18 25 FE F3                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A6 0019A6 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019A9 0019A9 18 22 FE F2                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019AD 0019AD -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019AD 0019AD -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019AD 0019AD 3A                                              PULD
                                                              ;Done
0019AE 0019AE 14 01                   SCI_TX_READY_NB_1       SEC
0019B0 0019B0 3D                                              RTS
                                                              ;TX buffer is full
0019B1 0019B1 MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0019B1 0019B1 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019B1 0019B1 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019B4 0019B4 18 25 FE E1                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019B8 0019B8 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019BB 0019BB 18 22 FE E0                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019BF 0019BF -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019BF 0019BF -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019BF 0019BF 3A                                              PULD
                                                              ;Done
0019C0 0019C0 10 FE                                           CLC
0019C2 0019C2 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0019C3 0019C3 -> $19C3                SCI_TX_READY_BL         EQU     *
0019C3 0019C3 MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0019C3 0019C3 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0019C5 0019C5                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0019C5 0019C5 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
0019C7 0019C7 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0019C9 0019C9 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0019CB 0019CB MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0019CB 0019CB MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019CB 0019CB 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019CE 0019CE 18 25 FE C7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019D2 0019D2 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019D5 0019D5 18 22 FE C6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019D9 0019D9 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019D9 0019D9 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0019D9 0019D9 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0019DA 0019DA MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0019DA 0019DA 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0019DD 0019DD 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0019DF 0019DF 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0019E2 0019E2 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0019E4 0019E4 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0019E4 0019E4 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0019E9 0019E9 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0019EE 0019EE 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0019F0 0019F0 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0019F2 0019F2 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0019F3 0019F3 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0019F4 0019F4 -> $19F4                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0019F4 0019F4 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0019F4 0019F4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019F4 0019F4 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019F7 0019F7 18 25 FE 9E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019FB 0019FB 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0019FE 0019FE 18 22 FE 9D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A02 001A02 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A02 001A02 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A02 001A02 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
001A04 001A04 -> $1A04                SCI_RX_NB               EQU     *
                                                              ;Check if SCI receiver is enabled
001A04 001A04 4F CB 08 3D                                     BRCLR   SCICR2, #TE, SCI_RX_NB_3                ;do nothing and flag failure
                                                              ;Save registers
001A08 001A08 34                                              PSHX
                                                              ;Check if there is data in the RX queue
001A09 001A09 FC 2D C0                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
001A0C 001A0C 18 16                                           SBA                                             ;A=in-out
001A0E 001A0E 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
                                                              ;Check if more RX data is allowed  (in-out in A)
001A10 001A10 84 1F                                           ANDA    #SCI_RXBUF_MASK
001A12 001A12 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
001A14 001A14 27 32                                           BEQ     SCI_RX_NB_4                             ;allow RX data
                                                              ;Pull entry from the RX queue (out in B)
001A16 001A16 CE 2D A0                SCI_RX_NB_1             LDX     #SCI_RXBUF
001A19 001A19 EE E5                                           LDX     B,X
001A1B 001A1B CB 02                                           ADDB    #$02                                    ;increment out pointer
001A1D 001A1D C4 1F                                           ANDB    #SCI_RXBUF_MASK
001A1F 001A1F 7B 2D C1                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
001A22 001A22 B7 54                                           TFR     X, D
                                                              ;Restore registers
001A24 001A24 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A24 001A24 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A24 001A24 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A27 001A27 18 25 FE 6E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A2B 001A2B 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A2E 001A2E 18 22 FE 6D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A32 001A32 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A32 001A32 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A32 001A32 30                                              PULX
                                                              ;Done
001A33 001A33 14 01                                           SEC
001A35 001A35 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
001A36 001A36 MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001A36 001A36 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A36 001A36 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A39 001A39 18 25 FE 5C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A3D 001A3D 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A40 001A40 18 22 FE 5B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A44 001A44 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A44 001A44 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A44 001A44 30                                              PULX
                                                              ;Done
001A45 001A45 10 FE                   SCI_RX_NB_3             CLC
001A47 001A47 3D                                              RTS
                                                              ;Assert CTS (out-index in B, CCR in X)
001A48 001A48 MACRO                   SCI_RX_NB_4             SCI_ASSERT_CTS
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_ASSERT_CTS)
001A48 001A48 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data (SCI_ASSERT_CTS)
001A4C 001A4C 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (SCI_ASSERT_CTS)
001A50 001A50 1C 02 55 02                                     BSET    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-down device (SCI_ASSERT_CTS)
001A54 001A54 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (SCI_ASSERT_CTS)
001A58 001A58 20 BC                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
001A5A 001A5A -> $1A5A                SCI_RX_BL               EQU     *
001A5A 001A5A MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001A5A 001A5A 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001A5C 001A5C                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001A5C 001A5C 07 A6                                           JOBSR   \1                                               (SCI_MAKE_BL)
001A5E 001A5E 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001A60 001A60 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001A62 001A62 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001A62 001A62 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A62 001A62 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A65 001A65 18 25 FE 30                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A69 001A69 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A6C 001A6C 18 22 FE 2F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A70 001A70 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A70 001A70 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001A70 001A70 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001A71 001A71 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001A71 001A71 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001A74 001A74 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001A76 001A76 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001A79 001A79 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001A7B 001A7B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001A7B 001A7B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001A80 001A80 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001A85 001A85 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001A87 001A87 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001A89 001A89 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001A8A 001A8A 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001A8B 001A8B -> $1A8B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001A8B 001A8B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001A8B 001A8B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A8B 001A8B 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A8E 001A8E 18 25 FE 07                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A92 001A92 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A95 001A95 18 22 FE 06                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A99 001A99 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A99 001A99 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001A99 001A99 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
001A9B 001A9B -> $1A9B                SCI_RX_READY_NB         EQU     *
                                                              ;Check if SCI receiver is enabled
001A9B 001A9B 4F CB 08 29                                     BRCLR   SCICR2, #TE, SCI_RX_READY_NB_2          ;do nothing and flag failure
                                                              ;Save registers
001A9F 001A9F 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
001AA0 001AA0 FC 2D C0                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
001AA3 001AA3 18 17                                           CBA
001AA5 001AA5 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
001AA7 001AA7 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001AA7 001AA7 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AA7 001AA7 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AAA 001AAA 18 25 FD EB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AAE 001AAE 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AB1 001AB1 18 22 FD EA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AB5 001AB5 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AB5 001AB5 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AB5 001AB5 3A                                              PULD
                                                              ;Done
001AB6 001AB6 14 01                                           SEC
001AB8 001AB8 3D                                              RTS
                                                              ;RX buffer is empty
001AB9 001AB9 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001AB9 001AB9 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AB9 001AB9 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ABC 001ABC 18 25 FD D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC0 001AC0 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC3 001AC3 18 22 FD D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC7 001AC7 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC7 001AC7 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AC7 001AC7 3A                                              PULD
                                                              ;Done
001AC8 001AC8 10 FE                   SCI_RX_READY_NB_2       CLC
001ACA 001ACA 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
001ACB 001ACB -> $1ACB                SCI_RX_READY_BL         EQU     *
001ACB 001ACB MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001ACB 001ACB 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001ACD 001ACD                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001ACD 001ACD 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
001ACF 001ACF 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001AD1 001AD1 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001AD3 001AD3 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001AD3 001AD3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AD3 001AD3 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AD6 001AD6 18 25 FD BF                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ADA 001ADA 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001ADD 001ADD 18 22 FD BE                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AE1 001AE1 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AE1 001AE1 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001AE1 001AE1 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001AE2 001AE2 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001AE2 001AE2 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001AE5 001AE5 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001AE7 001AE7 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001AEA 001AEA 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001AEC 001AEC MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001AEC 001AEC 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001AF1 001AF1 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001AF6 001AF6 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001AF8 001AF8 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001AFA 001AFA 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001AFB 001AFB 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001AFC 001AFC -> $1AFC                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001AFC 001AFC MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001AFC 001AFC MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001AFC 001AFC 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001AFF 001AFF 18 25 FD 96                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B03 001B03 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B06 001B06 18 22 FD 95                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B0A 001B0A -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B0A 001B0A -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001B0A 001B0A 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
001B0C 001B0C -> $1B0C                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
001B0C 001B0C 35                                              PSHY                                    ;push Y onto the SSTACK
001B0D 001B0D 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
001B0E 001B0E 5C C8                                           STD     SCIBDH                          ;set baud rate
001B10 001B10 CD 19 99                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
001B13 001B13 13                                              EMUL                                    ;D*Y -> Y:D
001B14 001B14 7C 2D CC                                        STD     SCI_BVAL
                                                              ;Clear input buffer
001B17 001B17 18 03 00 00 2D C0                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
001B1D 001B1D MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001B1D 001B1D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B1D 001B1D 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B20 001B20 18 25 FD 75                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B24 001B24 8F 2D 9A                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B27 001B27 18 22 FD 74                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B2B 001B2B -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B2B 001B2B -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001B2B 001B2B 3A                                              PULD                                    ;pull D from the SSTACK
001B2C 001B2C 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
001B2D 001B2D 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTS polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
001B2E 001B2E -> $1B2E                SCI_ISR_DELAY           EQU     *
001B2E 001B2E 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Poll RTS (retrigger request in C-flag)
001B30 001B30 1F 2D CE 40 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_POLL_RTS, SCI_ISR_DELAY_2            ;no polling required
001B35 001B35 1F 02 50 01 04                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now asserted (TX allowed)
001B3A 001B3A 14 01                                           SEC                                                             ;retrigger
001B3C 001B3C 20 05                                           JOB     SCI_ISR_DELAY_2
001B3E 001B3E 18 0B AC 00 CB          SCI_ISR_DELAY_1         MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
001B43 001B43 -> $1B43                SCI_ISR_DELAY_2         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
001B43 001B43 24 1E                                           BCC     SCI_ISR_DELAY_5
001B45 001B45 MACRO                                           SCI_RESET_DELAY
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
001B45 001B45 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
001B45 001B45 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
001B45 001B45 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
001B4A 001B4A DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
001B4C 001B4C 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
001B4F 001B4F B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
001B51 001B51 C7                                              CLRB                                                     (SCI_RESET_DELAY)
001B52 001B52 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
001B52 001B52 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
001B54 001B54 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
001B56 001B56 -> $1B56                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
001B56 001B56 MACRO                   SCI_ISR_DELAY_4         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001B56 001B56 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001B59 001B59 25 06                                           BLO     OF                                               (ISTACK_RTI)
001B5B 001B5B 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001B5E 001B5E 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001B60 001B60 0B                                              RTI                                                      (ISTACK_RTI)
001B61 001B61 00                      OF                      BGND                                                     (ISTACK_RTI)
001B62 001B62 00                      UF                      BGND                                                     (ISTACK_RTI)
001B63 001B63 MACRO                   SCI_ISR_DELAY_5         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
001B63 001B63 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
001B63 001B63 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001B63 001B63 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001B66 001B66 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001B68 001B68 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001B6B 001B6B -> $1B6B                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
001B6B 001B6B -> $1B6B                                        EQU     *                                                (SCI_STOP_DELAY)
001B6B 001B6B 20 E9                                           JOB     SCI_ISR_DELAY_4
                                                              ;#Transmit ISR (status flags in A)
001B6D 001B6D 85 80                   SCI_ISR_TX              BITA    #TDRE                                   ;check if SCI is ready for new TX data
001B6F 001B6F 27 4B                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check RTS status
001B71 001B71 1F 02 50 01 28                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
001B76 001B76 1C 2D CE 40                                     BSET    SCI_FLGS, #SCI_FLG_POLL_RTS             ;request RTS polling
001B7A 001B7A MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (don't retrigger) (approx. 2 SCI frames)                           (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
001B7A 001B7A 4E 4C 08 1E                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
001B7E 001B7E MACRO                                           SCI_INIT_DELAY                                           (SCI_START_DELAY)
                                      ;#Start delay (always retrigger) (approx. 2 SCI frames)                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY)
001B7E 001B7E MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001B7E 001B7E MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
001B7E 001B7E MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
001B7E 001B7E 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
001B83 001B83 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001B85 001B85 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001B88 001B88 B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001B8A 001B8A C7                                              CLRB                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001B8B 001B8B MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
001B8B 001B8B D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
001B8D 001B8D 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
001B8F 001B8F -> $1B8F                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
001B8F 001B8F MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
001B8F 001B8F MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;############################################################################### (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S                 ;  0=input capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C                 ;  1=output compare (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A B B B                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y D D D                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;        T N P                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;        O E E                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001B8F 001B8F 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001B94 001B94 4C 4C 08                                        BSET    TIE, #\1                        ;enable interrupts (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001B97 001B97 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
001B9C 001B9C -> $1B9C                DONE                    EQU     *                                                (SCI_START_DELAY)
001B9C 001B9C 20 19                                           JOB     SCI_ISR_TX_3                            ;stop transmitting
                                                              ;Check TX buffer
001B9E 001B9E FC 2D CA                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
001BA1 001BA1 18 17                                           CBA
001BA3 001BA3 27 12                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
001BA5 001BA5 CD 2D C2                                        LDY     #SCI_TXBUF
001BA8 001BA8 18 0D ED 00 CF                                  MOVB    B,Y ,SCIDRL
                                                              ;Increment index (in-index in A, out-index in B, buffer pointer in Y)
001BAD 001BAD 52                                              INCB
001BAE 001BAE C4 01                                           ANDB    #SCI_TXBUF_MASK
001BB0 001BB0 7B 2D CB                                        STAB    SCI_TXBUF_OUT
001BB3 001BB3 18 17                                           CBA
001BB5 001BB5 26 05                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
001BB7 001BB7 -> $1BB7                SCI_ISR_TX_3            EQU     *
001BB7 001BB7 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
001BBC 001BBC MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001BBC 001BBC 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001BBF 001BBF 25 06                                           BLO     OF                                               (ISTACK_RTI)
001BC1 001BC1 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001BC4 001BC4 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001BC6 001BC6 0B                                              RTI                                                      (ISTACK_RTI)
001BC7 001BC7 00                      OF                      BGND                                                     (ISTACK_RTI)
001BC8 001BC8 00                      UF                      BGND                                                     (ISTACK_RTI)
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
001BC9 001BC9 -> $1BC9                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
001BC9 001BC9 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
001BCB 001BCB 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
001BCD 001BCD 27 9E                                           BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
001BCF 001BCF D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
001BD1 001BD1 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
001BD3 001BD3 1F 2D CE 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
001BD8 001BD8 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
001BDA 001BDA 1D 2D CE 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
                                                              ;Place data into RX queue (status flags in A, RX data in B)
001BDE 001BDE B7 46                   SCI_ISR_RX_1            TFR     D, Y                                    ;flags:data -> Y
001BE0 001BE0 CE 2D A0                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
001BE3 001BE3 FC 2D C0                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
001BE6 001BE6 6D E4                                           STY     A,X
001BE8 001BE8 8B 02                                           ADDA    #2
001BEA 001BEA 84 1F                                           ANDA    #SCI_RXBUF_MASK
001BEC 001BEC 18 17                                           CBA
001BEE 001BEE 27 18                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
001BF0 001BF0 7A 2D C0                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
001BF3 001BF3 18 16                                           SBA
001BF5 001BF5 84 1F                                           ANDA    #SCI_RXBUF_MASK
001BF7 001BF7 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
001BF9 001BF9 24 11                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
001BFB 001BFB -> $1BFB                SCI_ISR_RX_2            EQU     *
                                                              ;Done
001BFB 001BFB MACRO                   SCI_ISR_RX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001BFB 001BFB 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001BFE 001BFE 25 06                                           BLO     OF                                               (ISTACK_RTI)
001C00 001C00 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001C03 001C03 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001C05 001C05 0B                                              RTI                                                      (ISTACK_RTI)
001C06 001C06 00                      OF                      BGND                                                     (ISTACK_RTI)
001C07 001C07 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Buffer overflow (flags:data in Y)
001C08 001C08 1C 2D CE 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
                                                              ;Signal buffer full (flags:data in Y)
                                                              ;Deassert CTS (stop incomming data) (flags:data in Y)
001C0C 001C0C MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
001C0C 001C0C 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (prohibit RX data) (SCI_DEASSERT_CTS)
001C10 001C10 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (SCI_DEASSERT_CTS)
001C14 001C14 1D 02 55 02                                     BCLR    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-up device (SCI_DEASSERT_CTS)
001C18 001C18 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (SCI_DEASSERT_CTS)
001C1C 001C1C -> $1C1C                SCI_ISR_RX_11           EQU     *
001C1C 001C1C 20 DD                   SCI_ISR_RX_13           JOB     SCI_ISR_RX_4                            ;done
                                                              ;Handle DLE
001C1E 001C1E 1C 2D CE 04             SCI_ISR_RX_17           BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;remember start of escape sequence
001C22 001C22 FC 2D C0                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
001C25 001C25 84 1F                                           ANDA    #SCI_RXBUF_MASK
001C27 001C27 81 0E                                           CMPA    #(SCI_RX_FULL_LEVEL-2)
001C29 001C29 24 E1                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
001C2B 001C2B 20 EF                                           JOB     SCI_ISR_RX_11                           ;check for RX errors
                                      ;#BD negedge ISR (default IC1)
001C2D 001C2D -> $1C2D                SCI_ISR_BD_NE           EQU     *
                                                              ;Clear ICNE interrupt
001C2D 001C2D MACRO                                           TIM_CLRIF       SCI_BD_ICNE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001C2D 001C2D MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001C2D 001C2D 18 0B 02 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
001C32 001C32 DE 52                                           LDX     (TC0+(2*SCI_BD_ICNE))                   ;capture current edge (posedge)
001C34 001C34 DD 50                                           LDY     (TC0+(2*SCI_BD_ICPE))                   ;capture previous edge (posedge)
001C36 001C36 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
001C38 001C38 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
001C3A 001C3A MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001C3A 001C3A MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001C3A 001C3A 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
001C3F 001C3F MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
001C3F 001C3F 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
001C42 001C42 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
001C44 001C44 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
001C46 001C46 -> $1C46                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
001C46 001C46 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
001C48 001C48 26 5B                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
001C4A 001C4A CC FF FF                                        LDD     #-1
001C4D 001C4D 18 13                                           EMULS                                           ;-1 * Y => Y:D
001C4F 001C4F 1A E6                                           LEAX    D,X                                     ;subtract timestamps
                                                              ;Select search tree tree (pulse length in X)
001C51 001C51 CD 2C AA                                        LDY     #SCI_BD_HIGH_PULSE_TREE
001C54 001C54 04 65 2C                                        TBNE    X, SCI_ISR_BD_NEPE_2                    ;parse search tree if pulse length is > 0
001C57 001C57 20 4C                                           JOB     SCI_ISR_BD_NEPE_4                       ;discard zero-length pulses (for whatever reasson they may occur)
                                      ;#BD posedge ISR (default IC0)
001C59 001C59 -> $1C59                SCI_ISR_BD_PE           EQU     *
                                                              ;Clear ICNE interrupt
001C59 001C59 MACRO                                           TIM_CLRIF       SCI_BD_ICPE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001C59 001C59 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001C59 001C59 18 0B 01 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
001C5E 001C5E DE 50                                           LDX     (TC0+(2*SCI_BD_ICPE))                   ;capture current edge (posedge)
001C60 001C60 DD 52                                           LDY     (TC0+(2*SCI_BD_ICNE))                   ;capture previous edge (posedge)
001C62 001C62 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
001C64 001C64 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
001C66 001C66 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001C66 001C66 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001C66 001C66 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
001C6B 001C6B MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
001C6B 001C6B 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
001C6E 001C6E 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
001C70 001C70 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
001C72 001C72 -> $1C72                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
001C72 001C72 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
001C74 001C74 26 2F                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
001C76 001C76 CC FF FF                                        LDD     #-1
001C79 001C79 18 13                                           EMULS                                           ;-1 * Y => Y:D
001C7B 001C7B 1A E6                                           LEAX    D,X                                     ;subtract timestamps
001C7D 001C7D 04 45 25                                        TBEQ    X, SCI_ISR_BD_NEPE_4                    ;discard zero-length pulses (for whatever reasson they may occur)
                                                              ;Select search tree tree (pulse length in X)
001C80 001C80 CD 28 B2                                        LDY     #SCI_BD_LOW_PULSE_TREE
                                                              ;JOB    SCI_ISR_BD_NEPE_2                       ;parse search tree
001C83 001C83 -> $1C83                SCI_ISR_BD_NEPE_2       EQU     *
                                                              ;Parse tree  (pulse length in X, search tree in Y)
001C83 001C83 MACRO                                           SCI_BD_PARSE
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;# Parse routine                                                               # (SCI_BD_PARSE)
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;#Parse search tree for detected pulse length                                    (SCI_BD_PARSE)
                                      ; args:   Y: root of the search tree                                             (SCI_BD_PARSE)
                                      ;         X: pulse length                                                        (SCI_BD_PARSE)
                                      ; result: D: list of matching baud rates (mirrored in high and low byte)         (SCI_BD_PARSE)
                                      ; SSTACK: 0 bytes                                                                (SCI_BD_PARSE)
                                      ;         X is preserved                                                         (SCI_BD_PARSE)
001C83 001C83 CC 00 00                                LDD     #$0000          ;  2 cycs       ;initialize X            (SCI_BD_PARSE)
001C86 001C86 E7 40                   LOOP            TST     0,Y             ;  3 cycs       ;check if lower boundary exists (SCI_BD_PARSE)
001C88 001C88 27 0A                                   BEQ     DONE            ;1/3 cycs       ;search done             (SCI_BD_PARSE)
001C8A 001C8A AE 75                                   CPX     6,Y+            ;  3 cycs       ;check if pulse length is shorter than lower boundary (SCI_BD_PARSE)
001C8C 001C8C 25 F8                                   BLO     LOOP            ;1/3 cycs       ;pulse length is shorter than lower boundary -> try a shorter range (SCI_BD_PARSE)
001C8E 001C8E EC 5C                                   LDD     -4,Y            ;  3 cycs       ;new lowest boundary found -> store valid baud rate field in index X (SCI_BD_PARSE)
001C90 001C90 ED 5E                                   LDY     -2,Y            ;  3 cycs       ;switch to the branch with higher compare values (SCI_BD_PARSE)
001C92 001C92 26 F2                                   BNE     LOOP            ;1/3 cycs       ;parse branch if it exists (SCI_BD_PARSE)
001C94 001C94 -> $1C94                DONE            EQU     *                               ;done, result in X       (SCI_BD_PARSE)
                                                              ;Update list of potential batd rates (matching baud rates in D)
001C94 001C94 14 10                                           SEI
001C96 001C96 F4 2D CF                                        ANDB    SCI_BD_LIST                             ;remove mismatching baud rates from the list
001C99 001C99 27 17                                           BEQ     SCI_ISR_BD_NEPE_5                       ;no valid baud rate found
001C9B 001C9B 7B 2D CF                                        STAB    SCI_BD_LIST
                                                              ;Check if baud rate has been determined (potential baud rates in B (not zero))
001C9E 001C9E 87                                              CLRA
001C9F 001C9F 42                      SCI_ISR_BD_NEPE_3       INCA
001CA0 001CA0 54                                              LSRB
001CA1 001CA1 24 FC                                           BCC     SCI_ISR_BD_NEPE_3
001CA3 001CA3 27 19                                           BEQ     SCI_ISR_BD_NEPE_6                       ;new baud rate found (index in A)
                                                              ;Done
001CA5 001CA5 MACRO                   SCI_ISR_BD_NEPE_4       ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001CA5 001CA5 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001CA8 001CA8 25 06                                           BLO     OF                                               (ISTACK_RTI)
001CAA 001CAA 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001CAD 001CAD 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001CAF 001CAF 0B                                              RTI                                                      (ISTACK_RTI)
001CB0 001CB0 00                      OF                      BGND                                                     (ISTACK_RTI)
001CB1 001CB1 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;No valid baud rate found
001CB2 001CB2 1F 2D CF FF EE          SCI_ISR_BD_NEPE_5       BRCLR   SCI_BD_LIST, #$FF, SCI_ISR_BD_NEPE_4    ;done
                                                              ;Restart baud rate detection
001CB7 001CB7 18 0B FF 2D CF                                  MOVB    #$FF, SCI_BD_LIST
001CBC 001CBC 20 E7                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;New baud rate found (index+1 in A, $00 in B)
001CBE 001CBE MACRO                   SCI_ISR_BD_NEPE_6       SCI_STOP_BD
                                      ;Stop baud rate detection                                                        (SCI_STOP_BD)
                                      ; args:   none                                                                   (SCI_STOP_BD)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD)
001CBE 001CBE 1F 2D CF FF 0E                                  BRCLR   SCI_BD_LIST, #$FF, DONE                 ;baud rate detection already inactive (SCI_STOP_BD)
                                                              ;Stop edge detection                                     (SCI_STOP_BD)
001CC3 001CC3 MACRO                                           SCI_BD_STOP_EDGE_DETECT                                  (SCI_STOP_BD)
                                      ;Stop edge detection                                                             (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;BCLR   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;stop edge detection (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
001CC3 001CC3 4D 4B 09                                        BCLR    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;Disable timer                                           (SCI_STOP_BD)
001CC6 001CC6 MACRO                                           TIM_MULT_DIS    ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC)) (SCI_STOP_BD)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD/TIM_MULT_DIS)
001CC6 001CC6 4D 4C 07                                        BCLR    TIE, #\1                                         (SCI_STOP_BD/TIM_MULT_DIS)
001CC9 001CC9 26 03                                           BNE     DONE                                             (SCI_STOP_BD/TIM_MULT_DIS)
001CCB 001CCB 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_BD/TIM_MULT_DIS)
001CCE 001CCE -> $1CCE                DONE                    EQU     *                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;                                                                       ;See  SCI_ISR_RX_2 (SCI_STOP_BD)
001CCE 001CCE 79 2D CF                                        CLR     SCI_BD_LIST                             ;clear check list (SCI_STOP_BD)
001CD1 001CD1 -> $1CD1                DONE                    EQU     *                                                (SCI_STOP_BD)
                                                              ;Set baud rate (index+1 in A, $00 in B)
001CD1 001CD1 48                                              LSLA                                            ;index -> addess offset
001CD2 001CD2 CE 28 A0                                        LDX     #SCI_BTAB-2                             ;look up prescaler value
001CD5 001CD5 EC E4                                           LDD     A,X                                     ;look up divider value
001CD7 001CD7 MACRO                                           SCI_SET_BAUD
                                      ;#Set baud rate                                                                  (SCI_SET_BAUD)
                                      ; args:   D: new SCIBD value                                                     (SCI_SET_BAUD)
                                      ; result: none                                                                   (SCI_SET_BAUD)
                                      ; SSTACK: 6 bytes                                                                (SCI_SET_BAUD)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD)
001CD7 001CD7 MACRO                                           SSTACK_JOBSR    SCI_SET_BAUD, 6                          (SCI_SET_BAUD)
                                      ;#Check stack and call subroutine                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_SET_BAUD/SSTACK_JOBSR)
001CD7 001CD7 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
001CD7 001CD7 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CD7 001CD7 8F 2D 70                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CDA 001CDA 18 25 FB BB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CDE 001CDE 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CE1 001CE1 18 22 FB BA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CE5 001CE5 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CE5 001CE5 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001CE5 001CE5 16 1B 0C                                        JOBSR   \1                                               (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#ifmac SCI_ERRSIG_STOP
                                      ;                       ;Clear error signal
                                      ;                       SCI_ERRSIG_STOP
                                      ;#endif
001CE8 001CE8 20 BB                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
001CEA 001CEA -> $1CEA                SCI_CODE_END            EQU     *
001CEA 001CEA -> $1CEA                SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
0028A1 0028A1                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
0028A1 0028A1 FF                                              ALIGN   1, $FF
                                                              ;List of prescaler values
0028A2 0028A2 -> $28A2                SCI_BTAB                EQU     *
0028A2 0028A2 01 46                                           DW      SCI_4800
0028A4 0028A4 00 D9                                           DW      SCI_7200
0028A6 0028A6 00 A3                                           DW      SCI_9600
0028A8 0028A8 00 6D                                           DW      SCI_14400
0028AA 0028AA 00 51                                           DW      SCI_19200
0028AC 0028AC 00 36                                           DW      SCI_28800
0028AE 0028AE 00 29                                           DW      SCI_38400
0028B0 0028B0 00 1B                                           DW      SCI_57600
0028B2 0028B2 -> $28B2                SCI_BTAB_END            EQU     *
                                                              ;Search tree for low pulses
0028B2 0028B2 MACRO                   SCI_BD_LOW_PULSE_TREE   SCI_BD_LOW_PULSE_TREE
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# S12CBase - SCI Baud Detection Search Trees                                  # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Copyright 2009-2012 Dirk Heisswolf                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    families.                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    it under the terms of the GNU General Public License as published by     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    the Free Software Foundation, either version 3 of the License, or        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    (at your option) any later version.                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is distributed in the hope that it will be useful,              # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    GNU General Public License for more details.                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    You should have received a copy of the GNU General Public License        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Description:                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file contains the two search trees which are required for the SCI   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    modules baud rate detection.                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    One is used to determine the set of baud rates that are valid for a      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    certain high pulse.                                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The other one is used to determine the set of baud rates that are valid  # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    for a certain low pulse.                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Each table assigs a set of valid baud rates to a range of pulse lengths. # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    lower boundary <= pulse length < upper boundary -> set of baud rates     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The format of a node entry is the following:                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    start of entry -> | lower boundary  | value of lower boundary            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  BRs   |  BRs   | set of boud rates - twice          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   | pointer to node with longer        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+ boundary value                     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    node node with -> | lower boundary  |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    even lower        +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    boundary value    |  BRs   |  BRs   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Generated on Thu, Nov 15 2012                                               # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Bus clock:              25.00 MHz                                           # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Frame format:           8N1                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Supported baud rates:                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        4800 ( 146)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        7200 (  D9)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        9600 (  A3)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       14400 (  6D)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       19200 (  51)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       28800 (  36)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       38400 (  29)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       57600 (  1B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Low pulse search tree                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_LOW_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    271 ( 10F)      1 . . . . . . . (80)   2001      2       27                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    416 ( 1A0)      1 1 . . . . . . (C0)   1621      1       35                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    542 ( 21E)      1 1 1 . . . . . (E0)   1091      3       44                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    624 ( 270)      . 1 1 . . . . . (60)    428      2       52                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    705 ( 2C1)      2 1 1 . . . . . (E0)    379      4       69                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    813 ( 32D)      2 1 1 1 . . . . (F0)    248      5       86                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    959 ( 3BF)      2 . 1 1 . . . . (B0)     70      6       95                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1058 ( 422)      . . 1 1 . . . . (30)     24      3       99                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1083 ( 43B)      . 2 1 1 . . . . (70)     31      8      108                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1095 ( 447)      . 2 1 1 1 . . . (78)     38      7       98                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1139 ( 473)      3 2 1 1 1 . . . (F8)     36      6      106                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1248 ( 4E0)      3 2 . 1 1 . . . (D8)     15      8      123                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1410 ( 582)      3 2 2 1 1 . . . (F8)      9      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1492 ( 5D4)      . 2 2 1 1 . . . (78)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1573 ( 625)      4 2 2 1 1 . . . (F8)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1626 ( 65A)      4 . 2 1 1 . . . (B8)      4     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1637 ( 665)      4 . 2 1 1 1 . . (BC)      5      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1750 ( 6D6)      4 3 2 1 1 1 . . (FC)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1872 ( 750)      4 3 2 . 1 1 . . (EC)      5      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1926 ( 786)      . 3 2 . 1 1 . . (6C)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2007 ( 7D7)      5 3 2 . 1 1 . . (EC)      5      5      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2115 ( 843)      5 3 2 2 1 1 . . (FC)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2116 ( 844)      5 3 . 2 1 1 . . (DC)      5      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2170 ( 87A)      5 3 . 2 1 1 1 . (DE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2278 ( 8E6)      5 3 3 2 1 1 1 . (FE)      7      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2293 ( 8F5)      5 . 3 2 1 1 1 . (BE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2361 ( 939)      . . 3 2 1 1 1 . (3E)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2418 ( 972)      . 4 3 2 1 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2441 ( 989)      6 4 3 2 1 1 1 . (FE)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2519 ( 9D7)      6 4 3 2 . 1 1 . (F6)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2795 ( AEB)      . 4 3 2 . 1 1 . (76)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2847 ( B1F)      . 4 3 2 2 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2875 ( B3B)      7 4 3 2 2 1 1 . (FE)      7      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2960 ( B90)      7 . 3 2 2 1 1 . (BE)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2984 ( BA8)      7 . . 2 2 1 1 . (9E)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3085 ( C0D)      7 5 . 2 2 1 1 . (DE)      6      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3146 ( C4A)      7 5 4 2 2 1 1 . (FE)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3174 ( C66)      7 5 4 . 2 1 1 . (EE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3229 ( C9D)      . 5 4 . 2 1 1 . (6E)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3265 ( CC1)      . 5 4 . 2 1 1 1 (6F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3309 ( CED)      8 5 4 . 2 1 1 1 (EF)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3417 ( D59)      8 5 4 3 2 1 1 1 (FF)      8      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3628 ( E2C)      8 . 4 3 2 1 1 1 (BF)      7      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3663 ( E4F)      . . 4 3 2 1 1 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3743 ( E9F)      9 . 4 3 2 1 1 1 (BF)      7      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3752 ( EA8)      9 6 4 3 2 1 1 1 (FF)      8      8      137                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3767 ( EB7)      9 6 4 3 2 . 1 1 (FB)      7      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3852 ( F0C)      9 6 . 3 2 . 1 1 (DB)      6     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4014 ( FAE)      9 6 5 3 2 . 1 1 (FB)      7      4      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4097 (1001)      . 6 5 3 2 . 1 1 (7B)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4257 (10A1)      . 6 5 3 2 2 1 1 (7F)      7      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4271 (10AF)      . 6 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4295 (10C7)      . . 5 3 . 2 1 1 (37)      5      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4419 (1143)      . 7 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4476 (117C)      . 7 5 . . 2 1 1 (67)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4599 (11F7)      . 7 5 . 3 2 1 1 (6F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4720 (1270)      . 7 5 4 3 2 1 1 (7F)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4721 (1271)      . 7 . 4 3 2 1 1 (5F)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4882 (1312)      . 7 6 4 3 2 1 1 (7F)      7      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4962 (1362)      . . 6 4 3 2 1 1 (3F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4992 (1380)      . . 6 4 3 2 . 1 (3D)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5086 (13DE)      . 8 6 4 3 2 . 1 (7D)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5589 (15D5)      . 8 . 4 3 2 . 1 (5D)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5629 (15FD)      . . . 4 3 2 . 1 (1D)      4      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5642 (160A)      . . . 4 3 2 2 1 (1F)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5750 (1676)      . . 7 4 3 2 2 1 (3F)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5753 (1679)      . 9 7 4 3 2 2 1 (7F)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5778 (1692)      . 9 7 . 3 2 2 1 (6F)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6022 (1786)      . 9 7 5 3 2 2 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6023 (1787)      . 9 7 5 . 2 2 1 (77)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6296 (1898)      . . 7 5 . 2 2 1 (37)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6351 (18CF)      . . 7 5 4 2 2 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6387 (18F3)      . . 7 5 4 . 2 1 (3B)      5      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6457 (1939)      . . . 5 4 . 2 1 (1B)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6618 (19DA)      . . 8 5 4 . 2 1 (3B)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6877 (1ADD)      . . 8 5 4 3 2 1 (3F)      6      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7081 (1BA9)      . . 8 . 4 3 2 1 (2F)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7324 (1C9C)      . . 8 6 4 3 2 1 (3F)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7325 (1C9D)      . . . 6 4 3 2 1 (1F)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7486 (1D3E)      . . 9 6 4 3 2 1 (3F)      6      5      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7510 (1D56)      . . 9 6 4 3 2 . (3E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7775 (1E5F)      . . 9 6 . 3 2 . (36)      4      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8103 (1FA7)      . . 9 6 5 3 2 . (3E)      5     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8193 (2001)      . . . 6 5 3 2 . (1E)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8383 (20BF)      . . . . 5 3 2 . ( E)      3      8      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8464 (2110)      . . . . 5 3 . . ( C)      2     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8489 (2129)      . . . . 5 3 . 2 ( D)      3     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8626 (21B2)      . . . 7 5 3 . 2 (1D)      4      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9007 (232F)      . . . 7 5 . . 2 (19)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9114 (239A)      . . . 7 5 . 3 2 (1B)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9498 (251A)      . . . 7 5 4 3 2 (1F)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9528 (2538)      . . . 7 . 4 3 2 (17)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9685 (25D5)      . . . . . 4 3 2 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9855 (267F)      . . . . 6 4 3 2 ( F)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9928 (26C8)      . . . 8 6 4 3 2 (1F)      5     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  10987 (2AEB)      . . . . 6 4 3 2 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11230 (2BDE)      . . . 9 6 4 3 2 (1F)      5      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11280 (2C10)      . . . 9 . 4 3 2 (17)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11607 (2D57)      . . . 9 7 4 3 2 (1F)      5      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11627 (2D6B)      . . . 9 7 . 3 2 (1B)      4     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11936 (2EA0)      . . . 9 7 . . 2 (19)      3     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12118 (2F56)      . . . 9 7 5 . 2 (1D)      4      6      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12289 (3001)      . . . . 7 5 . 2 ( D)      3     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12586 (312A)      . . . . 7 5 4 2 ( F)      4     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12735 (31BF)      . . . . 7 5 4 . ( E)      3      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13032 (32E8)      . . . . . 5 4 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13359 (342F)      . . . . 8 5 4 . ( E)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13713 (3591)      . . . . 8 5 4 3 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14248 (37A8)      . . . . 8 . 4 3 ( B)      3      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14738 (3992)      . . . . 8 6 4 3 ( F)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14784 (39C0)      . . . . . 6 4 3 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15111 (3B07)      . . . . 9 6 4 3 ( F)      4      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15408 (3C30)      . . . . 9 6 . 3 ( D)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16059 (3EBB)      . . . . 9 6 5 3 ( F)      4     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16536 (4098)      . . . . . 6 5 3 ( 7)      3      7      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16868 (41E4)      . . . . . . 5 3 ( 3)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17358 (43CE)      . . . . . 7 5 3 ( 7)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17959 (4627)      . . . . . 7 5 . ( 6)      2     11      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18881 (49C1)      . . . . . 7 . . ( 4)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18938 (49FA)      . . . . . 7 . 4 ( 5)      2      9      174                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19488 (4C20)      . . . . . . . 4 ( 1)      1     12      183                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19531 (4C4B)      . . . . . . 6 4 ( 3)      2     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19978 (4E0A)      . . . . . 8 6 4 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22108 (565C)      . . . . . . 6 4 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22353 (5751)      . . . . . . . 4 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22598 (5846)      . . . . . 9 . 4 ( 5)      2      8      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23003 (59DB)      . . . . . 9 7 4 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23183 (5A8F)      . . . . . 9 7 . ( 6)      2     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24162 (5E62)      . . . . . 9 7 5 ( 7)      3     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24728 (6098)      . . . . . . 7 5 ( 3)      2     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  25825 (64E1)      . . . . . . . 5 ( 1)      1      9      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  26475 (676B)      . . . . . . 8 5 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28408 (6EF8)      . . . . . . 8 . ( 2)      1     12      215                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29297 (7271)      . . . . . . . . ( 0)      0     14      224                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29386 (72CA)      . . . . . . . 6 ( 1)      1     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29947 (74FB)      . . . . . . 9 6 ( 3)      2     10      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32770 (8002)      . . . . . . . 6 ( 1)      1     12      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  33632 (8360)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  34611 (8733)      . . . . . . . 7 ( 1)      1     11      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  38856 (97C8)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  39835 (9B9B)      . . . . . . . 8 ( 1)      1     12      222                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  44081 (AC31)      . . . . . . . . ( 0)      0     14      231                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  45059 (B003)      . . . . . . . 9 ( 1)      1     13      229                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  49305 (C099)      . . . . . . . . ( 0)      0     14      238                (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      1                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#+-----0-----+                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#1           2                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#0           7                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#F +---------0----------+                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  2                    4                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  1                    2                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  E +------------------2------------------+                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2                                     F                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    C                                     A                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    1            +------------------------E-----------------------+            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                |            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                1            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3            7                                                D            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2            D                                                3            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    D  +---------7--------+                        +--------------E---------------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        |                              | (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        1                              2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3  4                  C                        5                              F (SCI_BD_LOW_PULSE_TREE)
                                      ;#    B  7                  0                        F                              5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    F +3-+          +-----D-----+           +------D-----+               +--------6---------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           |            |               |                  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           1            1               2                  4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  6          9           E           2            8               5                  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  2          8           2           7            9               1                  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      7 +5-+     +--9---+     +-C--+     +--0--+      +--8---+       +---A---+        +-----8------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     |     |      |      |       |       |        |            | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     1     1      1      1       2       2        3            5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4 4  6     8      B     C    E     0     3      6      A       0       B        7            8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      3 E  D     E      3     C    A     C     6      9      D       B       D        A            4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      B 0 +6+  +-6-+   +B-+  +1-+ +8+  +-7-+  +2-+   +2-+  +-D-+   +-F-+   +-E-+   +--8--+     +---6---+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  |   |  |  |   |  |  |   |   |   |   |   |   |     |     |       | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  1   1  1  1   1  1  1   1   1   2   2   2   3     3     4       6 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7  8   9   A  B  C  D E E  0   1  3  3   6  7  8   C   E   1   6   D   1     B     9       4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        8 6 5  4   3   E  9  6  5 9 B  A   7  1  D   7  8  F   9   5   B   7   5   B     0     F       E (SCI_BD_LOW_PULSE_TREE)
                                      ;#        2 5 0 +4+ +9+ +B+ 0 +6+ 9 F 7 +1+ +C+ 2 +E+ +6+ 6 +3+ +C+ +F+ +2+ +F+ +7+ +F-+  +7+  +-A-+   +-1-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |  |  | |  |   |   |   | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3  3  3 3  4   4   5   7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7 8 8 8 9 9 B B C C C E F 0 0 1 1 2 3 5 6 6 7 8 9 B C D F 1 3 5 6 C D 1  4  9 E  3   E   A   4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        D 5 8 4 7 F 7 D 1 A 4 9 E 4 0 0 A 4 F 7 8 D 0 7 8 C D A 9 5 A 2 9 3 C 1 6 2  2  9 B  C   0   8   F (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4 A 6 3 A 5 2 7 F 8 A D D F C 1 F 3 7 1 0 5 A 9 7 F A 9 D 6 7 9 A 8 8 0 B A +F+ 2 B +E+ +A+ +F+ +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            |       | | | | |   | | | | | | | | | | | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            1       2 2 2 2 2   2 3 3 3 3 3 4 4 4 5 5 5 6  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       0 1 3 5 A   E 0 2 5 9 C 1 6 C 6 9 E 7  7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            3       0 1 2 D E   A 0 E 9 C 3 E 2 4 5 D 6 6  3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       1 0 F 5 B   0 1 8 1 0 0 4 7 B C B 2 B +3-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              | | |   | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              4 4 5   6 6 8  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              9 C 7   0 E 0  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              C 2 5   9 F 0  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              1 0 1   8 8 2 +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7 8 9  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2 3 7  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        C 6 C  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        A 0 8 +3+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        |     | | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     A C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2     C 0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     3 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        1     1 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
0028B2 0028B2 01 A0 C0 C0 28 C0       N__1A0          DW      $01A0   $C0C0   N__270          ;if pulse >= 416 then check N__270 else check N__10F (SCI_BD_LOW_PULSE_TREE)
0028B8 0028B8 01 0F 80 80 00 00       N__10F          DW      $010F   $8080   $0000           ;if pulse >= 271 then the result is 80 else the result is 00 (SCI_BD_LOW_PULSE_TREE)
0028BE 0028BE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0028C0 0028C0 02 70 60 60 28 CE       N__270          DW      $0270   $6060   N__422          ;if pulse >= 624 then check N__422 else check N__21E (SCI_BD_LOW_PULSE_TREE)
0028C6 0028C6 02 1E E0 E0 00 00       N__21E          DW      $021E   $E0E0   $0000           ;if pulse >= 542 then the result is E0 else the result is C0 (SCI_BD_LOW_PULSE_TREE)
0028CC 0028CC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0028CE 0028CE 04 22 30 30 28 EC       N__422          DW      $0422   $3030   N__FAE          ;if pulse >= 1058 then check N__FAE else check N__2C1 (SCI_BD_LOW_PULSE_TREE)
0028D4 0028D4 02 C1 E0 E0 28 DC       N__2C1          DW      $02C1   $E0E0   N__32D          ;if pulse >= 705 then check N__32D else the result is 60 (SCI_BD_LOW_PULSE_TREE)
0028DA 0028DA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0028DC 0028DC 03 2D F0 F0 28 E4       N__32D          DW      $032D   $F0F0   N__3BF          ;if pulse >= 813 then check N__3BF else the result is E0 (SCI_BD_LOW_PULSE_TREE)
0028E2 0028E2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0028E4 0028E4 03 BF B0 B0 00 00       N__3BF          DW      $03BF   $B0B0   $0000           ;if pulse >= 959 then the result is B0 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
0028EA 0028EA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0028EC 0028EC 0F AE FB FB 2A 0C       N__FAE          DW      $0FAE   $FBFB   N_1D3E          ;if pulse >= 4014 then check N_1D3E else check N__7D7 (SCI_BD_LOW_PULSE_TREE)
0028F2 0028F2 07 D7 EC EC 29 4E       N__7D7          DW      $07D7   $ECEC   N__C0D          ;if pulse >= 2007 then check N__C0D else check N__473 (SCI_BD_LOW_PULSE_TREE)
0028F8 0028F8 04 73 F8 F8 29 0C       N__473          DW      $0473   $F8F8   N__625          ;if pulse >= 1139 then check N__625 else check N__447 (SCI_BD_LOW_PULSE_TREE)
0028FE 0028FE 04 47 78 78 00 00       N__447          DW      $0447   $7878   $0000           ;if pulse >= 1095 then the result is 78 else check N__43B (SCI_BD_LOW_PULSE_TREE)
002904 002904 04 3B 70 70 00 00       N__43B          DW      $043B   $7070   $0000           ;if pulse >= 1083 then the result is 70 else the result is 30 (SCI_BD_LOW_PULSE_TREE)
00290A 00290A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00290C 00290C 06 25 F8 F8 29 2A       N__625          DW      $0625   $F8F8   N__6D6          ;if pulse >= 1573 then check N__6D6 else check N__4E0 (SCI_BD_LOW_PULSE_TREE)
002912 002912 04 E0 D8 D8 29 1A       N__4E0          DW      $04E0   $D8D8   N__582          ;if pulse >= 1248 then check N__582 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
002918 002918 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00291A 00291A 05 82 F8 F8 29 22       N__582          DW      $0582   $F8F8   N__5D4          ;if pulse >= 1410 then check N__5D4 else the result is D8 (SCI_BD_LOW_PULSE_TREE)
002920 002920 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002922 002922 05 D4 78 78 00 00       N__5D4          DW      $05D4   $7878   $0000           ;if pulse >= 1492 then the result is 78 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
002928 002928 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00292A 00292A 06 D6 FC FC 29 3E       N__6D6          DW      $06D6   $FCFC   N__750          ;if pulse >= 1750 then check N__750 else check N__665 (SCI_BD_LOW_PULSE_TREE)
002930 002930 06 65 BC BC 00 00       N__665          DW      $0665   $BCBC   $0000           ;if pulse >= 1637 then the result is BC else check N__65A (SCI_BD_LOW_PULSE_TREE)
002936 002936 06 5A B8 B8 00 00       N__65A          DW      $065A   $B8B8   $0000           ;if pulse >= 1626 then the result is B8 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
00293C 00293C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00293E 00293E 07 50 EC EC 29 46       N__750          DW      $0750   $ECEC   N__786          ;if pulse >= 1872 then check N__786 else the result is FC (SCI_BD_LOW_PULSE_TREE)
002944 002944 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002946 002946 07 86 6C 6C 00 00       N__786          DW      $0786   $6C6C   $0000           ;if pulse >= 1926 then the result is 6C else the result is EC (SCI_BD_LOW_PULSE_TREE)
00294C 00294C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00294E 00294E 0C 0D DE DE 29 B8       N__C0D          DW      $0C0D   $DEDE   N__E2C          ;if pulse >= 3085 then check N__E2C else check N__989 (SCI_BD_LOW_PULSE_TREE)
002954 002954 09 89 FE FE 29 8C       N__989          DW      $0989   $FEFE   N__B3B          ;if pulse >= 2441 then check N__B3B else check N__8E6 (SCI_BD_LOW_PULSE_TREE)
00295A 00295A 08 E6 FE FE 29 76       N__8E6          DW      $08E6   $FEFE   N__939          ;if pulse >= 2278 then check N__939 else check N__844 (SCI_BD_LOW_PULSE_TREE)
002960 002960 08 44 DC DC 29 6E       N__844          DW      $0844   $DCDC   N__87A          ;if pulse >= 2116 then check N__87A else check N__843 (SCI_BD_LOW_PULSE_TREE)
002966 002966 08 43 FC FC 00 00       N__843          DW      $0843   $FCFC   $0000           ;if pulse >= 2115 then the result is FC else the result is EC (SCI_BD_LOW_PULSE_TREE)
00296C 00296C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00296E 00296E 08 7A DE DE 00 00       N__87A          DW      $087A   $DEDE   $0000           ;if pulse >= 2170 then the result is DE else the result is DC (SCI_BD_LOW_PULSE_TREE)
002974 002974 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002976 002976 09 39 3E 3E 29 84       N__939          DW      $0939   $3E3E   N__972          ;if pulse >= 2361 then check N__972 else check N__8F5 (SCI_BD_LOW_PULSE_TREE)
00297C 00297C 08 F5 BE BE 00 00       N__8F5          DW      $08F5   $BEBE   $0000           ;if pulse >= 2293 then the result is BE else the result is FE (SCI_BD_LOW_PULSE_TREE)
002982 002982 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002984 002984 09 72 7E 7E 00 00       N__972          DW      $0972   $7E7E   $0000           ;if pulse >= 2418 then the result is 7E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
00298A 00298A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00298C 00298C 0B 3B FE FE 29 A8       N__B3B          DW      $0B3B   $FEFE   N__B90          ;if pulse >= 2875 then check N__B90 else check N__AEB (SCI_BD_LOW_PULSE_TREE)
002992 002992 0A EB 76 76 29 A0       N__AEB          DW      $0AEB   $7676   N__B1F          ;if pulse >= 2795 then check N__B1F else check N__9D7 (SCI_BD_LOW_PULSE_TREE)
002998 002998 09 D7 F6 F6 00 00       N__9D7          DW      $09D7   $F6F6   $0000           ;if pulse >= 2519 then the result is F6 else the result is FE (SCI_BD_LOW_PULSE_TREE)
00299E 00299E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029A0 0029A0 0B 1F 7E 7E 00 00       N__B1F          DW      $0B1F   $7E7E   $0000           ;if pulse >= 2847 then the result is 7E else the result is 76 (SCI_BD_LOW_PULSE_TREE)
0029A6 0029A6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029A8 0029A8 0B 90 BE BE 29 B0       N__B90          DW      $0B90   $BEBE   N__BA8          ;if pulse >= 2960 then check N__BA8 else the result is FE (SCI_BD_LOW_PULSE_TREE)
0029AE 0029AE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029B0 0029B0 0B A8 9E 9E 00 00       N__BA8          DW      $0BA8   $9E9E   $0000           ;if pulse >= 2984 then the result is 9E else the result is BE (SCI_BD_LOW_PULSE_TREE)
0029B6 0029B6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029B8 0029B8 0E 2C BF BF 29 E8       N__E2C          DW      $0E2C   $BFBF   N__EA8          ;if pulse >= 3628 then check N__EA8 else check N__CC1 (SCI_BD_LOW_PULSE_TREE)
0029BE 0029BE 0C C1 6F 6F 29 DA       N__CC1          DW      $0CC1   $6F6F   N__D59          ;if pulse >= 3265 then check N__D59 else check N__C66 (SCI_BD_LOW_PULSE_TREE)
0029C4 0029C4 0C 66 EE EE 29 D2       N__C66          DW      $0C66   $EEEE   N__C9D          ;if pulse >= 3174 then check N__C9D else check N__C4A (SCI_BD_LOW_PULSE_TREE)
0029CA 0029CA 0C 4A FE FE 00 00       N__C4A          DW      $0C4A   $FEFE   $0000           ;if pulse >= 3146 then the result is FE else the result is DE (SCI_BD_LOW_PULSE_TREE)
0029D0 0029D0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029D2 0029D2 0C 9D 6E 6E 00 00       N__C9D          DW      $0C9D   $6E6E   $0000           ;if pulse >= 3229 then the result is 6E else the result is EE (SCI_BD_LOW_PULSE_TREE)
0029D8 0029D8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029DA 0029DA 0D 59 FF FF 00 00       N__D59          DW      $0D59   $FFFF   $0000           ;if pulse >= 3417 then the result is FF else check N__CED (SCI_BD_LOW_PULSE_TREE)
0029E0 0029E0 0C ED EF EF 00 00       N__CED          DW      $0CED   $EFEF   $0000           ;if pulse >= 3309 then the result is EF else the result is 6F (SCI_BD_LOW_PULSE_TREE)
0029E6 0029E6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029E8 0029E8 0E A8 FF FF 29 FC       N__EA8          DW      $0EA8   $FFFF   N__EB7          ;if pulse >= 3752 then check N__EB7 else check N__E9F (SCI_BD_LOW_PULSE_TREE)
0029EE 0029EE 0E 9F BF BF 00 00       N__E9F          DW      $0E9F   $BFBF   $0000           ;if pulse >= 3743 then the result is BF else check N__E4F (SCI_BD_LOW_PULSE_TREE)
0029F4 0029F4 0E 4F 3F 3F 00 00       N__E4F          DW      $0E4F   $3F3F   $0000           ;if pulse >= 3663 then the result is 3F else the result is BF (SCI_BD_LOW_PULSE_TREE)
0029FA 0029FA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
0029FC 0029FC 0E B7 FB FB 2A 04       N__EB7          DW      $0EB7   $FBFB   N__F0C          ;if pulse >= 3767 then check N__F0C else the result is FF (SCI_BD_LOW_PULSE_TREE)
002A02 002A02 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A04 002A04 0F 0C DB DB 00 00       N__F0C          DW      $0F0C   $DBDB   $0000           ;if pulse >= 3852 then the result is DB else the result is FB (SCI_BD_LOW_PULSE_TREE)
002A0A 002A0A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A0C 002A0C 1D 3E 3F 3F 2A E4       N_1D3E          DW      $1D3E   $3F3F   N_2F56          ;if pulse >= 7486 then check N_2F56 else check N_15FD (SCI_BD_LOW_PULSE_TREE)
002A12 002A12 15 FD 1D 1D 2A 7A       N_15FD          DW      $15FD   $1D1D   N_1898          ;if pulse >= 5629 then check N_1898 else check N_1270 (SCI_BD_LOW_PULSE_TREE)
002A18 002A18 12 70 7F 7F 2A 50       N_1270          DW      $1270   $7F7F   N_1362          ;if pulse >= 4720 then check N_1362 else check N_10C7 (SCI_BD_LOW_PULSE_TREE)
002A1E 002A1E 10 C7 37 37 2A 3A       N_10C7          DW      $10C7   $3737   N_117C          ;if pulse >= 4295 then check N_117C else check N_10A1 (SCI_BD_LOW_PULSE_TREE)
002A24 002A24 10 A1 7F 7F 2A 32       N_10A1          DW      $10A1   $7F7F   N_10AF          ;if pulse >= 4257 then check N_10AF else check N_1001 (SCI_BD_LOW_PULSE_TREE)
002A2A 002A2A 10 01 7B 7B 00 00       N_1001          DW      $1001   $7B7B   $0000           ;if pulse >= 4097 then the result is 7B else the result is FB (SCI_BD_LOW_PULSE_TREE)
002A30 002A30 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A32 002A32 10 AF 77 77 00 00       N_10AF          DW      $10AF   $7777   $0000           ;if pulse >= 4271 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
002A38 002A38 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A3A 002A3A 11 7C 67 67 2A 48       N_117C          DW      $117C   $6767   N_11F7          ;if pulse >= 4476 then check N_11F7 else check N_1143 (SCI_BD_LOW_PULSE_TREE)
002A40 002A40 11 43 77 77 00 00       N_1143          DW      $1143   $7777   $0000           ;if pulse >= 4419 then the result is 77 else the result is 37 (SCI_BD_LOW_PULSE_TREE)
002A46 002A46 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A48 002A48 11 F7 6F 6F 00 00       N_11F7          DW      $11F7   $6F6F   $0000           ;if pulse >= 4599 then the result is 6F else the result is 67 (SCI_BD_LOW_PULSE_TREE)
002A4E 002A4E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A50 002A50 13 62 3F 3F 2A 64       N_1362          DW      $1362   $3F3F   N_13DE          ;if pulse >= 4962 then check N_13DE else check N_1312 (SCI_BD_LOW_PULSE_TREE)
002A56 002A56 13 12 7F 7F 00 00       N_1312          DW      $1312   $7F7F   $0000           ;if pulse >= 4882 then the result is 7F else check N_1271 (SCI_BD_LOW_PULSE_TREE)
002A5C 002A5C 12 71 5F 5F 00 00       N_1271          DW      $1271   $5F5F   $0000           ;if pulse >= 4721 then the result is 5F else the result is 7F (SCI_BD_LOW_PULSE_TREE)
002A62 002A62 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A64 002A64 13 DE 7D 7D 2A 72       N_13DE          DW      $13DE   $7D7D   N_15D5          ;if pulse >= 5086 then check N_15D5 else check N_1380 (SCI_BD_LOW_PULSE_TREE)
002A6A 002A6A 13 80 3D 3D 00 00       N_1380          DW      $1380   $3D3D   $0000           ;if pulse >= 4992 then the result is 3D else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002A70 002A70 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A72 002A72 15 D5 5D 5D 00 00       N_15D5          DW      $15D5   $5D5D   $0000           ;if pulse >= 5589 then the result is 5D else the result is 7D (SCI_BD_LOW_PULSE_TREE)
002A78 002A78 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A7A 002A7A 18 98 37 37 2A AC       N_1898          DW      $1898   $3737   N_1ADD          ;if pulse >= 6296 then check N_1ADD else check N_1692 (SCI_BD_LOW_PULSE_TREE)
002A80 002A80 16 92 6F 6F 2A 9C       N_1692          DW      $1692   $6F6F   N_1786          ;if pulse >= 5778 then check N_1786 else check N_1676 (SCI_BD_LOW_PULSE_TREE)
002A86 002A86 16 76 3F 3F 2A 94       N_1676          DW      $1676   $3F3F   N_1679          ;if pulse >= 5750 then check N_1679 else check N_160A (SCI_BD_LOW_PULSE_TREE)
002A8C 002A8C 16 0A 1F 1F 00 00       N_160A          DW      $160A   $1F1F   $0000           ;if pulse >= 5642 then the result is 1F else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002A92 002A92 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A94 002A94 16 79 7F 7F 00 00       N_1679          DW      $1679   $7F7F   $0000           ;if pulse >= 5753 then the result is 7F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002A9A 002A9A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002A9C 002A9C 17 86 7F 7F 2A A4       N_1786          DW      $1786   $7F7F   N_1787          ;if pulse >= 6022 then check N_1787 else the result is 6F (SCI_BD_LOW_PULSE_TREE)
002AA2 002AA2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002AA4 002AA4 17 87 77 77 00 00       N_1787          DW      $1787   $7777   $0000           ;if pulse >= 6023 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
002AAA 002AAA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002AAC 002AAC 1A DD 3F 3F 2A CE       N_1ADD          DW      $1ADD   $3F3F   N_1C9C          ;if pulse >= 6877 then check N_1C9C else check N_18F3 (SCI_BD_LOW_PULSE_TREE)
002AB2 002AB2 18 F3 3B 3B 2A C0       N_18F3          DW      $18F3   $3B3B   N_19DA          ;if pulse >= 6387 then check N_19DA else check N_18CF (SCI_BD_LOW_PULSE_TREE)
002AB8 002AB8 18 CF 3F 3F 00 00       N_18CF          DW      $18CF   $3F3F   $0000           ;if pulse >= 6351 then the result is 3F else the result is 37 (SCI_BD_LOW_PULSE_TREE)
002ABE 002ABE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002AC0 002AC0 19 DA 3B 3B 00 00       N_19DA          DW      $19DA   $3B3B   $0000           ;if pulse >= 6618 then the result is 3B else check N_1939 (SCI_BD_LOW_PULSE_TREE)
002AC6 002AC6 19 39 1B 1B 00 00       N_1939          DW      $1939   $1B1B   $0000           ;if pulse >= 6457 then the result is 1B else the result is 3B (SCI_BD_LOW_PULSE_TREE)
002ACC 002ACC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002ACE 002ACE 1C 9C 3F 3F 2A DC       N_1C9C          DW      $1C9C   $3F3F   N_1C9D          ;if pulse >= 7324 then check N_1C9D else check N_1BA9 (SCI_BD_LOW_PULSE_TREE)
002AD4 002AD4 1B A9 2F 2F 00 00       N_1BA9          DW      $1BA9   $2F2F   $0000           ;if pulse >= 7081 then the result is 2F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002ADA 002ADA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002ADC 002ADC 1C 9D 1F 1F 00 00       N_1C9D          DW      $1C9D   $1F1F   $0000           ;if pulse >= 7325 then the result is 1F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002AE2 002AE2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002AE4 002AE4 2F 56 1D 1D 2B 80       N_2F56          DW      $2F56   $1D1D   N_4098          ;if pulse >= 12118 then check N_4098 else check N_251A (SCI_BD_LOW_PULSE_TREE)
002AEA 002AEA 25 1A 1F 1F 2B 36       N_251A          DW      $251A   $1F1F   N_2BDE          ;if pulse >= 9498 then check N_2BDE else check N_20BF (SCI_BD_LOW_PULSE_TREE)
002AF0 002AF0 20 BF 0E 0E 2B 14       N_20BF          DW      $20BF   $0E0E   N_21B2          ;if pulse >= 8383 then check N_21B2 else check N_1E5F (SCI_BD_LOW_PULSE_TREE)
002AF6 002AF6 1E 5F 36 36 2B 04       N_1E5F          DW      $1E5F   $3636   N_1FA7          ;if pulse >= 7775 then check N_1FA7 else check N_1D56 (SCI_BD_LOW_PULSE_TREE)
002AFC 002AFC 1D 56 3E 3E 00 00       N_1D56          DW      $1D56   $3E3E   $0000           ;if pulse >= 7510 then the result is 3E else the result is 3F (SCI_BD_LOW_PULSE_TREE)
002B02 002B02 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B04 002B04 1F A7 3E 3E 2B 0C       N_1FA7          DW      $1FA7   $3E3E   N_2001          ;if pulse >= 8103 then check N_2001 else the result is 36 (SCI_BD_LOW_PULSE_TREE)
002B0A 002B0A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B0C 002B0C 20 01 1E 1E 00 00       N_2001          DW      $2001   $1E1E   $0000           ;if pulse >= 8193 then the result is 1E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
002B12 002B12 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B14 002B14 21 B2 1D 1D 2B 28       N_21B2          DW      $21B2   $1D1D   N_239A          ;if pulse >= 8626 then check N_239A else check N_2129 (SCI_BD_LOW_PULSE_TREE)
002B1A 002B1A 21 29 0D 0D 00 00       N_2129          DW      $2129   $0D0D   $0000           ;if pulse >= 8489 then the result is 0D else check N_2110 (SCI_BD_LOW_PULSE_TREE)
002B20 002B20 21 10 0C 0C 00 00       N_2110          DW      $2110   $0C0C   $0000           ;if pulse >= 8464 then the result is 0C else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002B26 002B26 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B28 002B28 23 9A 1B 1B 00 00       N_239A          DW      $239A   $1B1B   $0000           ;if pulse >= 9114 then the result is 1B else check N_232F (SCI_BD_LOW_PULSE_TREE)
002B2E 002B2E 23 2F 19 19 00 00       N_232F          DW      $232F   $1919   $0000           ;if pulse >= 9007 then the result is 19 else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002B34 002B34 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B36 002B36 2B DE 1F 1F 2B 62       N_2BDE          DW      $2BDE   $1F1F   N_2D57          ;if pulse >= 11230 then check N_2D57 else check N_267F (SCI_BD_LOW_PULSE_TREE)
002B3C 002B3C 26 7F 0F 0F 2B 52       N_267F          DW      $267F   $0F0F   N_26C8          ;if pulse >= 9855 then check N_26C8 else check N_2538 (SCI_BD_LOW_PULSE_TREE)
002B42 002B42 25 38 17 17 2B 4A       N_2538          DW      $2538   $1717   N_25D5          ;if pulse >= 9528 then check N_25D5 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002B48 002B48 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B4A 002B4A 25 D5 07 07 00 00       N_25D5          DW      $25D5   $0707   $0000           ;if pulse >= 9685 then the result is 07 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
002B50 002B50 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B52 002B52 26 C8 1F 1F 2B 5A       N_26C8          DW      $26C8   $1F1F   N_2AEB          ;if pulse >= 9928 then check N_2AEB else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002B58 002B58 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B5A 002B5A 2A EB 0F 0F 00 00       N_2AEB          DW      $2AEB   $0F0F   $0000           ;if pulse >= 10987 then the result is 0F else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002B60 002B60 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B62 002B62 2D 57 1F 1F 2B 70       N_2D57          DW      $2D57   $1F1F   N_2D6B          ;if pulse >= 11607 then check N_2D6B else check N_2C10 (SCI_BD_LOW_PULSE_TREE)
002B68 002B68 2C 10 17 17 00 00       N_2C10          DW      $2C10   $1717   $0000           ;if pulse >= 11280 then the result is 17 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002B6E 002B6E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B70 002B70 2D 6B 1B 1B 2B 78       N_2D6B          DW      $2D6B   $1B1B   N_2EA0          ;if pulse >= 11627 then check N_2EA0 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
002B76 002B76 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B78 002B78 2E A0 19 19 00 00       N_2EA0          DW      $2EA0   $1919   $0000           ;if pulse >= 11936 then the result is 19 else the result is 1B (SCI_BD_LOW_PULSE_TREE)
002B7E 002B7E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002B80 002B80 40 98 07 07 2B DA       N_4098          DW      $4098   $0707   N_5846          ;if pulse >= 16536 then check N_5846 else check N_37A8 (SCI_BD_LOW_PULSE_TREE)
002B86 002B86 37 A8 0B 0B 2B B6       N_37A8          DW      $37A8   $0B0B   N_3B07          ;if pulse >= 14248 then check N_3B07 else check N_31BF (SCI_BD_LOW_PULSE_TREE)
002B8C 002B8C 31 BF 0E 0E 2B A0       N_31BF          DW      $31BF   $0E0E   N_342F          ;if pulse >= 12735 then check N_342F else check N_312A (SCI_BD_LOW_PULSE_TREE)
002B92 002B92 31 2A 0F 0F 00 00       N_312A          DW      $312A   $0F0F   $0000           ;if pulse >= 12586 then the result is 0F else check N_3001 (SCI_BD_LOW_PULSE_TREE)
002B98 002B98 30 01 0D 0D 00 00       N_3001          DW      $3001   $0D0D   $0000           ;if pulse >= 12289 then the result is 0D else the result is 1D (SCI_BD_LOW_PULSE_TREE)
002B9E 002B9E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BA0 002BA0 34 2F 0E 0E 2B AE       N_342F          DW      $342F   $0E0E   N_3591          ;if pulse >= 13359 then check N_3591 else check N_32E8 (SCI_BD_LOW_PULSE_TREE)
002BA6 002BA6 32 E8 06 06 00 00       N_32E8          DW      $32E8   $0606   $0000           ;if pulse >= 13032 then the result is 06 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002BAC 002BAC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BAE 002BAE 35 91 0F 0F 00 00       N_3591          DW      $3591   $0F0F   $0000           ;if pulse >= 13713 then the result is 0F else the result is 0E (SCI_BD_LOW_PULSE_TREE)
002BB4 002BB4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BB6 002BB6 3B 07 0F 0F 2B CC       N_3B07          DW      $3B07   $0F0F   N_3EBB          ;if pulse >= 15111 then check N_3EBB else check N_3992 (SCI_BD_LOW_PULSE_TREE)
002BBC 002BBC 39 92 0F 0F 2B C4       N_3992          DW      $3992   $0F0F   N_39C0          ;if pulse >= 14738 then check N_39C0 else the result is 0B (SCI_BD_LOW_PULSE_TREE)
002BC2 002BC2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BC4 002BC4 39 C0 07 07 00 00       N_39C0          DW      $39C0   $0707   $0000           ;if pulse >= 14784 then the result is 07 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002BCA 002BCA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BCC 002BCC 3E BB 0F 0F 00 00       N_3EBB          DW      $3EBB   $0F0F   $0000           ;if pulse >= 16059 then the result is 0F else check N_3C30 (SCI_BD_LOW_PULSE_TREE)
002BD2 002BD2 3C 30 0D 0D 00 00       N_3C30          DW      $3C30   $0D0D   $0000           ;if pulse >= 15408 then the result is 0D else the result is 0F (SCI_BD_LOW_PULSE_TREE)
002BD8 002BD8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BDA 002BDA 58 46 05 05 2C 28       N_5846          DW      $5846   $0505   N_64E1          ;if pulse >= 22598 then check N_64E1 else check N_49FA (SCI_BD_LOW_PULSE_TREE)
002BE0 002BE0 49 FA 05 05 2C 04       N_49FA          DW      $49FA   $0505   N_4E0A          ;if pulse >= 18938 then check N_4E0A else check N_43CE (SCI_BD_LOW_PULSE_TREE)
002BE6 002BE6 43 CE 07 07 2B F4       N_43CE          DW      $43CE   $0707   N_4627          ;if pulse >= 17358 then check N_4627 else check N_41E4 (SCI_BD_LOW_PULSE_TREE)
002BEC 002BEC 41 E4 03 03 00 00       N_41E4          DW      $41E4   $0303   $0000           ;if pulse >= 16868 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002BF2 002BF2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BF4 002BF4 46 27 06 06 2B FC       N_4627          DW      $4627   $0606   N_49C1          ;if pulse >= 17959 then check N_49C1 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002BFA 002BFA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002BFC 002BFC 49 C1 04 04 00 00       N_49C1          DW      $49C1   $0404   $0000           ;if pulse >= 18881 then the result is 04 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
002C02 002C02 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C04 002C04 4E 0A 07 07 2C 18       N_4E0A          DW      $4E0A   $0707   N_565C          ;if pulse >= 19978 then check N_565C else check N_4C4B (SCI_BD_LOW_PULSE_TREE)
002C0A 002C0A 4C 4B 03 03 00 00       N_4C4B          DW      $4C4B   $0303   $0000           ;if pulse >= 19531 then the result is 03 else check N_4C20 (SCI_BD_LOW_PULSE_TREE)
002C10 002C10 4C 20 01 01 00 00       N_4C20          DW      $4C20   $0101   $0000           ;if pulse >= 19488 then the result is 01 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
002C16 002C16 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C18 002C18 56 5C 03 03 2C 20       N_565C          DW      $565C   $0303   N_5751          ;if pulse >= 22108 then check N_5751 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002C1E 002C1E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C20 002C20 57 51 01 01 00 00       N_5751          DW      $5751   $0101   $0000           ;if pulse >= 22353 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002C26 002C26 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C28 002C28 64 E1 01 01 2C 4C       N_64E1          DW      $64E1   $0101   N_74FB          ;if pulse >= 25825 then check N_74FB else check N_5A8F (SCI_BD_LOW_PULSE_TREE)
002C2E 002C2E 5A 8F 06 06 2C 3C       N_5A8F          DW      $5A8F   $0606   N_5E62          ;if pulse >= 23183 then check N_5E62 else check N_59DB (SCI_BD_LOW_PULSE_TREE)
002C34 002C34 59 DB 07 07 00 00       N_59DB          DW      $59DB   $0707   $0000           ;if pulse >= 23003 then the result is 07 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
002C3A 002C3A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C3C 002C3C 5E 62 07 07 2C 44       N_5E62          DW      $5E62   $0707   N_6098          ;if pulse >= 24162 then check N_6098 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
002C42 002C42 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C44 002C44 60 98 03 03 00 00       N_6098          DW      $6098   $0303   $0000           ;if pulse >= 24728 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
002C4A 002C4A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C4C 002C4C 74 FB 03 03 2C 70       N_74FB          DW      $74FB   $0303   N_8733          ;if pulse >= 29947 then check N_8733 else check N_676B (SCI_BD_LOW_PULSE_TREE)
002C52 002C52 67 6B 03 03 2C 5A       N_676B          DW      $676B   $0303   N_6EF8          ;if pulse >= 26475 then check N_6EF8 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002C58 002C58 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C5A 002C5A 6E F8 02 02 2C 62       N_6EF8          DW      $6EF8   $0202   N_72CA          ;if pulse >= 28408 then check N_72CA else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002C60 002C60 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C62 002C62 72 CA 01 01 00 00       N_72CA          DW      $72CA   $0101   $0000           ;if pulse >= 29386 then the result is 01 else check N_7271 (SCI_BD_LOW_PULSE_TREE)
002C68 002C68 72 71 00 00 00 00       N_7271          DW      $7271   $0000   $0000           ;if pulse >= 29297 then the result is 00 else the result is 02 (SCI_BD_LOW_PULSE_TREE)
002C6E 002C6E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C70 002C70 87 33 01 01 2C 86       N_8733          DW      $8733   $0101   N_9B9B          ;if pulse >= 34611 then check N_9B9B else check N_8002 (SCI_BD_LOW_PULSE_TREE)
002C76 002C76 80 02 01 01 2C 7E       N_8002          DW      $8002   $0101   N_8360          ;if pulse >= 32770 then check N_8360 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
002C7C 002C7C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C7E 002C7E 83 60 00 00 00 00       N_8360          DW      $8360   $0000   $0000           ;if pulse >= 33632 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002C84 002C84 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C86 002C86 9B 9B 01 01 2C 94       N_9B9B          DW      $9B9B   $0101   N_B003          ;if pulse >= 39835 then check N_B003 else check N_97C8 (SCI_BD_LOW_PULSE_TREE)
002C8C 002C8C 97 C8 00 00 00 00       N_97C8          DW      $97C8   $0000   $0000           ;if pulse >= 38856 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002C92 002C92 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002C94 002C94 B0 03 01 01 2C A2       N_B003          DW      $B003   $0101   N_C099          ;if pulse >= 45059 then check N_C099 else check N_AC31 (SCI_BD_LOW_PULSE_TREE)
002C9A 002C9A AC 31 00 00 00 00       N_AC31          DW      $AC31   $0000   $0000           ;if pulse >= 44081 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002CA0 002CA0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
002CA2 002CA2 C0 99 00 00 00 00       N_C099          DW      $C099   $0000   $0000           ;if pulse >= 49305 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
002CA8 002CA8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
                                                              ;Search tree for high pulses
002CAA 002CAA MACRO                   SCI_BD_HIGH_PULSE_TREE  SCI_BD_HIGH_PULSE_TREE
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;# High pulse search tree                                                      # (SCI_BD_HIGH_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    412 ( 19C)      1 . . . . . . . (80)     11      3       37                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    633 ( 279)      1 1 . . . . . . (C0)     18      2       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    824 ( 338)      1 1 1 . . . . . (E0)     22      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1236 ( 4D4)      1 1 1 1 . . . . (F0)     19      1       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1664 ( 680)      1 1 1 1 1 . . . (F8)     14      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   2489 ( 9B9)      1 1 1 1 1 1 . . (FC)      6      2       52                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   3298 ( CE2)      1 1 1 1 1 1 1 . (FE)      7      4       61                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4963 (1363)      1 1 1 1 1 1 1 1 (FF)      8      3       51                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   D                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;# +-4-+                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 2   9                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 7   B                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;#+9+ +9+                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | 1                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#1 3 6 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#9 3 8 6                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#C 8 0 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      C                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      E                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      2                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
002CAA 002CAA 04 D4 F0 F0 2C C6       N__4D4          DW      $04D4   $F0F0   N__9B9          ;if pulse >= 1236 then check N__9B9 else check N__279 (SCI_BD_HIGH_PULSE_TREE)
002CB0 002CB0 02 79 C0 C0 2C BE       N__279          DW      $0279   $C0C0   N__338          ;if pulse >= 633 then check N__338 else check N__19C (SCI_BD_HIGH_PULSE_TREE)
002CB6 002CB6 01 9C 80 80 00 00       N__19C          DW      $019C   $8080   $0000           ;if pulse >= 412 then the result is 80 else the result is 00 (SCI_BD_HIGH_PULSE_TREE)
002CBC 002CBC 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002CBE 002CBE 03 38 E0 E0 00 00       N__338          DW      $0338   $E0E0   $0000           ;if pulse >= 824 then the result is E0 else the result is C0 (SCI_BD_HIGH_PULSE_TREE)
002CC4 002CC4 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002CC6 002CC6 09 B9 FC FC 2C D4       N__9B9          DW      $09B9   $FCFC   N_1363          ;if pulse >= 2489 then check N_1363 else check N__680 (SCI_BD_HIGH_PULSE_TREE)
002CCC 002CCC 06 80 F8 F8 00 00       N__680          DW      $0680   $F8F8   $0000           ;if pulse >= 1664 then the result is F8 else the result is F0 (SCI_BD_HIGH_PULSE_TREE)
002CD2 002CD2 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002CD4 002CD4 13 63 FF FF 00 00       N_1363          DW      $1363   $FFFF   $0000           ;if pulse >= 4963 then the result is FF else check N__CE2 (SCI_BD_HIGH_PULSE_TREE)
002CDA 002CDA 0C E2 FE FE 00 00       N__CE2          DW      $0CE2   $FEFE   $0000           ;if pulse >= 3298 then the result is FE else the result is FC (SCI_BD_HIGH_PULSE_TREE)
002CE0 002CE0 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
002CE2 002CE2 -> $2CE2                SCI_TABS_END            EQU     *
002CE2 002CE2 -> $2CE2                SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB       - print a string (non-blocking)                    #
                                      ;#    STRING_PRINT_BL       - print a string (blocking)                        #
                                      ;#    STRING_FILL_NB        - print a number of filler characters (non-bl.)    #
                                      ;#    STRING_FILL_BL        - print a number of filler characters (blocking)   #
                                      ;#    STRING_UPPER          - convert a character to upper case                #
                                      ;#    STRING_LOWER          - convert a character to lower case                #
                                      ;#    STRING_PRINTABLE      - make character printable                         #
                                      ;#    STRING_SKIP_WS        - skip whitespace characters                       #
                                      ;#    STRING_SKIP_AND_COUNT - determine the length of a string                 #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - Fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;#    June 10, 2013                                                            #
                                      ;#      - Turned STRING_UPPER and STRING_LOWER into subroutines                #
                                      ;#      - Added STRING_SKIP_WS                                                 #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    October 31, 2013                                                         #
                                      ;#      - Replaced STRING_LENGTH by STRING_SKIP_AND_COUNT                      #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Added #ifdef's for rarely used functions STRING_FILL_BL,             #
                                      ;#        STRING_FILL_NB, STRING_SKIP_WS, and STRING_LOWER                     #
                                      ;#    March 3, 2014                                                            #
                                      ;#      - Added macro STRING_IS_PRINTABLE                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
002CE2 002CE2 -> $0001                STRING_BLOCKING_ON      EQU     1       ;blocking functions enabled by default
                                      ;Enable rarely used subroutines
                                      ;STRING_FILL_BL and STRING_FILL_NB
002CE2 002CE2 -> $0001                STRING_FILL_OFF         EQU     1       ;STRING_FILL_BL/STRING_FILL_NB disabled by default
                                      ;STRING_SKIP_WS
002CE2 002CE2 -> $0001                STRING_SKIP_WS_OFF      EQU     1       ;STRING_SKIP_WS disabled by default
                                      ;STRING_LOWER
002CE2 002CE2 -> $0001                STRING_LOWER_OFF        EQU     1       ;STRING_LOWER disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
002CE2 002CE2 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
002CE2 002CE2 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
002CE2 002CE2 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
002CE2 002CE2 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
002CE2 002CE2 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
002CE2 002CE2 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
002CE2 002CE2 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
002CE2 002CE2 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
002CE2 002CE2 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD0 002DD0                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
002DD0 002DD0 -> $2DD0                STRING_VARS_END         EQU     *
002DD0 002DD0 -> $2DD0                STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001CEA 001CEA                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
001CEA 001CEA -> $1CEA                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
001CEA 001CEA 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
001CEB 001CEB E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
001CED 001CED 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
001CEF 001CEF 16 18 A5                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
001CF2 001CF2 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
001CF4 001CF4 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
001CF6 001CF6 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001CF6 001CF6 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001CF6 001CF6 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001CF9 001CF9 18 25 FB 9C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001CFD 001CFD 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D00 001D00 18 22 FB 9B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D04 001D04 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D04 001D04 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D04 001D04 33                                              PULB
                                                              ;Signal failure (string pointer in X)
001D05 001D05 10 FE                                           CLC
                                                              ;Done
001D07 001D07 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
001D08 001D08 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
001D0A 001D0A 16 18 A5                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
001D0D 001D0D 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
001D0F 001D0F MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001D0F 001D0F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D0F 001D0F 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D12 001D12 18 25 FB 83                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D16 001D16 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D19 001D19 18 22 FB 82                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D1D 001D1D -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D1D 001D1D -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D1D 001D1D 33                                              PULB
                                                              ;Signal success (next string pointer in X)
001D1E 001D1E 14 01                                           SEC
                                                              ;Done
001D20 001D20 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
001D21 001D21 -> $1D21                STRING_PRINT_BL         EQU     *
001D21 001D21 MACRO                                           SCI_MAKE_BL     STRING_PRINT_NB, 10
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001D21 001D21 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001D23 001D23                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
001D23 001D23 07 C5                                           JOBSR   \1                                               (SCI_MAKE_BL)
001D25 001D25 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001D27 001D27 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001D29 001D29 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
001D29 001D29 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D29 001D29 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D2C 001D2C 18 25 FB 69                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D30 001D30 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D33 001D33 18 22 FB 68                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D37 001D37 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D37 001D37 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D37 001D37 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001D38 001D38 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
001D38 001D38 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
001D3B 001D3B 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
001D3D 001D3D 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
001D40 001D40 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001D42 001D42 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001D42 001D42 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001D47 001D47 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001D4C 001D4C 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001D4E 001D4E 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
001D50 001D50 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001D51 001D51 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
001D52 001D52 -> $1D52                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001D52 001D52 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
001D52 001D52 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D52 001D52 8F 2D 74                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D55 001D55 18 25 FB 40                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D59 001D59 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D5C 001D5C 18 22 FB 3F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D60 001D60 -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D60 001D60 -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001D60 001D60 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Print a number of filler characters - non-blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
                                      ;#Print a number of filler characters - blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
                                      ;#Convert a lower case character to upper case
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: lower case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
001D62 001D62 -> $1D62                STRING_UPPER            EQU     *
001D62 001D62 C1 61                                           CMPB    #$61            ;"a"
001D64 001D64 25 1C                                           BLO     STRING_UPPER_2
001D66 001D66 C1 7A                                           CMPB    #$7A            ;"z"
001D68 001D68 23 08                                           BLS     STRING_UPPER_1
001D6A 001D6A C1 EA                                           CMPB    #$EA            ;"a"+$80
001D6C 001D6C 25 14                                           BLO     STRING_UPPER_2
001D6E 001D6E C1 FA                                           CMPB    #$FA            ;"z"+$80
001D70 001D70 22 10                                           BHI     STRING_UPPER_2
001D72 001D72 C0 20                   STRING_UPPER_1          SUBB    #$20            ;"a"-"A"
                                                              ;Done
001D74 001D74 MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001D74 001D74 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D74 001D74 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D77 001D77 18 25 FB 1E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D7B 001D7B 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D7E 001D7E 18 22 FB 1D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D82 001D82 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D82 001D82 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D82 001D82 3D                      STRING_UPPER_2          RTS
                                      ;#Convert an upper case character to lower case (uncomment if needed)
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: upper case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
001D83 001D83 -> $1D83                STRING_PRINTABLE        EQU     *
001D83 001D83 C1 20                                           CMPB    #$20            ;" "
001D85 001D85 25 04                                           BLO     STRING_PRINTABLE_1
001D87 001D87 C1 7E                                           CMPB    #$7E            ;"~"
001D89 001D89 23 10                                           BLS     STRING_PRINTABLE_2
001D8B 001D8B C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
001D8D 001D8D MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001D8D 001D8D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D8D 001D8D 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D90 001D90 18 25 FB 05                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D94 001D94 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D97 001D97 18 22 FB 04                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D9B 001D9B -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D9B 001D9B -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001D9B 001D9B 3D                      STRING_PRINTABLE_2      RTS
                                      ;#Skip whitespace (uncomment if needed)
                                      ; args:   X: start of the string
                                      ; result: X: trimmed string
                                      ; SSTACK: 3 bytes
                                      ;         Y and D are preserved
001D9C 001D9C -> $1D9C                STRING_CODE_END         EQU     *
001D9C 001D9C -> $1D9C                STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002CE2 002CE2                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
002CE2 002CE2 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
002CE3 002CE3 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
002CE3 002CE3 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
002CE4 002CE4 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
002CE5 002CE5 -> $2CE5                STRING_TABS_END         EQU     *
002CE5 002CE5 -> $2CE5                STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Maximum number conversion radix
                                      ;-------------------------------
                                      ;Enable blocking subroutines
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
002CE5 002CE5 -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
002CE5 002CE5 -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
002CE5 002CE5 -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD0 002DD0                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
002DD0 002DD0 -> $2DD0                NUM_VARS_END            EQU     *
002DD0 002DD0 -> $2DD0                NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001D9C 001D9C                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
001D9C 001D9C -> $1D9C                NUM_REVERSE             EQU     *
                                      ;Stack layout:
001D9C 001D9C -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
001D9C 001D9C -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
001D9C 001D9C -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
001D9C 001D9C -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
001D9C 001D9C -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
001D9C 001D9C -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
001D9C 001D9C -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
001D9C 001D9C -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
001D9C 001D9C -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
001D9C 001D9C -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
001D9C 001D9C 87                                              CLRA
001D9D 001D9D 18 02 80 AA                                     MOVW    0,SP, 6,-SP             ;move return address to SP+10
001DA1 001DA1 6C 86                                           STD     6,SP                    ;initialize reverse number
001DA3 001DA3 18 00 84 00 00                                  MOVW    #$0000, 4,SP            ;reverse number = base
001DA8 001DA8 18 00 82 00 00                                  MOVW    #$0000, 2,SP
001DAD 001DAD 34                                              PSHX                            ;store X at SP+8
001DAE 001DAE 35                                              PSHY                            ;store Y at SP+6
001DAF 001DAF 3B                                              PSHD                            ;store count:base at SP+4
001DB0 001DB0 34                                              PSHX                            ;store double value at SP+0
001DB1 001DB1 35                                              PSHY
                                                              ;Divide FHW by base
001DB2 001DB2 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
001DB4 001DB4 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
001DB6 001DB6 87                                              CLRA                            ;base => D
001DB7 001DB7 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001DB9 001DB9 B7 D4                                           EXG     X, D
001DBB 001DBB 18 10                                           IDIV                            ;D / X => X,  D % X => D
001DBD 001DBD 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
001DBF 001DBF B7 45                                           TFR     D, X                    ;remainder => X
001DC1 001DC1 87                      NUM_REVERSE_2           CLRA                            ;base => D
001DC2 001DC2 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001DC4 001DC4 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
001DC6 001DC6 B7 D6                                           EXG     X, Y
001DC8 001DC8 B7 D4                                           EXG     X, D
001DCA 001DCA 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001DCB 001DCB 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
001DCD 001DCD E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
001DD0 001DD0 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
001DD3 001DD3 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
001DD5 001DD5 C9 00                                           ADCB    #$00
001DD7 001DD7 89 00                                           ADCA    #$00
001DD9 001DD9 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001DDB 001DDB EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
001DDD 001DDD C9 00                                           ADCB    #$00
001DDF 001DDF 89 00                                           ADCA    #$00
001DE1 001DE1 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
001DE3 001DE3 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
001DE5 001DE5 EC 82                                           LDD     NUM_REVERSE_FLW,SP
001DE7 001DE7 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
001DE9 001DE9 EC 80                                           LDD     NUM_REVERSE_FHW,SP
001DEB 001DEB 27 2C                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
001DED 001DED ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
001DF0 001DF0 87                                              CLRA
001DF1 001DF1 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001DF3 001DF3 13                                              EMUL                            ;Y * D => Y:D
001DF4 001DF4 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
001DF7 001DF7 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
001DF9 001DF9 B7 C6                                           EXG     D, Y
001DFB 001DFB 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001DFD 001DFD 87                                              CLRA
001DFE 001DFE E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001E00 001E00 13                                              EMUL                            ;Y * D => Y:D
001E01 001E01 E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
001E03 001E03 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001E05 001E05 B7 64                                           TFR     Y, D
001E07 001E07 C9 00                                           ADCB    #$00
001E09 001E09 89 00                                           ADCA    #$00
                                                              ;Multiply RHW by base (carry-over in D)
001E0B 001E0B ED 8C                                           LDY     NUM_REVERSE_RHW,SP
001E0D 001E0D 6C 8C                                           STD     NUM_REVERSE_RHW,SP
001E0F 001E0F 87                                              CLRA
001E10 001E10 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001E12 001E12 13                                              EMUL                            ;Y * D => Y:D
001E13 001E13 E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
001E15 001E15 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
001E17 001E17 20 99                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
001E19 001E19 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001E19 001E19 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E19 001E19 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E1C 001E1C 18 25 FA 79                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E20 001E20 8F 2D 8E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E23 001E23 18 22 FA 78                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E27 001E27 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E27 001E27 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E27 001E27 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
001E29 001E29 3A                                              PULD                            ;
001E2A 001E2A 31                                              PULY
001E2B 001E2B 30                                              PULX
                                                              ;Done
001E2C 001E2C 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
001E2D 001E2D -> $1E2D                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
001E2D 001E2D -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
001E2D 001E2D -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
001E2D 001E2D -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
001E2D 001E2D -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
001E2D 001E2D -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
001E2D 001E2D -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
001E2D 001E2D -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
001E2D 001E2D -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
001E2D 001E2D 34                                              PSHX                                    ;store X at SP+8
001E2E 001E2E 35                                              PSHY                                    ;store Y at SP+6
001E2F 001E2F 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
001E30 001E30 MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
001E30 001E30 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
001E30 001E30 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
001E30 001E30 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E30 001E30 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E33 001E33 18 25 FA 62                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E37 001E37 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E3A 001E3A 18 22 FA 61                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E3E 001E3E -> $189F                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E3E 001E3E -> $1899                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001E3E 001E3E 16 19 8F                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
001E41 001E41 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
001E45 001E45 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
001E47 001E47 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
001E49 001E49 B7 65                                           TFR     Y, X
001E4B 001E4B 87                                              CLRA                            ;base => D
001E4C 001E4C E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001E4E 001E4E B7 D4                                           EXG     X, D
001E50 001E50 18 10                                           IDIV                            ;D / X => X,  D % X => D
001E52 001E52 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
001E54 001E54 B7 46                                           TFR     D, Y                    ;remainder => Y
001E56 001E56 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
001E57 001E57 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
001E59 001E59 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
001E5B 001E5B B7 C5                                           EXG     D, X
001E5D 001E5D 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001E5E 001E5E 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
001E60 001E60 B7 46                                           TFR     D, Y                    ;remainder => Y
001E62 001E62 EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
001E64 001E64 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001E65 001E65 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
001E67 001E67 CE 2C E5                                        LdX     #NUM_SYMTAB
001E6A 001E6A E6 E5                                           LDAB    B,X
001E6C 001E6C 16 18 A5                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
001E6F 001E6F 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
001E72 001E72 EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
001E74 001E74 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
001E76 001E76 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
001E78 001E78 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
001E7A 001E7A MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001E7A 001E7A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E7A 001E7A 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E7D 001E7D 18 25 FA 18                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E81 001E81 8F 2D 92                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E84 001E84 18 22 FA 17                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E88 001E88 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E88 001E88 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E88 001E88 14 01                                           SEC
001E8A 001E8A 3A                      NUM_REVPRINT_NB_3       PULD
001E8B 001E8B 31                                              PULY
001E8C 001E8C 30                                              PULX
                                                              ;Done
001E8D 001E8D 3D                                              RTS
                                                              ;Printing incomplete
001E8E 001E8E MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001E8E 001E8E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E8E 001E8E 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E91 001E91 18 25 FA 04                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E95 001E95 8F 2D 92                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E98 001E98 18 22 FA 03                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E9C 001E9C -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E9C 001E9C -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001E9C 001E9C 10 FE                                           CLC
001E9E 001E9E 20 EA                                           JOB     NUM_REVPRINT_NB_3
001EA0 001EA0 -> $1EA0                NUM_CODE_END            EQU     *
001EA0 001EA0 -> $1EA0                NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002CE5 002CE5                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
002CE5 002CE5 30                      NUM_SYMTAB              DB      "0"     ; 0
002CE6 002CE6 31                                              DB      "1"     ; 1
002CE7 002CE7 32                                              DB      "2"     ; 2
002CE8 002CE8 33                                              DB      "3"     ; 3
002CE9 002CE9 34                                              DB      "4"     ; 4
002CEA 002CEA 35                                              DB      "5"     ; 5
002CEB 002CEB 36                                              DB      "6"     ; 6
002CEC 002CEC 37                                              DB      "7"     ; 7
002CED 002CED 38                                              DB      "8"     ; 8
002CEE 002CEE 39                                              DB      "9"     ; 9
002CEF 002CEF 41                                              DB      "A"     ;10
002CF0 002CF0 42                                              DB      "B"     ;11
002CF1 002CF1 43                                              DB      "C"     ;12
002CF2 002CF2 44                                              DB      "D"     ;13
002CF3 002CF3 45                                              DB      "E"     ;14
002CF4 002CF4 46                                              DB      "F"     ;15
002CF5 002CF5 F5                      NUM_SYMTAB_END  DB      *
002CF6 002CF6 -> $2CF6                NUM_TABS_END            EQU     *
002CF6 002CF6 -> $2CF6                NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;#    June 20, 2013                                                            #
                                      ;#      - Added macros "RESET_RESTART" and "RESET_RESTART_NO_MSG"              #
                                      ;#    January 15, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;###############################################################################
                                      ;# Error Detection:                                                            #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# |                         |       | P L I |         |                     | #
                                      ;# |                         |       | O V L |         |                     | #
                                      ;# |                         | Reset | R R A | Message |                     | #
                                      ;# | Cause                   | Vector| F F F | Pointer | Display             | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Power-On Reset          | $FFFE | 1 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | External Pin Reset      | $FFFE | 0 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Low Voltage Reset       | $FFFE | - 1 - |    -    | Error (Low voltage) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Illegal Address Reset   | $FFFE |  -0 1 |    -    | Error (Code fail)   | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Clock Monitor Reset     | $FFFC | - - - | CLK Msg | Error (Clock fail)  | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | COP Reset               | $FFFA | - - - | COP Msg | Error (Inresponsive)| #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Fatal Application Error | $FFFA | - - - |  Valid  | Error (Application) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Replace system resets by BGND instructions
                                      ;RESET_DEBUG            EQU     1
                                      ;Monitor low voltage reset
002CF6 002CF6 -> $0001                RESET_LVR_CHECK_ON      EQU     1               ;enable LVR check if LVRF flag exists
                                      ;Monitor illegal address reset
002CF6 002CF6 -> $0001                RESET_IAR_CHECK_ON      EQU     1               ;enable IAR check if ILAF flag exists
                                      ;Maximum error message length
002CF6 002CF6 -> $0040                RESET_MSG_LENGTH        EQU     64
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD0 002DD0                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
                                                              ;ALIGN  1
002DD0 002DD0                         RESET_MSG_REQ           DS      2               ;requested error message
002DD2 002DD2                         RESET_MSG_PTR           DS      2               ;validated error message
002DD4 002DD4 -> $2DD4                RESET_VARS_END          EQU     *
002DD4 002DD4 -> $2DD4                RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001EA0 001EA0                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#Reset entry points
                                      ;--------------------
                                      ;Power-on and external reset
001EA0 001EA0 -> $1EA0                RESET_EXT_ENTRY         EQU     *
001EA0 001EA0 18 03 2C F6 2D D0                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001EA6 001EA6 18 03 00 00 2D D2                               MOVW    #$0000, RESET_MSG_PTR                   ;check reset flags
001EAC 001EAC 06 14 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset
001EAF 001EAF 18 03 2C F6 2D D0       RESET_CM_ENTRY          MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001EB5 001EB5 18 0B 0B 2D D2                                  MOVB    #RESET_MSG_CLKFAIL, RESET_MSG_PTR       ;set clock failure message
001EBA 001EBA 06 14 00                                        JOB     START_OF_CODE
                                      ;COP and user reset
001EBD 001EBD -> $1400                RESET_COP_ENTRY         EQU     START_OF_CODE
001EBD 001EBD 18 0B D0 2D D2                                  MOVB    #RESET_MSG_REQ, RESET_MSG_PTR           ;preserve error message
001EC2 001EC2 18 03 2C F6 2D D0                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001EC8 001EC8 06 14 00                                        JOB     START_OF_CODE
                                      ;#Reset trigger
                                      ;--------------
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
                                      ;          System is reset and initialized
001ECB 001ECB -> $1ECB                RESET_FATAL_X           EQU     *
001ECB 001ECB 7E 2D D0                                        STX     RESET_MSG_REQ
                                                              ;Trigger COP
001ECE 001ECE MACRO                   RESET_FATAL_X_1         COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
001ECE 001ECE 06 14 00                                        JOB     RESET_COP_ENTRY                                  (COP_RESET)
001ED1 001ED1 -> $1ED1                RESET_CODE_END          EQU     *
001ED1 001ED1 -> $1ED1                RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002CF6 002CF6                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Error messages
002CF6 002CF6 MACRO                   RESET_MSG_COP           RESET_MSG       "System inresponsive"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002CF6 002CF6 53 79 73 74 65 6D 20 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 72 65 73 70 6F 6E 73 
              69 76 E5                
002D09 002D09 F6 4A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002D0B 002D0B MACRO                   RESET_MSG_CLKFAIL       RESET_MSG       "Clock failure"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002D0B 002D0B 43 6C 6F 63 6B 20 66 61 RESET_MSG               FCS     \1                                               (RESET_MSG)
              69 6C 75 72 E5          
002D18 002D18 D2 74                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002D1A 002D1A MACRO                   RESET_MSG_POWFAIL       RESET_MSG       "Power loss"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002D1A 002D1A 50 6F 77 65 72 20 6C 6F RESET_MSG               FCS     \1                                               (RESET_MSG)
              73 F3                   
002D24 002D24 A4 6E                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002D26 002D26 MACRO                   RESET_MSG_ILLADDR       RESET_MSG       "Code runaway"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002D26 002D26 43 6F 64 65 20 72 75 6E RESET_MSG               FCS     \1                                               (RESET_MSG)
              61 77 61 F9             
002D32 002D32 04 22                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002D34 002D34 MACRO                   RESET_MSG_UNKNOWN       RESET_MSG       "Unknown cause"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
002D34 002D34 55 6E 6B 6E 6F 77 6E 20 RESET_MSG               FCS     \1                                               (RESET_MSG)
              63 61 75 73 E5          
002D41 002D41 5C A1                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
002D43 002D43 -> $2D43                RESET_TABS_END          EQU     *
002D43 002D43 -> $2D43                RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - LED - LED Driver (AriCalculator)                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C(X) MCU  #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module controls the LED on the OpenBDM Pod.                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
002D43 002D43 -> $0008                LED_PORT                EQU     PORTE
002D43 002D43 -> $0002                LED_RED                 EQU     PE1
002D43 002D43 -> $0001                LED_GREEN               EQU     PE0
002D43 002D43 -> $0003                LED_ALL                 EQU     LED_GREEN|LED_RED
002D43 002D43 -> $0001                LED_BUSY                EQU     LED_GREEN
002D43 002D43 -> $0002                LED_COMERR              EQU     LED_RED
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD4 002DD4                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
002DD4 002DD4 -> $2DD4                LED_VARS_END            EQU     *
002DD4 002DD4 -> $2DD4                LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001ED1 001ED1                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
001ED1 001ED1 -> $1ED1                LED_CODE_END            EQU     *
001ED1 001ED1 -> $1ED1                LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002D43 002D43                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
002D43 002D43 -> $2D43                LED_TABS_END            EQU     *
002D43 002D43 -> $2D43                LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# AriCalculator - VMON - Voltage Monitor (AriCalculator)                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module monitors battery and USB voltages.                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 19, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Battery voltage monitor (PAD8)
                                      ;------------------------------
                                      ;Upper threshold
002D43 002D43 -> $BA2D                VMON_VBAT_UPPER_THRESHOLD       EQU     (24*$FFFF)/33   ;default 2.4V
                                      ;Lower threshold
002D43 002D43 -> $9B26                VMON_VBAT_LOWER_THRESHOLD       EQU      (20*$FFFF)/33  ;default 2.0V
                                      ;USB voltage monitor (PAD9)
                                      ;--------------------------
                                      ;Upper threshold
002D43 002D43 -> $BA2D                VMON_VUSB_UPPER_THRESHOLD       EQU     (24*$FFFF)/33   ;default 2.4V
                                      ;Lower threshold
002D43 002D43 -> $9B26                VMON_VUSB_LOWER_THRESHOLD       EQU      (20*$FFFF)/33  ;default 2.0V
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Basic settings
                                      ;--------------
                                                              ;Common configuration
002D43 002D43 -> $0009                VMON_ATDCTL0_CONFIG     EQU      %00001001 ;-> wrap at AN9
                                                              ;             ^  ^ ;(only relevant when monitoring both voltages)
                                                              ;    WRAP-----+--+
002D43 002D43 -> $0010                VMON_ATDCTL1_CONFIG     EQU      %00010000 ;-> 8-bit resolution
                                                              ;         ^^^^^  ^ ;-> discharge sample cap before conversion
                                                              ;ETRIGSEL-+||||  |
                                                              ;    SRES--++||  |
                                                              ; SMP_DIS----+|  |
                                                              ; ETRIGCH-----+--+
002D43 002D43 -> $0001                VMON_ATDCTL2_CONFIG     EQU      %00000001 ;-> fast flag clearing
                                                              ;          ^^^^^^^ ;-> enable compare interrupt
                                                              ;    AFFC--+||||||
                                                              ; ICLKSTP---+|||||
                                                              ; ETRIGLE----+||||
                                                              ;  ETRIGP-----+|||
                                                              ;  ETRIGE------+||
                                                              ;   ASCIE-------+|
                                                              ;  ACMPIE--------+
002D43 002D43 -> $0010                VMON_ATDCTL3_CONFIG     EQU      %00010000 ;-> 2 conversions per sequence
                                                              ;         ^^^^^^^^ ;-> complete current conversion in BDM active mode
                                                              ;     DJM-+||||||| ;(only relevant when monitoring both voltages)
                                                              ;     S8C--+||||||
                                                              ;     S4C---+|||||
                                                              ;     S2C----+||||
                                                              ;     S1C-----+|||
                                                              ;    FIFO------+||
                                                              ;     FRZ-------++
002D43 002D43 -> $00FF                VMON_ATDCTL4_CONFIG     EQU      %11111111 ;-> sample for 30.72us
                                                              ;         ^ ^^   ^
                                                              ;     SMP-+-+|   |
                                                              ;     PRS----+---+
002D43 002D43 -> $0038                VMON_ATDCTL5_CONFIG     EQU      %00111000 ;-> continuous conversion over multiple channels
                                                              ;          ^^^^^^^ ;-> start conversion sequence with AN8
                                                              ;      SC--+||||||
                                                              ;    SCAN---+|||||
                                                              ;    MULT----+||||
                                                              ;      CD-----+|||
                                                              ;      CC------+||
                                                              ;      CB-------+|
                                                              ;      CA--------+
002D43 002D43 -> $0000                VMON_VBAT_CONVERSION    EQU     $00
002D43 002D43 -> $0001                VMON_VUSB_CONVERSION    EQU     $01
002D43 002D43 -> $0080                VMON_VBAT_ATDDR         EQU     (ATDDR0+(2*VMON_VBAT_CONVERSION))
002D43 002D43 -> $0082                VMON_VUSB_ATDDR         EQU     (ATDDR0+(2*VMON_VUSB_CONVERSION))
                                                                      ;Monitor status
                                      ;--------------
002D43 002D43 -> $007F                VMON_STATUS             EQU      ATDCMPHTL ;1=LV condition, 0=HV condition
002D43 002D43 -> $0001                VMON_STATUS_VBAT        EQU      (1<<VMON_VBAT_CONVERSION)
002D43 002D43 -> $0002                VMON_STATUS_VUSB        EQU      (1<<VMON_VUSB_CONVERSION)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD4 002DD4                                                 ORG     VMON_VARS_START, VMON_VARS_START_LIN
002DD4 002DD4 -> $2DD4                VMON_VARS_END           EQU     *
002DD4 002DD4 -> $2DD4                VMON_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001ED1 001ED1                                                 ORG     VMON_CODE_START, VMON_CODE_START_LIN
                                      ;#ADC Compare ISR
                                      ;#---------------
001ED1 001ED1 -> $1ED1                VMON_ISR                EQU     *
                                                              ;Check VUSB
001ED1 001ED1 4F 7B 02 67                                     BRCLR   ATDSTAT2L,  #(1<<VMON_VUSB_CONVERSION), VMON_ISR_2      ;skip if state hasn't changed
001ED5 001ED5 4E 7F 02 2E                                     BRSET   ATDCMPHTL, #(1<<VMON_VUSB_CONVERSION), VMON_ISR_1       ;HV condition detected
                                                              ;LV condition detected
001ED9 001ED9 18 03 BA 2D 00 82                               MOVW    #VMON_VUSB_UPPER_THRESHOLD, VMON_VUSB_ATDDR             ;set upper threshold value
001EDF 001EDF 4C 7F 02                                        BSET    ATDCMPHTL, #(1<<VMON_VUSB_CONVERSION)                   ;VUSB must be higher than threshold
001EE2 001EE2 18 0B 02 00 7B                                  MOVB    #(1<<VMON_VUSB_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
001EE7 001EE7 MACRO                                           VMON_VUSB_LVACTION
                                      ;VUSB -> error LED                                                               (VMON_VUSB_LVACTION)
001EE7 001EE7 MACRO                                           SCI_DISABLE                                              (VMON_VUSB_LVACTION)
                                      ;#Disable SCI                                                                    (VMON_VUSB_LVACTION/SCI_DISABLE)
                                      ;#-----------                                                                    (VMON_VUSB_LVACTION/SCI_DISABLE)
                                                              ;Disable transmission, disable IRQs                      (VMON_VUSB_LVACTION/SCI_DISABLE)
001EE7 001EE7 79 00 CB                                        CLR     SCICR2                                           (VMON_VUSB_LVACTION/SCI_DISABLE)
                                                              ;Clear CTS (minimize output current)                     (VMON_VUSB_LVACTION/SCI_DISABLE)
001EEA 001EEA MACRO                                           SCI_ASSERT_CTS                                           (VMON_VUSB_LVACTION/SCI_DISABLE)
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
001EEA 001EEA 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
001EEE 001EEE 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
001EF2 001EF2 1C 02 55 02                                     BSET    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-down device (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
001EF6 001EF6 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                                              ;Stop timer channels                                     (VMON_VUSB_LVACTION/SCI_DISABLE)
001EFA 001EFA MACRO                                           TIM_MULT_DIS    (SCI_BD_TCS|SCI_DLY_TCS)                 (VMON_VUSB_LVACTION/SCI_DISABLE)
                                      ;#Disable multiple timer channels                                                (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
001EFA 001EFA 4D 4C 0F                                        BCLR    TIE, #\1                                         (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
001EFD 001EFD 26 03                                           BNE     DONE                                             (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
001EFF 001EFF 79 00 46                                        CLR     TSCR1                                            (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
001F02 001F02 -> $1F02                DONE                    EQU     *                                                (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
001F02 001F02 MACRO                                           LED_COMERR_OFF                                           (VMON_VUSB_LVACTION)
                                      ;#Stop signaling communication error                                             (VMON_VUSB_LVACTION/LED_COMERR_OFF)
001F02 001F02 4C 08 02                                        BSET    LED_PORT, #LED_COMERR                            (VMON_VUSB_LVACTION/LED_COMERR_OFF)
001F05 001F05 20 35                                           JOB     VMON_ISR_2                                              ;VUSB check done
                                                              ;HV condition detected
001F07 001F07 18 03 9B 26 00 82       VMON_ISR_1              MOVW    #VMON_VUSB_LOWER_THRESHOLD, VMON_VUSB_ATDDR             ;set upper threshold value
001F0D 001F0D 4D 7F 02                                        BCLR    ATDCMPHTL, #(1<<VMON_VUSB_CONVERSION)                   ;VUSB must be lower (or same) than threshold
001F10 001F10 18 0B 02 00 7B                                  MOVB    #(1<<VMON_VUSB_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
001F15 001F15 MACRO                                           VMON_VUSB_HVACTION
001F15 001F15 MACRO                                           SCI_ENABLE                                               (VMON_VUSB_HVACTION)
                                      ;#Enable SCI                                                                     (VMON_VUSB_HVACTION/SCI_ENABLE)
                                      ;#----------                                                                     (VMON_VUSB_HVACTION/SCI_ENABLE)
                                                              ;Initialize queues and state flags                       (VMON_VUSB_HVACTION/SCI_ENABLE)
001F15 001F15 CC 00 00                                        LDD     #$0000                                           (VMON_VUSB_HVACTION/SCI_ENABLE)
001F18 001F18 7C 2D CA                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (VMON_VUSB_HVACTION/SCI_ENABLE)
001F1B 001F1B 7C 2D C0                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (VMON_VUSB_HVACTION/SCI_ENABLE)
001F1E 001F1E 7A 2D CE                                        STAA    SCI_FLGS                                         (VMON_VUSB_HVACTION/SCI_ENABLE)
                                                              ;Initialize CTS (allow incoming data)                    (VMON_VUSB_HVACTION/SCI_ENABLE)
001F21 001F21 MACRO                                           SCI_ASSERT_CTS                                           (VMON_VUSB_HVACTION/SCI_ENABLE)
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
001F21 001F21 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
001F25 001F25 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
001F29 001F29 1C 02 55 02                                     BSET    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-down device (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
001F2D 001F2D 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                                              ;Initialize baud rate detection                          (VMON_VUSB_HVACTION/SCI_ENABLE)
001F31 001F31 7A 2D CF                                        STAA    SCI_BD_LIST                             ;reset baud rate check list (VMON_VUSB_HVACTION/SCI_ENABLE)
                                                              ;Enable transmission                                     (VMON_VUSB_HVACTION/SCI_ENABLE)
001F34 001F34 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;keep TX IRQs disabled (VMON_VUSB_HVACTION/SCI_ENABLE)
001F39 001F39 MACRO                                           LED_COMERR_ON                                            (VMON_VUSB_HVACTION)
                                      ;############################################################################### (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;# Macros                                                                      # (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;############################################################################### (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;#Initialization                                                                 (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                                              ;LED_OFF                                                 (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;#Start signaling communication error                                            (VMON_VUSB_HVACTION/LED_COMERR_ON)
001F39 001F39 4D 08 02                                        BCLR    LED_PORT, #LED_COMERR                            (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                                              ;Check VBAT
001F3C 001F3C 4F 7B 01 28             VMON_ISR_2              BRCLR   ATDSTAT2L,  #(1<<VMON_VBAT_CONVERSION), VMON_ISR_4      ;skip if state hasn't changed
001F40 001F40 4E 7F 01 13                                     BRSET   ATDCMPHTL, #(1<<VMON_VBAT_CONVERSION), VMON_ISR_3       ;HV condition detected
                                                              ;LV condition detected
001F44 001F44 18 03 BA 2D 00 80                               MOVW    #VMON_VBAT_UPPER_THRESHOLD, VMON_VBAT_ATDDR             ;set upper threshold value
001F4A 001F4A 4C 7F 01                                        BSET    ATDCMPHTL, #(1<<VMON_VBAT_CONVERSION)                   ;VBAT must be higher than threshold
001F4D 001F4D 18 0B 01 00 7B                                  MOVB    #(1<<VMON_VBAT_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
001F52 001F52 MACRO                                           VMON_VBAT_LVACTION
                                      ;############################################################################### (VMON_VBAT_LVACTION)
                                      ;# Macros                                                                      # (VMON_VBAT_LVACTION)
                                      ;############################################################################### (VMON_VBAT_LVACTION)
                                      ;;Break handler                                                                  (VMON_VBAT_LVACTION)
                                      ;#macro SCI_BREAK_ACTION, 0                                                      (VMON_VBAT_LVACTION)
                                      ;                       LED_BUSY_ON                                              (VMON_VBAT_LVACTION)
                                      ;#emac                                                                           (VMON_VBAT_LVACTION)
                                      ;                                                                                (VMON_VBAT_LVACTION)
                                      ;;Suspend handler                                                                (VMON_VBAT_LVACTION)
                                      ;#macro SCI_SUSPEND_ACTION, 0                                                    (VMON_VBAT_LVACTION)
                                      ;                       LED_BUSY_OFF                                             (VMON_VBAT_LVACTION)
                                      ;#emac                                                                           (VMON_VBAT_LVACTION)
                                      ;VBAT -> busy LED                                                                (VMON_VBAT_LVACTION)
001F52 001F52 MACRO                                           LED_BUSY_OFF                                             (VMON_VBAT_LVACTION)
                                      ;#Stop busy signal                                                               (VMON_VBAT_LVACTION/LED_BUSY_OFF)
001F52 001F52 4C 08 01                                        BSET    LED_PORT, #LED_BUSY                              (VMON_VBAT_LVACTION/LED_BUSY_OFF)
001F55 001F55 20 11                                           JOB     VMON_ISR_4                                              ;VBAT check done
                                                              ;HV condition detected
001F57 001F57 18 03 9B 26 00 80       VMON_ISR_3              MOVW    #VMON_VBAT_LOWER_THRESHOLD, VMON_VBAT_ATDDR             ;set upper threshold value
001F5D 001F5D 4D 7F 01                                        BCLR    ATDCMPHTL, #(1<<VMON_VBAT_CONVERSION)                   ;VBAT must be lower (or same) than threshold
001F60 001F60 18 0B 01 00 7B                                  MOVB    #(1<<VMON_VBAT_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
001F65 001F65 MACRO                                           VMON_VBAT_HVACTION
001F65 001F65 MACRO                                           LED_BUSY_ON                                              (VMON_VBAT_HVACTION)
                                      ;#Start busy signal                                                              (VMON_VBAT_HVACTION/LED_BUSY_ON)
001F65 001F65 4D 08 01                                        BCLR    LED_PORT, #LED_BUSY                              (VMON_VBAT_HVACTION/LED_BUSY_ON)
                                                              ;Restart conversion sequence
001F68 001F68 18 0B 38 00 75          VMON_ISR_4              MOVB    #VMON_ATDCTL5_CONFIG, ATDCTL5
                                                              ;VBAT check done
001F6D 001F6D MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
001F6D 001F6D 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
001F70 001F70 25 06                                           BLO     OF                                               (ISTACK_RTI)
001F72 001F72 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
001F75 001F75 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001F77 001F77 0B                                              RTI                                                      (ISTACK_RTI)
001F78 001F78 00                      OF                      BGND                                                     (ISTACK_RTI)
001F79 001F79 00                      UF                      BGND                                                     (ISTACK_RTI)
001F7A 001F7A -> $1F7A                VMON_CODE_END           EQU     *
001F7A 001F7A -> $1F7A                VMON_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002D43 002D43                                                 ORG     VMON_TABS_START, VMON_TABS_START_LIN
002D43 002D43 -> $2D43                VMON_TABS_END           EQU     *
002D43 002D43 -> $2D43                VMON_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - NVM Driver (S12G-Micro-EVB)                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2013 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module contains NVM write and erase functions.                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    May 27, 2013                                                             #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Prescaler value
002D43 002D43 -> $0018                NVM_FDIV_VAL            EQU     (CLOCK_BUS_FREQ/1000000)-1
                                      ;Fixed page protection
                                      ;---------------------
002D43 002D43 -> $0001                NVM_FIXED_PAGE_PROT_ON  EQU     1       ;default is NVM_FIXED_PAGE_PROT_ON
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Program/erase sizes
                                      ;--------------------
002D43 002D43 -> $0040                NVM_PHRASE_SIZE         EQU     64
002D43 002D43 -> $0200                NVM_SECTOR_SIZE         EQU     512
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD4 002DD4                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
002DD4 002DD4 -> $2DD4                NVM_VARS_END            EQU     *
002DD4 002DD4 -> $2DD4                NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001F7A 001F7A                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
                                      ;#Program phrase
                                      ; args:   X:      target address within paging window
                                      ;         PPAGE:  current page
                                      ;         Y:      data pointer
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 18 bytes
                                      ;         X, Y, and D are preserved
001F7A 001F7A -> $1F7A                NVM_PROGRAM_PHRASE      EQU     *
                                                              ;Protect fixed pages
001F7A 001F7A MACRO                                           NVM_CHECK_FIXED_PAGE_PROT  NVM_PROGRAM_PHRASE_1
                                                              ;Save registers (paged address in X, data pointer in Y)
001F7A 001F7A 36                                              PSHA                                    ;push A onto the SSTACK
                                                              ;Set CCOB  (paged address in X, data pointer in Y)
001F7B 001F7B 86 06                                           LDAA    #$06                            ;program P-flash
001F7D 001F7D MACRO                                           NVM_SET_CMD
                                      ;#Check fixed page protection                                                    (NVM_SET_CMD)
                                      ; args:   1:      escape address (in case of violation)                          (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ; result: none                                                                   (NVM_SET_CMD)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
                                      ;#Set command and address                                                        (NVM_SET_CMD)
                                      ; args:   X:      target address within paging window                            (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ;         A:      command                                                        (NVM_SET_CMD)
                                      ; result: CCOBIX: $01                                                            (NVM_SET_CMD)
                                      ;         C-flag: set if successful                                              (NVM_SET_CMD)
                                      ; SSTACK: 4 bytes                                                                (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
001F7D 001F7D MACRO                                           SSTACK_JOBSR    NVM_SET_CMD, 4                           (NVM_SET_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_CMD/SSTACK_JOBSR)
001F7D 001F7D MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001F7D 001F7D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F7D 001F7D 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F80 001F80 18 25 F9 15                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F84 001F84 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F87 001F87 18 22 F9 14                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F8B 001F8B -> $189F                UF                      EQU     SSTACK_UF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F8B 001F8B -> $1899                OF                      EQU     SSTACK_OF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001F8B 001F8B 16 20 58                                        JOBSR   \1                                               (NVM_SET_CMD/SSTACK_JOBSR)
001F8E 001F8E 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$002
001F91 001F91 18 05 40 01 0A                                  MOVW    0,Y, FCCOBHI
001F96 001F96 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$003
001F99 001F99 18 05 42 01 0A                                  MOVW    2,Y, FCCOBHI
001F9E 001F9E 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$004
001FA1 001FA1 18 05 44 01 0A                                  MOVW    4,Y, FCCOBHI
001FA6 001FA6 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$005
001FA9 001FA9 18 05 46 01 0A                                  MOVW    6,Y, FCCOBHI
                                                              ;Execute command
001FAE 001FAE MACRO                                           NVM_EXEC_CMD
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
001FAE 001FAE MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
001FAE 001FAE MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001FAE 001FAE MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FAE 001FAE 8F 2D 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FB1 001FB1 18 25 F8 E4                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FB5 001FB5 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FB8 001FB8 18 22 F8 E3                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FBC 001FBC -> $189F                UF                      EQU     SSTACK_UF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FBC 001FBC -> $1899                OF                      EQU     SSTACK_OF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FBC 001FBC 16 20 8A                                        JOBSR   \1                                               (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Restore registers
001FBF 001FBF MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001FBF 001FBF MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FBF 001FBF 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FC2 001FC2 18 25 F8 D3                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FC6 001FC6 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FC9 001FC9 18 22 F8 D2                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FCD 001FCD -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FCD 001FCD -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FCD 001FCD 32                                              PULA                                    ;pull A from the SSTACK
                                                              ;Check result
001FCE 001FCE 14 01                                           SEC
001FD0 001FD0 1F 01 06 33 02                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_PROGRAM_PHRASE_2
001FD5 001FD5 10 FE                   NVM_PROGRAM_PHRASE_1    CLC
                                                              ;Done
001FD7 001FD7 3D                      NVM_PROGRAM_PHRASE_2    RTS
                                      ;#Erase sector
                                      ; args:   X:      sector address
                                      ;         PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 18 bytes
                                      ;         X, Y, and D are preserved
001FD8 001FD8 -> $1FD8                NVM_ERASE_SECTOR        EQU     *
                                                              ;Protect fixed pages
001FD8 001FD8 MACRO                                           NVM_CHECK_FIXED_PAGE_PROT  NVM_ERASE_SECTOR_1
                                                              ;Save registers (paged address in X)
001FD8 001FD8 36                                              PSHA                                    ;push A onto the SSTACK
                                                              ;Set CCOB  (paged address in X)
001FD9 001FD9 86 0A                                           LDAA    #$0A                            ;erase P-flash sector
001FDB 001FDB MACRO                                           NVM_SET_CMD
                                      ;#Check fixed page protection                                                    (NVM_SET_CMD)
                                      ; args:   1:      escape address (in case of violation)                          (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ; result: none                                                                   (NVM_SET_CMD)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
                                      ;#Set command and address                                                        (NVM_SET_CMD)
                                      ; args:   X:      target address within paging window                            (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ;         A:      command                                                        (NVM_SET_CMD)
                                      ; result: CCOBIX: $01                                                            (NVM_SET_CMD)
                                      ;         C-flag: set if successful                                              (NVM_SET_CMD)
                                      ; SSTACK: 4 bytes                                                                (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
001FDB 001FDB MACRO                                           SSTACK_JOBSR    NVM_SET_CMD, 4                           (NVM_SET_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_CMD/SSTACK_JOBSR)
001FDB 001FDB MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001FDB 001FDB MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FDB 001FDB 8F 2D 6E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FDE 001FDE 18 25 F8 B7                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FE2 001FE2 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FE5 001FE5 18 22 F8 B6                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FE9 001FE9 -> $189F                UF                      EQU     SSTACK_UF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FE9 001FE9 -> $1899                OF                      EQU     SSTACK_OF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FE9 001FE9 07 6D                                           JOBSR   \1                                               (NVM_SET_CMD/SSTACK_JOBSR)
                                                              ;Execute command
001FEB 001FEB MACRO                                           NVM_EXEC_CMD
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
001FEB 001FEB MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
001FEB 001FEB MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
001FEB 001FEB MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FEB 001FEB 8F 2D 79                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FEE 001FEE 18 25 F8 A7                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FF2 001FF2 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FF5 001FF5 18 22 F8 A6                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FF9 001FF9 -> $189F                UF                      EQU     SSTACK_UF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FF9 001FF9 -> $1899                OF                      EQU     SSTACK_OF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
001FF9 001FF9 16 20 8A                                        JOBSR   \1                                               (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Restore registers
001FFC 001FFC MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
001FFC 001FFC MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FFC 001FFC 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
001FFF 001FFF 18 25 F8 96                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002003 002003 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002006 002006 18 22 F8 95                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00200A 00200A -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00200A 00200A -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00200A 00200A 32                                              PULA                                    ;pull A from the SSTACK
                                                              ;Check result
00200B 00200B 14 01                                           SEC
00200D 00200D 1F 01 06 33 02                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_ERASE_SECTOR_2
002012 002012 10 FE                   NVM_ERASE_SECTOR_1      CLC
                                                              ;Done
002014 002014 3D                      NVM_ERASE_SECTOR_2      RTS
                                      ;#Erase page
                                      ; args:   PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 22 bytes
                                      ;         X, Y, and D are preserved
002015 002015 -> $2015                NVM_ERASE_PAGE          EQU     *
                                                              ;Save registers (paged address in X, data pointer in Y)
002015 002015 34                                              PSHX                                    ;push X onto the SSTACK
                                                              ;Erase all 16 sdectors sector
002016 002016 CE 80 00                                        LDX     #$8000
002019 002019 MACRO                   NVM_ERASE_PAGE_1        NVM_ERASE_SECTOR
                                      ;#Erase sector                                                                   (NVM_ERASE_SECTOR)
                                      ; args:   X:      sector address                                                 (NVM_ERASE_SECTOR)
                                      ;         PPAGE:  current page                                                   (NVM_ERASE_SECTOR)
                                      ; result: C-flag: set if successful                                              (NVM_ERASE_SECTOR)
                                      ; SSTACK: 18 bytes                                                               (NVM_ERASE_SECTOR)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR)
002019 002019 MACRO                                           SSTACK_JOBSR    NVM_ERASE_SECTOR, 18                     (NVM_ERASE_SECTOR)
                                      ;#Check stack and call subroutine                                                (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_ERASE_SECTOR/SSTACK_JOBSR)
002019 002019 MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
002019 002019 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002019 002019 8F 2D 7C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00201C 00201C 18 25 F8 79                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002020 002020 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002023 002023 18 22 F8 78                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002027 002027 -> $189F                UF                      EQU     SSTACK_UF                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002027 002027 -> $1899                OF                      EQU     SSTACK_OF                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002027 002027 07 AF                                           JOBSR   \1                                               (NVM_ERASE_SECTOR/SSTACK_JOBSR)
002029 002029 24 1B                                           BCC     NVM_ERASE_PAGE_2                        ;error occured
00202B 00202B 1A E2 02 00                                     LEAX    NVM_SECTOR_SIZE,X
00202F 00202F BE C0 00                                        CPX     $C000
002032 002032 25 E5                                           BLO     NVM_ERASE_PAGE_1
                                                              ;Restore registers (page erased)
002034 002034 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002034 002034 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002034 002034 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002037 002037 18 25 F8 5E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00203B 00203B 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00203E 00203E 18 22 F8 5D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002042 002042 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002042 002042 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002042 002042 30                                              PULX                                    ;pull X from the SSTACK
                                                              ;Done
002043 002043 14 01                                           SEC
002045 002045 3D                                              RTS
                                                              ;Restore registers (error condition)
002046 002046 MACRO                   NVM_ERASE_PAGE_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002046 002046 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002046 002046 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002049 002049 18 25 F8 4C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00204D 00204D 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002050 002050 18 22 F8 4B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002054 002054 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002054 002054 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002054 002054 30                                              PULX                                    ;pull X from the SSTACK
                                                              ;Done
002055 002055 10 FE                                           CLC
002057 002057 3D                                              RTS
                                      ;#Set command and address
                                      ; args:   X:      target address within paging window
                                      ;         PPAGE:  current page
                                      ;         A:      command
                                      ; result: CCOBIX: $01
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
002058 002058 -> $2058                NVM_SET_CMD             EQU     *
                                                              ;Save registers (paged address in X, data pointer in Y)
002058 002058 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set command  (paged address in X, command in A)
002059 002059 79 01 02                                        CLR     FCCOBIX                         ;CCOBIX=$00
00205C 00205C 7A 01 0A                                        STAA    FCCOBHI                         ;set command
                                                              ;Set ADDR[23:16]  (paged address in X)
00205F 00205F 96 15                                           LDAA    PPAGE
002061 002061 C7                                              CLRB
002062 002062 44                                              LSRA
002063 002063 44                                              LSRA
002064 002064 8A 40                                           ORAA    #$40
002066 002066 7A 01 0B                                        STAA    FCCOBLO
                                                              ;Set ADDR[15:0]  (paged address in X, ADDR[15:14] in B)
002069 002069 18 0B 01 01 02                                  MOVB    #$01, FCCOBIX
00206E 00206E 7E 01 0A                                        STX     FCCOBHI                         ;set ADDR[13:0]
002071 002071 B6 01 0A                                        LDAA    FCCOBHI                         ;set ADDR[15:14]
002074 002074 84 3F                                           ANDA    #$3F
002076 002076 18 06                                           ABA
002078 002078 7A 01 0A                                        STAA    FCCOBHI
                                                              ;Done
00207B 00207B MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00207B 00207B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00207B 00207B 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00207E 00207E 18 25 F8 17                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002082 002082 8F 2D 9C                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002085 002085 18 22 F8 16                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002089 002089 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002089 002089 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002089 002089 3D                                              RTS
                                      ;#Execute NVM command from RAM
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 15 bytes
                                      ;         X, Y, and D are preserved
00208A 00208A -> $208A                NVM_EXEC_CMD            EQU     *
                                                              ;Push RAM code onto the stack
                                                              ;18 0B FF 01 07   MOVB  #$FF, FSTAT     ;clear CCIF
                                                              ;1F 01 07 80 FB   BRCLR FSTAT, #CCIF, * ;wait until CCIF is set
                                                              ;06 xx xx         JMP     $xxxx
00208A 00208A 18 00 AE 20 B0                                  MOVW    #NVM_EXEC_CMD_1, 2,-SP
00208F 00208F 18 00 AE FB 06                                  MOVW    #$FB06,          2,-SP
002094 002094 18 00 AE 07 08                                  MOVW    #$0708,          2,-SP
002099 002099 18 00 AE 1F 01                                  MOVW    #$1F01,          2,-SP
00209E 00209E 18 00 AE 01 07                                  MOVW    #$0107,          2,-SP
0020A3 0020A3 18 00 AE 0B FF                                  MOVW    #$0BFF,          2,-SP
0020A8 0020A8 18 08 AF 18                                     MOVB    #$18,            1,-SP
                                                              ;Invoke command
0020AC 0020AC 14 10                                           SEI
0020AE 0020AE 05 80                                           JMP     0,SP
0020B0 0020B0 10 EF                   NVM_EXEC_CMD_1          CLI
                                                              ;Done
0020B2 0020B2 MACRO                                           SSTACK_PREPULL  15
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0020B2 0020B2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020B2 0020B2 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020B5 0020B5 18 25 F7 E0                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020B9 0020B9 8F 2D 91                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020BC 0020BC 18 22 F7 DF                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020C0 0020C0 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020C0 0020C0 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020C0 0020C0 1B 93                                           LEAS    -13,SP
0020C2 0020C2 3D                                              RTS
                                      ;#ECC double fault
0020C3 0020C3 -> $20C3                NVM_ISR_ECCERR          EQU     *
0020C3 0020C3 MACRO                                           RESET_FATAL     NVM_STR_ECCERR
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
0020C3 0020C3 CE 2D 43                                        LDX     #\1                                              (RESET_FATAL)
0020C6 0020C6 06 1E CB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
0020C9 0020C9 -> $20C9                NVM_CODE_END            EQU     *
0020C9 0020C9 -> $20C9                NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002D43 002D43                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
002D43 002D43 45 43 43 20 65 72 72 6F NVM_STR_ECCERR          FCS     "ECC error"
              F2                      
002D4C 002D4C -> $2D4C                NVM_TABS_END            EQU     *
002D4C 002D4C -> $2D4C                NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# AriCalculator - DISP - LCD Driver (ST7565R) (AriCalculator RevC)            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for LCD using a ST7565R controller. This    #
                                      ;#    driver assumes, that the ST7565R is connected via the 4-wire SPI         #
                                      ;#    interface. The default pin mapping matches AriCalculator hardware RevC   #
                                      ;#                                                                             #
                                      ;#    This modules  provides three functions to the main program:              #
                                      ;#    DISP_CHECK_BUF - This function checks if the command buffer is able      #
                                      ;#                        to accept more data.                                 #
                                      ;#    DISP_TX_NB -     This function send one command to the display           #
                                      ;#                        without blocking the program flow.                   #
                                      ;#    DISP_TX_BL -     This function send one command to the display and       #
                                      ;#                        blocks the program flow until it has been            #
                                      ;#                        successful.                                          #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 24, 2012                                                           #
                                      ;#      - Initial release                                                      #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#Bus frequency
                                      ;#Baud rate
002D4C 002D4C -> $B71B00              DISP_BAUD               EQU     12000000        ;default is 12 Mbit/s
                                      ;#RESET output
002D4C 002D4C -> $0248                DISP_RESET_PORT         EQU     PTS             ;default is port S
002D4C 002D4C -> $0008                DISP_RESET_PIN          EQU     PS3             ;default is PS3
                                      ;#A0 output
002D4C 002D4C -> $0248                DISP_A0_PORT            EQU     PTS             ;default is port S
002D4C 002D4C -> $0010                DISP_A0_PIN             EQU     PS4             ;default is PS4
                                      ;#Buffer size
002D4C 002D4C -> $0010                DISP_BUF_SIZE           EQU     16              ;depth of the command buffer
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate divider
002D4C 002D4C -> $0000                DISP_SPPR               EQU     ((CLOCK_BUS_FREQ/(2*DISP_BAUD))-1)&7
002D4C 002D4C -> $0000                DISP_SPR                EQU     0
                                      ;#SPI configuration
002D4C 002D4C -> $009E                DISP_SPICR1_CONFIG      EQU     %10011110       ;only SPE and SPTIE will be modified
                                                                      ;SSSMCCSL
                                                                      ;PPPSPPSS
                                                                      ;IETTOHOB
                                                                      ;E IRLAEF
                                                                      ;  E    E
002D4C 002D4C -> $0019                DISP_SPICR2_CONFIG      EQU     %00011001
                                                                      ; X MB SS
                                                                      ; F OI PP
                                                                      ; R DD IC
                                                                      ; W FI S0
                                                                      ;   ER W
                                                                      ;   NO A
                                                                      ;    E I
002D4C 002D4C -> $0000                DISP_SPIBR_CONFIG       EQU     ((DISP_SPPR<<4|(DISP_SPR)))
                                      ;#Escape sequences
002D4C 002D4C -> $00E3                DISP_ESC_START          EQU     $E3             ;start of eccape sequence (NOP)
002D4C 002D4C -> $00FF                DISP_ESC_ESC            EQU     $FF             ;transmit escape character
002D4C 002D4C -> $00FE                DISP_ESC_CMD            EQU     $FE             ;switch to command mode
002D4C 002D4C -> $00FD                DISP_ESC_DATA           EQU     $FD             ;switch to data mode
                                      ;#Status flags
002D4C 002D4C -> $0080                DISP_STAT_BUSY          EQU     $80             ;transmission in progress
002D4C 002D4C -> $007F                DISP_STAT_REPEAT        EQU     $7F             ;repeat counter
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DD4 002DD4                                                 ORG     DISP_VARS_START, DISP_VARS_START_LIN
002DD4 002DD4 -> $2DD4                DISP_AUTO_LOC1          EQU     *               ;1st auto-place location
002DD4 002DD4                                                 ALIGN   1
                                      ;#Command buffer
002DD4 002DD4                         DISP_BUF                DS      DISP_BUF_SIZE
002DE4 002DE4                         DISP_BUF_IN             DS      1               ;points to the next free space
002DE5 002DE5                         DISP_BUF_OUT            DS      1               ;points to the oldest entry
002DE6 002DE6 -> $2DE6                DISP_AUTO_LOC2          EQU     *               ;2nd auto-place location
                                      ;#Status flags
002DE6 002DE6 -> $2DE6                DISP_STAT               EQU     ((DISP_AUTO_LOC1&1)*DISP_AUTO_LOC1)+((~(DISP_AUTO_LOC1)&1)*DISP_AUTO_LOC2)
002DE6 002DE6                                                 UNALIGN ((~DISP_AUTO_LOC1)&1)
002DE7 002DE7 -> $2DE7                DISP_VARS_END           EQU     *
002DE7 002DE7 -> $2DE7                DISP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0020C9 0020C9                                                 ORG     DISP_CODE_START, DISP_CODE_START_LIN
                                      ;# Essential functions
                                      ;---------------------
                                      ;#Determine how much space is left on the buffer
                                      ; args:   none
                                      ; result: A: Space left on the buffer in bytes
                                      ; SSTACK: 3 bytes
                                      ;         X, Y and B are preserved
0020C9 0020C9 -> $20C9                DISP_BUF_FREE           EQU     *
                                                              ;Save registers
0020C9 0020C9 37                                              PSHB                                                    ;push accu B onto the SSTACK
                                                              ;Check if the buffer is full
0020CA 0020CA FC 2D E4                                        LDD     DISP_BUF_IN                                     ;IN->A; OUT->B
0020CD 0020CD 18 16                                           SBA
0020CF 0020CF 84 0F                                           ANDA    #(DISP_BUF_SIZE-1)                              ;buffer usage->A
0020D1 0020D1 40                                              NEGA
0020D2 0020D2 8B 0F                                           ADDA    #(DISP_BUF_SIZE-1)
                                                              ;Restore registers
0020D4 0020D4 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0020D4 0020D4 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020D4 0020D4 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020D7 0020D7 18 25 F7 BE                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020DB 0020DB 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020DE 0020DE 18 22 F7 BD                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020E2 0020E2 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020E2 0020E2 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020E2 0020E2 33                                              PULB                                                    ;pull accu B from the SSTACK
                                                              ;Done
0020E3 0020E3 3D                                              RTS
                                      ;#Transmit commands and data (non-blocking)
                                      ; args:   B: buffer entry
                                      ; result: C: 1 = successful, 0=buffer full
                                      ; SSTACK: 5 bytes
                                      ;         X, Y and D are preserved
0020E4 0020E4 -> $20E4                DISP_TX_NB              EQU     *
                                                              ;Save registers (buffer entry in B)
0020E4 0020E4 34                                              PSHX                                                    ;push index X onto the SSTACK
0020E5 0020E5 36                                              PSHA                                                    ;push accu A onto the SSTACK
                                                              ;Store buffer entry (buffer entry in B)
0020E6 0020E6 CE 2D D4                                        LDX     #DISP_BUF                                       ;buffer address->X
0020E9 0020E9 B6 2D E4                                        LDAA    DISP_BUF_IN
0020EC 0020EC 6B E4                                           STAB    A,X                                             ;write data into buffer
0020EE 0020EE 42                                              INCA                                                    ;advance IN index
0020EF 0020EF 84 0F                                           ANDA    #(DISP_BUF_SIZE-1)                              ;buffer usage->A
0020F1 0020F1 B1 2D E5                                        CMPA    DISP_BUF_OUT                                    ;check if the buffer is full
0020F4 0020F4 27 1B                                           BEQ     DISP_TX_NB_2                                    ;buffer is full
0020F6 0020F6 7A 2D E4                                        STAA    DISP_BUF_IN
                                                              ;Enable SPI transmit interrupt
0020F9 0020F9 18 0B FE 00 D8                                  MOVB    #(SPE|SPTIE|DISP_SPICR1_CONFIG), SPICR1
                                                              ;Return positive status
0020FE 0020FE MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0020FE 0020FE MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0020FE 0020FE 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002101 002101 18 25 F7 94                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002105 002105 8F 2D 9B                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002108 002108 18 22 F7 93                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00210C 00210C -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00210C 00210C -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00210C 00210C 14 01                                           SEC                                                     ;return positive status
00210E 00210E 32                      DISP_TX_NB_1            PULA                                                    ;pull accu A from the SSTACK
00210F 00210F 30                                              PULX                                                    ;pull index B from the SSTACK
                                                              ;Done
002110 002110 3D                                              RTS
                                                              ;Return negative status
002111 002111 MACRO                   DISP_TX_NB_2            SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002111 002111 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002111 002111 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002114 002114 18 25 F7 81                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002118 002118 8F 2D 9B                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00211B 00211B 18 22 F7 80                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00211F 00211F -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00211F 00211F -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00211F 00211F 10 FE                                           CLC                                                     ;return negative status
002121 002121 20 EB                                           JOB     DISP_TX_NB_1
                                      ;#Transmit commands and data (blocking)
                                      ; args:   B: buffer entry
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and D are preserved
002123 002123 -> $2123                DISP_TX_BL              EQU     *
002123 002123 MACRO                                           DISP_MAKE_BL    DISP_TX_NB, 5
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL)
                                      ;-------------------------                                                       (DISP_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL)
002123 002123 MACRO                                           SCI_MAKE_BL \1 \2                                        (DISP_MAKE_BL)
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (DISP_MAKE_BL/SCI_MAKE_BL)
002123 002123 14 10                   LOOP                    SEI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (DISP_MAKE_BL/SCI_MAKE_BL)
002125 002125                                                 //SSTACK_PREPUSH        \2                               (DISP_MAKE_BL/SCI_MAKE_BL)
002125 002125 07 BD                                           JOBSR   \1                                               (DISP_MAKE_BL/SCI_MAKE_BL)
002127 002127 24 11                                           BCC     WAIT            ;function unsuccessful           (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (DISP_MAKE_BL/SCI_MAKE_BL)
002129 002129 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (DISP_MAKE_BL/SCI_MAKE_BL)
00212B 00212B MACRO                                           SSTACK_PREPULL  2                                        (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
00212B 00212B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00212B 00212B 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00212E 00212E 18 25 F7 67                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002132 002132 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002135 002135 18 22 F7 66                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002139 002139 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002139 002139 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002139 002139 3D                                              RTS                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DISP_MAKE_BL/SCI_MAKE_BL)
00213A 00213A MACRO                   WAIT                    ISTACK_WAIT                                              (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00213A 00213A 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00213D 00213D 25 13                                           BLO     OF ;ISTACK_OF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00213F 00213F 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
002142 002142 22 0F                                           BHI     UF ;ISTACK_UF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
002144 002144 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002144 002144 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
002149 002149 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00214E 00214E 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
002150 002150 20 02                                           JOB     DONE                                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
002152 002152 00                      OF                      BGND                                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
002153 002153 00                      UF                      BGND                                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
002154 002154 -> $2154                DONE                    EQU     *                                                (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DISP_MAKE_BL/SCI_MAKE_BL)
002154 002154 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
002154 002154 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002154 002154 8F 2D 6F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002157 002157 18 25 F7 3E                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00215B 00215B 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00215E 00215E 18 22 F7 3D                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002162 002162 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002162 002162 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002162 002162 20 BF                                           JOB     LOOP                                             (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)
                                      ; args:   X: pointer to the start of the sequence
                                      ;         Y: number of bytes to transmit
                                      ; result: X: pointer to the start of the remaining sequence
                                      ;         Y: number of remaining bytes to transmit
                                      ;         C: 1 = successful, 0=buffer full
                                      ; SSTACK: 8 bytes
                                      ;         D is preserved
002164 002164 -> $2164                DISP_STREAM_NB          EQU     *
                                                              ;Save registers (start pointer in X, byte count in Y)
002164 002164 37                                              PSHB                                                    ;push accu B onto the SSTACK
                                                              ;Transmit next byte (start pointer in X, byte count in Y)
002165 002165 E6 30                   DISP_STREAM_NB_1        LDAB    1,X+                                            ;get data
002167 002167 MACRO                                           DISP_TX_NB                                              ;transmit data (SSTACK: 5 bytes)
                                      ;#Transmit commands and data (non-blocking)                                      (DISP_TX_NB)
                                      ; args:   B: buffer entry                                                        (DISP_TX_NB)
                                      ; result: C: 1=successful, 0=nothing has been done                               (DISP_TX_NB)
                                      ; SSTACK: 5 bytes                                                                (DISP_TX_NB)
                                      ;         X, Y and D are preserved                                               (DISP_TX_NB)
002167 002167 MACRO                                           SSTACK_JOBSR    DISP_TX_NB, 5                            (DISP_TX_NB)
                                      ;#Check stack and call subroutine                                                (DISP_TX_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_NB/SSTACK_JOBSR)
002167 002167 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
002167 002167 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002167 002167 8F 2D 6F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00216A 00216A 18 25 F7 2B                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00216E 00216E 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002171 002171 18 22 F7 2A                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002175 002175 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002175 002175 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
002175 002175 16 20 E4                                        JOBSR   \1                                               (DISP_TX_NB/SSTACK_JOBSR)
002178 002178 24 15                                           BCC     DISP_STREAM_NB_3                                ;TX buffer is full
00217A 00217A 04 36 E8                                        DBNE    Y, DISP_STREAM_NB_1                             ;transmit next byte
                                                              ;Successful transmission (new start pointer in X, $0000 in Y)
00217D 00217D MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00217D 00217D MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00217D 00217D 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002180 002180 18 25 F7 15                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002184 002184 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002187 002187 18 22 F7 14                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00218B 00218B -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00218B 00218B -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00218B 00218B 14 01                                           SEC                                                     ;signal success
00218D 00218D 33                      DISP_STREAM_NB_2        PULB                                                    ;pull accu B from the SSTACK
                                                              ;Done
00218E 00218E 3D                                              RTS
                                                              ;TX buffer is full (new start pointer+1 in X, new byte count in Y)
00218F 00218F 1A 1F                   DISP_STREAM_NB_3        LEAX    -1,X                                            ;restore pointer
                                                              ;Unsucessful transmission (new start pointer in X, new byte count in Y)
002191 002191 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
002191 002191 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002191 002191 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002194 002194 18 25 F7 01                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
002198 002198 8F 2D 9D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00219B 00219B 18 22 F7 00                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00219F 00219F -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00219F 00219F -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00219F 00219F 10 FE                                           CLC                                                     ;signal success
0021A1 0021A1 20 EA                                           JOB     DISP_STREAM_NB_2                                ; done
                                      ;#Transmit a sequence of commands and data (non-blocking)
                                      ; args:   X: pointer to the start of the sequence
                                      ;         Y: number of bytes to transmit
                                      ; result: X: points to the byte after the sequence
                                      ;         Y: $0000
                                      ; SSTACK: 10 bytes
                                      ;         D is preserved
0021A3 0021A3 -> $21A3                DISP_STREAM_BL          EQU     *
0021A3 0021A3 MACRO                                           DISP_MAKE_BL    DISP_STREAM_NB, 8
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL)
                                      ;-------------------------                                                       (DISP_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL)
0021A3 0021A3 MACRO                                           SCI_MAKE_BL \1 \2                                        (DISP_MAKE_BL)
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (DISP_MAKE_BL/SCI_MAKE_BL)
0021A3 0021A3 14 10                   LOOP                    SEI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (DISP_MAKE_BL/SCI_MAKE_BL)
0021A5 0021A5                                                 //SSTACK_PREPUSH        \2                               (DISP_MAKE_BL/SCI_MAKE_BL)
0021A5 0021A5 07 BD                                           JOBSR   \1                                               (DISP_MAKE_BL/SCI_MAKE_BL)
0021A7 0021A7 24 11                                           BCC     WAIT            ;function unsuccessful           (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (DISP_MAKE_BL/SCI_MAKE_BL)
0021A9 0021A9 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (DISP_MAKE_BL/SCI_MAKE_BL)
0021AB 0021AB MACRO                                           SSTACK_PREPULL  2                                        (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
0021AB 0021AB MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021AB 0021AB 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021AE 0021AE 18 25 F6 E7                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021B2 0021B2 8F 2D 9E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021B5 0021B5 18 22 F6 E6                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021B9 0021B9 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021B9 0021B9 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0021B9 0021B9 3D                                              RTS                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DISP_MAKE_BL/SCI_MAKE_BL)
0021BA 0021BA MACRO                   WAIT                    ISTACK_WAIT                                              (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021BA 0021BA 8F 2D 6A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021BD 0021BD 25 13                                           BLO     OF ;ISTACK_OF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021BF 0021BF 8F 2D A0                                        CPS     #ISTACK_BOTTOM                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021C2 0021C2 22 0F                                           BHI     UF ;ISTACK_UF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021C4 0021C4 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0021C4 0021C4 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0021C9 0021C9 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0021CE 0021CE 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021D0 0021D0 20 02                                           JOB     DONE                                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021D2 0021D2 00                      OF                      BGND                                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021D3 0021D3 00                      UF                      BGND                                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0021D4 0021D4 -> $21D4                DONE                    EQU     *                                                (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DISP_MAKE_BL/SCI_MAKE_BL)
0021D4 0021D4 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
0021D4 0021D4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021D4 0021D4 8F 2D 72                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021D7 0021D7 18 25 F6 BE                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021DB 0021DB 8F 2D A0                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021DE 0021DE 18 22 F6 BD                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021E2 0021E2 -> $189F                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021E2 0021E2 -> $1899                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0021E2 0021E2 20 BF                                           JOB     LOOP                                             (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#SPI ISR for transmitting data to the ST7565R display controller
                                      ;--------------------------
0021E4 0021E4 -> $21E4                DISP_ISR                EQU     *
                                                              ;Check SPIF flag
0021E4 0021E4 96 DB                                           LDAA    SPISR                                           ;read the status register
0021E6 0021E6 85 80                                           BITA    #SPIF                                           ;check SPIF flag (transmission complete)
0021E8 0021E8 27 07                                           BEQ     DISP_ISR_1                                      ;check SPTEF flag (transmit buffer empty)
0021EA 0021EA F7 00 DD                                        TST     SPIDRL                                          ;clear SPIF flag
0021ED 0021ED 1D 2D E6 80                                     BCLR    DISP_STAT, #DISP_STAT_BUSY                      ;clear busy indicator
                                                              ;Check SPTEF flag (SPISR in A)
0021F1 0021F1 85 20                   DISP_ISR_1              BITA    #SPTEF                                          ;check SPTEF flag (transmit buffer empty)
0021F3 0021F3 27 23                                           BEQ     DISP_ISR_4                                      ;Spi's transmit buffer is full
                                                              ;Check if TX buffer has data
0021F5 0021F5 FC 2D E4                                        LDD     DISP_BUF_IN                                     ;IN->A, OUT->B
0021F8 0021F8 18 17                                           CBA                                                     ;check if buffer is empty
0021FA 0021FA 27 29                                           BEQ     DISP_ISR_5                                      ;TX buffer is empty
                                                              ;Check transmission counter (OUT in B)
0021FC 0021FC CE 2D D4                                        LDX     #DISP_BUF
0021FF 0021FF B6 2D E6                                        LDAA    DISP_STAT
002202 002202 84 7F                                           ANDA    #DISP_STAT_REPEAT
002204 002204 26 32                                           BNE     DISP_ISR_7                                      ;repeat transmission
                                                              ;Check for escape character (buffer pointer in X, OUT in B)
002206 002206 A6 E5                                           LDAA    B,X                                             ;next char->A
002208 002208 81 E3                                           CMPA    #DISP_ESC_START
00220A 00220A 27 39                                           BEQ     DISP_ISR_8                                      ;escape character found
                                                              ;Transmit character (char in A, OUT in B)
00220C 00220C 5A DD                   DISP_ISR_2              STAA    SPIDRL                                          ;transmit character
00220E 00220E 1C 2D E6 80                                     BSET    DISP_STAT, #DISP_STAT_BUSY                      ;set busy indicator
002212 002212 52                      DISP_ISR_3              INCB                                                    ;advance OUT index
002213 002213 C4 0F                                           ANDB    #(DISP_BUF_SIZE-1)
002215 002215 7B 2D E5                                        STAB    DISP_BUF_OUT
                                                              ;Done
002218 002218 MACRO                   DISP_ISR_4              ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
002218 002218 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00221B 00221B 25 06                                           BLO     OF                                               (ISTACK_RTI)
00221D 00221D 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
002220 002220 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
002222 002222 0B                                              RTI                                                      (ISTACK_RTI)
002223 002223 00                      OF                      BGND                                                     (ISTACK_RTI)
002224 002224 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Wait for more TX data
002225 002225 1E 2D E6 80 07          DISP_ISR_5              BRSET   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_6          ;check for ongoing transmission
00222A 00222A 18 0B 9E 00 D8                                  MOVB    #DISP_SPICR1_CONFIG, SPICR1                     ;disable SPI
00222F 00222F 20 E7                                           JOB     DISP_ISR_4                                      ;done
002231 002231 18 0B DE 00 D8          DISP_ISR_6              MOVB    #(SPE|DISP_SPICR1_CONFIG), SPICR1               ;disable transmit buffer empty interrupt
002236 002236 20 E0                                           JOB     DISP_ISR_4                                      ;done
                                                              ;Repeat transmission (buffer pointer in X, OUT in B, DISP_STAT_REPEAT in A)
002238 002238 18 0D E5 00 DD          DISP_ISR_7              MOVB    B,X, SPIDRL                                     ;Transmit data
00223D 00223D 43                                              DECA
00223E 00223E 8A 80                                           ORAA    #DISP_STAT_BUSY
002240 002240 7A 2D E6                                        STAA    DISP_STAT
002243 002243 20 D3                                           JOB     DISP_ISR_4                                      ;done
                                                              ;Escape character found (buffer pointer in X, OUT in B)
002245 002245 52                      DISP_ISR_8              INCB                                                    ;skip ESC character
002246 002246 C4 0F                                           ANDB    #(DISP_BUF_SIZE-1)
002248 002248 F1 2D E4                                        CMPB    DISP_BUF_IN                                     ;check if ESC command is available
00224B 00224B 27 D8                                           BEQ     DISP_ISR_5                                      ;ESC sequence is incomplete
                                                              ;Evaluate the escape command (buffer pointer in X, new OUT in B)
00224D 00224D A6 E5                                           LDAA    B,X                                             ;ESC command -> A
00224F 00224F 04 80 14                                        IBEQ    A, DISP_ISR_10                                  ;$FF: transmit escape character
002252 002252 04 80 15                                        IBEQ    A, DISP_ISR_11                                  ;$FE: switch to command mode
002255 002255 04 80 23                                        IBEQ    A, DISP_ISR_12                                  ;$FD: switch to data mode
                                                              ;Set TX counter (TX count+3 in A, new OUT in B)
002258 002258 80 04                                           SUBA    #4                                              ;adjust repeat count
00225A 00225A 1F 2D E6 80 02                                  BRCLR   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_9          ;transmission in progress
00225F 00225F 8A 80                                           ORAA    #DISP_STAT_BUSY
002261 002261 7A 2D E6                DISP_ISR_9              STAA    DISP_STAT                                       ;set TX count
002264 002264 20 AC                                           JOB     DISP_ISR_3                                      ;remove ESC sequence from TX buffer
                                                              ;Transmit escape character (new OUT in B)
002266 002266 86 E3                   DISP_ISR_10             LDAA    #DISP_ESC_START
002268 002268 20 A2                                           JOB     DISP_ISR_2
                                                              ;Switch to command mode (new OUT in B)
00226A 00226A 1F 02 48 10 A3          DISP_ISR_11             BRCLR   DISP_A0_PORT, #DISP_A0_PIN, DISP_ISR_3          ;already in command mode
00226F 00226F 1E 2D E6 80 BD                                  BRSET   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_6          ;transmission in progress
                                                              ;BCLR   DISP_A0_PORT, #DISP_A0_PIN                      ;switch to command mode
002274 002274 18 0B 08 02 48                                  MOVB    #DISP_RESET_PIN, DISP_A0_PORT                   ; shortcut
002279 002279 20 97                                           JOB     DISP_ISR_3                                      ;escape sequence processed
                                                              ;Switch to data mode (new OUT in B)
00227B 00227B 1E 02 48 10 92          DISP_ISR_12             BRSET   DISP_A0_PORT, #DISP_A0_PIN, DISP_ISR_3          ;already in data mode
002280 002280 1E 2D E6 80 AC                                  BRSET   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_6          ;transmission in progress
                                                              ;BSET   DISP_A0_PORT, #DISP_A0_PIN                      ;switch to data mode
002285 002285 18 0B 18 02 48                                  MOVB    #(DISP_A0_PIN|DISP_RESET_PIN), DISP_A0_PORT     ; shortcut
00228A 00228A 20 86                                           JOB     DISP_ISR_3                                      ;escape sequence processed
00228C 00228C -> $228C                DISP_CODE_END           EQU     *
00228C 00228C -> $228C                DISP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002D4C 002D4C                                                 ORG     DISP_TABS_START, DISP_TABS_START_LIN
                                      ;#Setup stream
002D4C 002D4C 40                      DISP_SEQ_INIT_START     DB      $40                             ;start display at line 0
002D4D 002D4D A0                                              DB      $A0                             ;flip display
002D4E 002D4E C8                                              DB      $C8                             ;COM0 ->
                                                              ;DB     $A1                             ;flip display
                                                              ;DB     $C0                             ;COM0 ->
002D4F 002D4F A2                                              DB      $A2                             ;set bias 1/9 (Duty 1/65) ;
002D50 002D50 2F                                              DB      $2F                             ;enabable booster, regulator and follower
002D51 002D51 F8                                              DB      $F8                             ;set booster to 4x
002D52 002D52 00                                              DB      $00
002D53 002D53 27                                              DB      $27                             ;set ref value to 6.5
002D54 002D54 81                                              DB      $81                             ;set alpha value to 47
002D55 002D55 10                                              DB      $10                             ;V0=alpha*(1-(ref/162)*2.1V =[4V..13.5V]
002D56 002D56 AC                                              DB      $AC                             ;no static indicator
002D57 002D57 00                                              DB      $00
002D58 002D58 AF                                              DB      $AF                             ;enable display
002D59 002D59 -> $2D59                DISP_SEQ_INIT_END       EQU     *
                                      ;#Switch to command input
002D59 002D59 E3                      DISP_SEQ_CMD_START      DB      DISP_ESC_START
002D5A 002D5A FE                                              DB      DISP_ESC_CMD
002D5B 002D5B -> $2D5B                DISP_SEQ_CMD_END        EQU     *
                                      ;#Switch to data input
002D5B 002D5B E3                      DISP_SEQ_DATA_START     DB      DISP_ESC_START
002D5C 002D5C FD                                              DB      DISP_ESC_DATA
002D5D 002D5D -> $2D5D                DISP_SEQ_DATA_END       EQU     *
                                      ;;#Clear screen
                                      ;DISP_SEQ_CLEAR_START   DB  $B0 $10 $04                         ;set page 0
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B1 $10 $04                         ;set page 1
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B2 $10 $04                         ;set page 2
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B3 $10 $04                         ;set page 3
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B4 $10 $04                         ;set page 4
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B5 $10 $04                         ;set page 5
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B6 $10 $04                         ;set page 6
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B7 $10 $04                         ;set page 7
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;DISP_SEQ_CLEAR_END     EQU     *
002D5D 002D5D -> $2D5D                DISP_TABS_END           EQU     *
002D5D 002D5D -> $2D5D                DISP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# AriCalculator - KEYS - Keypad Driver (AriCalculator RevC)                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the key pad driver for the AriCalculator hardware RevC.          #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 24, 2012                                                           #
                                      ;#      - Initial release                                                      #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;#
                                      ;# Keypad layout:
                                      ;#
                                      ;#           P  P  P  P  P  P
                                      ;#           P  P  P  P  P  P
                                      ;#           0  1  2  3  4  5
                                      ;#
                                      ;#           |  |  |  |  |  |
                                      ;#  PAD6 ---29-28-27-26-25-24 |G
                                      ;#           |  |  |  |  |  | |
                                      ;#  PAD5 ---23-22-21-20-1F-1E |F
                                      ;#           |  |  |  |  |  | |
                                      ;#  PAD4 ---1D-1C-1B-1A-19-18 |E
                                      ;#              |  |  |  |  | |
                                      ;#  PAD3 ------16-15-14-13-12 |D
                                      ;#              |  |  |  |  | |
                                      ;#  PAD2 ------10--F--E--D--C |C
                                      ;#              |  |  |  |  | |
                                      ;#  PAD1 -------A--9--8--7--6 |B
                                      ;#              |  |  |  |  | |
                                      ;#  PAD0 -------4--3--2--1--0 |A
                                      ;#           ________________
                                      ;#           5  4  3  2  1  0
                                      ;#
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;#Column port
002D5D 002D5D -> $0271                KEYS_COL_PORT           EQU     PT1AD           ;default is PAD
002D5D 002D5D -> $027D                KEYS_COL_IE             EQU     PIE1AD          ;default is PAD
002D5D 002D5D -> $027F                KEYS_COL_IF             EQU     PIF1AD          ;default is PAD
002D5D 002D5D -> $0006                KEYS_COL_MSB            EQU     6               ;default is PAD6
002D5D 002D5D -> $0000                KEYS_COL_LSB            EQU     0               ;default is PAD0
                                      ;#Row port
002D5D 002D5D -> $0258                KEYS_ROW_PORT           EQU     PTP             ;default is PP
002D5D 002D5D -> $025A                KEYS_ROW_DDR            EQU     DDRP            ;default is PP
002D5D 002D5D -> $0005                KEYS_ROW_MSB            EQU     5               ;default is PP5
002D5D 002D5D -> $0000                KEYS_ROW_LSB            EQU     0               ;default is PP0
                                      ;Debounce delay
                                      ;--------------
                                      ;Output compare channel
002D5D 002D5D -> $0004                KEYS_OC                 EQU     $4              ;default is OC4 (must be >5)
                                      ;Debounce delay (TIM cycles)
002D5D 002D5D -> $0005                KEYS_DEBOUNCE_DELAY     EQU     5               ;default is 5*2.6214ms
                                      ;Buffer
                                      ;------
                                      ;#Buffer size
002D5D 002D5D -> $0008                KEYS_BUF_SIZE           EQU     8               ;depth of the command buffer
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
002D5D 002D5D -> $0001                KEYS_BLOCKING_OFF       EQU     1               ;blocking functions disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Buffer
002D5D 002D5D -> $0007                KEYS_BUF_MASK           EQU     KEYS_BUF_SIZE-1 ;index mask
                                      ;#Keypad dimensions
002D5D 002D5D -> $0007                KEYS_COL_SIZE           EQU     1+KEYS_COL_MSB-KEYS_COL_LSB
002D5D 002D5D -> $0006                KEYS_ROW_SIZE           EQU     1+KEYS_ROW_MSB-KEYS_ROW_LSB
                                      ;#Port masks
002D5D 002D5D -> $007F                KEYS_COL_MASK           EQU     ($FF>>(7-KEYS_COL_MSB))&($FF<<KEYS_COL_LSB)
002D5D 002D5D -> $003F                KEYS_ROW_MASK           EQU     ($FF>>(7-KEYS_ROW_MSB))&($FF<<KEYS_ROW_LSB)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
002DE7 002DE7                                                 ORG     KEYS_VARS_START, KEYS_VARS_START_LIN
002DE7 002DE7 -> $2DE7                KEYS_AUTO_LOC1          EQU     *               ;1st auto-place location
002DE7 002DE7                                                 ALIGN   1
                                      ;#Command buffer
002DE8 002DE8                         KEYS_BUF                DS      2*KEYS_BUF_SIZE
002DF8 002DF8                         KEYS_BUF_IN             DS      1               ;points to the next free space
002DF9 002DF9                         KEYS_BUF_OUT            DS      1               ;points to the oldest entry
002DFA 002DFA -> $2DFA                KEYS_AUTO_LOC2          EQU     *               ;2nd auto-place location
                                      ;#Delay counter (>0 during debounce delay, 0 otherwise)
002DFA 002DFA -> $2DE7                KEYS_DELAY_COUNT        EQU     ((KEYS_AUTO_LOC1&1)*KEYS_AUTO_LOC1)+(((~KEYS_AUTO_LOC1)&1)*KEYS_AUTO_LOC2)
002DFA 002DFA                                                 UNALIGN ((~KEYS_AUTO_LOC1)&1)
002DFA 002DFA -> $2DFA                KEYS_VARS_END           EQU     *
002DFA 002DFA -> $2DFA                KEYS_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00228C 00228C                                                 ORG     KEYS_CODE_START, KEYS_CODE_START_LIN
                                      ;#Receive one keystroke - non-blocking
                                      ; args:   none
                                      ; result: A:      key code
                                      ;         C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and B are preserved
00228C 00228C -> $228C                KEYS_GET_NB             EQU     *
                                                              ;Save registers
00228C 00228C 37                                              PSHB
00228D 00228D 34                                              PSHX
                                                              ;Check if there is data in the RX queue
00228E 00228E FC 2D F8                                        LDD     KEYS_BUF_IN                             ;A:B=in:out
002291 002291 18 16                                           SBA                                             ;A=in-out
002293 002293 27 2B                                           BEQ     KEYS_GET_NB_3                           ;RX buffer is empty
                                                              ;Pull entry from the buffer (out-index in B)
002295 002295 CE 2D E8                                        LDX     #KEYS_BUF
002298 002298 A6 E5                                           LDAA    B,X
00229A 00229A 52                                              INCB                                            ;increment out pointer
00229B 00229B C4 07                                           ANDB    #KEYS_BUF_MASK
00229D 00229D 7B 2D F9                                        STAB    KEYS_BUF_OUT
                                                              ;Recover from buffer overflow
0022A0 0022A0 F7 2D E7                                        TST     KEYS_DELAY_COUNT
0022A3 0022A3 26 05                                           BNE     KEYS_GET_NB_1                           ;debounce delay active
0022A5 0022A5 18 0B 7F 02 7D                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IE             ;enable KWU interrupt
                                                              ;Restore registers
0022AA 0022AA MACRO                   KEYS_GET_NB_1           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0022AA 0022AA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022AA 0022AA 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022AD 0022AD 18 25 F5 E8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022B1 0022B1 8F 2D 9B                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022B4 0022B4 18 22 F5 E7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022B8 0022B8 -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022B8 0022B8 -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022B8 0022B8 14 01                                           SEC                                             ;flag success
0022BA 0022BA 30                      KEYS_GET_NB_2           PULX
0022BB 0022BB 33                                              PULB
                                                              ;Done
0022BC 0022BC 3D                                              RTS
0022BD 0022BD 7B 2D F9                                        STAB    KEYS_BUF_OUT
                                                              ;RX buffer is empty
0022C0 0022C0 MACRO                   KEYS_GET_NB_3           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0022C0 0022C0 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022C0 0022C0 8F 2D 6A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022C3 0022C3 18 25 F5 D2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022C7 0022C7 8F 2D 9B                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022CA 0022CA 18 22 F5 D1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022CE 0022CE -> $189F                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022CE 0022CE -> $1899                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0022CE 0022CE 10 FE                                           CLC                                             ;flag problem
0022D0 0022D0 20 E8                                           JOB     KEYS_GET_NB_2
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A: key code
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and B are preserved
                                      ;#Keyboard wakeup ISR for column port (PAD)
0022D2 0022D2 -> $22D2                KEYS_ISR_KWU            EQU     *
                                                              ;Clear interrupt flag
0022D2 0022D2 18 0B 7F 02 7F                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IF             ;clear interrupt flag
                                                              ;Check for active debounce delay
0022D7 0022D7 F7 2D E7                                        TST     KEYS_DELAY_COUNT
0022DA 0022DA 26 35                                           BNE     KEYS_ISR_KWU_3                          ;debounce delay ongoing
                                                              ;Check for missed keystrokes (shortcut)
0022DC 0022DC 1E 02 71 7F 23                                  BRSET   KEYS_COL_PORT, #KEYS_COL_MASK, KEYS_ISR_KWU_2;all keys released
                                                              ;Scan colums for keystrokes
0022E1 0022E1 CE 00 00                                        LDX     #$0000                                  ;initialize key code
0022E4 0022E4 86 20                                           LDAA    #(1<<KEYS_ROW_MSB)                      ;initialize column selector
0022E6 0022E6 18 0B 3F 02 58          KEYS_ISR_KWU_1          MOVB    #KEYS_ROW_MASK, KEYS_ROW_PORT           ;drive speed-up pulse
0022EB 0022EB 7A 02 5A                                        STAA    KEYS_ROW_DDR                            ;drive unselected colums by pull-ups
0022EE 0022EE 79 02 58                                        CLR     KEYS_ROW_PORT                           ;drive selected column low
0022F1 0022F1 A7                                              NOP                                             ;wait for input synchronizers
0022F2 0022F2 C6 80                                           LDAB    #(~KEYS_COL_MASK)                       ;capture column pattern
0022F4 0022F4 FA 02 71                                        ORAB    KEYS_COL_PORT
0022F7 0022F7 51                                              COMB
0022F8 0022F8 26 1C                                           BNE     KEYS_ISR_KWU_4                          ;keystroke column detected
0022FA 0022FA 1A 01                                           LEAX    1,X                                     ;switch to next keycode
0022FC 0022FC 44                                              LSRA                                            ;switch to next column
0022FD 0022FD 24 E7                                           BCC     KEYS_ISR_KWU_1                          ;check next column (shortcut for KEYS_ROW_LSB==0)
                                                              ;ANDA   #KEYS_ROW_MASK                          ;check next column (generic)
                                                              ;BNE    KEYS_ISR_KWU_1
                                                              ;No keystroke detected
0022FF 0022FF 18 0B 3F 02 5A                                  MOVB    #KEYS_ROW_MASK, KEYS_ROW_DDR            ;observe all columns
                                                              ;Done
002304 002304 MACRO                   KEYS_ISR_KWU_2          ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
002304 002304 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
002307 002307 25 06                                           BLO     OF                                               (ISTACK_RTI)
002309 002309 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00230C 00230C 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00230E 00230E 0B                                              RTI                                                      (ISTACK_RTI)
00230F 00230F 00                      OF                      BGND                                                     (ISTACK_RTI)
002310 002310 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Debounce delay is active (disable KWU interrupts)
002311 002311 79 02 7D                KEYS_ISR_KWU_3          CLR     KEYS_COL_IE                             ;disable interrupts (shortcut for unshared col port)
                                                              ;BCLR   KEYS_COL_IE, #KEYS_COL_MASK             ;disable interrupts (generic)
002314 002314 20 EE                                           JOB     KEYS_ISR_KWU_2                          ;done
                                                              ;Keystroke column determined (column selector in A row pattern in B, key code in X, column selector in KEYS_ROW_PORT)
002316 002316 18 0B 3F 02 5A          KEYS_ISR_KWU_4          MOVB    #KEYS_ROW_MASK, KEYS_ROW_DDR            ;observe all columns
00231B 00231B 7A 02 7F                                        STAA    KEYS_COL_IF                             ;clear retriggered interrupt flag
00231E 00231E 1A 1A                                           LEAX    -(KEYS_ROW_SIZE*(KEYS_COL_LSB+1)),X     ;consider row offset
002320 002320 1A 06                   KEYS_ISR_KWU_5          LEAX    KEYS_ROW_SIZE,X                         ;switch column in keycode
002322 002322 54                                              LSRB                                            ;check next column
002323 002323 24 FB                                           BCC     KEYS_ISR_KWU_5                          ;check next row
                                                              ;Key code determined (key code in X, column selector in DDRP)
002325 002325 B7 51                                           TFR     X,B                                     ;kec code -> B
002327 002327 B6 2D F8                                        LDAA    KEYS_BUF_IN                             ;IN index -> A
00232A 00232A CE 2D E8                                        LDX     #KEYS_BUF                               ;put key code into the buffer
00232D 00232D 6B E4                                           STAB    A,X
00232F 00232F 42                                              INCA                                            ;adjust IN index
002330 002330 84 07                                           ANDA    #KEYS_BUF_MASK
002332 002332 B1 2D F9                                        CMPA    KEYS_BUF_OUT                            ;check for buffer overvlow
002335 002335 27 DA                                           BEQ     KEYS_ISR_KWU_3                          ;buffer overflow (disable KWU interrupts)
002337 002337 7A 2D F8                                        STAA    KEYS_BUF_IN                             ;update IN index
                                                              ;Setup debounce delay
00233A 00233A 18 0B 05 2D E7                                  MOVB    #KEYS_DEBOUNCE_DELAY, KEYS_DELAY_COUNT  ;set delay counter
00233F 00233F 18 04 00 44 00 58                               MOVW    TCNT, (TC0+(2*KEYS_OC))                 ;set OC to max delay
002345 002345 MACRO                                           TIM_EN  KEYS_OC                                 ;enable timer
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
002345 002345 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (TIM_EN)
                                      ;############################################################################### (TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S                 ;  0=input capture (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C                 ;  1=output compare (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;      A B B B                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y D D D                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;        T N P                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;        O E E                                  (TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
002345 002345 18 0B 10 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
00234A 00234A 4C 4C 10                                        BSET    TIE, #\1                        ;enable interrupts (TIM_EN/TIM_MULT_EN)
00234D 00234D 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (TIM_EN/TIM_MULT_EN)
002352 002352 20 BD                                           JOB     KEYS_ISR_KWU_3                          ;disable KWU interrupts
                                      ;#Timer ISR for debounce delay
002354 002354 -> $2354                KEYS_ISR_TIM            EQU     *
                                                              ;Clear interrupt flag
002354 002354 MACRO                                           TIM_CLRIF       KEYS_OC                         ;clear TIM interrupt flag
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
002354 002354 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
002354 002354 18 0B 10 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Decrement delay count
002359 002359 73 2D E7                                        DEC     KEYS_DELAY_COUNT
00235C 00235C 27 0D                                           BEQ     KEYS_ISR_TIM_2                          ;debounce delay is over
                                                              ;Done
00235E 00235E MACRO                   KEYS_ISR_TIM_1          ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00235E 00235E 8F 2D 61                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
002361 002361 25 06                                           BLO     OF                                               (ISTACK_RTI)
002363 002363 8F 2D 97                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
002366 002366 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
002368 002368 0B                                              RTI                                                      (ISTACK_RTI)
002369 002369 00                      OF                      BGND                                                     (ISTACK_RTI)
00236A 00236A 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Check if all keys have been released
00236B 00236B 18 0B 7F 02 7F          KEYS_ISR_TIM_2          MOVB    #KEYS_COL_MASK, KEYS_COL_IF             ;clear KWU interrupt flag
002370 002370 1E 02 71 7F 07                                  BRSET   KEYS_COL_PORT, #KEYS_COL_MASK, KEYS_ISR_TIM_3;all keys released
002375 002375 18 0B 05 2D E7                                  MOVB    #KEYS_DEBOUNCE_DELAY, KEYS_DELAY_COUNT  ;restart delay counter
00237A 00237A 20 E2                                           JOB     KEYS_ISR_TIM_1                          ;done
                                                              ;All keys have been released
00237C 00237C MACRO                   KEYS_ISR_TIM_3          TIM_DIS KEYS_OC                                 ;disable timer
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
00237C 00237C MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
00237C 00237C 4D 4C 10                                        BCLR    TIE, #\1                                         (TIM_DIS/TIM_MULT_DIS)
00237F 00237F 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
002381 002381 79 00 46                                        CLR     TSCR1                                            (TIM_DIS/TIM_MULT_DIS)
002384 002384 -> $2384                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
002384 002384 18 0B 7F 02 7D                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IE             ;enable KWU interrupt
002389 002389 20 D3                                           JOB     KEYS_ISR_TIM_1                          ;done
00238B 00238B -> $238B                KEYS_CODE_END           EQU     *
00238B 00238B -> $238B                KEYS_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
002D5D 002D5D                                                 ORG     KEYS_TABS_START, KEYS_TABS_START_LIN
002D5D 002D5D -> $2D5D                KEYS_TABS_END           EQU     *
002D5D 002D5D -> $2D5D                KEYS_TABS_END_LIN       EQU     @
