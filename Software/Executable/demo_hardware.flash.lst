                                      ;###############################################################################
                                      ;# AriCalculator - Demo                                                        #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 18, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# LRE or flash
                                      ;# Memory map:
??????        -> $0001                MMAP_S12G240            EQU     1               ;S12G240
??????        -> $0001                MMAP_FLASH              EQU     1               ;use FLASH memory map
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# COP debug
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ; ISTACK debug
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001400 001400                                                 ORG     MMAP_RAM_START, MMAP_RAM_START
                                      ;Variables
001400 001400 -> $1400                DEMO_VARS_START         EQU     *
001400 001400 -> $1400                DEMO_VARS_START_LIN     EQU     @
00149D 00149D                                                 ORG     DEMO_VARS_END,  DEMO_VARS_END_LIN
00E000 03E000                                                 ORG     $E000, $3E000
                                      ;Code
00E000 03E000 -> $E000                DEMO_CODE_START         EQU     *
00E000 03E000 -> $3E000               DEMO_CODE_START_LIN     EQU     @
00EFBD 03EFBD                                                 ORG     DEMO_CODE_END,  DEMO_CODE_END_LIN
                                      ;Tables
00EFBD 03EFBD -> $EFBD                DEMO_TABS_START         EQU     *
00EFBD 03EFBD -> $3EFBD               DEMO_TABS_START_LIN     EQU     @
00F9BF 03F9BF                                                 ORG     DEMO_TABS_END,  DEMO_TABS_END_LIN
00F9BF 03F9BF FF                                              ALIGN   7, $FF ;align to D-Bug12XZ programming granularity
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001400 001400                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
001400 001400                         DEMO_KEY_CODE           DS      1       ;pushed key stroke
001401 001401                         DEMO_PAGE               DS      1       ;current display page
001402 001402                         DEMO_COL                DS      1       ;current key pad ccolumn
001403 001403                         DEMO_CUR_KEY            DS      1       ;current key code
001404 001404 -> $1404                BASE_VARS_START         EQU     *
001404 001404 -> $1404                BASE_VARS_START_LIN     EQU     @
00149D 00149D                                                 ORG     BASE_VARS_END,  BASE_VARS_END_LIN
00149D 00149D -> $149D                DEMO_VARS_END           EQU     *
00149D 00149D -> $149D                DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E000 03E000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Application code
00E000 03E000 -> $E000                START_OF_CODE           EQU     *               ;Start of code
                                                              ;Initialization
00E000 03E000 MACRO                                           BASE_INIT
                                      ;############################################################################### (BASE_INIT)
                                      ;# Macros                                                                      # (BASE_INIT)
                                      ;############################################################################### (BASE_INIT)
                                      ;#Initialization                                                                 (BASE_INIT)
                                      ;---------------                                                                 (BASE_INIT)
                                                              ;Urgent initialization                                   (BASE_INIT)
00E000 03E000 MACRO                                           GPIO_INIT       ;urgent!                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#Urgent initializations                                         (BASE_INIT/GPIO_INIT)
00E000 03E000 18 0B 03 02 4D                          MOVB    #03, PPSS                               ;switch to pull-downs on PS[1:0] (TX/RX) (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
00E005 03E005 18 03 FC FF 00 7C                       MOVW    #%1111_1100_1111_1111, ATDDIEN          ;switch unused pins to digital (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PT0AD                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDR0AD                                           (BASE_INIT/GPIO_INIT)
00E00B 03E00B 18 03 FC FF 02 78                       MOVW    #%1111_1100_1111_1111, PER0AD                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PPS0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PIE0AD                                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A, B, C, D, and E                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                           ;port A/B        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRA                            ;port A/B        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                           ;port C/D        (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                            ;port C/D        (BASE_INIT/GPIO_INIT)
00E011 03E011 18 03 03 03 00 08                       MOVW    #$0303, PORTE                           ;port E (PORTE/DDRE) (BASE_INIT/GPIO_INIT)
00E017 03E017 18 0B 4F 00 0C                          MOVB    #$4F,   PUCR                            ;BKPUE|~PDPEE|PUPDE|PUPCE|PUPBE|PUPAE (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$C0,   ECLKCTL                                          (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   IRQCR                                            (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTJ                                              (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   DDRJ                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF    PERJ                                             (BASE_INIT/GPIO_INIT)
00E01C 03E01C 18 0B 0F 02 6D                          MOVB    #$0F,   PPSJ                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEJ                            ;PIEJ/PIFJ       (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTM                                              (BASE_INIT/GPIO_INIT)
00E021 03E021 18 0B 02 02 52                          MOVB    #$02,   DDRM                                             (BASE_INIT/GPIO_INIT)
00E026 03E026 18 03 0D 01 02 54                       MOVW    #$0D01  PERM                            ;PERM/PPSM       (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMM                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTP                                              (BASE_INIT/GPIO_INIT)
00E02C 03E02C 18 0B 3F 02 5A                          MOVB    #$3F,   DDRP                            ;drive keyboard columns low (BASE_INIT/GPIO_INIT)
00E031 03E031 18 0B FF 02 5C                          MOVB    #$FF    PERP                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPSP                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEP                            ;PIEP/PIFP       (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
00E036 03E036 18 0B 80 02 48                          MOVB    #$80,   PTS                                              (BASE_INIT/GPIO_INIT)
00E03B 03E03B 18 0B FA 02 4A                          MOVB    #$FA,   DDRS                                             (BASE_INIT/GPIO_INIT)
00E040 03E040 18 03 0A 01 02 4C                       MOVW    #$0A01, PERS                            ;PERS/PPSS       (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMS                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
00E046 03E046 18 0B 20 02 40                          MOVB    #$20,   PTT                                              (BASE_INIT/GPIO_INIT)
00E04B 03E04B 18 0B 20 02 42                          MOVB    #$20,   DDRT                                             (BASE_INIT/GPIO_INIT)
00E050 03E050 18 0B DC 02 44                          MOVB    #$DC    PERT                                             (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPST                                             (BASE_INIT/GPIO_INIT)
                                                      ;General setup                                                   (BASE_INIT/GPIO_INIT)
00E055 03E055 86 80                                   LDAA    #MODC                                   ;lock MODE register into NSC mode (BASE_INIT/GPIO_INIT)
00E057 03E057 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
00E059 03E059 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
00E05B 03E05B 18 0C 02 57 02 57                       MOVB    PKGCR, PKGCR                            ;lock PKGCR      (BASE_INIT/GPIO_INIT)
00E061 03E061 MACRO                                           COP_INIT        ;urgent!                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00E061 03E061 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
00E066 03E066 MACRO                                           CLOCK_INIT      ;urgent!                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/CLOCK_INIT)
00E066 03E066 18 0B FF 00 37                                  MOVB    #$FF, CPMUFLG                                   ;clear all flags (BASE_INIT/CLOCK_INIT)
00E06B 03E06B 18 03 58 00 00 34                               MOVW    #CLOCK_PLL_CONFIG, CPMUSYNR                     ;setup PLL (BASE_INIT/CLOCK_INIT)
00E071 03E071 79 00 36                                        CLR     CPMUPOSTDIV                                     ;disable POSTDIV divider (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUINT                                         ;disable PLL lock interrupts (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #LOCKIE, CPMUINT                                ;enable PLL lock interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #PLLSEL, CPMUCLKS                               ;enable PLL (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUPLL                                         ;no frequency modulation (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMURTI                                         ;no real time interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;MOVB   #(RSBCK|CR1|CR2|CR3), CPMUCOP                   ;configure COP (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMULVCTL                                       ;no low-voltage interrupt (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPICTL                                      ;no API (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRH                                       ;no API (BASE_INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRL                                       ;no API (BASE_INIT/CLOCK_INIT)
00E074 03E074 18 0B 01 02 FB                                  MOVB    #PROT, CPMUPROT                                 ;lock CPMU configuration (BASE_INIT/CLOCK_INIT)
                                                              ;Initialization w/o PLL lock                             (BASE_INIT)
00E079 03E079 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Capture and clear CRG/CPMU flags                        (BASE_INIT/RESET_INIT)
00E079 03E079 96 37                                           LDAA    CPMUFLG                 ;capture flags;          (BASE_INIT/RESET_INIT)
00E07B 03E07B 18 0B FF 00 37                                  MOVB    #$FF, CPMUFLG           ;clear flags             (BASE_INIT/RESET_INIT)
                                                              ;Check for low voltage reset (flags in A)                (BASE_INIT/RESET_INIT)
00E080 03E080 CD F9 7C                                        LDY     #RESET_MSG_POWFAIL                               (BASE_INIT/RESET_INIT)
00E083 03E083 85 20                                           BITA    #LVRF                                            (BASE_INIT/RESET_INIT)
00E085 03E085 26 4E                                           BNE     RESET_INIT_4            ;low voltage reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for illegal address reset (flags in A)            (BASE_INIT/RESET_INIT)
00E087 03E087 CD F9 88                                        LDY     #RESET_MSG_ILLADDR                               (BASE_INIT/RESET_INIT)
00E08A 03E08A 85 04                                           BITA    #ILAF                                            (BASE_INIT/RESET_INIT)
00E08C 03E08C 26 47                                           BNE     RESET_INIT_4            ;illegal address reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for power-on or external pin reset (flags in A)   (BASE_INIT/RESET_INIT)
00E08E 03E08E FD 14 75                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/RESET_INIT)
00E091 03E091 27 45                                           BEQ     RESET_INIT_5            ;power-on or external pin reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (string in Y)           (BASE_INIT/RESET_INIT)
00E093 03E093 87                                              CLRA                            ;initialize C0           (BASE_INIT/RESET_INIT)
00E094 03E094 CE 3F 00                                        LDX     #((RESET_MSG_LENGTH-1)<<8);initialize char limit and C1 (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (striing pointer in Y, char limit:C1 in X, C0 in A) (BASE_INIT/RESET_INIT)
00E097 03E097 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
00E099 03E099 2B 1F                                           BMI     RESET_INIT_2            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
00E09B 03E09B C1 20                   RESET_INIT_1            CMPB    #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
00E09D 03E09D 25 33                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
00E09F 03E09F C1 7E                                           CMPB    #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
00E0A1 03E0A1 22 2F                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
00E0A3 03E0A3 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
00E0A5 03E0A5 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
00E0A7 03E0A7 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
00E0A9 03E0A9 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
00E0AB 03E0AB B7 81                                           EXG     A, B                    ;C0:C1  -> D             (BASE_INIT/RESET_INIT)
00E0AD 03E0AD B7 D4                                           EXG     X, D                    ;C0:C1  -> X, char limit -> A (BASE_INIT/RESET_INIT)
00E0AF 03E0AF B7 51                                           TFR     X, B                    ;char limit:C1 -> D      (BASE_INIT/RESET_INIT)
                                                              ;Check character limit ((string pointer in Y, C0:C1 in X, char limit:C1 in D) (BASE_INIT/RESET_INIT)
00E0B1 03E0B1 04 00 1E                                        DBEQ    A, RESET_INIT_3         ;invalid message         (BASE_INIT/RESET_INIT)
00E0B4 03E0B4 B7 D4                                           EXG     X, D                    ;C0:C1  -> D, char limit:C1 ->  X (BASE_INIT/RESET_INIT)
00E0B6 03E0B6 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
00E0B8 03E0B8 2A E1                                           BPL     RESET_INIT_1            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;String termination found (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
00E0BA 03E0BA                         RESET_INIT_2            ;ANDB   #$7F                    ;ignore termination      (BASE_INIT/RESET_INIT)
                                                              ;;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BLO    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BHI    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
00E0BA 03E0BA C1 A0                                           CMPB    #$A0            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
00E0BC 03E0BC 25 14                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
00E0BE 03E0BE C1 FE                                           CMPB    #$FE            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
00E0C0 03E0C0 22 10                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
00E0C2 03E0C2 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
00E0C4 03E0C4 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
00E0C6 03E0C6 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
00E0C8 03E0C8 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
                                                              ;Check Fletcher's checksum (string in pointer Y, C1 in A, C0 in B) (BASE_INIT/RESET_INIT)
00E0CA 03E0CA A1 70                                           CMPA    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
00E0CC 03E0CC 26 04                                           BNE     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
00E0CE 03E0CE E1 70                                           CMPB    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
00E0D0 03E0D0 27 06                                           BEQ     RESET_INIT_5            ;valid message           (BASE_INIT/RESET_INIT)
                                                              ;Invalid error message                                   (BASE_INIT/RESET_INIT)
00E0D2 03E0D2 CD F9 96                RESET_INIT_3            LDY     #RESET_MSG_UNKNOWN      ;unknown error           (BASE_INIT/RESET_INIT)
                                                              ;Update error message                                    (BASE_INIT/RESET_INIT)
00E0D5 03E0D5 7D 14 75                RESET_INIT_4            STY     RESET_MSG_PTR           ;set error message       (BASE_INIT/RESET_INIT)
                                                              ;Done                                                    (BASE_INIT/RESET_INIT)
00E0D8 03E0D8 -> $E0D8                RESET_INIT_5            EQU     *                                                (BASE_INIT/RESET_INIT)
00E0D8 03E0D8 MACRO                                           MMAP_INIT                                                (BASE_INIT)
00E0D8 03E0D8 MACRO                                           VECTAB_INIT                                              (BASE_INIT)
00E0D8 03E0D8 MACRO                                           SSTACK_INIT                                              (BASE_INIT)
00E0D8 03E0D8 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
00E0D8 03E0D8 CF 14 43                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
00E0DB 03E0DB 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
00E0DD 03E0DD MACRO                                           VMON_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VMON_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VMON_INIT)
                                      ;############################################################################### (BASE_INIT/VMON_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VMON_INIT)
                                      ;#--------------                                                                 (BASE_INIT/VMON_INIT)
                                                              ;Monitor VBAT and VUSB                                   (BASE_INIT/VMON_INIT)
00E0DD 03E0DD 18 03 09 10 00 70                               MOVW    #((VMON_ATDCTL0_CONFIG<<8)|VMON_ATDCTL1_CONFIG), ATDCTL0 (BASE_INIT/VMON_INIT)
00E0E3 03E0E3 18 03 01 10 00 72                               MOVW    #((VMON_ATDCTL2_CONFIG<<8)|VMON_ATDCTL3_CONFIG), ATDCTL2 (BASE_INIT/VMON_INIT)
00E0E9 03E0E9 18 0B FF 00 74                                  MOVB    #VMON_ATDCTL4_CONFIG, ATDCTL4                    (BASE_INIT/VMON_INIT)
00E0EE 03E0EE 18 0B 03 00 79                                  MOVB    #((1<<VMON_VBAT_CONVERSION)|(1<<VMON_VUSB_CONVERSION)), ATDCMPEL (BASE_INIT/VMON_INIT)
00E0F3 03E0F3 18 0B 03 00 7F                                  MOVB    #((1<<VMON_VBAT_CONVERSION)|(1<<VMON_VUSB_CONVERSION)), ATDCMPHTL (BASE_INIT/VMON_INIT)
00E0F8 03E0F8 18 03 BA 2D 00 80                               MOVW    #VMON_VBAT_UPPER_THRESHOLD, VMON_VBAT_ATDDR      (BASE_INIT/VMON_INIT)
00E0FE 03E0FE 18 03 BA 2D 00 82                               MOVW    #VMON_VUSB_UPPER_THRESHOLD, VMON_VUSB_ATDDR      (BASE_INIT/VMON_INIT)
                                                                      ;Start ATD conversions                           (BASE_INIT/VMON_INIT)
00E104 03E104 18 03 FF FF 00 7A                               MOVW    #$FFFF, ATDSTAT2H                                (BASE_INIT/VMON_INIT)
00E10A 03E10A 18 0B FF 00 76                                  MOVB    #$FF, ATDSTAT0                                   (BASE_INIT/VMON_INIT)
00E10F 03E10F 18 0B 38 00 75                                  MOVB    #VMON_ATDCTL5_CONFIG, ATDCTL5                    (BASE_INIT/VMON_INIT)
00E114 03E114 MACRO                                           TIM_INIT                                                 (BASE_INIT)
00E114 03E114 MACRO                                           LED_INIT                                                 (BASE_INIT)
00E114 03E114 MACRO                                           KEYS_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/KEYS_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/KEYS_INIT)
                                      ;############################################################################### (BASE_INIT/KEYS_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/KEYS_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/KEYS_INIT)
00E114 03E114 4C 40 10                                        BSET    TIOS, #(1<<KEYS_OC)                              (BASE_INIT/KEYS_INIT)
                                                              ;BCLR   TCTL2, #(3<<(2*(KEYS_OC-4)))                     (BASE_INIT/KEYS_INIT)
                                                              ;BCLR   TIE, #(1<<KEYS_OC)                               (BASE_INIT/KEYS_INIT)
                                                              ;Check for any key                                       (BASE_INIT/KEYS_INIT)
                                                              ;MOVB   #KEY_PP_MASK, DDRP      ;drive all columns low   (BASE_INIT/KEYS_INIT)
                                                              ;Clear delay counter                                     (BASE_INIT/KEYS_INIT)
00E117 03E117 79 14 9C                                        CLR     KEYS_DELAY_COUNT                                 (BASE_INIT/KEYS_INIT)
                                                              ;Clear input buffer                                      (BASE_INIT/KEYS_INIT)
00E11A 03E11A 18 03 00 00 14 9A                               MOVW    #$0000, KEYS_BUF_IN     ;clear input buffer      (BASE_INIT/KEYS_INIT)
                                                              ;Observe all columns                                     (BASE_INIT/KEYS_INIT)
                                                              ;MOVB   #KEYS_ROW_MASK, KEYS_ROW_PORT           ;drive all colums (shortcut for unshared row port) (BASE_INIT/KEYS_INIT)
                                                              ;BSET   KEYS_ROW_PORT, #KEYS_ROW_MASK           ;drive all colums (generic) (BASE_INIT/KEYS_INIT)
                                                              ;Clear and enable row interrupts                         (BASE_INIT/KEYS_INIT)
00E120 03E120 18 0B 7F 02 7F                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IF                      (BASE_INIT/KEYS_INIT)
00E125 03E125 18 0B 7F 02 7D                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IE                      (BASE_INIT/KEYS_INIT)
00E12A 03E12A MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                      ;#--------------                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
00E12A 03E12A 4C 40 0C                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
00E12D 03E12D 18 0B 18 00 CD                                  MOVB    #(TXPOL|RXPOL), SCISR2                           (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
00E132 03E132 FC 14 70                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
00E135 03E135 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
00E137 03E137 CE 19 99                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
00E13A 03E13A 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
00E13C 03E13C 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
00E13F 03E13F 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
00E141 03E141 CD F5 04                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
00E144 03E144 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
00E146 03E146 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
00E148 03E148 8D F5 14                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
00E14B 03E14B 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
00E14D 03E14D CE 00 A3                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
00E150 03E150 18 03 4C 6B 14 70                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
00E156 03E156 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format                                        (BASE_INIT/SCI_INIT)
00E158 03E158 18 0B 04 00 CA                                  MOVB    #SCI_8N1, SCICR1                        ;8N1     (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;BSET   TCTL3, #(SCI_BD_TCTL3_VAL>>8)                    (BASE_INIT/SCI_INIT)
00E15D 03E15D 4C 4B 09                                        BSET    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (BASE_INIT/SCI_INIT)
00E160 03E160 MACRO                                           STRING_INIT                                              (BASE_INIT)
00E160 03E160 MACRO                                           NUM_INIT                                                 (BASE_INIT)
00E160 03E160 MACRO                                           DISP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/DISP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/DISP_INIT)
                                      ;############################################################################### (BASE_INIT/DISP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/DISP_INIT)
                                                              ;Deassert display reset                                  (BASE_INIT/DISP_INIT)
                                                              ;BSET   DISP_RESET_PORT, #DISP_RESET_PIN                 (BASE_INIT/DISP_INIT)
00E160 03E160 18 0B 08 02 48                                  MOVB    #DISP_RESET_PIN, DISP_RESET_PORT ;shortcut       (BASE_INIT/DISP_INIT)
                                                              ;Initialize Variables                                    (BASE_INIT/DISP_INIT)
00E165 03E165 18 03 00 00 14 88                               MOVW    #$0000, DISP_BUF_IN                              (BASE_INIT/DISP_INIT)
00E16B 03E16B 79 14 77                                        CLR     DISP_STAT                                        (BASE_INIT/DISP_INIT)
                                                              ;Initialize SPI                                          (BASE_INIT/DISP_INIT)
00E16E 03E16E 18 03 9E 19 00 D8                               MOVW    #((DISP_SPICR1_CONFIG<<8)|DISP_SPICR2_CONFIG), SPICR1 (BASE_INIT/DISP_INIT)
00E174 03E174 18 0B 00 00 DA                                  MOVB    #DISP_SPIBR_CONFIG, SPIBR                        (BASE_INIT/DISP_INIT)
                                                              ;Setup display                                           (BASE_INIT/DISP_INIT)
00E179 03E179 CE F9 AE                                        LDX     #DISP_SEQ_INIT_START                             (BASE_INIT/DISP_INIT)
00E17C 03E17C CD 00 0D                                        LDY     #(DISP_SEQ_INIT_END-DISP_SEQ_INIT_START)         (BASE_INIT/DISP_INIT)
00E17F 03E17F MACRO                                           DISP_STREAM_BL                                           (BASE_INIT/DISP_INIT)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
00E17F 03E17F MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (BASE_INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
00E17F 03E17F MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E17F 03E17F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E17F 03E17F 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E182 03E182 18 25 03 11                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E186 03E186 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E189 03E189 18 22 03 10                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E18D 03E18D -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E18D 03E18D -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E18D 03E18D 16 ED 89                                        JOBSR   \1                                               (BASE_INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Show welcome/error screen on DISP                       (BASE_INIT)
00E190 03E190 MACRO                                           RESET_BR_ERR    BASE_DISP_ERROR                          (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
00E190 03E190 FD 14 75                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
00E193 03E193 26 19                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
00E195 03E195 MACRO                                           BASE_DISP_WELCOME                                        (BASE_INIT)
                                      ;#DISP                                                                           (BASE_INIT/BASE_DISP_WELCOME)
00E195 03E195 CE EF D1                                        LDX     #BASE_DISP_WELCOME_SCR                           (BASE_INIT/BASE_DISP_WELCOME)
00E198 03E198 CD 03 17                                        LDY     #BASE_DISP_WELCOME_SIZE                          (BASE_INIT/BASE_DISP_WELCOME)
00E19B 03E19B MACRO                                           DISP_STREAM_BL                                           (BASE_INIT/BASE_DISP_WELCOME)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
00E19B 03E19B MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
00E19B 03E19B MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E19B 03E19B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E19B 03E19B 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E19E 03E19E 18 25 02 F5                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1A2 03E1A2 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1A5 03E1A5 18 22 02 F4                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1A9 03E1A9 -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1A9 03E1A9 -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1A9 03E1A9 16 ED 89                                        JOBSR   \1                                               (BASE_INIT/BASE_DISP_WELCOME/DISP_STREAM_BL/SSTACK_JOBSR)
00E1AC 03E1AC 20 17                                           JOB     BASE_DISP_DONE                                   (BASE_INIT)
00E1AE 03E1AE MACRO                   BASE_DISP_ERROR         BASE_DISP_ERROR                                          (BASE_INIT)
                                      ;#DISP                                                                           (BASE_INIT/BASE_DISP_ERROR)
00E1AE 03E1AE CE F2 E8                                        LDX     #BASE_DISP_ERROR_SCR                             (BASE_INIT/BASE_DISP_ERROR)
00E1B1 03E1B1 CD 01 54                                        LDY     #BASE_DISP_ERROR_SIZE                            (BASE_INIT/BASE_DISP_ERROR)
00E1B4 03E1B4 MACRO                                           DISP_STREAM_BL                                           (BASE_INIT/BASE_DISP_ERROR)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
00E1B4 03E1B4 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
00E1B4 03E1B4 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E1B4 03E1B4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1B4 03E1B4 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1B7 03E1B7 18 25 02 DC                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1BB 03E1BB 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1BE 03E1BE 18 22 02 DB                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1C2 03E1C2 -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1C2 03E1C2 -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E1C2 03E1C2 16 ED 89                                        JOBSR   \1                                               (BASE_INIT/BASE_DISP_ERROR/DISP_STREAM_BL/SSTACK_JOBSR)
00E1C5 03E1C5 -> $E1C5                BASE_DISP_DONE          EQU     *                                                (BASE_INIT)
                                                              ;Wait for PLL lock                                       (BASE_INIT)
00E1C5 03E1C5 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00E1C5 03E1C5 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00E1C7 03E1C7 4E 39 80 1D                             BRSET   CPMUCLKS, #PLLSEL, DONE                         ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00E1CB 03E1CB MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1CB 03E1CB 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1CE 03E1CE 18 25 02 D1                                     BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1D2 03E1D2 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1D5 03E1D5 18 22 02 D0                                     BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1D9 03E1D9 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00E1D9 03E1D9 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00E1DE 03E1DE 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00E1E3 03E1E3 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1E5 03E1E5 3E                                              WAI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1E6 03E1E6 -> $E4A3                OF                      EQU     ISTACK_OF                                        (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1E6 03E1E6 -> $E4A9                UF                      EQU     ISTACK_UF                                        (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1E6 03E1E6 -> $E1E6                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00E1E6 03E1E6 20 DD                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00E1E8 03E1E8 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;Wait for voltage monitor                                (BASE_INIT)
00E1EA 03E1EA MACRO                                           VMON_WAIT_FOR_1ST_RESULTS                                (BASE_INIT)
                                      ;#Wait for first connversion results                                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
                                      ;#----------------------------------                                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
00E1EA 03E1EA 14 10                   LOOP            SEI                                                              (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
00E1EC 03E1EC 4E 76 80 1D                             BRSET   ATDSTAT0, #SCF, DONE                    ;Conversion sequence complete (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
00E1F0 03E1F0 MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E1F0 03E1F0 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E1F3 03E1F3 18 25 02 AC                                     BLO     OF ;ISTACK_OF                                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E1F7 03E1F7 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E1FA 03E1FA 18 22 02 AB                                     BHI     UF ;ISTACK_UF                                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E1FE 03E1FE MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
00E1FE 03E1FE 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
00E203 03E203 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT/COP_SERVICE)
00E208 03E208 10 EF                                           CLI                                                      (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E20A 03E20A 3E                                              WAI                                                      (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E20B 03E20B -> $E4A3                OF                      EQU     ISTACK_OF                                        (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E20B 03E20B -> $E4A9                UF                      EQU     ISTACK_UF                                        (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E20B 03E20B -> $E20B                DONE                    EQU     *                                                (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS/ISTACK_WAIT)
00E20B 03E20B 20 DD                                   JOB     LOOP                                                     (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
00E20D 03E20D 10 EF                   DONE            CLI                                                              (BASE_INIT/VMON_WAIT_FOR_1ST_RESULTS)
                                                              ;Send welcome/error message through                      (BASE_INIT)
00E20F 03E20F MACRO                                           SCI_BR_DISABLED BASE_SCI_DONE                            (BASE_INIT)
                                      ;#Check if disabled                                                              (BASE_INIT/SCI_BR_DISABLED)
                                      ;#-----------------                                                              (BASE_INIT/SCI_BR_DISABLED)
                                                              ;Branch if disabled                                      (BASE_INIT/SCI_BR_DISABLED)
00E20F 03E20F 4F CB 0C 56                                     BRCLR   SCICR2, #(TE|RE), \1                             (BASE_INIT/SCI_BR_DISABLED)
00E213 03E213 MACRO                                           RESET_BR_ERR    BASE_SCI_ERROR                           (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
00E213 03E213 FD 14 75                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
00E216 03E216 26 16                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
00E218 03E218 MACRO                                           BASE_SCI_WELCOME                                         (BASE_INIT)
                                      ;#Enable SCI whenever USB is connected, disable otherwise                        (BASE_INIT/BASE_SCI_WELCOME)
                                      ;--------------------------------------------------------                        (BASE_INIT/BASE_SCI_WELCOME)
                                      ;#Welcome messages                                                               (BASE_INIT/BASE_SCI_WELCOME)
                                      ;-----------------                                                               (BASE_INIT/BASE_SCI_WELCOME)
                                      ;#SCI                                                                            (BASE_INIT/BASE_SCI_WELCOME)
00E218 03E218 CE F4 3C                                        LDX     #BASE_SCI_WELCOME_MSG   ;print welcome message   (BASE_INIT/BASE_SCI_WELCOME)
00E21B 03E21B MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_WELCOME)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
00E21B 03E21B MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
00E21B 03E21B MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E21B 03E21B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E21B 03E21B 8F 14 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E21E 03E21E 18 25 02 75                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E222 03E222 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E225 03E225 18 22 02 74                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E229 03E229 -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E229 03E229 -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E229 03E229 16 E9 40                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_WELCOME/STRING_PRINT_BL/SSTACK_JOBSR)
00E22C 03E22C 20 3B                                           JOB     BASE_SCI_DONE                                    (BASE_INIT)
00E22E 03E22E MACRO                   BASE_SCI_ERROR          BASE_SCI_ERROR                                           (BASE_INIT)
                                      ;#Error messages                                                                 (BASE_INIT/BASE_SCI_ERROR)
                                      ;---------------                                                                 (BASE_INIT/BASE_SCI_ERROR)
                                      ; args:   Y: error message                                                       (BASE_INIT/BASE_SCI_ERROR)
                                      ;#SCI                                                                            (BASE_INIT/BASE_SCI_ERROR)
00E22E 03E22E CE F4 58                                        LDX     #BASE_SCI_ERROR_HEADER  ;print error header      (BASE_INIT/BASE_SCI_ERROR)
00E231 03E231 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_ERROR)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
00E231 03E231 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00E231 03E231 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E231 03E231 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E231 03E231 8F 14 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E234 03E234 18 25 02 5F                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E238 03E238 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E23B 03E23B 18 22 02 5E                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E23F 03E23F -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E23F 03E23F -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E23F 03E23F 16 E9 40                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00E242 03E242 B7 65                                           TFR     Y, X                    ;print error message     (BASE_INIT/BASE_SCI_ERROR)
00E244 03E244 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_ERROR)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
00E244 03E244 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00E244 03E244 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E244 03E244 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E244 03E244 8F 14 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E247 03E247 18 25 02 4C                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E24B 03E24B 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E24E 03E24E 18 22 02 4B                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E252 03E252 -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E252 03E252 -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E252 03E252 16 E9 40                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00E255 03E255 CE F4 65                                        LDX     #BASE_SCI_ERROR_TRAILER ;print error TRAILER     (BASE_INIT/BASE_SCI_ERROR)
00E258 03E258 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/BASE_SCI_ERROR)
                                      ;#Basic print function - blocking                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
00E258 03E258 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00E258 03E258 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E258 03E258 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E258 03E258 8F 14 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E25B 03E25B 18 25 02 38                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E25F 03E25F 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E262 03E262 18 22 02 37                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E266 03E266 -> $E49D                UF                      EQU     SSTACK_UF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E266 03E266 -> $E497                OF                      EQU     SSTACK_OF                                        (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E266 03E266 16 E9 40                                        JOBSR   \1                                               (BASE_INIT/BASE_SCI_ERROR/STRING_PRINT_BL/SSTACK_JOBSR)
00E269 03E269 -> $E269                BASE_SCI_DONE           EQU     *                                                (BASE_INIT)
00E269 03E269 -> $E269                DEMO_KEY_STROKE_LOOP    EQU     *
                                                              ;Wait for key stroke
00E269 03E269 MACRO                                           KEYS_GET_BL             ;key code -> A
                                      ;#Receive one byte - blocking                                                    (KEYS_GET_BL)
                                      ; args:   none                                                                   (KEYS_GET_BL)
                                      ; result: A: key code                                                            (KEYS_GET_BL)
                                      ; SSTACK: 7 bytes                                                                (KEYS_GET_BL)
                                      ;         X, Y, and B are preserved                                              (KEYS_GET_BL)
00E269 03E269 MACRO                                           KEYS_CALL_BL    KEYS_GET_NB, 4                           (KEYS_GET_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (KEYS_GET_BL/KEYS_CALL_BL)
                                      ; args:   1: non-blocking function                                               (KEYS_GET_BL/KEYS_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (KEYS_GET_BL/KEYS_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (KEYS_GET_BL/KEYS_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (KEYS_GET_BL/KEYS_CALL_BL)
00E269 03E269 MACRO                                           SCI_CALL_BL     \1, \2                                   (KEYS_GET_BL/KEYS_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ; args:   1: non-blocking function                                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Disable interrupts                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00E269 03E269 14 10                   LOOP                    SEI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Call non-blocking function                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00E26B 03E26B MACRO                                           SSTACK_JOBSR    \1, \2                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;#Check stack and call subroutine                                                (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
00E26B 03E26B MACRO                                           SSTACK_PREPUSH  \2                                       (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E26B 03E26B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E26B 03E26B 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E26E 03E26E 18 25 02 25                                     BLO     OF                      ;=> 3 cycles     4 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E272 03E272 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E275 03E275 18 22 02 24                                     BHI     UF                      ;=> 3 cycles     4 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E279 03E279 -> $E49D                UF                      EQU     SSTACK_UF                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E279 03E279 -> $E497                OF                      EQU     SSTACK_OF                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E279 03E279 16 EE B6                                        JOBSR   \1                                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/SSTACK_JOBSR)
00E27C 03E27C 25 1D                                           BCS     DONE            ;function successful             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Wait for next interrupt                                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00E27E 03E27E MACRO                                           ISTACK_WAIT                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                      ;#Wait until any interrupt has been serviced                                     (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E27E 03E27E 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E281 03E281 18 25 02 1E                                     BLO     OF ;ISTACK_OF                                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E285 03E285 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E288 03E288 18 22 02 1D                                     BHI     UF ;ISTACK_UF                                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E28C 03E28C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00E28C 03E28C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00E291 03E291 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT/COP_SERVICE)
00E296 03E296 10 EF                                           CLI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E298 03E298 3E                                              WAI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E299 03E299 -> $E4A3                OF                      EQU     ISTACK_OF                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E299 03E299 -> $E4A9                UF                      EQU     ISTACK_UF                                        (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
00E299 03E299 -> $E299                DONE                    EQU     *                                                (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL/ISTACK_WAIT)
                                                              ;Try again                                               (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00E299 03E299 20 CE                                           JOB     LOOP                                             (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
                                                              ;Enable interrupts                                       (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00E29B 03E29B 10 EF                   DONE                    CLI                                                      (KEYS_GET_BL/KEYS_CALL_BL/SCI_CALL_BL)
00E29D 03E29D 7A 14 00                                        STAA    DEMO_KEY_CODE
                                                              ;Print key code (key code in A)
00E2A0 03E2A0 CE EF C5                                        LDX     #DEMO_PRINT_HEADER              ;print header
00E2A3 03E2A3 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00E2A3 03E2A3 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00E2A3 03E2A3 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E2A3 03E2A3 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2A3 03E2A3 8F 14 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2A6 03E2A6 18 25 01 ED                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2AA 03E2AA 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2AD 03E2AD 18 22 01 EC                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2B1 03E2B1 -> $E49D                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2B1 03E2B1 -> $E497                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2B1 03E2B1 16 E9 40                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
00E2B4 03E2B4 CD 00 00                                        LDY     #$0000                          ;reverse digits
00E2B7 03E2B7 B7 05                                           TFR     A, X
00E2B9 03E2B9 C6 10                                           LDAB    #16                             ;set base
00E2BB 03E2BB MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00E2BB 03E2BB MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00E2BB 03E2BB MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00E2BB 03E2BB MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2BB 03E2BB 8F 14 1F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2BE 03E2BE 18 25 01 D5                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2C2 03E2C2 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2C5 03E2C5 18 22 01 D4                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2C9 03E2C9 -> $E49D                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2C9 03E2C9 -> $E497                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2C9 03E2C9 16 E9 BC                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00E2CC 03E2CC MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00E2CC 03E2CC MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00E2CC 03E2CC                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00E2CC 03E2CC MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00E2CC 03E2CC MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00E2CC 03E2CC MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E2CC 03E2CC MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2CC 03E2CC 8F 14 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2CF 03E2CF 18 25 01 C4                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2D3 03E2D3 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2D6 03E2D6 18 22 01 C3                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2DA 03E2DA -> $E49D                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2DA 03E2DA -> $E497                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2DA 03E2DA 16 E5 CF                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00E2DD 03E2DD MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00E2DD 03E2DD MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E2DD 03E2DD MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2DD 03E2DD 8F 14 20                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2E0 03E2E0 18 25 01 B3                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2E4 03E2E4 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2E7 03E2E7 18 22 01 B2                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2EB 03E2EB -> $E49D                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2EB 03E2EB -> $E497                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E2EB 03E2EB 16 EA 4D                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00E2EE 03E2EE 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00E2F0 03E2F0 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
00E2F0 03E2F0 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00E2F0 03E2F0 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2F0 03E2F0 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2F3 03E2F3 18 25 01 A0                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2F7 03E2F7 8F 14 3D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2FA 03E2FA 18 22 01 9F                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2FE 03E2FE -> $E49D                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2FE 03E2FE -> $E497                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E2FE 03E2FE 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Display keystroke
                                                              ;Clear page 0
00E300 03E300 C7                                              CLRB                                    ;switch to page 0
00E301 03E301 MACRO                                           DEMO_SWITCH_PAGE_BL
                                      ;Switch page macro                                                               (DEMO_SWITCH_PAGE_BL)
00E301 03E301 MACRO                                           SSTACK_JOBSR    DEMO_SWITCH_PAGE_BL, 13                  (DEMO_SWITCH_PAGE_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
00E301 03E301 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E301 03E301 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E301 03E301 8F 14 1A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E304 03E304 18 25 01 8F                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E308 03E308 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E30B 03E30B 18 22 01 8E                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E30F 03E30F -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E30F 03E30F -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E30F 03E30F 16 E3 C7                                        JOBSR   \1                                               (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
00E312 03E312 MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 128           ;clear entire page
00E312 03E312 86 80                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00E314 03E314 MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E314 03E314 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E314 03E314 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E314 03E314 8F 14 16                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E317 03E317 18 25 01 7C                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E31B 03E31B 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E31E 03E31E 18 22 01 7B                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E322 03E322 -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E322 03E322 -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E322 03E322 16 E4 37                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                                              ;Initialize variables
00E325 03E325 79 14 01                                        CLR     DEMO_PAGE
00E328 03E328 79 14 03                                        CLR     DEMO_CUR_KEY
                                                              ;Switch to next page
00E32B 03E32B F6 14 01                DEMO_PAGE_LOOP          LDAB    DEMO_PAGE                       ;increment page count
00E32E 03E32E C1 07                                           CMPB    #7                              ;check is key search is complete
00E330 03E330 18 24 FF 35                                     BHS     DEMO_KEY_STROKE_LOOP            ;wait for next key stroke
00E334 03E334 52                                              INCB
00E335 03E335 7B 14 01                                        STAB    DEMO_PAGE
00E338 03E338 MACRO                                           DEMO_SWITCH_PAGE_BL                     ;transmit command sequence
                                      ;Switch page macro                                                               (DEMO_SWITCH_PAGE_BL)
00E338 03E338 MACRO                                           SSTACK_JOBSR    DEMO_SWITCH_PAGE_BL, 13                  (DEMO_SWITCH_PAGE_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
00E338 03E338 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E338 03E338 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E338 03E338 8F 14 1A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E33B 03E33B 18 25 01 58                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E33F 03E33F 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E342 03E342 18 22 01 57                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E346 03E346 -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E346 03E346 -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E346 03E346 07 7F                                           JOBSR   \1                                               (DEMO_SWITCH_PAGE_BL/SSTACK_JOBSR)
00E348 03E348 79 14 02                                        CLR     DEMO_COL                        ;clear column counter
                                                              ;Right margin
00E34B 03E34B MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 31            ;draw right margin
00E34B 03E34B 86 1F                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00E34D 03E34D MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E34D 03E34D MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E34D 03E34D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E34D 03E34D 8F 14 16                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E350 03E350 18 25 01 43                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E354 03E354 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E357 03E357 18 22 01 42                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E35B 03E35B -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E35B 03E35B -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E35B 03E35B 16 E4 37                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                                              ;Draw next box
00E35E 03E35E B6 14 03                DEMO_COL_LOOP           LDAA    DEMO_CUR_KEY
00E361 03E361 B1 14 00                                        CMPA    DEMO_KEY_CODE
00E364 03E364 27 05                                           BEQ     DEMO_COL_LOOP_1                 ;draw black box
00E366 03E366 16 E4 6F                                        JOBSR   DEMO_WHITE_BOX
00E369 03E369 20 03                                           JOB     DEMO_COL_LOOP_2
00E36B 03E36B 16 E4 83                DEMO_COL_LOOP_1         JOBSR   DEMO_BLACK_BOX
00E36E 03E36E 72 14 02                DEMO_COL_LOOP_2         INC     DEMO_COL
00E371 03E371 72 14 03                                        INC     DEMO_CUR_KEY
                                                              ;Draw space
00E374 03E374 86 05                                           LDAA    #5
00E376 03E376 B1 14 01                                        CMPA    DEMO_PAGE
00E379 03E379 23 33                                           BLS     DEMO_COL_LOOP_5                 ;rows E-G
                                                              ;Rows A-D (5 in A)
00E37B 03E37B B1 14 02                                        CMPA    DEMO_COL
00E37E 03E37E 23 15                                           BLS     DEMO_COL_LOOP_3                 ;col 5
                                                              ;Rows A-D, cols 0-4
00E380 03E380 MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 9             ;draw wide space
00E380 03E380 86 09                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00E382 03E382 MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E382 03E382 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E382 03E382 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E382 03E382 8F 14 16                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E385 03E385 18 25 01 0E                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E389 03E389 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E38C 03E38C 18 22 01 0D                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E390 03E390 -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E390 03E390 -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E390 03E390 16 E4 37                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E393 03E393 20 C9                                           JOB     DEMO_COL_LOOP
                                                              ;Rows A-D, col 5
00E395 03E395 72 14 03                DEMO_COL_LOOP_3         INC     DEMO_CUR_KEY                    ;skip key
00E398 03E398 MACRO                   DEMO_COL_LOOP_4         DEMO_CLEAR_COLUMNS_IMM_BL 31            ;draw left margin
00E398 03E398 86 1F                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00E39A 03E39A MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E39A 03E39A MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E39A 03E39A MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E39A 03E39A 8F 14 16                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E39D 03E39D 18 25 00 F6                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3A1 03E3A1 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3A4 03E3A4 18 22 00 F5                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3A8 03E3A8 -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3A8 03E3A8 -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3A8 03E3A8 16 E4 37                                        JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E3AB 03E3AB 06 E3 2B                                        JOB     DEMO_PAGE_LOOP
                                                              ;Rows E-G (5 in A)
00E3AE 03E3AE B1 14 02                DEMO_COL_LOOP_5         CMPA    DEMO_COL
00E3B1 03E3B1 25 E5                                           BLO     DEMO_COL_LOOP_4                 ;draw left margin
                                                              ;Rows E-G, cols 0-5
00E3B3 03E3B3 MACRO                                           DEMO_CLEAR_COLUMNS_IMM_BL 6             ;draw narrow space
00E3B3 03E3B3 86 06                                           LDAA    #\1                                              (DEMO_CLEAR_COLUMNS_IMM_BL)
00E3B5 03E3B5 MACRO                                           SSTACK_JOBSR    DEMO_CLEAR_COLUMNS_BL, 9                 (DEMO_CLEAR_COLUMNS_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E3B5 03E3B5 MACRO                                           SSTACK_PREPUSH  \2                                       (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E3B5 03E3B5 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3B5 03E3B5 8F 14 16                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3B8 03E3B8 18 25 00 DB                                     BLO     OF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3BC 03E3BC 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3BF 03E3BF 18 22 00 DA                                     BHI     UF                      ;=> 3 cycles     4 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3C3 03E3C3 -> $E49D                UF                      EQU     SSTACK_UF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3C3 03E3C3 -> $E497                OF                      EQU     SSTACK_OF                                        (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3C3 03E3C3 07 72                                           JOBSR   \1                                               (DEMO_CLEAR_COLUMNS_IMM_BL/SSTACK_JOBSR)
00E3C5 03E3C5 20 97                                           JOB     DEMO_COL_LOOP
                                      ;#Switch page (blocking)
                                      ; args:   B: target page
                                      ; result: none (data input active)
                                      ; SSTACK: 13 bytes
                                      ;         D is preserved
00E3C7 03E3C7 -> $E3C7                DEMO_SWITCH_PAGE_BL     EQU     *
                                                              ;Save registers
00E3C7 03E3C7 37                                              PSHB                                                    ;push accu B onto the SSTACK
                                                              ;Switch to command input
00E3C8 03E3C8 MACRO                                           DISP_CMD_INPUT_BL                                       ;(SSTACK: 10 bytes)
                                      ;#Switch to command input (blocking)                                             (DISP_CMD_INPUT_BL)
                                      ; args:   none                                                                   (DISP_CMD_INPUT_BL)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_CMD_INPUT_BL)
                                      ;         D is preserved                                                         (DISP_CMD_INPUT_BL)
00E3C8 03E3C8 MACRO                                           DISP_STREAM_FROM_TO_BL  DISP_SEQ_CMD_START, DISP_SEQ_CMD_END (DISP_CMD_INPUT_BL)
                                      ;# Convenience macros                                                            (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00E3C8 03E3C8 CE F9 BB                                        LDX     #\1                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00E3CB 03E3CB CD 00 02                                        LDY     #(\2-\1)                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00E3CE 03E3CE MACRO                                           DISP_STREAM_BL                                           (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00E3CE 03E3CE MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00E3CE 03E3CE MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E3CE 03E3CE MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3CE 03E3CE 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3D1 03E3D1 18 25 00 C2                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3D5 03E3D5 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3D8 03E3D8 18 22 00 C1                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3DC 03E3DC -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3DC 03E3DC -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3DC 03E3DC 16 ED 89                                        JOBSR   \1                                               (DISP_CMD_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Set page address
00E3DF 03E3DF CA B0                                           ORAB    #$B0
00E3E1 03E3E1 MACRO                                           DISP_TX_BL                                              ;(SSTACK: 7 bytes)
                                      ;#Transmit commands and data (blocking)                                          (DISP_TX_BL)
                                      ; args:   B: buffer entry                                                        (DISP_TX_BL)
                                      ; result: none                                                                   (DISP_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_BL)
                                      ;         X, Y and D are preserved                                               (DISP_TX_BL)
00E3E1 03E3E1 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_BL/SSTACK_JOBSR)
00E3E1 03E3E1 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E3E1 03E3E1 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3E1 03E3E1 8F 14 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3E4 03E3E4 18 25 00 AF                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3E8 03E3E8 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3EB 03E3EB 18 22 00 AE                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3EF 03E3EF -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3EF 03E3EF -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3EF 03E3EF 16 ED 47                                        JOBSR   \1                                               (DISP_TX_BL/SSTACK_JOBSR)
                                                              ;Switch to first column
00E3F2 03E3F2 MACRO                                           DISP_TX_IMM_BL  $10                                     ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
00E3F2 03E3F2 C6 10                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
00E3F4 03E3F4 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
00E3F4 03E3F4 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E3F4 03E3F4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3F4 03E3F4 8F 14 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3F7 03E3F7 18 25 00 9C                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3FB 03E3FB 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E3FE 03E3FE 18 22 00 9B                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E402 03E402 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E402 03E402 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E402 03E402 16 ED 47                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
00E405 03E405 MACRO                                           DISP_TX_IMM_BL  $04                                     ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
00E405 03E405 C6 04                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
00E407 03E407 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
00E407 03E407 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E407 03E407 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E407 03E407 8F 14 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E40A 03E40A 18 25 00 89                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E40E 03E40E 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E411 03E411 18 22 00 88                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E415 03E415 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E415 03E415 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E415 03E415 16 ED 47                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                                              ;Switch to data input
00E418 03E418 MACRO                                           DISP_DATA_INPUT_BL                                      ;(SSTACK: 10 bytes)
                                      ;#Switch to data input (blocking)                                                (DISP_DATA_INPUT_BL)
                                      ; args:   none                                                                   (DISP_DATA_INPUT_BL)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_DATA_INPUT_BL)
                                      ;         D is preserved                                                         (DISP_DATA_INPUT_BL)
00E418 03E418 MACRO                                           DISP_STREAM_FROM_TO_BL  DISP_SEQ_DATA_START, DISP_SEQ_DATA_END (DISP_DATA_INPUT_BL)
                                      ;# Convenience macros                                                            (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00E418 03E418 CE F9 BD                                        LDX     #\1                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00E41B 03E41B CD 00 02                                        LDY     #(\2-\1)                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
00E41E 03E41E MACRO                                           DISP_STREAM_BL                                           (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00E41E 03E41E MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00E41E 03E41E MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E41E 03E41E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E41E 03E41E 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E421 03E421 25 74                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E423 03E423 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E426 03E426 22 75                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E428 03E428 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E428 03E428 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E428 03E428 16 ED 89                                        JOBSR   \1                                               (DISP_DATA_INPUT_BL/DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Restore registers
00E42B 03E42B MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E42B 03E42B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E42B 03E42B 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E42E 03E42E 25 67                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E430 03E430 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E433 03E433 22 68                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E435 03E435 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E435 03E435 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E435 03E435 33                                              PULB                                                    ;pull accu B from the SSTACK
                                                              ;Done
00E436 03E436 3D                                              RTS
                                      ;#Clear columns (blocking)
                                      ; args:   A: number of columns (data input active)
                                      ; result: none (data input active)
                                      ; SSTACK: 9 bytes
                                      ;         X, Y, and D are preserved
00E437 03E437 -> $E437                DEMO_CLEAR_COLUMNS_BL   EQU     *
                                                              ;Transmit sequence
00E437 03E437 MACRO                                           DISP_TX_IMM_BL  DISP_ESC_START                          ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
00E437 03E437 C6 E3                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
00E439 03E439 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
00E439 03E439 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E439 03E439 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E439 03E439 8F 14 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E43C 03E43C 25 59                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E43E 03E43E 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E441 03E441 22 5A                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E443 03E443 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E443 03E443 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E443 03E443 16 ED 47                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
00E446 03E446 18 0E                                           TAB
00E448 03E448 MACRO                                           DISP_TX_BL                                              ;(SSTACK: 7 bytes)
                                      ;#Transmit commands and data (blocking)                                          (DISP_TX_BL)
                                      ; args:   B: buffer entry                                                        (DISP_TX_BL)
                                      ; result: none                                                                   (DISP_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_BL)
                                      ;         X, Y and D are preserved                                               (DISP_TX_BL)
00E448 03E448 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_BL/SSTACK_JOBSR)
00E448 03E448 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E448 03E448 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E448 03E448 8F 14 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E44B 03E44B 25 4A                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E44D 03E44D 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E450 03E450 22 4B                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E452 03E452 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E452 03E452 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E452 03E452 16 ED 47                                        JOBSR   \1                                               (DISP_TX_BL/SSTACK_JOBSR)
00E455 03E455 MACRO                                           DISP_TX_IMM_BL  $00                                     ;(SSTACK: 7 bytes)
                                      ;#Transmit immediate commands and data (blocking)                                (DISP_TX_IMM_BL)
                                      ; args:   1: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; result: B: buffer entry                                                        (DISP_TX_IMM_BL)
                                      ; SSTACK: 7 bytes                                                                (DISP_TX_IMM_BL)
                                      ;         X, Y and A are preserved                                               (DISP_TX_IMM_BL)
00E455 03E455 C6 00                                           LDAB    #\1                                              (DISP_TX_IMM_BL)
00E457 03E457 MACRO                                           SSTACK_JOBSR    DISP_TX_BL, 7                            (DISP_TX_IMM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_IMM_BL/SSTACK_JOBSR)
00E457 03E457 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E457 03E457 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E457 03E457 8F 14 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E45A 03E45A 25 3B                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E45C 03E45C 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E45F 03E45F 22 3C                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E461 03E461 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E461 03E461 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_IMM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E461 03E461 16 ED 47                                        JOBSR   \1                                               (DISP_TX_IMM_BL/SSTACK_JOBSR)
                                                              ;Done
00E464 03E464 MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E464 03E464 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E464 03E464 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E467 03E467 25 2E                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E469 03E469 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E46C 03E46C 22 2F                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E46E 03E46E -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E46E 03E46E -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E46E 03E46E 3D                                              RTS
                                      ;#Draw a white box
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 10 bytes
                                      ;         D is preserved
00E46F 03E46F MACRO                   DEMO_WHITE_BOX          DISP_STREAM_FROM_TO_BL  DEMO_WHITE_BOX_START, DEMO_WHITE_BOX_END
                                      ;# Convenience macros                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL)
00E46F 03E46F CE EF BD                                        LDX     #\1                                              (DISP_STREAM_FROM_TO_BL)
00E472 03E472 CD 00 05                                        LDY     #(\2-\1)                                         (DISP_STREAM_FROM_TO_BL)
00E475 03E475 MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00E475 03E475 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00E475 03E475 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E475 03E475 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E475 03E475 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E478 03E478 25 1D                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E47A 03E47A 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E47D 03E47D 22 1E                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E47F 03E47F -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E47F 03E47F -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E47F 03E47F 16 ED 89                                        JOBSR   \1                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00E482 03E482 3D                                              RTS
                                      ;#Draw a black box
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 10 bytes
                                      ;         D is preserved
00E483 03E483 MACRO                   DEMO_BLACK_BOX          DISP_STREAM_FROM_TO_BL  DEMO_BLACK_BOX_START, DEMO_BLACK_BOX_END
                                      ;# Convenience macros                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;--------------------                                                            (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL)
00E483 03E483 CE EF C2                                        LDX     #\1                                              (DISP_STREAM_FROM_TO_BL)
00E486 03E486 CD 00 03                                        LDY     #(\2-\1)                                         (DISP_STREAM_FROM_TO_BL)
00E489 03E489 MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: number of bytes to transmit                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y: $0000                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 10 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D is preserved                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00E489 03E489 MACRO                                           SSTACK_JOBSR    DISP_STREAM_NB, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00E489 03E489 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00E489 03E489 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E489 03E489 8F 14 18                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E48C 03E48C 25 09                                           BLO     OF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E48E 03E48E 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E491 03E491 22 0A                                           BHI     UF                      ;=> 3 cycles     4 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E493 03E493 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E493 03E493 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E493 03E493 16 ED 89                                        JOBSR   \1                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00E496 03E496 3D                                              RTS
00E497 03E497 -> $E497                BASE_CODE_START         EQU     *
00E497 03E497 -> $3E497               BASE_CODE_START_LIN     EQU     @
00EFBD 03EFBD                                                 ORG     BASE_CODE_END,  BASE_CODE_END_LIN
00EFBD 03EFBD -> $EFBD                DEMO_CODE_END           EQU     *
00EFBD 03EFBD -> $3EFBD               DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00EFBD 03EFBD                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
00EFBD 03EFBD 7E E3 04 42 7E          DEMO_WHITE_BOX_START    DB      $7E DISP_ESC_START $04 $42 $7E
00EFC2 03EFC2 -> $EFC2                DEMO_WHITE_BOX_END      EQU     *
00EFC2 03EFC2 E3 06 7E                DEMO_BLACK_BOX_START    DB      DISP_ESC_START $06 $7E
00EFC5 03EFC5 -> $EFC5                DEMO_BLACK_BOX_END      EQU     *
00EFC5 03EFC5 MACRO                   DEMO_PRINT_HEADER       STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00EFC5 03EFC5 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00EFC6 03EFC6 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00EFC7 03EFC7 4B 65 79 20 63 6F 64 65                         FCS     "Key code: "
              3A A0                   
00EFD1 03EFD1 -> $EFD1                BASE_TABS_START         EQU     *
00EFD1 03EFD1 -> $3EFD1               BASE_TABS_START_LIN     EQU     @
00F9BF 03F9BF                                                 ORG     BASE_TABS_END,  BASE_TABS_END_LIN
00F9BF 03F9BF -> $F9BF                DEMO_TABS_END           EQU     *
00F9BF 03F9BF -> $3F9BF               DEMO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (AriCalculator)                                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# TIM channel allocation                                                      #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     KEYS (debounce delay)                                         #
                                      ;#      OC5:     LCD backlight PWM                                             #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# CLOCK
00F9BF 03F9BF -> $0001                CLOCK_CPMU              EQU     1               ;CPMU
00F9BF 03F9BF -> $0001                CLOCK_IRC               EQU     1               ;use IRC
00F9BF 03F9BF -> $F4240               CLOCK_OSC_FREQ          EQU      1000000        ; 1 MHz IRC frequency
00F9BF 03F9BF -> $17D7840             CLOCK_BUS_FREQ          EQU     25000000        ; 25 MHz bus frequency
00F9BF 03F9BF -> $F4240               CLOCK_REF_FREQ          EQU      1000000        ; 1 MHz reference clock frequency
00F9BF 03F9BF -> $0001                CLOCK_VCOFRQ            EQU     $1              ; 10 MHz VCO frequency
00F9BF 03F9BF -> $0000                CLOCK_REFFRQ            EQU     $0              ;  1 MHz reference clock frequency
                                      ;# ISTACK
00F9BF 03F9BF -> $0004                ISTACK_LEVELS           EQU     4               ;max. interrupt nesting levels
                                      ;# SCI
00F9BF 03F9BF -> $0001                SCI_RXTX_ACTHI          EQU     1               ;RXD/TXD are inverted (active high)
00F9BF 03F9BF -> $0001                SCI_FC_RTSCTS           EQU     1               ;RTS/CTS flow control
00F9BF 03F9BF -> $0250                SCI_RTS_PORT            EQU     PTM             ;PTM
00F9BF 03F9BF -> $0001                SCI_RTS_PIN             EQU     PM0             ;PM0
00F9BF 03F9BF -> $0250                SCI_CTS_PORT            EQU     PTM             ;PTM
00F9BF 03F9BF -> $0252                SCI_CTS_DDR             EQU     DDRM            ;DDRM
00F9BF 03F9BF -> $0255                SCI_CTS_PPS             EQU     PPSM            ;PPSM
00F9BF 03F9BF -> $0002                SCI_CTS_PIN             EQU     PM1             ;PM1
00F9BF 03F9BF -> $0001                SCI_CTS_WEAK_DRIVE      EQU     1               ;weak CTS drive
00F9BF 03F9BF -> $0003                SCI_DLY_OC              EQU     3               ;delay timer OC3
00F9BF 03F9BF -> $0001                SCI_BD_ON               EQU     1               ;use baud rate detection
00F9BF 03F9BF -> $0001                SCI_BD_TIM              EQU     1               ;TIM
00F9BF 03F9BF -> $0000                SCI_BD_ICPE             EQU     0               ;RX posedge capture IC0
00F9BF 03F9BF -> $0001                SCI_BD_ICNE             EQU     1               ;RX negedge capture IC1
00F9BF 03F9BF -> $0002                SCI_BD_OC               EQU     2               ;BD delay timer OC2
00F9BF 03F9BF -> $0001                SCI_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;# NUM
00F9BF 03F9BF -> $0001                NUM_MAX_BASE_16         EQU     1               ;BASE<=16
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001404 001404                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001404 001404 -> $1404                MMAP_VARS_START         EQU     *
001404 001404 -> $1404                MMAP_VARS_START_LIN     EQU     @
001404 001404                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
001404 001404 -> $1404                VECTAB_VARS_START       EQU     *
001404 001404 -> $1404                VECTAB_VARS_START_LIN   EQU     @
001404 001404                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001404 001404 -> $1404                GPIO_VARS_START         EQU     *
001404 001404 -> $1404                GPIO_VARS_START_LIN     EQU     @
001404 001404                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001404 001404 -> $1404                SSTACK_VARS_START       EQU     *
001404 001404 -> $1404                SSTACK_VARS_START_LIN   EQU     @
001404 001404                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
001404 001404 -> $1404                ISTACK_VARS_START       EQU     *
001404 001404 -> $1404                ISTACK_VARS_START_LIN   EQU     @
001443 001443                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
001443 001443 -> $1443                CLOCK_VARS_START        EQU     *
001443 001443 -> $1443                CLOCK_VARS_START_LIN    EQU     @
001443 001443                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001443 001443 -> $1443                COP_VARS_START          EQU     *
001443 001443 -> $1443                COP_VARS_START_LIN      EQU     @
001443 001443                                                 ORG     COP_VARS_END, COP_VARS_END_LIN
001443 001443 -> $1443                TIM_VARS_START          EQU     *
001443 001443 -> $1443                TIM_VARS_START_LIN      EQU     @
001443 001443                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001443 001443 -> $1443                SCI_VARS_START          EQU     *
001443 001443 -> $1443                SCI_VARS_START_LIN      EQU     @
001473 001473                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
001473 001473 -> $1473                STRING_VARS_START       EQU     *
001473 001473 -> $1473                STRING_VARS_START_LIN   EQU     @
001473 001473                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
001473 001473 -> $1473                NUM_VARS_START          EQU     *
001473 001473 -> $1473                NUM_VARS_START_LIN      EQU     @
001473 001473                                                 ORG     NUM_VARS_END, NUM_VARS_END_LIN
001473 001473 -> $1473                RESET_VARS_START        EQU     *
001473 001473 -> $1473                RESET_VARS_START_LIN    EQU     @
001477 001477                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
001477 001477 -> $1477                LED_VARS_START          EQU     *
001477 001477 -> $1477                LED_VARS_START_LIN      EQU     @
001477 001477                                                 ORG     LED_VARS_END, LED_VARS_END_LIN
001477 001477 -> $1477                VMON_VARS_START EQU     *
001477 001477 -> $1477                VMON_VARS_START_LIN     EQU     @
001477 001477                                                 ORG     VMON_VARS_END, VMON_VARS_END_LIN
001477 001477 -> $1477                NVM_VARS_START          EQU     *
001477 001477 -> $1477                NVM_VARS_START_LIN      EQU     @
001477 001477                                                 ORG     NVM_VARS_END, NVM_VARS_END_LIN
001477 001477 -> $1477                DISP_VARS_START         EQU     *
001477 001477 -> $1477                DISP_VARS_START_LIN     EQU     @
00148A 00148A                                                 ORG     DISP_VARS_END, DISP_VARS_END_LIN
00148A 00148A -> $148A                KEYS_VARS_START         EQU     *
00148A 00148A -> $148A                KEYS_VARS_START_LIN     EQU     @
00149D 00149D                                                 ORG     KEYS_VARS_END, KEYS_VARS_END_LIN
00149D 00149D -> $149D                BASE_VARS_END           EQU     *
00149D 00149D -> $149D                BASE_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E497 03E497                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
00E497 03E497 -> $E497                MMAP_CODE_START         EQU     *
00E497 03E497 -> $3E497               MMAP_CODE_START_LIN     EQU     @
00E497 03E497                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
00E497 03E497 -> $E497                VECTAB_CODE_START       EQU     *
00E497 03E497 -> $3E497               VECTAB_CODE_START_LIN   EQU     @
00E497 03E497                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
00E497 03E497 -> $E497                GPIO_CODE_START         EQU     *
00E497 03E497 -> $3E497               GPIO_CODE_START_LIN     EQU     @
00E497 03E497                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
00E497 03E497 -> $E497                SSTACK_CODE_START       EQU     *
00E497 03E497 -> $3E497               SSTACK_CODE_START_LIN   EQU     @
00E4A3 03E4A3                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
00E4A3 03E4A3 -> $E4A3                ISTACK_CODE_START       EQU     *
00E4A3 03E4A3 -> $3E4A3               ISTACK_CODE_START_LIN   EQU     @
00E4AF 03E4AF                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
00E4AF 03E4AF -> $E4AF                CLOCK_CODE_START        EQU     *
00E4AF 03E4AF -> $3E4AF               CLOCK_CODE_START_LIN    EQU     @
00E4AF 03E4AF                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
00E4AF 03E4AF -> $E4AF                COP_CODE_START          EQU     *
00E4AF 03E4AF -> $3E4AF               COP_CODE_START_LIN      EQU     @
00E4AF 03E4AF                                                 ORG     COP_CODE_END, COP_CODE_END_LIN
00E4AF 03E4AF -> $E4AF                TIM_CODE_START          EQU     *
00E4AF 03E4AF -> $3E4AF               TIM_CODE_START_LIN      EQU     @
00E4AF 03E4AF                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
00E4AF 03E4AF -> $E4AF                SCI_CODE_START          EQU     *
00E4AF 03E4AF -> $3E4AF               SCI_CODE_START_LIN      EQU     @
00E909 03E909                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
00E909 03E909 -> $E909                STRING_CODE_START       EQU     *
00E909 03E909 -> $3E909               STRING_CODE_START_LIN   EQU     @
00E9BC 03E9BC                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
00E9BC 03E9BC -> $E9BC                NUM_CODE_START          EQU     *
00E9BC 03E9BC -> $3E9BC               NUM_CODE_START_LIN      EQU     @
00EAC0 03EAC0                                                 ORG     NUM_CODE_END, NUM_CODE_END_LIN
00EAC0 03EAC0 -> $EAC0                RESET_CODE_START        EQU     *
00EAC0 03EAC0 -> $3EAC0               RESET_CODE_START_LIN    EQU     @
00EAF1 03EAF1                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
00EAF1 03EAF1 -> $EAF1                LED_CODE_START          EQU     *
00EAF1 03EAF1 -> $3EAF1               LED_CODE_START_LIN      EQU     @
00EAF1 03EAF1                                                 ORG     LED_CODE_END, LED_CODE_END_LIN
00EAF1 03EAF1 -> $EAF1                VMON_CODE_START EQU     *
00EAF1 03EAF1 -> $3EAF1               VMON_CODE_START_LIN     EQU     @
00EB9E 03EB9E                                                 ORG     VMON_CODE_END, VMON_CODE_END_LIN
00EB9E 03EB9E -> $EB9E                NVM_CODE_START          EQU     *
00EB9E 03EB9E -> $3EB9E               NVM_CODE_START_LIN      EQU     @
00ECED 03ECED                                                 ORG     NVM_CODE_END, NVM_CODE_END_LIN
00ECED 03ECED -> $ECED                DISP_CODE_START         EQU     *
00ECED 03ECED -> $3ECED               DISP_CODE_START_LIN     EQU     @
00EEB6 03EEB6                                                 ORG     DISP_CODE_END, DISP_CODE_END_LIN
00EEB6 03EEB6 -> $EEB6                KEYS_CODE_START         EQU     *
00EEB6 03EEB6 -> $3EEB6               KEYS_CODE_START_LIN     EQU     @
00EFBD 03EFBD                                                 ORG     KEYS_CODE_END, KEYS_CODE_END_LIN
00EFBD 03EFBD -> $EFBD                BASE_CODE_END           EQU     *
00EFBD 03EFBD -> $3EFBD               BASE_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00EFD1 03EFD1                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
                                      ;#DISP screens
                                      ;-------------
                                      ;Welcome screen
00EFD1 03EFD1 MACRO                   BASE_DISP_WELCOME_SCR   DISP_WELCOME_STREAM                     ;display splash screen
                                      ;Size = 1024 bytes                                                               (DISP_WELCOME_STREAM)
                                      ;#Frame 0:                                                                       (DISP_WELCOME_STREAM)
                                      ;#----------------------------------------------------------------------         (DISP_WELCOME_STREAM)
                                      ;#Page 0:                                                                        (DISP_WELCOME_STREAM)
00EFD1 03EFD1 B0 10 04                                DB  $B0 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00EFD4 03EFD4 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00EFD6 03EFD6 E3 0C 00                                DB  DISP_ESC_START $0C $00          ;repeat 12 times             (DISP_WELCOME_STREAM)
00EFD9 03EFD9 80 60 18 00 40 20 78 00                 DB  $80 $60 $18 $00 $40 $20 $78 $00                              (DISP_WELCOME_STREAM)
00EFE1 03EFE1 30 48 30 00 40 F8 40 00                 DB  $30 $48 $30 $00 $40 $F8 $40 $00                              (DISP_WELCOME_STREAM)
00EFE9 03EFE9 78 48 30 00 F8 00 70 08                 DB  $78 $48 $30 $00 $F8 $00 $70 $08                              (DISP_WELCOME_STREAM)
00EFF1 03EFF1 70 00 48 48 30 00 F8 00                 DB  $70 $00 $48 $48 $30 $00 $F8 $00                              (DISP_WELCOME_STREAM)
00EFF9 03EFF9 78 48 30 00 90 08 08 F0                 DB  $78 $48 $30 $00 $90 $08 $08 $F0                              (DISP_WELCOME_STREAM)
00F001 03F001 00 78 00 40 20 78 00 78                 DB  $00 $78 $00 $40 $20 $78 $00 $78                              (DISP_WELCOME_STREAM)
00F009 03F009 A0 20 A0 78                             DB  $A0 $20 $A0 $78                                              (DISP_WELCOME_STREAM)
00F00D 03F00D E3 08 00                                DB  DISP_ESC_START $08 $00          ;repeat 8 times              (DISP_WELCOME_STREAM)
00F010 03F010 E0 E0 18 18 60 60 80 80                 DB  $E0 $E0 $18 $18 $60 $60 $80 $80                              (DISP_WELCOME_STREAM)
00F018 03F018 F8 F8 98 98 80 80 E0 E0                 DB  $F8 $F8 $98 $98 $80 $80 $E0 $E0                              (DISP_WELCOME_STREAM)
00F020 03F020 18 18 80 80 98 98 80 80                 DB  $18 $18 $80 $80 $98 $98 $80 $80                              (DISP_WELCOME_STREAM)
00F028 03F028 F8 F8 60 60 78 78 60 60                 DB  $F8 $F8 $60 $60 $78 $78 $60 $60                              (DISP_WELCOME_STREAM)
00F030 03F030 F8 F8 E0 E0 18 18 98 98                 DB  $F8 $F8 $E0 $E0 $18 $18 $98 $98                              (DISP_WELCOME_STREAM)
00F038 03F038 00 00 F8 F8 18 18                       DB  $00 $00 $F8 $F8 $18 $18                                      (DISP_WELCOME_STREAM)
00F03E 03F03E E3 06 98                                DB  DISP_ESC_START $06 $98          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F041 03F041 18 18 F8 F8                             DB  $18 $18 $F8 $F8                                              (DISP_WELCOME_STREAM)
00F045 03F045 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 1:                                                                        (DISP_WELCOME_STREAM)
00F047 03F047 B1 10 04                                DB  $B1 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F04A 03F04A E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F04C 03F04C 00 00 C0 30 00 60 90 60                 DB  $00 $00 $C0 $30 $00 $60 $90 $60                              (DISP_WELCOME_STREAM)
00F054 03F054 00 F0 00 10 01 60 90 F0                 DB  $00 $F0 $00 $10 $01 $60 $90 $F0                              (DISP_WELCOME_STREAM)
00F05C 03F05C 00 E0 10 E0 00 70 80 F0                 DB  $00 $E0 $10 $E0 $00 $70 $80 $F0                              (DISP_WELCOME_STREAM)
00F064 03F064 00 80 F0 80 00 F0 00 78                 DB  $00 $80 $F0 $80 $00 $F0 $00 $78                              (DISP_WELCOME_STREAM)
00F06C 03F06C 95 64 00 10 00 80 80 F0                 DB  $95 $64 $00 $10 $00 $80 $80 $F0                              (DISP_WELCOME_STREAM)
00F074 03F074 00 F0 01 60 90 60 00 E0                 DB  $00 $F0 $01 $60 $90 $60 $00 $E0                              (DISP_WELCOME_STREAM)
00F07C 03F07C 10 61 11 E0 00 81 F0 80                 DB  $10 $61 $11 $E0 $00 $81 $F0 $80                              (DISP_WELCOME_STREAM)
00F084 03F084 00 60 90 60 00 71 80 F0                 DB  $00 $60 $90 $60 $00 $71 $80 $F0                              (DISP_WELCOME_STREAM)
00F08C 03F08C E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F08F 03F08F 66 66 67 67 9E 9E E0 E0                 DB  $66 $66 $67 $67 $9E $9E $E0 $E0                              (DISP_WELCOME_STREAM)
00F097 03F097 F9 F9 1F 1F 99 99 19 19                 DB  $F9 $F9 $1F $1F $99 $99 $19 $19                              (DISP_WELCOME_STREAM)
00F09F 03F09F F9 F9 E6 E6 87 87 01 01                 DB  $F9 $F9 $E6 $E6 $87 $87 $01 $01                              (DISP_WELCOME_STREAM)
00F0A7 03F0A7 67 67 E1 E1 66 66 00 00                 DB  $67 $67 $E1 $E1 $66 $66 $00 $00                              (DISP_WELCOME_STREAM)
00F0AF 03F0AF 66 66 01 01 9F 9F 78 78                 DB  $66 $66 $01 $01 $9F $9F $78 $78                              (DISP_WELCOME_STREAM)
00F0B7 03F0B7 7F 7F 00 00 FF FF 80 80                 DB  $7F $7F $00 $00 $FF $FF $80 $80                              (DISP_WELCOME_STREAM)
00F0BF 03F0BF E3 06 9F                                DB  DISP_ESC_START $06 $9F          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F0C2 03F0C2 80 80 FF FF                             DB  $80 $80 $FF $FF                                              (DISP_WELCOME_STREAM)
00F0C6 03F0C6 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 2:                                                                        (DISP_WELCOME_STREAM)
00F0C8 03F0C8 B2 10 04                                DB  $B2 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F0CB 03F0CB E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F0CD 03F0CD 00 03                                   DB  $00 $03                                                      (DISP_WELCOME_STREAM)
00F0CF 03F0CF E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
00F0D2 03F0D2 02                                      DB  $02                                                          (DISP_WELCOME_STREAM)
00F0D3 03F0D3 E3 05 00                                DB  DISP_ESC_START $05 $00          ;repeat 5 times              (DISP_WELCOME_STREAM)
00F0D6 03F0D6 03                                      DB  $03                                                          (DISP_WELCOME_STREAM)
00F0D7 03F0D7 E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
00F0DA 03F0DA 03 00 00 01 00 00 02                    DB  $03 $00 $00 $01 $00 $00 $02                                  (DISP_WELCOME_STREAM)
00F0E1 03F0E1 E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
00F0E4 03F0E4 02 02 01 80 63 00 00 80                 DB  $02 $02 $01 $80 $63 $00 $00 $80                              (DISP_WELCOME_STREAM)
00F0EC 03F0EC 60 00 20 00 C0 20 F8 00                 DB  $60 $00 $20 $00 $C0 $20 $F8 $00                              (DISP_WELCOME_STREAM)
00F0F4 03F0F4 00 E1 00 00 00 E0 00 00                 DB  $00 $E1 $00 $00 $00 $E0 $00 $00                              (DISP_WELCOME_STREAM)
00F0FC 03F0FC E0 00                                   DB  $E0 $00                                                      (DISP_WELCOME_STREAM)
00F0FE 03F0FE E3 FF                                   DB  DISP_ESC_START DISP_ESC_ESC     ;escape $E3                  (DISP_WELCOME_STREAM)
00F100 03F100 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F103 03F103 1E 1E 7E 7E 9F 9F 87 87                 DB  $1E $1E $7E $7E $9F $9F $87 $87                              (DISP_WELCOME_STREAM)
00F10B 03F10B FF FF 78 78 F9 F9 78 78                 DB  $FF $FF $78 $78 $F9 $F9 $78 $78                              (DISP_WELCOME_STREAM)
00F113 03F113 7F 7F 07 07 E7 E7 9E 9E                 DB  $7F $7F $07 $07 $E7 $E7 $9E $9E                              (DISP_WELCOME_STREAM)
00F11B 03F11B 86 86 99 99 98 98 E0 E0                 DB  $86 $86 $99 $99 $98 $98 $E0 $E0                              (DISP_WELCOME_STREAM)
00F123 03F123 E6 E6 1E 1E 07 07 78 78                 DB  $E6 $E6 $1E $1E $07 $07 $78 $78                              (DISP_WELCOME_STREAM)
00F12B 03F12B 66 66 78 78 99 99 79 79                 DB  $66 $66 $78 $78 $99 $99 $79 $79                              (DISP_WELCOME_STREAM)
00F133 03F133 F9 F9 01 01 61 61 01 01                 DB  $F9 $F9 $01 $01 $61 $61 $01 $01                              (DISP_WELCOME_STREAM)
00F13B 03F13B F9 F9                                   DB  $F9 $F9                                                      (DISP_WELCOME_STREAM)
00F13D 03F13D E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 3:                                                                        (DISP_WELCOME_STREAM)
00F13F 03F13F B3 10 04                                DB  $B3 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F142 03F142 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F144 03F144 E3 27 00                                DB  DISP_ESC_START $27 $00          ;repeat 39 times             (DISP_WELCOME_STREAM)
00F147 03F147 06 01 00 00 06 01 00 00                 DB  $06 $01 $00 $00 $06 $01 $00 $00                              (DISP_WELCOME_STREAM)
00F14F 03F14F 01 00 00 01 00 00 01 03                 DB  $01 $00 $00 $01 $00 $00 $01 $03                              (DISP_WELCOME_STREAM)
00F157 03F157 01 00 01 03 01 00 00 01                 DB  $01 $00 $01 $03 $01 $00 $00 $01                              (DISP_WELCOME_STREAM)
00F15F 03F15F 07                                      DB  $07                                                          (DISP_WELCOME_STREAM)
00F160 03F160 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F163 03F163 06 06 60 60 9F 9F 07 07                 DB  $06 $06 $60 $60 $9F $9F $07 $07                              (DISP_WELCOME_STREAM)
00F16B 03F16B 67 67 FE FE 67 67 7E 7E                 DB  $67 $67 $FE $FE $67 $67 $7E $7E                              (DISP_WELCOME_STREAM)
00F173 03F173 06 06 1E 1E 81 81 19 19                 DB  $06 $06 $1E $1E $81 $81 $19 $19                              (DISP_WELCOME_STREAM)
00F17B 03F17B FF FF F9 F9 67 67 07 07                 DB  $FF $FF $F9 $F9 $67 $67 $07 $07                              (DISP_WELCOME_STREAM)
00F183 03F183 9F 9F 98 98 7E 7E 86 86                 DB  $9F $9F $98 $98 $7E $7E $86 $86                              (DISP_WELCOME_STREAM)
00F18B 03F18B 1E 1E 86 86 99 99 98 98                 DB  $1E $1E $86 $86 $99 $99 $98 $98                              (DISP_WELCOME_STREAM)
00F193 03F193 07 07 E0 E0 86 86 60 60                 DB  $07 $07 $E0 $E0 $86 $86 $60 $60                              (DISP_WELCOME_STREAM)
00F19B 03F19B 1F 1F                                   DB  $1F $1F                                                      (DISP_WELCOME_STREAM)
00F19D 03F19D E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 4:                                                                        (DISP_WELCOME_STREAM)
00F19F 03F19F B4 10 04                                DB  $B4 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F1A2 03F1A2 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F1A4 03F1A4 E3 46 00                                DB  DISP_ESC_START $46 $00          ;repeat 70 times             (DISP_WELCOME_STREAM)
00F1A7 03F1A7 06 06 60 60 1F 1F 18 18                 DB  $06 $06 $60 $60 $1F $1F $18 $18                              (DISP_WELCOME_STREAM)
00F1AF 03F1AF 06 06 E7 E7 86 86 66 66                 DB  $06 $06 $E7 $E7 $86 $86 $66 $66                              (DISP_WELCOME_STREAM)
00F1B7 03F1B7 FE FE 06 06 07 07 80 80                 DB  $FE $FE $06 $06 $07 $07 $80 $80                              (DISP_WELCOME_STREAM)
00F1BF 03F1BF 67 67 E1 E1 98 98 E0 E0                 DB  $67 $67 $E1 $E1 $98 $98 $E0 $E0                              (DISP_WELCOME_STREAM)
00F1C7 03F1C7 81 81 E1 E1 98 98 81 81                 DB  $81 $81 $E1 $E1 $98 $98 $81 $81                              (DISP_WELCOME_STREAM)
00F1CF 03F1CF 06 06 7F 7F 99 99 E7 E7                 DB  $06 $06 $7F $7F $99 $99 $E7 $E7                              (DISP_WELCOME_STREAM)
00F1D7 03F1D7 E0 E0 99 99 79 79 78 78                 DB  $E0 $E0 $99 $99 $79 $79 $78 $78                              (DISP_WELCOME_STREAM)
00F1DF 03F1DF 9E 9E                                   DB  $9E $9E                                                      (DISP_WELCOME_STREAM)
00F1E1 03F1E1 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 5:                                                                        (DISP_WELCOME_STREAM)
00F1E3 03F1E3 B5 10 04                                DB  $B5 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F1E6 03F1E6 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F1E8 03F1E8 10 18 0F 1F 00 0E 1F 11                 DB  $10 $18 $0F $1F $00 $0E $1F $11                              (DISP_WELCOME_STREAM)
00F1F0 03F1F0 1F 0E 00 10 7F 7F 10 00                 DB  $1F $0E $00 $10 $7F $7F $10 $00                              (DISP_WELCOME_STREAM)
00F1F8 03F1F8 1F 1F 11 1F 0E 00 FF FF                 DB  $1F $1F $11 $1F $0E $00 $FF $FF                              (DISP_WELCOME_STREAM)
00F200 03F200 00 1E 1F 01 1F 1E 00 11                 DB  $00 $1E $1F $01 $1F $1E $00 $11                              (DISP_WELCOME_STREAM)
00F208 03F208 11 1F 0E 00 FF FF 00 1F                 DB  $11 $1F $0E $00 $FF $FF $00 $1F                              (DISP_WELCOME_STREAM)
00F210 03F210 1F 11 1F 0E 00 C6 C7 01                 DB  $1F $11 $1F $0E $00 $C6 $C7 $01                              (DISP_WELCOME_STREAM)
00F218 03F218 FF FE 00 5F 5F 00 10 18                 DB  $FF $FE $00 $5F $5F $00 $10 $18                              (DISP_WELCOME_STREAM)
00F220 03F220 0F 1F 00 3F FF C8 C8 FF                 DB  $0F $1F $00 $3F $FF $C8 $C8 $FF                              (DISP_WELCOME_STREAM)
00F228 03F228 3F                                      DB  $3F                                                          (DISP_WELCOME_STREAM)
00F229 03F229 E3 05 00                                DB  DISP_ESC_START $05 $00          ;repeat 5 times              (DISP_WELCOME_STREAM)
00F22C 03F22C 86 86 80 80                             DB  $86 $86 $80 $80                                              (DISP_WELCOME_STREAM)
00F230 03F230 E3 04 98                                DB  DISP_ESC_START $04 $98          ;repeat 4 times              (DISP_WELCOME_STREAM)
00F233 03F233 9E 9E                                   DB  $9E $9E                                                      (DISP_WELCOME_STREAM)
00F235 03F235 E3 04 9F                                DB  DISP_ESC_START $04 $9F          ;repeat 4 times              (DISP_WELCOME_STREAM)
00F238 03F238 06 06 87 87 66 66 9E 9E                 DB  $06 $06 $87 $87 $66 $66 $9E $9E                              (DISP_WELCOME_STREAM)
00F240 03F240 1F 1F 86 86 79 79 81 81                 DB  $1F $1F $86 $86 $79 $79 $81 $81                              (DISP_WELCOME_STREAM)
00F248 03F248 07 07 87 87 7F 7F 81 81                 DB  $07 $07 $87 $87 $7F $7F $81 $81                              (DISP_WELCOME_STREAM)
00F250 03F250 1F 1F E6 E6 00 00 99 99                 DB  $1F $1F $E6 $E6 $00 $00 $99 $99                              (DISP_WELCOME_STREAM)
00F258 03F258 9F 9F 99 99 9F 9F 9E 9E                 DB  $9F $9F $99 $99 $9F $9F $9E $9E                              (DISP_WELCOME_STREAM)
00F260 03F260 80 80 9F 9F                             DB  $80 $80 $9F $9F                                              (DISP_WELCOME_STREAM)
00F264 03F264 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 6:                                                                        (DISP_WELCOME_STREAM)
00F266 03F266 B6 10 04                                DB  $B6 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F269 03F269 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F26B 03F26B E3 2E 00                                DB  DISP_ESC_START $2E $00          ;repeat 46 times             (DISP_WELCOME_STREAM)
00F26E 03F26E 01 01 01                                DB  $01 $01 $01                                                  (DISP_WELCOME_STREAM)
00F271 03F271 E3 0C 00                                DB  DISP_ESC_START $0C $00          ;repeat 12 times             (DISP_WELCOME_STREAM)
00F274 03F274 01 01                                   DB  $01 $01                                                      (DISP_WELCOME_STREAM)
00F276 03F276 E3 07 00                                DB  DISP_ESC_START $07 $00          ;repeat 7 times              (DISP_WELCOME_STREAM)
00F279 03F279 FF FF 01 01                             DB  $FF $FF $01 $01                                              (DISP_WELCOME_STREAM)
00F27D 03F27D E3 06 F9                                DB  DISP_ESC_START $06 $F9          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F280 03F280 01 01 FF FF 00 00 81 81                 DB  $01 $01 $FF $FF $00 $00 $81 $81                              (DISP_WELCOME_STREAM)
00F288 03F288 F8 F8 19 19 7E 7E FF FF                 DB  $F8 $F8 $19 $19 $7E $7E $FF $FF                              (DISP_WELCOME_STREAM)
00F290 03F290 E6 E6 F9 F9 66 66 01 01                 DB  $E6 $E6 $F9 $F9 $66 $66 $01 $01                              (DISP_WELCOME_STREAM)
00F298 03F298 66 66 01 01 18 18 FF FF                 DB  $66 $66 $01 $01 $18 $18 $FF $FF                              (DISP_WELCOME_STREAM)
00F2A0 03F2A0 00 00 FF FF 01 01                       DB  $00 $00 $FF $FF $01 $01                                      (DISP_WELCOME_STREAM)
00F2A6 03F2A6 E3 06 F9                                DB  DISP_ESC_START $06 $F9          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F2A9 03F2A9 01 01 FF FF                             DB  $01 $01 $FF $FF                                              (DISP_WELCOME_STREAM)
00F2AD 03F2AD E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
                                      ;#Page 7:                                                                        (DISP_WELCOME_STREAM)
00F2AF 03F2AF B7 10 04                                DB  $B7 $10 $04                     ;set page and column address (DISP_WELCOME_STREAM)
00F2B2 03F2B2 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_WELCOME_STREAM)
00F2B4 03F2B4 E3 46 00                                DB  DISP_ESC_START $46 $00          ;repeat 70 times             (DISP_WELCOME_STREAM)
00F2B7 03F2B7 1F 1F 18 18                             DB  $1F $1F $18 $18                                              (DISP_WELCOME_STREAM)
00F2BB 03F2BB E3 06 19                                DB  DISP_ESC_START $06 $19          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F2BE 03F2BE 18 18 1F 1F 00 00                       DB  $18 $18 $1F $1F $00 $00                                      (DISP_WELCOME_STREAM)
00F2C4 03F2C4 E3 04 19                                DB  DISP_ESC_START $04 $19          ;repeat 4 times              (DISP_WELCOME_STREAM)
00F2C7 03F2C7 1E 1E 18 18 19 19                       DB  $1E $1E $18 $18 $19 $19                                      (DISP_WELCOME_STREAM)
00F2CD 03F2CD E3 04 07                                DB  DISP_ESC_START $04 $07          ;repeat 4 times              (DISP_WELCOME_STREAM)
00F2D0 03F2D0 1E 1E 06 06                             DB  $1E $1E $06 $06                                              (DISP_WELCOME_STREAM)
00F2D4 03F2D4 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F2D7 03F2D7 01 01 00 00 1F 1F 18 18                 DB  $01 $01 $00 $00 $1F $1F $18 $18                              (DISP_WELCOME_STREAM)
00F2DF 03F2DF E3 06 19                                DB  DISP_ESC_START $06 $19          ;repeat 6 times              (DISP_WELCOME_STREAM)
00F2E2 03F2E2 18 18 1F 1F                             DB  $18 $18 $1F $1F                                              (DISP_WELCOME_STREAM)
00F2E6 03F2E6 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_WELCOME_STREAM)
00F2E8 03F2E8 -> $0317                BASE_DISP_WELCOME_SIZE  EQU     *-BASE_DISP_WELCOME_SCR
                                      ;Error Screen
00F2E8 03F2E8 MACRO                   BASE_DISP_ERROR_SCR     DISP_ERROR_STREAM                       ;display splash screen
                                      ;Size = 1024 bytes                                                               (DISP_ERROR_STREAM)
                                      ;#Frame 0:                                                                       (DISP_ERROR_STREAM)
                                      ;#----------------------------------------------------------------------         (DISP_ERROR_STREAM)
                                      ;#Page 0:                                                                        (DISP_ERROR_STREAM)
00F2E8 03F2E8 B0 10 04                                DB  $B0 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F2EB 03F2EB E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F2ED 03F2ED E3 70 FF                                DB  DISP_ESC_START $70 $FF          ;repeat 113 times            (DISP_ERROR_STREAM)
00F2F0 03F2F0 7F 1F 1F 0F 0F                          DB  $7F $1F $1F $0F $0F                                          (DISP_ERROR_STREAM)
00F2F5 03F2F5 E3 05 07                                DB  DISP_ESC_START $05 $07          ;repeat 6 times              (DISP_ERROR_STREAM)
00F2F8 03F2F8 0F 1F 3F FF                             DB  $0F $1F $3F $FF                                              (DISP_ERROR_STREAM)
00F2FC 03F2FC E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 1:                                                                        (DISP_ERROR_STREAM)
00F2FE 03F2FE B1 10 04                                DB  $B1 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F301 03F301 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F303 03F303 E3 70 FF                                DB  DISP_ESC_START $70 $FF          ;repeat 113 times            (DISP_ERROR_STREAM)
00F306 03F306 F0 E0 C0 C0                             DB  $F0 $E0 $C0 $C0                                              (DISP_ERROR_STREAM)
00F30A 03F30A E3 04 80                                DB  DISP_ESC_START $04 $80          ;repeat 5 times              (DISP_ERROR_STREAM)
00F30D 03F30D C0 C0 E0 F0 F8 FF                       DB  $C0 $C0 $E0 $F0 $F8 $FF                                      (DISP_ERROR_STREAM)
00F313 03F313 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 2:                                                                        (DISP_ERROR_STREAM)
00F315 03F315 B2 10 04                                DB  $B2 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F318 03F318 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F31A 03F31A E3 74 FF                                DB  DISP_ESC_START $74 $FF          ;repeat 117 times            (DISP_ERROR_STREAM)
00F31D 03F31D 3F 0F 0F 07 07 07 7F FF                 DB  $3F $0F $0F $07 $07 $07 $7F $FF                              (DISP_ERROR_STREAM)
00F325 03F325 FF FF FF                                DB  $FF $FF $FF                                                  (DISP_ERROR_STREAM)
00F328 03F328 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 3:                                                                        (DISP_ERROR_STREAM)
00F32A 03F32A B3 10 04                                DB  $B3 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F32D 03F32D E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F32F 03F32F E3 74 FF                                DB  DISP_ESC_START $74 $FF          ;repeat 117 times            (DISP_ERROR_STREAM)
00F332 03F332 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 7 times              (DISP_ERROR_STREAM)
00F335 03F335 FF FF FF FF                             DB  $FF $FF $FF $FF                                              (DISP_ERROR_STREAM)
00F339 03F339 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 4:                                                                        (DISP_ERROR_STREAM)
00F33B 03F33B B4 10 04                                DB  $B4 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F33E 03F33E E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F340 03F340 E3 73 FF                                DB  DISP_ESC_START $73 $FF          ;repeat 116 times            (DISP_ERROR_STREAM)
00F343 03F343 01                                      DB  $01                                                          (DISP_ERROR_STREAM)
00F344 03F344 E3 06 00                                DB  DISP_ESC_START $06 $00          ;repeat 7 times              (DISP_ERROR_STREAM)
00F347 03F347 03 FF FF FF                             DB  $03 $FF $FF $FF                                              (DISP_ERROR_STREAM)
00F34B 03F34B E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 5:                                                                        (DISP_ERROR_STREAM)
00F34D 03F34D B5 10 04                                DB  $B5 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F350 03F350 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F352 03F352 E3 11 FF                                DB  DISP_ESC_START $11 $FF          ;repeat 18 times             (DISP_ERROR_STREAM)
00F355 03F355 3F 3F 3F FF FF FF 7F                    DB  $3F $3F $3F $FF $FF $FF $7F                                  (DISP_ERROR_STREAM)
00F35C 03F35C E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00F35F 03F35F 7F                                      DB  $7F                                                          (DISP_ERROR_STREAM)
00F360 03F360 E3 05 FF                                DB  DISP_ESC_START $05 $FF          ;repeat 6 times              (DISP_ERROR_STREAM)
00F363 03F363 3F 3F 3F                                DB  $3F $3F $3F                                                  (DISP_ERROR_STREAM)
00F366 03F366 E3 03 FF                                DB  DISP_ESC_START $03 $FF          ;repeat 4 times              (DISP_ERROR_STREAM)
00F369 03F369 3F 3F 3F FF                             DB  $3F $3F $3F $FF                                              (DISP_ERROR_STREAM)
00F36D 03F36D E3 08 3F                                DB  DISP_ESC_START $08 $3F          ;repeat 9 times              (DISP_ERROR_STREAM)
00F370 03F370 E3 07 FF                                DB  DISP_ESC_START $07 $FF          ;repeat 8 times              (DISP_ERROR_STREAM)
00F373 03F373 3F 3F 3F FF FF 3F 3F 3F                 DB  $3F $3F $3F $FF $FF $3F $3F $3F                              (DISP_ERROR_STREAM)
00F37B 03F37B 7F                                      DB  $7F                                                          (DISP_ERROR_STREAM)
00F37C 03F37C E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00F37F 03F37F 7F FF                                   DB  $7F $FF                                                      (DISP_ERROR_STREAM)
00F381 03F381 E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00F384 03F384 7F FF FF FF 3F 3F 3F 7F                 DB  $7F $FF $FF $FF $3F $3F $3F $7F                              (DISP_ERROR_STREAM)
00F38C 03F38C E3 03 3F                                DB  DISP_ESC_START $03 $3F          ;repeat 4 times              (DISP_ERROR_STREAM)
00F38F 03F38F 7F                                      DB  $7F                                                          (DISP_ERROR_STREAM)
00F390 03F390 E3 06 FF                                DB  DISP_ESC_START $06 $FF          ;repeat 7 times              (DISP_ERROR_STREAM)
00F393 03F393 3F 3F 3F                                DB  $3F $3F $3F                                                  (DISP_ERROR_STREAM)
00F396 03F396 E3 08 FF                                DB  DISP_ESC_START $08 $FF          ;repeat 9 times              (DISP_ERROR_STREAM)
00F399 03F399 1F                                      DB  $1F                                                          (DISP_ERROR_STREAM)
00F39A 03F39A E3 08 00                                DB  DISP_ESC_START $08 $00          ;repeat 9 times              (DISP_ERROR_STREAM)
00F39D 03F39D 1F FF FF                                DB  $1F $FF $FF                                                  (DISP_ERROR_STREAM)
00F3A0 03F3A0 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 6:                                                                        (DISP_ERROR_STREAM)
00F3A2 03F3A2 B6 10 04                                DB  $B6 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F3A5 03F3A5 E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F3A7 03F3A7 E3 0D FF                                DB  DISP_ESC_START $0D $FF          ;repeat 14 times             (DISP_ERROR_STREAM)
00F3AA 03F3AA 1F 1F 8F 01 00 00 FC FF                 DB  $1F $1F $8F $01 $00 $00 $FC $FF                              (DISP_ERROR_STREAM)
00F3B2 03F3B2 C1 80 00 3E 3F 1F 80 80                 DB  $C1 $80 $00 $3E $3F $1F $80 $80                              (DISP_ERROR_STREAM)
00F3BA 03F3BA E0 FF 1F 1F 8F 01 00 00                 DB  $E0 $FF $1F $1F $8F $01 $00 $00                              (DISP_ERROR_STREAM)
00F3C2 03F3C2 FC 1F 1F 8F 01 00 00 FC                 DB  $FC $1F $1F $8F $01 $00 $00 $FC                              (DISP_ERROR_STREAM)
00F3CA 03F3CA FF                                      DB  $FF                                                          (DISP_ERROR_STREAM)
00F3CB 03F3CB E3 03 C6                                DB  DISP_ESC_START $03 $C6          ;repeat 4 times              (DISP_ERROR_STREAM)
00F3CE 03F3CE 46 00 00 80 FE                          DB  $46 $00 $00 $80 $FE                                          (DISP_ERROR_STREAM)
00F3D3 03F3D3 E3 05 FF                                DB  DISP_ESC_START $05 $FF          ;repeat 6 times              (DISP_ERROR_STREAM)
00F3D6 03F3D6 7F 01 00 80 FE FF 83 80                 DB  $7F $01 $00 $80 $FE $FF $83 $80                              (DISP_ERROR_STREAM)
00F3DE 03F3DE 00 30 33 33 11 98 D8 3C                 DB  $00 $30 $33 $33 $11 $98 $D8 $3C                              (DISP_ERROR_STREAM)
00F3E6 03F3E6 3F 3F 07 00 00 30 3F FF                 DB  $3F $3F $07 $00 $00 $30 $3F $FF                              (DISP_ERROR_STREAM)
00F3EE 03F3EE 83 80 00 30 33 33 11 98                 DB  $83 $80 $00 $30 $33 $33 $11 $98                              (DISP_ERROR_STREAM)
00F3F6 03F3F6 D8 FC FF                                DB  $D8 $FC $FF                                                  (DISP_ERROR_STREAM)
00F3F9 03F3F9 E3 03 C7                                DB  DISP_ESC_START $03 $C7          ;repeat 4 times              (DISP_ERROR_STREAM)
00F3FC 03F3FC 47 01 00 80 FE                          DB  $47 $01 $00 $80 $FE                                          (DISP_ERROR_STREAM)
00F401 03F401 E3 08 FF                                DB  DISP_ESC_START $08 $FF          ;repeat 9 times              (DISP_ERROR_STREAM)
00F404 03F404 E3 0A 00                                DB  DISP_ESC_START $0A $00          ;repeat 11 times             (DISP_ERROR_STREAM)
00F407 03F407 FF FF                                   DB  $FF $FF                                                      (DISP_ERROR_STREAM)
00F409 03F409 E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
                                      ;#Page 7:                                                                        (DISP_ERROR_STREAM)
00F40B 03F40B B7 10 04                                DB  $B7 $10 $04                     ;set page and column address (DISP_ERROR_STREAM)
00F40E 03F40E E3 FD                                   DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input        (DISP_ERROR_STREAM)
00F410 03F410 E3 2C FF                                DB  DISP_ESC_START $2C $FF          ;repeat 45 times             (DISP_ERROR_STREAM)
00F413 03F413 E3 08 F8                                DB  DISP_ESC_START $08 $F8          ;repeat 9 times              (DISP_ERROR_STREAM)
00F416 03F416 E3 07 FF                                DB  DISP_ESC_START $07 $FF          ;repeat 8 times              (DISP_ERROR_STREAM)
00F419 03F419 F8 F8 F8                                DB  $F8 $F8 $F8                                                  (DISP_ERROR_STREAM)
00F41C 03F41C E3 0D FF                                DB  DISP_ESC_START $0D $FF          ;repeat 14 times             (DISP_ERROR_STREAM)
00F41F 03F41F F8 F8 F8 FE                             DB  $F8 $F8 $F8 $FE                                              (DISP_ERROR_STREAM)
00F423 03F423 E3 0B FF                                DB  DISP_ESC_START $0B $FF          ;repeat 12 times             (DISP_ERROR_STREAM)
00F426 03F426 E3 08 F8                                DB  DISP_ESC_START $08 $F8          ;repeat 9 times              (DISP_ERROR_STREAM)
00F429 03F429 E3 09 FF                                DB  DISP_ESC_START $09 $FF          ;repeat 10 times             (DISP_ERROR_STREAM)
00F42C 03F42C E0 C0 C0 C0 E0 E0 F0 F0                 DB  $E0 $C0 $C0 $C0 $E0 $E0 $F0 $F0                              (DISP_ERROR_STREAM)
00F434 03F434 F8 F8 FC FC FE FF                       DB  $F8 $F8 $FC $FC $FE $FF                                      (DISP_ERROR_STREAM)
00F43A 03F43A E3 FE                                   DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input     (DISP_ERROR_STREAM)
00F43C 03F43C -> $0154                BASE_DISP_ERROR_SIZE    EQU     *-BASE_DISP_ERROR_SCR
                                      ;#SCI messages
                                      ;-------------
                                      ;Welcome message
00F43C 03F43C 48 65 6C 6C 6F 2C 20 49 BASE_SCI_WELCOME_MSG    FCC     "Hello, I'm  AriCalculator!"
              27 6D 20 20 41 72 69 43 
              61 6C 63 75 6C 61 74 6F 
              72 21                   
00F456 03F456 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00F456 03F456 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00F457 03F457 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
                                      ;Error message format
00F458 03F458 46 41 54 41 4C 20 45 52 BASE_SCI_ERROR_HEADER   FCS     "FATAL ERROR! "
              52 4F 52 21 A0          
00F465 03F465 21                      BASE_SCI_ERROR_TRAILER  FCC     "!"
00F466 03F466 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00F466 03F466 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00F467 03F467 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
00F468 03F468 -> $F468                MMAP_TABS_START         EQU     *
00F468 03F468 -> $3F468               MMAP_TABS_START_LIN     EQU     @
00F468 03F468                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
00F468 03F468 -> $F468                VECTAB_TABS_START       EQU     *
00F468 03F468 -> $3F468               VECTAB_TABS_START_LIN   EQU     @
00F49C 03F49C                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
00F49C 03F49C -> $F49C                GPIO_TABS_START         EQU     *
00F49C 03F49C -> $3F49C               GPIO_TABS_START_LIN     EQU     @
00F49C 03F49C                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
00F49C 03F49C -> $F49C                SSTACK_TABS_START       EQU     *
00F49C 03F49C -> $3F49C               SSTACK_TABS_START_LIN   EQU     @
00F4D3 03F4D3                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
00F4D3 03F4D3 -> $F4D3                ISTACK_TABS_START       EQU     *
00F4D3 03F4D3 -> $3F4D3               ISTACK_TABS_START_LIN   EQU     @
00F504 03F504                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
00F504 03F504 -> $F504                CLOCK_TABS_START        EQU     *
00F504 03F504 -> $3F504               CLOCK_TABS_START_LIN    EQU     @
00F504 03F504                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
00F504 03F504 -> $F504                COP_TABS_START          EQU     *
00F504 03F504 -> $3F504               COP_TABS_START_LIN      EQU     @
00F504 03F504                                                 ORG     COP_TABS_END, COP_TABS_END_LIN
00F504 03F504 -> $F504                TIM_TABS_START          EQU     *
00F504 03F504 -> $3F504               TIM_TABS_START_LIN      EQU     @
00F504 03F504                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
00F504 03F504 -> $F504                SCI_TABS_START          EQU     *
00F504 03F504 -> $3F504               SCI_TABS_START_LIN      EQU     @
00F944 03F944                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
00F944 03F944 -> $F944                STRING_TABS_START       EQU     *
00F944 03F944 -> $3F944               STRING_TABS_START_LIN   EQU     @
00F947 03F947                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
00F947 03F947 -> $F947                NUM_TABS_START          EQU     *
00F947 03F947 -> $3F947               NUM_TABS_START_LIN      EQU     @
00F958 03F958                                                 ORG     NUM_TABS_END, NUM_TABS_END_LIN
00F958 03F958 -> $F958                RESET_TABS_START        EQU     *
00F958 03F958 -> $3F958               RESET_TABS_START_LIN    EQU     @
00F9A5 03F9A5                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
00F9A5 03F9A5 -> $F9A5                LED_TABS_START          EQU     *
00F9A5 03F9A5 -> $3F9A5               LED_TABS_START_LIN      EQU     @
00F9A5 03F9A5                                                 ORG     LED_TABS_END, LED_TABS_END_LIN
00F9A5 03F9A5 -> $F9A5                VMON_TABS_START         EQU     *
00F9A5 03F9A5 -> $3F9A5               VMON_TABS_START_LIN     EQU     @
00F9A5 03F9A5                                                 ORG     VMON_TABS_END, VMON_TABS_END_LIN
00F9A5 03F9A5 -> $F9A5                NVM_TABS_START          EQU     *
00F9A5 03F9A5 -> $3F9A5               NVM_TABS_START_LIN      EQU     @
00F9AE 03F9AE                                                 ORG     NVM_TABS_END, NVM_TABS_END_LIN
00F9AE 03F9AE -> $F9AE                DISP_TABS_START         EQU     *
00F9AE 03F9AE -> $3F9AE               DISP_TABS_START_LIN     EQU     @
00F9BF 03F9BF                                                 ORG     DISP_TABS_END, DISP_TABS_END_LIN
00F9BF 03F9BF -> $F9BF                KEYS_TABS_START         EQU     *
00F9BF 03F9BF -> $3F9BF               KEYS_TABS_START_LIN     EQU     @
00F9BF 03F9BF                                                 ORG     KEYS_TABS_END, KEYS_TABS_END_LIN
00F9BF 03F9BF -> $F9BF                BASE_TABS_END           EQU     *
00F9BF 03F9BF -> $3F9BF               BASE_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (AriCalculator)                    #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12G-family.                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;#############################
                                      ;# S12G Register Definitions #
                                      ;#############################
00F9BF 03F9BF -> $0000                PORTA           EQU     $0000
00F9BF 03F9BF -> $0080                PTA7            EQU     $80
00F9BF 03F9BF -> $0040                PTA6            EQU     $40
00F9BF 03F9BF -> $0020                PTA5            EQU     $20
00F9BF 03F9BF -> $0010                PTA4            EQU     $10
00F9BF 03F9BF -> $0008                PTA3            EQU     $08
00F9BF 03F9BF -> $0004                PTA2            EQU     $04
00F9BF 03F9BF -> $0002                PTA1            EQU     $02
00F9BF 03F9BF -> $0001                PTA0            EQU     $01
00F9BF 03F9BF -> $0080                PA7             EQU     $80
00F9BF 03F9BF -> $0040                PA6             EQU     $40
00F9BF 03F9BF -> $0020                PA5             EQU     $20
00F9BF 03F9BF -> $0010                PA4             EQU     $10
00F9BF 03F9BF -> $0008                PA3             EQU     $08
00F9BF 03F9BF -> $0004                PA2             EQU     $04
00F9BF 03F9BF -> $0002                PA1             EQU     $02
00F9BF 03F9BF -> $0001                PA0             EQU     $01
00F9BF 03F9BF -> $0001                PORTB           EQU     $0001
00F9BF 03F9BF -> $0080                PTB7            EQU     $80
00F9BF 03F9BF -> $0040                PTB6            EQU     $40
00F9BF 03F9BF -> $0020                PTB5            EQU     $20
00F9BF 03F9BF -> $0010                PTB4            EQU     $10
00F9BF 03F9BF -> $0008                PTB3            EQU     $08
00F9BF 03F9BF -> $0004                PTB2            EQU     $04
00F9BF 03F9BF -> $0002                PTB1            EQU     $02
00F9BF 03F9BF -> $0001                PTB0            EQU     $01
00F9BF 03F9BF -> $0080                PB7             EQU     $80
00F9BF 03F9BF -> $0040                PB6             EQU     $40
00F9BF 03F9BF -> $0020                PB5             EQU     $20
00F9BF 03F9BF -> $0010                PB4             EQU     $10
00F9BF 03F9BF -> $0008                PB3             EQU     $08
00F9BF 03F9BF -> $0004                PB2             EQU     $04
00F9BF 03F9BF -> $0002                PB1             EQU     $02
00F9BF 03F9BF -> $0001                PB0             EQU     $01
00F9BF 03F9BF -> $0002                DDRA            EQU     $0002
00F9BF 03F9BF -> $0080                DDRA7           EQU     $80
00F9BF 03F9BF -> $0040                DDRA6           EQU     $40
00F9BF 03F9BF -> $0020                DDRA5           EQU     $20
00F9BF 03F9BF -> $0010                DDRA4           EQU     $10
00F9BF 03F9BF -> $0008                DDRA3           EQU     $08
00F9BF 03F9BF -> $0004                DDRA2           EQU     $04
00F9BF 03F9BF -> $0002                DDRA1           EQU     $02
00F9BF 03F9BF -> $0001                DDRA0           EQU     $01
00F9BF 03F9BF -> $0003                DDRB            EQU     $0003
00F9BF 03F9BF -> $0080                DDRB7           EQU     $80
00F9BF 03F9BF -> $0040                DDRB6           EQU     $40
00F9BF 03F9BF -> $0020                DDRB5           EQU     $20
00F9BF 03F9BF -> $0010                DDRB4           EQU     $10
00F9BF 03F9BF -> $0008                DDRB3           EQU     $08
00F9BF 03F9BF -> $0004                DDRB2           EQU     $04
00F9BF 03F9BF -> $0002                DDRB1           EQU     $02
00F9BF 03F9BF -> $0001                DDRB0           EQU     $01
00F9BF 03F9BF -> $0004                PORTC           EQU     $0004
00F9BF 03F9BF -> $0080                PTC7            EQU     $80
00F9BF 03F9BF -> $0040                PTC6            EQU     $40
00F9BF 03F9BF -> $0020                PTC5            EQU     $20
00F9BF 03F9BF -> $0010                PTC4            EQU     $10
00F9BF 03F9BF -> $0008                PTC3            EQU     $08
00F9BF 03F9BF -> $0004                PTC2            EQU     $04
00F9BF 03F9BF -> $0002                PTC1            EQU     $02
00F9BF 03F9BF -> $0001                PTC0            EQU     $01
00F9BF 03F9BF -> $0080                PC7             EQU     $80
00F9BF 03F9BF -> $0040                PC6             EQU     $40
00F9BF 03F9BF -> $0020                PC5             EQU     $20
00F9BF 03F9BF -> $0010                PC4             EQU     $10
00F9BF 03F9BF -> $0008                PC3             EQU     $08
00F9BF 03F9BF -> $0004                PC2             EQU     $04
00F9BF 03F9BF -> $0002                PC1             EQU     $02
00F9BF 03F9BF -> $0001                PC0             EQU     $01
00F9BF 03F9BF -> $0005                PORTD           EQU     $0005
00F9BF 03F9BF -> $0080                PTD7            EQU     $80
00F9BF 03F9BF -> $0040                PTD6            EQU     $40
00F9BF 03F9BF -> $0020                PTD5            EQU     $20
00F9BF 03F9BF -> $0010                PTD4            EQU     $10
00F9BF 03F9BF -> $0008                PTD3            EQU     $08
00F9BF 03F9BF -> $0004                PTD2            EQU     $04
00F9BF 03F9BF -> $0002                PTD1            EQU     $02
00F9BF 03F9BF -> $0001                PTD0            EQU     $01
00F9BF 03F9BF -> $0080                PD7             EQU     $80
00F9BF 03F9BF -> $0040                PD6             EQU     $40
00F9BF 03F9BF -> $0020                PD5             EQU     $20
00F9BF 03F9BF -> $0010                PD4             EQU     $10
00F9BF 03F9BF -> $0008                PD3             EQU     $08
00F9BF 03F9BF -> $0004                PD2             EQU     $04
00F9BF 03F9BF -> $0002                PD1             EQU     $02
00F9BF 03F9BF -> $0001                PD0             EQU     $01
00F9BF 03F9BF -> $0006                DDRC            EQU     $0006
00F9BF 03F9BF -> $0080                DDRC7           EQU     $80
00F9BF 03F9BF -> $0040                DDRC6           EQU     $40
00F9BF 03F9BF -> $0020                DDRC5           EQU     $20
00F9BF 03F9BF -> $0010                DDRC4           EQU     $10
00F9BF 03F9BF -> $0008                DDRC3           EQU     $08
00F9BF 03F9BF -> $0004                DDRC2           EQU     $04
00F9BF 03F9BF -> $0007                DDRD            EQU     $0007
00F9BF 03F9BF -> $0080                DDRD7           EQU     $80
00F9BF 03F9BF -> $0040                DDRD6           EQU     $40
00F9BF 03F9BF -> $0020                DDRD5           EQU     $20
00F9BF 03F9BF -> $0010                DDRD4           EQU     $10
00F9BF 03F9BF -> $0008                DDRD3           EQU     $08
00F9BF 03F9BF -> $0004                DDRD2           EQU     $04
00F9BF 03F9BF -> $0008                PORTE           EQU     $0008
00F9BF 03F9BF -> $0002                PTE1            EQU     $02
00F9BF 03F9BF -> $0001                PTE0            EQU     $01
00F9BF 03F9BF -> $0002                PE1             EQU     $02
00F9BF 03F9BF -> $0001                PE0             EQU     $01
00F9BF 03F9BF -> $0009                DDRE            EQU     $0009
00F9BF 03F9BF -> $0002                DDRE1           EQU     $02
00F9BF 03F9BF -> $0001                DDRE0           EQU     $01
                                      ;$000A reserved
00F9BF 03F9BF -> $000B                MODE            EQU     $000B
00F9BF 03F9BF -> $0080                MODC            EQU     $80
00F9BF 03F9BF -> $000C                PUCR            EQU     $000C
00F9BF 03F9BF -> $0040                BKPUE           EQU     $40
00F9BF 03F9BF -> $0010                PUPEE           EQU     $10
00F9BF 03F9BF -> $0008                PUPDE           EQU     $08
00F9BF 03F9BF -> $0004                PUPCE           EQU     $04
00F9BF 03F9BF -> $0002                PUPBE           EQU     $02
00F9BF 03F9BF -> $0001                PUPAE           EQU     $01
                                      ;$000D to $0010 reserved
00F9BF 03F9BF -> $0011                DIRECT          EQU     $0011
00F9BF 03F9BF -> $0080                DP15            EQU     $80
00F9BF 03F9BF -> $0040                DP14            EQU     $40
00F9BF 03F9BF -> $0020                DP13            EQU     $20
00F9BF 03F9BF -> $0010                DP12            EQU     $10
00F9BF 03F9BF -> $0008                DP11            EQU     $08
00F9BF 03F9BF -> $0004                DP10            EQU     $04
00F9BF 03F9BF -> $0002                DP9             EQU     $02
00F9BF 03F9BF -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
00F9BF 03F9BF -> $0013                MMCCTL          EQU     $0013
00F9BF 03F9BF -> $0001                NVMRES           EQU     $01
                                      ;$0014 reserved
00F9BF 03F9BF -> $0015                PPAGE           EQU     $0015
00F9BF 03F9BF -> $0008                PIX3            EQU     $08
00F9BF 03F9BF -> $0004                PIX2            EQU     $04
00F9BF 03F9BF -> $0002                PIX1            EQU     $02
00F9BF 03F9BF -> $0001                PIX0            EQU     $01
                                      ;$0006 to $0019 reserved
00F9BF 03F9BF -> $001A                PARTIDH         EQU     $001A
00F9BF 03F9BF -> $0080                ID15            EQU     $80
00F9BF 03F9BF -> $0040                ID14            EQU     $40
00F9BF 03F9BF -> $0020                ID13            EQU     $20
00F9BF 03F9BF -> $0010                ID12            EQU     $10
00F9BF 03F9BF -> $0008                ID11            EQU     $08
00F9BF 03F9BF -> $0004                ID10            EQU     $04
00F9BF 03F9BF -> $0002                ID9             EQU     $02
00F9BF 03F9BF -> $0001                ID8             EQU     $01
00F9BF 03F9BF -> $001B                PARTIDL         EQU     $001B
00F9BF 03F9BF -> $0080                ID7             EQU     $80
00F9BF 03F9BF -> $0040                ID6             EQU     $40
00F9BF 03F9BF -> $0020                ID5             EQU     $20
00F9BF 03F9BF -> $0010                ID4             EQU     $10
00F9BF 03F9BF -> $0008                ID3             EQU     $08
00F9BF 03F9BF -> $0004                ID2             EQU     $04
00F9BF 03F9BF -> $0002                ID1             EQU     $02
00F9BF 03F9BF -> $0001                ID0             EQU     $01
00F9BF 03F9BF -> $001C                ECLKCTL         EQU     $001C
00F9BF 03F9BF -> $0080                NECLK           EQU     $80
00F9BF 03F9BF -> $0040                NCLKX2          EQU     $40
00F9BF 03F9BF -> $0020                DIV16           EQU     $20
00F9BF 03F9BF -> $0010                EDIV4           EQU     $10
00F9BF 03F9BF -> $0008                EDIV3           EQU     $08
00F9BF 03F9BF -> $0004                EDIV2           EQU     $04
00F9BF 03F9BF -> $0002                EDIV1           EQU     $02
00F9BF 03F9BF -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
00F9BF 03F9BF -> $001E                IRQCR           EQU     $001E
00F9BF 03F9BF -> $0080                IRQE            EQU     $80
00F9BF 03F9BF -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
00F9BF 03F9BF -> $0020                DBGC1           EQU     $0020
00F9BF 03F9BF -> $0080                ARM             EQU     $80
00F9BF 03F9BF -> $0040                TRIG            EQU     $40
00F9BF 03F9BF -> $0010                BDM             EQU     $10
00F9BF 03F9BF -> $0004                DBGBRK          EQU     $04
00F9BF 03F9BF -> $0003                COMRV           EQU     $03
00F9BF 03F9BF -> $0021                DBGSR           EQU     $0021
00F9BF 03F9BF -> $0080                TBF             EQU     $80
00F9BF 03F9BF -> $0004                SSF2            EQU     $04
00F9BF 03F9BF -> $0002                SSF1            EQU     $02
00F9BF 03F9BF -> $0001                SSF0            EQU     $01
00F9BF 03F9BF -> $0022                DBGTCR          EQU     $0022
00F9BF 03F9BF -> $0040                TSOURCE         EQU     $40
00F9BF 03F9BF -> $000C                TRCMOD          EQU     $0C
00F9BF 03F9BF -> $0001                TALIGN          EQU     $01
00F9BF 03F9BF -> $0023                DBGC2           EQU     $0023
00F9BF 03F9BF -> $0003                ABCM            EQU     $03
00F9BF 03F9BF -> $0024                DBGTBH          EQU     $0024
00F9BF 03F9BF -> $0080                DBGTB15         EQU     $80
00F9BF 03F9BF -> $0040                DBGTB14         EQU     $40
00F9BF 03F9BF -> $0020                DBGTB13         EQU     $20
00F9BF 03F9BF -> $0010                DBGTB12         EQU     $10
00F9BF 03F9BF -> $0008                DBGTB11         EQU     $08
00F9BF 03F9BF -> $0004                DBGTB10         EQU     $04
00F9BF 03F9BF -> $0002                DBGTB9          EQU     $02
00F9BF 03F9BF -> $0001                DBGTB8          EQU     $01
00F9BF 03F9BF -> $0025                DBGTBL          EQU     $0025
00F9BF 03F9BF -> $0080                DBGTB7          EQU     $80
00F9BF 03F9BF -> $0040                DBGTB6          EQU     $40
00F9BF 03F9BF -> $0020                DBGTB5          EQU     $20
00F9BF 03F9BF -> $0010                DBGTB4          EQU     $10
00F9BF 03F9BF -> $0008                DBGTB3          EQU     $08
00F9BF 03F9BF -> $0004                DBGTB2          EQU     $04
00F9BF 03F9BF -> $0002                DBGTB1          EQU     $02
00F9BF 03F9BF -> $0001                DBGTB0          EQU     $01
00F9BF 03F9BF -> $0026                DBGCNT          EQU     $0026
00F9BF 03F9BF -> $0080                TBF             EQU     $80
00F9BF 03F9BF -> $007F                CNT             EQU     $7F
00F9BF 03F9BF -> $0027                DBGSCRX         EQU     $0027
00F9BF 03F9BF -> $0008                SC3             EQU     $08
00F9BF 03F9BF -> $0004                SC2             EQU     $04
00F9BF 03F9BF -> $0002                SC1             EQU     $02
00F9BF 03F9BF -> $0001                SC0             EQU     $01
00F9BF 03F9BF -> $0027                DBGMFR          EQU     $0027
00F9BF 03F9BF -> $0004                MC2             EQU     $04
00F9BF 03F9BF -> $0002                MC1             EQU     $02
00F9BF 03F9BF -> $0001                MC0             EQU     $01
00F9BF 03F9BF -> $0028                DBGXCTL         EQU     $0028
00F9BF 03F9BF -> $0080                SZE             EQU     $80
00F9BF 03F9BF -> $0040                SZ              EQU     $40
00F9BF 03F9BF -> $0020                TAG             EQU     $20
00F9BF 03F9BF -> $0010                BRK             EQU     $10
00F9BF 03F9BF -> $0008                RW              EQU     $08
00F9BF 03F9BF -> $0004                RWE             EQU     $04
00F9BF 03F9BF -> $0002                NDB             EQU     $02
00F9BF 03F9BF -> $0001                COMPE           EQU     $01
00F9BF 03F9BF -> $0029                DBGXAH          EQU    $0029
00F9BF 03F9BF -> $0002                DBGXA17         EQU    $02
00F9BF 03F9BF -> $0001                DBGXA16         EQU    $01
00F9BF 03F9BF -> $002A                DBGXAM          EQU     $002A
00F9BF 03F9BF -> $0080                DBGXA15         EQU     $80
00F9BF 03F9BF -> $0040                DBGXA14         EQU     $40
00F9BF 03F9BF -> $0020                DBGXA13         EQU     $20
00F9BF 03F9BF -> $0010                DBGXA12         EQU     $10
00F9BF 03F9BF -> $0008                DBGXA11         EQU     $08
00F9BF 03F9BF -> $0004                DBGXA10         EQU     $04
00F9BF 03F9BF -> $0002                DBGXA9          EQU     $02
00F9BF 03F9BF -> $0001                DBGXA8          EQU     $01
00F9BF 03F9BF -> $002B                DBGXAL          EQU     $002B
00F9BF 03F9BF -> $0080                DBGXA7          EQU     $80
00F9BF 03F9BF -> $0040                DBGXA6          EQU     $40
00F9BF 03F9BF -> $0020                DBGXA5          EQU     $20
00F9BF 03F9BF -> $0010                DBGXA4          EQU     $10
00F9BF 03F9BF -> $0008                DBGXA3          EQU     $08
00F9BF 03F9BF -> $0004                DBGXA2          EQU     $04
00F9BF 03F9BF -> $0002                DBGXA1          EQU     $02
00F9BF 03F9BF -> $0001                DBGXA0          EQU     $01
00F9BF 03F9BF -> $002C                DBGADH          EQU     $002C
00F9BF 03F9BF -> $0080                DBGAD15         EQU     $80
00F9BF 03F9BF -> $0040                DBGAD14         EQU     $40
00F9BF 03F9BF -> $0020                DBGAD13         EQU     $20
00F9BF 03F9BF -> $0010                DBGAD12         EQU     $10
00F9BF 03F9BF -> $0008                DBGAD11         EQU     $08
00F9BF 03F9BF -> $0004                DBGAD10         EQU     $04
00F9BF 03F9BF -> $0002                DBGAD9          EQU     $02
00F9BF 03F9BF -> $0001                DBGAD8          EQU     $01
00F9BF 03F9BF -> $002D                DBGADL          EQU     $002D
00F9BF 03F9BF -> $0080                DBGAD7          EQU     $80
00F9BF 03F9BF -> $0040                DBGAD6          EQU     $40
00F9BF 03F9BF -> $0020                DBGAD5          EQU     $20
00F9BF 03F9BF -> $0010                DBGAD4          EQU     $10
00F9BF 03F9BF -> $0008                DBGAD3          EQU     $08
00F9BF 03F9BF -> $0004                DBGAD2          EQU     $04
00F9BF 03F9BF -> $0002                DBGAD1          EQU     $02
00F9BF 03F9BF -> $0001                DBGAD0          EQU     $01
00F9BF 03F9BF -> $002E                DBGADHM         EQU     $002E
00F9BF 03F9BF -> $0080                DBGADM15        EQU     $80
00F9BF 03F9BF -> $0040                DBGADM14        EQU     $40
00F9BF 03F9BF -> $0020                DBGADM13        EQU     $20
00F9BF 03F9BF -> $0010                DBGADM12        EQU     $10
00F9BF 03F9BF -> $0008                DBGADM11        EQU     $08
00F9BF 03F9BF -> $0004                DBGADM10        EQU     $04
00F9BF 03F9BF -> $0002                DBGADM9         EQU     $02
00F9BF 03F9BF -> $0001                DBGADM8         EQU     $01
00F9BF 03F9BF -> $002F                DBGADLM         EQU     $002F
00F9BF 03F9BF -> $0080                DBGADM7         EQU     $80
00F9BF 03F9BF -> $0040                DBGADM6         EQU     $40
00F9BF 03F9BF -> $0020                DBGADM5         EQU     $20
00F9BF 03F9BF -> $0010                DBGADM4         EQU     $10
00F9BF 03F9BF -> $0008                DBGADM3         EQU     $08
00F9BF 03F9BF -> $0004                DBGADM2         EQU     $04
00F9BF 03F9BF -> $0002                DBGADM1         EQU     $02
00F9BF 03F9BF -> $0001                DBGADM0         EQU     $01
                                      ;$0030 to $0033 reserved
00F9BF 03F9BF -> $0034                CPMUSYNR        EQU     $0034
00F9BF 03F9BF -> $0034                SYNR            EQU     $0034
00F9BF 03F9BF -> $0080                VCOFRQ1         EQU     $80
00F9BF 03F9BF -> $0040                VCOFRQ0         EQU     $40
00F9BF 03F9BF -> $0020                SYNDIV5         EQU     $20
00F9BF 03F9BF -> $0010                SYNDIV4         EQU     $10
00F9BF 03F9BF -> $0008                SYNDIV3         EQU     $08
00F9BF 03F9BF -> $0004                SYNDIV2         EQU     $04
00F9BF 03F9BF -> $0002                SYNDIV1         EQU     $02
00F9BF 03F9BF -> $0001                SYNDIV0         EQU     $01
00F9BF 03F9BF -> $0035                CPMUREFDV       EQU     $0035
00F9BF 03F9BF -> $0035                REFDV           EQU     $0035
00F9BF 03F9BF -> $0080                REFFRQ1         EQU     $80
00F9BF 03F9BF -> $0040                REFFRQ0         EQU     $40
00F9BF 03F9BF -> $0008                REFDIV3         EQU     $08
00F9BF 03F9BF -> $0004                REFDIV2         EQU     $04
00F9BF 03F9BF -> $0002                REFDIV1         EQU     $02
00F9BF 03F9BF -> $0001                REFDIV0         EQU     $01
00F9BF 03F9BF -> $0036                CPMUPOSTDIV     EQU     $0036
00F9BF 03F9BF -> $0036                POSTDIV         EQU     $0036
00F9BF 03F9BF -> $0010                POSTDIV4        EQU     $10
00F9BF 03F9BF -> $0008                POSTDIV3        EQU     $08
00F9BF 03F9BF -> $0004                POSTDIV2        EQU     $04
00F9BF 03F9BF -> $0002                POSTDIV1        EQU     $02
00F9BF 03F9BF -> $0001                POSTDIV0        EQU     $01
00F9BF 03F9BF -> $0037                CPMUFLG         EQU     $0037
00F9BF 03F9BF -> $0080                RTIF            EQU     $80
00F9BF 03F9BF -> $0040                PORF            EQU     $40
00F9BF 03F9BF -> $0020                LVRF            EQU     $20
00F9BF 03F9BF -> $0010                LOCKIF          EQU     $10
00F9BF 03F9BF -> $0008                LOCK            EQU     $08
00F9BF 03F9BF -> $0004                ILAF            EQU     $04
00F9BF 03F9BF -> $0002                OSCIF           EQU     $02
00F9BF 03F9BF -> $0001                UPOSC           EQU     $01
00F9BF 03F9BF -> $0038                CPMUINT         EQU     $0038
00F9BF 03F9BF -> $0080                RTIE            EQU     $80
00F9BF 03F9BF -> $0010                LOCKIE          EQU     $10
00F9BF 03F9BF -> $0002                OSCIE           EQU     $02
00F9BF 03F9BF -> $0039                CPMUCLKS        EQU     $0039
00F9BF 03F9BF -> $0080                PLLSEL          EQU     $80
00F9BF 03F9BF -> $0040                PSTP            EQU     $40
00F9BF 03F9BF -> $0008                PRE             EQU     $08
00F9BF 03F9BF -> $0004                PCE             EQU     $04
00F9BF 03F9BF -> $0002                RTIOSCSEL       EQU     $02
00F9BF 03F9BF -> $0001                COPOSCSEL       EQU     $01
00F9BF 03F9BF -> $003A                CPMUPLL         EQU     $003A
00F9BF 03F9BF -> $0020                FM1             EQU     $20
00F9BF 03F9BF -> $0010                FM0             EQU     $10
00F9BF 03F9BF -> $003B                CPMURTI         EQU     $003B
00F9BF 03F9BF -> $0080                RTDEC           EQU     $80
00F9BF 03F9BF -> $0040                RTR6            EQU     $40
00F9BF 03F9BF -> $0020                RTR5            EQU     $20
00F9BF 03F9BF -> $0010                RTR4            EQU     $10
00F9BF 03F9BF -> $0008                RTR3            EQU     $08
00F9BF 03F9BF -> $0004                RTR2            EQU     $04
00F9BF 03F9BF -> $0002                RTR1            EQU     $02
00F9BF 03F9BF -> $0001                RTR0            EQU     $01
00F9BF 03F9BF -> $003C                CPMUCOP         EQU     $003C
00F9BF 03F9BF -> $0080                WCOP            EQU     $80
00F9BF 03F9BF -> $0040                RSBCK           EQU     $40
00F9BF 03F9BF -> $0020                WRTMASK         EQU     $20
00F9BF 03F9BF -> $0004                CR2             EQU     $04
00F9BF 03F9BF -> $0002                CR1             EQU     $02
00F9BF 03F9BF -> $0001                CR0             EQU     $01
                                      ;$003D to $003E reserved
00F9BF 03F9BF -> $003F                CPMUARMCOP      EQU     $003F
00F9BF 03F9BF -> $003F                ARMCOP          EQU     $003F
00F9BF 03F9BF -> $0040                TIOS            EQU     $0040
00F9BF 03F9BF -> $0080                IOS7            EQU     $80
00F9BF 03F9BF -> $0040                IOS6            EQU     $40
00F9BF 03F9BF -> $0020                IOS5            EQU     $20
00F9BF 03F9BF -> $0010                IOS4            EQU     $10
00F9BF 03F9BF -> $0008                IOS3            EQU     $08
00F9BF 03F9BF -> $0004                IOS2            EQU     $04
00F9BF 03F9BF -> $0002                IOS1            EQU     $02
00F9BF 03F9BF -> $0001                IOS0            EQU     $01
00F9BF 03F9BF -> $0041                TCFORC          EQU     $0041
00F9BF 03F9BF -> $0080                FOC7            EQU     $80
00F9BF 03F9BF -> $0040                FOC6            EQU     $40
00F9BF 03F9BF -> $0020                FOC5            EQU     $20
00F9BF 03F9BF -> $0010                FOC4            EQU     $10
00F9BF 03F9BF -> $0008                FOC3            EQU     $08
00F9BF 03F9BF -> $0004                FOC2            EQU     $04
00F9BF 03F9BF -> $0002                FOC1            EQU     $02
00F9BF 03F9BF -> $0001                FOC0            EQU     $01
00F9BF 03F9BF -> $0042                TOC7M           EQU     $0042
00F9BF 03F9BF -> $0080                OC7M7           EQU     $80
00F9BF 03F9BF -> $0040                OC7M6           EQU     $40
00F9BF 03F9BF -> $0020                OC7M5           EQU     $20
00F9BF 03F9BF -> $0010                OC7M4           EQU     $10
00F9BF 03F9BF -> $0008                OC7M3           EQU     $08
00F9BF 03F9BF -> $0004                OC7M2           EQU     $04
00F9BF 03F9BF -> $0002                OC7M1           EQU     $02
00F9BF 03F9BF -> $0001                OC7M0           EQU     $01
00F9BF 03F9BF -> $0043                TOC7D           EQU     $0043
00F9BF 03F9BF -> $0080                OC7D7           EQU     $80
00F9BF 03F9BF -> $0040                OC7D6           EQU     $40
00F9BF 03F9BF -> $0020                OC7D5           EQU     $20
00F9BF 03F9BF -> $0010                OC7D4           EQU     $10
00F9BF 03F9BF -> $0008                OC7D3           EQU     $08
00F9BF 03F9BF -> $0004                OC7D2           EQU     $04
00F9BF 03F9BF -> $0002                OC7D1           EQU     $02
00F9BF 03F9BF -> $0001                OC7D0           EQU     $01
00F9BF 03F9BF -> $0044                TCNT            EQU     $0044
00F9BF 03F9BF -> $0046                TSCR1           EQU     $0046
00F9BF 03F9BF -> $0080                TEN             EQU     $80
00F9BF 03F9BF -> $0040                TSWAI           EQU     $40
00F9BF 03F9BF -> $0020                TSFRZ           EQU     $20
00F9BF 03F9BF -> $0010                TFFCA           EQU     $10
00F9BF 03F9BF -> $0008                PRNT            EQU     $08
00F9BF 03F9BF -> $0047                TTOV            EQU     $0047
00F9BF 03F9BF -> $0080                TOV7            EQU     $80
00F9BF 03F9BF -> $0040                TOV6            EQU     $40
00F9BF 03F9BF -> $0020                TOV5            EQU     $20
00F9BF 03F9BF -> $0010                TOV4            EQU     $10
00F9BF 03F9BF -> $0008                TOV3            EQU     $08
00F9BF 03F9BF -> $0004                TOV2            EQU     $04
00F9BF 03F9BF -> $0002                TOV1            EQU     $02
00F9BF 03F9BF -> $0001                TOV0            EQU     $01
00F9BF 03F9BF -> $0048                TCTL1           EQU     $0048
00F9BF 03F9BF -> $0080                OM7             EQU     $80
00F9BF 03F9BF -> $0040                OL7             EQU     $40
00F9BF 03F9BF -> $0020                OM6             EQU     $20
00F9BF 03F9BF -> $0010                OL6             EQU     $10
00F9BF 03F9BF -> $0008                OM5             EQU     $08
00F9BF 03F9BF -> $0004                OL5             EQU     $04
00F9BF 03F9BF -> $0002                OM4             EQU     $02
00F9BF 03F9BF -> $0001                OL4             EQU     $01
00F9BF 03F9BF -> $0049                TCTL2           EQU     $0049
00F9BF 03F9BF -> $0080                OM3             EQU     $80
00F9BF 03F9BF -> $0040                OL3             EQU     $40
00F9BF 03F9BF -> $0020                OM2             EQU     $20
00F9BF 03F9BF -> $0010                OL2             EQU     $10
00F9BF 03F9BF -> $0008                OM1             EQU     $08
00F9BF 03F9BF -> $0004                OL1             EQU     $04
00F9BF 03F9BF -> $0002                OM0             EQU     $02
00F9BF 03F9BF -> $0001                OL0             EQU     $01
00F9BF 03F9BF -> $004A                TCTL3           EQU     $004A
00F9BF 03F9BF -> $0080                EDG7B           EQU     $80
00F9BF 03F9BF -> $0040                EDG7A           EQU     $40
00F9BF 03F9BF -> $0020                EDG6B           EQU     $20
00F9BF 03F9BF -> $0010                EDG6A           EQU     $10
00F9BF 03F9BF -> $0008                EDG5B           EQU     $08
00F9BF 03F9BF -> $0004                EDG5A           EQU     $04
00F9BF 03F9BF -> $0002                EDG4B           EQU     $02
00F9BF 03F9BF -> $0001                EDG4A           EQU     $01
00F9BF 03F9BF -> $004B                TCTL4           EQU     $004B
00F9BF 03F9BF -> $0080                EDG3B           EQU     $80
00F9BF 03F9BF -> $0040                EDG3A           EQU     $40
00F9BF 03F9BF -> $0020                EDG2B           EQU     $20
00F9BF 03F9BF -> $0010                EDG2A           EQU     $10
00F9BF 03F9BF -> $0008                EDG1B           EQU     $08
00F9BF 03F9BF -> $0004                EDG1A           EQU     $04
00F9BF 03F9BF -> $0002                EDG0B           EQU     $02
00F9BF 03F9BF -> $0001                EDG0A           EQU     $01
00F9BF 03F9BF -> $004C                TIE             EQU     $004C
00F9BF 03F9BF -> $0080                C7I             EQU     $80
00F9BF 03F9BF -> $0040                C6I             EQU     $40
00F9BF 03F9BF -> $0020                C5I             EQU     $20
00F9BF 03F9BF -> $0010                C4I             EQU     $10
00F9BF 03F9BF -> $0008                C3I             EQU     $08
00F9BF 03F9BF -> $0004                C2I             EQU     $04
00F9BF 03F9BF -> $0002                C1I             EQU     $02
00F9BF 03F9BF -> $0001                C0I             EQU     $01
00F9BF 03F9BF -> $004D                TSCR2           EQU     $004D
00F9BF 03F9BF -> $0080                TOI             EQU     $80
00F9BF 03F9BF -> $0008                TCRE            EQU     $08
00F9BF 03F9BF -> $0004                PR2             EQU     $04
00F9BF 03F9BF -> $0002                PR1             EQU     $02
00F9BF 03F9BF -> $0001                PR0             EQU     $01
00F9BF 03F9BF -> $004E                TFLG1           EQU     $004E
00F9BF 03F9BF -> $0080                C7F             EQU     $80
00F9BF 03F9BF -> $0040                C6F             EQU     $40
00F9BF 03F9BF -> $0020                C5F             EQU     $20
00F9BF 03F9BF -> $0010                C4F             EQU     $10
00F9BF 03F9BF -> $0008                C3F             EQU     $08
00F9BF 03F9BF -> $0004                C2F             EQU     $04
00F9BF 03F9BF -> $0002                C1F             EQU     $02
00F9BF 03F9BF -> $0001                C0F             EQU     $01
00F9BF 03F9BF -> $004F                TFLG2           EQU     $004F
00F9BF 03F9BF -> $0080                TOF             EQU     $80
00F9BF 03F9BF -> $0050                TC0             EQU     $0050
00F9BF 03F9BF -> $0052                TC1             EQU     $0052
00F9BF 03F9BF -> $0054                TC2             EQU     $0054
00F9BF 03F9BF -> $0056                TC3             EQU     $0056
00F9BF 03F9BF -> $0058                TC4             EQU     $0058
00F9BF 03F9BF -> $005A                TC5             EQU     $005A
00F9BF 03F9BF -> $005C                TC6             EQU     $005C
00F9BF 03F9BF -> $005E                TC7             EQU     $005E
00F9BF 03F9BF -> $0060                PACTL           EQU     $0060
00F9BF 03F9BF -> $0040                PAEN            EQU     $40
00F9BF 03F9BF -> $0020                PAMOD           EQU     $20
00F9BF 03F9BF -> $0010                PEDGE           EQU     $10
00F9BF 03F9BF -> $0008                CLK1            EQU     $08
00F9BF 03F9BF -> $0004                CLK0            EQU     $04
00F9BF 03F9BF -> $0002                PAOVI           EQU     $02
00F9BF 03F9BF -> $0001                PAI             EQU     $01
00F9BF 03F9BF -> $0061                PAFLG           EQU     $0061
00F9BF 03F9BF -> $0002                PAOVF           EQU     $02
00F9BF 03F9BF -> $0001                PAIF            EQU     $01
00F9BF 03F9BF -> $0062                PACNT           EQU     $0062
                                      ;$0064 to $006B reserved
00F9BF 03F9BF -> $006C                OCPD            EQU     $006C
00F9BF 03F9BF -> $0080                OCPD7           EQU     $80
00F9BF 03F9BF -> $0040                OCPD6           EQU     $40
00F9BF 03F9BF -> $0020                OCPD5           EQU     $20
00F9BF 03F9BF -> $0010                OCPD4           EQU     $10
00F9BF 03F9BF -> $0008                OCPD3           EQU     $08
00F9BF 03F9BF -> $0004                OCPD2           EQU     $04
00F9BF 03F9BF -> $0002                OCPD1           EQU     $02
00F9BF 03F9BF -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
00F9BF 03F9BF -> $006E                PTPSR           EQU     $006E
00F9BF 03F9BF -> $0080                PTPS7           EQU     $80
00F9BF 03F9BF -> $0040                PTPS6           EQU     $40
00F9BF 03F9BF -> $0020                PTPS5           EQU     $20
00F9BF 03F9BF -> $0010                PTPS4           EQU     $10
00F9BF 03F9BF -> $0008                PTPS3           EQU     $08
00F9BF 03F9BF -> $0004                PTPS2           EQU     $04
00F9BF 03F9BF -> $0002                PTPS1           EQU     $02
00F9BF 03F9BF -> $0001                PTPS0           EQU     $01
                                      ;$006F reserved
00F9BF 03F9BF -> $0070                ATDCTL0         EQU     $0070
00F9BF 03F9BF -> $0008                WRAP3           EQU     $08
00F9BF 03F9BF -> $0004                WRAP2           EQU     $04
00F9BF 03F9BF -> $0002                WRAP1           EQU     $02
00F9BF 03F9BF -> $0001                WRAP0           EQU     $01
00F9BF 03F9BF -> $0071                ATDCTL1         EQU     $0071
00F9BF 03F9BF -> $0080                ETRIGSEL        EQU     $80
00F9BF 03F9BF -> $0040                SRES1           EQU     $40
00F9BF 03F9BF -> $0020                SRES0           EQU     $20
00F9BF 03F9BF -> $0010                DIS             EQU     $10
00F9BF 03F9BF -> $0008                ETRIGCH3        EQU     $08
00F9BF 03F9BF -> $0004                ETRIGCH2        EQU     $04
00F9BF 03F9BF -> $0002                ETRIGCH1        EQU     $02
00F9BF 03F9BF -> $0001                ETRIGCH0        EQU     $01
00F9BF 03F9BF -> $0072                ATDCTL2         EQU     $0072
00F9BF 03F9BF -> $0040                AFFC            EQU     $40
00F9BF 03F9BF -> $0010                ETRIGLE         EQU     $10
00F9BF 03F9BF -> $0008                ETRIGP          EQU     $08
00F9BF 03F9BF -> $0004                ETRIGE          EQU     $04
00F9BF 03F9BF -> $0002                ASCIE           EQU     $02
00F9BF 03F9BF -> $0001                ASCIF           EQU     $01
00F9BF 03F9BF -> $0073                ATDCTL3         EQU     $0073
00F9BF 03F9BF -> $0080                DJM             EQU     $80
00F9BF 03F9BF -> $0040                S8C             EQU     $40
00F9BF 03F9BF -> $0020                S4C             EQU     $20
00F9BF 03F9BF -> $0010                S2C             EQU     $10
00F9BF 03F9BF -> $0008                S1C             EQU     $08
00F9BF 03F9BF -> $0004                FIFO            EQU     $04
00F9BF 03F9BF -> $0002                FRZ1            EQU     $02
00F9BF 03F9BF -> $0001                FRZ0            EQU     $01
00F9BF 03F9BF -> $0074                ATDCTL4         EQU     $0074
00F9BF 03F9BF -> $0080                SMP2            EQU     $80
00F9BF 03F9BF -> $0040                SMP1            EQU     $40
00F9BF 03F9BF -> $0020                SMP0            EQU     $20
00F9BF 03F9BF -> $0010                PRS4            EQU     $10
00F9BF 03F9BF -> $0008                PRS3            EQU     $08
00F9BF 03F9BF -> $0004                PRS2            EQU     $04
00F9BF 03F9BF -> $0002                PRS1            EQU     $02
00F9BF 03F9BF -> $0001                PRS0            EQU     $01
00F9BF 03F9BF -> $0075                ATDCTL5         EQU     $0075
00F9BF 03F9BF -> $0040                SC              EQU     $40
00F9BF 03F9BF -> $0020                SCAN            EQU     $20
00F9BF 03F9BF -> $0010                MULT            EQU     $10
00F9BF 03F9BF -> $0008                CD              EQU     $08
00F9BF 03F9BF -> $0004                CC              EQU     $04
00F9BF 03F9BF -> $0002                CB              EQU     $02
00F9BF 03F9BF -> $0001                CA              EQU     $01
00F9BF 03F9BF -> $0076                ATDSTAT0        EQU     $0076
00F9BF 03F9BF -> $0080                SCF             EQU     $80
00F9BF 03F9BF -> $0020                ETORF           EQU     $20
00F9BF 03F9BF -> $0010                FIFOR           EQU     $10
00F9BF 03F9BF -> $0004                CC3             EQU     $04
00F9BF 03F9BF -> $0004                CC2             EQU     $04
00F9BF 03F9BF -> $0002                CC1             EQU     $02
00F9BF 03F9BF -> $0001                CC0             EQU     $01
                                      ;$0077 reserved
00F9BF 03F9BF -> $0078                ATDCMPEH        EQU     $0078
00F9BF 03F9BF -> $0080                CMPE15          EQU     $80
00F9BF 03F9BF -> $0040                CMPE14          EQU     $40
00F9BF 03F9BF -> $0020                CMPE13          EQU     $20
00F9BF 03F9BF -> $0010                CMPE12          EQU     $10
00F9BF 03F9BF -> $0008                CMPE11          EQU     $08
00F9BF 03F9BF -> $0004                CMPE10          EQU     $04
00F9BF 03F9BF -> $0002                CMPE9           EQU     $02
00F9BF 03F9BF -> $0001                CMPE8           EQU     $01
00F9BF 03F9BF -> $0079                ATDCMPEL        EQU     $0079
00F9BF 03F9BF -> $0080                CMPE7           EQU     $80
00F9BF 03F9BF -> $0040                CMPE6           EQU     $40
00F9BF 03F9BF -> $0020                CMPE5           EQU     $20
00F9BF 03F9BF -> $0010                CMPE4           EQU     $10
00F9BF 03F9BF -> $0008                CMPE3           EQU     $08
00F9BF 03F9BF -> $0004                CMPE2           EQU     $04
00F9BF 03F9BF -> $0002                CMPE1           EQU     $02
00F9BF 03F9BF -> $0001                CMPE0           EQU     $01
00F9BF 03F9BF -> $007A                ATDSTAT2H       EQU     $007A
00F9BF 03F9BF -> $0080                CCF15           EQU     $80
00F9BF 03F9BF -> $0040                CCF14           EQU     $40
00F9BF 03F9BF -> $0020                CCF13           EQU     $20
00F9BF 03F9BF -> $0010                CCF12           EQU     $10
00F9BF 03F9BF -> $0008                CCF11           EQU     $08
00F9BF 03F9BF -> $0004                CCF10           EQU     $04
00F9BF 03F9BF -> $0002                CCF9            EQU     $02
00F9BF 03F9BF -> $0001                CCF8            EQU     $01
00F9BF 03F9BF -> $007B                ATDSTAT2L       EQU     $007B
00F9BF 03F9BF -> $0080                CCF7            EQU     $80
00F9BF 03F9BF -> $0040                CCF6            EQU     $40
00F9BF 03F9BF -> $0020                CCF5            EQU     $20
00F9BF 03F9BF -> $0010                CCF4            EQU     $10
00F9BF 03F9BF -> $0008                CCF3            EQU     $08
00F9BF 03F9BF -> $0004                CCF2            EQU     $04
00F9BF 03F9BF -> $0002                CCF1            EQU     $02
00F9BF 03F9BF -> $0001                CCF0            EQU     $01
00F9BF 03F9BF -> $007C                ATDDIENH        EQU     $007C
00F9BF 03F9BF -> $007C                ATDDIEN         EQU     $007C
00F9BF 03F9BF -> $0080                IEN15           EQU     $80
00F9BF 03F9BF -> $0040                IEN14           EQU     $40
00F9BF 03F9BF -> $0020                IEN13           EQU     $20
00F9BF 03F9BF -> $0010                IEN12           EQU     $10
00F9BF 03F9BF -> $0008                IEN11           EQU     $08
00F9BF 03F9BF -> $0004                IEN10           EQU     $04
00F9BF 03F9BF -> $0002                IEN9            EQU     $02
00F9BF 03F9BF -> $0001                IEN8            EQU     $01
00F9BF 03F9BF -> $007D                ATDDIENL        EQU     $007D
00F9BF 03F9BF -> $0080                IEN7            EQU     $80
00F9BF 03F9BF -> $0040                IEN6            EQU     $40
00F9BF 03F9BF -> $0020                IEN5            EQU     $20
00F9BF 03F9BF -> $0010                IEN4            EQU     $10
00F9BF 03F9BF -> $0008                IEN3            EQU     $08
00F9BF 03F9BF -> $0004                IEN2            EQU     $04
00F9BF 03F9BF -> $0002                IEN1            EQU     $02
00F9BF 03F9BF -> $0001                IEN0            EQU     $01
00F9BF 03F9BF -> $007E                ATDCMPHTH       EQU     $007E
00F9BF 03F9BF -> $0080                CMPHT15         EQU     $80
00F9BF 03F9BF -> $0040                CMPHT14         EQU     $40
00F9BF 03F9BF -> $0020                CMPHT13         EQU     $20
00F9BF 03F9BF -> $0010                CMPHT12         EQU     $10
00F9BF 03F9BF -> $0008                CMPHT11         EQU     $08
00F9BF 03F9BF -> $0004                CMPHT10         EQU     $04
00F9BF 03F9BF -> $0002                CMPHT9          EQU     $02
00F9BF 03F9BF -> $0001                CMPHT8          EQU     $01
00F9BF 03F9BF -> $007F                ATDCMPHTL       EQU     $007F
00F9BF 03F9BF -> $0001                CMPHT0          EQU     $01
00F9BF 03F9BF -> $0002                CMPHT1          EQU     $02
00F9BF 03F9BF -> $0004                CMPHT2          EQU     $04
00F9BF 03F9BF -> $0008                CMPHT3          EQU     $08
00F9BF 03F9BF -> $0010                CMPHT4          EQU     $10
00F9BF 03F9BF -> $0020                CMPHT5          EQU     $20
00F9BF 03F9BF -> $0040                CMPHT6          EQU     $40
00F9BF 03F9BF -> $0080                CMPHT7          EQU     $80
00F9BF 03F9BF -> $0080                ATDDR0          EQU     $0080
00F9BF 03F9BF -> $0080                ATDDR0H         EQU     $0080
00F9BF 03F9BF -> $0081                ATDDR0L         EQU     $0081
00F9BF 03F9BF -> $0082                ATDDR1          EQU     $0082
00F9BF 03F9BF -> $0082                ATDDR1H         EQU     $0082
00F9BF 03F9BF -> $0083                ATDDR1L         EQU     $0083
00F9BF 03F9BF -> $0084                ATDDR2          EQU     $0084
00F9BF 03F9BF -> $0084                ATDDR2H         EQU     $0084
00F9BF 03F9BF -> $0085                ATDDR2L         EQU     $0085
00F9BF 03F9BF -> $0086                ATDDR3          EQU     $0086
00F9BF 03F9BF -> $0086                ATDDR3H         EQU     $0086
00F9BF 03F9BF -> $0087                ATDDR3L         EQU     $0087
00F9BF 03F9BF -> $0088                ATDDR4          EQU     $0088
00F9BF 03F9BF -> $0088                ATDDR4H         EQU     $0088
00F9BF 03F9BF -> $0089                ATDDR4L         EQU     $0089
00F9BF 03F9BF -> $008A                ATDDR5          EQU     $008A
00F9BF 03F9BF -> $008A                ATDDR5H         EQU     $008A
00F9BF 03F9BF -> $008B                ATDDR5L         EQU     $008B
00F9BF 03F9BF -> $008C                ATDDR6          EQU     $008C
00F9BF 03F9BF -> $008C                ATDDR6H         EQU     $008C
00F9BF 03F9BF -> $008D                ATDDR6L         EQU     $008D
00F9BF 03F9BF -> $008E                ATDDR7          EQU     $008E
00F9BF 03F9BF -> $008E                ATDDR7H         EQU     $008E
00F9BF 03F9BF -> $008F                ATDDR7L         EQU     $008F
00F9BF 03F9BF -> $0090                ATDDR8          EQU     $0090
00F9BF 03F9BF -> $0090                ATDDR8H         EQU     $0090
00F9BF 03F9BF -> $0091                ATDDR8L         EQU     $0091
00F9BF 03F9BF -> $0092                ATDDR9          EQU     $0092
00F9BF 03F9BF -> $0092                ATDDR9H         EQU     $0092
00F9BF 03F9BF -> $0093                ATDDR9L         EQU     $0093
00F9BF 03F9BF -> $0093                ATDDR10         EQU     $0093
00F9BF 03F9BF -> $0093                ATDDR10H        EQU     $0093
00F9BF 03F9BF -> $0095                ATDDR10L        EQU     $0095
00F9BF 03F9BF -> $0096                ATDDR11         EQU     $0096
00F9BF 03F9BF -> $0096                ATDDR11H        EQU     $0096
00F9BF 03F9BF -> $0097                ATDDR11L        EQU     $0097
00F9BF 03F9BF -> $0098                ATDDR12         EQU     $0098
00F9BF 03F9BF -> $0098                ATDDR12H        EQU     $0098
00F9BF 03F9BF -> $0099                ATDDR12L        EQU     $0099
00F9BF 03F9BF -> $009A                ATDDR13         EQU     $009A
00F9BF 03F9BF -> $009A                ATDDR13H        EQU     $009A
00F9BF 03F9BF -> $009B                ATDDR13L        EQU     $009B
00F9BF 03F9BF -> $009C                ATDDR14         EQU     $009C
00F9BF 03F9BF -> $009C                ATDDR14H        EQU     $009C
00F9BF 03F9BF -> $009D                ATDDR14L        EQU     $009D
00F9BF 03F9BF -> $009E                ATDDR15         EQU     $009E
00F9BF 03F9BF -> $009E                ATDDR15H        EQU     $009E
00F9BF 03F9BF -> $009F                ATDDR15L        EQU     $009F
00F9BF 03F9BF -> $00A0                PWME            EQU     $00A0
00F9BF 03F9BF -> $0080                PWME7           EQU     $80
00F9BF 03F9BF -> $0040                PWME6           EQU     $40
00F9BF 03F9BF -> $0020                PWME5           EQU     $20
00F9BF 03F9BF -> $0010                PWME4           EQU     $10
00F9BF 03F9BF -> $0008                PWME3           EQU     $08
00F9BF 03F9BF -> $0004                PWME2           EQU     $04
00F9BF 03F9BF -> $0002                PWME1           EQU     $02
00F9BF 03F9BF -> $0001                PWME0           EQU     $01
00F9BF 03F9BF -> $00A1                PWMPOL          EQU     $00A1
00F9BF 03F9BF -> $0080                PPOL7           EQU     $80
00F9BF 03F9BF -> $0040                PPOL6           EQU     $40
00F9BF 03F9BF -> $0020                PPOL5           EQU     $20
00F9BF 03F9BF -> $0010                PPOL4           EQU     $10
00F9BF 03F9BF -> $0008                PPOL3           EQU     $08
00F9BF 03F9BF -> $0004                PPOL2           EQU     $04
00F9BF 03F9BF -> $0002                PPOL1           EQU     $02
00F9BF 03F9BF -> $0001                PPOL0           EQU     $01
00F9BF 03F9BF -> $00A2                PWMCLK          EQU     $00A2
00F9BF 03F9BF -> $0080                PCLK7           EQU     $80
00F9BF 03F9BF -> $0040                PCLK6           EQU     $40
00F9BF 03F9BF -> $0020                PCLK5           EQU     $20
00F9BF 03F9BF -> $0010                PCLK4           EQU     $10
00F9BF 03F9BF -> $0008                PCLK3           EQU     $08
00F9BF 03F9BF -> $0004                PCLK2           EQU     $04
00F9BF 03F9BF -> $0002                PCLK1           EQU     $02
00F9BF 03F9BF -> $0001                PCLK0           EQU     $01
00F9BF 03F9BF -> $00A3                PWMPRCLK        EQU     $00A3
00F9BF 03F9BF -> $0040                PCKB2           EQU     $40
00F9BF 03F9BF -> $0020                PCKB1           EQU     $20
00F9BF 03F9BF -> $0010                PCKB0           EQU     $10
00F9BF 03F9BF -> $0004                PCKA2           EQU     $04
00F9BF 03F9BF -> $0002                PCKA1           EQU     $02
00F9BF 03F9BF -> $0001                PCKA0           EQU     $01
00F9BF 03F9BF -> $00A4                PWMCAE          EQU     $00A4
00F9BF 03F9BF -> $0080                CAE7            EQU     $80
00F9BF 03F9BF -> $0040                CAE6            EQU     $40
00F9BF 03F9BF -> $0020                CAE5            EQU     $20
00F9BF 03F9BF -> $0010                CAE4            EQU     $10
00F9BF 03F9BF -> $0008                CAE3            EQU     $08
00F9BF 03F9BF -> $0004                CAE2            EQU     $04
00F9BF 03F9BF -> $0002                CAE1            EQU     $02
00F9BF 03F9BF -> $0001                CAE0            EQU     $01
00F9BF 03F9BF -> $00A5                PWMCTL          EQU     $00A5
00F9BF 03F9BF -> $0080                CON67           EQU     $80
00F9BF 03F9BF -> $0040                CON45           EQU     $40
00F9BF 03F9BF -> $0020                CON23           EQU     $20
00F9BF 03F9BF -> $0010                CON01           EQU     $10
00F9BF 03F9BF -> $0008                PSWAI           EQU     $08
00F9BF 03F9BF -> $0004                PFRZ            EQU     $04
00F9BF 03F9BF -> $00A6                PWMCLKAB        EQU     $00A6
00F9BF 03F9BF -> $0080                PCLKAB7         EQU     $80
00F9BF 03F9BF -> $0040                PCLKAB6         EQU     $40
00F9BF 03F9BF -> $0020                PCLKAB5         EQU     $20
00F9BF 03F9BF -> $0010                PCLKAB4         EQU     $10
00F9BF 03F9BF -> $0008                PCLKAB3         EQU     $08
00F9BF 03F9BF -> $0004                PCLKAB2         EQU     $04
00F9BF 03F9BF -> $0002                PCLKAB1         EQU     $02
00F9BF 03F9BF -> $0001                PCLKAB0         EQU     $01
                                      ;$00A7 reserved
00F9BF 03F9BF -> $00A8                PWMSCNTA        EQU     $00A8
00F9BF 03F9BF -> $00A9                PWMSCNTB        EQU     $00A9
                                      ;$00AA to $00AB reserved
00F9BF 03F9BF -> $00AC                PWMCNT0         EQU     $00AC
00F9BF 03F9BF -> $00AD                PWMCNT1         EQU     $00AD
00F9BF 03F9BF -> $00AE                PWMCNT2         EQU     $00AE
00F9BF 03F9BF -> $00AF                PWMCNT3         EQU     $00AF
00F9BF 03F9BF -> $00B0                PWMCNT4         EQU     $00B0
00F9BF 03F9BF -> $00B1                PWMCNT5         EQU     $00B1
00F9BF 03F9BF -> $00B2                PWMCNT6         EQU     $00B2
00F9BF 03F9BF -> $00B3                PWMCNT7         EQU     $00B3
00F9BF 03F9BF -> $00B4                PWMPER0         EQU     $00B4
00F9BF 03F9BF -> $00B5                PWMPER1         EQU     $00B5
00F9BF 03F9BF -> $00B6                PWMPER2         EQU     $00B6
00F9BF 03F9BF -> $00B7                PWMPER3         EQU     $00B7
00F9BF 03F9BF -> $00B8                PWMPER4         EQU     $00B8
00F9BF 03F9BF -> $00B9                PWMPER5         EQU     $00B9
00F9BF 03F9BF -> $00BA                PWMPER6         EQU     $00BA
00F9BF 03F9BF -> $00BB                PWMPER7         EQU     $00BB
00F9BF 03F9BF -> $00BC                PWMDTY0         EQU     $00BC
00F9BF 03F9BF -> $00BD                PWMDTY1         EQU     $00BD
00F9BF 03F9BF -> $00BE                PWMDTY2         EQU     $00BE
00F9BF 03F9BF -> $00BF                PWMDTY3         EQU     $00BF
00F9BF 03F9BF -> $00C0                PWMDTY4         EQU     $00C0
00F9BF 03F9BF -> $00C1                PWMDTY5         EQU     $00C1
00F9BF 03F9BF -> $00C2                PWMDTY6         EQU     $00C2
00F9BF 03F9BF -> $00C3                PWMDTY7         EQU     $00C3
                                      ;$00C4 to $00C7 reserved
00F9BF 03F9BF -> $00C8                SCIBDH          EQU     $00C8
00F9BF 03F9BF -> $00C8                SCI0BDH         EQU     $00C8
00F9BF 03F9BF -> $0080                IREN            EQU     $80
00F9BF 03F9BF -> $0040                TNP1            EQU     $40
00F9BF 03F9BF -> $0020                TNP0            EQU     $20
00F9BF 03F9BF -> $0010                SBR12           EQU     $10
00F9BF 03F9BF -> $0008                SBR11           EQU     $08
00F9BF 03F9BF -> $0004                SBR10           EQU     $04
00F9BF 03F9BF -> $0002                SBR9            EQU     $02
00F9BF 03F9BF -> $0001                SBR8            EQU     $01
00F9BF 03F9BF -> $00C9                SCI0ASR1        EQU     $00C9
00F9BF 03F9BF -> $0080                RXEDGIF         EQU     $80
00F9BF 03F9BF -> $0004                BERRV           EQU     $04
00F9BF 03F9BF -> $0002                BERRIF          EQU     $02
00F9BF 03F9BF -> $0001                BKDIF           EQU     $01
00F9BF 03F9BF -> $00C9                SCIBDL          EQU     $00C9
00F9BF 03F9BF -> $00C9                SCI0BDL         EQU     $00C9
00F9BF 03F9BF -> $0080                SBR7            EQU     $80
00F9BF 03F9BF -> $0040                SBR6            EQU     $40
00F9BF 03F9BF -> $0020                SBR5            EQU     $20
00F9BF 03F9BF -> $0010                SBR4            EQU     $10
00F9BF 03F9BF -> $0008                SBR3            EQU     $08
00F9BF 03F9BF -> $0004                SBR2            EQU     $04
00F9BF 03F9BF -> $0002                SBR1            EQU     $02
00F9BF 03F9BF -> $0001                SBR0            EQU     $01
00F9BF 03F9BF -> $00C9                SCI0ACR1        EQU     $00C9
00F9BF 03F9BF -> $0080                RXEDGIE         EQU     $80
00F9BF 03F9BF -> $0002                BERRIE          EQU     $02
00F9BF 03F9BF -> $0001                BKDIE           EQU     $01
00F9BF 03F9BF -> $00CA                SCICR1          EQU     $00CA
00F9BF 03F9BF -> $00CA                SCI0CR1         EQU     $00CA
00F9BF 03F9BF -> $0080                LOOPS           EQU     $80
00F9BF 03F9BF -> $0040                SCISWAI         EQU     $40
00F9BF 03F9BF -> $0020                RSRC            EQU     $20
00F9BF 03F9BF -> $0010                M               EQU     $10
00F9BF 03F9BF -> $0008                WAKE            EQU     $08
00F9BF 03F9BF -> $0004                ILT             EQU     $04
00F9BF 03F9BF -> $0002                PE              EQU     $02
00F9BF 03F9BF -> $0001                PT              EQU     $01
00F9BF 03F9BF -> $00CA                SCI0ACR2        EQU     $00CA
00F9BF 03F9BF -> $0004                BERRM1          EQU     $04
00F9BF 03F9BF -> $0002                BERRM0          EQU     $02
00F9BF 03F9BF -> $0001                BKDFE           EQU     $01
00F9BF 03F9BF -> $00CB                SCICR2          EQU     $00CB
00F9BF 03F9BF -> $00CB                SCI0CR2         EQU     $00CB
00F9BF 03F9BF -> $0080                TXIE            EQU     $80
00F9BF 03F9BF -> $0040                TCIE            EQU     $40
00F9BF 03F9BF -> $0020                RIE             EQU     $20
00F9BF 03F9BF -> $0010                ILIE            EQU     $10
00F9BF 03F9BF -> $0008                TE              EQU     $08
00F9BF 03F9BF -> $0004                RE              EQU     $04
00F9BF 03F9BF -> $0002                RWU             EQU     $02
00F9BF 03F9BF -> $0001                SBK             EQU     $01
00F9BF 03F9BF -> $00CC                SCISR1          EQU     $00CC
00F9BF 03F9BF -> $00CC                SCI0SR1         EQU     $00CC
00F9BF 03F9BF -> $0080                TDRE            EQU     $80
00F9BF 03F9BF -> $0040                TC              EQU     $40
00F9BF 03F9BF -> $0020                RDRFF           EQU     $20
00F9BF 03F9BF -> $0010                IDLE            EQU     $10
00F9BF 03F9BF -> $0008                OR              EQU     $08
00F9BF 03F9BF -> $0004                NF              EQU     $04
00F9BF 03F9BF -> $0002                FE              EQU     $02
00F9BF 03F9BF -> $0001                PF              EQU     $01
00F9BF 03F9BF -> $00CD                SCISR2          EQU     $00CD
00F9BF 03F9BF -> $00CD                SCI0SR2         EQU     $00CD
00F9BF 03F9BF -> $0008                AMAP            EQU     $08
00F9BF 03F9BF -> $0010                TXPOL           EQU     $10
00F9BF 03F9BF -> $0008                RXPOL           EQU     $08
00F9BF 03F9BF -> $0004                BRK13           EQU     $04
00F9BF 03F9BF -> $0002                TXDIR           EQU     $02
00F9BF 03F9BF -> $0001                RAF             EQU     $01
00F9BF 03F9BF -> $00CE                SCIDRH          EQU     $00CE
00F9BF 03F9BF -> $00CE                SCI0DRH         EQU     $00CE
00F9BF 03F9BF -> $0080                R8              EQU     $80
00F9BF 03F9BF -> $0040                T8              EQU     $40
00F9BF 03F9BF -> $00CF                SCIDRL          EQU     $00CF
00F9BF 03F9BF -> $00CF                SCI0DRL         EQU     $00CF
00F9BF 03F9BF -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
00F9BF 03F9BF -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
00F9BF 03F9BF -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
00F9BF 03F9BF -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
00F9BF 03F9BF -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
00F9BF 03F9BF -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
00F9BF 03F9BF -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
00F9BF 03F9BF -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
00F9BF 03F9BF -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
00F9BF 03F9BF -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
00F9BF 03F9BF -> $00D7                SCI1DRL         EQU     $00D7
00F9BF 03F9BF -> $00D8                SPICR1          EQU     $00D8
00F9BF 03F9BF -> $00D8                SPI0CR1         EQU     $00D8
00F9BF 03F9BF -> $0080                SPIE            EQU     $80
00F9BF 03F9BF -> $0040                SPE             EQU     $40
00F9BF 03F9BF -> $0020                SPTIE           EQU     $20
00F9BF 03F9BF -> $0010                MSTR            EQU     $10
00F9BF 03F9BF -> $0008                CPOL            EQU     $08
00F9BF 03F9BF -> $0004                CPHA            EQU     $04
00F9BF 03F9BF -> $0002                SSOE            EQU     $02
00F9BF 03F9BF -> $0001                LSBFE           EQU     $01
00F9BF 03F9BF -> $00D9                SPICR2          EQU     $00D9
00F9BF 03F9BF -> $00D9                SPI0CR2         EQU     $00D9
00F9BF 03F9BF -> $0040                XFRW            EQU     $40
00F9BF 03F9BF -> $0010                MODFEN          EQU     $10
00F9BF 03F9BF -> $0008                BIDIROE         EQU     $08
00F9BF 03F9BF -> $0002                SPISWAI         EQU     $02
00F9BF 03F9BF -> $0001                SPC0            EQU     $01
00F9BF 03F9BF -> $00DA                SPIBR           EQU     $00DA
00F9BF 03F9BF -> $00DA                SPI0BR          EQU     $00DA
00F9BF 03F9BF -> $0040                SPPR2           EQU     $40
00F9BF 03F9BF -> $0020                SPPR1           EQU     $20
00F9BF 03F9BF -> $0010                SPPR0           EQU     $10
00F9BF 03F9BF -> $0004                SPR2            EQU     $04
00F9BF 03F9BF -> $0002                SPR1            EQU     $02
00F9BF 03F9BF -> $0001                SPR0            EQU     $01
00F9BF 03F9BF -> $00DB                SPISR           EQU     $00DB
00F9BF 03F9BF -> $00DB                SPI0SR          EQU     $00DB
00F9BF 03F9BF -> $0080                SPIF            EQU     $80
00F9BF 03F9BF -> $0020                SPTEF           EQU     $20
00F9BF 03F9BF -> $0010                MODF            EQU     $10
00F9BF 03F9BF -> $00DC                SPIDRH          EQU     $00DC
00F9BF 03F9BF -> $00DC                SPI0DRH         EQU     $00DC
00F9BF 03F9BF -> $00DD                SPIDRL          EQU     $00DD
00F9BF 03F9BF -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00E7 reserved
00F9BF 03F9BF -> $00E8                SCI2BDH         EQU     $00E8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
00F9BF 03F9BF -> $00E8                SCI2ASR1        EQU     $00E8
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
00F9BF 03F9BF -> $00E9                SCI2BDL         EQU     $00E9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
00F9BF 03F9BF -> $00E9                SCI2ACR1        EQU     $00E9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
00F9BF 03F9BF -> $00EA                SCI2CR1         EQU     $00EA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
00F9BF 03F9BF -> $00EA                SCI2ACR2        EQU     $00EA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
00F9BF 03F9BF -> $00EB                SCI2CR2         EQU     $00EB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
00F9BF 03F9BF -> $00EC                SCI2SR1         EQU     $00EC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
00F9BF 03F9BF -> $00ED                SCI2SR2         EQU     $00ED
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
00F9BF 03F9BF -> $00EE                SCI2DRH         EQU     $00EE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
00F9BF 03F9BF -> $00EF                SCI2DRL         EQU     $00EF
00F9BF 03F9BF -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
00F9BF 03F9BF -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
00F9BF 03F9BF -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
00F9BF 03F9BF -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
00F9BF 03F9BF -> $00F4                SPI1DRH         EQU     $00F4
00F9BF 03F9BF -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
00F9BF 03F9BF -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
00F9BF 03F9BF -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
00F9BF 03F9BF -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
00F9BF 03F9BF -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
00F9BF 03F9BF -> $00FC                SPI2DRH         EQU     $00FC
00F9BF 03F9BF -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
00F9BF 03F9BF -> $0100                FCLKDIV         EQU     $0100
00F9BF 03F9BF -> $0080                FDIVLD          EQU     $80
00F9BF 03F9BF -> $0040                FDIVLCK         EQU     $40
00F9BF 03F9BF -> $0020                FDIV5           EQU     $20
00F9BF 03F9BF -> $0010                FDIV4           EQU     $10
00F9BF 03F9BF -> $0008                FDIV3           EQU     $08
00F9BF 03F9BF -> $0004                FDIV2           EQU     $04
00F9BF 03F9BF -> $0002                FDIV1           EQU     $02
00F9BF 03F9BF -> $0001                FDIV0           EQU     $01
00F9BF 03F9BF -> $0101                FSEC            EQU     $0101
00F9BF 03F9BF -> $0080                KEYEN1          EQU     $80
00F9BF 03F9BF -> $0040                KEYEN2          EQU     $40
00F9BF 03F9BF -> $0020                RNV5            EQU     $20
00F9BF 03F9BF -> $0010                RNV4            EQU     $10
00F9BF 03F9BF -> $0008                RNV3            EQU     $08
00F9BF 03F9BF -> $0004                RNV2            EQU     $04
00F9BF 03F9BF -> $0002                SEC1            EQU     $02
00F9BF 03F9BF -> $0001                SEC0            EQU     $01
00F9BF 03F9BF -> $0102                FCCOBIX         EQU     $0102
00F9BF 03F9BF -> $0004                CCOBIX2         EQU     $04
00F9BF 03F9BF -> $0002                CCOBIX1         EQU     $02
00F9BF 03F9BF -> $0001                CCOBIX0         EQU     $01
                                      ;$0103 reserved
00F9BF 03F9BF -> $0104                FCNFG           EQU     $0104
00F9BF 03F9BF -> $0080                CCIE            EQU     $80
00F9BF 03F9BF -> $0010                IGNSF           EQU     $10
00F9BF 03F9BF -> $0002                FDFD            EQU     $02
00F9BF 03F9BF -> $0001                FSFD            EQU     $01
00F9BF 03F9BF -> $0105                FERCNFG         EQU     $0105
00F9BF 03F9BF -> $0002                DFDIE           EQU     $02
00F9BF 03F9BF -> $0001                SFDIE           EQU     $01
00F9BF 03F9BF -> $0106                FSTAT           EQU     $0106
00F9BF 03F9BF -> $0080                CCIF            EQU     $80
00F9BF 03F9BF -> $0020                ACCERR          EQU     $20
00F9BF 03F9BF -> $0010                FPVIOL          EQU     $10
00F9BF 03F9BF -> $0008                MGBUSY          EQU     $08
00F9BF 03F9BF -> $0002                MGSTAT1         EQU     $02
00F9BF 03F9BF -> $0001                MGSTAT0         EQU     $01
00F9BF 03F9BF -> $0107                FERSTAT         EQU     $0107
00F9BF 03F9BF -> $0002                DFDIF           EQU     $02
00F9BF 03F9BF -> $0001                SFDIF           EQU     $01
00F9BF 03F9BF -> $0108                FPROT           EQU     $0108
00F9BF 03F9BF -> $0080                FPOPEN          EQU     $80
00F9BF 03F9BF -> $0040                RNV6            EQU     $40
00F9BF 03F9BF -> $0020                FPHDIS          EQU     $20
00F9BF 03F9BF -> $0010                FPHS1           EQU     $10
00F9BF 03F9BF -> $0008                FPHS0           EQU     $08
00F9BF 03F9BF -> $0004                FPLDIS          EQU     $04
00F9BF 03F9BF -> $0002                FPLS1           EQU     $02
00F9BF 03F9BF -> $0001                FPLS0           EQU     $01
00F9BF 03F9BF -> $0109                DPROT           EQU     $0109
00F9BF 03F9BF -> $0109                EPROT           EQU     $0109
00F9BF 03F9BF -> $0080                DPOPEN          EQU     $80
00F9BF 03F9BF -> $0080                EPOPEN          EQU     $80
00F9BF 03F9BF -> $0008                EPDIS           EQU     $08
00F9BF 03F9BF -> $0004                EPS2            EQU     $04
00F9BF 03F9BF -> $0002                EPS1            EQU     $02
00F9BF 03F9BF -> $0001                EPS0            EQU     $01
00F9BF 03F9BF -> $010A                FCCOBHI         EQU     $010A
00F9BF 03F9BF -> $0080                CCOB15          EQU     $80
00F9BF 03F9BF -> $0040                CCOB14          EQU     $40
00F9BF 03F9BF -> $0020                CCOB13          EQU     $20
00F9BF 03F9BF -> $0010                CCOB12          EQU     $10
00F9BF 03F9BF -> $0008                CCOB11          EQU     $08
00F9BF 03F9BF -> $0004                CCOB10          EQU     $04
00F9BF 03F9BF -> $0002                CCOB9           EQU     $02
00F9BF 03F9BF -> $0001                CCOB8           EQU     $01
00F9BF 03F9BF -> $010B                FCCOBLO         EQU     $010B
00F9BF 03F9BF -> $0080                CCOB7           EQU     $80
00F9BF 03F9BF -> $0040                CCOB6           EQU     $40
00F9BF 03F9BF -> $0020                CCOB5           EQU     $20
00F9BF 03F9BF -> $0010                CCOB4           EQU     $10
00F9BF 03F9BF -> $0008                CCOB3           EQU     $08
00F9BF 03F9BF -> $0004                CCOB2           EQU     $04
00F9BF 03F9BF -> $0002                CCOB1           EQU     $02
00F9BF 03F9BF -> $0001                CCOB0           EQU     $01
                                      ;$010C to $010F reserved
00F9BF 03F9BF -> $0110                FOPT            EQU     $0110
00F9BF 03F9BF -> $0080                NV7             EQU     $80
00F9BF 03F9BF -> $0040                NV6             EQU     $40
00F9BF 03F9BF -> $0020                NV5             EQU     $20
00F9BF 03F9BF -> $0010                NV4             EQU     $10
00F9BF 03F9BF -> $0008                NV3             EQU     $08
00F9BF 03F9BF -> $0004                NV2             EQU     $04
00F9BF 03F9BF -> $0002                NV1             EQU     $02
00F9BF 03F9BF -> $0001                NV0             EQU     $01
                                      ;$0111 to $011F reserved
00F9BF 03F9BF -> $0120                IVBR            EQU     $0120
                                      ;$0121 to $013F reserved
00F9BF 03F9BF -> $0140                CANCTL0         EQU     $0140
00F9BF 03F9BF -> $0080                RXFRM           EQU     $80
00F9BF 03F9BF -> $0040                RXACT           EQU     $40
00F9BF 03F9BF -> $0020                CSWAI           EQU     $20
00F9BF 03F9BF -> $0010                SYNCH           EQU     $10
00F9BF 03F9BF -> $0008                TIMEN           EQU     $08 ;RENAMED
00F9BF 03F9BF -> $0004                WUPE            EQU     $04
00F9BF 03F9BF -> $0002                SLPRQ           EQU     $02
00F9BF 03F9BF -> $0001                INITRQ          EQU     $01
00F9BF 03F9BF -> $0141                CANCTL1         EQU     $0141
00F9BF 03F9BF -> $0080                CANE            EQU     $80
00F9BF 03F9BF -> $0040                CLKSRC          EQU     $40
00F9BF 03F9BF -> $0020                LOOPB           EQU     $20
00F9BF 03F9BF -> $0010                LISTEN          EQU     $10
00F9BF 03F9BF -> $0004                WUPM            EQU     $04
00F9BF 03F9BF -> $0002                SLPAK           EQU     $02
00F9BF 03F9BF -> $0001                INITAK          EQU     $01
00F9BF 03F9BF -> $0142                CANBTR0         EQU     $0142
00F9BF 03F9BF -> $0080                SJW1            EQU     $80
00F9BF 03F9BF -> $0040                SJW0            EQU     $40
00F9BF 03F9BF -> $0020                BRP5            EQU     $20
00F9BF 03F9BF -> $0010                BRP4            EQU     $10
00F9BF 03F9BF -> $0008                BRP3            EQU     $08
00F9BF 03F9BF -> $0004                BRP2            EQU     $04
00F9BF 03F9BF -> $0002                BRP1            EQU     $02
00F9BF 03F9BF -> $0001                BRP0            EQU     $01
00F9BF 03F9BF -> $0143                CANBTR1         EQU     $0143
00F9BF 03F9BF -> $0080                SAMP            EQU     $80
00F9BF 03F9BF -> $0040                TSEG22          EQU     $40
00F9BF 03F9BF -> $0020                TSEG21          EQU     $20
00F9BF 03F9BF -> $0010                TSEG20          EQU     $10
00F9BF 03F9BF -> $0008                TSEG13          EQU     $08
00F9BF 03F9BF -> $0004                TSEG12          EQU     $04
00F9BF 03F9BF -> $0002                TSEG11          EQU     $02
00F9BF 03F9BF -> $0001                TESG10          EQU     $01
00F9BF 03F9BF -> $0144                CANRFLG         EQU     $0144
00F9BF 03F9BF -> $0080                WUPIF           EQU     $80
00F9BF 03F9BF -> $0040                CSCIF           EQU     $40
00F9BF 03F9BF -> $0020                RSTAT1          EQU     $20
00F9BF 03F9BF -> $0010                RSTAT0          EQU     $10
00F9BF 03F9BF -> $0008                TSTAT1          EQU     $08
00F9BF 03F9BF -> $0004                TSTAT0          EQU     $04
00F9BF 03F9BF -> $0002                OVRIF           EQU     $02
00F9BF 03F9BF -> $0001                RXF             EQU     $01
00F9BF 03F9BF -> $0145                CANRIER         EQU     $0145
00F9BF 03F9BF -> $0080                WUPIE           EQU     $80
00F9BF 03F9BF -> $0040                CSCIE           EQU     $40
00F9BF 03F9BF -> $0020                RSTATE1         EQU     $20
00F9BF 03F9BF -> $0010                RSTATE0         EQU     $10
00F9BF 03F9BF -> $0008                TSTATE1         EQU     $08
00F9BF 03F9BF -> $0004                TSTATE0         EQU     $04
00F9BF 03F9BF -> $0002                OVRIE           EQU     $02
00F9BF 03F9BF -> $0001                RXFIE           EQU     $01
00F9BF 03F9BF -> $0146                CANTFLG         EQU     $0146
00F9BF 03F9BF -> $0004                TXE2            EQU     $04
00F9BF 03F9BF -> $0002                TXE1            EQU     $02
00F9BF 03F9BF -> $0001                TXE0            EQU     $01
00F9BF 03F9BF -> $0147                CANTIER         EQU     $0147
00F9BF 03F9BF -> $0004                TXEIE2          EQU     $04
00F9BF 03F9BF -> $0002                TXEIE1          EQU     $02
00F9BF 03F9BF -> $0001                TXEIE0          EQU     $01
00F9BF 03F9BF -> $0148                CANTARQ         EQU     $0148
00F9BF 03F9BF -> $0004                ABTRQ2          EQU     $04
00F9BF 03F9BF -> $0002                ABTRQ1          EQU     $02
00F9BF 03F9BF -> $0001                ABTRQ0          EQU     $01
00F9BF 03F9BF -> $0149                CANTAAK         EQU     $0149
00F9BF 03F9BF -> $0004                ABTAK2          EQU     $04
00F9BF 03F9BF -> $0002                ABTAK1          EQU     $02
00F9BF 03F9BF -> $0001                ABTAK0          EQU     $01
00F9BF 03F9BF -> $014A                CANTBSEL        EQU     $014A
00F9BF 03F9BF -> $0004                TX2             EQU     $04
00F9BF 03F9BF -> $0002                TX1             EQU     $02
00F9BF 03F9BF -> $0001                TX0             EQU     $01
00F9BF 03F9BF -> $014B                CANIDAC         EQU     $014B
00F9BF 03F9BF -> $0020                IDAM1           EQU     $20
00F9BF 03F9BF -> $0010                IDAM0           EQU     $10
00F9BF 03F9BF -> $0004                IDHIT2          EQU     $04
00F9BF 03F9BF -> $0002                IDHIT1          EQU     $02
00F9BF 03F9BF -> $0001                IDHIT0          EQU     $01
                                      ; $14c and $14d reserved
00F9BF 03F9BF -> $014E                CANRXERR        EQU     $014E
00F9BF 03F9BF -> $014F                CANTXERR        EQU     $014F
00F9BF 03F9BF -> $0150                CANIDAR0        EQU     $0150
00F9BF 03F9BF -> $0151                CANIDAR1        EQU     $0151
00F9BF 03F9BF -> $0152                CANIDAR2        EQU     $0152
00F9BF 03F9BF -> $0153                CANIDAR3        EQU     $0153
00F9BF 03F9BF -> $0154                CANIDMR0        EQU     $0154
00F9BF 03F9BF -> $0155                CANIDMR1        EQU     $0155
00F9BF 03F9BF -> $0156                CANIDMR2        EQU     $0156
00F9BF 03F9BF -> $0157                CANIDMR3        EQU     $0157
00F9BF 03F9BF -> $0158                CANIDAR4        EQU     $0158
00F9BF 03F9BF -> $0159                CANIDAR5        EQU     $0159
00F9BF 03F9BF -> $015A                CANIDAR6        EQU     $015A
00F9BF 03F9BF -> $015B                CANIDAR7        EQU     $015B
00F9BF 03F9BF -> $015C                CANIDMR4        EQU     $015C
00F9BF 03F9BF -> $015D                CANIDMR5        EQU     $015D
00F9BF 03F9BF -> $015E                CANIDMR6        EQU     $015E
00F9BF 03F9BF -> $015F                CANIDMR7        EQU     $015F
00F9BF 03F9BF -> $0160                CANRXIDR0       EQU     $0160
00F9BF 03F9BF -> $0161                CANRXIDR1       EQU     $0161
00F9BF 03F9BF -> $0162                CANRXIDR2       EQU     $0162
00F9BF 03F9BF -> $0163                CANRXIDR3       EQU     $0163
00F9BF 03F9BF -> $0164                CANRXDSR0       EQU     $0164
00F9BF 03F9BF -> $0165                CANRXDSR1       EQU     $0165
00F9BF 03F9BF -> $0166                CANRXDSR2       EQU     $0166
00F9BF 03F9BF -> $0167                CANRXDSR3       EQU     $0167
00F9BF 03F9BF -> $0168                CANRXDSR4       EQU     $0168
00F9BF 03F9BF -> $0169                CANRXDSR5       EQU     $0169
00F9BF 03F9BF -> $016A                CANRXDSR6       EQU     $016A
00F9BF 03F9BF -> $016B                CANRXDSR7       EQU     $016B
00F9BF 03F9BF -> $016C                CANRXDLR        EQU     $016C
                                      ;$016D reserved
00F9BF 03F9BF -> $016E                CANRTSRH        EQU     $016E
00F9BF 03F9BF -> $016F                CANRTSRL        EQU     $016F
00F9BF 03F9BF -> $0170                CANTXIDR0       EQU     $0170
00F9BF 03F9BF -> $0171                CANTXIDR1       EQU     $0171
00F9BF 03F9BF -> $0172                CANTXIDR2       EQU     $0172
00F9BF 03F9BF -> $0173                CANTXIDR3       EQU     $0173
00F9BF 03F9BF -> $0174                CANTXDSR0       EQU     $0174
00F9BF 03F9BF -> $0175                CANTXDSR1       EQU     $0175
00F9BF 03F9BF -> $0176                CANTXDSR2       EQU     $0176
00F9BF 03F9BF -> $0177                CANTXDSR3       EQU     $0177
00F9BF 03F9BF -> $0178                CANTXDSR4       EQU     $0178
00F9BF 03F9BF -> $0179                CANTXDSR5       EQU     $0179
00F9BF 03F9BF -> $017A                CANTXDSR6       EQU     $017A
00F9BF 03F9BF -> $017B                CANTXDSR7       EQU     $017B
00F9BF 03F9BF -> $017C                CANTXDLR        EQU     $017C
00F9BF 03F9BF -> $017D                CANTXTBPR       EQU     $017D
00F9BF 03F9BF -> $017E                CANTXTSRH       EQU     $017E
00F9BF 03F9BF -> $017F                CANTXTSRL       EQU     $017F
                                      ;$0180 to $023F reserved
00F9BF 03F9BF -> $0240                PTT             EQU     $0240
00F9BF 03F9BF -> $0080                PTT7            EQU     $80
00F9BF 03F9BF -> $0040                PTT6            EQU     $40
00F9BF 03F9BF -> $0020                PTT5            EQU     $20
00F9BF 03F9BF -> $0010                PTT4            EQU     $10
00F9BF 03F9BF -> $0008                PTT3            EQU     $08
00F9BF 03F9BF -> $0004                PTT2            EQU     $04
00F9BF 03F9BF -> $0002                PTT1            EQU     $02
00F9BF 03F9BF -> $0001                PTT0            EQU     $01
00F9BF 03F9BF -> $0080                PT7             EQU     $80
00F9BF 03F9BF -> $0040                PT6             EQU     $40
00F9BF 03F9BF -> $0020                PT5             EQU     $20
00F9BF 03F9BF -> $0010                PT4             EQU     $10
00F9BF 03F9BF -> $0008                PT3             EQU     $08
00F9BF 03F9BF -> $0004                PT2             EQU     $04
00F9BF 03F9BF -> $0002                PT1             EQU     $02
00F9BF 03F9BF -> $0001                PT0             EQU     $01
00F9BF 03F9BF -> $0241                PTIT            EQU     $0241
00F9BF 03F9BF -> $0080                PTIT7           EQU     $80
00F9BF 03F9BF -> $0040                PTIT6           EQU     $40
00F9BF 03F9BF -> $0020                PTIT5           EQU     $20
00F9BF 03F9BF -> $0010                PTIT4           EQU     $10
00F9BF 03F9BF -> $0008                PTIT3           EQU     $08
00F9BF 03F9BF -> $0004                PTIT2           EQU     $04
00F9BF 03F9BF -> $0002                PTIT1           EQU     $02
00F9BF 03F9BF -> $0001                PTIT0           EQU     $01
00F9BF 03F9BF -> $0242                DDRT            EQU     $0242
00F9BF 03F9BF -> $0080                DDRT7           EQU     $80
00F9BF 03F9BF -> $0040                DDRT6           EQU     $40
00F9BF 03F9BF -> $0020                DDRT5           EQU     $20
00F9BF 03F9BF -> $0010                DDRT4           EQU     $10
00F9BF 03F9BF -> $0008                DDRT3           EQU     $08
00F9BF 03F9BF -> $0004                DDRT2           EQU     $04
00F9BF 03F9BF -> $0002                DDRT1           EQU     $02
00F9BF 03F9BF -> $0001                DDRT0           EQU     $01
                                      ;$0243 reserved
00F9BF 03F9BF -> $0244                PERT            EQU     $0244
00F9BF 03F9BF -> $0080                PERT7           EQU     $80
00F9BF 03F9BF -> $0040                PERT6           EQU     $40
00F9BF 03F9BF -> $0020                PERT5           EQU     $20
00F9BF 03F9BF -> $0010                PERT4           EQU     $10
00F9BF 03F9BF -> $0008                PERT3           EQU     $08
00F9BF 03F9BF -> $0004                PERT2           EQU     $04
00F9BF 03F9BF -> $0002                PERT1           EQU     $02
00F9BF 03F9BF -> $0001                PERT0           EQU     $01
00F9BF 03F9BF -> $0245                PPST            EQU     $0245
00F9BF 03F9BF -> $0080                PPST7           EQU     $80
00F9BF 03F9BF -> $0040                PPST6           EQU     $40
00F9BF 03F9BF -> $0020                PPST5           EQU     $20
00F9BF 03F9BF -> $0010                PPST4           EQU     $10
00F9BF 03F9BF -> $0008                PPST3           EQU     $08
00F9BF 03F9BF -> $0004                PPST2           EQU     $04
00F9BF 03F9BF -> $0002                PPST1           EQU     $02
00F9BF 03F9BF -> $0001                PPST0           EQU     $01
                                      ;$0246 to 247 reserved
00F9BF 03F9BF -> $0248                PTS             EQU     $0248
00F9BF 03F9BF -> $0080                PTS7            EQU     $80
00F9BF 03F9BF -> $0040                PTS6            EQU     $40
00F9BF 03F9BF -> $0020                PTS5            EQU     $20
00F9BF 03F9BF -> $0010                PTS4            EQU     $10
00F9BF 03F9BF -> $0008                PTS3            EQU     $08
00F9BF 03F9BF -> $0004                PTS2            EQU     $04
00F9BF 03F9BF -> $0002                PTS1            EQU     $02
00F9BF 03F9BF -> $0001                PTS0            EQU     $01
00F9BF 03F9BF -> $0080                PS7             EQU     $80
00F9BF 03F9BF -> $0040                PS6             EQU     $40
00F9BF 03F9BF -> $0020                PS5             EQU     $20
00F9BF 03F9BF -> $0010                PS4             EQU     $10
00F9BF 03F9BF -> $0008                PS3             EQU     $08
00F9BF 03F9BF -> $0004                PS2             EQU     $04
00F9BF 03F9BF -> $0002                PS1             EQU     $02
00F9BF 03F9BF -> $0001                PS0             EQU     $01
00F9BF 03F9BF -> $0249                PTIS            EQU     $0249
00F9BF 03F9BF -> $0080                PTIS7           EQU     $80
00F9BF 03F9BF -> $0040                PTIS6           EQU     $40
00F9BF 03F9BF -> $0020                PTIS5           EQU     $20
00F9BF 03F9BF -> $0010                PTIS4           EQU     $10
00F9BF 03F9BF -> $0008                PTIS3           EQU     $08
00F9BF 03F9BF -> $0004                PTIS2           EQU     $04
00F9BF 03F9BF -> $0002                PTIS1           EQU     $02
00F9BF 03F9BF -> $0001                PTIS0           EQU     $01
00F9BF 03F9BF -> $024A                DDRS            EQU     $024A
00F9BF 03F9BF -> $0080                DDRS7           EQU     $80
00F9BF 03F9BF -> $0040                DDRS6           EQU     $40
00F9BF 03F9BF -> $0020                DDRS5           EQU     $20
00F9BF 03F9BF -> $0010                DDRS4           EQU     $10
00F9BF 03F9BF -> $0008                DDRS3           EQU     $08
00F9BF 03F9BF -> $0004                DDRS2           EQU     $04
00F9BF 03F9BF -> $0002                DDRS1           EQU     $02
00F9BF 03F9BF -> $0001                DDRS0           EQU     $01
                                      ;$024B reserved
00F9BF 03F9BF -> $024C                PERS            EQU     $024C
00F9BF 03F9BF -> $0080                PERS7           EQU     $80
00F9BF 03F9BF -> $0040                PERS6           EQU     $40
00F9BF 03F9BF -> $0020                PERS5           EQU     $20
00F9BF 03F9BF -> $0010                PERS4           EQU     $10
00F9BF 03F9BF -> $0008                PERS3           EQU     $08
00F9BF 03F9BF -> $0004                PERS2           EQU     $04
00F9BF 03F9BF -> $0002                PERS1           EQU     $02
00F9BF 03F9BF -> $0001                PERS0           EQU     $01
00F9BF 03F9BF -> $024D                PPSS            EQU     $024D
00F9BF 03F9BF -> $0080                PPSS7           EQU     $80
00F9BF 03F9BF -> $0040                PPSS6           EQU     $40
00F9BF 03F9BF -> $0020                PPSS5           EQU     $20
00F9BF 03F9BF -> $0010                PPSS4           EQU     $10
00F9BF 03F9BF -> $0008                PPSS3           EQU     $08
00F9BF 03F9BF -> $0004                PPSS2           EQU     $04
00F9BF 03F9BF -> $0002                PPSS1           EQU     $02
00F9BF 03F9BF -> $0001                PPSS0           EQU     $01
00F9BF 03F9BF -> $024E                WOMS            EQU     $024E
00F9BF 03F9BF -> $0080                WOMS7           EQU     $80
00F9BF 03F9BF -> $0040                WOMS6           EQU     $40
00F9BF 03F9BF -> $0020                WOMS5           EQU     $20
00F9BF 03F9BF -> $0010                WOMS4           EQU     $10
00F9BF 03F9BF -> $0008                WOMS3           EQU     $08
00F9BF 03F9BF -> $0004                WOMS2           EQU     $04
00F9BF 03F9BF -> $0002                WOMS1           EQU     $02
00F9BF 03F9BF -> $0001                WOMS0           EQU     $01
00F9BF 03F9BF -> $024F                PRR0            EQU     $024F
00F9BF 03F9BF -> $0080                PRR0P3          EQU     $80
00F9BF 03F9BF -> $0040                PRR0P2          EQU     $40
00F9BF 03F9BF -> $0020                PRR0T31         EQU     $20
00F9BF 03F9BF -> $0010                PRR0T30         EQU     $10
00F9BF 03F9BF -> $0008                PRR0T21         EQU     $08
00F9BF 03F9BF -> $0004                PRR0T20         EQU     $04
00F9BF 03F9BF -> $0002                PRR0S1          EQU     $02
00F9BF 03F9BF -> $0001                PRR0S0          EQU     $01
00F9BF 03F9BF -> $0250                PTM             EQU     $0250
00F9BF 03F9BF -> $0008                PTM3            EQU     $08
00F9BF 03F9BF -> $0004                PTM2            EQU     $04
00F9BF 03F9BF -> $0002                PTM1            EQU     $02
00F9BF 03F9BF -> $0001                PTM0            EQU     $01
00F9BF 03F9BF -> $0008                PM3             EQU     $08
00F9BF 03F9BF -> $0004                PM2             EQU     $04
00F9BF 03F9BF -> $0002                PM1             EQU     $02
00F9BF 03F9BF -> $0001                PM0             EQU     $01
00F9BF 03F9BF -> $0251                PTIM            EQU     $0251
00F9BF 03F9BF -> $0008                PTIM3           EQU     $08
00F9BF 03F9BF -> $0004                PTIM2           EQU     $04
00F9BF 03F9BF -> $0002                PTIM1           EQU     $02
00F9BF 03F9BF -> $0001                PTIM0           EQU     $01
00F9BF 03F9BF -> $0252                DDRM            EQU     $0252
00F9BF 03F9BF -> $0008                DDRM3           EQU     $08
00F9BF 03F9BF -> $0004                DDRM2           EQU     $04
00F9BF 03F9BF -> $0002                DDRM1           EQU     $02
00F9BF 03F9BF -> $0001                DDRM0           EQU     $01
                                      ;$0253 reserved
00F9BF 03F9BF -> $0254                PERM            EQU     $0254
00F9BF 03F9BF -> $0008                PERM3           EQU     $08
00F9BF 03F9BF -> $0004                PERM2           EQU     $04
00F9BF 03F9BF -> $0002                PERM1           EQU     $02
00F9BF 03F9BF -> $0001                PERM0           EQU     $01
00F9BF 03F9BF -> $0255                PPSM            EQU     $0255
00F9BF 03F9BF -> $0008                PPSM3           EQU     $08
00F9BF 03F9BF -> $0004                PPSM2           EQU     $04
00F9BF 03F9BF -> $0002                PPSM1           EQU     $02
00F9BF 03F9BF -> $0001                PPSM0           EQU     $01
00F9BF 03F9BF -> $0256                WOMM            EQU     $0256
00F9BF 03F9BF -> $0008                WOMM3           EQU     $08
00F9BF 03F9BF -> $0004                WOMM2           EQU     $04
00F9BF 03F9BF -> $0002                WOMM1           EQU     $02
00F9BF 03F9BF -> $0001                WOMM0           EQU     $01
00F9BF 03F9BF -> $0257                PKGCR           EQU     $0257
00F9BF 03F9BF -> $0080                APICLKS7        EQU     $80
00F9BF 03F9BF -> $0004                PKGCR2          EQU     $04
00F9BF 03F9BF -> $0002                PKGCR1          EQU     $02
00F9BF 03F9BF -> $0001                PKGCR0          EQU     $01
00F9BF 03F9BF -> $0258                PTP             EQU     $0258
00F9BF 03F9BF -> $0080                PTP7            EQU     $80
00F9BF 03F9BF -> $0040                PTP6            EQU     $40
00F9BF 03F9BF -> $0020                PTP5            EQU     $20
00F9BF 03F9BF -> $0010                PTP4            EQU     $10
00F9BF 03F9BF -> $0008                PTP3            EQU     $08
00F9BF 03F9BF -> $0004                PTP2            EQU     $04
00F9BF 03F9BF -> $0002                PTP1            EQU     $02
00F9BF 03F9BF -> $0001                PTP0            EQU     $01
00F9BF 03F9BF -> $0080                PP7             EQU     $80
00F9BF 03F9BF -> $0040                PP6             EQU     $40
00F9BF 03F9BF -> $0020                PP5             EQU     $20
00F9BF 03F9BF -> $0010                PP4             EQU     $10
00F9BF 03F9BF -> $0008                PP3             EQU     $08
00F9BF 03F9BF -> $0004                PP2             EQU     $04
00F9BF 03F9BF -> $0002                PP1             EQU     $02
00F9BF 03F9BF -> $0001                PP0             EQU     $01
00F9BF 03F9BF -> $0259                PTIP            EQU     $0259
00F9BF 03F9BF -> $0080                PTIP7           EQU     $80
00F9BF 03F9BF -> $0040                PTIP6           EQU     $40
00F9BF 03F9BF -> $0020                PTIP5           EQU     $20
00F9BF 03F9BF -> $0010                PTIP4           EQU     $10
00F9BF 03F9BF -> $0008                PTIP3           EQU     $08
00F9BF 03F9BF -> $0004                PTIP2           EQU     $04
00F9BF 03F9BF -> $0002                PTIP1           EQU     $02
00F9BF 03F9BF -> $0001                PTIP0           EQU     $01
00F9BF 03F9BF -> $025A                DDRP            EQU     $025A
00F9BF 03F9BF -> $0080                DDRP7           EQU     $80
00F9BF 03F9BF -> $0040                DDRP6           EQU     $40
00F9BF 03F9BF -> $0020                DDRP5           EQU     $20
00F9BF 03F9BF -> $0010                DDRP4           EQU     $10
00F9BF 03F9BF -> $0008                DDRP3           EQU     $08
00F9BF 03F9BF -> $0004                DDRP2           EQU     $04
00F9BF 03F9BF -> $0002                DDRP1           EQU     $02
00F9BF 03F9BF -> $0001                DDRP0           EQU     $01
                                      ;$025B reserved
00F9BF 03F9BF -> $025C                PERP            EQU     $025C
00F9BF 03F9BF -> $0080                PERP7           EQU     $80
00F9BF 03F9BF -> $0040                PERP6           EQU     $40
00F9BF 03F9BF -> $0020                PERP5           EQU     $20
00F9BF 03F9BF -> $0010                PERP4           EQU     $10
00F9BF 03F9BF -> $0008                PERP3           EQU     $08
00F9BF 03F9BF -> $0004                PERP2           EQU     $04
00F9BF 03F9BF -> $0002                PERP1           EQU     $02
00F9BF 03F9BF -> $0001                PERP0           EQU     $01
00F9BF 03F9BF -> $025D                PPSP            EQU     $025D
00F9BF 03F9BF -> $0080                PPSP7           EQU     $80
00F9BF 03F9BF -> $0040                PPSP6           EQU     $40
00F9BF 03F9BF -> $0020                PPSP5           EQU     $20
00F9BF 03F9BF -> $0010                PPSP4           EQU     $10
00F9BF 03F9BF -> $0008                PPSP3           EQU     $08
00F9BF 03F9BF -> $0004                PPSP2           EQU     $04
00F9BF 03F9BF -> $0002                PPSP1           EQU     $02
00F9BF 03F9BF -> $0001                PPSP0           EQU     $01
00F9BF 03F9BF -> $025E                PIEP            EQU     $025E
00F9BF 03F9BF -> $0080                PIEP7           EQU     $80
00F9BF 03F9BF -> $0040                PIEP6           EQU     $40
00F9BF 03F9BF -> $0020                PIEP5           EQU     $20
00F9BF 03F9BF -> $0010                PIEP4           EQU     $10
00F9BF 03F9BF -> $0008                PIEP3           EQU     $08
00F9BF 03F9BF -> $0004                PIEP2           EQU     $04
00F9BF 03F9BF -> $0002                PIEP1           EQU     $02
00F9BF 03F9BF -> $0001                PIEP0           EQU     $01
00F9BF 03F9BF -> $025F                PIFP            EQU     $025F
00F9BF 03F9BF -> $0080                PIFP7           EQU     $80
00F9BF 03F9BF -> $0040                PIFP6           EQU     $40
00F9BF 03F9BF -> $0020                PIFP5           EQU     $20
00F9BF 03F9BF -> $0010                PIFP4           EQU     $10
00F9BF 03F9BF -> $0008                PIFP3           EQU     $08
00F9BF 03F9BF -> $0004                PIFP2           EQU     $04
00F9BF 03F9BF -> $0002                PIFP1           EQU     $02
00F9BF 03F9BF -> $0001                PIFP0           EQU     $01
00F9BF 03F9BF -> $0260                ACMPC           EQU     $260
00F9BF 03F9BF -> $0080                ACIE            EQU     $80
00F9BF 03F9BF -> $0040                ACOPE           EQU     $40
00F9BF 03F9BF -> $0020                ACICE           EQU     $20
00F9BF 03F9BF -> $0008                ACMOD1          EQU     $08
00F9BF 03F9BF -> $0004                ACMOD0          EQU     $04
00F9BF 03F9BF -> $0001                ACE             EQU     $01
00F9BF 03F9BF -> $0261                ACMPS           EQU     $261
00F9BF 03F9BF -> $0080                ACIF            EQU     $80
00F9BF 03F9BF -> $0040                ACO             EQU     $40
                                      ;$0262 to $0267 reserved
00F9BF 03F9BF -> $0268                PTJ             EQU     $0268
00F9BF 03F9BF -> $0080                PTJ7            EQU     $80
00F9BF 03F9BF -> $0040                PTJ6            EQU     $40
00F9BF 03F9BF -> $0020                PTJ5            EQU     $20
00F9BF 03F9BF -> $0010                PTJ4            EQU     $10
00F9BF 03F9BF -> $0008                PTJ3            EQU     $08
00F9BF 03F9BF -> $0004                PTJ2            EQU     $04
00F9BF 03F9BF -> $0002                PTJ1            EQU     $02
00F9BF 03F9BF -> $0001                PTJ0            EQU     $01
00F9BF 03F9BF -> $0080                PJ7             EQU     $80
00F9BF 03F9BF -> $0040                PJ6             EQU     $40
00F9BF 03F9BF -> $0020                PJ5             EQU     $20
00F9BF 03F9BF -> $0010                PJ4             EQU     $10
00F9BF 03F9BF -> $0008                PJ3             EQU     $08
00F9BF 03F9BF -> $0004                PJ2             EQU     $04
00F9BF 03F9BF -> $0002                PJ1             EQU     $02
00F9BF 03F9BF -> $0001                PJ0             EQU     $01
00F9BF 03F9BF -> $0269                PTIJ            EQU     $0269
00F9BF 03F9BF -> $0080                PTIJ7           EQU     $80
00F9BF 03F9BF -> $0040                PTIJ6           EQU     $40
00F9BF 03F9BF -> $0020                PTIJ5           EQU     $20
00F9BF 03F9BF -> $0010                PTIJ4           EQU     $10
00F9BF 03F9BF -> $0008                PTIJ3           EQU     $08
00F9BF 03F9BF -> $0004                PTIJ2           EQU     $04
00F9BF 03F9BF -> $0002                PTIJ1           EQU     $02
00F9BF 03F9BF -> $0001                PTIJ0           EQU     $01
00F9BF 03F9BF -> $026A                DDRJ            EQU     $026A
00F9BF 03F9BF -> $0080                DDRJ7           EQU     $80
00F9BF 03F9BF -> $0040                DDRJ6           EQU     $40
00F9BF 03F9BF -> $0020                DDRJ5           EQU     $20
00F9BF 03F9BF -> $0010                DDRJ4           EQU     $10
00F9BF 03F9BF -> $0008                DDRJ3           EQU     $08
00F9BF 03F9BF -> $0004                DDRJ2           EQU     $04
00F9BF 03F9BF -> $0002                DDRJ1           EQU     $02
00F9BF 03F9BF -> $0001                DDRJ0           EQU     $01
                                      ;$026B reserved
00F9BF 03F9BF -> $026C                PERJ            EQU     $026C
00F9BF 03F9BF -> $0080                PERJ7           EQU     $80
00F9BF 03F9BF -> $0040                PERJ6           EQU     $40
00F9BF 03F9BF -> $0020                PERJ5           EQU     $20
00F9BF 03F9BF -> $0010                PERJ4           EQU     $10
00F9BF 03F9BF -> $0008                PERJ3           EQU     $08
00F9BF 03F9BF -> $0004                PERJ2           EQU     $04
00F9BF 03F9BF -> $0002                PERJ1           EQU     $02
00F9BF 03F9BF -> $0001                PERJ0           EQU     $01
00F9BF 03F9BF -> $026D                PPSJ            EQU     $026D
00F9BF 03F9BF -> $0080                PPSJ7           EQU     $80
00F9BF 03F9BF -> $0040                PPSJ6           EQU     $40
00F9BF 03F9BF -> $0020                PPSJ5           EQU     $20
00F9BF 03F9BF -> $0010                PPSJ4           EQU     $10
00F9BF 03F9BF -> $0008                PPSJ3           EQU     $08
00F9BF 03F9BF -> $0004                PPSJ2           EQU     $04
00F9BF 03F9BF -> $0002                PPSJ1           EQU     $02
00F9BF 03F9BF -> $0001                PPSJ0           EQU     $01
00F9BF 03F9BF -> $026E                PIEJ            EQU     $026E
00F9BF 03F9BF -> $0080                PIEJ7           EQU     $80
00F9BF 03F9BF -> $0040                PIEJ6           EQU     $40
00F9BF 03F9BF -> $0020                PIEJ5           EQU     $20
00F9BF 03F9BF -> $0010                PIEJ4           EQU     $10
00F9BF 03F9BF -> $0008                PIEJ3           EQU     $08
00F9BF 03F9BF -> $0004                PIEJ2           EQU     $04
00F9BF 03F9BF -> $0002                PIEJ1           EQU     $02
00F9BF 03F9BF -> $0001                PIEJ0           EQU     $01
00F9BF 03F9BF -> $026F                PIFJ            EQU     $026F
00F9BF 03F9BF -> $0080                PIFJ7           EQU     $80
00F9BF 03F9BF -> $0040                PIFJ6           EQU     $40
00F9BF 03F9BF -> $0020                PIFJ5           EQU     $20
00F9BF 03F9BF -> $0010                PIFJ4           EQU     $10
00F9BF 03F9BF -> $0008                PIFJ3           EQU     $08
00F9BF 03F9BF -> $0004                PIFJ2           EQU     $04
00F9BF 03F9BF -> $0002                PIFJ1           EQU     $02
00F9BF 03F9BF -> $0001                PIFJ0           EQU     $01
00F9BF 03F9BF -> $0270                PT0AD           EQU     $0270
00F9BF 03F9BF -> $0080                PT0AD7          EQU     $80
00F9BF 03F9BF -> $0040                PT0AD6          EQU     $40
00F9BF 03F9BF -> $0020                PT0AD5          EQU     $20
00F9BF 03F9BF -> $0010                PT0AD4          EQU     $10
00F9BF 03F9BF -> $0008                PT0AD3          EQU     $08
00F9BF 03F9BF -> $0004                PT0AD2          EQU     $04
00F9BF 03F9BF -> $0002                PT0AD1          EQU     $02
00F9BF 03F9BF -> $0001                PT0AD0          EQU     $01
00F9BF 03F9BF -> $0271                PT1AD           EQU     $0271
00F9BF 03F9BF -> $0080                PT1AD7          EQU     $80
00F9BF 03F9BF -> $0040                PT1AD6          EQU     $40
00F9BF 03F9BF -> $0020                PT1AD5          EQU     $20
00F9BF 03F9BF -> $0010                PT1AD4          EQU     $10
00F9BF 03F9BF -> $0008                PT1AD3          EQU     $08
00F9BF 03F9BF -> $0004                PT1AD2          EQU     $04
00F9BF 03F9BF -> $0002                PT1AD1          EQU     $02
00F9BF 03F9BF -> $0001                PT1AD0          EQU     $01
00F9BF 03F9BF -> $0272                PTI0AD          EQU     $0272
00F9BF 03F9BF -> $0080                PTI0AD7         EQU     $80
00F9BF 03F9BF -> $0040                PTI0AD6         EQU     $40
00F9BF 03F9BF -> $0020                PTI0AD5         EQU     $20
00F9BF 03F9BF -> $0010                PTI0AD4         EQU     $10
00F9BF 03F9BF -> $0008                PTI0AD3         EQU     $08
00F9BF 03F9BF -> $0004                PTI0AD2         EQU     $04
00F9BF 03F9BF -> $0002                PTI0AD1         EQU     $02
00F9BF 03F9BF -> $0001                PTI0AD0         EQU     $01
00F9BF 03F9BF -> $0273                PTI1AD          EQU     $0273
00F9BF 03F9BF -> $0080                PTI1AD7         EQU     $80
00F9BF 03F9BF -> $0040                PTI1AD6         EQU     $40
00F9BF 03F9BF -> $0020                PTI1AD5         EQU     $20
00F9BF 03F9BF -> $0010                PTI1AD4         EQU     $10
00F9BF 03F9BF -> $0008                PTI1AD3         EQU     $08
00F9BF 03F9BF -> $0004                PTI1AD2         EQU     $04
00F9BF 03F9BF -> $0002                PTI1AD1         EQU     $02
00F9BF 03F9BF -> $0001                PTI1AD0         EQU     $01
00F9BF 03F9BF -> $0274                DDR0AD          EQU     $0274
00F9BF 03F9BF -> $0080                DDR0AD7         EQU     $80
00F9BF 03F9BF -> $0040                DDR0AD6         EQU     $40
00F9BF 03F9BF -> $0020                DDR0AD5         EQU     $20
00F9BF 03F9BF -> $0010                DDR0AD4         EQU     $10
00F9BF 03F9BF -> $0008                DDR0AD3         EQU     $08
00F9BF 03F9BF -> $0004                DDR0AD2         EQU     $04
00F9BF 03F9BF -> $0002                DDR0AD1         EQU     $02
00F9BF 03F9BF -> $0001                DDR0AD0         EQU     $01
00F9BF 03F9BF -> $0275                DDR1AD          EQU     $0275
00F9BF 03F9BF -> $0080                DDR1AD7         EQU     $80
00F9BF 03F9BF -> $0040                DDR1AD6         EQU     $40
00F9BF 03F9BF -> $0020                DDR1AD5         EQU     $20
00F9BF 03F9BF -> $0010                DDR1AD4         EQU     $10
00F9BF 03F9BF -> $0008                DDR1AD3         EQU     $08
00F9BF 03F9BF -> $0004                DDR1AD2         EQU     $04
00F9BF 03F9BF -> $0002                DDR1AD1         EQU     $02
00F9BF 03F9BF -> $0001                DDR1AD0         EQU     $01
00F9BF 03F9BF -> $0276                RVACTL          EQU     $0276
00F9BF 03F9BF -> $0001                RVAON           EQU     $01
00F9BF 03F9BF -> $0277                PRR1            EQU     $0277
00F9BF 03F9BF -> $0001                PRR1AN          EQU     $01
00F9BF 03F9BF -> $0278                PER0AD          EQU     $0278
00F9BF 03F9BF -> $0080                PER0AD7         EQU     $80
00F9BF 03F9BF -> $0040                PER0AD6         EQU     $40
00F9BF 03F9BF -> $0020                PER0AD5         EQU     $20
00F9BF 03F9BF -> $0010                PER0AD4         EQU     $10
00F9BF 03F9BF -> $0008                PER0AD3         EQU     $08
00F9BF 03F9BF -> $0004                PER0AD2         EQU     $04
00F9BF 03F9BF -> $0002                PER0AD1         EQU     $02
00F9BF 03F9BF -> $0001                PER0AD0         EQU     $01
00F9BF 03F9BF -> $0279                PER1AD          EQU     $0279
00F9BF 03F9BF -> $0080                PER1AD7         EQU     $80
00F9BF 03F9BF -> $0040                PER1AD6         EQU     $40
00F9BF 03F9BF -> $0020                PER1AD5         EQU     $20
00F9BF 03F9BF -> $0010                PER1AD4         EQU     $10
00F9BF 03F9BF -> $0008                PER1AD3         EQU     $08
00F9BF 03F9BF -> $0004                PER1AD2         EQU     $04
00F9BF 03F9BF -> $0002                PER1AD1         EQU     $02
00F9BF 03F9BF -> $0001                PER1AD0         EQU     $01
00F9BF 03F9BF -> $027A                PPS0AD          EQU     $027A
00F9BF 03F9BF -> $0080                PPS0AD7         EQU     $80
00F9BF 03F9BF -> $0040                PPS0AD6         EQU     $40
00F9BF 03F9BF -> $0020                PPS0AD5         EQU     $20
00F9BF 03F9BF -> $0010                PPS0AD4         EQU     $10
00F9BF 03F9BF -> $0008                PPS0AD3         EQU     $08
00F9BF 03F9BF -> $0004                PPS0AD2         EQU     $04
00F9BF 03F9BF -> $0002                PPS0AD1         EQU     $02
00F9BF 03F9BF -> $0001                PPS0AD0         EQU     $01
00F9BF 03F9BF -> $027B                PPS1AD          EQU     $027B
00F9BF 03F9BF -> $0080                PPS1AD7         EQU     $80
00F9BF 03F9BF -> $0040                PPS1AD6         EQU     $40
00F9BF 03F9BF -> $0020                PPS1AD5         EQU     $20
00F9BF 03F9BF -> $0010                PPS1AD4         EQU     $10
00F9BF 03F9BF -> $0008                PPS1AD3         EQU     $08
00F9BF 03F9BF -> $0004                PPS1AD2         EQU     $04
00F9BF 03F9BF -> $0002                PPS1AD1         EQU     $02
00F9BF 03F9BF -> $0001                PPS1AD0         EQU     $01
00F9BF 03F9BF -> $027C                PIE0AD          EQU     $027C
00F9BF 03F9BF -> $0080                PIE0AD7         EQU     $80
00F9BF 03F9BF -> $0040                PIE0AD6         EQU     $40
00F9BF 03F9BF -> $0020                PIE0AD5         EQU     $20
00F9BF 03F9BF -> $0010                PIE0AD4         EQU     $10
00F9BF 03F9BF -> $0008                PIE0AD3         EQU     $08
00F9BF 03F9BF -> $0004                PIE0AD2         EQU     $04
00F9BF 03F9BF -> $0002                PIE0AD1         EQU     $02
00F9BF 03F9BF -> $0001                PIE0AD0         EQU     $01
00F9BF 03F9BF -> $027D                PIE1AD          EQU     $027D
00F9BF 03F9BF -> $0080                PIE1AD7         EQU     $80
00F9BF 03F9BF -> $0040                PIE1AD6         EQU     $40
00F9BF 03F9BF -> $0020                PIE1AD5         EQU     $20
00F9BF 03F9BF -> $0010                PIE1AD4         EQU     $10
00F9BF 03F9BF -> $0008                PIE1AD3         EQU     $08
00F9BF 03F9BF -> $0004                PIE1AD2         EQU     $04
00F9BF 03F9BF -> $0002                PIE1AD1         EQU     $02
00F9BF 03F9BF -> $0001                PIE1AD0         EQU     $01
00F9BF 03F9BF -> $027E                PIF0AD          EQU     $027E
00F9BF 03F9BF -> $0080                PIF0AD7         EQU     $80
00F9BF 03F9BF -> $0040                PIF0AD6         EQU     $40
00F9BF 03F9BF -> $0020                PIF0AD5         EQU     $20
00F9BF 03F9BF -> $0010                PIF0AD4         EQU     $10
00F9BF 03F9BF -> $0008                PIF0AD3         EQU     $08
00F9BF 03F9BF -> $0004                PIF0AD2         EQU     $04
00F9BF 03F9BF -> $0002                PIF0AD1         EQU     $02
00F9BF 03F9BF -> $0001                PIF0AD0         EQU     $01
00F9BF 03F9BF -> $027F                PIF1AD          EQU     $027F
00F9BF 03F9BF -> $0080                PIF1AD7         EQU     $80
00F9BF 03F9BF -> $0040                PIF1AD6         EQU     $40
00F9BF 03F9BF -> $0020                PIF1AD5         EQU     $20
00F9BF 03F9BF -> $0010                PIF1AD4         EQU     $10
00F9BF 03F9BF -> $0008                PIF1AD3         EQU     $08
00F9BF 03F9BF -> $0004                PIF1AD2         EQU     $04
00F9BF 03F9BF -> $0002                PIF1AD1         EQU     $02
00F9BF 03F9BF -> $0001                PIF1AD0         EQU     $01
                                      ;$0280 to $02F0 reserved
00F9BF 03F9BF -> $02F1                CPMULVCTL       EQU     $02F1
00F9BF 03F9BF -> $0004                LVDS            EQU     $04
00F9BF 03F9BF -> $0002                LVIE            EQU     $02
00F9BF 03F9BF -> $0001                LVIF            EQU     $01
00F9BF 03F9BF -> $02F2                CPMUAPICTL      EQU     $02F2
00F9BF 03F9BF -> $0080                APICLK          EQU     $80
00F9BF 03F9BF -> $0010                APIES           EQU     $10
00F9BF 03F9BF -> $0008                APIEA           EQU     $08
00F9BF 03F9BF -> $0004                APIFE           EQU     $04
00F9BF 03F9BF -> $0002                APIE            EQU     $02
00F9BF 03F9BF -> $0001                APIF            EQU     $01
00F9BF 03F9BF -> $02F3                CPMUAPITR       EQU     $02F3
00F9BF 03F9BF -> $0080                APITR5          EQU     $80
00F9BF 03F9BF -> $0040                APITR4          EQU     $40
00F9BF 03F9BF -> $0020                APITR3          EQU     $20
00F9BF 03F9BF -> $0010                APITR2          EQU     $10
00F9BF 03F9BF -> $0008                APITR1          EQU     $08
00F9BF 03F9BF -> $0004                APITR0          EQU     $04
00F9BF 03F9BF -> $02F4                CPMUAPIRH       EQU     $02F4
00F9BF 03F9BF -> $0080                APIR15          EQU     $80
00F9BF 03F9BF -> $0040                APIR14          EQU     $40
00F9BF 03F9BF -> $0020                APIR13          EQU     $20
00F9BF 03F9BF -> $0010                APIR12          EQU     $10
00F9BF 03F9BF -> $0008                APIR11          EQU     $08
00F9BF 03F9BF -> $0004                APIR10          EQU     $04
00F9BF 03F9BF -> $0002                APIR9           EQU     $02
00F9BF 03F9BF -> $0001                APIR8           EQU     $01
00F9BF 03F9BF -> $02F5                CPMUAPIRL       EQU     $02F5
00F9BF 03F9BF -> $0080                APIR7           EQU     $80
00F9BF 03F9BF -> $0040                APIR6           EQU     $40
00F9BF 03F9BF -> $0020                APIR5           EQU     $20
00F9BF 03F9BF -> $0010                APIR4           EQU     $10
00F9BF 03F9BF -> $0008                APIR3           EQU     $08
00F9BF 03F9BF -> $0004                APIR2           EQU     $04
00F9BF 03F9BF -> $0002                APIR1           EQU     $02
00F9BF 03F9BF -> $0001                APIR0           EQU     $01
                                      ;$02F6 to $02F7 reserved
00F9BF 03F9BF -> $02F8                CPMUIRCTRIMH    EQU     $02F8
00F9BF 03F9BF -> $0080                TCTRIM3         EQU     $80
00F9BF 03F9BF -> $0040                TCTRIM2         EQU     $40
00F9BF 03F9BF -> $0020                TCTRIM1         EQU     $20
00F9BF 03F9BF -> $0010                TCTRIM0         EQU     $10
00F9BF 03F9BF -> $0002                IRCTRIM9        EQU     $02
00F9BF 03F9BF -> $0001                IRCTRIM8        EQU     $01
00F9BF 03F9BF -> $02F9                CPMUIRCTRIML    EQU     $02F9
00F9BF 03F9BF -> $0080                IRCTRIM7        EQU     $80
00F9BF 03F9BF -> $0040                IRCTRIM6        EQU     $40
00F9BF 03F9BF -> $0020                IRCTRIM5        EQU     $20
00F9BF 03F9BF -> $0010                IRCTRIM4        EQU     $10
00F9BF 03F9BF -> $0008                IRCTRIM3        EQU     $08
00F9BF 03F9BF -> $0004                IRCTRIM2        EQU     $04
00F9BF 03F9BF -> $0002                IRCTRIM1        EQU     $02
00F9BF 03F9BF -> $0001                IRCTRIM0        EQU     $01
00F9BF 03F9BF -> $02FA                CPMUOSC         EQU     $02FA
00F9BF 03F9BF -> $0080                OSCE            EQU     $80
00F9BF 03F9BF -> $0020                OSCPINS_EN      EQU     $20
00F9BF 03F9BF -> $02FB                CPMUPROT        EQU     $02FB
00F9BF 03F9BF -> $0001                PROT            EQU     $01
                                      ;$02FC to $03BF reserved
00F9BF 03F9BF -> $03C0                DAC0CTL         EQU     $03C0
00F9BF 03F9BF -> $0080                FVR             EQU     $80
00F9BF 03F9BF -> $0040                DRIVE           EQU     $40
00F9BF 03F9BF -> $0004                MODE2           EQU     $04
00F9BF 03F9BF -> $0002                MODE1           EQU     $02
00F9BF 03F9BF -> $0001                MODE0           EQU     $01
                                      ;$03C1 reserved
00F9BF 03F9BF -> $03C2                DAC0VOLTAGE     EQU     $03C2
00F9BF 03F9BF -> $0080                VOLTAGE7        EQU     $80
00F9BF 03F9BF -> $0040                VOLTAGE6        EQU     $40
00F9BF 03F9BF -> $0020                VOLTAGE5        EQU     $20
00F9BF 03F9BF -> $0010                VOLTAGE4        EQU     $10
00F9BF 03F9BF -> $0008                VOLTAGE3        EQU     $08
00F9BF 03F9BF -> $0004                VOLTAGE2        EQU     $04
00F9BF 03F9BF -> $0002                VOLTAGE1        EQU     $02
00F9BF 03F9BF -> $0001                VOLTAGE0        EQU     $01
                                      ;$03C3 to $03C7 reserved
00F9BF 03F9BF -> $03C8                DAC1CTL         EQU     $03C8
                                      ;FVR            EQU     $80
                                      ;DRIVE          EQU     $40
                                      ;MODE2          EQU     $04
                                      ;MODE1          EQU     $02
                                      ;MODE0          EQU     $01
                                      ;$03C9 reserved
00F9BF 03F9BF -> $03CA                DAC1VOLTAGE     EQU     $03CA
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (AriCalculator)                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module module performs all the necessary steps to initialize the    #
                                      ;#    device after each reset.                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                      S12G
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |    EEPROM   |
                                      ;                +-------------+ $0400+EEPROM_SIZE
                                      ;                |/////////////|
                                      ;                +-------------+ $4000-RAM_SIZE
                                      ;                |     RAM     |
                                      ;                +-------------+ $4000
                                      ;                |             |
                                      ;                |    Flash    |
                                      ;                |   Page D    |
                                      ;                |             |
                                      ;                +-------------+ $8000
                                      ;                |             |
                                      ;                |    Flash    |
                                      ;                |   Page E/   |
                                      ;                |   window    |
                                      ;                +-------------+ $C000
                                      ;                |             |
                                      ;                |    Code     |
                                      ;                |   Page F    |
                                      ;                |             |
                                      ;                +-------------+ $10000
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                      S12G
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $4000-RAM_SIZE
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $3F80
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $4000
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;MCU (S12G32, S12G64, S12G128, or S12G240)
                                      ;RAM or flash
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                                              ;Align to D-Bug12XZ programming granularity
00FF08 03FF08                                                 ORG     $FF08, $03FF08  ;unprotect
00FF08 03FF08 FF FF FF FF FF FF FF FF                         FILL    $FF, 8
                                                              ;Set within bootloader code
00FF0D 03FF0D                                                 ORG     $FF0D, $03FF0D  ;unprotect
00FF0D 03FF0D FF                                              DB      $FF
00FF0F 03FF0F                                                 ORG     $FF0F, $03FF0F  ;unsecure
00FF0F 03FF0F FE                                              DB      $FE
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Sizes:
00FF10 03FF10 -> $0400                MMAP_REG_SIZE           EQU      $0400  ;  1k
00FF10 03FF10 -> $1000                MMAP_EEPROM_SIZE        EQU      $1000  ;  4k
00FF10 03FF10 -> $2C00                MMAP_RAM_SIZE           EQU      $2C00  ; 11k
00FF10 03FF10 -> $3C000               MMAP_FLASH_SIZE         EQU     $3C000  ;240k
                                      ;# Memory Locations
00FF10 03FF10 -> $0000                MMAP_REG_START          EQU     $0000
00FF10 03FF10 -> $0400                MMAP_REG_END            EQU     $0400
00FF10 03FF10 -> $0400                MMAP_EEPROM_START       EQU     $0400
00FF10 03FF10 -> $1400                MMAP_EEPROM_END         EQU     $0400+MMAP_EEPROM_SIZE
00FF10 03FF10 -> $1400                MMAP_RAM_START          EQU     $4000-MMAP_RAM_SIZE
00FF10 03FF10 -> $4000                MMAP_RAM_END            EQU     $4000
00FF10 03FF10 -> $4000                MMAP_FLASH_START        EQU     $4000
00FF10 03FF10 -> $10000               MMAP_FLASH_END          EQU     $10000
                                      ;# Vector table
00FF10 03FF10 -> $FF80                VECTAB_START            EQU     $FF80
00FF10 03FF10 -> $3FF80               VECTAB_START_LIN        EQU     $3FF80
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001404 001404                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001404 001404 -> $1404                MMAP_VARS_END           EQU     *
001404 001404 -> $1404                MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E497 03E497                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
00E497 03E497 -> $E497                MMAP_CODE_END           EQU     *
00E497 03E497 -> $3E497               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F468 03F468                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
00F468 03F468 -> $F468                MMAP_TABS_END           EQU     *
00F468 03F468 -> $3F468               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (AriCalculator)                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    RESET   - Reset handler                                                  #
                                      ;#    KEYS    - Keypad controller                                              #
                                      ;#    VMON    - Voltage monitor                                                #
                                      ;#    SCI     - UART driver                                                    #
                                      ;#    DISP    - ST7565R display driver                                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 12, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;#        (based on the S12CBase vector table for the S12G-Mini-EVB)           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Point all unused ISRs to separate BGND instructions
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001404 001404                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001404 001404 -> $1404                VECTAB_VARS_END         EQU     *
001404 001404 -> $1404                VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E497 03E497                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
00E497 03E497 -> $E497                VECTAB_CODE_END         EQU     *
00E497 03E497 -> $3E497               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F468 03F468                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
00F468 03F468 00                      ISR_SPURIOUS            BGND                            ;vector base + $80
00F469 03F469 -> $EEFC                ISR_PAD                 EQU     KEYS_ISR_KWU            ;vector base + $82
00F469 03F469 -> $EAF1                ISR_ADCCOMP             EQU     VMON_ISR                ;vector base + $84
00F469 03F469 00                      ISR_RES86               BGND                            ;vector base + $86
00F46A 03F46A 00                      ISR_API                 BGND                            ;vector base + $88
00F46B 03F46B 00                      ISR_LVI                 BGND                            ;vector base + $8A
00F46C 03F46C 00                      ISR_RES8C               BGND                            ;vector base + $8C
00F46D 03F46D 00                      ISR_PORTP               BGND                            ;vector base + $8E
00F46E 03F46E 00                      ISR_RES90               BGND                            ;vector base + $90
00F46F 03F46F 00                      ISR_RES92               BGND                            ;vector base + $92
00F470 03F470 00                      ISR_RES94               BGND                            ;vector base + $94
00F471 03F471 00                      ISR_RES96               BGND                            ;vector base + $96
00F472 03F472 00                      ISR_RES98               BGND                            ;vector base + $98
00F473 03F473 00                      ISR_RES9A               BGND                            ;vector base + $9A
00F474 03F474 00                      ISR_RES9C               BGND                            ;vector base + $9C
00F475 03F475 00                      ISR_RES9E               BGND                            ;vector base + $9E
00F476 03F476 00                      ISR_RESA0               BGND                            ;vector base + $A0
00F477 03F477 00                      ISR_RESA2               BGND                            ;vector base + $A2
00F478 03F478 00                      ISR_RESA4               BGND                            ;vector base + $A4
00F479 03F479 00                      ISR_RESA6               BGND                            ;vector base + $A6
00F47A 03F47A 00                      ISR_RESA8               BGND                            ;vector base + $A8
00F47B 03F47B 00                      ISR_RESAA               BGND                            ;vector base + $AA
00F47C 03F47C 00                      ISR_RESAC               BGND                            ;vector base + $AC
00F47D 03F47D 00                      ISR_RESAE               BGND                            ;vector base + $AE
00F47E 03F47E 00                      ISR_CANTX               BGND                            ;vector base + $A0
00F47F 03F47F 00                      ISR_CANRX               BGND                            ;vector base + $B2
00F480 03F480 00                      ISR_CANERR              BGND                            ;vector base + $B4
00F481 03F481 00                      ISR_CANWUP              BGND                            ;vector base + $B6
00F482 03F482 00                      ISR_FLASH               BGND                            ;vector base + $B8
00F483 03F483 -> $ECE7                ISR_FLASHFLT            EQU     NVM_ISR_ECCERR          ;vector base + $BA
00F483 03F483 00                      ISR_SPI2                BGND                            ;vector base + $BC
00F484 03F484 00                      ISR_SPI1                BGND                            ;vector base + $BE
00F485 03F485 00                      ISR_RESC0               BGND                            ;vector base + $C0
00F486 03F486 00                      ISR_SCI2                BGND                            ;vector base + $C2
00F487 03F487 00                      ISR_RESC4               BGND                            ;vector base + $C4
00F488 03F488 00                      ISR_PLLLOCK             BGND                            ;vector base + $C6
00F489 03F489 00                      ISR_OSCSTAT             BGND                            ;vector base + $C8
00F48A 03F48A 00                      ISR_RESCA               BGND                            ;vector base + $CA
00F48B 03F48B 00                      ISR_ACMP                BGND                            ;vector base + $CC
00F48C 03F48C 00                      ISR_PORTJ               BGND                            ;vector base + $CC
00F48D 03F48D 00                      ISR_RESD0               BGND                            ;vector base + $D0
00F48E 03F48E 00                      ISR_ATD0                BGND                            ;vector base + $D2
00F48F 03F48F 00                      ISR_SCI1                BGND                            ;vector base + $D4
00F490 03F490 -> $E7E0                ISR_SCI0                EQU     SCI_ISR_RXTX            ;vector base + $D6
00F490 03F490 -> $EE0A                ISR_SPI0                EQU     DISP_ISR                ;vector base + $D8
00F490 03F490 00                      ISR_TIM_PAIE            BGND                            ;vector base + $DA
00F491 03F491 00                      ISR_TIM_PAOV            BGND                            ;vector base + $DC
00F492 03F492 00                      ISR_TIM_TOV             BGND                            ;vector base + $DE
00F493 03F493 00                      ISR_TIM_TC7             BGND                            ;vector base + $E0
00F494 03F494 00                      ISR_TIM_TC6             BGND                            ;vector base + $E2
00F495 03F495 00                      ISR_TIM_TC5             BGND                            ;vector base + $E4
00F496 03F496 -> $EF82                ISR_TIM_TC4             EQU     KEYS_ISR_TIM            ;vector base + $E6
00F496 03F496 -> $E73D                ISR_TIM_TC3             EQU     SCI_ISR_DELAY           ;vector base + $E8
00F496 03F496 00                      ISR_TIM_TC2             BGND                            ;vector base + $EA
00F497 03F497 -> $E848                ISR_TIM_TC1             EQU     SCI_ISR_BD_NE           ;vector base + $EC
00F497 03F497 -> $E874                ISR_TIM_TC0             EQU     SCI_ISR_BD_PE           ;vector base + $EE
00F497 03F497 00                      ISR_RTI                 BGND                            ;vector base + $F0
00F498 03F498 00                      ISR_IRQ                 BGND                            ;vector base + $F2
00F499 03F499 00                      ISR_XIRQ                BGND                            ;vector base + $F4
00F49A 03F49A 00                      ISR_SWI                 BGND                            ;vector base + $F6
00F49B 03F49B 00                      ISR_TRAP                BGND                            ;vector base + $F8
00F49C 03F49C -> $F49C                VECTAB_TABS_END         EQU     *
00F49C 03F49C -> $3F49C               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12G Vector Table                                                           #
                                      ;###############################################################################
00FF80 03FF80                                                 ORG     VECTAB_START, VECTAB_START_LIN
00FF80 03FF80 F4 68                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $80
00FF82 03FF82 EE FC                   VEC_PAD                 DW      ISR_PAD                 ;vector base + $82
00FF84 03FF84 EA F1                   VEC_ADCCOMP             DW      ISR_ADCCOMP             ;vector base + $84
00FF86 03FF86 F4 69                   VEC_RES86               DW      ISR_RES86               ;vector base + $86
00FF88 03FF88 F4 6A                   VEC_API                 DW      ISR_API                 ;vector base + $88
00FF8A 03FF8A F4 6B                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $8A
00FF8C 03FF8C F4 6C                   VEC_RES8C               DW      ISR_RES8C               ;vector base + $8C
00FF8E 03FF8E F4 6D                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
00FF90 03FF90 F4 6E                   VEC_RES90               DW      ISR_RES90               ;vector base + $90
00FF92 03FF92 F4 6F                   VEC_RES92               DW      ISR_RES92               ;vector base + $92
00FF94 03FF94 F4 70                   VEC_RES94               DW      ISR_RES94               ;vector base + $94
00FF96 03FF96 F4 71                   VEC_RES96               DW      ISR_RES96               ;vector base + $96
00FF98 03FF98 F4 72                   VEC_RES98               DW      ISR_RES98               ;vector base + $98
00FF9A 03FF9A F4 73                   VEC_RES9A               DW      ISR_RES9A               ;vector base + $9A
00FF9C 03FF9C F4 74                   VEC_RES9C               DW      ISR_RES9C               ;vector base + $9C
00FF9E 03FF9E F4 75                   VEC_RES9E               DW      ISR_RES9E               ;vector base + $9E
00FFA0 03FFA0 F4 76                   VEC_RESA0               DW      ISR_RESA0               ;vector base + $A0
00FFA2 03FFA2 F4 77                   VEC_RESA2               DW      ISR_RESA2               ;vector base + $A2
00FFA4 03FFA4 F4 78                   VEC_RESA4               DW      ISR_RESA4               ;vector base + $A4
00FFA6 03FFA6 F4 79                   VEC_RESA6               DW      ISR_RESA6               ;vector base + $A6
00FFA8 03FFA8 F4 7A                   VEC_RESA8               DW      ISR_RESA8               ;vector base + $A8
00FFAA 03FFAA F4 7B                   VEC_RESAA               DW      ISR_RESAA               ;vector base + $AA
00FFAC 03FFAC F4 7C                   VEC_RESAC               DW      ISR_RESAC               ;vector base + $AC
00FFAE 03FFAE F4 7D                   VEC_RESAE               DW      ISR_RESAE               ;vector base + $AE
00FFB0 03FFB0 F4 7E                   VEC_CANTX               DW      ISR_CANTX               ;vector base + $A0
00FFB2 03FFB2 F4 7F                   VEC_CANRX               DW      ISR_CANRX               ;vector base + $B2
00FFB4 03FFB4 F4 80                   VEC_CANERR              DW      ISR_CANERR              ;vector base + $B4
00FFB6 03FFB6 F4 81                   VEC_CANWUP              DW      ISR_CANWUP              ;vector base + $B6
00FFB8 03FFB8 F4 82                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
00FFBA 03FFBA EC E7                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
00FFBC 03FFBC F4 83                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
00FFBE 03FFBE F4 84                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
00FFC0 03FFC0 F4 85                   VEC_RESC0               DW      ISR_RESC0               ;vector base + $C0
00FFC2 03FFC2 F4 86                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $C2
00FFC4 03FFC4 F4 87                   VEC_RESC4               DW      ISR_RESC4               ;vector base + $C4
00FFC6 03FFC6 F4 88                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
00FFC8 03FFC8 F4 89                   VEC_OSCSTAT             DW      ISR_OSCSTAT             ;vector base + $C8
00FFCA 03FFCA F4 8A                   VEC_RESCA               DW      ISR_RESCA               ;vector base + $CA
00FFCC 03FFCC F4 8B                   VEC_ACMP                DW      ISR_ACMP                ;vector base + $CC
00FFCE 03FFCE F4 8C                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CC
00FFD0 03FFD0 F4 8D                   VEC_RESD0               DW      ISR_RESD0               ;vector base + $D0
00FFD2 03FFD2 F4 8E                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
00FFD4 03FFD4 F4 8F                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
00FFD6 03FFD6 E7 E0                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
00FFD8 03FFD8 EE 0A                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
00FFDA 03FFDA F4 90                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $DA
00FFDC 03FFDC F4 91                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $DC
00FFDE 03FFDE F4 92                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $DE
00FFE0 03FFE0 F4 93                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $E0
00FFE2 03FFE2 F4 94                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $E2
00FFE4 03FFE4 F4 95                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $E4
00FFE6 03FFE6 EF 82                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $E6
00FFE8 03FFE8 E7 3D                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $E8
00FFEA 03FFEA F4 96                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $EA
00FFEC 03FFEC E8 48                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $EC
00FFEE 03FFEE E8 74                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $EE
00FFF0 03FFF0 F4 97                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
00FFF2 03FFF2 F4 98                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
00FFF4 03FFF4 F4 99                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
00FFF6 03FFF6 F4 9A                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
00FFF8 03FFF8 F4 9B                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
00FFFA 03FFFA E0 00                   VEC_RESET_COP           DW      RESET_COP_ENTRY         ;vector base + $FA
00FFFC 03FFFC EA CF                   VEC_RESET_CM            DW      RESET_CM_ENTRY          ;vector base + $FC
00FFFE 03FFFE EA C0                   VEC_RESET_EXT           DW      RESET_EXT_ENTRY         ;vector base + $FE
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (AriCalculator RevC)                         #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all GPIO ports of the AriCalculator hardware     #
                                      ;#    RevC (not compatible to RevA or RevB). It assumes the following I/O pin  #
                                      ;#      configuration of the S12G MCU:                                         #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD0  - Keyboard row A (bottom)    (input        pull-up  )             #
                                      ;#     PAD1  - Keyboard row B             (input        pull-up  )             #
                                      ;#     PAD2  - Keyboard row C             (input        pull-up  )             #
                                      ;#     PAD3  - Keyboard row D             (input        pull-up  )             #
                                      ;#     PAD4  - Keyboard row E             (input        pull-up  )             #
                                      ;#     PAD5  - Keyboard row F             (input        pull-up  )             #
                                      ;#     PAD6  - Keyboard row G (top)       (input        pull-up  )             #
                                      ;#     PAD7  - NC                         (input        pull-up  )             #
                                      ;#     PAD8  - Vin                        (analog       no pull  )             #
                                      ;#     PAD9  - Vusb                       (analog       no pull  )             #
                                      ;#     PAD10 - NC                         (input        pull-up  )             #
                                      ;#     PAD11 - NC                         (input        pull-up  )             #
                                      ;#     PAD12 - NC                         (input        pull-up  )             #
                                      ;#     PAD13 - NC                         (input        pull-up  )             #
                                      ;#     PAD14 - NC                         (input        pull-up  )             #
                                      ;#     PAD15 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - NC                           (input        pull-up  )             #
                                      ;#     PA1 - NC                           (input        pull-up  )             #
                                      ;#     PA2 - NC                           (input        pull-up  )             #
                                      ;#     PA3 - NC                           (input        pull-up  )             #
                                      ;#     PA4 - NC                           (input        pull-up  )             #
                                      ;#     PA5 - NC                           (input        pull-up  )             #
                                      ;#     PA6 - NC                           (input        pull-up  )             #
                                      ;#     PA7 - NC                           (input        pull-up  )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - NC                           (input        pull-up  )             #
                                      ;#     PB1 - NC                           (input        pull-up  )             #
                                      ;#     PB2 - NC                           (input        pull-up  )             #
                                      ;#     PB3 - NC                           (input        pull-up  )             #
                                      ;#     PB4 - NC                           (input        pull-up  )             #
                                      ;#     PB5 - NC                           (input        pull-up  )             #
                                      ;#     PB6 - NC                           (input        pull-up  )             #
                                      ;#     PB7 - NC                           (input        pull-up  )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - LED (green)                  (output       high     )             #
                                      ;#     PE1 - LED (red)                    (output       high     )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - SPI port MISO                (input        pull-down)             #
                                      ;#     PJ1 - SPI port MOSI                (input        pull-down)             #
                                      ;#     PJ2 - SPI port SCK                 (input        pull-down)             #
                                      ;#     PJ3 - SPI port /SS                 (input        pull-down)             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - NC                           (input        pull-up  )             #
                                      ;#     PJ7 - NC                           (input        pull-up  )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - RTS                          (input        pull_down)             #
                                      ;#     PM1 - CTS                          (output       low      )             #
                                      ;#     PM2 - NC                           (input        pull_up  )             #
                                      ;#     PM3 - NC                           (input        pull_up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - Keyboard column 5 (left)     (output       low      )             #
                                      ;#     PP1 - Keyboard column 4            (output       low      )             #
                                      ;#     PP2 - Keyboard column 3            (output       low      )             #
                                      ;#     PP3 - Keyboard column 2            (output       low      )             #
                                      ;#     PP4 - Keyboard column 1            (output       low      )             #
                                      ;#     PP5 - Keyboard column 0 (right)    (output       low      )             #
                                      ;#     PP6 - NC (used by KEYS driver)     (input        pull-up  )             #
                                      ;#     PP7 - NC (used by KEYS driver)     (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI RX                       (input        pull-down)             #
                                      ;#     PS1 - SCI TX                       (output       low      )             #
                                      ;#     PS2 - NC                           (input        pull-up  )             #
                                      ;#     PS3 - Display RESET                (output       low      )             #
                                      ;#     PS4 - Display A0                   (output       low      )             #
                                      ;#     PS5 - Display MOSI                 (output       low      )             #
                                      ;#     PS6 - Display SCK                  (output       low      )             #
                                      ;#     PS7 - Display /SS                  (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - SCI RX                       (input        no pull  )             #
                                      ;#     PT1 - SCI_RX                       (input        no pull  )             #
                                      ;#     PT2 - NC                           (input        pull-up  )             #
                                      ;#     PT3 - NC                           (input        pull-up  )             #
                                      ;#     PT4 - NC                           (input        pull-up  )             #
                                      ;#     PT5 - Backlight enable             (output       low      )             #
                                      ;#     PT6 - NC                           (input        pull-up  )             #
                                      ;#     PT7 - NC                           (input        pull-up  )             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 12, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;#        (based on the S12CBase GPIO handler for the S12G-Mini-EVB)           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001404 001404                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001404 001404 -> $1404                GPIO_VARS_END           EQU     *
001404 001404 -> $1404                GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E497 03E497                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
00E497 03E497 -> $E497                GPIO_CODE_END           EQU     *
00E497 03E497 -> $3E497               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F49C 03F49C                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
00F49C 03F49C -> $F49C                GPIO_TABS_END           EQU     *
00F49C 03F49C -> $3F49C               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
00F49C 03F49C -> $001B                SSTACK_DEPTH            EQU     27
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F49C 03F49C -> $140D                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
00F49C 03F49C -> $1443                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001404 001404                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001404 001404 -> $1404                SSTACK_VARS_END         EQU     *
001404 001404 -> $1404                SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E497 03E497                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
00E497 03E497 -> $E497                SSTACK_OF               EQU     *
00E497 03E497 MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00E497 03E497 CE F4 9C                                        LDX     #\1                                              (RESET_FATAL)
00E49A 03E49A 06 EA EB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
00E49D 03E49D -> $E49D                SSTACK_UF               EQU     *
00E49D 03E49D MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00E49D 03E49D CE F4 B7                                        LDX     #\1                                              (RESET_FATAL)
00E4A0 03E4A0 06 EA EB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
00E4A3 03E4A3 -> $E4A3                SSTACK_CODE_END         EQU     *
00E4A3 03E4A3 -> $3E4A3               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F49C 03F49C                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
00F49C 03F49C MACRO                   SSTACK_MSG_OF           RESET_MSG       "Subroutine stack overflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F49C 03F49C 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
00F4B5 03F4B5 AC 7A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F4B7 03F4B7 MACRO                   SSTACK_MSG_UF           RESET_MSG       "Subroutine stack underflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F4B7 03F4B7 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
00F4D1 03F4D1 C9 DC                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F4D3 03F4D3 -> $F4D3                SSTACK_TABS_END         EQU     *
00F4D3 03F4D3 -> $3F4D3               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
                                      ;CPU
00F4D3 03F4D3 -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F4D3 03F4D3 -> $0040                ISTACK_CCR              EQU     %0100_0000
00F4D3 03F4D3 -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001404 001404                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001404 001404 -> $1404                ISTACK_TOP              EQU     *
001404 001404                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
001428 001428                                                 DS      SSTACK_DEPTH
001443 001443 -> $1443                ISTACK_BOTTOM           EQU     *
001443 001443 -> $1443                ISTACK_VARS_END         EQU     *
001443 001443 -> $1443                ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E4A3 03E4A3                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
00E4A3 03E4A3 -> $E4A3                ISTACK_OF               EQU     *
00E4A3 03E4A3 MACRO                                           RESET_FATAL     ISTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00E4A3 03E4A3 CE F4 D3                                        LDX     #\1                                              (RESET_FATAL)
00E4A6 03E4A6 06 EA EB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
00E4A9 03E4A9 -> $E4A9                ISTACK_UF               EQU     *
00E4A9 03E4A9 MACRO                                           RESET_FATAL     ISTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00E4A9 03E4A9 CE F4 EB                                        LDX     #\1                                              (RESET_FATAL)
00E4AC 03E4AC 06 EA EB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
00E4AF 03E4AF -> $E4AF                ISTACK_CODE_END         EQU     *
00E4AF 03E4AF -> $3E4AF               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F4D3 03F4D3                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
00F4D3 03F4D3 49 6E 74 65 72 72 75 70 ISTACK_MSG_OF           FCS     "Interrupt stack overflow"
              74 20 73 74 61 63 6B 20 
              6F 76 65 72 66 6C 6F F7 
00F4EB 03F4EB 49 6E 74 65 72 72 75 70 ISTACK_MSG_UF           FCS     "Interrupt stack underflow"
              74 20 73 74 61 63 6B 20 
              75 6E 64 65 72 66 6C 6F 
              F7                      
00F504 03F504 -> $F504                ISTACK_TABS_END         EQU     *
00F504 03F504 -> $3F504               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
00F504 03F504 -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
00F504 03F504 -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
00F504 03F504 -> $5800                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001443 001443                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001443 001443 -> $1443                CLOCK_VARS_END          EQU     *
001443 001443 -> $1443                CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E4AF 03E4AF                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
00E4AF 03E4AF -> $E4AF                CLOCK_CODE_END          EQU     *
00E4AF 03E4AF -> $3E4AF               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F504 03F504                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
00F504 03F504 -> $F504                CLOCK_TABS_END          EQU     *
00F504 03F504 -> $3F504               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
00F504 03F504 -> $003C                COP_CTLREG              EQU     CPMUCOP
                                      ;#Restart register
00F504 03F504 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001443 001443                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
001443 001443 -> $1443                COP_VARS_END            EQU     *
001443 001443 -> $1443                COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E4AF 03E4AF                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00E4AF 03E4AF -> $E4AF                COP_CODE_END            EQU     *
00E4AF 03E4AF -> $3E4AF               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F504 03F504                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
00F504 03F504 -> $F504                COP_TABS_END            EQU     *
00F504 03F504 -> $3F504               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     delay driver                                                  #
                                      ;#      OC5:     unasigned                                                     #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
00F504 03F504 -> $0001                TIM_DIV2_OFF            EQU     1       ;default no clock divider
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
00F504 03F504 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
00F504 03F504 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
00F504 03F504 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
00F504 03F504 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
00F504 03F504 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
00F504 03F504 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
00F504 03F504 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
00F504 03F504 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
00F504 03F504 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001443 001443                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001443 001443 -> $1443                TIM_VARS_END            EQU     *
001443 001443 -> $1443                TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E4AF 03E4AF                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00E4AF 03E4AF -> $E4AF                TIM_CODE_END            EQU     *
00E4AF 03E4AF -> $3E4AF               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F504 03F504                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
00F504 03F504 -> $F504                TIM_TABS_END            EQU     *
00F504 03F504 -> $3F504               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - Changed selection of detectable baud rates                           #
                                      ;#      - Stop baud rate detection when receiving a corret character           #
                                      ;#      - Stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;#    September 25, 2013                                                       #
                                      ;#      - Fixed reception of C0 characters                                     #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Made SCI_TXBUF_SIZE configurable                                     #
                                      ;#    October 1, 2014                                                          #
                                      ;#      - Added dynamic enable/disable feature                                 #
                                      ;#    January 14, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;#      - Changed control character handling                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF coniguration
                                      ;RTS/CTS coniguration
                                      ;RTS pin
                                      ;CTS pin
                                      ;CTS drive strength
                                      ;MC9S12DP256 SCI IRQ workaround (MUCts00510)
                                      ;-------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
00F504 03F504 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;Delay counter
                                      ;-------------
                                      ;SCI_DLY_OC             EQU     $3              ;default is OC3
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;Baud rate detection configuration
                                      ;ECT or TIM
                                      ;TIM configuration
                                      ;Input capture channels (pulse capture)
                                      ;ECT configuration
                                      ;Output compare channels (time out)
                                      ;Log captured BD pulse length
00F504 03F504 -> $0001                SCI_BD_LOG_OFF          EQU     1               ;default is SCI_BD_LOG_OFF
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;TX buffer size (minimize to 1 for debugging)
                                      ;--------------------------------------------
                                      ;SCI_TXBUF_SIZE         EQU       1             ;minimum size of the transmit buffer
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character -> define macro SCI_BREAK_ACTION
                                      ;#mac SCI_BREAK_ACTION, 0
                                      ;       ...code to be executed on BREAK condition (inside ISR)
                                      ;#emac
                                      ;Detect SUSPEND character -> define macro SCI_SUSPEND_ACTION
                                      ;#mac SCI_SUSPEND_ACTION, 0
                                      ;       ...code to be executed on SUSPEND condition (inside ISR)
                                      ;#emac
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00F504 03F504 -> $0516                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00F504 03F504 -> $028B                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00F504 03F504 -> $0146                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00F504 03F504 -> $00D9                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00F504 03F504 -> $00A3                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00F504 03F504 -> $006D                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00F504 03F504 -> $0051                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00F504 03F504 -> $0036                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00F504 03F504 -> $0029                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00F504 03F504 -> $001B                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00F504 03F504 -> $0014                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00F504 03F504 -> $000E                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00F504 03F504 -> $000A                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00F504 03F504 -> $00A3                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00F504 03F504 -> $1999                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00F504 03F504 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00F504 03F504 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00F504 03F504 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00F504 03F504 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00F504 03F504 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00F504 03F504 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00F504 03F504 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00F504 03F504 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00F504 03F504 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00F504 03F504 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00F504 03F504 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00F504 03F504 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
00F504 03F504 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
00F504 03F504 -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00F504 03F504 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00F504 03F504 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00F504 03F504 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00F504 03F504 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00F504 03F504 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00F504 03F504 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00F504 03F504 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00F504 03F504 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Flow control
00F504 03F504 -> $0001                SCI_FC_EN               EQU     1
                                      ;#Baud rate detection
00F504 03F504 -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;#Timer setup for baud rate detection
00F504 03F504 -> $0001                SCI_SET_TIOS            EQU     1
00F504 03F504 -> $0004                SCI_BD_TIOS_VAL         EQU     (1<<SCI_BD_OC)
00F504 03F504 -> $0001                SCI_SET_TCTL3           EQU     1
00F504 03F504 -> $0009                SCI_BD_TCTL3_VAL        EQU     (1<<(2*SCI_BD_ICPE))|(2<<(2*SCI_BD_ICNE))
00F504 03F504 -> $0007                SCI_BD_TCS              EQU     (1<<SCI_BD_OC)|(1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)
                                      ;#Timer setup for the delay counter
00F504 03F504 -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for RTS polling
                                      ;#Delay counter
00F504 03F504 -> $0001                SCI_SET_TIOS            EQU     1
00F504 03F504 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
00F504 03F504 -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
                                      ;#C0 character handling
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001443 001443                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001443 001443 -> $1443                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
001443 001443                                                 ALIGN   1
                                      ;#Receive buffer
001444 001444                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
001464 001464                         SCI_RXBUF_IN            DS      1               ;points to the next free space
001465 001465                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
001466 001466                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
00146E 00146E                         SCI_TXBUF_IN            DS      1               ;points to the next free space
00146F 00146F                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
001470 001470                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
                                      ;#XON/XOFF reminder count
                                      ;#BD log buffer
001472 001472 -> $1472                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
                                      ;#Flags
001472 001472 -> $1443                SCI_FLGS                EQU     ((SCI_AUTO_LOC1&1)*SCI_AUTO_LOC1)+(((~SCI_AUTO_LOC1)&1)*SCI_AUTO_LOC2)
001472 001472                                                 UNALIGN ((~SCI_AUTO_LOC1)&1)
                                      ;#Baud rate detection registers
001472 001472                         SCI_BD_LIST             DS      1               ;list of potential baud rates
001473 001473 -> $1473                SCI_VARS_END            EQU     *
001473 001473 -> $1473                SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E4AF 03E4AF                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
00E4AF 03E4AF -> $E4AF                SCI_TX_NB               EQU     *
                                                              ;Check if SCI transmitter is enabled
00E4AF 03E4AF 4F CB 08 26                                     BRCLR   SCICR2, #TE, SCI_TX_NB_1                ;do nothing and flag success
                                                              ;Save registers (data in B)
00E4B3 03E4B3 35                                              PSHY
00E4B4 03E4B4 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
00E4B5 03E4B5 CD 14 66                                        LDY     #SCI_TXBUF
00E4B8 03E4B8 B6 14 6E                                        LDAA    SCI_TXBUF_IN
00E4BB 03E4BB 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
00E4BD 03E4BD 42                                              INCA                                            ;increment index
00E4BE 03E4BE 84 01                                           ANDA    #SCI_TXBUF_MASK
00E4C0 03E4C0 B1 14 6F                                        CMPA    SCI_TXBUF_OUT
00E4C3 03E4C3 27 17                                           BEQ     SCI_TX_NB_2                             ;buffer is full
                                                              ;Update buffer
00E4C5 03E4C5 7A 14 6E                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
00E4C8 03E4C8 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
00E4CD 03E4CD MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E4CD 03E4CD MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4CD 03E4CD 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4D0 03E4D0 25 C5                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4D2 03E4D2 8F 14 3E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4D5 03E4D5 22 C6                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4D7 03E4D7 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4D7 03E4D7 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4D7 03E4D7 32                                              PULA
00E4D8 03E4D8 31                                              PULY
                                                              ;Signal success
00E4D9 03E4D9 14 01                   SCI_TX_NB_1             SEC
                                                              ;Done
00E4DB 03E4DB 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
00E4DC 03E4DC MACRO                   SCI_TX_NB_2             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E4DC 03E4DC MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4DC 03E4DC 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4DF 03E4DF 25 B6                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4E1 03E4E1 8F 14 3E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4E4 03E4E4 22 B7                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4E6 03E4E6 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4E6 03E4E6 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4E6 03E4E6 32                                              PULA
00E4E7 03E4E7 31                                              PULY
                                                              ;Signal failure
00E4E8 03E4E8 10 FE                                           CLC
                                                              ;Done
00E4EA 03E4EA 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
00E4EB 03E4EB -> $E4EB                SCI_TX_BL               EQU     *
00E4EB 03E4EB MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00E4EB 03E4EB 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00E4ED 03E4ED                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00E4ED 03E4ED 07 C0                                           JOBSR   \1                                               (SCI_MAKE_BL)
00E4EF 03E4EF 24 0D                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00E4F1 03E4F1 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00E4F3 03E4F3 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00E4F3 03E4F3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4F3 03E4F3 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4F6 03E4F6 25 9F                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4F8 03E4F8 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4FB 03E4FB 22 A0                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4FD 03E4FD -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4FD 03E4FD -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E4FD 03E4FD 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00E4FE 03E4FE MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00E4FE 03E4FE 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00E501 03E501 25 A0                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00E503 03E503 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00E506 03E506 22 A1                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00E508 03E508 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E508 03E508 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E50D 03E50D 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E512 03E512 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E514 03E514 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E515 03E515 -> $E4A3                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E515 03E515 -> $E4A9                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E515 03E515 -> $E515                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00E515 03E515 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00E515 03E515 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E515 03E515 8F 14 12                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E518 03E518 18 25 FF 7B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E51C 03E51C 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E51F 03E51F 18 22 FF 7A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E523 03E523 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E523 03E523 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E523 03E523 20 C6                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissions are complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00E525 03E525 -> $E525                SCI_TX_DONE_NB          EQU     *
                                                              ;Check if SCI transmitter is enabled
00E525 03E525 4F CB 08 2D                                     BRCLR   SCICR2, #TE, SCI_TX_DONE_NB_3           ;do nothing and flag success
                                                              ;Save registers
00E529 03E529 3B                                              PSHD
                                                              ;Check TX queue
00E52A 03E52A FC 14 6E                                        LDD     SCI_TXBUF_IN
00E52D 03E52D 18 17                                           CBA
00E52F 03E52F 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
00E531 03E531 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2    ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
00E535 03E535 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E535 03E535 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E535 03E535 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E538 03E538 18 25 FF 5B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E53C 03E53C 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E53F 03E53F 18 22 FF 5A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E543 03E543 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E543 03E543 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E543 03E543 3A                                              PULD
                                                              ;Signal failure
00E544 03E544 10 FE                                           CLC
                                                              ;Done
00E546 03E546 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
00E547 03E547 MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E547 03E547 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E547 03E547 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E54A 03E54A 18 25 FF 49                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E54E 03E54E 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E551 03E551 18 22 FF 48                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E555 03E555 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E555 03E555 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E555 03E555 3A                                              PULD
                                                              ;Signal success
00E556 03E556 14 01                   SCI_TX_DONE_NB_3        SEC
                                                              ;Done
00E558 03E558 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00E559 03E559 -> $E559                SCI_TX_DONE_BL          EQU     *
00E559 03E559 MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00E559 03E559 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00E55B 03E55B                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00E55B 03E55B 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
00E55D 03E55D 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00E55F 03E55F 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00E561 03E561 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00E561 03E561 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E561 03E561 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E564 03E564 18 25 FF 2F                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E568 03E568 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E56B 03E56B 18 22 FF 2E                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E56F 03E56F -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E56F 03E56F -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E56F 03E56F 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00E570 03E570 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00E570 03E570 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00E573 03E573 18 25 FF 2C                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00E577 03E577 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00E57A 03E57A 18 22 FF 2B                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00E57E 03E57E MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E57E 03E57E 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E583 03E583 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E588 03E588 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E58A 03E58A 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E58B 03E58B -> $E4A3                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E58B 03E58B -> $E4A9                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E58B 03E58B -> $E58B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00E58B 03E58B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00E58B 03E58B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E58B 03E58B 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E58E 03E58E 18 25 FF 05                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E592 03E592 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E595 03E595 18 22 FF 04                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E599 03E599 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E599 03E599 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E599 03E599 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00E59B 03E59B -> $E59B                SCI_TX_READY_NB         EQU     *
                                                              ;Check if SCI transmitter is enabled
00E59B 03E59B 4F CB 08 1B                                     BRCLR   SCICR2, #TE, SCI_TX_READY_NB_1          ;do nothing and flag success
                                                              ;Save registers
00E59F 03E59F 3B                                              PSHD
                                                              ;Check if there is room for this entry
00E5A0 03E5A0 FC 14 6E                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
00E5A3 03E5A3 42                                              INCA
00E5A4 03E5A4 84 01                                           ANDA    #SCI_TXBUF_MASK
00E5A6 03E5A6 B1 14 6F                                        CMPA    SCI_TXBUF_OUT
00E5A9 03E5A9 27 12                                           BEQ     SCI_TX_READY_NB_2                               ;buffer is full
                                                              ;Restore registers
00E5AB 03E5AB MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E5AB 03E5AB MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5AB 03E5AB 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5AE 03E5AE 18 25 FE E5                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5B2 03E5B2 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5B5 03E5B5 18 22 FE E4                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5B9 03E5B9 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5B9 03E5B9 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5B9 03E5B9 3A                                              PULD
                                                              ;Done
00E5BA 03E5BA 14 01                   SCI_TX_READY_NB_1       SEC
00E5BC 03E5BC 3D                                              RTS
                                                              ;TX buffer is full
00E5BD 03E5BD MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E5BD 03E5BD MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5BD 03E5BD 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5C0 03E5C0 18 25 FE D3                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5C4 03E5C4 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5C7 03E5C7 18 22 FE D2                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5CB 03E5CB -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5CB 03E5CB -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5CB 03E5CB 3A                                              PULD
                                                              ;Done
00E5CC 03E5CC 10 FE                                           CLC
00E5CE 03E5CE 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00E5CF 03E5CF -> $E5CF                SCI_TX_READY_BL         EQU     *
00E5CF 03E5CF MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00E5CF 03E5CF 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00E5D1 03E5D1                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00E5D1 03E5D1 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
00E5D3 03E5D3 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00E5D5 03E5D5 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00E5D7 03E5D7 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00E5D7 03E5D7 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5D7 03E5D7 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5DA 03E5DA 18 25 FE B9                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5DE 03E5DE 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5E1 03E5E1 18 22 FE B8                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5E5 03E5E5 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5E5 03E5E5 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E5E5 03E5E5 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00E5E6 03E5E6 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00E5E6 03E5E6 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00E5E9 03E5E9 18 25 FE B6                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00E5ED 03E5ED 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00E5F0 03E5F0 18 22 FE B5                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00E5F4 03E5F4 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E5F4 03E5F4 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E5F9 03E5F9 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E5FE 03E5FE 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E600 03E600 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E601 03E601 -> $E4A3                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E601 03E601 -> $E4A9                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E601 03E601 -> $E601                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00E601 03E601 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00E601 03E601 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E601 03E601 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E604 03E604 18 25 FE 8F                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E608 03E608 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E60B 03E60B 18 22 FE 8E                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E60F 03E60F -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E60F 03E60F -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E60F 03E60F 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
00E611 03E611 -> $E611                SCI_RX_NB               EQU     *
                                                              ;Check if SCI receiver is enabled
00E611 03E611 4F CB 08 3D                                     BRCLR   SCICR2, #TE, SCI_RX_NB_3                ;do nothing and flag failure
                                                              ;Save registers
00E615 03E615 34                                              PSHX
                                                              ;Check if there is data in the RX queue
00E616 03E616 FC 14 64                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
00E619 03E619 18 16                                           SBA                                             ;A=in-out
00E61B 03E61B 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
                                                              ;Check if more RX data is allowed  (in-out in A)
00E61D 03E61D 84 1F                                           ANDA    #SCI_RXBUF_MASK
00E61F 03E61F 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
00E621 03E621 27 32                                           BEQ     SCI_RX_NB_4                             ;allow RX data
                                                              ;Pull entry from the RX queue (out in B)
00E623 03E623 CE 14 44                SCI_RX_NB_1             LDX     #SCI_RXBUF
00E626 03E626 EE E5                                           LDX     B,X
00E628 03E628 CB 02                                           ADDB    #$02                                    ;increment out pointer
00E62A 03E62A C4 1F                                           ANDB    #SCI_RXBUF_MASK
00E62C 03E62C 7B 14 65                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
00E62F 03E62F B7 54                                           TFR     X, D
                                                              ;Restore registers
00E631 03E631 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E631 03E631 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E631 03E631 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E634 03E634 18 25 FE 5F                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E638 03E638 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E63B 03E63B 18 22 FE 5E                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E63F 03E63F -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E63F 03E63F -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E63F 03E63F 30                                              PULX
                                                              ;Done
00E640 03E640 14 01                                           SEC
00E642 03E642 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
00E643 03E643 MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E643 03E643 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E643 03E643 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E646 03E646 18 25 FE 4D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E64A 03E64A 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E64D 03E64D 18 22 FE 4C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E651 03E651 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E651 03E651 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E651 03E651 30                                              PULX
                                                              ;Done
00E652 03E652 10 FE                   SCI_RX_NB_3             CLC
00E654 03E654 3D                                              RTS
                                                              ;Assert CTS (out-index in B, CCR in X)
00E655 03E655 MACRO                   SCI_RX_NB_4             SCI_ASSERT_CTS
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_ASSERT_CTS)
00E655 03E655 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data (SCI_ASSERT_CTS)
00E659 03E659 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (SCI_ASSERT_CTS)
00E65D 03E65D 1C 02 55 02                                     BSET    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-down device (SCI_ASSERT_CTS)
00E661 03E661 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (SCI_ASSERT_CTS)
00E665 03E665 20 BC                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
00E667 03E667 -> $E667                SCI_RX_BL               EQU     *
00E667 03E667 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00E667 03E667 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00E669 03E669                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00E669 03E669 07 A6                                           JOBSR   \1                                               (SCI_MAKE_BL)
00E66B 03E66B 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00E66D 03E66D 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00E66F 03E66F MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00E66F 03E66F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E66F 03E66F 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E672 03E672 18 25 FE 21                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E676 03E676 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E679 03E679 18 22 FE 20                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E67D 03E67D -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E67D 03E67D -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E67D 03E67D 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00E67E 03E67E MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00E67E 03E67E 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00E681 03E681 18 25 FE 1E                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00E685 03E685 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00E688 03E688 18 22 FE 1D                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00E68C 03E68C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E68C 03E68C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E691 03E691 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E696 03E696 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E698 03E698 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E699 03E699 -> $E4A3                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E699 03E699 -> $E4A9                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E699 03E699 -> $E699                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00E699 03E699 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00E699 03E699 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E699 03E699 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E69C 03E69C 18 25 FD F7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E6A0 03E6A0 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E6A3 03E6A3 18 22 FD F6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E6A7 03E6A7 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E6A7 03E6A7 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E6A7 03E6A7 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00E6A9 03E6A9 -> $E6A9                SCI_RX_READY_NB         EQU     *
                                                              ;Check if SCI receiver is enabled
00E6A9 03E6A9 4F CB 08 29                                     BRCLR   SCICR2, #TE, SCI_RX_READY_NB_2          ;do nothing and flag failure
                                                              ;Save registers
00E6AD 03E6AD 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
00E6AE 03E6AE FC 14 64                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
00E6B1 03E6B1 18 17                                           CBA
00E6B3 03E6B3 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
00E6B5 03E6B5 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E6B5 03E6B5 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6B5 03E6B5 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6B8 03E6B8 18 25 FD DB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6BC 03E6BC 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6BF 03E6BF 18 22 FD DA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6C3 03E6C3 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6C3 03E6C3 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6C3 03E6C3 3A                                              PULD
                                                              ;Done
00E6C4 03E6C4 14 01                                           SEC
00E6C6 03E6C6 3D                                              RTS
                                                              ;RX buffer is empty
00E6C7 03E6C7 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E6C7 03E6C7 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6C7 03E6C7 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6CA 03E6CA 18 25 FD C9                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6CE 03E6CE 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6D1 03E6D1 18 22 FD C8                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6D5 03E6D5 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6D5 03E6D5 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6D5 03E6D5 3A                                              PULD
                                                              ;Done
00E6D6 03E6D6 10 FE                   SCI_RX_READY_NB_2       CLC
00E6D8 03E6D8 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00E6D9 03E6D9 -> $E6D9                SCI_RX_READY_BL         EQU     *
00E6D9 03E6D9 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00E6D9 03E6D9 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00E6DB 03E6DB                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00E6DB 03E6DB 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00E6DD 03E6DD 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00E6DF 03E6DF 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00E6E1 03E6E1 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00E6E1 03E6E1 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6E1 03E6E1 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6E4 03E6E4 18 25 FD AF                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6E8 03E6E8 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6EB 03E6EB 18 22 FD AE                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6EF 03E6EF -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6EF 03E6EF -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E6EF 03E6EF 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00E6F0 03E6F0 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00E6F0 03E6F0 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00E6F3 03E6F3 18 25 FD AC                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00E6F7 03E6F7 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00E6FA 03E6FA 18 22 FD AB                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00E6FE 03E6FE MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E6FE 03E6FE 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E703 03E703 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E708 03E708 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E70A 03E70A 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E70B 03E70B -> $E4A3                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E70B 03E70B -> $E4A9                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E70B 03E70B -> $E70B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00E70B 03E70B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00E70B 03E70B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E70B 03E70B 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E70E 03E70E 18 25 FD 85                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E712 03E712 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E715 03E715 18 22 FD 84                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E719 03E719 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E719 03E719 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E719 03E719 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00E71B 03E71B -> $E71B                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
00E71B 03E71B 35                                              PSHY                                    ;push Y onto the SSTACK
00E71C 03E71C 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
00E71D 03E71D 5C C8                                           STD     SCIBDH                          ;set baud rate
00E71F 03E71F CD 19 99                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
00E722 03E722 13                                              EMUL                                    ;D*Y -> Y:D
00E723 03E723 7C 14 70                                        STD     SCI_BVAL
                                                              ;Clear input buffer
00E726 03E726 18 03 00 00 14 64                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
00E72C 03E72C MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E72C 03E72C MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E72C 03E72C 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E72F 03E72F 18 25 FD 64                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E733 03E733 8F 14 3D                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E736 03E736 18 22 FD 63                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E73A 03E73A -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E73A 03E73A -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E73A 03E73A 3A                                              PULD                                    ;pull D from the SSTACK
00E73B 03E73B 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
00E73C 03E73C 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTS polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
00E73D 03E73D -> $E73D                SCI_ISR_DELAY           EQU     *
00E73D 03E73D 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Poll RTS (retrigger request in C-flag)
00E73F 03E73F 1F 14 43 40 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_POLL_RTS, SCI_ISR_DELAY_2            ;no polling required
00E744 03E744 1F 02 50 01 04                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_DELAY_1             ;RTS is now asserted (TX allowed)
00E749 03E749 14 01                                           SEC                                                             ;retrigger
00E74B 03E74B 20 05                                           JOB     SCI_ISR_DELAY_2
00E74D 03E74D 18 0B AC 00 CB          SCI_ISR_DELAY_1         MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
00E752 03E752 -> $E752                SCI_ISR_DELAY_2         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
00E752 03E752 24 22                                           BCC     SCI_ISR_DELAY_5
00E754 03E754 MACRO                                           SCI_RESET_DELAY
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
00E754 03E754 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
00E754 03E754 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00E754 03E754 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00E759 03E759 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
00E75B 03E75B 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
00E75E 03E75E B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
00E760 03E760 C7                                              CLRB                                                     (SCI_RESET_DELAY)
00E761 03E761 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
00E761 03E761 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
00E763 03E763 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
00E765 03E765 -> $E765                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
00E765 03E765 MACRO                   SCI_ISR_DELAY_4         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00E765 03E765 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00E768 03E768 25 06                                           BLO     OF                                               (ISTACK_RTI)
00E76A 03E76A 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00E76D 03E76D 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00E76F 03E76F 0B                                              RTI                                                      (ISTACK_RTI)
00E770 03E770 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00E773 03E773 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
00E776 03E776 MACRO                   SCI_ISR_DELAY_5         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
00E776 03E776 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
00E776 03E776 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00E776 03E776 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00E779 03E779 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00E77B 03E77B 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00E77E 03E77E -> $E77E                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00E77E 03E77E -> $E77E                                        EQU     *                                                (SCI_STOP_DELAY)
00E77E 03E77E 20 E5                                           JOB     SCI_ISR_DELAY_4
                                                              ;#Transmit ISR (status flags in A)
00E780 03E780 85 80                   SCI_ISR_TX              BITA    #TDRE                                   ;check if SCI is ready for new TX data
00E782 03E782 27 4B                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check RTS status
00E784 03E784 1F 02 50 01 28                                  BRCLR   SCI_RTS_PORT, #SCI_RTS_PIN, SCI_ISR_TX_1;check TX buffer
00E789 03E789 1C 14 43 40                                     BSET    SCI_FLGS, #SCI_FLG_POLL_RTS             ;request RTS polling
00E78D 03E78D MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (don't retrigger) (approx. 2 SCI frames)                           (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
00E78D 03E78D 4E 4C 08 1E                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
00E791 03E791 MACRO                                           SCI_INIT_DELAY                                           (SCI_START_DELAY)
                                      ;#Start delay (always retrigger) (approx. 2 SCI frames)                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY)
00E791 03E791 MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00E791 03E791 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
00E791 03E791 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00E791 03E791 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00E796 03E796 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00E798 03E798 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00E79B 03E79B B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00E79D 03E79D C7                                              CLRB                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00E79E 03E79E MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00E79E 03E79E D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00E7A0 03E7A0 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00E7A2 03E7A2 -> $E7A2                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
00E7A2 03E7A2 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
00E7A2 03E7A2 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;############################################################################### (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S                 ;  0=input capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C                 ;  1=output compare (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A B B B                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y D D D                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;        T N P                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;        O E E                                  (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
00E7A2 03E7A2 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
00E7A7 03E7A7 4C 4C 08                                        BSET    TIE, #\1                        ;enable interrupts (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
00E7AA 03E7AA 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
00E7AF 03E7AF -> $E7AF                DONE                    EQU     *                                                (SCI_START_DELAY)
00E7AF 03E7AF 20 19                                           JOB     SCI_ISR_TX_3                            ;stop transmitting
                                                              ;Check TX buffer
00E7B1 03E7B1 FC 14 6E                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
00E7B4 03E7B4 18 17                                           CBA
00E7B6 03E7B6 27 12                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
00E7B8 03E7B8 CD 14 66                                        LDY     #SCI_TXBUF
00E7BB 03E7BB 18 0D ED 00 CF                                  MOVB    B,Y ,SCIDRL
                                                              ;Increment index (in-index in A, out-index in B, buffer pointer in Y)
00E7C0 03E7C0 52                                              INCB
00E7C1 03E7C1 C4 01                                           ANDB    #SCI_TXBUF_MASK
00E7C3 03E7C3 7B 14 6F                                        STAB    SCI_TXBUF_OUT
00E7C6 03E7C6 18 17                                           CBA
00E7C8 03E7C8 26 05                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
00E7CA 03E7CA -> $E7CA                SCI_ISR_TX_3            EQU     *
00E7CA 03E7CA 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
00E7CF 03E7CF MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00E7CF 03E7CF 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00E7D2 03E7D2 25 06                                           BLO     OF                                               (ISTACK_RTI)
00E7D4 03E7D4 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00E7D7 03E7D7 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00E7D9 03E7D9 0B                                              RTI                                                      (ISTACK_RTI)
00E7DA 03E7DA 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00E7DD 03E7DD 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
00E7E0 03E7E0 -> $E7E0                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
00E7E0 03E7E0 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
00E7E2 03E7E2 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
00E7E4 03E7E4 27 9A                                           BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
00E7E6 03E7E6 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
00E7E8 03E7E8 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
00E7EA 03E7EA 1F 14 43 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
00E7EF 03E7EF 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
00E7F1 03E7F1 1D 14 43 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
                                                              ;Place data into RX queue (status flags in A, RX data in B)
00E7F5 03E7F5 B7 46                   SCI_ISR_RX_1            TFR     D, Y                                    ;flags:data -> Y
00E7F7 03E7F7 CE 14 44                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
00E7FA 03E7FA FC 14 64                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00E7FD 03E7FD 6D E4                                           STY     A,X
00E7FF 03E7FF 8B 02                                           ADDA    #2
00E801 03E801 84 1F                                           ANDA    #SCI_RXBUF_MASK
00E803 03E803 18 17                                           CBA
00E805 03E805 27 1C                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
00E807 03E807 7A 14 64                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
00E80A 03E80A 18 16                                           SBA
00E80C 03E80C 84 1F                                           ANDA    #SCI_RXBUF_MASK
00E80E 03E80E 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00E810 03E810 24 15                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
00E812 03E812 -> $E812                SCI_ISR_RX_2            EQU     *
                                                              ;Done
00E812 03E812 MACRO                   SCI_ISR_RX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00E812 03E812 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00E815 03E815 25 06                                           BLO     OF                                               (ISTACK_RTI)
00E817 03E817 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00E81A 03E81A 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00E81C 03E81C 0B                                              RTI                                                      (ISTACK_RTI)
00E81D 03E81D 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00E820 03E820 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;Buffer overflow (flags:data in Y)
00E823 03E823 1C 14 43 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
                                                              ;Signal buffer full (flags:data in Y)
                                                              ;Deassert CTS (stop incomming data) (flags:data in Y)
00E827 03E827 MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
00E827 03E827 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (prohibit RX data) (SCI_DEASSERT_CTS)
00E82B 03E82B 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (SCI_DEASSERT_CTS)
00E82F 03E82F 1D 02 55 02                                     BCLR    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-up device (SCI_DEASSERT_CTS)
00E833 03E833 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (SCI_DEASSERT_CTS)
00E837 03E837 -> $E837                SCI_ISR_RX_11           EQU     *
00E837 03E837 20 D9                   SCI_ISR_RX_13           JOB     SCI_ISR_RX_4                            ;done
                                                              ;Handle DLE
00E839 03E839 1C 14 43 04             SCI_ISR_RX_17           BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;remember start of escape sequence
00E83D 03E83D FC 14 64                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00E840 03E840 84 1F                                           ANDA    #SCI_RXBUF_MASK
00E842 03E842 81 0E                                           CMPA    #(SCI_RX_FULL_LEVEL-2)
00E844 03E844 24 E1                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
00E846 03E846 20 EF                                           JOB     SCI_ISR_RX_11                           ;check for RX errors
                                      ;#BD negedge ISR (default IC1)
00E848 03E848 -> $E848                SCI_ISR_BD_NE           EQU     *
                                                              ;Clear ICNE interrupt
00E848 03E848 MACRO                                           TIM_CLRIF       SCI_BD_ICNE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00E848 03E848 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00E848 03E848 18 0B 02 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
00E84D 03E84D DE 52                                           LDX     (TC0+(2*SCI_BD_ICNE))                   ;capture current edge (posedge)
00E84F 03E84F DD 50                                           LDY     (TC0+(2*SCI_BD_ICPE))                   ;capture previous edge (posedge)
00E851 03E851 D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
00E853 03E853 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
00E855 03E855 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00E855 03E855 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00E855 03E855 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
00E85A 03E85A MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
00E85A 03E85A 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
00E85D 03E85D 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
00E85F 03E85F 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
00E861 03E861 -> $E861                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
00E861 03E861 C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
00E863 03E863 26 5B                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
00E865 03E865 CC FF FF                                        LDD     #-1
00E868 03E868 18 13                                           EMULS                                           ;-1 * Y => Y:D
00E86A 03E86A 1A E6                                           LEAX    D,X                                     ;subtract timestamps
                                                              ;Select search tree tree (pulse length in X)
00E86C 03E86C CD F9 0C                                        LDY     #SCI_BD_HIGH_PULSE_TREE
00E86F 03E86F 04 65 2C                                        TBNE    X, SCI_ISR_BD_NEPE_2                    ;parse search tree if pulse length is > 0
00E872 03E872 20 4C                                           JOB     SCI_ISR_BD_NEPE_4                       ;discard zero-length pulses (for whatever reasson they may occur)
                                      ;#BD posedge ISR (default IC0)
00E874 03E874 -> $E874                SCI_ISR_BD_PE           EQU     *
                                                              ;Clear ICNE interrupt
00E874 03E874 MACRO                                           TIM_CLRIF       SCI_BD_ICPE
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00E874 03E874 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00E874 03E874 18 0B 01 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Capture pulse length and flags
00E879 03E879 DE 50                                           LDX     (TC0+(2*SCI_BD_ICPE))                   ;capture current edge (posedge)
00E87B 03E87B DD 52                                           LDY     (TC0+(2*SCI_BD_ICNE))                   ;capture previous edge (posedge)
00E87D 03E87D D6 4E                                           LDAB    TFLG1                                   ;capture interrupt flags
                                                              ;Reset timeout  flags (current edge in X, previous edge in Y, interrupt flags in B)
00E87F 03E87F 5E 54                                           STX     (TC0+(2*SCI_BD_OC))
00E881 03E881 MACRO                                           TIM_CLRIF       SCI_BD_OC
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00E881 03E881 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00E881 03E881 18 0B 04 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Allow nested interrupts (current edge in X, previous edge in Y, interrupt flags in B)
00E886 03E886 MACRO                                           ISTACK_CHECK_AND_CLI                            ;allow interrupts if there is enough room on the stack
                                      ;#Clear I-flag is there is still room on the stack                               (ISTACK_CHECK_AND_CLI)
                                      ; args:   none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ; ISTACK: none                                                                   (ISTACK_CHECK_AND_CLI)
                                      ;         X, Y and B are preserved                                               (ISTACK_CHECK_AND_CLI)
00E886 03E886 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_CHECK_AND_CLI)
00E889 03E889 22 02                                           BHI     DONE                                             (ISTACK_CHECK_AND_CLI)
00E88B 03E88B 10 EF                                           CLI                                                      (ISTACK_CHECK_AND_CLI)
00E88D 03E88D -> $E88D                DONE                    EQU     *                                                (ISTACK_CHECK_AND_CLI)
                                                              ;Make sure no time-out has and no early edge has occured (current edge in X, previous edge in Y, interrupt flags in B)
00E88D 03E88D C5 07                                           BITB    #((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC))
00E88F 03E88F 26 2F                                           BNE     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;Calculate pulse length (current edge in X, previous edge in Y, polarity flags in B)
00E891 03E891 CC FF FF                                        LDD     #-1
00E894 03E894 18 13                                           EMULS                                           ;-1 * Y => Y:D
00E896 03E896 1A E6                                           LEAX    D,X                                     ;subtract timestamps
00E898 03E898 04 45 25                                        TBEQ    X, SCI_ISR_BD_NEPE_4                    ;discard zero-length pulses (for whatever reasson they may occur)
                                                              ;Select search tree tree (pulse length in X)
00E89B 03E89B CD F5 14                                        LDY     #SCI_BD_LOW_PULSE_TREE
                                                              ;JOB    SCI_ISR_BD_NEPE_2                       ;parse search tree
00E89E 03E89E -> $E89E                SCI_ISR_BD_NEPE_2       EQU     *
                                                              ;Parse tree  (pulse length in X, search tree in Y)
00E89E 03E89E MACRO                                           SCI_BD_PARSE
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;# Parse routine                                                               # (SCI_BD_PARSE)
                                      ;############################################################################### (SCI_BD_PARSE)
                                      ;#Parse search tree for detected pulse length                                    (SCI_BD_PARSE)
                                      ; args:   Y: root of the search tree                                             (SCI_BD_PARSE)
                                      ;         X: pulse length                                                        (SCI_BD_PARSE)
                                      ; result: D: list of matching baud rates (mirrored in high and low byte)         (SCI_BD_PARSE)
                                      ; SSTACK: 0 bytes                                                                (SCI_BD_PARSE)
                                      ;         X is preserved                                                         (SCI_BD_PARSE)
00E89E 03E89E CC 00 00                                LDD     #$0000          ;  2 cycs       ;initialize X            (SCI_BD_PARSE)
00E8A1 03E8A1 E7 40                   LOOP            TST     0,Y             ;  3 cycs       ;check if lower boundary exists (SCI_BD_PARSE)
00E8A3 03E8A3 27 0A                                   BEQ     DONE            ;1/3 cycs       ;search done             (SCI_BD_PARSE)
00E8A5 03E8A5 AE 75                                   CPX     6,Y+            ;  3 cycs       ;check if pulse length is shorter than lower boundary (SCI_BD_PARSE)
00E8A7 03E8A7 25 F8                                   BLO     LOOP            ;1/3 cycs       ;pulse length is shorter than lower boundary -> try a shorter range (SCI_BD_PARSE)
00E8A9 03E8A9 EC 5C                                   LDD     -4,Y            ;  3 cycs       ;new lowest boundary found -> store valid baud rate field in index X (SCI_BD_PARSE)
00E8AB 03E8AB ED 5E                                   LDY     -2,Y            ;  3 cycs       ;switch to the branch with higher compare values (SCI_BD_PARSE)
00E8AD 03E8AD 26 F2                                   BNE     LOOP            ;1/3 cycs       ;parse branch if it exists (SCI_BD_PARSE)
00E8AF 03E8AF -> $E8AF                DONE            EQU     *                               ;done, result in X       (SCI_BD_PARSE)
                                                              ;Update list of potential batd rates (matching baud rates in D)
00E8AF 03E8AF 14 10                                           SEI
00E8B1 03E8B1 F4 14 72                                        ANDB    SCI_BD_LIST                             ;remove mismatching baud rates from the list
00E8B4 03E8B4 27 1B                                           BEQ     SCI_ISR_BD_NEPE_5                       ;no valid baud rate found
00E8B6 03E8B6 7B 14 72                                        STAB    SCI_BD_LIST
                                                              ;Check if baud rate has been determined (potential baud rates in B (not zero))
00E8B9 03E8B9 87                                              CLRA
00E8BA 03E8BA 42                      SCI_ISR_BD_NEPE_3       INCA
00E8BB 03E8BB 54                                              LSRB
00E8BC 03E8BC 24 FC                                           BCC     SCI_ISR_BD_NEPE_3
00E8BE 03E8BE 27 1D                                           BEQ     SCI_ISR_BD_NEPE_6                       ;new baud rate found (index in A)
                                                              ;Done
00E8C0 03E8C0 MACRO                   SCI_ISR_BD_NEPE_4       ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00E8C0 03E8C0 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00E8C3 03E8C3 25 06                                           BLO     OF                                               (ISTACK_RTI)
00E8C5 03E8C5 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00E8C8 03E8C8 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00E8CA 03E8CA 0B                                              RTI                                                      (ISTACK_RTI)
00E8CB 03E8CB 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00E8CE 03E8CE 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;No valid baud rate found
00E8D1 03E8D1 1F 14 72 FF EA          SCI_ISR_BD_NEPE_5       BRCLR   SCI_BD_LIST, #$FF, SCI_ISR_BD_NEPE_4    ;done
                                                              ;Restart baud rate detection
00E8D6 03E8D6 18 0B FF 14 72                                  MOVB    #$FF, SCI_BD_LIST
00E8DB 03E8DB 20 E3                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
                                                              ;New baud rate found (index+1 in A, $00 in B)
00E8DD 03E8DD MACRO                   SCI_ISR_BD_NEPE_6       SCI_STOP_BD
                                      ;Stop baud rate detection                                                        (SCI_STOP_BD)
                                      ; args:   none                                                                   (SCI_STOP_BD)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD)
00E8DD 03E8DD 1F 14 72 FF 0E                                  BRCLR   SCI_BD_LIST, #$FF, DONE                 ;baud rate detection already inactive (SCI_STOP_BD)
                                                              ;Stop edge detection                                     (SCI_STOP_BD)
00E8E2 03E8E2 MACRO                                           SCI_BD_STOP_EDGE_DETECT                                  (SCI_STOP_BD)
                                      ;Stop edge detection                                                             (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; args:   none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                      ;         X, and Y are preserved                                                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;BCLR   TCTL3, #(SCI_BD_TCTL3_VAL>>8)           ;stop edge detection (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
00E8E2 03E8E2 4D 4B 09                                        BCLR    TCTL4, #(SCI_BD_TCTL3_VAL&$00FF)                 (SCI_STOP_BD/SCI_BD_STOP_EDGE_DETECT)
                                                              ;Disable timer                                           (SCI_STOP_BD)
00E8E5 03E8E5 MACRO                                           TIM_MULT_DIS    ((1<<SCI_BD_ICPE)|(1<<SCI_BD_ICNE)|(1<<SCI_BD_OC)) (SCI_STOP_BD)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_BD/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_BD/TIM_MULT_DIS)
00E8E5 03E8E5 4D 4C 07                                        BCLR    TIE, #\1                                         (SCI_STOP_BD/TIM_MULT_DIS)
00E8E8 03E8E8 26 03                                           BNE     DONE                                             (SCI_STOP_BD/TIM_MULT_DIS)
00E8EA 03E8EA 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_BD/TIM_MULT_DIS)
00E8ED 03E8ED -> $E8ED                DONE                    EQU     *                                                (SCI_STOP_BD/TIM_MULT_DIS)
                                      ;                                                                       ;See  SCI_ISR_RX_2 (SCI_STOP_BD)
00E8ED 03E8ED 79 14 72                                        CLR     SCI_BD_LIST                             ;clear check list (SCI_STOP_BD)
00E8F0 03E8F0 -> $E8F0                DONE                    EQU     *                                                (SCI_STOP_BD)
                                                              ;Set baud rate (index+1 in A, $00 in B)
00E8F0 03E8F0 48                                              LSLA                                            ;index -> addess offset
00E8F1 03E8F1 CE F5 02                                        LDX     #SCI_BTAB-2                             ;look up prescaler value
00E8F4 03E8F4 EC E4                                           LDD     A,X                                     ;look up divider value
00E8F6 03E8F6 MACRO                                           SCI_SET_BAUD
                                      ;#Set baud rate                                                                  (SCI_SET_BAUD)
                                      ; args:   D: new SCIBD value                                                     (SCI_SET_BAUD)
                                      ; result: none                                                                   (SCI_SET_BAUD)
                                      ; SSTACK: 6 bytes                                                                (SCI_SET_BAUD)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD)
00E8F6 03E8F6 MACRO                                           SSTACK_JOBSR    SCI_SET_BAUD, 6                          (SCI_SET_BAUD)
                                      ;#Check stack and call subroutine                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_SET_BAUD/SSTACK_JOBSR)
00E8F6 03E8F6 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
00E8F6 03E8F6 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E8F6 03E8F6 8F 14 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E8F9 03E8F9 18 25 FB 9A                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E8FD 03E8FD 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E900 03E900 18 22 FB 99                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E904 03E904 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E904 03E904 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_SET_BAUD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E904 03E904 16 E7 1B                                        JOBSR   \1                                               (SCI_SET_BAUD/SSTACK_JOBSR)
                                      ;#ifmac SCI_ERRSIG_STOP
                                      ;                       ;Clear error signal
                                      ;                       SCI_ERRSIG_STOP
                                      ;#endif
00E907 03E907 20 B7                                           JOB     SCI_ISR_BD_NEPE_4                       ;done
00E909 03E909 -> $E909                SCI_CODE_END            EQU     *
00E909 03E909 -> $3E909               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F504 03F504                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
00F504 03F504                                                 ALIGN   1, $FF
                                                              ;List of prescaler values
00F504 03F504 -> $F504                SCI_BTAB                EQU     *
00F504 03F504 01 46                                           DW      SCI_4800
00F506 03F506 00 D9                                           DW      SCI_7200
00F508 03F508 00 A3                                           DW      SCI_9600
00F50A 03F50A 00 6D                                           DW      SCI_14400
00F50C 03F50C 00 51                                           DW      SCI_19200
00F50E 03F50E 00 36                                           DW      SCI_28800
00F510 03F510 00 29                                           DW      SCI_38400
00F512 03F512 00 1B                                           DW      SCI_57600
00F514 03F514 -> $F514                SCI_BTAB_END            EQU     *
                                                              ;Search tree for low pulses
00F514 03F514 MACRO                   SCI_BD_LOW_PULSE_TREE   SCI_BD_LOW_PULSE_TREE
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# S12CBase - SCI Baud Detection Search Trees                                  # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Copyright 2009-2012 Dirk Heisswolf                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    families.                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    it under the terms of the GNU General Public License as published by     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    the Free Software Foundation, either version 3 of the License, or        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    (at your option) any later version.                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    S12CBase is distributed in the hope that it will be useful,              # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    GNU General Public License for more details.                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    You should have received a copy of the GNU General Public License        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Description:                                                                # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    This file contains the two search trees which are required for the SCI   # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    modules baud rate detection.                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    One is used to determine the set of baud rates that are valid for a      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    certain high pulse.                                                      # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The other one is used to determine the set of baud rates that are valid  # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    for a certain low pulse.                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    Each table assigs a set of valid baud rates to a range of pulse lengths. # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    lower boundary <= pulse length < upper boundary -> set of baud rates     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    The format of a node entry is the following:                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    start of entry -> | lower boundary  | value of lower boundary            # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  BRs   |  BRs   | set of boud rates - twice          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   | pointer to node with longer        # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+ boundary value                     # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    node node with -> | lower boundary  |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    even lower        +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#    boundary value    |  BRs   |  BRs   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      |  node pointer   |                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                      +--------+--------+                                    # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                             # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Generated on Thu, Nov 15 2012                                               # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Bus clock:              25.00 MHz                                           # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Frame format:           8N1                                                 # (SCI_BD_LOW_PULSE_TREE)
                                      ;# Supported baud rates:                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        4800 ( 146)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        7200 (  D9)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                        9600 (  A3)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       14400 (  6D)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       19200 (  51)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       28800 (  36)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       38400 (  29)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;#                       57600 (  1B)                                          # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;# Low pulse search tree                                                       # (SCI_BD_LOW_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_LOW_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_LOW_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    271 ( 10F)      1 . . . . . . . (80)   2001      2       27                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    416 ( 1A0)      1 1 . . . . . . (C0)   1621      1       35                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    542 ( 21E)      1 1 1 . . . . . (E0)   1091      3       44                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    624 ( 270)      . 1 1 . . . . . (60)    428      2       52                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    705 ( 2C1)      2 1 1 . . . . . (E0)    379      4       69                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    813 ( 32D)      2 1 1 1 . . . . (F0)    248      5       86                (SCI_BD_LOW_PULSE_TREE)
                                      ;#    959 ( 3BF)      2 . 1 1 . . . . (B0)     70      6       95                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1058 ( 422)      . . 1 1 . . . . (30)     24      3       99                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1083 ( 43B)      . 2 1 1 . . . . (70)     31      8      108                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1095 ( 447)      . 2 1 1 1 . . . (78)     38      7       98                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1139 ( 473)      3 2 1 1 1 . . . (F8)     36      6      106                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1248 ( 4E0)      3 2 . 1 1 . . . (D8)     15      8      123                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1410 ( 582)      3 2 2 1 1 . . . (F8)      9      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1492 ( 5D4)      . 2 2 1 1 . . . (78)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1573 ( 625)      4 2 2 1 1 . . . (F8)      6      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1626 ( 65A)      4 . 2 1 1 . . . (B8)      4     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1637 ( 665)      4 . 2 1 1 1 . . (BC)      5      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1750 ( 6D6)      4 3 2 1 1 1 . . (FC)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1872 ( 750)      4 3 2 . 1 1 . . (EC)      5      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   1926 ( 786)      . 3 2 . 1 1 . . (6C)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2007 ( 7D7)      5 3 2 . 1 1 . . (EC)      5      5      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2115 ( 843)      5 3 2 2 1 1 . . (FC)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2116 ( 844)      5 3 . 2 1 1 . . (DC)      5      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2170 ( 87A)      5 3 . 2 1 1 1 . (DE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2278 ( 8E6)      5 3 3 2 1 1 1 . (FE)      7      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2293 ( 8F5)      5 . 3 2 1 1 1 . (BE)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2361 ( 939)      . . 3 2 1 1 1 . (3E)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2418 ( 972)      . 4 3 2 1 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2441 ( 989)      6 4 3 2 1 1 1 . (FE)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2519 ( 9D7)      6 4 3 2 . 1 1 . (F6)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2795 ( AEB)      . 4 3 2 . 1 1 . (76)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2847 ( B1F)      . 4 3 2 2 1 1 . (7E)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2875 ( B3B)      7 4 3 2 2 1 1 . (FE)      7      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2960 ( B90)      7 . 3 2 2 1 1 . (BE)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   2984 ( BA8)      7 . . 2 2 1 1 . (9E)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3085 ( C0D)      7 5 . 2 2 1 1 . (DE)      6      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3146 ( C4A)      7 5 4 2 2 1 1 . (FE)      7     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3174 ( C66)      7 5 4 . 2 1 1 . (EE)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3229 ( C9D)      . 5 4 . 2 1 1 . (6E)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3265 ( CC1)      . 5 4 . 2 1 1 1 (6F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3309 ( CED)      8 5 4 . 2 1 1 1 (EF)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3417 ( D59)      8 5 4 3 2 1 1 1 (FF)      8      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3628 ( E2C)      8 . 4 3 2 1 1 1 (BF)      7      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3663 ( E4F)      . . 4 3 2 1 1 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3743 ( E9F)      9 . 4 3 2 1 1 1 (BF)      7      9      139                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3752 ( EA8)      9 6 4 3 2 1 1 1 (FF)      8      8      137                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3767 ( EB7)      9 6 4 3 2 . 1 1 (FB)      7      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   3852 ( F0C)      9 6 . 3 2 . 1 1 (DB)      6     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4014 ( FAE)      9 6 5 3 2 . 1 1 (FB)      7      4      126                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4097 (1001)      . 6 5 3 2 . 1 1 (7B)      6     10      135                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4257 (10A1)      . 6 5 3 2 2 1 1 (7F)      7      9      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4271 (10AF)      . 6 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4295 (10C7)      . . 5 3 . 2 1 1 (37)      5      8      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4419 (1143)      . 7 5 3 . 2 1 1 (77)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4476 (117C)      . 7 5 . . 2 1 1 (67)      5      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4599 (11F7)      . 7 5 . 3 2 1 1 (6F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4720 (1270)      . 7 5 4 3 2 1 1 (7F)      7      7      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4721 (1271)      . 7 . 4 3 2 1 1 (5F)      6     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4882 (1312)      . 7 6 4 3 2 1 1 (7F)      7      9      132                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4962 (1362)      . . 6 4 3 2 1 1 (3F)      6      8      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   4992 (1380)      . . 6 4 3 2 . 1 (3D)      5     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5086 (13DE)      . 8 6 4 3 2 . 1 (7D)      6      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5589 (15D5)      . 8 . 4 3 2 . 1 (5D)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5629 (15FD)      . . . 4 3 2 . 1 (1D)      4      6      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5642 (160A)      . . . 4 3 2 2 1 (1F)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5750 (1676)      . . 7 4 3 2 2 1 (3F)      6      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5753 (1679)      . 9 7 4 3 2 2 1 (7F)      7     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   5778 (1692)      . 9 7 . 3 2 2 1 (6F)      6      8      130                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6022 (1786)      . 9 7 5 3 2 2 1 (7F)      7      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6023 (1787)      . 9 7 5 . 2 2 1 (77)      6     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6296 (1898)      . . 7 5 . 2 2 1 (37)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6351 (18CF)      . . 7 5 4 2 2 1 (3F)      6     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6387 (18F3)      . . 7 5 4 . 2 1 (3B)      5      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6457 (1939)      . . . 5 4 . 2 1 (1B)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6618 (19DA)      . . 8 5 4 . 2 1 (3B)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   6877 (1ADD)      . . 8 5 4 3 2 1 (3F)      6      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7081 (1BA9)      . . 8 . 4 3 2 1 (2F)      5     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7324 (1C9C)      . . 8 6 4 3 2 1 (3F)      6      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7325 (1C9D)      . . . 6 4 3 2 1 (1F)      5     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7486 (1D3E)      . . 9 6 4 3 2 1 (3F)      6      5      133                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7510 (1D56)      . . 9 6 4 3 2 . (3E)      5     10      142                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   7775 (1E5F)      . . 9 6 . 3 2 . (36)      4      9      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8103 (1FA7)      . . 9 6 5 3 2 . (3E)      5     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8193 (2001)      . . . 6 5 3 2 . (1E)      4     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8383 (20BF)      . . . . 5 3 2 . ( E)      3      8      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8464 (2110)      . . . . 5 3 . . ( C)      2     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8489 (2129)      . . . . 5 3 . 2 ( D)      3     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   8626 (21B2)      . . . 7 5 3 . 2 (1D)      4      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9007 (232F)      . . . 7 5 . . 2 (19)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9114 (239A)      . . . 7 5 . 3 2 (1B)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9498 (251A)      . . . 7 5 4 3 2 (1F)      5      7      140                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9528 (2538)      . . . 7 . 4 3 2 (17)      4     10      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9685 (25D5)      . . . . . 4 3 2 ( 7)      3     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9855 (267F)      . . . . 6 4 3 2 ( F)      4      9      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#   9928 (26C8)      . . . 8 6 4 3 2 (1F)      5     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  10987 (2AEB)      . . . . 6 4 3 2 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11230 (2BDE)      . . . 9 6 4 3 2 (1F)      5      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11280 (2C10)      . . . 9 . 4 3 2 (17)      4     10      156                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11607 (2D57)      . . . 9 7 4 3 2 (1F)      5      9      154                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11627 (2D6B)      . . . 9 7 . 3 2 (1B)      4     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  11936 (2EA0)      . . . 9 7 . . 2 (19)      3     11      180                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12118 (2F56)      . . . 9 7 5 . 2 (1D)      4      6      150                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12289 (3001)      . . . . 7 5 . 2 ( D)      3     11      159                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12586 (312A)      . . . . 7 5 4 2 ( F)      4     10      149                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  12735 (31BF)      . . . . 7 5 4 . ( E)      3      9      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13032 (32E8)      . . . . . 5 4 . ( 6)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13359 (342F)      . . . . 8 5 4 . ( E)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  13713 (3591)      . . . . 8 5 4 3 ( F)      4     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14248 (37A8)      . . . . 8 . 4 3 ( B)      3      8      147                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14738 (3992)      . . . . 8 6 4 3 ( F)      4     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  14784 (39C0)      . . . . . 6 4 3 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15111 (3B07)      . . . . 9 6 4 3 ( F)      4      9      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  15408 (3C30)      . . . . 9 6 . 3 ( D)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16059 (3EBB)      . . . . 9 6 5 3 ( F)      4     10      163                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16536 (4098)      . . . . . 6 5 3 ( 7)      3      7      157                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  16868 (41E4)      . . . . . . 5 3 ( 3)      2     11      166                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17358 (43CE)      . . . . . 7 5 3 ( 7)      3     10      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  17959 (4627)      . . . . . 7 5 . ( 6)      2     11      181                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18881 (49C1)      . . . . . 7 . . ( 4)      1     12      190                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  18938 (49FA)      . . . . . 7 . 4 ( 5)      2      9      174                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19488 (4C20)      . . . . . . . 4 ( 1)      1     12      183                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19531 (4C4B)      . . . . . . 6 4 ( 3)      2     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  19978 (4E0A)      . . . . . 8 6 4 ( 7)      3     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22108 (565C)      . . . . . . 6 4 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22353 (5751)      . . . . . . . 4 ( 1)      1     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  22598 (5846)      . . . . . 9 . 4 ( 5)      2      8      164                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23003 (59DB)      . . . . . 9 7 4 ( 7)      3     11      173                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  23183 (5A8F)      . . . . . 9 7 . ( 6)      2     10      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24162 (5E62)      . . . . . 9 7 5 ( 7)      3     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  24728 (6098)      . . . . . . 7 5 ( 3)      2     12      197                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  25825 (64E1)      . . . . . . . 5 ( 1)      1      9      171                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  26475 (676B)      . . . . . . 8 5 ( 3)      2     11      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  28408 (6EF8)      . . . . . . 8 . ( 2)      1     12      215                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29297 (7271)      . . . . . . . . ( 0)      0     14      224                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29386 (72CA)      . . . . . . . 6 ( 1)      1     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  29947 (74FB)      . . . . . . 9 6 ( 3)      2     10      188                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  32770 (8002)      . . . . . . . 6 ( 1)      1     12      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  33632 (8360)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  34611 (8733)      . . . . . . . 7 ( 1)      1     11      205                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  38856 (97C8)      . . . . . . . . ( 0)      0     13      214                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  39835 (9B9B)      . . . . . . . 8 ( 1)      1     12      222                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  44081 (AC31)      . . . . . . . . ( 0)      0     14      231                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  45059 (B003)      . . . . . . . 9 ( 1)      1     13      229                (SCI_BD_LOW_PULSE_TREE)
                                      ;#  49305 (C099)      . . . . . . . . ( 0)      0     14      238                (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      1                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#      A                                                                        (SCI_BD_LOW_PULSE_TREE)
                                      ;#+-----0-----+                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#|           |                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#1           2                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#0           7                                                                  (SCI_BD_LOW_PULSE_TREE)
                                      ;#F +---------0----------+                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  |                    |                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  2                    4                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  1                    2                                                       (SCI_BD_LOW_PULSE_TREE)
                                      ;#  E +------------------2------------------+                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |                                     |                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2                                     F                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    C                                     A                                    (SCI_BD_LOW_PULSE_TREE)
                                      ;#    1            +------------------------E-----------------------+            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                |            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |            |                                                1            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3            7                                                D            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    2            D                                                3            (SCI_BD_LOW_PULSE_TREE)
                                      ;#    D  +---------7--------+                        +--------------E---------------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        |                              | (SCI_BD_LOW_PULSE_TREE)
                                      ;#    |  |                  |                        1                              2 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    3  4                  C                        5                              F (SCI_BD_LOW_PULSE_TREE)
                                      ;#    B  7                  0                        F                              5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#    F +3-+          +-----D-----+           +------D-----+               +--------6---------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           |            |               |                  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      |  |          |           |           1            1               2                  4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  6          9           E           2            8               5                  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4  2          8           2           7            9               1                  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      7 +5-+     +--9---+     +-C--+     +--0--+      +--8---+       +---A---+        +-----8------+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     |     |      |      |       |       |        |            | (SCI_BD_LOW_PULSE_TREE)
                                      ;#      | |  |     |      |     |    |     1     1      1      1       2       2        3            5 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      4 4  6     8      B     C    E     0     3      6      A       0       B        7            8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      3 E  D     E      3     C    A     C     6      9      D       B       D        A            4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#      B 0 +6+  +-6-+   +B-+  +1-+ +8+  +-7-+  +2-+   +2-+  +-D-+   +-F-+   +-E-+   +--8--+     +---6---+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  |   |  |  |   |  |  |   |   |   |   |   |   |     |     |       | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | |  |   |   |  |  |  | | |  1   1  1  1   1  1  1   1   1   2   2   2   3     3     4       6 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7  8   9   A  B  C  D E E  0   1  3  3   6  7  8   C   E   1   6   D   1     B     9       4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        8 6 5  4   3   E  9  6  5 9 B  A   7  1  D   7  8  F   9   5   B   7   5   B     0     F       E (SCI_BD_LOW_PULSE_TREE)
                                      ;#        2 5 0 +4+ +9+ +B+ 0 +6+ 9 F 7 +1+ +C+ 2 +E+ +6+ 6 +3+ +C+ +F+ +2+ +F+ +7+ +F-+  +7+  +-A-+   +-1-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |  |  | |  |   |   |   | (SCI_BD_LOW_PULSE_TREE)
                                      ;#        | | | | | | | | | | | | | | | 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3  3  3 3  4   4   5   7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        5 6 7 8 8 8 9 9 B B C C C E F 0 0 1 1 2 3 5 6 6 7 8 9 B C D F 1 3 5 6 C D 1  4  9 E  3   E   A   4 (SCI_BD_LOW_PULSE_TREE)
                                      ;#        D 5 8 4 7 F 7 D 1 A 4 9 E 4 0 0 A 4 F 7 8 D 0 7 8 C D A 9 5 A 2 9 3 C 1 6 2  2  9 B  C   0   8   F (SCI_BD_LOW_PULSE_TREE)
                                      ;#        4 A 6 3 A 5 2 7 F 8 A D D F C 1 F 3 7 1 0 5 A 9 7 F A 9 D 6 7 9 A 8 8 0 B A +F+ 2 B +E+ +A+ +F+ +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            |       | | | | |   | | | | | | | | | | | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            1       2 2 2 2 2   2 3 3 3 3 3 4 4 4 5 5 5 6  8 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       0 1 3 5 A   E 0 2 5 9 C 1 6 C 6 9 E 7  7 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            3       0 1 2 D E   A 0 E 9 C 3 E 2 4 5 D 6 6  3 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                            9       1 0 F 5 B   0 1 8 1 0 0 4 7 B C B 2 B +3-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              | | |   | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              4 4 5   6 6 8  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              9 C 7   0 E 0  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              C 2 5   9 F 0  9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                              1 0 1   8 8 2 +B-+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        | | |  | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7 8 9  B (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2 3 7  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        C 6 C  0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        A 0 8 +3+ (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        |     | | (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     A C (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        2     C 0 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        7     3 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                                                        1     1 9 (SCI_BD_LOW_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_LOW_PULSE_TREE)
00F514 03F514 01 A0 C0 C0 F5 22       N__1A0          DW      $01A0   $C0C0   N__270          ;if pulse >= 416 then check N__270 else check N__10F (SCI_BD_LOW_PULSE_TREE)
00F51A 03F51A 01 0F 80 80 00 00       N__10F          DW      $010F   $8080   $0000           ;if pulse >= 271 then the result is 80 else the result is 00 (SCI_BD_LOW_PULSE_TREE)
00F520 03F520 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F522 03F522 02 70 60 60 F5 30       N__270          DW      $0270   $6060   N__422          ;if pulse >= 624 then check N__422 else check N__21E (SCI_BD_LOW_PULSE_TREE)
00F528 03F528 02 1E E0 E0 00 00       N__21E          DW      $021E   $E0E0   $0000           ;if pulse >= 542 then the result is E0 else the result is C0 (SCI_BD_LOW_PULSE_TREE)
00F52E 03F52E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F530 03F530 04 22 30 30 F5 4E       N__422          DW      $0422   $3030   N__FAE          ;if pulse >= 1058 then check N__FAE else check N__2C1 (SCI_BD_LOW_PULSE_TREE)
00F536 03F536 02 C1 E0 E0 F5 3E       N__2C1          DW      $02C1   $E0E0   N__32D          ;if pulse >= 705 then check N__32D else the result is 60 (SCI_BD_LOW_PULSE_TREE)
00F53C 03F53C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F53E 03F53E 03 2D F0 F0 F5 46       N__32D          DW      $032D   $F0F0   N__3BF          ;if pulse >= 813 then check N__3BF else the result is E0 (SCI_BD_LOW_PULSE_TREE)
00F544 03F544 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F546 03F546 03 BF B0 B0 00 00       N__3BF          DW      $03BF   $B0B0   $0000           ;if pulse >= 959 then the result is B0 else the result is F0 (SCI_BD_LOW_PULSE_TREE)
00F54C 03F54C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F54E 03F54E 0F AE FB FB F6 6E       N__FAE          DW      $0FAE   $FBFB   N_1D3E          ;if pulse >= 4014 then check N_1D3E else check N__7D7 (SCI_BD_LOW_PULSE_TREE)
00F554 03F554 07 D7 EC EC F5 B0       N__7D7          DW      $07D7   $ECEC   N__C0D          ;if pulse >= 2007 then check N__C0D else check N__473 (SCI_BD_LOW_PULSE_TREE)
00F55A 03F55A 04 73 F8 F8 F5 6E       N__473          DW      $0473   $F8F8   N__625          ;if pulse >= 1139 then check N__625 else check N__447 (SCI_BD_LOW_PULSE_TREE)
00F560 03F560 04 47 78 78 00 00       N__447          DW      $0447   $7878   $0000           ;if pulse >= 1095 then the result is 78 else check N__43B (SCI_BD_LOW_PULSE_TREE)
00F566 03F566 04 3B 70 70 00 00       N__43B          DW      $043B   $7070   $0000           ;if pulse >= 1083 then the result is 70 else the result is 30 (SCI_BD_LOW_PULSE_TREE)
00F56C 03F56C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F56E 03F56E 06 25 F8 F8 F5 8C       N__625          DW      $0625   $F8F8   N__6D6          ;if pulse >= 1573 then check N__6D6 else check N__4E0 (SCI_BD_LOW_PULSE_TREE)
00F574 03F574 04 E0 D8 D8 F5 7C       N__4E0          DW      $04E0   $D8D8   N__582          ;if pulse >= 1248 then check N__582 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
00F57A 03F57A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F57C 03F57C 05 82 F8 F8 F5 84       N__582          DW      $0582   $F8F8   N__5D4          ;if pulse >= 1410 then check N__5D4 else the result is D8 (SCI_BD_LOW_PULSE_TREE)
00F582 03F582 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F584 03F584 05 D4 78 78 00 00       N__5D4          DW      $05D4   $7878   $0000           ;if pulse >= 1492 then the result is 78 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
00F58A 03F58A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F58C 03F58C 06 D6 FC FC F5 A0       N__6D6          DW      $06D6   $FCFC   N__750          ;if pulse >= 1750 then check N__750 else check N__665 (SCI_BD_LOW_PULSE_TREE)
00F592 03F592 06 65 BC BC 00 00       N__665          DW      $0665   $BCBC   $0000           ;if pulse >= 1637 then the result is BC else check N__65A (SCI_BD_LOW_PULSE_TREE)
00F598 03F598 06 5A B8 B8 00 00       N__65A          DW      $065A   $B8B8   $0000           ;if pulse >= 1626 then the result is B8 else the result is F8 (SCI_BD_LOW_PULSE_TREE)
00F59E 03F59E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5A0 03F5A0 07 50 EC EC F5 A8       N__750          DW      $0750   $ECEC   N__786          ;if pulse >= 1872 then check N__786 else the result is FC (SCI_BD_LOW_PULSE_TREE)
00F5A6 03F5A6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5A8 03F5A8 07 86 6C 6C 00 00       N__786          DW      $0786   $6C6C   $0000           ;if pulse >= 1926 then the result is 6C else the result is EC (SCI_BD_LOW_PULSE_TREE)
00F5AE 03F5AE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5B0 03F5B0 0C 0D DE DE F6 1A       N__C0D          DW      $0C0D   $DEDE   N__E2C          ;if pulse >= 3085 then check N__E2C else check N__989 (SCI_BD_LOW_PULSE_TREE)
00F5B6 03F5B6 09 89 FE FE F5 EE       N__989          DW      $0989   $FEFE   N__B3B          ;if pulse >= 2441 then check N__B3B else check N__8E6 (SCI_BD_LOW_PULSE_TREE)
00F5BC 03F5BC 08 E6 FE FE F5 D8       N__8E6          DW      $08E6   $FEFE   N__939          ;if pulse >= 2278 then check N__939 else check N__844 (SCI_BD_LOW_PULSE_TREE)
00F5C2 03F5C2 08 44 DC DC F5 D0       N__844          DW      $0844   $DCDC   N__87A          ;if pulse >= 2116 then check N__87A else check N__843 (SCI_BD_LOW_PULSE_TREE)
00F5C8 03F5C8 08 43 FC FC 00 00       N__843          DW      $0843   $FCFC   $0000           ;if pulse >= 2115 then the result is FC else the result is EC (SCI_BD_LOW_PULSE_TREE)
00F5CE 03F5CE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5D0 03F5D0 08 7A DE DE 00 00       N__87A          DW      $087A   $DEDE   $0000           ;if pulse >= 2170 then the result is DE else the result is DC (SCI_BD_LOW_PULSE_TREE)
00F5D6 03F5D6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5D8 03F5D8 09 39 3E 3E F5 E6       N__939          DW      $0939   $3E3E   N__972          ;if pulse >= 2361 then check N__972 else check N__8F5 (SCI_BD_LOW_PULSE_TREE)
00F5DE 03F5DE 08 F5 BE BE 00 00       N__8F5          DW      $08F5   $BEBE   $0000           ;if pulse >= 2293 then the result is BE else the result is FE (SCI_BD_LOW_PULSE_TREE)
00F5E4 03F5E4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5E6 03F5E6 09 72 7E 7E 00 00       N__972          DW      $0972   $7E7E   $0000           ;if pulse >= 2418 then the result is 7E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
00F5EC 03F5EC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F5EE 03F5EE 0B 3B FE FE F6 0A       N__B3B          DW      $0B3B   $FEFE   N__B90          ;if pulse >= 2875 then check N__B90 else check N__AEB (SCI_BD_LOW_PULSE_TREE)
00F5F4 03F5F4 0A EB 76 76 F6 02       N__AEB          DW      $0AEB   $7676   N__B1F          ;if pulse >= 2795 then check N__B1F else check N__9D7 (SCI_BD_LOW_PULSE_TREE)
00F5FA 03F5FA 09 D7 F6 F6 00 00       N__9D7          DW      $09D7   $F6F6   $0000           ;if pulse >= 2519 then the result is F6 else the result is FE (SCI_BD_LOW_PULSE_TREE)
00F600 03F600 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F602 03F602 0B 1F 7E 7E 00 00       N__B1F          DW      $0B1F   $7E7E   $0000           ;if pulse >= 2847 then the result is 7E else the result is 76 (SCI_BD_LOW_PULSE_TREE)
00F608 03F608 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F60A 03F60A 0B 90 BE BE F6 12       N__B90          DW      $0B90   $BEBE   N__BA8          ;if pulse >= 2960 then check N__BA8 else the result is FE (SCI_BD_LOW_PULSE_TREE)
00F610 03F610 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F612 03F612 0B A8 9E 9E 00 00       N__BA8          DW      $0BA8   $9E9E   $0000           ;if pulse >= 2984 then the result is 9E else the result is BE (SCI_BD_LOW_PULSE_TREE)
00F618 03F618 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F61A 03F61A 0E 2C BF BF F6 4A       N__E2C          DW      $0E2C   $BFBF   N__EA8          ;if pulse >= 3628 then check N__EA8 else check N__CC1 (SCI_BD_LOW_PULSE_TREE)
00F620 03F620 0C C1 6F 6F F6 3C       N__CC1          DW      $0CC1   $6F6F   N__D59          ;if pulse >= 3265 then check N__D59 else check N__C66 (SCI_BD_LOW_PULSE_TREE)
00F626 03F626 0C 66 EE EE F6 34       N__C66          DW      $0C66   $EEEE   N__C9D          ;if pulse >= 3174 then check N__C9D else check N__C4A (SCI_BD_LOW_PULSE_TREE)
00F62C 03F62C 0C 4A FE FE 00 00       N__C4A          DW      $0C4A   $FEFE   $0000           ;if pulse >= 3146 then the result is FE else the result is DE (SCI_BD_LOW_PULSE_TREE)
00F632 03F632 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F634 03F634 0C 9D 6E 6E 00 00       N__C9D          DW      $0C9D   $6E6E   $0000           ;if pulse >= 3229 then the result is 6E else the result is EE (SCI_BD_LOW_PULSE_TREE)
00F63A 03F63A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F63C 03F63C 0D 59 FF FF 00 00       N__D59          DW      $0D59   $FFFF   $0000           ;if pulse >= 3417 then the result is FF else check N__CED (SCI_BD_LOW_PULSE_TREE)
00F642 03F642 0C ED EF EF 00 00       N__CED          DW      $0CED   $EFEF   $0000           ;if pulse >= 3309 then the result is EF else the result is 6F (SCI_BD_LOW_PULSE_TREE)
00F648 03F648 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F64A 03F64A 0E A8 FF FF F6 5E       N__EA8          DW      $0EA8   $FFFF   N__EB7          ;if pulse >= 3752 then check N__EB7 else check N__E9F (SCI_BD_LOW_PULSE_TREE)
00F650 03F650 0E 9F BF BF 00 00       N__E9F          DW      $0E9F   $BFBF   $0000           ;if pulse >= 3743 then the result is BF else check N__E4F (SCI_BD_LOW_PULSE_TREE)
00F656 03F656 0E 4F 3F 3F 00 00       N__E4F          DW      $0E4F   $3F3F   $0000           ;if pulse >= 3663 then the result is 3F else the result is BF (SCI_BD_LOW_PULSE_TREE)
00F65C 03F65C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F65E 03F65E 0E B7 FB FB F6 66       N__EB7          DW      $0EB7   $FBFB   N__F0C          ;if pulse >= 3767 then check N__F0C else the result is FF (SCI_BD_LOW_PULSE_TREE)
00F664 03F664 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F666 03F666 0F 0C DB DB 00 00       N__F0C          DW      $0F0C   $DBDB   $0000           ;if pulse >= 3852 then the result is DB else the result is FB (SCI_BD_LOW_PULSE_TREE)
00F66C 03F66C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F66E 03F66E 1D 3E 3F 3F F7 46       N_1D3E          DW      $1D3E   $3F3F   N_2F56          ;if pulse >= 7486 then check N_2F56 else check N_15FD (SCI_BD_LOW_PULSE_TREE)
00F674 03F674 15 FD 1D 1D F6 DC       N_15FD          DW      $15FD   $1D1D   N_1898          ;if pulse >= 5629 then check N_1898 else check N_1270 (SCI_BD_LOW_PULSE_TREE)
00F67A 03F67A 12 70 7F 7F F6 B2       N_1270          DW      $1270   $7F7F   N_1362          ;if pulse >= 4720 then check N_1362 else check N_10C7 (SCI_BD_LOW_PULSE_TREE)
00F680 03F680 10 C7 37 37 F6 9C       N_10C7          DW      $10C7   $3737   N_117C          ;if pulse >= 4295 then check N_117C else check N_10A1 (SCI_BD_LOW_PULSE_TREE)
00F686 03F686 10 A1 7F 7F F6 94       N_10A1          DW      $10A1   $7F7F   N_10AF          ;if pulse >= 4257 then check N_10AF else check N_1001 (SCI_BD_LOW_PULSE_TREE)
00F68C 03F68C 10 01 7B 7B 00 00       N_1001          DW      $1001   $7B7B   $0000           ;if pulse >= 4097 then the result is 7B else the result is FB (SCI_BD_LOW_PULSE_TREE)
00F692 03F692 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F694 03F694 10 AF 77 77 00 00       N_10AF          DW      $10AF   $7777   $0000           ;if pulse >= 4271 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F69A 03F69A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F69C 03F69C 11 7C 67 67 F6 AA       N_117C          DW      $117C   $6767   N_11F7          ;if pulse >= 4476 then check N_11F7 else check N_1143 (SCI_BD_LOW_PULSE_TREE)
00F6A2 03F6A2 11 43 77 77 00 00       N_1143          DW      $1143   $7777   $0000           ;if pulse >= 4419 then the result is 77 else the result is 37 (SCI_BD_LOW_PULSE_TREE)
00F6A8 03F6A8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6AA 03F6AA 11 F7 6F 6F 00 00       N_11F7          DW      $11F7   $6F6F   $0000           ;if pulse >= 4599 then the result is 6F else the result is 67 (SCI_BD_LOW_PULSE_TREE)
00F6B0 03F6B0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6B2 03F6B2 13 62 3F 3F F6 C6       N_1362          DW      $1362   $3F3F   N_13DE          ;if pulse >= 4962 then check N_13DE else check N_1312 (SCI_BD_LOW_PULSE_TREE)
00F6B8 03F6B8 13 12 7F 7F 00 00       N_1312          DW      $1312   $7F7F   $0000           ;if pulse >= 4882 then the result is 7F else check N_1271 (SCI_BD_LOW_PULSE_TREE)
00F6BE 03F6BE 12 71 5F 5F 00 00       N_1271          DW      $1271   $5F5F   $0000           ;if pulse >= 4721 then the result is 5F else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F6C4 03F6C4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6C6 03F6C6 13 DE 7D 7D F6 D4       N_13DE          DW      $13DE   $7D7D   N_15D5          ;if pulse >= 5086 then check N_15D5 else check N_1380 (SCI_BD_LOW_PULSE_TREE)
00F6CC 03F6CC 13 80 3D 3D 00 00       N_1380          DW      $1380   $3D3D   $0000           ;if pulse >= 4992 then the result is 3D else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F6D2 03F6D2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6D4 03F6D4 15 D5 5D 5D 00 00       N_15D5          DW      $15D5   $5D5D   $0000           ;if pulse >= 5589 then the result is 5D else the result is 7D (SCI_BD_LOW_PULSE_TREE)
00F6DA 03F6DA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6DC 03F6DC 18 98 37 37 F7 0E       N_1898          DW      $1898   $3737   N_1ADD          ;if pulse >= 6296 then check N_1ADD else check N_1692 (SCI_BD_LOW_PULSE_TREE)
00F6E2 03F6E2 16 92 6F 6F F6 FE       N_1692          DW      $1692   $6F6F   N_1786          ;if pulse >= 5778 then check N_1786 else check N_1676 (SCI_BD_LOW_PULSE_TREE)
00F6E8 03F6E8 16 76 3F 3F F6 F6       N_1676          DW      $1676   $3F3F   N_1679          ;if pulse >= 5750 then check N_1679 else check N_160A (SCI_BD_LOW_PULSE_TREE)
00F6EE 03F6EE 16 0A 1F 1F 00 00       N_160A          DW      $160A   $1F1F   $0000           ;if pulse >= 5642 then the result is 1F else the result is 1D (SCI_BD_LOW_PULSE_TREE)
00F6F4 03F6F4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6F6 03F6F6 16 79 7F 7F 00 00       N_1679          DW      $1679   $7F7F   $0000           ;if pulse >= 5753 then the result is 7F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F6FC 03F6FC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F6FE 03F6FE 17 86 7F 7F F7 06       N_1786          DW      $1786   $7F7F   N_1787          ;if pulse >= 6022 then check N_1787 else the result is 6F (SCI_BD_LOW_PULSE_TREE)
00F704 03F704 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F706 03F706 17 87 77 77 00 00       N_1787          DW      $1787   $7777   $0000           ;if pulse >= 6023 then the result is 77 else the result is 7F (SCI_BD_LOW_PULSE_TREE)
00F70C 03F70C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F70E 03F70E 1A DD 3F 3F F7 30       N_1ADD          DW      $1ADD   $3F3F   N_1C9C          ;if pulse >= 6877 then check N_1C9C else check N_18F3 (SCI_BD_LOW_PULSE_TREE)
00F714 03F714 18 F3 3B 3B F7 22       N_18F3          DW      $18F3   $3B3B   N_19DA          ;if pulse >= 6387 then check N_19DA else check N_18CF (SCI_BD_LOW_PULSE_TREE)
00F71A 03F71A 18 CF 3F 3F 00 00       N_18CF          DW      $18CF   $3F3F   $0000           ;if pulse >= 6351 then the result is 3F else the result is 37 (SCI_BD_LOW_PULSE_TREE)
00F720 03F720 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F722 03F722 19 DA 3B 3B 00 00       N_19DA          DW      $19DA   $3B3B   $0000           ;if pulse >= 6618 then the result is 3B else check N_1939 (SCI_BD_LOW_PULSE_TREE)
00F728 03F728 19 39 1B 1B 00 00       N_1939          DW      $1939   $1B1B   $0000           ;if pulse >= 6457 then the result is 1B else the result is 3B (SCI_BD_LOW_PULSE_TREE)
00F72E 03F72E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F730 03F730 1C 9C 3F 3F F7 3E       N_1C9C          DW      $1C9C   $3F3F   N_1C9D          ;if pulse >= 7324 then check N_1C9D else check N_1BA9 (SCI_BD_LOW_PULSE_TREE)
00F736 03F736 1B A9 2F 2F 00 00       N_1BA9          DW      $1BA9   $2F2F   $0000           ;if pulse >= 7081 then the result is 2F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F73C 03F73C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F73E 03F73E 1C 9D 1F 1F 00 00       N_1C9D          DW      $1C9D   $1F1F   $0000           ;if pulse >= 7325 then the result is 1F else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F744 03F744 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F746 03F746 2F 56 1D 1D F7 E2       N_2F56          DW      $2F56   $1D1D   N_4098          ;if pulse >= 12118 then check N_4098 else check N_251A (SCI_BD_LOW_PULSE_TREE)
00F74C 03F74C 25 1A 1F 1F F7 98       N_251A          DW      $251A   $1F1F   N_2BDE          ;if pulse >= 9498 then check N_2BDE else check N_20BF (SCI_BD_LOW_PULSE_TREE)
00F752 03F752 20 BF 0E 0E F7 76       N_20BF          DW      $20BF   $0E0E   N_21B2          ;if pulse >= 8383 then check N_21B2 else check N_1E5F (SCI_BD_LOW_PULSE_TREE)
00F758 03F758 1E 5F 36 36 F7 66       N_1E5F          DW      $1E5F   $3636   N_1FA7          ;if pulse >= 7775 then check N_1FA7 else check N_1D56 (SCI_BD_LOW_PULSE_TREE)
00F75E 03F75E 1D 56 3E 3E 00 00       N_1D56          DW      $1D56   $3E3E   $0000           ;if pulse >= 7510 then the result is 3E else the result is 3F (SCI_BD_LOW_PULSE_TREE)
00F764 03F764 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F766 03F766 1F A7 3E 3E F7 6E       N_1FA7          DW      $1FA7   $3E3E   N_2001          ;if pulse >= 8103 then check N_2001 else the result is 36 (SCI_BD_LOW_PULSE_TREE)
00F76C 03F76C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F76E 03F76E 20 01 1E 1E 00 00       N_2001          DW      $2001   $1E1E   $0000           ;if pulse >= 8193 then the result is 1E else the result is 3E (SCI_BD_LOW_PULSE_TREE)
00F774 03F774 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F776 03F776 21 B2 1D 1D F7 8A       N_21B2          DW      $21B2   $1D1D   N_239A          ;if pulse >= 8626 then check N_239A else check N_2129 (SCI_BD_LOW_PULSE_TREE)
00F77C 03F77C 21 29 0D 0D 00 00       N_2129          DW      $2129   $0D0D   $0000           ;if pulse >= 8489 then the result is 0D else check N_2110 (SCI_BD_LOW_PULSE_TREE)
00F782 03F782 21 10 0C 0C 00 00       N_2110          DW      $2110   $0C0C   $0000           ;if pulse >= 8464 then the result is 0C else the result is 0E (SCI_BD_LOW_PULSE_TREE)
00F788 03F788 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F78A 03F78A 23 9A 1B 1B 00 00       N_239A          DW      $239A   $1B1B   $0000           ;if pulse >= 9114 then the result is 1B else check N_232F (SCI_BD_LOW_PULSE_TREE)
00F790 03F790 23 2F 19 19 00 00       N_232F          DW      $232F   $1919   $0000           ;if pulse >= 9007 then the result is 19 else the result is 1D (SCI_BD_LOW_PULSE_TREE)
00F796 03F796 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F798 03F798 2B DE 1F 1F F7 C4       N_2BDE          DW      $2BDE   $1F1F   N_2D57          ;if pulse >= 11230 then check N_2D57 else check N_267F (SCI_BD_LOW_PULSE_TREE)
00F79E 03F79E 26 7F 0F 0F F7 B4       N_267F          DW      $267F   $0F0F   N_26C8          ;if pulse >= 9855 then check N_26C8 else check N_2538 (SCI_BD_LOW_PULSE_TREE)
00F7A4 03F7A4 25 38 17 17 F7 AC       N_2538          DW      $2538   $1717   N_25D5          ;if pulse >= 9528 then check N_25D5 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00F7AA 03F7AA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7AC 03F7AC 25 D5 07 07 00 00       N_25D5          DW      $25D5   $0707   $0000           ;if pulse >= 9685 then the result is 07 else the result is 17 (SCI_BD_LOW_PULSE_TREE)
00F7B2 03F7B2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7B4 03F7B4 26 C8 1F 1F F7 BC       N_26C8          DW      $26C8   $1F1F   N_2AEB          ;if pulse >= 9928 then check N_2AEB else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00F7BA 03F7BA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7BC 03F7BC 2A EB 0F 0F 00 00       N_2AEB          DW      $2AEB   $0F0F   $0000           ;if pulse >= 10987 then the result is 0F else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00F7C2 03F7C2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7C4 03F7C4 2D 57 1F 1F F7 D2       N_2D57          DW      $2D57   $1F1F   N_2D6B          ;if pulse >= 11607 then check N_2D6B else check N_2C10 (SCI_BD_LOW_PULSE_TREE)
00F7CA 03F7CA 2C 10 17 17 00 00       N_2C10          DW      $2C10   $1717   $0000           ;if pulse >= 11280 then the result is 17 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00F7D0 03F7D0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7D2 03F7D2 2D 6B 1B 1B F7 DA       N_2D6B          DW      $2D6B   $1B1B   N_2EA0          ;if pulse >= 11627 then check N_2EA0 else the result is 1F (SCI_BD_LOW_PULSE_TREE)
00F7D8 03F7D8 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7DA 03F7DA 2E A0 19 19 00 00       N_2EA0          DW      $2EA0   $1919   $0000           ;if pulse >= 11936 then the result is 19 else the result is 1B (SCI_BD_LOW_PULSE_TREE)
00F7E0 03F7E0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F7E2 03F7E2 40 98 07 07 F8 3C       N_4098          DW      $4098   $0707   N_5846          ;if pulse >= 16536 then check N_5846 else check N_37A8 (SCI_BD_LOW_PULSE_TREE)
00F7E8 03F7E8 37 A8 0B 0B F8 18       N_37A8          DW      $37A8   $0B0B   N_3B07          ;if pulse >= 14248 then check N_3B07 else check N_31BF (SCI_BD_LOW_PULSE_TREE)
00F7EE 03F7EE 31 BF 0E 0E F8 02       N_31BF          DW      $31BF   $0E0E   N_342F          ;if pulse >= 12735 then check N_342F else check N_312A (SCI_BD_LOW_PULSE_TREE)
00F7F4 03F7F4 31 2A 0F 0F 00 00       N_312A          DW      $312A   $0F0F   $0000           ;if pulse >= 12586 then the result is 0F else check N_3001 (SCI_BD_LOW_PULSE_TREE)
00F7FA 03F7FA 30 01 0D 0D 00 00       N_3001          DW      $3001   $0D0D   $0000           ;if pulse >= 12289 then the result is 0D else the result is 1D (SCI_BD_LOW_PULSE_TREE)
00F800 03F800 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F802 03F802 34 2F 0E 0E F8 10       N_342F          DW      $342F   $0E0E   N_3591          ;if pulse >= 13359 then check N_3591 else check N_32E8 (SCI_BD_LOW_PULSE_TREE)
00F808 03F808 32 E8 06 06 00 00       N_32E8          DW      $32E8   $0606   $0000           ;if pulse >= 13032 then the result is 06 else the result is 0E (SCI_BD_LOW_PULSE_TREE)
00F80E 03F80E 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F810 03F810 35 91 0F 0F 00 00       N_3591          DW      $3591   $0F0F   $0000           ;if pulse >= 13713 then the result is 0F else the result is 0E (SCI_BD_LOW_PULSE_TREE)
00F816 03F816 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F818 03F818 3B 07 0F 0F F8 2E       N_3B07          DW      $3B07   $0F0F   N_3EBB          ;if pulse >= 15111 then check N_3EBB else check N_3992 (SCI_BD_LOW_PULSE_TREE)
00F81E 03F81E 39 92 0F 0F F8 26       N_3992          DW      $3992   $0F0F   N_39C0          ;if pulse >= 14738 then check N_39C0 else the result is 0B (SCI_BD_LOW_PULSE_TREE)
00F824 03F824 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F826 03F826 39 C0 07 07 00 00       N_39C0          DW      $39C0   $0707   $0000           ;if pulse >= 14784 then the result is 07 else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00F82C 03F82C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F82E 03F82E 3E BB 0F 0F 00 00       N_3EBB          DW      $3EBB   $0F0F   $0000           ;if pulse >= 16059 then the result is 0F else check N_3C30 (SCI_BD_LOW_PULSE_TREE)
00F834 03F834 3C 30 0D 0D 00 00       N_3C30          DW      $3C30   $0D0D   $0000           ;if pulse >= 15408 then the result is 0D else the result is 0F (SCI_BD_LOW_PULSE_TREE)
00F83A 03F83A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F83C 03F83C 58 46 05 05 F8 8A       N_5846          DW      $5846   $0505   N_64E1          ;if pulse >= 22598 then check N_64E1 else check N_49FA (SCI_BD_LOW_PULSE_TREE)
00F842 03F842 49 FA 05 05 F8 66       N_49FA          DW      $49FA   $0505   N_4E0A          ;if pulse >= 18938 then check N_4E0A else check N_43CE (SCI_BD_LOW_PULSE_TREE)
00F848 03F848 43 CE 07 07 F8 56       N_43CE          DW      $43CE   $0707   N_4627          ;if pulse >= 17358 then check N_4627 else check N_41E4 (SCI_BD_LOW_PULSE_TREE)
00F84E 03F84E 41 E4 03 03 00 00       N_41E4          DW      $41E4   $0303   $0000           ;if pulse >= 16868 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00F854 03F854 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F856 03F856 46 27 06 06 F8 5E       N_4627          DW      $4627   $0606   N_49C1          ;if pulse >= 17959 then check N_49C1 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00F85C 03F85C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F85E 03F85E 49 C1 04 04 00 00       N_49C1          DW      $49C1   $0404   $0000           ;if pulse >= 18881 then the result is 04 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
00F864 03F864 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F866 03F866 4E 0A 07 07 F8 7A       N_4E0A          DW      $4E0A   $0707   N_565C          ;if pulse >= 19978 then check N_565C else check N_4C4B (SCI_BD_LOW_PULSE_TREE)
00F86C 03F86C 4C 4B 03 03 00 00       N_4C4B          DW      $4C4B   $0303   $0000           ;if pulse >= 19531 then the result is 03 else check N_4C20 (SCI_BD_LOW_PULSE_TREE)
00F872 03F872 4C 20 01 01 00 00       N_4C20          DW      $4C20   $0101   $0000           ;if pulse >= 19488 then the result is 01 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
00F878 03F878 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F87A 03F87A 56 5C 03 03 F8 82       N_565C          DW      $565C   $0303   N_5751          ;if pulse >= 22108 then check N_5751 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00F880 03F880 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F882 03F882 57 51 01 01 00 00       N_5751          DW      $5751   $0101   $0000           ;if pulse >= 22353 then the result is 01 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00F888 03F888 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F88A 03F88A 64 E1 01 01 F8 AE       N_64E1          DW      $64E1   $0101   N_74FB          ;if pulse >= 25825 then check N_74FB else check N_5A8F (SCI_BD_LOW_PULSE_TREE)
00F890 03F890 5A 8F 06 06 F8 9E       N_5A8F          DW      $5A8F   $0606   N_5E62          ;if pulse >= 23183 then check N_5E62 else check N_59DB (SCI_BD_LOW_PULSE_TREE)
00F896 03F896 59 DB 07 07 00 00       N_59DB          DW      $59DB   $0707   $0000           ;if pulse >= 23003 then the result is 07 else the result is 05 (SCI_BD_LOW_PULSE_TREE)
00F89C 03F89C 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F89E 03F89E 5E 62 07 07 F8 A6       N_5E62          DW      $5E62   $0707   N_6098          ;if pulse >= 24162 then check N_6098 else the result is 06 (SCI_BD_LOW_PULSE_TREE)
00F8A4 03F8A4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8A6 03F8A6 60 98 03 03 00 00       N_6098          DW      $6098   $0303   $0000           ;if pulse >= 24728 then the result is 03 else the result is 07 (SCI_BD_LOW_PULSE_TREE)
00F8AC 03F8AC 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8AE 03F8AE 74 FB 03 03 F8 D2       N_74FB          DW      $74FB   $0303   N_8733          ;if pulse >= 29947 then check N_8733 else check N_676B (SCI_BD_LOW_PULSE_TREE)
00F8B4 03F8B4 67 6B 03 03 F8 BC       N_676B          DW      $676B   $0303   N_6EF8          ;if pulse >= 26475 then check N_6EF8 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00F8BA 03F8BA 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8BC 03F8BC 6E F8 02 02 F8 C4       N_6EF8          DW      $6EF8   $0202   N_72CA          ;if pulse >= 28408 then check N_72CA else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00F8C2 03F8C2 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8C4 03F8C4 72 CA 01 01 00 00       N_72CA          DW      $72CA   $0101   $0000           ;if pulse >= 29386 then the result is 01 else check N_7271 (SCI_BD_LOW_PULSE_TREE)
00F8CA 03F8CA 72 71 00 00 00 00       N_7271          DW      $7271   $0000   $0000           ;if pulse >= 29297 then the result is 00 else the result is 02 (SCI_BD_LOW_PULSE_TREE)
00F8D0 03F8D0 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8D2 03F8D2 87 33 01 01 F8 E8       N_8733          DW      $8733   $0101   N_9B9B          ;if pulse >= 34611 then check N_9B9B else check N_8002 (SCI_BD_LOW_PULSE_TREE)
00F8D8 03F8D8 80 02 01 01 F8 E0       N_8002          DW      $8002   $0101   N_8360          ;if pulse >= 32770 then check N_8360 else the result is 03 (SCI_BD_LOW_PULSE_TREE)
00F8DE 03F8DE 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8E0 03F8E0 83 60 00 00 00 00       N_8360          DW      $8360   $0000   $0000           ;if pulse >= 33632 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00F8E6 03F8E6 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8E8 03F8E8 9B 9B 01 01 F8 F6       N_9B9B          DW      $9B9B   $0101   N_B003          ;if pulse >= 39835 then check N_B003 else check N_97C8 (SCI_BD_LOW_PULSE_TREE)
00F8EE 03F8EE 97 C8 00 00 00 00       N_97C8          DW      $97C8   $0000   $0000           ;if pulse >= 38856 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00F8F4 03F8F4 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F8F6 03F8F6 B0 03 01 01 F9 04       N_B003          DW      $B003   $0101   N_C099          ;if pulse >= 45059 then check N_C099 else check N_AC31 (SCI_BD_LOW_PULSE_TREE)
00F8FC 03F8FC AC 31 00 00 00 00       N_AC31          DW      $AC31   $0000   $0000           ;if pulse >= 44081 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00F902 03F902 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
00F904 03F904 C0 99 00 00 00 00       N_C099          DW      $C099   $0000   $0000           ;if pulse >= 49305 then the result is 00 else the result is 01 (SCI_BD_LOW_PULSE_TREE)
00F90A 03F90A 00 00                                   DW      $0000                                                    (SCI_BD_LOW_PULSE_TREE)
                                                              ;Search tree for high pulses
00F90C 03F90C MACRO                   SCI_BD_HIGH_PULSE_TREE  SCI_BD_HIGH_PULSE_TREE
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;# High pulse search tree                                                      # (SCI_BD_HIGH_PULSE_TREE)
                                      ;############################################################################### (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    5 3 2 1 1                                                  (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    7 8 8 9 4 9 7 4                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    6 4 8 2 4 6 2 8                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                    0 0 0 0 0 0 0 0                                            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# pulse length >=    0 0 0 0 0 0 0 0       weight  depth  parse time            (SCI_BD_HIGH_PULSE_TREE)
                                      ;# ------------------------------------------------------------------            (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    412 ( 19C)      1 . . . . . . . (80)     11      3       37                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    633 ( 279)      1 1 . . . . . . (C0)     18      2       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#    824 ( 338)      1 1 1 . . . . . (E0)     22      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1236 ( 4D4)      1 1 1 1 . . . . (F0)     19      1       35                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   1664 ( 680)      1 1 1 1 1 . . . (F8)     14      3       44                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   2489 ( 9B9)      1 1 1 1 1 1 . . (FC)      6      2       52                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   3298 ( CE2)      1 1 1 1 1 1 1 . (FE)      7      4       61                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4963 (1363)      1 1 1 1 1 1 1 1 (FF)      8      3       51                (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   |                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   4                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;#   D                                                                           (SCI_BD_HIGH_PULSE_TREE)
                                      ;# +-4-+                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# |   |                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 2   9                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;# 7   B                                                                         (SCI_BD_HIGH_PULSE_TREE)
                                      ;#+9+ +9+                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#| | | 1                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#1 3 6 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#9 3 8 6                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#C 8 0 3                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      |                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      C                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      E                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#      2                                                                        (SCI_BD_HIGH_PULSE_TREE)
                                      ;#                                                                               (SCI_BD_HIGH_PULSE_TREE)
00F90C 03F90C 04 D4 F0 F0 F9 28       N__4D4          DW      $04D4   $F0F0   N__9B9          ;if pulse >= 1236 then check N__9B9 else check N__279 (SCI_BD_HIGH_PULSE_TREE)
00F912 03F912 02 79 C0 C0 F9 20       N__279          DW      $0279   $C0C0   N__338          ;if pulse >= 633 then check N__338 else check N__19C (SCI_BD_HIGH_PULSE_TREE)
00F918 03F918 01 9C 80 80 00 00       N__19C          DW      $019C   $8080   $0000           ;if pulse >= 412 then the result is 80 else the result is 00 (SCI_BD_HIGH_PULSE_TREE)
00F91E 03F91E 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00F920 03F920 03 38 E0 E0 00 00       N__338          DW      $0338   $E0E0   $0000           ;if pulse >= 824 then the result is E0 else the result is C0 (SCI_BD_HIGH_PULSE_TREE)
00F926 03F926 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00F928 03F928 09 B9 FC FC F9 36       N__9B9          DW      $09B9   $FCFC   N_1363          ;if pulse >= 2489 then check N_1363 else check N__680 (SCI_BD_HIGH_PULSE_TREE)
00F92E 03F92E 06 80 F8 F8 00 00       N__680          DW      $0680   $F8F8   $0000           ;if pulse >= 1664 then the result is F8 else the result is F0 (SCI_BD_HIGH_PULSE_TREE)
00F934 03F934 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00F936 03F936 13 63 FF FF 00 00       N_1363          DW      $1363   $FFFF   $0000           ;if pulse >= 4963 then the result is FF else check N__CE2 (SCI_BD_HIGH_PULSE_TREE)
00F93C 03F93C 0C E2 FE FE 00 00       N__CE2          DW      $0CE2   $FEFE   $0000           ;if pulse >= 3298 then the result is FE else the result is FC (SCI_BD_HIGH_PULSE_TREE)
00F942 03F942 00 00                                   DW      $0000                                                    (SCI_BD_HIGH_PULSE_TREE)
00F944 03F944 -> $F944                SCI_TABS_END            EQU     *
00F944 03F944 -> $3F944               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB       - print a string (non-blocking)                    #
                                      ;#    STRING_PRINT_BL       - print a string (blocking)                        #
                                      ;#    STRING_FILL_NB        - print a number of filler characters (non-bl.)    #
                                      ;#    STRING_FILL_BL        - print a number of filler characters (blocking)   #
                                      ;#    STRING_UPPER          - convert a character to upper case                #
                                      ;#    STRING_LOWER          - convert a character to lower case                #
                                      ;#    STRING_PRINTABLE      - make character printable                         #
                                      ;#    STRING_SKIP_WS        - skip whitespace characters                       #
                                      ;#    STRING_SKIP_AND_COUNT - determine the length of a string                 #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - Fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;#    June 10, 2013                                                            #
                                      ;#      - Turned STRING_UPPER and STRING_LOWER into subroutines                #
                                      ;#      - Added STRING_SKIP_WS                                                 #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    October 31, 2013                                                         #
                                      ;#      - Replaced STRING_LENGTH by STRING_SKIP_AND_COUNT                      #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Added #ifdef's for rarely used functions STRING_FILL_BL,             #
                                      ;#        STRING_FILL_NB, STRING_SKIP_WS, and STRING_LOWER                     #
                                      ;#    March 3, 2014                                                            #
                                      ;#      - Added macro STRING_IS_PRINTABLE                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
00F944 03F944 -> $0001                STRING_BLOCKING_ON      EQU     1       ;blocking functions enabled by default
                                      ;Enable rarely used subroutines
                                      ;STRING_FILL_BL and STRING_FILL_NB
00F944 03F944 -> $0001                STRING_FILL_OFF         EQU     1       ;STRING_FILL_BL/STRING_FILL_NB disabled by default
                                      ;STRING_SKIP_WS
00F944 03F944 -> $0001                STRING_SKIP_WS_OFF      EQU     1       ;STRING_SKIP_WS disabled by default
                                      ;STRING_LOWER
00F944 03F944 -> $0001                STRING_LOWER_OFF        EQU     1       ;STRING_LOWER disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
00F944 03F944 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
00F944 03F944 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
00F944 03F944 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
00F944 03F944 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
00F944 03F944 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
00F944 03F944 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
00F944 03F944 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
00F944 03F944 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
00F944 03F944 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001473 001473                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
001473 001473 -> $1473                STRING_VARS_END         EQU     *
001473 001473 -> $1473                STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E909 03E909                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
00E909 03E909 -> $E909                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
00E909 03E909 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
00E90A 03E90A E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
00E90C 03E90C 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
00E90E 03E90E 16 E4 AF                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00E911 03E911 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
00E913 03E913 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
00E915 03E915 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E915 03E915 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E915 03E915 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E918 03E918 18 25 FB 7B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E91C 03E91C 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E91F 03E91F 18 22 FB 7A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E923 03E923 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E923 03E923 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E923 03E923 33                                              PULB
                                                              ;Signal failure (string pointer in X)
00E924 03E924 10 FE                                           CLC
                                                              ;Done
00E926 03E926 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
00E927 03E927 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
00E929 03E929 16 E4 AF                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00E92C 03E92C 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
00E92E 03E92E MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E92E 03E92E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E92E 03E92E 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E931 03E931 18 25 FB 62                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E935 03E935 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E938 03E938 18 22 FB 61                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E93C 03E93C -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E93C 03E93C -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E93C 03E93C 33                                              PULB
                                                              ;Signal success (next string pointer in X)
00E93D 03E93D 14 01                                           SEC
                                                              ;Done
00E93F 03E93F 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
00E940 03E940 -> $E940                STRING_PRINT_BL         EQU     *
00E940 03E940 MACRO                                           SCI_MAKE_BL     STRING_PRINT_NB, 10
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00E940 03E940 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00E942 03E942                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00E942 03E942 07 C5                                           JOBSR   \1                                               (SCI_MAKE_BL)
00E944 03E944 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00E946 03E946 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00E948 03E948 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00E948 03E948 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E948 03E948 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E94B 03E94B 18 25 FB 48                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E94F 03E94F 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E952 03E952 18 22 FB 47                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E956 03E956 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E956 03E956 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E956 03E956 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00E957 03E957 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00E957 03E957 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00E95A 03E95A 18 25 FB 45                                     BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00E95E 03E95E 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00E961 03E961 18 22 FB 44                                     BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00E965 03E965 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E965 03E965 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E96A 03E96A 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00E96F 03E96F 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E971 03E971 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00E972 03E972 -> $E4A3                OF                      EQU     ISTACK_OF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E972 03E972 -> $E4A9                UF                      EQU     ISTACK_UF                                        (SCI_MAKE_BL/ISTACK_WAIT)
00E972 03E972 -> $E972                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00E972 03E972 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00E972 03E972 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E972 03E972 8F 14 17                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E975 03E975 18 25 FB 1E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E979 03E979 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E97C 03E97C 18 22 FB 1D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E980 03E980 -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E980 03E980 -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00E980 03E980 20 BE                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Print a number of filler characters - non-blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
                                      ;#Print a number of filler characters - blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
                                      ;#Convert a lower case character to upper case
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: lower case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
00E982 03E982 -> $E982                STRING_UPPER            EQU     *
00E982 03E982 C1 61                                           CMPB    #$61            ;"a"
00E984 03E984 25 1C                                           BLO     STRING_UPPER_2
00E986 03E986 C1 7A                                           CMPB    #$7A            ;"z"
00E988 03E988 23 08                                           BLS     STRING_UPPER_1
00E98A 03E98A C1 EA                                           CMPB    #$EA            ;"a"+$80
00E98C 03E98C 25 14                                           BLO     STRING_UPPER_2
00E98E 03E98E C1 FA                                           CMPB    #$FA            ;"z"+$80
00E990 03E990 22 10                                           BHI     STRING_UPPER_2
00E992 03E992 C0 20                   STRING_UPPER_1          SUBB    #$20            ;"a"-"A"
                                                              ;Done
00E994 03E994 MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E994 03E994 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E994 03E994 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E997 03E997 18 25 FA FC                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E99B 03E99B 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E99E 03E99E 18 22 FA FB                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9A2 03E9A2 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9A2 03E9A2 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9A2 03E9A2 3D                      STRING_UPPER_2          RTS
                                      ;#Convert an upper case character to lower case (uncomment if needed)
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: upper case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
00E9A3 03E9A3 -> $E9A3                STRING_PRINTABLE        EQU     *
00E9A3 03E9A3 C1 20                                           CMPB    #$20            ;" "
00E9A5 03E9A5 25 04                                           BLO     STRING_PRINTABLE_1
00E9A7 03E9A7 C1 7E                                           CMPB    #$7E            ;"~"
00E9A9 03E9A9 23 10                                           BLS     STRING_PRINTABLE_2
00E9AB 03E9AB C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
00E9AD 03E9AD MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00E9AD 03E9AD MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9AD 03E9AD 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9B0 03E9B0 18 25 FA E3                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9B4 03E9B4 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9B7 03E9B7 18 22 FA E2                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9BB 03E9BB -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9BB 03E9BB -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00E9BB 03E9BB 3D                      STRING_PRINTABLE_2      RTS
                                      ;#Skip whitespace (uncomment if needed)
                                      ; args:   X: start of the string
                                      ; result: X: trimmed string
                                      ; SSTACK: 3 bytes
                                      ;         Y and D are preserved
00E9BC 03E9BC -> $E9BC                STRING_CODE_END         EQU     *
00E9BC 03E9BC -> $3E9BC               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F944 03F944                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
00F944 03F944 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
00F945 03F945 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00F945 03F945 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00F946 03F946 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
00F947 03F947 -> $F947                STRING_TABS_END         EQU     *
00F947 03F947 -> $3F947               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Maximum number conversion radix
                                      ;-------------------------------
                                      ;Enable blocking subroutines
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
00F947 03F947 -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
00F947 03F947 -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
00F947 03F947 -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001473 001473                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
001473 001473 -> $1473                NUM_VARS_END            EQU     *
001473 001473 -> $1473                NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00E9BC 03E9BC                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
00E9BC 03E9BC -> $E9BC                NUM_REVERSE             EQU     *
                                      ;Stack layout:
00E9BC 03E9BC -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
00E9BC 03E9BC -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
00E9BC 03E9BC -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
00E9BC 03E9BC -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
00E9BC 03E9BC -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
00E9BC 03E9BC -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
00E9BC 03E9BC -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
00E9BC 03E9BC -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
00E9BC 03E9BC -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
00E9BC 03E9BC -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
00E9BC 03E9BC 87                                              CLRA
00E9BD 03E9BD 18 02 80 AA                                     MOVW    0,SP, 6,-SP             ;move return address to SP+10
00E9C1 03E9C1 6C 86                                           STD     6,SP                    ;initialize reverse number
00E9C3 03E9C3 18 00 84 00 00                                  MOVW    #$0000, 4,SP            ;reverse number = base
00E9C8 03E9C8 18 00 82 00 00                                  MOVW    #$0000, 2,SP
00E9CD 03E9CD 34                                              PSHX                            ;store X at SP+8
00E9CE 03E9CE 35                                              PSHY                            ;store Y at SP+6
00E9CF 03E9CF 3B                                              PSHD                            ;store count:base at SP+4
00E9D0 03E9D0 34                                              PSHX                            ;store double value at SP+0
00E9D1 03E9D1 35                                              PSHY
                                                              ;Divide FHW by base
00E9D2 03E9D2 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
00E9D4 03E9D4 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
00E9D6 03E9D6 87                                              CLRA                            ;base => D
00E9D7 03E9D7 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00E9D9 03E9D9 B7 D4                                           EXG     X, D
00E9DB 03E9DB 18 10                                           IDIV                            ;D / X => X,  D % X => D
00E9DD 03E9DD 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
00E9DF 03E9DF B7 45                                           TFR     D, X                    ;remainder => X
00E9E1 03E9E1 87                      NUM_REVERSE_2           CLRA                            ;base => D
00E9E2 03E9E2 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00E9E4 03E9E4 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
00E9E6 03E9E6 B7 D6                                           EXG     X, Y
00E9E8 03E9E8 B7 D4                                           EXG     X, D
00E9EA 03E9EA 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00E9EB 03E9EB 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
00E9ED 03E9ED E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
00E9F0 03E9F0 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
00E9F3 03E9F3 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
00E9F5 03E9F5 C9 00                                           ADCB    #$00
00E9F7 03E9F7 89 00                                           ADCA    #$00
00E9F9 03E9F9 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00E9FB 03E9FB EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
00E9FD 03E9FD C9 00                                           ADCB    #$00
00E9FF 03E9FF 89 00                                           ADCA    #$00
00EA01 03EA01 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
00EA03 03EA03 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
00EA05 03EA05 EC 82                                           LDD     NUM_REVERSE_FLW,SP
00EA07 03EA07 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
00EA09 03EA09 EC 80                                           LDD     NUM_REVERSE_FHW,SP
00EA0B 03EA0B 27 2C                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
00EA0D 03EA0D ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
00EA10 03EA10 87                                              CLRA
00EA11 03EA11 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00EA13 03EA13 13                                              EMUL                            ;Y * D => Y:D
00EA14 03EA14 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
00EA17 03EA17 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
00EA19 03EA19 B7 C6                                           EXG     D, Y
00EA1B 03EA1B 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00EA1D 03EA1D 87                                              CLRA
00EA1E 03EA1E E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00EA20 03EA20 13                                              EMUL                            ;Y * D => Y:D
00EA21 03EA21 E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
00EA23 03EA23 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00EA25 03EA25 B7 64                                           TFR     Y, D
00EA27 03EA27 C9 00                                           ADCB    #$00
00EA29 03EA29 89 00                                           ADCA    #$00
                                                              ;Multiply RHW by base (carry-over in D)
00EA2B 03EA2B ED 8C                                           LDY     NUM_REVERSE_RHW,SP
00EA2D 03EA2D 6C 8C                                           STD     NUM_REVERSE_RHW,SP
00EA2F 03EA2F 87                                              CLRA
00EA30 03EA30 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00EA32 03EA32 13                                              EMUL                            ;Y * D => Y:D
00EA33 03EA33 E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
00EA35 03EA35 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
00EA37 03EA37 20 99                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
00EA39 03EA39 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EA39 03EA39 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA39 03EA39 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA3C 03EA3C 18 25 FA 57                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA40 03EA40 8F 14 31                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA43 03EA43 18 22 FA 56                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA47 03EA47 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA47 03EA47 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA47 03EA47 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
00EA49 03EA49 3A                                              PULD                            ;
00EA4A 03EA4A 31                                              PULY
00EA4B 03EA4B 30                                              PULX
                                                              ;Done
00EA4C 03EA4C 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
00EA4D 03EA4D -> $EA4D                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
00EA4D 03EA4D -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
00EA4D 03EA4D -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
00EA4D 03EA4D -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
00EA4D 03EA4D -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
00EA4D 03EA4D -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
00EA4D 03EA4D -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
00EA4D 03EA4D -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
00EA4D 03EA4D -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
00EA4D 03EA4D 34                                              PSHX                                    ;store X at SP+8
00EA4E 03EA4E 35                                              PSHY                                    ;store Y at SP+6
00EA4F 03EA4F 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
00EA50 03EA50 MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
00EA50 03EA50 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
00EA50 03EA50 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00EA50 03EA50 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA50 03EA50 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA53 03EA53 18 25 FA 40                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA57 03EA57 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA5A 03EA5A 18 22 FA 3F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA5E 03EA5E -> $E49D                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA5E 03EA5E -> $E497                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EA5E 03EA5E 16 E5 9B                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
00EA61 03EA61 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
00EA65 03EA65 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
00EA67 03EA67 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
00EA69 03EA69 B7 65                                           TFR     Y, X
00EA6B 03EA6B 87                                              CLRA                            ;base => D
00EA6C 03EA6C E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
00EA6E 03EA6E B7 D4                                           EXG     X, D
00EA70 03EA70 18 10                                           IDIV                            ;D / X => X,  D % X => D
00EA72 03EA72 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
00EA74 03EA74 B7 46                                           TFR     D, Y                    ;remainder => Y
00EA76 03EA76 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
00EA77 03EA77 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
00EA79 03EA79 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
00EA7B 03EA7B B7 C5                                           EXG     D, X
00EA7D 03EA7D 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00EA7E 03EA7E 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
00EA80 03EA80 B7 46                                           TFR     D, Y                    ;remainder => Y
00EA82 03EA82 EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
00EA84 03EA84 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00EA85 03EA85 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
00EA87 03EA87 CE F9 47                                        LdX     #NUM_SYMTAB
00EA8A 03EA8A E6 E5                                           LDAB    B,X
00EA8C 03EA8C 16 E4 AF                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
00EA8F 03EA8F 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
00EA92 03EA92 EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
00EA94 03EA94 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
00EA96 03EA96 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
00EA98 03EA98 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
00EA9A 03EA9A MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EA9A 03EA9A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA9A 03EA9A 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EA9D 03EA9D 18 25 F9 F6                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAA1 03EAA1 8F 14 35                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAA4 03EAA4 18 22 F9 F5                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAA8 03EAA8 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAA8 03EAA8 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAA8 03EAA8 14 01                                           SEC
00EAAA 03EAAA 3A                      NUM_REVPRINT_NB_3       PULD
00EAAB 03EAAB 31                                              PULY
00EAAC 03EAAC 30                                              PULX
                                                              ;Done
00EAAD 03EAAD 3D                                              RTS
                                                              ;Printing incomplete
00EAAE 03EAAE MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EAAE 03EAAE MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAAE 03EAAE 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAB1 03EAB1 18 25 F9 E2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAB5 03EAB5 8F 14 35                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EAB8 03EAB8 18 22 F9 E1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EABC 03EABC -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EABC 03EABC -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EABC 03EABC 10 FE                                           CLC
00EABE 03EABE 20 EA                                           JOB     NUM_REVPRINT_NB_3
00EAC0 03EAC0 -> $EAC0                NUM_CODE_END            EQU     *
00EAC0 03EAC0 -> $3EAC0               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F947 03F947                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
00F947 03F947 30                      NUM_SYMTAB              DB      "0"     ; 0
00F948 03F948 31                                              DB      "1"     ; 1
00F949 03F949 32                                              DB      "2"     ; 2
00F94A 03F94A 33                                              DB      "3"     ; 3
00F94B 03F94B 34                                              DB      "4"     ; 4
00F94C 03F94C 35                                              DB      "5"     ; 5
00F94D 03F94D 36                                              DB      "6"     ; 6
00F94E 03F94E 37                                              DB      "7"     ; 7
00F94F 03F94F 38                                              DB      "8"     ; 8
00F950 03F950 39                                              DB      "9"     ; 9
00F951 03F951 41                                              DB      "A"     ;10
00F952 03F952 42                                              DB      "B"     ;11
00F953 03F953 43                                              DB      "C"     ;12
00F954 03F954 44                                              DB      "D"     ;13
00F955 03F955 45                                              DB      "E"     ;14
00F956 03F956 46                                              DB      "F"     ;15
00F957 03F957 57                      NUM_SYMTAB_END  DB      *
00F958 03F958 -> $F958                NUM_TABS_END            EQU     *
00F958 03F958 -> $3F958               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;#    June 20, 2013                                                            #
                                      ;#      - Added macros "RESET_RESTART" and "RESET_RESTART_NO_MSG"              #
                                      ;#    January 15, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;###############################################################################
                                      ;# Error Detection:                                                            #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# |                         |       | P L I |         |                     | #
                                      ;# |                         |       | O V L |         |                     | #
                                      ;# |                         | Reset | R R A | Message |                     | #
                                      ;# | Cause                   | Vector| F F F | Pointer | Display             | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Power-On Reset          | $FFFE | 1 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | External Pin Reset      | $FFFE | 0 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Low Voltage Reset       | $FFFE | - 1 - |    -    | Error (Low voltage) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Illegal Address Reset   | $FFFE |  -0 1 |    -    | Error (Code fail)   | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Clock Monitor Reset     | $FFFC | - - - | CLK Msg | Error (Clock fail)  | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | COP Reset               | $FFFA | - - - | COP Msg | Error (Inresponsive)| #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Fatal Application Error | $FFFA | - - - |  Valid  | Error (Application) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Replace system resets by BGND instructions
                                      ;RESET_DEBUG            EQU     1
                                      ;Monitor low voltage reset
00F958 03F958 -> $0001                RESET_LVR_CHECK_ON      EQU     1               ;enable LVR check if LVRF flag exists
                                      ;Monitor illegal address reset
00F958 03F958 -> $0001                RESET_IAR_CHECK_ON      EQU     1               ;enable IAR check if ILAF flag exists
                                      ;Maximum error message length
00F958 03F958 -> $0040                RESET_MSG_LENGTH        EQU     64
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001473 001473                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
                                                              ;ALIGN  1
001473 001473                         RESET_MSG_REQ           DS      2               ;requested error message
001475 001475                         RESET_MSG_PTR           DS      2               ;validated error message
001477 001477 -> $1477                RESET_VARS_END          EQU     *
001477 001477 -> $1477                RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00EAC0 03EAC0                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#Reset entry points
                                      ;--------------------
                                      ;Power-on and external reset
00EAC0 03EAC0 -> $EAC0                RESET_EXT_ENTRY         EQU     *
00EAC0 03EAC0 18 03 F9 58 14 73                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
00EAC6 03EAC6 18 03 00 00 14 75                               MOVW    #$0000, RESET_MSG_PTR                   ;check reset flags
00EACC 03EACC 06 E0 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset
00EACF 03EACF 18 03 F9 58 14 73       RESET_CM_ENTRY          MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
00EAD5 03EAD5 18 0B 6D 14 75                                  MOVB    #RESET_MSG_CLKFAIL, RESET_MSG_PTR       ;set clock failure message
00EADA 03EADA 06 E0 00                                        JOB     START_OF_CODE
                                      ;COP and user reset
00EADD 03EADD -> $E000                RESET_COP_ENTRY         EQU     START_OF_CODE
00EADD 03EADD 18 0B 73 14 75                                  MOVB    #RESET_MSG_REQ, RESET_MSG_PTR           ;preserve error message
00EAE2 03EAE2 18 03 F9 58 14 73                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
00EAE8 03EAE8 06 E0 00                                        JOB     START_OF_CODE
                                      ;#Reset trigger
                                      ;--------------
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
                                      ;          System is reset and initialized
00EAEB 03EAEB -> $EAEB                RESET_FATAL_X           EQU     *
00EAEB 03EAEB 7E 14 73                                        STX     RESET_MSG_REQ
                                                              ;Trigger COP
00EAEE 03EAEE MACRO                   RESET_FATAL_X_1         COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
00EAEE 03EAEE 06 E0 00                                        JOB     RESET_COP_ENTRY                                  (COP_RESET)
00EAF1 03EAF1 -> $EAF1                RESET_CODE_END          EQU     *
00EAF1 03EAF1 -> $3EAF1               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F958 03F958                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Error messages
00F958 03F958 MACRO                   RESET_MSG_COP           RESET_MSG       "System inresponsive"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F958 03F958 53 79 73 74 65 6D 20 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 72 65 73 70 6F 6E 73 
              69 76 E5                
00F96B 03F96B F6 4A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F96D 03F96D MACRO                   RESET_MSG_CLKFAIL       RESET_MSG       "Clock failure"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F96D 03F96D 43 6C 6F 63 6B 20 66 61 RESET_MSG               FCS     \1                                               (RESET_MSG)
              69 6C 75 72 E5          
00F97A 03F97A D2 74                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F97C 03F97C MACRO                   RESET_MSG_POWFAIL       RESET_MSG       "Power loss"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F97C 03F97C 50 6F 77 65 72 20 6C 6F RESET_MSG               FCS     \1                                               (RESET_MSG)
              73 F3                   
00F986 03F986 A4 6E                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F988 03F988 MACRO                   RESET_MSG_ILLADDR       RESET_MSG       "Code runaway"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F988 03F988 43 6F 64 65 20 72 75 6E RESET_MSG               FCS     \1                                               (RESET_MSG)
              61 77 61 F9             
00F994 03F994 04 22                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F996 03F996 MACRO                   RESET_MSG_UNKNOWN       RESET_MSG       "Unknown cause"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
00F996 03F996 55 6E 6B 6E 6F 77 6E 20 RESET_MSG               FCS     \1                                               (RESET_MSG)
              63 61 75 73 E5          
00F9A3 03F9A3 5C A1                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
00F9A5 03F9A5 -> $F9A5                RESET_TABS_END          EQU     *
00F9A5 03F9A5 -> $3F9A5               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - LED - LED Driver (AriCalculator)                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C(X) MCU  #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module controls the LED on the OpenBDM Pod.                         #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    January 7, 2015                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00F9A5 03F9A5 -> $0008                LED_PORT                EQU     PORTE
00F9A5 03F9A5 -> $0002                LED_RED                 EQU     PE1
00F9A5 03F9A5 -> $0001                LED_GREEN               EQU     PE0
00F9A5 03F9A5 -> $0003                LED_ALL                 EQU     LED_GREEN|LED_RED
00F9A5 03F9A5 -> $0001                LED_BUSY                EQU     LED_GREEN
00F9A5 03F9A5 -> $0002                LED_COMERR              EQU     LED_RED
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001477 001477                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
001477 001477 -> $1477                LED_VARS_END            EQU     *
001477 001477 -> $1477                LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00EAF1 03EAF1                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
00EAF1 03EAF1 -> $EAF1                LED_CODE_END            EQU     *
00EAF1 03EAF1 -> $3EAF1               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F9A5 03F9A5                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
00F9A5 03F9A5 -> $F9A5                LED_TABS_END            EQU     *
00F9A5 03F9A5 -> $3F9A5               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# AriCalculator - VMON - Voltage Monitor (AriCalculator)                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module monitors battery and USB voltages.                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    August 19, 2014                                                          #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Battery voltage monitor (PAD8)
                                      ;------------------------------
                                      ;Upper threshold
00F9A5 03F9A5 -> $BA2D                VMON_VBAT_UPPER_THRESHOLD       EQU     (24*$FFFF)/33   ;default 2.4V
                                      ;Lower threshold
00F9A5 03F9A5 -> $9B26                VMON_VBAT_LOWER_THRESHOLD       EQU      (20*$FFFF)/33  ;default 2.0V
                                      ;USB voltage monitor (PAD9)
                                      ;--------------------------
                                      ;Upper threshold
00F9A5 03F9A5 -> $BA2D                VMON_VUSB_UPPER_THRESHOLD       EQU     (24*$FFFF)/33   ;default 2.4V
                                      ;Lower threshold
00F9A5 03F9A5 -> $9B26                VMON_VUSB_LOWER_THRESHOLD       EQU      (20*$FFFF)/33  ;default 2.0V
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Basic settings
                                      ;--------------
                                                              ;Common configuration
00F9A5 03F9A5 -> $0009                VMON_ATDCTL0_CONFIG     EQU      %00001001 ;-> wrap at AN9
                                                              ;             ^  ^ ;(only relevant when monitoring both voltages)
                                                              ;    WRAP-----+--+
00F9A5 03F9A5 -> $0010                VMON_ATDCTL1_CONFIG     EQU      %00010000 ;-> 8-bit resolution
                                                              ;         ^^^^^  ^ ;-> discharge sample cap before conversion
                                                              ;ETRIGSEL-+||||  |
                                                              ;    SRES--++||  |
                                                              ; SMP_DIS----+|  |
                                                              ; ETRIGCH-----+--+
00F9A5 03F9A5 -> $0001                VMON_ATDCTL2_CONFIG     EQU      %00000001 ;-> fast flag clearing
                                                              ;          ^^^^^^^ ;-> enable compare interrupt
                                                              ;    AFFC--+||||||
                                                              ; ICLKSTP---+|||||
                                                              ; ETRIGLE----+||||
                                                              ;  ETRIGP-----+|||
                                                              ;  ETRIGE------+||
                                                              ;   ASCIE-------+|
                                                              ;  ACMPIE--------+
00F9A5 03F9A5 -> $0010                VMON_ATDCTL3_CONFIG     EQU      %00010000 ;-> 2 conversions per sequence
                                                              ;         ^^^^^^^^ ;-> complete current conversion in BDM active mode
                                                              ;     DJM-+||||||| ;(only relevant when monitoring both voltages)
                                                              ;     S8C--+||||||
                                                              ;     S4C---+|||||
                                                              ;     S2C----+||||
                                                              ;     S1C-----+|||
                                                              ;    FIFO------+||
                                                              ;     FRZ-------++
00F9A5 03F9A5 -> $00FF                VMON_ATDCTL4_CONFIG     EQU      %11111111 ;-> sample for 30.72us
                                                              ;         ^ ^^   ^
                                                              ;     SMP-+-+|   |
                                                              ;     PRS----+---+
00F9A5 03F9A5 -> $0038                VMON_ATDCTL5_CONFIG     EQU      %00111000 ;-> continuous conversion over multiple channels
                                                              ;          ^^^^^^^ ;-> start conversion sequence with AN8
                                                              ;      SC--+||||||
                                                              ;    SCAN---+|||||
                                                              ;    MULT----+||||
                                                              ;      CD-----+|||
                                                              ;      CC------+||
                                                              ;      CB-------+|
                                                              ;      CA--------+
00F9A5 03F9A5 -> $0000                VMON_VBAT_CONVERSION    EQU     $00
00F9A5 03F9A5 -> $0001                VMON_VUSB_CONVERSION    EQU     $01
00F9A5 03F9A5 -> $0080                VMON_VBAT_ATDDR         EQU     (ATDDR0+(2*VMON_VBAT_CONVERSION))
00F9A5 03F9A5 -> $0082                VMON_VUSB_ATDDR         EQU     (ATDDR0+(2*VMON_VUSB_CONVERSION))
                                                                      ;Monitor status
                                      ;--------------
00F9A5 03F9A5 -> $007F                VMON_STATUS             EQU      ATDCMPHTL ;1=LV condition, 0=HV condition
00F9A5 03F9A5 -> $0001                VMON_STATUS_VBAT        EQU      (1<<VMON_VBAT_CONVERSION)
00F9A5 03F9A5 -> $0002                VMON_STATUS_VUSB        EQU      (1<<VMON_VUSB_CONVERSION)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001477 001477                                                 ORG     VMON_VARS_START, VMON_VARS_START_LIN
001477 001477 -> $1477                VMON_VARS_END           EQU     *
001477 001477 -> $1477                VMON_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00EAF1 03EAF1                                                 ORG     VMON_CODE_START, VMON_CODE_START_LIN
                                      ;#ADC Compare ISR
                                      ;#---------------
00EAF1 03EAF1 -> $EAF1                VMON_ISR                EQU     *
                                                              ;Check VUSB
00EAF1 03EAF1 4F 7B 02 67                                     BRCLR   ATDSTAT2L,  #(1<<VMON_VUSB_CONVERSION), VMON_ISR_2      ;skip if state hasn't changed
00EAF5 03EAF5 4E 7F 02 2E                                     BRSET   ATDCMPHTL, #(1<<VMON_VUSB_CONVERSION), VMON_ISR_1       ;HV condition detected
                                                              ;LV condition detected
00EAF9 03EAF9 18 03 BA 2D 00 82                               MOVW    #VMON_VUSB_UPPER_THRESHOLD, VMON_VUSB_ATDDR             ;set upper threshold value
00EAFF 03EAFF 4C 7F 02                                        BSET    ATDCMPHTL, #(1<<VMON_VUSB_CONVERSION)                   ;VUSB must be higher than threshold
00EB02 03EB02 18 0B 02 00 7B                                  MOVB    #(1<<VMON_VUSB_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
00EB07 03EB07 MACRO                                           VMON_VUSB_LVACTION
                                      ;VUSB -> error LED                                                               (VMON_VUSB_LVACTION)
00EB07 03EB07 MACRO                                           SCI_DISABLE                                              (VMON_VUSB_LVACTION)
                                      ;#Disable SCI                                                                    (VMON_VUSB_LVACTION/SCI_DISABLE)
                                      ;#-----------                                                                    (VMON_VUSB_LVACTION/SCI_DISABLE)
                                                              ;Disable transmission, disable IRQs                      (VMON_VUSB_LVACTION/SCI_DISABLE)
00EB07 03EB07 79 00 CB                                        CLR     SCICR2                                           (VMON_VUSB_LVACTION/SCI_DISABLE)
                                                              ;Clear CTS (minimize output current)                     (VMON_VUSB_LVACTION/SCI_DISABLE)
00EB0A 03EB0A MACRO                                           SCI_ASSERT_CTS                                           (VMON_VUSB_LVACTION/SCI_DISABLE)
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
00EB0A 03EB0A 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
00EB0E 03EB0E 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
00EB12 03EB12 1C 02 55 02                                     BSET    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-down device (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
00EB16 03EB16 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (VMON_VUSB_LVACTION/SCI_DISABLE/SCI_ASSERT_CTS)
                                                              ;Stop timer channels                                     (VMON_VUSB_LVACTION/SCI_DISABLE)
00EB1A 03EB1A MACRO                                           TIM_MULT_DIS    (SCI_BD_TCS|SCI_DLY_TCS)                 (VMON_VUSB_LVACTION/SCI_DISABLE)
                                      ;#Disable multiple timer channels                                                (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
00EB1A 03EB1A 4D 4C 0F                                        BCLR    TIE, #\1                                         (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
00EB1D 03EB1D 26 03                                           BNE     DONE                                             (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
00EB1F 03EB1F 79 00 46                                        CLR     TSCR1                                            (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
00EB22 03EB22 -> $EB22                DONE                    EQU     *                                                (VMON_VUSB_LVACTION/SCI_DISABLE/TIM_MULT_DIS)
00EB22 03EB22 MACRO                                           LED_COMERR_OFF                                           (VMON_VUSB_LVACTION)
                                      ;#Stop signaling communication error                                             (VMON_VUSB_LVACTION/LED_COMERR_OFF)
00EB22 03EB22 4C 08 02                                        BSET    LED_PORT, #LED_COMERR                            (VMON_VUSB_LVACTION/LED_COMERR_OFF)
00EB25 03EB25 20 35                                           JOB     VMON_ISR_2                                              ;VUSB check done
                                                              ;HV condition detected
00EB27 03EB27 18 03 9B 26 00 82       VMON_ISR_1              MOVW    #VMON_VUSB_LOWER_THRESHOLD, VMON_VUSB_ATDDR             ;set upper threshold value
00EB2D 03EB2D 4D 7F 02                                        BCLR    ATDCMPHTL, #(1<<VMON_VUSB_CONVERSION)                   ;VUSB must be lower (or same) than threshold
00EB30 03EB30 18 0B 02 00 7B                                  MOVB    #(1<<VMON_VUSB_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
00EB35 03EB35 MACRO                                           VMON_VUSB_HVACTION
00EB35 03EB35 MACRO                                           SCI_ENABLE                                               (VMON_VUSB_HVACTION)
                                      ;#Enable SCI                                                                     (VMON_VUSB_HVACTION/SCI_ENABLE)
                                      ;#----------                                                                     (VMON_VUSB_HVACTION/SCI_ENABLE)
                                                              ;Initialize queues and state flags                       (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB35 03EB35 CC 00 00                                        LDD     #$0000                                           (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB38 03EB38 7C 14 6E                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB3B 03EB3B 7C 14 64                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB3E 03EB3E 7A 14 43                                        STAA    SCI_FLGS                                         (VMON_VUSB_HVACTION/SCI_ENABLE)
                                                              ;Initialize CTS (allow incoming data)                    (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB41 03EB41 MACRO                                           SCI_ASSERT_CTS                                           (VMON_VUSB_HVACTION/SCI_ENABLE)
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
00EB41 03EB41 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
00EB45 03EB45 1C 02 52 02                                     BSET    SCI_CTS_DDR, #SCI_CTS_PIN               ;drive speed-up pulse (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
00EB49 03EB49 1C 02 55 02                                     BSET    SCI_CTS_PPS, #SCI_CTS_PIN               ;select pull-down device (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
00EB4D 03EB4D 1D 02 52 02                                     BCLR    SCI_CTS_DDR, #SCI_CTS_PIN               ;end speed-up pulse (VMON_VUSB_HVACTION/SCI_ENABLE/SCI_ASSERT_CTS)
                                                              ;Initialize baud rate detection                          (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB51 03EB51 7A 14 72                                        STAA    SCI_BD_LIST                             ;reset baud rate check list (VMON_VUSB_HVACTION/SCI_ENABLE)
                                                              ;Enable transmission                                     (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB54 03EB54 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;keep TX IRQs disabled (VMON_VUSB_HVACTION/SCI_ENABLE)
00EB59 03EB59 MACRO                                           LED_COMERR_ON                                            (VMON_VUSB_HVACTION)
                                      ;############################################################################### (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;# Macros                                                                      # (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;############################################################################### (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;#Initialization                                                                 (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                                              ;LED_OFF                                                 (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                      ;#Start signaling communication error                                            (VMON_VUSB_HVACTION/LED_COMERR_ON)
00EB59 03EB59 4D 08 02                                        BCLR    LED_PORT, #LED_COMERR                            (VMON_VUSB_HVACTION/LED_COMERR_ON)
                                                              ;Check VBAT
00EB5C 03EB5C 4F 7B 01 28             VMON_ISR_2              BRCLR   ATDSTAT2L,  #(1<<VMON_VBAT_CONVERSION), VMON_ISR_4      ;skip if state hasn't changed
00EB60 03EB60 4E 7F 01 13                                     BRSET   ATDCMPHTL, #(1<<VMON_VBAT_CONVERSION), VMON_ISR_3       ;HV condition detected
                                                              ;LV condition detected
00EB64 03EB64 18 03 BA 2D 00 80                               MOVW    #VMON_VBAT_UPPER_THRESHOLD, VMON_VBAT_ATDDR             ;set upper threshold value
00EB6A 03EB6A 4C 7F 01                                        BSET    ATDCMPHTL, #(1<<VMON_VBAT_CONVERSION)                   ;VBAT must be higher than threshold
00EB6D 03EB6D 18 0B 01 00 7B                                  MOVB    #(1<<VMON_VBAT_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
00EB72 03EB72 MACRO                                           VMON_VBAT_LVACTION
                                      ;############################################################################### (VMON_VBAT_LVACTION)
                                      ;# Macros                                                                      # (VMON_VBAT_LVACTION)
                                      ;############################################################################### (VMON_VBAT_LVACTION)
                                      ;;Break handler                                                                  (VMON_VBAT_LVACTION)
                                      ;#macro SCI_BREAK_ACTION, 0                                                      (VMON_VBAT_LVACTION)
                                      ;                       LED_BUSY_ON                                              (VMON_VBAT_LVACTION)
                                      ;#emac                                                                           (VMON_VBAT_LVACTION)
                                      ;                                                                                (VMON_VBAT_LVACTION)
                                      ;;Suspend handler                                                                (VMON_VBAT_LVACTION)
                                      ;#macro SCI_SUSPEND_ACTION, 0                                                    (VMON_VBAT_LVACTION)
                                      ;                       LED_BUSY_OFF                                             (VMON_VBAT_LVACTION)
                                      ;#emac                                                                           (VMON_VBAT_LVACTION)
                                      ;VBAT -> busy LED                                                                (VMON_VBAT_LVACTION)
00EB72 03EB72 MACRO                                           LED_BUSY_OFF                                             (VMON_VBAT_LVACTION)
                                      ;#Stop busy signal                                                               (VMON_VBAT_LVACTION/LED_BUSY_OFF)
00EB72 03EB72 4C 08 01                                        BSET    LED_PORT, #LED_BUSY                              (VMON_VBAT_LVACTION/LED_BUSY_OFF)
00EB75 03EB75 20 11                                           JOB     VMON_ISR_4                                              ;VBAT check done
                                                              ;HV condition detected
00EB77 03EB77 18 03 9B 26 00 80       VMON_ISR_3              MOVW    #VMON_VBAT_LOWER_THRESHOLD, VMON_VBAT_ATDDR             ;set upper threshold value
00EB7D 03EB7D 4D 7F 01                                        BCLR    ATDCMPHTL, #(1<<VMON_VBAT_CONVERSION)                   ;VBAT must be lower (or same) than threshold
00EB80 03EB80 18 0B 01 00 7B                                  MOVB    #(1<<VMON_VBAT_CONVERSION), ATDSTAT2L                   ;clear interrupt flag
00EB85 03EB85 MACRO                                           VMON_VBAT_HVACTION
00EB85 03EB85 MACRO                                           LED_BUSY_ON                                              (VMON_VBAT_HVACTION)
                                      ;#Start busy signal                                                              (VMON_VBAT_HVACTION/LED_BUSY_ON)
00EB85 03EB85 4D 08 01                                        BCLR    LED_PORT, #LED_BUSY                              (VMON_VBAT_HVACTION/LED_BUSY_ON)
                                                              ;Restart conversion sequence
00EB88 03EB88 18 0B 38 00 75          VMON_ISR_4              MOVB    #VMON_ATDCTL5_CONFIG, ATDCTL5
                                                              ;VBAT check done
00EB8D 03EB8D MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00EB8D 03EB8D 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00EB90 03EB90 25 06                                           BLO     OF                                               (ISTACK_RTI)
00EB92 03EB92 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00EB95 03EB95 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00EB97 03EB97 0B                                              RTI                                                      (ISTACK_RTI)
00EB98 03EB98 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00EB9B 03EB9B 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
00EB9E 03EB9E -> $EB9E                VMON_CODE_END           EQU     *
00EB9E 03EB9E -> $3EB9E               VMON_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F9A5 03F9A5                                                 ORG     VMON_TABS_START, VMON_TABS_START_LIN
00F9A5 03F9A5 -> $F9A5                VMON_TABS_END           EQU     *
00F9A5 03F9A5 -> $3F9A5               VMON_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - NVM Driver (S12G-Micro-EVB)                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2013 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module contains NVM write and erase functions.                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    May 27, 2013                                                             #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Prescaler value
00F9A5 03F9A5 -> $0018                NVM_FDIV_VAL            EQU     (CLOCK_BUS_FREQ/1000000)-1
                                      ;Fixed page protection
                                      ;---------------------
00F9A5 03F9A5 -> $0001                NVM_FIXED_PAGE_PROT_ON  EQU     1       ;default is NVM_FIXED_PAGE_PROT_ON
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Program/erase sizes
                                      ;--------------------
00F9A5 03F9A5 -> $0040                NVM_PHRASE_SIZE         EQU     64
00F9A5 03F9A5 -> $0200                NVM_SECTOR_SIZE         EQU     512
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001477 001477                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
001477 001477 -> $1477                NVM_VARS_END            EQU     *
001477 001477 -> $1477                NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00EB9E 03EB9E                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
                                      ;#Program phrase
                                      ; args:   X:      target address within paging window
                                      ;         PPAGE:  current page
                                      ;         Y:      data pointer
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 18 bytes
                                      ;         X, Y, and D are preserved
00EB9E 03EB9E -> $EB9E                NVM_PROGRAM_PHRASE      EQU     *
                                                              ;Protect fixed pages
00EB9E 03EB9E MACRO                                           NVM_CHECK_FIXED_PAGE_PROT  NVM_PROGRAM_PHRASE_1
                                                              ;Save registers (paged address in X, data pointer in Y)
00EB9E 03EB9E 36                                              PSHA                                    ;push A onto the SSTACK
                                                              ;Set CCOB  (paged address in X, data pointer in Y)
00EB9F 03EB9F 86 06                                           LDAA    #$06                            ;program P-flash
00EBA1 03EBA1 MACRO                                           NVM_SET_CMD
                                      ;#Check fixed page protection                                                    (NVM_SET_CMD)
                                      ; args:   1:      escape address (in case of violation)                          (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ; result: none                                                                   (NVM_SET_CMD)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
                                      ;#Set command and address                                                        (NVM_SET_CMD)
                                      ; args:   X:      target address within paging window                            (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ;         A:      command                                                        (NVM_SET_CMD)
                                      ; result: CCOBIX: $01                                                            (NVM_SET_CMD)
                                      ;         C-flag: set if successful                                              (NVM_SET_CMD)
                                      ; SSTACK: 4 bytes                                                                (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
00EBA1 03EBA1 MACRO                                           SSTACK_JOBSR    NVM_SET_CMD, 4                           (NVM_SET_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_CMD/SSTACK_JOBSR)
00EBA1 03EBA1 MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
00EBA1 03EBA1 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBA1 03EBA1 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBA4 03EBA4 18 25 F8 EF                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBA8 03EBA8 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBAB 03EBAB 18 22 F8 EE                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBAF 03EBAF -> $E49D                UF                      EQU     SSTACK_UF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBAF 03EBAF -> $E497                OF                      EQU     SSTACK_OF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBAF 03EBAF 16 EC 7C                                        JOBSR   \1                                               (NVM_SET_CMD/SSTACK_JOBSR)
00EBB2 03EBB2 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$002
00EBB5 03EBB5 18 05 40 01 0A                                  MOVW    0,Y, FCCOBHI
00EBBA 03EBBA 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$003
00EBBD 03EBBD 18 05 42 01 0A                                  MOVW    2,Y, FCCOBHI
00EBC2 03EBC2 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$004
00EBC5 03EBC5 18 05 44 01 0A                                  MOVW    4,Y, FCCOBHI
00EBCA 03EBCA 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$005
00EBCD 03EBCD 18 05 46 01 0A                                  MOVW    6,Y, FCCOBHI
                                                              ;Execute command
00EBD2 03EBD2 MACRO                                           NVM_EXEC_CMD
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
00EBD2 03EBD2 MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
00EBD2 03EBD2 MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
00EBD2 03EBD2 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBD2 03EBD2 8F 14 1C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBD5 03EBD5 18 25 F8 BE                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBD9 03EBD9 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBDC 03EBDC 18 22 F8 BD                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBE0 03EBE0 -> $E49D                UF                      EQU     SSTACK_UF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBE0 03EBE0 -> $E497                OF                      EQU     SSTACK_OF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBE0 03EBE0 16 EC AE                                        JOBSR   \1                                               (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Restore registers
00EBE3 03EBE3 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EBE3 03EBE3 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBE3 03EBE3 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBE6 03EBE6 18 25 F8 AD                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBEA 03EBEA 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBED 03EBED 18 22 F8 AC                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBF1 03EBF1 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBF1 03EBF1 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EBF1 03EBF1 32                                              PULA                                    ;pull A from the SSTACK
                                                              ;Check result
00EBF2 03EBF2 14 01                                           SEC
00EBF4 03EBF4 1F 01 06 33 02                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_PROGRAM_PHRASE_2
00EBF9 03EBF9 10 FE                   NVM_PROGRAM_PHRASE_1    CLC
                                                              ;Done
00EBFB 03EBFB 3D                      NVM_PROGRAM_PHRASE_2    RTS
                                      ;#Erase sector
                                      ; args:   X:      sector address
                                      ;         PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 18 bytes
                                      ;         X, Y, and D are preserved
00EBFC 03EBFC -> $EBFC                NVM_ERASE_SECTOR        EQU     *
                                                              ;Protect fixed pages
00EBFC 03EBFC MACRO                                           NVM_CHECK_FIXED_PAGE_PROT  NVM_ERASE_SECTOR_1
                                                              ;Save registers (paged address in X)
00EBFC 03EBFC 36                                              PSHA                                    ;push A onto the SSTACK
                                                              ;Set CCOB  (paged address in X)
00EBFD 03EBFD 86 0A                                           LDAA    #$0A                            ;erase P-flash sector
00EBFF 03EBFF MACRO                                           NVM_SET_CMD
                                      ;#Check fixed page protection                                                    (NVM_SET_CMD)
                                      ; args:   1:      escape address (in case of violation)                          (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ; result: none                                                                   (NVM_SET_CMD)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
                                      ;#Set command and address                                                        (NVM_SET_CMD)
                                      ; args:   X:      target address within paging window                            (NVM_SET_CMD)
                                      ;         PPAGE:  current page                                                   (NVM_SET_CMD)
                                      ;         A:      command                                                        (NVM_SET_CMD)
                                      ; result: CCOBIX: $01                                                            (NVM_SET_CMD)
                                      ;         C-flag: set if successful                                              (NVM_SET_CMD)
                                      ; SSTACK: 4 bytes                                                                (NVM_SET_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD)
00EBFF 03EBFF MACRO                                           SSTACK_JOBSR    NVM_SET_CMD, 4                           (NVM_SET_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_CMD/SSTACK_JOBSR)
00EBFF 03EBFF MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_SET_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
00EBFF 03EBFF MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EBFF 03EBFF 8F 14 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC02 03EC02 18 25 F8 91                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC06 03EC06 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC09 03EC09 18 22 F8 90                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC0D 03EC0D -> $E49D                UF                      EQU     SSTACK_UF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC0D 03EC0D -> $E497                OF                      EQU     SSTACK_OF                                        (NVM_SET_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC0D 03EC0D 07 6D                                           JOBSR   \1                                               (NVM_SET_CMD/SSTACK_JOBSR)
                                                              ;Execute command
00EC0F 03EC0F MACRO                                           NVM_EXEC_CMD
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
00EC0F 03EC0F MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
00EC0F 03EC0F MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
00EC0F 03EC0F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC0F 03EC0F 8F 14 1C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC12 03EC12 18 25 F8 81                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC16 03EC16 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC19 03EC19 18 22 F8 80                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC1D 03EC1D -> $E49D                UF                      EQU     SSTACK_UF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC1D 03EC1D -> $E497                OF                      EQU     SSTACK_OF                                        (NVM_EXEC_CMD/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC1D 03EC1D 16 EC AE                                        JOBSR   \1                                               (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Restore registers
00EC20 03EC20 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EC20 03EC20 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC20 03EC20 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC23 03EC23 18 25 F8 70                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC27 03EC27 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC2A 03EC2A 18 22 F8 6F                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC2E 03EC2E -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC2E 03EC2E -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC2E 03EC2E 32                                              PULA                                    ;pull A from the SSTACK
                                                              ;Check result
00EC2F 03EC2F 14 01                                           SEC
00EC31 03EC31 1F 01 06 33 02                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_ERASE_SECTOR_2
00EC36 03EC36 10 FE                   NVM_ERASE_SECTOR_1      CLC
                                                              ;Done
00EC38 03EC38 3D                      NVM_ERASE_SECTOR_2      RTS
                                      ;#Erase page
                                      ; args:   PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 22 bytes
                                      ;         X, Y, and D are preserved
00EC39 03EC39 -> $EC39                NVM_ERASE_PAGE          EQU     *
                                                              ;Save registers (paged address in X, data pointer in Y)
00EC39 03EC39 34                                              PSHX                                    ;push X onto the SSTACK
                                                              ;Erase all 16 sdectors sector
00EC3A 03EC3A CE 80 00                                        LDX     #$8000
00EC3D 03EC3D MACRO                   NVM_ERASE_PAGE_1        NVM_ERASE_SECTOR
                                      ;#Erase sector                                                                   (NVM_ERASE_SECTOR)
                                      ; args:   X:      sector address                                                 (NVM_ERASE_SECTOR)
                                      ;         PPAGE:  current page                                                   (NVM_ERASE_SECTOR)
                                      ; result: C-flag: set if successful                                              (NVM_ERASE_SECTOR)
                                      ; SSTACK: 18 bytes                                                               (NVM_ERASE_SECTOR)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR)
00EC3D 03EC3D MACRO                                           SSTACK_JOBSR    NVM_ERASE_SECTOR, 18                     (NVM_ERASE_SECTOR)
                                      ;#Check stack and call subroutine                                                (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_ERASE_SECTOR/SSTACK_JOBSR)
00EC3D 03EC3D MACRO                                           SSTACK_PREPUSH  \2                                       (NVM_ERASE_SECTOR/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
00EC3D 03EC3D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC3D 03EC3D 8F 14 1F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC40 03EC40 18 25 F8 53                                     BLO     OF                      ;=> 3 cycles     4 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC44 03EC44 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC47 03EC47 18 22 F8 52                                     BHI     UF                      ;=> 3 cycles     4 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC4B 03EC4B -> $E49D                UF                      EQU     SSTACK_UF                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC4B 03EC4B -> $E497                OF                      EQU     SSTACK_OF                                        (NVM_ERASE_SECTOR/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EC4B 03EC4B 07 AF                                           JOBSR   \1                                               (NVM_ERASE_SECTOR/SSTACK_JOBSR)
00EC4D 03EC4D 24 1B                                           BCC     NVM_ERASE_PAGE_2                        ;error occured
00EC4F 03EC4F 1A E2 02 00                                     LEAX    NVM_SECTOR_SIZE,X
00EC53 03EC53 BE C0 00                                        CPX     $C000
00EC56 03EC56 25 E5                                           BLO     NVM_ERASE_PAGE_1
                                                              ;Restore registers (page erased)
00EC58 03EC58 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EC58 03EC58 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC58 03EC58 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC5B 03EC5B 18 25 F8 38                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC5F 03EC5F 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC62 03EC62 18 22 F8 37                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC66 03EC66 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC66 03EC66 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC66 03EC66 30                                              PULX                                    ;pull X from the SSTACK
                                                              ;Done
00EC67 03EC67 14 01                                           SEC
00EC69 03EC69 3D                                              RTS
                                                              ;Restore registers (error condition)
00EC6A 03EC6A MACRO                   NVM_ERASE_PAGE_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EC6A 03EC6A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC6A 03EC6A 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC6D 03EC6D 18 25 F8 26                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC71 03EC71 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC74 03EC74 18 22 F8 25                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC78 03EC78 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC78 03EC78 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC78 03EC78 30                                              PULX                                    ;pull X from the SSTACK
                                                              ;Done
00EC79 03EC79 10 FE                                           CLC
00EC7B 03EC7B 3D                                              RTS
                                      ;#Set command and address
                                      ; args:   X:      target address within paging window
                                      ;         PPAGE:  current page
                                      ;         A:      command
                                      ; result: CCOBIX: $01
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00EC7C 03EC7C -> $EC7C                NVM_SET_CMD             EQU     *
                                                              ;Save registers (paged address in X, data pointer in Y)
00EC7C 03EC7C 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set command  (paged address in X, command in A)
00EC7D 03EC7D 79 01 02                                        CLR     FCCOBIX                         ;CCOBIX=$00
00EC80 03EC80 7A 01 0A                                        STAA    FCCOBHI                         ;set command
                                                              ;Set ADDR[23:16]  (paged address in X)
00EC83 03EC83 96 15                                           LDAA    PPAGE
00EC85 03EC85 C7                                              CLRB
00EC86 03EC86 44                                              LSRA
00EC87 03EC87 44                                              LSRA
00EC88 03EC88 8A 40                                           ORAA    #$40
00EC8A 03EC8A 7A 01 0B                                        STAA    FCCOBLO
                                                              ;Set ADDR[15:0]  (paged address in X, ADDR[15:14] in B)
00EC8D 03EC8D 18 0B 01 01 02                                  MOVB    #$01, FCCOBIX
00EC92 03EC92 7E 01 0A                                        STX     FCCOBHI                         ;set ADDR[13:0]
00EC95 03EC95 B6 01 0A                                        LDAA    FCCOBHI                         ;set ADDR[15:14]
00EC98 03EC98 84 3F                                           ANDA    #$3F
00EC9A 03EC9A 18 06                                           ABA
00EC9C 03EC9C 7A 01 0A                                        STAA    FCCOBHI
                                                              ;Done
00EC9F 03EC9F MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EC9F 03EC9F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EC9F 03EC9F 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECA2 03ECA2 18 25 F7 F1                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECA6 03ECA6 8F 14 3F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECA9 03ECA9 18 22 F7 F0                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECAD 03ECAD -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECAD 03ECAD -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECAD 03ECAD 3D                                              RTS
                                      ;#Execute NVM command from RAM
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 15 bytes
                                      ;         X, Y, and D are preserved
00ECAE 03ECAE -> $ECAE                NVM_EXEC_CMD            EQU     *
                                                              ;Push RAM code onto the stack
                                                              ;18 0B FF 01 07   MOVB  #$FF, FSTAT     ;clear CCIF
                                                              ;1F 01 07 80 FB   BRCLR FSTAT, #CCIF, * ;wait until CCIF is set
                                                              ;06 xx xx         JMP     $xxxx
00ECAE 03ECAE 18 00 AE EC D4                                  MOVW    #NVM_EXEC_CMD_1, 2,-SP
00ECB3 03ECB3 18 00 AE FB 06                                  MOVW    #$FB06,          2,-SP
00ECB8 03ECB8 18 00 AE 07 08                                  MOVW    #$0708,          2,-SP
00ECBD 03ECBD 18 00 AE 1F 01                                  MOVW    #$1F01,          2,-SP
00ECC2 03ECC2 18 00 AE 01 07                                  MOVW    #$0107,          2,-SP
00ECC7 03ECC7 18 00 AE 0B FF                                  MOVW    #$0BFF,          2,-SP
00ECCC 03ECCC 18 08 AF 18                                     MOVB    #$18,            1,-SP
                                                              ;Invoke command
00ECD0 03ECD0 14 10                                           SEI
00ECD2 03ECD2 05 80                                           JMP     0,SP
00ECD4 03ECD4 10 EF                   NVM_EXEC_CMD_1          CLI
                                                              ;Done
00ECD6 03ECD6 MACRO                                           SSTACK_PREPULL  15
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00ECD6 03ECD6 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECD6 03ECD6 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECD9 03ECD9 18 25 F7 BA                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECDD 03ECDD 8F 14 34                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECE0 03ECE0 18 22 F7 B9                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECE4 03ECE4 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECE4 03ECE4 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECE4 03ECE4 1B 93                                           LEAS    -13,SP
00ECE6 03ECE6 3D                                              RTS
                                      ;#ECC double fault
00ECE7 03ECE7 -> $ECE7                NVM_ISR_ECCERR          EQU     *
00ECE7 03ECE7 MACRO                                           RESET_FATAL     NVM_STR_ECCERR
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00ECE7 03ECE7 CE F9 A5                                        LDX     #\1                                              (RESET_FATAL)
00ECEA 03ECEA 06 EA EB                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
00ECED 03ECED -> $ECED                NVM_CODE_END            EQU     *
00ECED 03ECED -> $3ECED               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F9A5 03F9A5                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
00F9A5 03F9A5 45 43 43 20 65 72 72 6F NVM_STR_ECCERR          FCS     "ECC error"
              F2                      
00F9AE 03F9AE -> $F9AE                NVM_TABS_END            EQU     *
00F9AE 03F9AE -> $3F9AE               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# AriCalculator - DISP - LCD Driver (ST7565R) (AriCalculator RevC)            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for LCD using a ST7565R controller. This    #
                                      ;#    driver assumes, that the ST7565R is connected via the 4-wire SPI         #
                                      ;#    interface. The default pin mapping matches AriCalculator hardware RevC   #
                                      ;#                                                                             #
                                      ;#    This modules  provides three functions to the main program:              #
                                      ;#    DISP_CHECK_BUF - This function checks if the command buffer is able      #
                                      ;#                        to accept more data.                                 #
                                      ;#    DISP_TX_NB -     This function send one command to the display           #
                                      ;#                        without blocking the program flow.                   #
                                      ;#    DISP_TX_BL -     This function send one command to the display and       #
                                      ;#                        blocks the program flow until it has been            #
                                      ;#                        successful.                                          #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 24, 2012                                                           #
                                      ;#      - Initial release                                                      #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#Bus frequency
                                      ;#Baud rate
00F9AE 03F9AE -> $B71B00              DISP_BAUD               EQU     12000000        ;default is 12 Mbit/s
                                      ;#RESET output
00F9AE 03F9AE -> $0248                DISP_RESET_PORT         EQU     PTS             ;default is port S
00F9AE 03F9AE -> $0008                DISP_RESET_PIN          EQU     PS3             ;default is PS3
                                      ;#A0 output
00F9AE 03F9AE -> $0248                DISP_A0_PORT            EQU     PTS             ;default is port S
00F9AE 03F9AE -> $0010                DISP_A0_PIN             EQU     PS4             ;default is PS4
                                      ;#Buffer size
00F9AE 03F9AE -> $0010                DISP_BUF_SIZE           EQU     16              ;depth of the command buffer
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate divider
00F9AE 03F9AE -> $0000                DISP_SPPR               EQU     ((CLOCK_BUS_FREQ/(2*DISP_BAUD))-1)&7
00F9AE 03F9AE -> $0000                DISP_SPR                EQU     0
                                      ;#SPI configuration
00F9AE 03F9AE -> $009E                DISP_SPICR1_CONFIG      EQU     %10011110       ;only SPE and SPTIE will be modified
                                                                      ;SSSMCCSL
                                                                      ;PPPSPPSS
                                                                      ;IETTOHOB
                                                                      ;E IRLAEF
                                                                      ;  E    E
00F9AE 03F9AE -> $0019                DISP_SPICR2_CONFIG      EQU     %00011001
                                                                      ; X MB SS
                                                                      ; F OI PP
                                                                      ; R DD IC
                                                                      ; W FI S0
                                                                      ;   ER W
                                                                      ;   NO A
                                                                      ;    E I
00F9AE 03F9AE -> $0000                DISP_SPIBR_CONFIG       EQU     ((DISP_SPPR<<4|(DISP_SPR)))
                                      ;#Escape sequences
00F9AE 03F9AE -> $00E3                DISP_ESC_START          EQU     $E3             ;start of eccape sequence (NOP)
00F9AE 03F9AE -> $00FF                DISP_ESC_ESC            EQU     $FF             ;transmit escape character
00F9AE 03F9AE -> $00FE                DISP_ESC_CMD            EQU     $FE             ;switch to command mode
00F9AE 03F9AE -> $00FD                DISP_ESC_DATA           EQU     $FD             ;switch to data mode
                                      ;#Status flags
00F9AE 03F9AE -> $0080                DISP_STAT_BUSY          EQU     $80             ;transmission in progress
00F9AE 03F9AE -> $007F                DISP_STAT_REPEAT        EQU     $7F             ;repeat counter
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001477 001477                                                 ORG     DISP_VARS_START, DISP_VARS_START_LIN
001477 001477 -> $1477                DISP_AUTO_LOC1          EQU     *               ;1st auto-place location
001477 001477                                                 ALIGN   1
                                      ;#Command buffer
001478 001478                         DISP_BUF                DS      DISP_BUF_SIZE
001488 001488                         DISP_BUF_IN             DS      1               ;points to the next free space
001489 001489                         DISP_BUF_OUT            DS      1               ;points to the oldest entry
00148A 00148A -> $148A                DISP_AUTO_LOC2          EQU     *               ;2nd auto-place location
                                      ;#Status flags
00148A 00148A -> $1477                DISP_STAT               EQU     ((DISP_AUTO_LOC1&1)*DISP_AUTO_LOC1)+((~(DISP_AUTO_LOC1)&1)*DISP_AUTO_LOC2)
00148A 00148A                                                 UNALIGN ((~DISP_AUTO_LOC1)&1)
00148A 00148A -> $148A                DISP_VARS_END           EQU     *
00148A 00148A -> $148A                DISP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00ECED 03ECED                                                 ORG     DISP_CODE_START, DISP_CODE_START_LIN
                                      ;# Essential functions
                                      ;---------------------
                                      ;#Determine how much space is left on the buffer
                                      ; args:   none
                                      ; result: A: Space left on the buffer in bytes
                                      ; SSTACK: 3 bytes
                                      ;         X, Y and B are preserved
00ECED 03ECED -> $ECED                DISP_BUF_FREE           EQU     *
                                                              ;Save registers
00ECED 03ECED 37                                              PSHB                                                    ;push accu B onto the SSTACK
                                                              ;Check if the buffer is full
00ECEE 03ECEE FC 14 88                                        LDD     DISP_BUF_IN                                     ;IN->A; OUT->B
00ECF1 03ECF1 18 16                                           SBA
00ECF3 03ECF3 84 0F                                           ANDA    #(DISP_BUF_SIZE-1)                              ;buffer usage->A
00ECF5 03ECF5 40                                              NEGA
00ECF6 03ECF6 8B 0F                                           ADDA    #(DISP_BUF_SIZE-1)
                                                              ;Restore registers
00ECF8 03ECF8 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00ECF8 03ECF8 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECF8 03ECF8 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECFB 03ECFB 18 25 F7 98                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ECFF 03ECFF 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED02 03ED02 18 22 F7 97                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED06 03ED06 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED06 03ED06 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED06 03ED06 33                                              PULB                                                    ;pull accu B from the SSTACK
                                                              ;Done
00ED07 03ED07 3D                                              RTS
                                      ;#Transmit commands and data (non-blocking)
                                      ; args:   B: buffer entry
                                      ; result: C: 1 = successful, 0=buffer full
                                      ; SSTACK: 5 bytes
                                      ;         X, Y and D are preserved
00ED08 03ED08 -> $ED08                DISP_TX_NB              EQU     *
                                                              ;Save registers (buffer entry in B)
00ED08 03ED08 34                                              PSHX                                                    ;push index X onto the SSTACK
00ED09 03ED09 36                                              PSHA                                                    ;push accu A onto the SSTACK
                                                              ;Store buffer entry (buffer entry in B)
00ED0A 03ED0A CE 14 78                                        LDX     #DISP_BUF                                       ;buffer address->X
00ED0D 03ED0D B6 14 88                                        LDAA    DISP_BUF_IN
00ED10 03ED10 6B E4                                           STAB    A,X                                             ;write data into buffer
00ED12 03ED12 42                                              INCA                                                    ;advance IN index
00ED13 03ED13 84 0F                                           ANDA    #(DISP_BUF_SIZE-1)                              ;buffer usage->A
00ED15 03ED15 B1 14 89                                        CMPA    DISP_BUF_OUT                                    ;check if the buffer is full
00ED18 03ED18 27 1B                                           BEQ     DISP_TX_NB_2                                    ;buffer is full
00ED1A 03ED1A 7A 14 88                                        STAA    DISP_BUF_IN
                                                              ;Enable SPI transmit interrupt
00ED1D 03ED1D 18 0B FE 00 D8                                  MOVB    #(SPE|SPTIE|DISP_SPICR1_CONFIG), SPICR1
                                                              ;Return positive status
00ED22 03ED22 MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00ED22 03ED22 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED22 03ED22 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED25 03ED25 18 25 F7 6E                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED29 03ED29 8F 14 3E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED2C 03ED2C 18 22 F7 6D                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED30 03ED30 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED30 03ED30 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED30 03ED30 14 01                                           SEC                                                     ;return positive status
00ED32 03ED32 32                      DISP_TX_NB_1            PULA                                                    ;pull accu A from the SSTACK
00ED33 03ED33 30                                              PULX                                                    ;pull index B from the SSTACK
                                                              ;Done
00ED34 03ED34 3D                                              RTS
                                                              ;Return negative status
00ED35 03ED35 MACRO                   DISP_TX_NB_2            SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00ED35 03ED35 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED35 03ED35 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED38 03ED38 18 25 F7 5B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED3C 03ED3C 8F 14 3E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED3F 03ED3F 18 22 F7 5A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED43 03ED43 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED43 03ED43 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED43 03ED43 10 FE                                           CLC                                                     ;return negative status
00ED45 03ED45 20 EB                                           JOB     DISP_TX_NB_1
                                      ;#Transmit commands and data (blocking)
                                      ; args:   B: buffer entry
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and D are preserved
00ED47 03ED47 -> $ED47                DISP_TX_BL              EQU     *
00ED47 03ED47 MACRO                                           DISP_MAKE_BL    DISP_TX_NB, 5
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL)
                                      ;-------------------------                                                       (DISP_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL)
00ED47 03ED47 MACRO                                           SCI_MAKE_BL \1 \2                                        (DISP_MAKE_BL)
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (DISP_MAKE_BL/SCI_MAKE_BL)
00ED47 03ED47 14 10                   LOOP                    SEI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (DISP_MAKE_BL/SCI_MAKE_BL)
00ED49 03ED49                                                 //SSTACK_PREPUSH        \2                               (DISP_MAKE_BL/SCI_MAKE_BL)
00ED49 03ED49 07 BD                                           JOBSR   \1                                               (DISP_MAKE_BL/SCI_MAKE_BL)
00ED4B 03ED4B 24 11                                           BCC     WAIT            ;function unsuccessful           (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (DISP_MAKE_BL/SCI_MAKE_BL)
00ED4D 03ED4D 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (DISP_MAKE_BL/SCI_MAKE_BL)
00ED4F 03ED4F MACRO                                           SSTACK_PREPULL  2                                        (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
00ED4F 03ED4F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED4F 03ED4F 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED52 03ED52 18 25 F7 41                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED56 03ED56 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED59 03ED59 18 22 F7 40                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED5D 03ED5D -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED5D 03ED5D -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00ED5D 03ED5D 3D                                              RTS                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DISP_MAKE_BL/SCI_MAKE_BL)
00ED5E 03ED5E MACRO                   WAIT                    ISTACK_WAIT                                              (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED5E 03ED5E 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED61 03ED61 18 25 F7 3E                                     BLO     OF ;ISTACK_OF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED65 03ED65 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED68 03ED68 18 22 F7 3D                                     BHI     UF ;ISTACK_UF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED6C 03ED6C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00ED6C 03ED6C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00ED71 03ED71 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00ED76 03ED76 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED78 03ED78 3E                                              WAI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED79 03ED79 -> $E4A3                OF                      EQU     ISTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED79 03ED79 -> $E4A9                UF                      EQU     ISTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00ED79 03ED79 -> $ED79                DONE                    EQU     *                                                (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DISP_MAKE_BL/SCI_MAKE_BL)
00ED79 03ED79 MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
00ED79 03ED79 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED79 03ED79 8F 14 12                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED7C 03ED7C 18 25 F7 17                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED80 03ED80 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED83 03ED83 18 22 F7 16                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED87 03ED87 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED87 03ED87 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED87 03ED87 20 BE                                           JOB     LOOP                                             (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)
                                      ; args:   X: pointer to the start of the sequence
                                      ;         Y: number of bytes to transmit
                                      ; result: X: pointer to the start of the remaining sequence
                                      ;         Y: number of remaining bytes to transmit
                                      ;         C: 1 = successful, 0=buffer full
                                      ; SSTACK: 8 bytes
                                      ;         D is preserved
00ED89 03ED89 -> $ED89                DISP_STREAM_NB          EQU     *
                                                              ;Save registers (start pointer in X, byte count in Y)
00ED89 03ED89 37                                              PSHB                                                    ;push accu B onto the SSTACK
                                                              ;Transmit next byte (start pointer in X, byte count in Y)
00ED8A 03ED8A E6 30                   DISP_STREAM_NB_1        LDAB    1,X+                                            ;get data
00ED8C 03ED8C MACRO                                           DISP_TX_NB                                              ;transmit data (SSTACK: 5 bytes)
                                      ;#Transmit commands and data (non-blocking)                                      (DISP_TX_NB)
                                      ; args:   B: buffer entry                                                        (DISP_TX_NB)
                                      ; result: C: 1=successful, 0=nothing has been done                               (DISP_TX_NB)
                                      ; SSTACK: 5 bytes                                                                (DISP_TX_NB)
                                      ;         X, Y and D are preserved                                               (DISP_TX_NB)
00ED8C 03ED8C MACRO                                           SSTACK_JOBSR    DISP_TX_NB, 5                            (DISP_TX_NB)
                                      ;#Check stack and call subroutine                                                (DISP_TX_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_NB/SSTACK_JOBSR)
00ED8C 03ED8C MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_TX_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00ED8C 03ED8C MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED8C 03ED8C 8F 14 12                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED8F 03ED8F 18 25 F7 04                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED93 03ED93 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED96 03ED96 18 22 F7 03                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED9A 03ED9A -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED9A 03ED9A -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_TX_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00ED9A 03ED9A 16 ED 08                                        JOBSR   \1                                               (DISP_TX_NB/SSTACK_JOBSR)
00ED9D 03ED9D 24 15                                           BCC     DISP_STREAM_NB_3                                ;TX buffer is full
00ED9F 03ED9F 04 36 E8                                        DBNE    Y, DISP_STREAM_NB_1                             ;transmit next byte
                                                              ;Successful transmission (new start pointer in X, $0000 in Y)
00EDA2 03EDA2 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EDA2 03EDA2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDA2 03EDA2 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDA5 03EDA5 18 25 F6 EE                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDA9 03EDA9 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDAC 03EDAC 18 22 F6 ED                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDB0 03EDB0 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDB0 03EDB0 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDB0 03EDB0 14 01                                           SEC                                                     ;signal success
00EDB2 03EDB2 33                      DISP_STREAM_NB_2        PULB                                                    ;pull accu B from the SSTACK
                                                              ;Done
00EDB3 03EDB3 3D                                              RTS
                                                              ;TX buffer is full (new start pointer+1 in X, new byte count in Y)
00EDB4 03EDB4 1A 1F                   DISP_STREAM_NB_3        LEAX    -1,X                                            ;restore pointer
                                                              ;Unsucessful transmission (new start pointer in X, new byte count in Y)
00EDB6 03EDB6 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EDB6 03EDB6 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDB6 03EDB6 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDB9 03EDB9 18 25 F6 DA                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDBD 03EDBD 8F 14 40                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDC0 03EDC0 18 22 F6 D9                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDC4 03EDC4 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDC4 03EDC4 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDC4 03EDC4 10 FE                                           CLC                                                     ;signal success
00EDC6 03EDC6 20 EA                                           JOB     DISP_STREAM_NB_2                                ; done
                                      ;#Transmit a sequence of commands and data (non-blocking)
                                      ; args:   X: pointer to the start of the sequence
                                      ;         Y: number of bytes to transmit
                                      ; result: X: points to the byte after the sequence
                                      ;         Y: $0000
                                      ; SSTACK: 10 bytes
                                      ;         D is preserved
00EDC8 03EDC8 -> $EDC8                DISP_STREAM_BL          EQU     *
00EDC8 03EDC8 MACRO                                           DISP_MAKE_BL    DISP_STREAM_NB, 8
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL)
                                      ;-------------------------                                                       (DISP_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL)
00EDC8 03EDC8 MACRO                                           SCI_MAKE_BL \1 \2                                        (DISP_MAKE_BL)
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (DISP_MAKE_BL/SCI_MAKE_BL)
00EDC8 03EDC8 14 10                   LOOP                    SEI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (DISP_MAKE_BL/SCI_MAKE_BL)
00EDCA 03EDCA                                                 //SSTACK_PREPUSH        \2                               (DISP_MAKE_BL/SCI_MAKE_BL)
00EDCA 03EDCA 07 BD                                           JOBSR   \1                                               (DISP_MAKE_BL/SCI_MAKE_BL)
00EDCC 03EDCC 24 11                                           BCC     WAIT            ;function unsuccessful           (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (DISP_MAKE_BL/SCI_MAKE_BL)
00EDCE 03EDCE 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (DISP_MAKE_BL/SCI_MAKE_BL)
00EDD0 03EDD0 MACRO                                           SSTACK_PREPULL  2                                        (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
00EDD0 03EDD0 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDD0 03EDD0 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDD3 03EDD3 18 25 F6 C0                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDD7 03EDD7 8F 14 41                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDDA 03EDDA 18 22 F6 BF                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDDE 03EDDE -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDDE 03EDDE -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EDDE 03EDDE 3D                                              RTS                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DISP_MAKE_BL/SCI_MAKE_BL)
00EDDF 03EDDF MACRO                   WAIT                    ISTACK_WAIT                                              (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDDF 03EDDF 8F 14 0D                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDE2 03EDE2 18 25 F6 BD                                     BLO     OF ;ISTACK_OF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDE6 03EDE6 8F 14 43                                        CPS     #ISTACK_BOTTOM                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDE9 03EDE9 18 22 F6 BC                                     BHI     UF ;ISTACK_UF                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDED 03EDED MACRO                                           COP_SERVICE                     ;already taken care of by WAI (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00EDED 03EDED 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00EDF2 03EDF2 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00EDF7 03EDF7 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDF9 03EDF9 3E                                              WAI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDFA 03EDFA -> $E4A3                OF                      EQU     ISTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDFA 03EDFA -> $E4A9                UF                      EQU     ISTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00EDFA 03EDFA -> $EDFA                DONE                    EQU     *                                                (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DISP_MAKE_BL/SCI_MAKE_BL)
00EDFA 03EDFA MACRO                                           SSTACK_PREPUSH  \2                                       (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
00EDFA 03EDFA MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EDFA 03EDFA 8F 14 15                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EDFD 03EDFD 18 25 F6 96                                     BLO     OF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EE01 03EE01 8F 14 43                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EE04 03EE04 18 22 F6 95                                     BHI     UF                      ;=> 3 cycles     4 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EE08 03EE08 -> $E49D                UF                      EQU     SSTACK_UF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EE08 03EE08 -> $E497                OF                      EQU     SSTACK_OF                                        (DISP_MAKE_BL/SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00EE08 03EE08 20 BE                                           JOB     LOOP                                             (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#SPI ISR for transmitting data to the ST7565R display controller
                                      ;--------------------------
00EE0A 03EE0A -> $EE0A                DISP_ISR                EQU     *
                                                              ;Check SPIF flag
00EE0A 03EE0A 96 DB                                           LDAA    SPISR                                           ;read the status register
00EE0C 03EE0C 85 80                                           BITA    #SPIF                                           ;check SPIF flag (transmission complete)
00EE0E 03EE0E 27 07                                           BEQ     DISP_ISR_1                                      ;check SPTEF flag (transmit buffer empty)
00EE10 03EE10 F7 00 DD                                        TST     SPIDRL                                          ;clear SPIF flag
00EE13 03EE13 1D 14 77 80                                     BCLR    DISP_STAT, #DISP_STAT_BUSY                      ;clear busy indicator
                                                              ;Check SPTEF flag (SPISR in A)
00EE17 03EE17 85 20                   DISP_ISR_1              BITA    #SPTEF                                          ;check SPTEF flag (transmit buffer empty)
00EE19 03EE19 27 23                                           BEQ     DISP_ISR_4                                      ;Spi's transmit buffer is full
                                                              ;Check if TX buffer has data
00EE1B 03EE1B FC 14 88                                        LDD     DISP_BUF_IN                                     ;IN->A, OUT->B
00EE1E 03EE1E 18 17                                           CBA                                                     ;check if buffer is empty
00EE20 03EE20 27 2D                                           BEQ     DISP_ISR_5                                      ;TX buffer is empty
                                                              ;Check transmission counter (OUT in B)
00EE22 03EE22 CE 14 78                                        LDX     #DISP_BUF
00EE25 03EE25 B6 14 77                                        LDAA    DISP_STAT
00EE28 03EE28 84 7F                                           ANDA    #DISP_STAT_REPEAT
00EE2A 03EE2A 26 36                                           BNE     DISP_ISR_7                                      ;repeat transmission
                                                              ;Check for escape character (buffer pointer in X, OUT in B)
00EE2C 03EE2C A6 E5                                           LDAA    B,X                                             ;next char->A
00EE2E 03EE2E 81 E3                                           CMPA    #DISP_ESC_START
00EE30 03EE30 27 3D                                           BEQ     DISP_ISR_8                                      ;escape character found
                                                              ;Transmit character (char in A, OUT in B)
00EE32 03EE32 5A DD                   DISP_ISR_2              STAA    SPIDRL                                          ;transmit character
00EE34 03EE34 1C 14 77 80                                     BSET    DISP_STAT, #DISP_STAT_BUSY                      ;set busy indicator
00EE38 03EE38 52                      DISP_ISR_3              INCB                                                    ;advance OUT index
00EE39 03EE39 C4 0F                                           ANDB    #(DISP_BUF_SIZE-1)
00EE3B 03EE3B 7B 14 89                                        STAB    DISP_BUF_OUT
                                                              ;Done
00EE3E 03EE3E MACRO                   DISP_ISR_4              ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00EE3E 03EE3E 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00EE41 03EE41 25 06                                           BLO     OF                                               (ISTACK_RTI)
00EE43 03EE43 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00EE46 03EE46 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00EE48 03EE48 0B                                              RTI                                                      (ISTACK_RTI)
00EE49 03EE49 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00EE4C 03EE4C 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;Wait for more TX data
00EE4F 03EE4F 1E 14 77 80 07          DISP_ISR_5              BRSET   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_6          ;check for ongoing transmission
00EE54 03EE54 18 0B 9E 00 D8                                  MOVB    #DISP_SPICR1_CONFIG, SPICR1                     ;disable SPI
00EE59 03EE59 20 E3                                           JOB     DISP_ISR_4                                      ;done
00EE5B 03EE5B 18 0B DE 00 D8          DISP_ISR_6              MOVB    #(SPE|DISP_SPICR1_CONFIG), SPICR1               ;disable transmit buffer empty interrupt
00EE60 03EE60 20 DC                                           JOB     DISP_ISR_4                                      ;done
                                                              ;Repeat transmission (buffer pointer in X, OUT in B, DISP_STAT_REPEAT in A)
00EE62 03EE62 18 0D E5 00 DD          DISP_ISR_7              MOVB    B,X, SPIDRL                                     ;Transmit data
00EE67 03EE67 43                                              DECA
00EE68 03EE68 8A 80                                           ORAA    #DISP_STAT_BUSY
00EE6A 03EE6A 7A 14 77                                        STAA    DISP_STAT
00EE6D 03EE6D 20 CF                                           JOB     DISP_ISR_4                                      ;done
                                                              ;Escape character found (buffer pointer in X, OUT in B)
00EE6F 03EE6F 52                      DISP_ISR_8              INCB                                                    ;skip ESC character
00EE70 03EE70 C4 0F                                           ANDB    #(DISP_BUF_SIZE-1)
00EE72 03EE72 F1 14 88                                        CMPB    DISP_BUF_IN                                     ;check if ESC command is available
00EE75 03EE75 27 D8                                           BEQ     DISP_ISR_5                                      ;ESC sequence is incomplete
                                                              ;Evaluate the escape command (buffer pointer in X, new OUT in B)
00EE77 03EE77 A6 E5                                           LDAA    B,X                                             ;ESC command -> A
00EE79 03EE79 04 80 14                                        IBEQ    A, DISP_ISR_10                                  ;$FF: transmit escape character
00EE7C 03EE7C 04 80 15                                        IBEQ    A, DISP_ISR_11                                  ;$FE: switch to command mode
00EE7F 03EE7F 04 80 23                                        IBEQ    A, DISP_ISR_12                                  ;$FD: switch to data mode
                                                              ;Set TX counter (TX count+3 in A, new OUT in B)
00EE82 03EE82 80 04                                           SUBA    #4                                              ;adjust repeat count
00EE84 03EE84 1F 14 77 80 02                                  BRCLR   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_9          ;transmission in progress
00EE89 03EE89 8A 80                                           ORAA    #DISP_STAT_BUSY
00EE8B 03EE8B 7A 14 77                DISP_ISR_9              STAA    DISP_STAT                                       ;set TX count
00EE8E 03EE8E 20 A8                                           JOB     DISP_ISR_3                                      ;remove ESC sequence from TX buffer
                                                              ;Transmit escape character (new OUT in B)
00EE90 03EE90 86 E3                   DISP_ISR_10             LDAA    #DISP_ESC_START
00EE92 03EE92 20 9E                                           JOB     DISP_ISR_2
                                                              ;Switch to command mode (new OUT in B)
00EE94 03EE94 1F 02 48 10 9F          DISP_ISR_11             BRCLR   DISP_A0_PORT, #DISP_A0_PIN, DISP_ISR_3          ;already in command mode
00EE99 03EE99 1E 14 77 80 BD                                  BRSET   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_6          ;transmission in progress
                                                              ;BCLR   DISP_A0_PORT, #DISP_A0_PIN                      ;switch to command mode
00EE9E 03EE9E 18 0B 08 02 48                                  MOVB    #DISP_RESET_PIN, DISP_A0_PORT                   ; shortcut
00EEA3 03EEA3 20 93                                           JOB     DISP_ISR_3                                      ;escape sequence processed
                                                              ;Switch to data mode (new OUT in B)
00EEA5 03EEA5 1E 02 48 10 8E          DISP_ISR_12             BRSET   DISP_A0_PORT, #DISP_A0_PIN, DISP_ISR_3          ;already in data mode
00EEAA 03EEAA 1E 14 77 80 AC                                  BRSET   DISP_STAT, #DISP_STAT_BUSY, DISP_ISR_6          ;transmission in progress
                                                              ;BSET   DISP_A0_PORT, #DISP_A0_PIN                      ;switch to data mode
00EEAF 03EEAF 18 0B 18 02 48                                  MOVB    #(DISP_A0_PIN|DISP_RESET_PIN), DISP_A0_PORT     ; shortcut
00EEB4 03EEB4 20 82                                           JOB     DISP_ISR_3                                      ;escape sequence processed
00EEB6 03EEB6 -> $EEB6                DISP_CODE_END           EQU     *
00EEB6 03EEB6 -> $3EEB6               DISP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F9AE 03F9AE                                                 ORG     DISP_TABS_START, DISP_TABS_START_LIN
                                      ;#Setup stream
00F9AE 03F9AE 40                      DISP_SEQ_INIT_START     DB      $40                             ;start display at line 0
00F9AF 03F9AF A0                                              DB      $A0                             ;flip display
00F9B0 03F9B0 C8                                              DB      $C8                             ;COM0 ->
                                                              ;DB     $A1                             ;flip display
                                                              ;DB     $C0                             ;COM0 ->
00F9B1 03F9B1 A2                                              DB      $A2                             ;set bias 1/9 (Duty 1/65) ;
00F9B2 03F9B2 2F                                              DB      $2F                             ;enabable booster, regulator and follower
00F9B3 03F9B3 F8                                              DB      $F8                             ;set booster to 4x
00F9B4 03F9B4 00                                              DB      $00
00F9B5 03F9B5 27                                              DB      $27                             ;set ref value to 6.5
00F9B6 03F9B6 81                                              DB      $81                             ;set alpha value to 47
00F9B7 03F9B7 10                                              DB      $10                             ;V0=alpha*(1-(ref/162)*2.1V =[4V..13.5V]
00F9B8 03F9B8 AC                                              DB      $AC                             ;no static indicator
00F9B9 03F9B9 00                                              DB      $00
00F9BA 03F9BA AF                                              DB      $AF                             ;enable display
00F9BB 03F9BB -> $F9BB                DISP_SEQ_INIT_END       EQU     *
                                      ;#Switch to command input
00F9BB 03F9BB E3                      DISP_SEQ_CMD_START      DB      DISP_ESC_START
00F9BC 03F9BC FE                                              DB      DISP_ESC_CMD
00F9BD 03F9BD -> $F9BD                DISP_SEQ_CMD_END        EQU     *
                                      ;#Switch to data input
00F9BD 03F9BD E3                      DISP_SEQ_DATA_START     DB      DISP_ESC_START
00F9BE 03F9BE FD                                              DB      DISP_ESC_DATA
00F9BF 03F9BF -> $F9BF                DISP_SEQ_DATA_END       EQU     *
                                      ;;#Clear screen
                                      ;DISP_SEQ_CLEAR_START   DB  $B0 $10 $04                         ;set page 0
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B1 $10 $04                         ;set page 1
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B2 $10 $04                         ;set page 2
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B3 $10 $04                         ;set page 3
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B4 $10 $04                         ;set page 4
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B5 $10 $04                         ;set page 5
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B6 $10 $04                         ;set page 6
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;                       DB  $B7 $10 $04                         ;set page 7
                                      ;                       DB  DISP_ESC_START DISP_ESC_DATA        ;switch to data input
                                      ;                       DB  DISP_ESC_START $80 $00              ;repeat 128 times
                                      ;                       DB  DISP_ESC_START DISP_ESC_CMD         ;switch to command input
                                      ;DISP_SEQ_CLEAR_END     EQU     *
00F9BF 03F9BF -> $F9BF                DISP_TABS_END           EQU     *
00F9BF 03F9BF -> $3F9BF               DISP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# AriCalculator - KEYS - Keypad Driver (AriCalculator RevC)                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the key pad driver for the AriCalculator hardware RevC.          #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 24, 2012                                                           #
                                      ;#      - Initial release                                                      #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;#
                                      ;# Keypad layout:
                                      ;#
                                      ;#           P  P  P  P  P  P
                                      ;#           P  P  P  P  P  P
                                      ;#           0  1  2  3  4  5
                                      ;#
                                      ;#           |  |  |  |  |  |
                                      ;#  PAD6 ---29-28-27-26-25-24 |G
                                      ;#           |  |  |  |  |  | |
                                      ;#  PAD5 ---23-22-21-20-1F-1E |F
                                      ;#           |  |  |  |  |  | |
                                      ;#  PAD4 ---1D-1C-1B-1A-19-18 |E
                                      ;#              |  |  |  |  | |
                                      ;#  PAD3 ------16-15-14-13-12 |D
                                      ;#              |  |  |  |  | |
                                      ;#  PAD2 ------10--F--E--D--C |C
                                      ;#              |  |  |  |  | |
                                      ;#  PAD1 -------A--9--8--7--6 |B
                                      ;#              |  |  |  |  | |
                                      ;#  PAD0 -------4--3--2--1--0 |A
                                      ;#           ________________
                                      ;#           5  4  3  2  1  0
                                      ;#
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;#Column port
00F9BF 03F9BF -> $0271                KEYS_COL_PORT           EQU     PT1AD           ;default is PAD
00F9BF 03F9BF -> $027D                KEYS_COL_IE             EQU     PIE1AD          ;default is PAD
00F9BF 03F9BF -> $027F                KEYS_COL_IF             EQU     PIF1AD          ;default is PAD
00F9BF 03F9BF -> $0006                KEYS_COL_MSB            EQU     6               ;default is PAD6
00F9BF 03F9BF -> $0000                KEYS_COL_LSB            EQU     0               ;default is PAD0
                                      ;#Row port
00F9BF 03F9BF -> $0258                KEYS_ROW_PORT           EQU     PTP             ;default is PP
00F9BF 03F9BF -> $025A                KEYS_ROW_DDR            EQU     DDRP            ;default is PP
00F9BF 03F9BF -> $0005                KEYS_ROW_MSB            EQU     5               ;default is PP5
00F9BF 03F9BF -> $0000                KEYS_ROW_LSB            EQU     0               ;default is PP0
                                      ;Debounce delay
                                      ;--------------
                                      ;Output compare channel
00F9BF 03F9BF -> $0004                KEYS_OC                 EQU     $4              ;default is OC4 (must be >5)
                                      ;Debounce delay (TIM cycles)
00F9BF 03F9BF -> $0005                KEYS_DEBOUNCE_DELAY     EQU     5               ;default is 5*2.6214ms
                                      ;Buffer
                                      ;------
                                      ;#Buffer size
00F9BF 03F9BF -> $0008                KEYS_BUF_SIZE           EQU     8               ;depth of the command buffer
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
00F9BF 03F9BF -> $0001                KEYS_BLOCKING_OFF       EQU     1               ;blocking functions disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Buffer
00F9BF 03F9BF -> $0007                KEYS_BUF_MASK           EQU     KEYS_BUF_SIZE-1 ;index mask
                                      ;#Keypad dimensions
00F9BF 03F9BF -> $0007                KEYS_COL_SIZE           EQU     1+KEYS_COL_MSB-KEYS_COL_LSB
00F9BF 03F9BF -> $0006                KEYS_ROW_SIZE           EQU     1+KEYS_ROW_MSB-KEYS_ROW_LSB
                                      ;#Port masks
00F9BF 03F9BF -> $007F                KEYS_COL_MASK           EQU     ($FF>>(7-KEYS_COL_MSB))&($FF<<KEYS_COL_LSB)
00F9BF 03F9BF -> $003F                KEYS_ROW_MASK           EQU     ($FF>>(7-KEYS_ROW_MSB))&($FF<<KEYS_ROW_LSB)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00148A 00148A                                                 ORG     KEYS_VARS_START, KEYS_VARS_START_LIN
00148A 00148A -> $148A                KEYS_AUTO_LOC1          EQU     *               ;1st auto-place location
00148A 00148A                                                 ALIGN   1
                                      ;#Command buffer
00148A 00148A                         KEYS_BUF                DS      2*KEYS_BUF_SIZE
00149A 00149A                         KEYS_BUF_IN             DS      1               ;points to the next free space
00149B 00149B                         KEYS_BUF_OUT            DS      1               ;points to the oldest entry
00149C 00149C -> $149C                KEYS_AUTO_LOC2          EQU     *               ;2nd auto-place location
                                      ;#Delay counter (>0 during debounce delay, 0 otherwise)
00149C 00149C -> $149C                KEYS_DELAY_COUNT        EQU     ((KEYS_AUTO_LOC1&1)*KEYS_AUTO_LOC1)+(((~KEYS_AUTO_LOC1)&1)*KEYS_AUTO_LOC2)
00149C 00149C                                                 UNALIGN ((~KEYS_AUTO_LOC1)&1)
00149D 00149D -> $149D                KEYS_VARS_END           EQU     *
00149D 00149D -> $149D                KEYS_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00EEB6 03EEB6                                                 ORG     KEYS_CODE_START, KEYS_CODE_START_LIN
                                      ;#Receive one keystroke - non-blocking
                                      ; args:   none
                                      ; result: A:      key code
                                      ;         C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and B are preserved
00EEB6 03EEB6 -> $EEB6                KEYS_GET_NB             EQU     *
                                                              ;Save registers
00EEB6 03EEB6 37                                              PSHB
00EEB7 03EEB7 34                                              PSHX
                                                              ;Check if there is data in the RX queue
00EEB8 03EEB8 FC 14 9A                                        LDD     KEYS_BUF_IN                             ;A:B=in:out
00EEBB 03EEBB 18 16                                           SBA                                             ;A=in-out
00EEBD 03EEBD 27 2B                                           BEQ     KEYS_GET_NB_3                           ;RX buffer is empty
                                                              ;Pull entry from the buffer (out-index in B)
00EEBF 03EEBF CE 14 8A                                        LDX     #KEYS_BUF
00EEC2 03EEC2 A6 E5                                           LDAA    B,X
00EEC4 03EEC4 52                                              INCB                                            ;increment out pointer
00EEC5 03EEC5 C4 07                                           ANDB    #KEYS_BUF_MASK
00EEC7 03EEC7 7B 14 9B                                        STAB    KEYS_BUF_OUT
                                                              ;Recover from buffer overflow
00EECA 03EECA F7 14 9C                                        TST     KEYS_DELAY_COUNT
00EECD 03EECD 26 05                                           BNE     KEYS_GET_NB_1                           ;debounce delay active
00EECF 03EECF 18 0B 7F 02 7D                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IE             ;enable KWU interrupt
                                                              ;Restore registers
00EED4 03EED4 MACRO                   KEYS_GET_NB_1           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EED4 03EED4 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EED4 03EED4 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EED7 03EED7 18 25 F5 BC                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEDB 03EEDB 8F 14 3E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEDE 03EEDE 18 22 F5 BB                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEE2 03EEE2 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEE2 03EEE2 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEE2 03EEE2 14 01                                           SEC                                             ;flag success
00EEE4 03EEE4 30                      KEYS_GET_NB_2           PULX
00EEE5 03EEE5 33                                              PULB
                                                              ;Done
00EEE6 03EEE6 3D                                              RTS
00EEE7 03EEE7 7B 14 9B                                        STAB    KEYS_BUF_OUT
                                                              ;RX buffer is empty
00EEEA 03EEEA MACRO                   KEYS_GET_NB_3           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00EEEA 03EEEA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEEA 03EEEA 8F 14 0D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEED 03EEED 18 25 F5 A6                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEF1 03EEF1 8F 14 3E                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEF4 03EEF4 18 22 F5 A5                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEF8 03EEF8 -> $E49D                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEF8 03EEF8 -> $E497                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00EEF8 03EEF8 10 FE                                           CLC                                             ;flag problem
00EEFA 03EEFA 20 E8                                           JOB     KEYS_GET_NB_2
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A: key code
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and B are preserved
                                      ;#Keyboard wakeup ISR for column port (PAD)
00EEFC 03EEFC -> $EEFC                KEYS_ISR_KWU            EQU     *
                                                              ;Clear interrupt flag
00EEFC 03EEFC 18 0B 7F 02 7F                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IF             ;clear interrupt flag
                                                              ;Check for active debounce delay
00EF01 03EF01 F7 14 9C                                        TST     KEYS_DELAY_COUNT
00EF04 03EF04 26 39                                           BNE     KEYS_ISR_KWU_3                          ;debounce delay ongoing
                                                              ;Check for missed keystrokes (shortcut)
00EF06 03EF06 1E 02 71 7F 23                                  BRSET   KEYS_COL_PORT, #KEYS_COL_MASK, KEYS_ISR_KWU_2;all keys released
                                                              ;Scan colums for keystrokes
00EF0B 03EF0B CE 00 00                                        LDX     #$0000                                  ;initialize key code
00EF0E 03EF0E 86 20                                           LDAA    #(1<<KEYS_ROW_MSB)                      ;initialize column selector
00EF10 03EF10 18 0B 3F 02 58          KEYS_ISR_KWU_1          MOVB    #KEYS_ROW_MASK, KEYS_ROW_PORT           ;drive speed-up pulse
00EF15 03EF15 7A 02 5A                                        STAA    KEYS_ROW_DDR                            ;drive unselected colums by pull-ups
00EF18 03EF18 79 02 58                                        CLR     KEYS_ROW_PORT                           ;drive selected column low
00EF1B 03EF1B A7                                              NOP                                             ;wait for input synchronizers
00EF1C 03EF1C C6 80                                           LDAB    #(~KEYS_COL_MASK)                       ;capture column pattern
00EF1E 03EF1E FA 02 71                                        ORAB    KEYS_COL_PORT
00EF21 03EF21 51                                              COMB
00EF22 03EF22 26 20                                           BNE     KEYS_ISR_KWU_4                          ;keystroke column detected
00EF24 03EF24 1A 01                                           LEAX    1,X                                     ;switch to next keycode
00EF26 03EF26 44                                              LSRA                                            ;switch to next column
00EF27 03EF27 24 E7                                           BCC     KEYS_ISR_KWU_1                          ;check next column (shortcut for KEYS_ROW_LSB==0)
                                                              ;ANDA   #KEYS_ROW_MASK                          ;check next column (generic)
                                                              ;BNE    KEYS_ISR_KWU_1
                                                              ;No keystroke detected
00EF29 03EF29 18 0B 3F 02 5A                                  MOVB    #KEYS_ROW_MASK, KEYS_ROW_DDR            ;observe all columns
                                                              ;Done
00EF2E 03EF2E MACRO                   KEYS_ISR_KWU_2          ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00EF2E 03EF2E 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00EF31 03EF31 25 06                                           BLO     OF                                               (ISTACK_RTI)
00EF33 03EF33 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00EF36 03EF36 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00EF38 03EF38 0B                                              RTI                                                      (ISTACK_RTI)
00EF39 03EF39 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00EF3C 03EF3C 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;Debounce delay is active (disable KWU interrupts)
00EF3F 03EF3F 79 02 7D                KEYS_ISR_KWU_3          CLR     KEYS_COL_IE                             ;disable interrupts (shortcut for unshared col port)
                                                              ;BCLR   KEYS_COL_IE, #KEYS_COL_MASK             ;disable interrupts (generic)
00EF42 03EF42 20 EA                                           JOB     KEYS_ISR_KWU_2                          ;done
                                                              ;Keystroke column determined (column selector in A row pattern in B, key code in X, column selector in KEYS_ROW_PORT)
00EF44 03EF44 18 0B 3F 02 5A          KEYS_ISR_KWU_4          MOVB    #KEYS_ROW_MASK, KEYS_ROW_DDR            ;observe all columns
00EF49 03EF49 7A 02 7F                                        STAA    KEYS_COL_IF                             ;clear retriggered interrupt flag
00EF4C 03EF4C 1A 1A                                           LEAX    -(KEYS_ROW_SIZE*(KEYS_COL_LSB+1)),X     ;consider row offset
00EF4E 03EF4E 1A 06                   KEYS_ISR_KWU_5          LEAX    KEYS_ROW_SIZE,X                         ;switch column in keycode
00EF50 03EF50 54                                              LSRB                                            ;check next column
00EF51 03EF51 24 FB                                           BCC     KEYS_ISR_KWU_5                          ;check next row
                                                              ;Key code determined (key code in X, column selector in DDRP)
00EF53 03EF53 B7 51                                           TFR     X,B                                     ;kec code -> B
00EF55 03EF55 B6 14 9A                                        LDAA    KEYS_BUF_IN                             ;IN index -> A
00EF58 03EF58 CE 14 8A                                        LDX     #KEYS_BUF                               ;put key code into the buffer
00EF5B 03EF5B 6B E4                                           STAB    A,X
00EF5D 03EF5D 42                                              INCA                                            ;adjust IN index
00EF5E 03EF5E 84 07                                           ANDA    #KEYS_BUF_MASK
00EF60 03EF60 B1 14 9B                                        CMPA    KEYS_BUF_OUT                            ;check for buffer overvlow
00EF63 03EF63 27 DA                                           BEQ     KEYS_ISR_KWU_3                          ;buffer overflow (disable KWU interrupts)
00EF65 03EF65 7A 14 9A                                        STAA    KEYS_BUF_IN                             ;update IN index
                                                              ;Setup debounce delay
00EF68 03EF68 18 0B 05 14 9C                                  MOVB    #KEYS_DEBOUNCE_DELAY, KEYS_DELAY_COUNT  ;set delay counter
00EF6D 03EF6D 18 04 00 44 00 58                               MOVW    TCNT, (TC0+(2*KEYS_OC))                 ;set OC to max delay
00EF73 03EF73 MACRO                                           TIM_EN  KEYS_OC                                 ;enable timer
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
00EF73 03EF73 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (TIM_EN)
                                      ;############################################################################### (TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S                 ;  0=input capture (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C                 ;  1=output compare (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;      A B B B                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y D D D                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;        T N P                                  (TIM_EN/TIM_MULT_EN)
                                                                       ;        O E E                                  (TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B                                (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
00EF73 03EF73 18 0B 10 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
00EF78 03EF78 4C 4C 10                                        BSET    TIE, #\1                        ;enable interrupts (TIM_EN/TIM_MULT_EN)
00EF7B 03EF7B 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (TIM_EN/TIM_MULT_EN)
00EF80 03EF80 20 BD                                           JOB     KEYS_ISR_KWU_3                          ;disable KWU interrupts
                                      ;#Timer ISR for debounce delay
00EF82 03EF82 -> $EF82                KEYS_ISR_TIM            EQU     *
                                                              ;Clear interrupt flag
00EF82 03EF82 MACRO                                           TIM_CLRIF       KEYS_OC                         ;clear TIM interrupt flag
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00EF82 03EF82 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00EF82 03EF82 18 0B 10 00 4E                                  MOVB    #\1, TFLG1                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Decrement delay count
00EF87 03EF87 73 14 9C                                        DEC     KEYS_DELAY_COUNT
00EF8A 03EF8A 27 11                                           BEQ     KEYS_ISR_TIM_2                          ;debounce delay is over
                                                              ;Done
00EF8C 03EF8C MACRO                   KEYS_ISR_TIM_1          ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00EF8C 03EF8C 8F 14 04                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00EF8F 03EF8F 25 06                                           BLO     OF                                               (ISTACK_RTI)
00EF91 03EF91 8F 14 3A                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00EF94 03EF94 22 04                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00EF96 03EF96 0B                                              RTI                                                      (ISTACK_RTI)
00EF97 03EF97 06 E4 A3                OF                      JOB     ISTACK_OF                                        (ISTACK_RTI)
00EF9A 03EF9A 06 E4 A9                UF                      JOB     ISTACK_UF                                        (ISTACK_RTI)
                                                              ;Check if all keys have been released
00EF9D 03EF9D 18 0B 7F 02 7F          KEYS_ISR_TIM_2          MOVB    #KEYS_COL_MASK, KEYS_COL_IF             ;clear KWU interrupt flag
00EFA2 03EFA2 1E 02 71 7F 07                                  BRSET   KEYS_COL_PORT, #KEYS_COL_MASK, KEYS_ISR_TIM_3;all keys released
00EFA7 03EFA7 18 0B 05 14 9C                                  MOVB    #KEYS_DEBOUNCE_DELAY, KEYS_DELAY_COUNT  ;restart delay counter
00EFAC 03EFAC 20 DE                                           JOB     KEYS_ISR_TIM_1                          ;done
                                                              ;All keys have been released
00EFAE 03EFAE MACRO                   KEYS_ISR_TIM_3          TIM_DIS KEYS_OC                                 ;disable timer
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
00EFAE 03EFAE MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
00EFAE 03EFAE 4D 4C 10                                        BCLR    TIE, #\1                                         (TIM_DIS/TIM_MULT_DIS)
00EFB1 03EFB1 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
00EFB3 03EFB3 79 00 46                                        CLR     TSCR1                                            (TIM_DIS/TIM_MULT_DIS)
00EFB6 03EFB6 -> $EFB6                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
00EFB6 03EFB6 18 0B 7F 02 7D                                  MOVB    #KEYS_COL_MASK, KEYS_COL_IE             ;enable KWU interrupt
00EFBB 03EFBB 20 CF                                           JOB     KEYS_ISR_TIM_1                          ;done
00EFBD 03EFBD -> $EFBD                KEYS_CODE_END           EQU     *
00EFBD 03EFBD -> $3EFBD               KEYS_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F9BF 03F9BF                                                 ORG     KEYS_TABS_START, KEYS_TABS_START_LIN
00F9BF 03F9BF -> $F9BF                KEYS_TABS_END           EQU     *
00F9BF 03F9BF -> $3F9BF               KEYS_TABS_END_LIN       EQU     @
