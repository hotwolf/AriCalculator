                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#Memory map:
??????        -> $0001                MMAP_S12XEP100          EQU     1               ;S12XEP100
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;#COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;#Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;#STRING
??????        -> $0001                STRING_ENABLE_FILL_NB   EQU     1               ;enable STRING_FILL_NB
??????        -> $0001                STRING_ENABLE_FILL_BL   EQU     1               ;enable STRING_FILL_BL
??????        -> $0001                STRING_ENABLE_PRINTABLE EQU     1               ;enable STRING_PRINTABLE
                                      ;#ISTACK
??????        -> $0001                ISTACK_NO_WAI           EQU     1               ;don't use WAI instruction
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001000 0F9000                                                 ORG     MMAP_RAM_F9_START, MMAP_RAM_F9_START_LIN
                                      ;Code
001000 0F9000 -> $1000                START_OF_CODE           EQU     *
001000 0F9000 -> $1000                DEMO_CODE_START         EQU     *
001000 0F9000 -> $F9000               DEMO_CODE_START_LIN     EQU     @
001310 0F9310                                                 ORG     DEMO_CODE_END, DEMO_CODE_END_LIN
001310 0F9310 -> $1310                BASE_CODE_START         EQU     *
001310 0F9310 -> $F9310               BASE_CODE_START_LIN     EQU     @
001AF2 0F9AF2                                                 ORG     BASE_CODE_END, BASE_CODE_END_LIN
                                      ;Variables
001AF2 0F9AF2 -> $1AF2                DEMO_VARS_START         EQU     *
001AF2 0F9AF2 -> $F9AF2               DEMO_VARS_START_LIN     EQU     @
001AF3 0F9AF3                                                 ORG     DEMO_VARS_END, DEMO_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                BASE_VARS_START         EQU     *
001AF3 0F9AF3 -> $F9AF3               BASE_VARS_START_LIN     EQU     @
001B32 0F9B32                                                 ORG     BASE_VARS_END, BASE_VARS_END_LIN
                                      ;Tables
001B32 0F9B32 -> $1B32                DEMO_TABS_START         EQU     *
001B32 0F9B32 -> $F9B32               DEMO_TABS_START_LIN     EQU     @
001B97 0F9B97                                                 ORG     DEMO_TABS_END, DEMO_TABS_END_LIN
001B97 0F9B97 -> $1B97                BASE_TABS_START         EQU     *
001B97 0F9B97 -> $F9B97               BASE_TABS_START_LIN     EQU     @
001C8C 0F9C8C                                                 ORG     BASE_TABS_END, BASE_TABS_END_LIN
                                      ;Stack
001C8C 0F9C8C -> $1C8C                SSTACK_TOP              EQU     *
001C8C 0F9C8C -> $F9C8C               SSTACK_TOP_LIN          EQU     @
001C8C 0F9C8C -> $7F10                SSTACK_BOTTOM           EQU     VECTAB_START
001C8C 0F9C8C -> $FFF10               SSTACK_BOTTOM_LIN       EQU     VECTAB_START_LIN
001C8C 0F9C8C -> $0014                HEADER_REPEAT           EQU     20
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF2 0F9AF2                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
001AF2 0F9AF2                         LINE_COUNT              DS      1
001AF3 0F9AF3 -> $1AF3                DEMO_VARS_END           EQU     *
001AF3 0F9AF3 -> $F9AF3               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001000 0F9000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
001000 0F9000 MACRO                                           BASE_INIT
                                      ;#Initialization                                                                 (BASE_INIT)
                                      ;---------------                                                                 (BASE_INIT)
001000 0F9000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
001000 0F9000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
001002 0F9002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
001004 0F9004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
001006 0F9006 18 03 FF FF 00 8C                       MOVW    #%1111_1111_1111_1111, ATD1DIENH        ;switch unused pins to digital (BASE_INIT/GPIO_INIT)
00100C 0F900C 18 03 F0 FC 02 CC                       MOVW    #%1111_0000_1111_1100, ATD0DIENH                         (BASE_INIT/GPIO_INIT)
001012 0F9012 18 03 FF FF 02 7E                       MOVW    #%1111_1111_1111_1111, PER0AD1          ;enable pull-up on all unused pins (BASE_INIT/GPIO_INIT)
001018 0F9018 18 03 F0 FC 02 76                       MOVW    #%1111_0000_1111_1100, PER0AD0                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A & B                                                     (BASE_INIT/GPIO_INIT)
00101E 0F901E 18 03 DC 9F 00 0C                       MOVW    #(((PUPKE|BKPUE|PUPEE|PUPDE|PUPCE)<<8)|RDPK|RDPE|RDPD|RDPC|PUPBE|PUPAE), PUCR ;enable pull-ups and reduced drive (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                                            (BASE_INIT/GPIO_INIT)
001024 0F9024 18 03 FF FF 00 02                       MOVW    #$FFFF, DDRA                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port C & D                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PORTE                                              (BASE_INIT/GPIO_INIT)
00102A 0F902A 18 0B 04 00 09                          MOVB    #$04, DDRE                                               (BASE_INIT/GPIO_INIT)
00102F 0F902F 79 00 1E                                CLR     IRQCR           ;disable IRQ                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port F                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRF                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERF                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port H                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRH                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERH                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRJ                                                     (BASE_INIT/GPIO_INIT)
001032 0F9032 18 0B FC 02 6C                          MOVB    #$FC, PERJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port K                                                         (BASE_INIT/GPIO_INIT)
001037 0F9037 18 03 07 07 00 32                       MOVW    #$0707, PORTK                                            (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PTM                                                      (BASE_INIT/GPIO_INIT)
00103D 0F903D 18 03 BF FF 02 52                       MOVW    #$BFFF, DDRM                                             (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PERM                                                     (BASE_INIT/GPIO_INIT)
001043 0F9043 18 0B 80 02 56                          MOVB    #$80, WOMM                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port L                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRL                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   $#FF00, PERL                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
001048 0F9048 18 0B F3 02 58                          MOVB    #$F3, PTP                                                (BASE_INIT/GPIO_INIT)
00104D 0F904D 18 0B FF 02 5A                          MOVB    #$FF, DDRP                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRP                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port R                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRR                                                     (BASE_INIT/GPIO_INIT)
001052 0F9052 18 0B FF 03 6C                          MOVB    #$FF, PERR                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSR                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
001057 0F9057 18 0B 82 02 48                          MOVB    #$82, PTS                                                (BASE_INIT/GPIO_INIT)
00105C 0F905C 18 0B 70 02 4A                          MOVB    #$70, DDRS                                               (BASE_INIT/GPIO_INIT)
001061 0F9061 18 0B 1C 02 4C                          MOVB    #$1C, PERS                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSS                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRT                                                     (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRT                                                     (BASE_INIT/GPIO_INIT)
001066 0F9066 18 0B FE 02 44                          MOVB    #$FE, PERT                                               (BASE_INIT/GPIO_INIT)
00106B 0F906B MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00106B 0F906B 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
001070 0F9070 MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/CLOCK_INIT)
001070 0F9070 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
001075 0F9075 18 03 C4 80 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
00107B 0F907B 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
001081 0F9081 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Capture and clear CRG/CPMU flags                        (BASE_INIT/RESET_INIT)
001081 0F9081 96 37                                           LDAA    CRGFLG                  ;capture flags           (BASE_INIT/RESET_INIT)
001083 0F9083 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG            ;clear flags             (BASE_INIT/RESET_INIT)
                                                              ;Check for low voltage reset (flags in A)                (BASE_INIT/RESET_INIT)
001088 0F9088 CD 1B D5                                        LDY     #RESET_MSG_POWFAIL                               (BASE_INIT/RESET_INIT)
00108B 0F908B 85 20                                           BITA    #LVRF                                            (BASE_INIT/RESET_INIT)
00108D 0F908D 26 4E                                           BNE     RESET_INIT_4            ;low voltage reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for illegal address reset (flags in A)            (BASE_INIT/RESET_INIT)
00108F 0F908F CD 1B E1                                        LDY     #RESET_MSG_ILLADDR                               (BASE_INIT/RESET_INIT)
001092 0F9092 85 04                                           BITA    #ILAF                                            (BASE_INIT/RESET_INIT)
001094 0F9094 26 47                                           BNE     RESET_INIT_4            ;illegal address reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for power-on or external pin reset (flags in A)   (BASE_INIT/RESET_INIT)
001096 0F9096 FD 1B 2C                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/RESET_INIT)
001099 0F9099 27 45                                           BEQ     RESET_INIT_5            ;power-on or external pin reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (string in Y)           (BASE_INIT/RESET_INIT)
00109B 0F909B 87                                              CLRA                            ;initialize C0           (BASE_INIT/RESET_INIT)
00109C 0F909C CE 3F 00                                        LDX     #((RESET_MSG_LENGTH-1)<<8);initialize char limit and C1 (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0 in A) (BASE_INIT/RESET_INIT)
00109F 0F909F E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0010A1 0F90A1 2B 1F                                           BMI     RESET_INIT_2            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010A3 0F90A3 C1 20                   RESET_INIT_1            CMPB    #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0010A5 0F90A5 25 33                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010A7 0F90A7 C1 7E                                           CMPB    #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0010A9 0F90A9 22 2F                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010AB 0F90AB 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0010AD 0F90AD 18 0E                                           TAB                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0010AF 0F90AF B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0010B1 0F90B1 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
0010B3 0F90B3 B7 81                                           EXG     A, B                    ;C0:C1  -> D             (BASE_INIT/RESET_INIT)
0010B5 0F90B5 B7 D4                                           EXG     X, D                    ;C0:C1  -> X, char limit -> A (BASE_INIT/RESET_INIT)
0010B7 0F90B7 B7 51                                           TFR     X, B                    ;char limit:C1 -> D      (BASE_INIT/RESET_INIT)
                                                              ;Check character limit ((string pointer in Y, C0:C1 in X, char limit:C1 in D) (BASE_INIT/RESET_INIT)
0010B9 0F90B9 04 00 1E                                        DBEQ    A, RESET_INIT_3         ;invalid message         (BASE_INIT/RESET_INIT)
0010BC 0F90BC B7 D4                                           EXG     X, D                    ;C0:C1  -> D, char limit:C1 ->  X (BASE_INIT/RESET_INIT)
0010BE 0F90BE E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0010C0 0F90C0 2A E1                                           BPL     RESET_INIT_1            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;String termination found (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010C2 0F90C2                         RESET_INIT_2            ;ANDB   #$7F                    ;ignore termination      (BASE_INIT/RESET_INIT)
                                                              ;;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BLO    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BHI    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010C2 0F90C2 C1 A0                                           CMPB    #$A0            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0010C4 0F90C4 25 14                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010C6 0F90C6 C1 FE                                           CMPB    #$FE            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0010C8 0F90C8 22 10                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0010CA 0F90CA 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0010CC 0F90CC 18 0E                                           TAB                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0010CE 0F90CE B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0010D0 0F90D0 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
                                                              ;Check Fletcher's checksum (string in pointer Y, C1 in A, C0 in B) (BASE_INIT/RESET_INIT)
0010D2 0F90D2 A1 70                                           CMPA    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0010D4 0F90D4 26 04                                           BNE     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0010D6 0F90D6 E1 70                                           CMPB    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0010D8 0F90D8 27 06                                           BEQ     RESET_INIT_5            ;valid message           (BASE_INIT/RESET_INIT)
                                                              ;Invalid error message                                   (BASE_INIT/RESET_INIT)
0010DA 0F90DA CD 1B EF                RESET_INIT_3            LDY     #RESET_MSG_UNKNOWN      ;unknown error           (BASE_INIT/RESET_INIT)
                                                              ;Update error message                                    (BASE_INIT/RESET_INIT)
0010DD 0F90DD 7D 1B 2C                RESET_INIT_4            STY     RESET_MSG_PTR           ;set error message       (BASE_INIT/RESET_INIT)
                                                              ;Done                                                    (BASE_INIT/RESET_INIT)
0010E0 0F90E0 -> $10E0                RESET_INIT_5            EQU     *                                                (BASE_INIT/RESET_INIT)
0010E0 0F90E0 MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup 30K linear RAM space                              (BASE_INIT/MMAP_INIT)
0010E0 0F90E0 79 00 11                                        CLR     DIRECT                  ;lock DIRECT page register (BASE_INIT/MMAP_INIT)
0010E3 0F90E3 4C 13 0A                                        BSET    MMCCTL1, #(RAMHM|ROMHM) ;map RAM                 (BASE_INIT/MMAP_INIT)
0010E6 0F90E6 18 0B F9 00 16                                  MOVB    #$F9, RPAGE             ;map RPAGE $F9           (BASE_INIT/MMAP_INIT)
                                                              ;Setup MPU                                               (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 0: Register space                   -> read and write (BASE_INIT/MMAP_INIT)
0010EB 0F90EB 79 01 19                                        CLR     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0010EE 0F90EE 18 03 C0 00 01 1A                               MOVW    #((MMAP_D_REG_BYTE0<<8)|(MMAP_D_REG_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0010F4 0F90F4 18 03 00 40 01 1C                               MOVW    #((MMAP_D_REG_BYTE2<<8)|(MMAP_D_REG_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0010FA 0F90FA 18 03 00 FF 01 1E                               MOVW    #((MMAP_D_REG_BYTE4<<8)|(MMAP_D_REG_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: Unimplemented RAM                -> read only (BASE_INIT/MMAP_INIT)
001100 0F9100 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001103 0F9103 18 03 C0 01 01 1A                               MOVW    #((MMAP_D_URAM_BYTE0<<8)|(MMAP_D_URAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001109 0F9109 18 03 00 C1 01 1C                               MOVW    #((MMAP_D_URAM_BYTE2<<8)|(MMAP_D_URAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00110F 0F910F 18 03 DF FF 01 1E                               MOVW    #((MMAP_D_URAM_BYTE4<<8)|(MMAP_D_URAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: RAM                              -> read, write, and execute (BASE_INIT/MMAP_INIT)
001115 0F9115 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001118 0F9118 18 03 C1 E0 01 1A                               MOVW    #((MMAP_D_RAM_BYTE0<<8)|(MMAP_D_RAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00111E 0F911E 18 03 00 01 01 1C                               MOVW    #((MMAP_D_RAM_BYTE2<<8)|(MMAP_D_RAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001124 0F9124 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_RAM_BYTE4<<8)|(MMAP_D_RAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  Unimplemented EERAM             -> read only (BASE_INIT/MMAP_INIT)
00112A 0F912A 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00112D 0F912D 18 03 C2 00 01 1A                               MOVW    #((MMAP_D_UEERAM_BYTE0<<8)|(MMAP_D_UEERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001133 0F9133 18 03 00 C2 01 1C                               MOVW    #((MMAP_D_UEERAM_BYTE2<<8)|(MMAP_D_UEERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001139 0F9139 18 03 7D FF 01 1E                               MOVW    #((MMAP_D_UEERAM_BYTE4<<8)|(MMAP_D_UEERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  EERAM                           -> read, write, and execute (BASE_INIT/MMAP_INIT)
00113F 0F913F 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001142 0F9142 18 03 C2 7E 01 1A                               MOVW    #((MMAP_D_EERAM_BYTE0<<8)|(MMAP_D_EERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001148 0F9148 18 03 00 02 01 1C                               MOVW    #((MMAP_D_EERAM_BYTE2<<8)|(MMAP_D_EERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00114E 0F914E 18 03 7F FF 01 1E                               MOVW    #((MMAP_D_EERAM_BYTE4<<8)|(MMAP_D_EERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 3:  Unimplemented Flash             -> read only (BASE_INIT/MMAP_INIT)
001154 0F9154 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
001157 0F9157 18 03 C2 80 01 1A                               MOVW    #((MMAP_D_UFLASH_BYTE0<<8)|(MMAP_D_UFLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00115D 0F915D 18 03 00 CF 01 1C                               MOVW    #((MMAP_D_UFLASH_BYTE2<<8)|(MMAP_D_UFLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001163 0F9163 18 03 EF FF 01 1E                               MOVW    #((MMAP_D_UFLASH_BYTE4<<8)|(MMAP_D_UFLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 4:  Unimplemented Flash             -> read and execute (BASE_INIT/MMAP_INIT)
001169 0F9169 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00116C 0F916C 18 03 CF F0 01 1A                               MOVW    #((MMAP_D_FLASH_BYTE0<<8)|(MMAP_D_FLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
001172 0F9172 18 03 00 8F 01 1C                               MOVW    #((MMAP_D_FLASH_BYTE2<<8)|(MMAP_D_FLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
001178 0F9178 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_FLASH_BYTE4<<8)|(MMAP_D_FLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Enable descriptors in supervisor mode                   (BASE_INIT/MMAP_INIT)
00117E 0F917E 18 0B 80 01 19                                  MOVB    #SVSEN, MPUSEL                                   (BASE_INIT/MMAP_INIT)
001183 0F9183 MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (BASE_INIT/VECTAB_INIT)
001183 0F9183 18 0B 7F 01 21                                  MOVB    #(VECTAB_START>>8), IVBR                         (BASE_INIT/VECTAB_INIT)
                                                              ;Disable XGATE interrupts                                (BASE_INIT/VECTAB_INIT)
001188 0F9188 79 01 26                                        CLR     XGPRIO                                           (BASE_INIT/VECTAB_INIT)
                                                              ;Give TC0 high priority                                  (BASE_INIT/VECTAB_INIT)
00118B 0F918B 18 0B E0 01 27                                  MOVB    #(VEC_ECT_TC0&$F0), CFADDR                       (BASE_INIT/VECTAB_INIT)
001190 0F9190 18 0B 07 01 2F                                  MOVB    #$07, (CFDATA0+((VEC_ECT_TC0&$000E)>>1))         (BASE_INIT/VECTAB_INIT)
001195 0F9195 MACRO                                           SSTACK_INIT                                              (BASE_INIT)
001195 0F9195 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
001195 0F9195 CF 7F 10                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
001198 0F9198 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
00119A 0F919A MACRO                                           LED_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/LED_INIT)
                                      ;############################################################################### (BASE_INIT/LED_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/LED_INIT)
                                      ;#--------------                                                                 (BASE_INIT/LED_INIT)
                                                              ;Common variables                                        (BASE_INIT/LED_INIT)
00119A 0F919A 87 C7                                           CLRD                                    ;zero -> D       (BASE_INIT/LED_INIT)
00119C 0F919C 7C 1A F3                                        STD     LED_OC_CNT                      ;no remaining time, iterator reset (BASE_INIT/LED_INIT)
                                                              ;#LED status                                             (BASE_INIT/LED_INIT)
00119F 0F919F 7C 1A F5                                        STD     LED_C_REQ                       ;turn off LED C  (BASE_INIT/LED_INIT)
0011A2 0F91A2 7C 1A F7                                        STD     LED_D_REQ                       ;turn off LED D  (BASE_INIT/LED_INIT)
0011A5 0F91A5 MACRO                                           TVMON_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TVMON_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TVMON_INIT)
                                      ;############################################################################### (BASE_INIT/TVMON_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TVMON_INIT)
                                      ;#--------------                                                                 (BASE_INIT/TVMON_INIT)
                                                              ;Configure ADC                                           (BASE_INIT/TVMON_INIT)
0011A5 0F91A5 18 0B 40 02 C1                                  MOVB    #TVMON_ATDCTL1_CONFIG, ATDCTL1                   (BASE_INIT/TVMON_INIT)
0011AA 0F91AA 18 03 41 13 02 C2                               MOVW    #((TVMON_ATDCTL2_CONFIG<<8)|TVMON_ATDCTL3_CONFIG), ATDCTL2 (BASE_INIT/TVMON_INIT)
0011B0 0F91B0 18 0B FF 02 C4                                  MOVB    #TVMON_ATDCTL4_CONFIG, ATDCTL4                   (BASE_INIT/TVMON_INIT)
0011B5 0F91B5 18 0B 01 02 C9                                  MOVB    #$01, ATDCMPEL                                   (BASE_INIT/TVMON_INIT)
0011BA 0F91BA 18 0B 01 02 CF                                  MOVB    #$01, ATDCMPHTL                                  (BASE_INIT/TVMON_INIT)
0011BF 0F91BF 18 03 4C CC 02 D0                               MOVW    #TVMON_UPPER_THRESHOLD, ATDDR0                   (BASE_INIT/TVMON_INIT)
                                                              ;Initially flag missing target                           (BASE_INIT/TVMON_INIT)
0011C5 0F91C5 MACRO                                           TVMON_SIGNAL_LV                                          (BASE_INIT/TVMON_INIT)
                                      ;#TVMON                                                                          (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV)
                                      ;Signal low voltage level                                                        (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV)
0011C5 0F91C5 MACRO                                           LED_OFF B               ;turn off green LED              (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV)
                                      ;#Turn off non-blinking LED                                                      (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_OFF)
                                      ; result: none                                                                   (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_OFF)
                                      ; SSTACK: none                                                                   (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_OFF)
                                      ;         X, Y and D are preserved                                               (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_OFF)
0011C5 0F91C5 1C 02 58 08                                     BSET    LED_B_PORT, #LED_B_PIN        ;set port pin      (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_OFF)
0011C9 0F91C9 MACRO                                           LED_ON  A               ;turn on red LED                 (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV)
                                      ;#User functions                                                                 (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                      ;#--------------                                                                 (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                      ;#Turn on non-blinking LED                                                       (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                      ; result: none                                                                   (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                      ; SSTACK: none                                                                   (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                      ;         X,Y and D are preserved                                                (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
0011C9 0F91C9 1D 02 58 04                                     BCLR    LED_A_PORT, #LED_A_PIN        ;clear port pin    (BASE_INIT/TVMON_INIT/TVMON_SIGNAL_LV/LED_ON)
                                                              ;Start ATD conversions                                   (BASE_INIT/TVMON_INIT)
0011CD 0F91CD 18 0B 2B 02 C5                                  MOVB    #TVMON_ATDCTL5_CONFIG, ATDCTL5                   (BASE_INIT/TVMON_INIT)
0011D2 0F91D2 MACRO                                           TIM_INIT_ECT                                             (BASE_INIT)
                                      ;#Instance "ECT"                                                                 (BASE_INIT/TIM_INIT_ECT)
                                                              ;TIOS                                                    (BASE_INIT/TIM_INIT_ECT)
0011D2 0F91D2 18 0B 0E 00 40                                  MOVB    #TIM_ECT_TIOS_INIT, ECT_TIOS                     (BASE_INIT/TIM_INIT_ECT)
                                                              ;TCTL3/TCTL4                                             (BASE_INIT/TIM_INIT_ECT)
0011D7 0F91D7 18 03 00 03 00 4A                               MOVW    #TIM_ECT_TCTL34_INIT, ECT_TCTL3                  (BASE_INIT/TIM_INIT_ECT)
                                                              ;TSCR2                                                   (BASE_INIT/TIM_INIT_ECT)
0011DD 0F91DD 18 0B 01 00 4D                                  MOVB    #$01, ECT_TSCR2         ;timer clock = bus clock/2 (BASE_INIT/TIM_INIT_ECT)
0011E2 0F91E2 MACRO                                           STRING_INIT                                              (BASE_INIT)
0011E2 0F91E2 MACRO                                           NUM_INIT                                                 (BASE_INIT)
0011E2 0F91E2 MACRO                                           NVM_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/NVM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/NVM_INIT)
                                      ;############################################################################### (BASE_INIT/NVM_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/NVM_INIT)
                                      ;---------------                                                                 (BASE_INIT/NVM_INIT)
                                                              ;Initialize NVM wrapper                                  (BASE_INIT/NVM_INIT)
0011E2 0F91E2 18 0B 2F 01 00                                  MOVB    #NVM_FDIV_VAL, FCLKDIV  ;set clock divider       (BASE_INIT/NVM_INIT)
0011E7 0F91E7 18 0B 02 01 05                                  MOVB    #DFDIE,FERCNFG          ;detect ECC double faults (BASE_INIT/NVM_INIT)
0011EC 0F91EC MACRO                                           RANDOM_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RANDOM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RANDOM_INIT)
                                      ;############################################################################### (BASE_INIT/RANDOM_INIT)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RANDOM_INIT)
0011EC 0F91EC MACRO                                           RANDOM_SEED                     ;set a random seed       (BASE_INIT/RANDOM_INIT)
                                      ;#Set a random seed for the LSFR the LSFR                                        (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
                                      ; args:   none                                                                   (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
                                      ; result: none                                                                   (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
                                      ; SSTACK: none                                                                   (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011EC 0F91EC FC 1B 2E                                        LDD     RANDOM_LSFR             ;start RAM content       (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011EF 0F91EF D3 44                                           ADDD    TCNT                    ;add TIM counter         (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011F1 0F91F1 B7 81                                           EXG     A, B                    ;swap nibbles            (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011F3 0F91F3 26 03                                           BNE     DONE                    ;done                    (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011F5 0F91F5 CC 12 34                                        LDD     #$1234                  ;non-zero seed           (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011F8 0F91F8 -> $11F8                DONE                    EQU     *                                                (BASE_INIT/RANDOM_INIT/RANDOM_SEED)
0011F8 0F91F8 MACRO                                           DELAY_INIT                                               (BASE_INIT)
0011F8 0F91F8 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011F8 0F91F8 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011FA 0F91FA 4E 39 80 0E                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0011FE 0F91FE MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0011FE 0F91FE MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0011FE 0F91FE 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
001203 0F9203 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
001208 0F9208 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00120A 0F920A 20 EC                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00120C 0F920C 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00120E 0F920E MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                      ;#--------------                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Setup SCI communication                                 (BASE_INIT/SCI_INIT)
00120E 0F920E 18 0B 04 00 CA                                  MOVB    #SCI_FORMAT, SCICR1                     ;set frame format (BASE_INIT/SCI_INIT)
                                                              ;Initialize buffers                                      (BASE_INIT/SCI_INIT)
001213 0F9213 18 03 00 00 1B 24                               MOVW    #$0000,SCI_TXBUF_IN                     ;set TX buffer indexes (BASE_INIT/SCI_INIT)
001219 0F9219 18 03 00 00 1B 1A                               MOVW    #$0000,SCI_RXBUF_IN                     ;set RX buffer indexes (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate divider                                   (BASE_INIT/SCI_INIT)
00121F 0F921F FC 1B 28                                        LDD     SCI_SAVED_BDIV                          ;read last baud rate divider (BASE_INIT/SCI_INIT)
001222 0F9222 84 1F                                           ANDA    #$1F                                    ;don't touch IR configuration bits (BASE_INIT/SCI_INIT)
001224 0F9224 B7 45                                           TFR     D, X                                    ;save last baud rate divider (BASE_INIT/SCI_INIT)
001226 0F9226 18 06                                           ABA                                             ;calculate checksum (BASE_INIT/SCI_INIT)
001228 0F9228 B8 1A F9                                        EORA    SCI_SAVED_BDIV_CS                       ;compare checksum (BASE_INIT/SCI_INIT)
00122B 0F922B 04 A0 04                                        IBNE    A, SCI_INIT_1                           ;set default baud rate (BASE_INIT/SCI_INIT)
00122E 0F922E 5E C8                                           STX     SCIBDH                                  ;restore last baud rate (BASE_INIT/SCI_INIT)
001230 0F9230 20 06                                           JOB     SCI_INIT_2                              ;activate SCI (BASE_INIT/SCI_INIT)
001232 0F9232 18 03 01 46 00 C8       SCI_INIT_1              MOVW    #SCI_BDIV, SCIBDH                       ;set fixed baud rate (BASE_INIT/SCI_INIT)
                                                              ;Activate SCI                                            (BASE_INIT/SCI_INIT)
001238 0F9238 79 1B 27                SCI_INIT_2              CLR     SCI_OC_CNT                              ;reset OC delay (BASE_INIT/SCI_INIT)
00123B 0F923B 18 0B 08 1B 26                                  MOVB    #SCI_FLG_TX_XONXOFF, SCI_FLGS           ;request transmission of XON/XOFF (BASE_INIT/SCI_INIT)
001240 0F9240 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;start SCI (BASE_INIT/SCI_INIT)
001245 0F9245 MACRO                                           ERROR_MESSAGE                                            (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE)
                                      ;#Error message                                                                  (BASE_INIT/ERROR_MESSAGE)
                                      ;;-------------                                                                  (BASE_INIT/ERROR_MESSAGE)
001245 0F9245 MACRO                                           RESET_BR_NOERR  DONE            ;no error detected       (BASE_INIT/ERROR_MESSAGE)
                                      ;Branch on no error                                                              (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
001245 0F9245 FD 1B 2C                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
001248 0F9248 27 11                                           BEQ     DONE                                             (BASE_INIT/ERROR_MESSAGE/RESET_BR_NOERR)
00124A 0F924A CE 1B 97                                        LDX     #ERROR_HEADER           ;print error header      (BASE_INIT/ERROR_MESSAGE)
00124D 0F924D MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
00124D 0F924D MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00124D 0F924D 16 17 B9                                        JOBSR   STRING_PRINT_BL                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001250 0F9250 B7 65                                           TFR     Y, X                    ;print error message     (BASE_INIT/ERROR_MESSAGE)
001252 0F9252 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
001252 0F9252 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001252 0F9252 16 17 B9                                        JOBSR   STRING_PRINT_BL                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001255 0F9255 CE 1B A4                                        LDX     #ERROR_TRAILER          ;print error TRAILER     (BASE_INIT/ERROR_MESSAGE)
001258 0F9258 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
001258 0F9258 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001258 0F9258 16 17 B9                                        JOBSR   STRING_PRINT_BL                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00125B 0F925B -> $125B                DONE                    EQU     *                                                (BASE_INIT/ERROR_MESSAGE)
00125B 0F925B 18 0B 01 1A F2                                  MOVB    #1, LINE_COUNT
001260 0F9260 MACRO                                           SCI_BAUD_RESTORED       DEMO_SKIP_BD
                                      ;#Branch if baud rate has been successfully restored                             (SCI_BAUD_RESTORED)
                                      ; args:   1: branch address                                                      (SCI_BAUD_RESTORED)
                                      ; result: none                                                                   (SCI_BAUD_RESTORED)
                                      ; SSTACK: 2 bytes                                                                (SCI_BAUD_RESTORED)
                                      ;         X and  Y  are preserved                                                (SCI_BAUD_RESTORED)
                                                              ;Check stored baud rate value                            (SCI_BAUD_RESTORED)
001260 0F9260 FC 1B 28                                        LDD     SCI_SAVED_BDIV                          ;read last baud rate divider (SCI_BAUD_RESTORED)
001263 0F9263 84 1F                                           ANDA    #$1F                                    ;don't touch IR configuration bits (SCI_BAUD_RESTORED)
001265 0F9265 18 06                                           ABA                                             ;calculate checksum (SCI_BAUD_RESTORED)
001267 0F9267 B8 1A F9                                        EORA    SCI_SAVED_BDIV_CS                       ;compare checksum (SCI_BAUD_RESTORED)
00126A 0F926A 04 80 03                                        IBEQ    A, DEMO_SKIP_BD                                   ;set default baud rate (SCI_BAUD_RESTORED)
00126D 0F926D MACRO                                           SCI_BAUD_DETECT_BL
                                      ;#Perform baud rate detection (blocking)                                         (SCI_BAUD_DETECT_BL)
                                      ; args:   none                                                                   (SCI_BAUD_DETECT_BL)
                                      ; result: none                                                                   (SCI_BAUD_DETECT_BL)
                                      ; SSTACK: 4 bytes                                                                (SCI_BAUD_DETECT_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_BAUD_DETECT_BL)
00126D 0F926D MACRO                                           SSTACK_JOBSR    SCI_BAUD_DETECT_BL, 4                    (SCI_BAUD_DETECT_BL)
                                      ;#Check stack and call subroutine                                                (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
00126D 0F926D 16 15 50                                        JOBSR   SCI_BAUD_DETECT_BL                               (SCI_BAUD_DETECT_BL/SSTACK_JOBSR)
001270 0F9270 MACRO                   DEMO_SKIP_BD            WELCOME_MESSAGE
                                      ;############################################################################### (WELCOME_MESSAGE)
                                      ;# Macros                                                                      # (WELCOME_MESSAGE)
                                      ;############################################################################### (WELCOME_MESSAGE)
                                      ;#Welcome message                                                                (WELCOME_MESSAGE)
001270 0F9270 MACRO                                           RESET_BR_ERR    DONE            ;severe error detected   (WELCOME_MESSAGE)
                                      ;Branch on error                                                                 (WELCOME_MESSAGE/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (WELCOME_MESSAGE/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (WELCOME_MESSAGE/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (WELCOME_MESSAGE/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (WELCOME_MESSAGE/RESET_BR_ERR)
001270 0F9270 FD 1B 2C                                        LDY     RESET_MSG_PTR                                    (WELCOME_MESSAGE/RESET_BR_ERR)
001273 0F9273 26 06                                           BNE     DONE                                             (WELCOME_MESSAGE/RESET_BR_ERR)
001275 0F9275 CE 1B 32                                        LDX     #WELCOME_MESSAGE        ;print welcome message   (WELCOME_MESSAGE)
001278 0F9278 MACRO                                           STRING_PRINT_BL                                          (WELCOME_MESSAGE)
                                      ;#Basic print function - blocking                                                (WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (WELCOME_MESSAGE/STRING_PRINT_BL)
001278 0F9278 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
001278 0F9278 16 17 B9                                        JOBSR   STRING_PRINT_BL                                  (WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00127B 0F927B -> $127B                DONE                    EQU     *                                                (WELCOME_MESSAGE)
                                      ;Application code
                                                              ;Print header
00127B 0F927B 73 1A F2                DEMO_LOOP               DEC     LINE_COUNT
00127E 0F927E 26 0B                                           BNE     DEMO_GET_CHAR
001280 0F9280 18 0B 14 1A F2                                  MOVB    #HEADER_REPEAT, LINE_COUNT
001285 0F9285 CE 1B 55                                        LDX     #DEMO_HEADER
001288 0F9288 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
001288 0F9288 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
001288 0F9288 16 17 B9                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                                              ;Wait for input
00128B 0F928B MACRO                   DEMO_GET_CHAR           SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00128B 0F928B MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00128B 0F928B 16 14 77                                        JOBSR   SCI_RX_BL                                        (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors (char in B)
00128E 0F928E 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
001290 0F9290 26 F9                                           BNE     DEMO_GET_CHAR
                                                              ;Print ASCII character (char in B)
001292 0F9292 B7 45                                           TFR     D, X
001294 0F9294 86 04                                           LDAA    #4
001296 0F9296 C6 20                                           LDAB    #" "
001298 0F9298 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
001298 0F9298 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
001298 0F9298 16 17 E1                                        JOBSR   STRING_FILL_BL                                   (STRING_FILL_BL/SSTACK_JOBSR)
00129B 0F929B B7 54                                           TFR     X, D
00129D 0F929D 87                                              CLRA
00129E 0F929E MACRO                                           STRING_PRINTABLE
                                      ;#Make ASCII character printable                                                 (STRING_PRINTABLE)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_PRINTABLE)
                                      ; result: B: printable ASCII character or "."                                    (STRING_PRINTABLE)
                                      ; SSTACK: 2 bytes                                                                (STRING_PRINTABLE)
                                      ;         X, Y, and A are preserved                                              (STRING_PRINTABLE)
00129E 0F929E MACRO                                           SSTACK_JOBSR    STRING_PRINTABLE, 2                      (STRING_PRINTABLE)
                                      ;#Check stack and call subroutine                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINTABLE/SSTACK_JOBSR)
00129E 0F929E 16 17 F8                                        JOBSR   STRING_PRINTABLE                                 (STRING_PRINTABLE/SSTACK_JOBSR)
0012A1 0F92A1 MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 8 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
0012A1 0F92A1 MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 8                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
0012A1 0F92A1 16 13 DC                                        JOBSR   SCI_TX_BL                                        (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
0012A4 0F92A4 CD 00 00                                        LDY     #$0000
0012A7 0F92A7 C6 10                                           LDAB    #16
0012A9 0F92A9 MACRO                                           NUM_REVERSE
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0012A9 0F92A9 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0012A9 0F92A9 16 18 35                                        JOBSR   NUM_REVERSE                                      (NUM_REVERSE/SSTACK_JOBSR)
0012AC 0F92AC B7 76                                           TFR     SP, Y
0012AE 0F92AE 40                                              NEGA
0012AF 0F92AF 8B 05                                           ADDA    #5
0012B1 0F92B1 C6 20                                           LDAB    #" "
0012B3 0F92B3 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012B3 0F92B3 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012B3 0F92B3 16 17 E1                                        JOBSR   STRING_FILL_BL                                   (STRING_FILL_BL/SSTACK_JOBSR)
0012B6 0F92B6 C6 10                                           LDAB    #16
0012B8 0F92B8 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reverse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL)
                                      ; SSTACK: 10 bytes  (+6 arg bytes)                                               (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0012B8 0F92B8 MACRO                                           SSTACK_JOBSR    NUM_REVPRINT_BL, 10                      (NUM_REVPRINT_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/SSTACK_JOBSR)
0012B8 0F92B8 16 19 01                                        JOBSR   NUM_REVPRINT_BL                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                                              ;Print decimal value (char in X)
0012BB 0F92BB CD 00 00                                        LDY     #$0000
0012BE 0F92BE C6 0A                                           LDAB    #10
0012C0 0F92C0 MACRO                                           NUM_REVERSE
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0012C0 0F92C0 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0012C0 0F92C0 16 18 35                                        JOBSR   NUM_REVERSE                                      (NUM_REVERSE/SSTACK_JOBSR)
0012C3 0F92C3 B7 76                                           TFR     SP, Y
0012C5 0F92C5 40                                              NEGA
0012C6 0F92C6 8B 05                                           ADDA    #5
0012C8 0F92C8 C6 20                                           LDAB    #" "
0012CA 0F92CA MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012CA 0F92CA MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012CA 0F92CA 16 17 E1                                        JOBSR   STRING_FILL_BL                                   (STRING_FILL_BL/SSTACK_JOBSR)
0012CD 0F92CD C6 0A                                           LDAB    #10
0012CF 0F92CF MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reverse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL)
                                      ; SSTACK: 10 bytes  (+6 arg bytes)                                               (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0012CF 0F92CF MACRO                                           SSTACK_JOBSR    NUM_REVPRINT_BL, 10                      (NUM_REVPRINT_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/SSTACK_JOBSR)
0012CF 0F92CF 16 19 01                                        JOBSR   NUM_REVPRINT_BL                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                                              ;Print octal value (char in X)
0012D2 0F92D2 CD 00 00                                        LDY     #$0000
0012D5 0F92D5 C6 08                                           LDAB    #8
0012D7 0F92D7 MACRO                                           NUM_REVERSE
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0012D7 0F92D7 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0012D7 0F92D7 16 18 35                                        JOBSR   NUM_REVERSE                                      (NUM_REVERSE/SSTACK_JOBSR)
0012DA 0F92DA B7 76                                           TFR     SP, Y
0012DC 0F92DC 40                                              NEGA
0012DD 0F92DD 8B 05                                           ADDA    #5
0012DF 0F92DF C6 20                                           LDAB    #" "
0012E1 0F92E1 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012E1 0F92E1 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012E1 0F92E1 16 17 E1                                        JOBSR   STRING_FILL_BL                                   (STRING_FILL_BL/SSTACK_JOBSR)
0012E4 0F92E4 C6 08                                           LDAB    #8
0012E6 0F92E6 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reverse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL)
                                      ; SSTACK: 10 bytes  (+6 arg bytes)                                               (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0012E6 0F92E6 MACRO                                           SSTACK_JOBSR    NUM_REVPRINT_BL, 10                      (NUM_REVPRINT_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/SSTACK_JOBSR)
0012E6 0F92E6 16 19 01                                        JOBSR   NUM_REVPRINT_BL                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                                              ;Print binary value (char in X)
0012E9 0F92E9 86 02                                           LDAA    #2
0012EB 0F92EB C6 20                                           LDAB    #" "
0012ED 0F92ED MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012ED 0F92ED MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012ED 0F92ED 16 17 E1                                        JOBSR   STRING_FILL_BL                                   (STRING_FILL_BL/SSTACK_JOBSR)
0012F0 0F92F0 CD 00 00                                        LDY     #$0000
0012F3 0F92F3 C6 02                                           LDAB    #2
0012F5 0F92F5 MACRO                                           NUM_REVERSE
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0012F5 0F92F5 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0012F5 0F92F5 16 18 35                                        JOBSR   NUM_REVERSE                                      (NUM_REVERSE/SSTACK_JOBSR)
0012F8 0F92F8 B7 76                                           TFR     SP, Y
0012FA 0F92FA 40                                              NEGA
0012FB 0F92FB 8B 08                                           ADDA    #8
0012FD 0F92FD C6 30                                           LDAB    #"0"
0012FF 0F92FF MACRO                                           STRING_fill_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0012FF 0F92FF MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0012FF 0F92FF 16 17 E1                                        JOBSR   STRING_FILL_BL                                   (STRING_FILL_BL/SSTACK_JOBSR)
001302 0F9302 C6 02                                           LDAB    #2
001304 0F9304 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reverse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL)
                                      ; SSTACK: 10 bytes  (+6 arg bytes)                                               (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
001304 0F9304 MACRO                                           SSTACK_JOBSR    NUM_REVPRINT_BL, 10                      (NUM_REVPRINT_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/SSTACK_JOBSR)
001304 0F9304 16 19 01                                        JOBSR   NUM_REVPRINT_BL                                  (NUM_REVPRINT_BL/SSTACK_JOBSR)
                                                              ;Print new line
001307 0F9307 CE 1B AF                                        LDX     #STRING_STR_NL
00130A 0F930A MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00130A 0F930A MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00130A 0F930A 16 17 B9                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
00130D 0F930D 06 12 7B                                        JOB     DEMO_LOOP
001310 0F9310 -> $1310                DEMO_CODE_END           EQU     *
001310 0F9310 -> $F9310               DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001B32 0F9B32                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
                                      ;#Welcome message
001B32 0F9B32 48 65 6C 6C 6F 2C 20 74 WELCOME_MESSAGE         FCC     "Hello, this is the S12CBase demo!"
              68 69 73 20 69 73 20 74 
              68 65 20 53 31 32 43 42 
              61 73 65 20 64 65 6D 6F 
              21                      
001B53 0F9B53 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001B53 0F9B53 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_TERM)
001B54 0F9B54 8A                                              DB      (STRING_NL_2ND|STRING_TERM)                      (STRING_NL_TERM)
001B55 0F9B55 MACRO                   DEMO_HEADER             STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001B55 0F9B55 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_NONTERM)
001B56 0F9B56 0A                                              DB      STRING_NL_2ND                                    (STRING_NL_NONTERM)
001B57 0F9B57 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
001B75 0F9B75 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001B75 0F9B75 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_NONTERM)
001B76 0F9B76 0A                                              DB      STRING_NL_2ND                                    (STRING_NL_NONTERM)
001B77 0F9B77 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
001B95 0F9B95 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001B95 0F9B95 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_TERM)
001B96 0F9B96 8A                                              DB      (STRING_NL_2ND|STRING_TERM)                      (STRING_NL_TERM)
001B97 0F9B97 -> $1B97                DEMO_TABS_END           EQU     *
001B97 0F9B97 -> $F9B97               DEMO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#Core
001B97 0F9B97 S12X CODE:                                      CPU     S12X
                                      ;#Clocks
001B97 0F9B97 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
001B97 0F9B97 -> $989680              CLOCK_OSC_FREQ          EQU     10000000        ;10 MHz
001B97 0F9B97 -> $2FAF080             CLOCK_BUS_FREQ          EQU     50000000        ;50 MHz
001B97 0F9B97 -> $989680              CLOCK_REF_FREQ          EQU     CLOCK_OSC_FREQ  ;10 MHz
001B97 0F9B97 -> $0003                CLOCK_VCOFRQ            EQU     3               ;VCO=100MHz
001B97 0F9B97 -> $0002                CLOCK_REFFRQ            EQU     2               ;Ref=10Mhz
                                      ;#TIM
                                      ; IC0 - SCI baud rate detection
                                      ; OC1 - SCI general purpose
                                      ; OC2 - DELAY
                                      ; OC3 - LED
001B97 0F9B97 -> $0001                TIM_DIV_2               EQU     1               ;25 MHz
001B97 0F9B97 -> $000E                BASE_ECT_TIOS_INIT      EQU     SCI_OC_TIOS_INIT|LED_TIOS_INIT|DELAY_TIOS_INIT
001B97 0F9B97 -> $0003                BASE_ECT_TCTL34_INIT    EQU     SCI_IC_TCTL34_INIT
001B97 0F9B97 -> $000E                TIM_ECT_TIOS_INIT       EQU     BASE_ECT_TIOS_INIT
001B97 0F9B97 -> $0003                TIM_ECT_TCTL34_INIT     EQU     BASE_ECT_TCTL34_INIT
                                      ;#DELAY
001B97 0F9B97 -> $0040                DELAY_TIM               EQU     ECT             ;ECT
001B97 0F9B97 -> $0002                DELAY_OC                EQU     2               ;OC2
                                      ;#LED
                                      ; LED A: PP2 non-blinking -> target disconnected
                                      ; LED B: PP3 non-blinking -> target connected
                                      ; LED C: PP4 blinking     -> error
                                      ; LED D: PP5 blinking     -> busy
                                      ; Timer usage
001B97 0F9B97 -> $0040                LED_TIM                 EQU     ECT             ;ECT
001B97 0F9B97 -> $0003                LED_OC                  EQU     3               ;OC3
                                      ; LED A
001B97 0F9B97 -> $0001                LED_A_BLINK_OFF         EQU     1               ;no blink patterns
001B97 0F9B97 -> $0258                LED_A_PORT              EQU     PTP             ;port P
001B97 0F9B97 -> $0004                LED_A_PIN               EQU     PP2             ;PP2
                                      ; LED B
001B97 0F9B97 -> $0001                LED_B_BLINK_OFF         EQU     1               ;no blink patterns
001B97 0F9B97 -> $0258                LED_B_PORT              EQU     PTP             ;port P
001B97 0F9B97 -> $0008                LED_B_PIN               EQU     PP3             ;PP3
                                      ; LED C
001B97 0F9B97 -> $0001                LED_C_BLINK_ON          EQU     1               ;blink patterns
001B97 0F9B97 -> $0258                LED_C_PORT              EQU     PTP             ;port P
001B97 0F9B97 -> $0010                LED_C_PIN               EQU     PP4             ;PP4
                                      ; LED D
001B97 0F9B97 -> $0001                LED_D_BLINK_ON          EQU     1               ;blink patterns
001B97 0F9B97 -> $0258                LED_D_PORT              EQU     PTP             ;port P
001B97 0F9B97 -> $0020                LED_D_PIN               EQU     PP5             ;PP5
                                      ;#SCI
001B97 0F9B97 -> $0001                SCI_V5                  EQU     1               ;V5
001B97 0F9B97 -> $0001                SCI_BAUD_9600           EQU     1               ;fixed baud rate
001B97 0F9B97 -> $0001                SCI_BAUD_DETECT_ON      EQU     1               ;enable baud rate detection
001B97 0F9B97 -> $0040                SCI_IC_TIM              EQU     ECT             ;ECT
001B97 0F9B97 -> $0000                SCI_IC                  EQU     0               ;IC0
001B97 0F9B97 -> $0040                SCI_OC_TIM              EQU     ECT             ;ECT
001B97 0F9B97 -> $0001                SCI_OC                  EQU     1               ;OC1
001B97 0F9B97 -> $0001                SCI_XONXOFF             EQU     1               ;XON/XOFF flow control
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                GPIO_VARS_START         EQU     *
001AF3 0F9AF3 -> $F9AF3               GPIO_VARS_START_LIN     EQU     @
001AF3 0F9AF3                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                MMAP_VARS_START         EQU     *
001AF3 0F9AF3 -> $F9AF3               MMAP_VARS_START_LIN     EQU     @
001AF3 0F9AF3                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                SSTACK_VARS_START       EQU     *
001AF3 0F9AF3 -> $F9AF3               SSTACK_VARS_START_LIN   EQU     @
001AF3 0F9AF3                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                ISTACK_VARS_START       EQU     *
001AF3 0F9AF3 -> $F9AF3               ISTACK_VARS_START_LIN   EQU     @
001AF3 0F9AF3                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                CLOCK_VARS_START        EQU     *
001AF3 0F9AF3 -> $F9AF3               CLOCK_VARS_START_LIN    EQU     @
001AF3 0F9AF3                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                COP_VARS_START          EQU     *
001AF3 0F9AF3 -> $F9AF3               COP_VARS_START_LIN      EQU     @
001AF3 0F9AF3                                                 ORG     COP_VARS_END, COP_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                TIM_VARS_START          EQU     *
001AF3 0F9AF3 -> $F9AF3               TIM_VARS_START_LIN      EQU     @
001AF3 0F9AF3                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001AF3 0F9AF3 -> $1AF3                LED_VARS_START          EQU     *
001AF3 0F9AF3 -> $F9AF3               LED_VARS_START_LIN      EQU     @
001AF9 0F9AF9                                                 ORG     LED_VARS_END, LED_VARS_END_LIN
001AF9 0F9AF9 -> $1AF9                SCI_VARS_START          EQU     *
001AF9 0F9AF9 -> $F9AF9               SCI_VARS_START_LIN      EQU     @
001B2A 0F9B2A                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
001B2A 0F9B2A -> $1B2A                TVMON_VARS_START        EQU     *
001B2A 0F9B2A -> $F9B2A               TVMON_VARS_START_LIN    EQU     @
001B2A 0F9B2A                                                 ORG     TVMON_VARS_END, TVMON_VARS_END_LIN
001B2A 0F9B2A -> $1B2A                STRING_VARS_START       EQU     *
001B2A 0F9B2A -> $F9B2A               STRING_VARS_START_LIN   EQU     @
001B2A 0F9B2A                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
001B2A 0F9B2A -> $1B2A                RESET_VARS_START        EQU     *
001B2A 0F9B2A -> $F9B2A               RESET_VARS_START_LIN    EQU     @
001B2E 0F9B2E                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
001B2E 0F9B2E -> $1B2E                NUM_VARS_START          EQU     *
001B2E 0F9B2E -> $F9B2E               NUM_VARS_START_LIN      EQU     @
001B2E 0F9B2E                                                 ORG     NUM_VARS_END, NUM_VARS_END_LIN
001B2E 0F9B2E -> $1B2E                NVM_VARS_START          EQU     *
001B2E 0F9B2E -> $F9B2E               NVM_VARS_START_LIN      EQU     @
001B2E 0F9B2E                                                 ORG     NVM_VARS_END, NVM_VARS_END_LIN
001B2E 0F9B2E -> $1B2E                VECTAB_VARS_START       EQU     *
001B2E 0F9B2E -> $F9B2E               VECTAB_VARS_START_LIN   EQU     @
001B2E 0F9B2E                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001B2E 0F9B2E -> $1B2E                RANDOM_VARS_START       EQU     *
001B2E 0F9B2E -> $F9B2E               RANDOM_VARS_START_LIN   EQU     @
001B30 0F9B30                                                 ORG     RANDOM_VARS_END, RANDOM_VARS_END_LIN
001B30 0F9B30 -> $1B30                DELAY_VARS_START        EQU     *
001B30 0F9B30 -> $F9B30               DELAY_VARS_START_LIN    EQU     @
001B32 0F9B32                                                 ORG     DELAY_VARS_END, DELAY_VARS_END_LIN
001B32 0F9B32 -> $1B32                BASE_VARS_END           EQU     *
001B32 0F9B32 -> $F9B32               BASE_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001310 0F9310                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
001310 0F9310 -> $1310                GPIO_CODE_START         EQU     *
001310 0F9310 -> $F9310               GPIO_CODE_START_LIN     EQU     @
001310 0F9310                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
001310 0F9310 -> $1310                MMAP_CODE_START         EQU     *
001310 0F9310 -> $F9310               MMAP_CODE_START_LIN     EQU     @
001310 0F9310                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
001310 0F9310 -> $1310                SSTACK_CODE_START       EQU     *
001310 0F9310 -> $F9310               SSTACK_CODE_START_LIN   EQU     @
001310 0F9310                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
001310 0F9310 -> $1310                ISTACK_CODE_START       EQU     *
001310 0F9310 -> $F9310               ISTACK_CODE_START_LIN   EQU     @
001310 0F9310                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
001310 0F9310 -> $1310                CLOCK_CODE_START        EQU     *
001310 0F9310 -> $F9310               CLOCK_CODE_START_LIN    EQU     @
00131B 0F931B                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
00131B 0F931B -> $131B                COP_CODE_START          EQU     *
00131B 0F931B -> $F931B               COP_CODE_START_LIN      EQU     @
00131B 0F931B                                                 ORG     COP_CODE_END, COP_CODE_END_LIN
00131B 0F931B -> $131B                TIM_CODE_START          EQU     *
00131B 0F931B -> $F931B               TIM_CODE_START_LIN      EQU     @
00131B 0F931B                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
00131B 0F931B -> $131B                LED_CODE_START          EQU     *
00131B 0F931B -> $F931B               LED_CODE_START_LIN      EQU     @
0013B8 0F93B8                                                 ORG     LED_CODE_END, LED_CODE_END_LIN
0013B8 0F93B8 -> $13B8                SCI_CODE_START          EQU     *
0013B8 0F93B8 -> $F93B8               SCI_CODE_START_LIN      EQU     @
001766 0F9766                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
001766 0F9766 -> $1766                TVMON_CODE_START                EQU     *
001766 0F9766 -> $F9766               TVMON_CODE_START_LIN    EQU     @
00179F 0F979F                                                 ORG     TVMON_CODE_END, TVMON_CODE_END_LIN
00179F 0F979F -> $179F                STRING_CODE_START       EQU     *
00179F 0F979F -> $F979F               STRING_CODE_START_LIN   EQU     @
001803 0F9803                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
001803 0F9803 -> $1803                RESET_CODE_START        EQU     *
001803 0F9803 -> $F9803               RESET_CODE_START_LIN    EQU     @
001835 0F9835                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
001835 0F9835 -> $1835                NUM_CODE_START          EQU     *
001835 0F9835 -> $F9835               NUM_CODE_START_LIN      EQU     @
00192E 0F992E                                                 ORG     NUM_CODE_END, NUM_CODE_END_LIN
00192E 0F992E -> $192E                NVM_CODE_START          EQU     *
00192E 0F992E -> $F992E               NVM_CODE_START_LIN      EQU     @
001A68 0F9A68                                                 ORG     NVM_CODE_END, NVM_CODE_END_LIN
001A68 0F9A68 -> $1A68                VECTAB_CODE_START       EQU     *
001A68 0F9A68 -> $F9A68               VECTAB_CODE_START_LIN   EQU     @
001A68 0F9A68                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
001A68 0F9A68 -> $1A68                RANDOM_CODE_START       EQU     *
001A68 0F9A68 -> $F9A68               RANDOM_CODE_START_LIN   EQU     @
001A87 0F9A87                                                 ORG     RANDOM_CODE_END, RANDOM_CODE_END_LIN
001A87 0F9A87 -> $1A87                DELAY_CODE_START        EQU     *
001A87 0F9A87 -> $F9A87               DELAY_CODE_START_LIN    EQU     @
001AF2 0F9AF2                                                 ORG     DELAY_CODE_END, DELAY_CODE_END_LIN
001AF2 0F9AF2 -> $1AF2                BASE_CODE_END           EQU     *
001AF2 0F9AF2 -> $F9AF2               BASE_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001B97 0F9B97                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
                                      ;#Error message format
001B97 0F9B97 46 41 54 41 4C 20 45 52 ERROR_HEADER            FCS     "FATAL ERROR! "
              52 4F 52 21 A0          
001BA4 0F9BA4 21                      ERROR_TRAILER           FCC     "!"
001BA5 0F9BA5 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001BA5 0F9BA5 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_TERM)
001BA6 0F9BA6 8A                                              DB      (STRING_NL_2ND|STRING_TERM)                      (STRING_NL_TERM)
001BA7 0F9BA7 -> $1BA7                GPIO_TABS_START         EQU     *
001BA7 0F9BA7 -> $F9BA7               GPIO_TABS_START_LIN     EQU     @
001BA7 0F9BA7                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                MMAP_TABS_START         EQU     *
001BA7 0F9BA7 -> $F9BA7               MMAP_TABS_START_LIN     EQU     @
001BA7 0F9BA7                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                SSTACK_TABS_START       EQU     *
001BA7 0F9BA7 -> $F9BA7               SSTACK_TABS_START_LIN   EQU     @
001BA7 0F9BA7                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                ISTACK_TABS_START       EQU     *
001BA7 0F9BA7 -> $F9BA7               ISTACK_TABS_START_LIN   EQU     @
001BA7 0F9BA7                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                CLOCK_TABS_START        EQU     *
001BA7 0F9BA7 -> $F9BA7               CLOCK_TABS_START_LIN    EQU     @
001BA7 0F9BA7                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                COP_TABS_START          EQU     *
001BA7 0F9BA7 -> $F9BA7               COP_TABS_START_LIN      EQU     @
001BA7 0F9BA7                                                 ORG     COP_TABS_END, COP_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                TIM_TABS_START          EQU     *
001BA7 0F9BA7 -> $F9BA7               TIM_TABS_START_LIN      EQU     @
001BA7 0F9BA7                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
001BA7 0F9BA7 -> $1BA7                LED_TABS_START          EQU     *
001BA7 0F9BA7 -> $F9BA7               LED_TABS_START_LIN      EQU     @
001BAF 0F9BAF                                                 ORG     LED_TABS_END, LED_TABS_END_LIN
001BAF 0F9BAF -> $1BAF                SCI_TABS_START          EQU     *
001BAF 0F9BAF -> $F9BAF               SCI_TABS_START_LIN      EQU     @
001BAF 0F9BAF                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
001BAF 0F9BAF -> $1BAF                TVMON_TABS_START        EQU     *
001BAF 0F9BAF -> $F9BAF               TVMON_TABS_START_LIN    EQU     @
001BAF 0F9BAF                                                 ORG     TVMON_TABS_END, TVMON_TABS_END_LIN
001BAF 0F9BAF -> $1BAF                STRING_TABS_START       EQU     *
001BAF 0F9BAF -> $F9BAF               STRING_TABS_START_LIN   EQU     @
001BB1 0F9BB1                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
001BB1 0F9BB1 -> $1BB1                RESET_TABS_START        EQU     *
001BB1 0F9BB1 -> $F9BB1               RESET_TABS_START_LIN    EQU     @
001BFE 0F9BFE                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
001BFE 0F9BFE -> $1BFE                NUM_TABS_START          EQU     *
001BFE 0F9BFE -> $F9BFE               NUM_TABS_START_LIN      EQU     @
001C0E 0F9C0E                                                 ORG     NUM_TABS_END, NUM_TABS_END_LIN
001C0E 0F9C0E -> $1C0E                NVM_TABS_START          EQU     *
001C0E 0F9C0E -> $F9C0E               NVM_TABS_START_LIN      EQU     @
001C1F 0F9C1F                                                 ORG     NVM_TABS_END, NVM_TABS_END_LIN
001C1F 0F9C1F -> $1C1F                VECTAB_TABS_START       EQU     *
001C1F 0F9C1F -> $F9C1F               VECTAB_TABS_START_LIN   EQU     @
001C8C 0F9C8C                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
001C8C 0F9C8C -> $1C8C                RANDOM_TABS_START       EQU     *
001C8C 0F9C8C -> $F9C8C               RANDOM_TABS_START_LIN   EQU     @
001C8C 0F9C8C                                                 ORG     RANDOM_TABS_END, RANDOM_TABS_END_LIN
001C8C 0F9C8C -> $1C8C                DELAY_TABS_START        EQU     *
001C8C 0F9C8C -> $F9C8C               DELAY_TABS_START_LIN    EQU     @
001C8C 0F9C8C                                                 ORG     DELAY_TABS_END, DELAY_TABS_END_LIN
001C8C 0F9C8C -> $1C8C                BASE_TABS_END           EQU     *
001C8C 0F9C8C -> $F9C8C               BASE_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (Mini-BDM-Pod)                     #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12XEP100.                   #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 14, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;##################################
                                      ;# S12XEP100 Register Definitions #
                                      ;##################################
001C8C 0F9C8C -> $0000                PORTA           EQU     $0000
001C8C 0F9C8C -> $0080                PTA7            EQU     $80
001C8C 0F9C8C -> $0040                PTA6            EQU     $40
001C8C 0F9C8C -> $0020                PTA5            EQU     $20
001C8C 0F9C8C -> $0010                PTA4            EQU     $10
001C8C 0F9C8C -> $0008                PTA3            EQU     $08
001C8C 0F9C8C -> $0004                PTA2            EQU     $04
001C8C 0F9C8C -> $0002                PTA1            EQU     $02
001C8C 0F9C8C -> $0001                PTA0            EQU     $01
001C8C 0F9C8C -> $0080                PA7             EQU     $80
001C8C 0F9C8C -> $0040                PA6             EQU     $40
001C8C 0F9C8C -> $0020                PA5             EQU     $20
001C8C 0F9C8C -> $0010                PA4             EQU     $10
001C8C 0F9C8C -> $0008                PA3             EQU     $08
001C8C 0F9C8C -> $0004                PA2             EQU     $04
001C8C 0F9C8C -> $0002                PA1             EQU     $02
001C8C 0F9C8C -> $0001                PA0             EQU     $01
001C8C 0F9C8C -> $0001                PORTB           EQU     $0001
001C8C 0F9C8C -> $0080                PTB7            EQU     $80
001C8C 0F9C8C -> $0040                PTB6            EQU     $40
001C8C 0F9C8C -> $0020                PTB5            EQU     $20
001C8C 0F9C8C -> $0010                PTB4            EQU     $10
001C8C 0F9C8C -> $0008                PTB3            EQU     $08
001C8C 0F9C8C -> $0004                PTB2            EQU     $04
001C8C 0F9C8C -> $0002                PTB1            EQU     $02
001C8C 0F9C8C -> $0001                PTB0            EQU     $01
001C8C 0F9C8C -> $0080                PB7             EQU     $80
001C8C 0F9C8C -> $0040                PB6             EQU     $40
001C8C 0F9C8C -> $0020                PB5             EQU     $20
001C8C 0F9C8C -> $0010                PB4             EQU     $10
001C8C 0F9C8C -> $0008                PB3             EQU     $08
001C8C 0F9C8C -> $0004                PB2             EQU     $04
001C8C 0F9C8C -> $0002                PB1             EQU     $02
001C8C 0F9C8C -> $0001                PB0             EQU     $01
001C8C 0F9C8C -> $0002                DDRA            EQU     $0002
001C8C 0F9C8C -> $0080                DDRA7           EQU     $80
001C8C 0F9C8C -> $0040                DDRA6           EQU     $40
001C8C 0F9C8C -> $0020                DDRA5           EQU     $20
001C8C 0F9C8C -> $0010                DDRA4           EQU     $10
001C8C 0F9C8C -> $0008                DDRA3           EQU     $08
001C8C 0F9C8C -> $0004                DDRA2           EQU     $04
001C8C 0F9C8C -> $0002                DDRA1           EQU     $02
001C8C 0F9C8C -> $0001                DDRA0           EQU     $01
001C8C 0F9C8C -> $0003                DDRB            EQU     $0003
001C8C 0F9C8C -> $0080                DDRB7           EQU     $80
001C8C 0F9C8C -> $0040                DDRB6           EQU     $40
001C8C 0F9C8C -> $0020                DDRB5           EQU     $20
001C8C 0F9C8C -> $0010                DDRB4           EQU     $10
001C8C 0F9C8C -> $0008                DDRB3           EQU     $08
001C8C 0F9C8C -> $0004                DDRB2           EQU     $04
001C8C 0F9C8C -> $0002                DDRB1           EQU     $02
001C8C 0F9C8C -> $0001                DDRB0           EQU     $01
001C8C 0F9C8C -> $0004                PORTC           EQU     $0004
001C8C 0F9C8C -> $0080                PTC7            EQU     $80
001C8C 0F9C8C -> $0040                PTC6            EQU     $40
001C8C 0F9C8C -> $0020                PTC5            EQU     $20
001C8C 0F9C8C -> $0010                PTC4            EQU     $10
001C8C 0F9C8C -> $0008                PTC3            EQU     $08
001C8C 0F9C8C -> $0004                PTC2            EQU     $04
001C8C 0F9C8C -> $0002                PTC1            EQU     $02
001C8C 0F9C8C -> $0001                PTC0            EQU     $01
001C8C 0F9C8C -> $0080                PC7             EQU     $80
001C8C 0F9C8C -> $0040                PC6             EQU     $40
001C8C 0F9C8C -> $0020                PC5             EQU     $20
001C8C 0F9C8C -> $0010                PC4             EQU     $10
001C8C 0F9C8C -> $0008                PC3             EQU     $08
001C8C 0F9C8C -> $0004                PC2             EQU     $04
001C8C 0F9C8C -> $0002                PC1             EQU     $02
001C8C 0F9C8C -> $0001                PC0             EQU     $01
001C8C 0F9C8C -> $0005                PORTD           EQU     $0005
001C8C 0F9C8C -> $0080                PTD7            EQU     $80
001C8C 0F9C8C -> $0040                PTD6            EQU     $40
001C8C 0F9C8C -> $0020                PTD5            EQU     $20
001C8C 0F9C8C -> $0010                PTD4            EQU     $10
001C8C 0F9C8C -> $0008                PTD3            EQU     $08
001C8C 0F9C8C -> $0004                PTD2            EQU     $04
001C8C 0F9C8C -> $0002                PTD1            EQU     $02
001C8C 0F9C8C -> $0001                PTD0            EQU     $01
001C8C 0F9C8C -> $0080                PD7             EQU     $80
001C8C 0F9C8C -> $0040                PD6             EQU     $40
001C8C 0F9C8C -> $0020                PD5             EQU     $20
001C8C 0F9C8C -> $0010                PD4             EQU     $10
001C8C 0F9C8C -> $0008                PD3             EQU     $08
001C8C 0F9C8C -> $0004                PD2             EQU     $04
001C8C 0F9C8C -> $0002                PD1             EQU     $02
001C8C 0F9C8C -> $0001                PD0             EQU     $01
001C8C 0F9C8C -> $0006                DDRC            EQU     $0006
001C8C 0F9C8C -> $0080                DDRC7           EQU     $80
001C8C 0F9C8C -> $0040                DDRC6           EQU     $40
001C8C 0F9C8C -> $0020                DDRC5           EQU     $20
001C8C 0F9C8C -> $0010                DDRC4           EQU     $10
001C8C 0F9C8C -> $0008                DDRC3           EQU     $08
001C8C 0F9C8C -> $0004                DDRC2           EQU     $04
001C8C 0F9C8C -> $0007                DDRD            EQU     $0007
001C8C 0F9C8C -> $0080                DDRD7           EQU     $80
001C8C 0F9C8C -> $0040                DDRD6           EQU     $40
001C8C 0F9C8C -> $0020                DDRD5           EQU     $20
001C8C 0F9C8C -> $0010                DDRD4           EQU     $10
001C8C 0F9C8C -> $0008                DDRD3           EQU     $08
001C8C 0F9C8C -> $0004                DDRD2           EQU     $04
001C8C 0F9C8C -> $0008                PORTE           EQU     $0008
001C8C 0F9C8C -> $0080                PTE7            EQU     $80
001C8C 0F9C8C -> $0040                PTE6            EQU     $40
001C8C 0F9C8C -> $0020                PTE5            EQU     $20
001C8C 0F9C8C -> $0010                PTE4            EQU     $10
001C8C 0F9C8C -> $0008                PTE3            EQU     $08
001C8C 0F9C8C -> $0004                PTE2            EQU     $04
001C8C 0F9C8C -> $0002                PTE1            EQU     $02
001C8C 0F9C8C -> $0001                PTE0            EQU     $01
001C8C 0F9C8C -> $0080                PE7             EQU     $80
001C8C 0F9C8C -> $0040                PE6             EQU     $40
001C8C 0F9C8C -> $0020                PE5             EQU     $20
001C8C 0F9C8C -> $0010                PE4             EQU     $10
001C8C 0F9C8C -> $0008                PE3             EQU     $08
001C8C 0F9C8C -> $0004                PE2             EQU     $04
001C8C 0F9C8C -> $0002                PE1             EQU     $02
001C8C 0F9C8C -> $0001                PE0             EQU     $01
001C8C 0F9C8C -> $0009                DDRE            EQU     $0009
001C8C 0F9C8C -> $0080                DDRE7           EQU     $80
001C8C 0F9C8C -> $0040                DDRE6           EQU     $40
001C8C 0F9C8C -> $0020                DDRE5           EQU     $20
001C8C 0F9C8C -> $0010                DDRE4           EQU     $10
001C8C 0F9C8C -> $0008                DDRE3           EQU     $08
001C8C 0F9C8C -> $0004                DDRE2           EQU     $04
001C8C 0F9C8C -> $000A                MMCCTL0         EQU     $000A
001C8C 0F9C8C -> $0080                CS3E1           EQU     $80
001C8C 0F9C8C -> $0040                CS3E0           EQU     $40
001C8C 0F9C8C -> $0020                CS2E1           EQU     $20
001C8C 0F9C8C -> $0010                CS2E0           EQU     $10
001C8C 0F9C8C -> $0008                CS1E1           EQU     $08
001C8C 0F9C8C -> $0004                CS1E0           EQU     $04
001C8C 0F9C8C -> $0002                CS0E1           EQU     $02
001C8C 0F9C8C -> $0001                CS0E0           EQU     $01
001C8C 0F9C8C -> $000B                MODE            EQU     $000B
001C8C 0F9C8C -> $0080                MODC            EQU     $80
001C8C 0F9C8C -> $0040                MODB            EQU     $40
001C8C 0F9C8C -> $0020                MODA            EQU     $20
001C8C 0F9C8C -> $000C                PUCR            EQU     $000C
001C8C 0F9C8C -> $0080                PUPKE           EQU     $80
001C8C 0F9C8C -> $0040                BKPUE           EQU     $40
001C8C 0F9C8C -> $0010                PUPEE           EQU     $10
001C8C 0F9C8C -> $0008                PUPDE           EQU     $08
001C8C 0F9C8C -> $0004                PUPCE           EQU     $04
001C8C 0F9C8C -> $0002                PUPBE           EQU     $02
001C8C 0F9C8C -> $0001                PUPAE           EQU     $01
001C8C 0F9C8C -> $000D                RDRIV           EQU     $000D
001C8C 0F9C8C -> $0080                RDPK            EQU     $80
001C8C 0F9C8C -> $0010                RDPE            EQU     $10
001C8C 0F9C8C -> $0008                RDPD            EQU     $08
001C8C 0F9C8C -> $0004                RDPC            EQU     $04
001C8C 0F9C8C -> $0002                RDPB            EQU     $02
001C8C 0F9C8C -> $0001                RDPA            EQU     $01
001C8C 0F9C8C -> $000E                EBICTL0         EQU     $000E
001C8C 0F9C8C -> $0080                ITHRS           EQU     $80
001C8C 0F9C8C -> $0040                HDBE            EQU     $40
001C8C 0F9C8C -> $0010                ASIZ4           EQU     $10
001C8C 0F9C8C -> $0008                ASIZ3           EQU     $08
001C8C 0F9C8C -> $0004                ASIZ2           EQU     $04
001C8C 0F9C8C -> $0002                ASIZ1           EQU     $02
001C8C 0F9C8C -> $0001                ASIZ0           EQU     $01
001C8C 0F9C8C -> $000F                EBICTL1         EQU     $000F
001C8C 0F9C8C -> $0040                EXSTR12         EQU     $40
001C8C 0F9C8C -> $0020                EXSTR11         EQU     $20
001C8C 0F9C8C -> $0010                EXSTR10         EQU     $10
001C8C 0F9C8C -> $0004                EXSTR02         EQU     $04
001C8C 0F9C8C -> $0002                EXSTR01         EQU     $02
001C8C 0F9C8C -> $0001                EXSTR00         EQU     $01
001C8C 0F9C8C -> $0010                GPAGE           EQU     $0010
001C8C 0F9C8C -> $0040                GP6             EQU     $40
001C8C 0F9C8C -> $0020                GP5             EQU     $20
001C8C 0F9C8C -> $0010                GP4             EQU     $10
001C8C 0F9C8C -> $0008                GP3             EQU     $08
001C8C 0F9C8C -> $0004                GP2             EQU     $04
001C8C 0F9C8C -> $0002                GP1             EQU     $02
001C8C 0F9C8C -> $0001                GP0             EQU     $01
001C8C 0F9C8C -> $0011                DIRECT          EQU     $0011
001C8C 0F9C8C -> $0080                DP15            EQU     $80
001C8C 0F9C8C -> $0040                DP14            EQU     $40
001C8C 0F9C8C -> $0020                DP13            EQU     $20
001C8C 0F9C8C -> $0010                DP12            EQU     $10
001C8C 0F9C8C -> $0008                DP11            EQU     $08
001C8C 0F9C8C -> $0004                DP10            EQU     $04
001C8C 0F9C8C -> $0002                DP9             EQU     $02
001C8C 0F9C8C -> $0001                DP8             EQU     $01
001C8C 0F9C8C -> $0013                MMCCTL1         EQU     $0013
001C8C 0F9C8C -> $0080                TGMRAMON        EQU     $80
001C8C 0F9C8C -> $0020                EEEIFRON        EQU     $20
001C8C 0F9C8C -> $0010                PGMIFRON        EQU     $10
001C8C 0F9C8C -> $0008                RAMHM           EQU     $08
001C8C 0F9C8C -> $0004                EROMON          EQU     $04
001C8C 0F9C8C -> $0002                ROMHM           EQU     $02
001C8C 0F9C8C -> $0001                ROMON           EQU     $01
001C8C 0F9C8C -> $0015                PPAGE           EQU     $0015
001C8C 0F9C8C -> $0080                PIX7            EQU     $80
001C8C 0F9C8C -> $0040                PIX6            EQU     $40
001C8C 0F9C8C -> $0020                PIX5            EQU     $20
001C8C 0F9C8C -> $0010                PIX4            EQU     $10
001C8C 0F9C8C -> $0008                PIX3            EQU     $08
001C8C 0F9C8C -> $0004                PIX2            EQU     $04
001C8C 0F9C8C -> $0002                PIX1            EQU     $02
001C8C 0F9C8C -> $0001                PIX0            EQU     $01
001C8C 0F9C8C -> $0016                RPAGE           EQU     $0016
001C8C 0F9C8C -> $0080                RP7             EQU     $80
001C8C 0F9C8C -> $0040                RP6             EQU     $40
001C8C 0F9C8C -> $0020                RP5             EQU     $20
001C8C 0F9C8C -> $0010                RP4             EQU     $10
001C8C 0F9C8C -> $0008                RP3             EQU     $08
001C8C 0F9C8C -> $0004                RP2             EQU     $04
001C8C 0F9C8C -> $0002                RP1             EQU     $02
001C8C 0F9C8C -> $0001                RP0             EQU     $01
001C8C 0F9C8C -> $0017                EPAGE           EQU     $0017
001C8C 0F9C8C -> $0080                EP7             EQU     $80
001C8C 0F9C8C -> $0040                EP6             EQU     $40
001C8C 0F9C8C -> $0020                EP5             EQU     $20
001C8C 0F9C8C -> $0010                EP4             EQU     $10
001C8C 0F9C8C -> $0008                EP3             EQU     $08
001C8C 0F9C8C -> $0004                EP2             EQU     $04
001C8C 0F9C8C -> $0002                EP1             EQU     $02
001C8C 0F9C8C -> $0001                EP0             EQU     $01
001C8C 0F9C8C -> $001A                PARTIDH         EQU     $001A
001C8C 0F9C8C -> $0080                ID15            EQU     $80
001C8C 0F9C8C -> $0040                ID14            EQU     $40
001C8C 0F9C8C -> $0020                ID13            EQU     $20
001C8C 0F9C8C -> $0010                ID12            EQU     $10
001C8C 0F9C8C -> $0008                ID11            EQU     $08
001C8C 0F9C8C -> $0004                ID10            EQU     $04
001C8C 0F9C8C -> $0002                ID9             EQU     $02
001C8C 0F9C8C -> $0001                ID8             EQU     $01
001C8C 0F9C8C -> $001B                PARTIDL         EQU     $001B
001C8C 0F9C8C -> $0080                ID7             EQU     $80
001C8C 0F9C8C -> $0040                ID6             EQU     $40
001C8C 0F9C8C -> $0020                ID5             EQU     $20
001C8C 0F9C8C -> $0010                ID4             EQU     $10
001C8C 0F9C8C -> $0008                ID3             EQU     $08
001C8C 0F9C8C -> $0004                ID2             EQU     $04
001C8C 0F9C8C -> $0002                ID1             EQU     $02
001C8C 0F9C8C -> $0001                ID0             EQU     $01
001C8C 0F9C8C -> $001C                ECLKCTL         EQU     $001C
001C8C 0F9C8C -> $0080                NECLK           EQU     $80
001C8C 0F9C8C -> $0040                NCLKX2          EQU     $40
001C8C 0F9C8C -> $0020                DIV16           EQU     $20
001C8C 0F9C8C -> $0010                EDIV4           EQU     $10
001C8C 0F9C8C -> $0008                EDIV3           EQU     $08
001C8C 0F9C8C -> $0004                EDIV2           EQU     $04
001C8C 0F9C8C -> $0002                EDIV1           EQU     $02
001C8C 0F9C8C -> $0001                EDIV0           EQU     $01
001C8C 0F9C8C -> $001E                IRQCR           EQU     $001E
001C8C 0F9C8C -> $0080                IRQE            EQU     $80
001C8C 0F9C8C -> $0040                IRQEN           EQU     $40
001C8C 0F9C8C -> $0020                DBGC1           EQU     $0020
001C8C 0F9C8C -> $0080                ARM             EQU     $80
001C8C 0F9C8C -> $0040                TRIG            EQU     $40
001C8C 0F9C8C -> $0020                XGSBPE          EQU     $20
001C8C 0F9C8C -> $0010                BDM             EQU     $10
001C8C 0F9C8C -> $0004                DBGBRK          EQU     $04
001C8C 0F9C8C -> $0001                COMRV           EQU     $01
001C8C 0F9C8C -> $0021                DBGSR           EQU     $0021
001C8C 0F9C8C -> $0080                TBF             EQU     $80
001C8C 0F9C8C -> $0040                EXTF            EQU     $40
001C8C 0F9C8C -> $0004                SSF2            EQU     $04
001C8C 0F9C8C -> $0002                SSF1            EQU     $02
001C8C 0F9C8C -> $0001                SSF0            EQU     $01
001C8C 0F9C8C -> $0022                DBGTCR          EQU     $0022
001C8C 0F9C8C -> $00C0                TSOURCE         EQU     $C0
001C8C 0F9C8C -> $0030                TRANGE          EQU     $30
001C8C 0F9C8C -> $000C                TRCMOD          EQU     $0C
001C8C 0F9C8C -> $0003                TALIGN          EQU     $03
001C8C 0F9C8C -> $0023                DBGC2           EQU     $0023
001C8C 0F9C8C -> $000C                CDCM            EQU     $0C
001C8C 0F9C8C -> $0003                ABCM            EQU     $03
001C8C 0F9C8C -> $0024                DBGTBH          EQU     $0024
001C8C 0F9C8C -> $0080                DBGTB15         EQU     $80
001C8C 0F9C8C -> $0040                DBGTB14         EQU     $40
001C8C 0F9C8C -> $0020                DBGTB13         EQU     $20
001C8C 0F9C8C -> $0010                DBGTB12         EQU     $10
001C8C 0F9C8C -> $0008                DBGTB11         EQU     $08
001C8C 0F9C8C -> $0004                DBGTB10         EQU     $04
001C8C 0F9C8C -> $0002                DBGTB9          EQU     $02
001C8C 0F9C8C -> $0001                DBGTB8          EQU     $01
001C8C 0F9C8C -> $0025                DBGTBL          EQU     $0025
001C8C 0F9C8C -> $0080                DBGTB7          EQU     $80
001C8C 0F9C8C -> $0040                DBGTB6          EQU     $40
001C8C 0F9C8C -> $0020                DBGTB5          EQU     $20
001C8C 0F9C8C -> $0010                DBGTB4          EQU     $10
001C8C 0F9C8C -> $0008                DBGTB3          EQU     $08
001C8C 0F9C8C -> $0004                DBGTB2          EQU     $04
001C8C 0F9C8C -> $0002                DBGTB1          EQU     $02
001C8C 0F9C8C -> $0001                DBGTB0          EQU     $01
001C8C 0F9C8C -> $0026                DBGCNT          EQU     $0026
001C8C 0F9C8C -> $0027                DBGSCRX         EQU     $0027
001C8C 0F9C8C -> $0008                SC3             EQU     $08
001C8C 0F9C8C -> $0004                SC2             EQU     $04
001C8C 0F9C8C -> $0002                SC1             EQU     $02
001C8C 0F9C8C -> $0001                SC0             EQU     $01
001C8C 0F9C8C -> $0027                DBGMFR          EQU     $0027
001C8C 0F9C8C -> $0008                MC3             EQU     $08
001C8C 0F9C8C -> $0004                MC2             EQU     $04
001C8C 0F9C8C -> $0002                MC1             EQU     $02
001C8C 0F9C8C -> $0001                MC0             EQU     $01
001C8C 0F9C8C -> $0028                DBGXCTL         EQU     $0028
001C8C 0F9C8C -> $0080                SZE             EQU     $80
001C8C 0F9C8C -> $0040                SZ              EQU     $40
001C8C 0F9C8C -> $0020                TAG             EQU     $20
001C8C 0F9C8C -> $0010                BRK             EQU     $10
001C8C 0F9C8C -> $0008                RW              EQU     $08
001C8C 0F9C8C -> $0004                RWE             EQU     $04
001C8C 0F9C8C -> $0002                SRC             EQU     $02
001C8C 0F9C8C -> $0001                COMPE           EQU     $01
001C8C 0F9C8C -> $0029                DBGXAH          EQU    $0029
001C8C 0F9C8C -> $0040                DBGXA22         EQU    $40
001C8C 0F9C8C -> $0020                DBGXA21         EQU    $20
001C8C 0F9C8C -> $0010                DBGXA20         EQU    $10
001C8C 0F9C8C -> $0008                DBGXA19         EQU    $08
001C8C 0F9C8C -> $0004                DBGXA18         EQU    $04
001C8C 0F9C8C -> $0002                DBGXA17         EQU    $02
001C8C 0F9C8C -> $0001                DBGXA16         EQU    $01
001C8C 0F9C8C -> $002A                DBGXAM          EQU     $002A
001C8C 0F9C8C -> $0080                DBGXA15         EQU     $80
001C8C 0F9C8C -> $0040                DBGXA14         EQU     $40
001C8C 0F9C8C -> $0020                DBGXA13         EQU     $20
001C8C 0F9C8C -> $0010                DBGXA12         EQU     $10
001C8C 0F9C8C -> $0008                DBGXA11         EQU     $08
001C8C 0F9C8C -> $0004                DBGXA10         EQU     $04
001C8C 0F9C8C -> $0002                DBGXA9          EQU     $02
001C8C 0F9C8C -> $0001                DBGXA8          EQU     $01
001C8C 0F9C8C -> $002B                DBGXAL          EQU     $002B
001C8C 0F9C8C -> $0080                DBGXA7          EQU     $80
001C8C 0F9C8C -> $0040                DBGXA6          EQU     $40
001C8C 0F9C8C -> $0020                DBGXA5          EQU     $20
001C8C 0F9C8C -> $0010                DBGXA4          EQU     $10
001C8C 0F9C8C -> $0008                DBGXA3          EQU     $08
001C8C 0F9C8C -> $0004                DBGXA2          EQU     $04
001C8C 0F9C8C -> $0002                DBGXA1          EQU     $02
001C8C 0F9C8C -> $0001                DBGXA0          EQU     $01
001C8C 0F9C8C -> $002C                DBGXDH          EQU     $002C
001C8C 0F9C8C -> $0080                DBGXD15         EQU     $80
001C8C 0F9C8C -> $0040                DBGXD14         EQU     $40
001C8C 0F9C8C -> $0020                DBGXD13         EQU     $20
001C8C 0F9C8C -> $0010                DBGXD12         EQU     $10
001C8C 0F9C8C -> $0008                DBGXD11         EQU     $08
001C8C 0F9C8C -> $0004                DBGXD10         EQU     $04
001C8C 0F9C8C -> $0002                DBGXD9          EQU     $02
001C8C 0F9C8C -> $0001                DBGXD8          EQU     $01
001C8C 0F9C8C -> $002D                DBGXDL          EQU     $002D
001C8C 0F9C8C -> $0080                DBGXD7          EQU     $80
001C8C 0F9C8C -> $0040                DBGXD6          EQU     $40
001C8C 0F9C8C -> $0020                DBGXD5          EQU     $20
001C8C 0F9C8C -> $0010                DBGXD4          EQU     $10
001C8C 0F9C8C -> $0008                DBGXD3          EQU     $08
001C8C 0F9C8C -> $0004                DBGXD2          EQU     $04
001C8C 0F9C8C -> $0002                DBGXD1          EQU     $02
001C8C 0F9C8C -> $0001                DBGXD0          EQU     $01
001C8C 0F9C8C -> $002E                DBGXDHM         EQU     $002E
001C8C 0F9C8C -> $0080                DBGXDM15        EQU     $80
001C8C 0F9C8C -> $0040                DBGXDM14        EQU     $40
001C8C 0F9C8C -> $0020                DBGXDM13        EQU     $20
001C8C 0F9C8C -> $0010                DBGXDM12        EQU     $10
001C8C 0F9C8C -> $0008                DBGXDM11        EQU     $08
001C8C 0F9C8C -> $0004                DBGXDM10        EQU     $04
001C8C 0F9C8C -> $0002                DBGXDM9         EQU     $02
001C8C 0F9C8C -> $0001                DBGXDM8         EQU     $01
001C8C 0F9C8C -> $002F                DBGXDLM         EQU     $002F
001C8C 0F9C8C -> $0080                DBGXDM7         EQU     $80
001C8C 0F9C8C -> $0040                DBGXDM6         EQU     $40
001C8C 0F9C8C -> $0020                DBGXDM5         EQU     $20
001C8C 0F9C8C -> $0010                DBGXDM4         EQU     $10
001C8C 0F9C8C -> $0008                DBGXDM3         EQU     $08
001C8C 0F9C8C -> $0004                DBGXDM2         EQU     $04
001C8C 0F9C8C -> $0002                DBGXDM1         EQU     $02
001C8C 0F9C8C -> $0001                DBGXDM0         EQU     $01
001C8C 0F9C8C -> $0032                PORTK           EQU     $0032
001C8C 0F9C8C -> $0080                PTK7            EQU     $80
001C8C 0F9C8C -> $0040                PTK6            EQU     $40
001C8C 0F9C8C -> $0020                PTK5            EQU     $20
001C8C 0F9C8C -> $0010                PTK4            EQU     $10
001C8C 0F9C8C -> $0008                PTK3            EQU     $08
001C8C 0F9C8C -> $0004                PTK2            EQU     $04
001C8C 0F9C8C -> $0002                PTK1            EQU     $02
001C8C 0F9C8C -> $0001                PKT0            EQU     $01
001C8C 0F9C8C -> $0080                PK7             EQU     $80
001C8C 0F9C8C -> $0040                PK6             EQU     $40
001C8C 0F9C8C -> $0020                PK5             EQU     $20
001C8C 0F9C8C -> $0010                PK4             EQU     $10
001C8C 0F9C8C -> $0008                PK3             EQU     $08
001C8C 0F9C8C -> $0004                PK2             EQU     $04
001C8C 0F9C8C -> $0002                PK1             EQU     $02
001C8C 0F9C8C -> $0001                PK0             EQU     $01
001C8C 0F9C8C -> $0033                DDRK            EQU     $0033
001C8C 0F9C8C -> $0080                DDRK7           EQU     $80
001C8C 0F9C8C -> $0040                DDRK6           EQU     $40
001C8C 0F9C8C -> $0020                DDRK5           EQU     $20
001C8C 0F9C8C -> $0010                DDRK4           EQU     $10
001C8C 0F9C8C -> $0008                DDRK3           EQU     $08
001C8C 0F9C8C -> $0004                DDRK2           EQU     $04
001C8C 0F9C8C -> $0002                DDRK1           EQU     $02
001C8C 0F9C8C -> $0001                DDRK0           EQU     $01
001C8C 0F9C8C -> $0034                SYNR            EQU     $0034
001C8C 0F9C8C -> $0080                VCOFRQ1         EQU     $80
001C8C 0F9C8C -> $0040                VCOFRQ0         EQU     $40
001C8C 0F9C8C -> $0020                SYNDIV5         EQU     $20
001C8C 0F9C8C -> $0010                SYNDIV4         EQU     $10
001C8C 0F9C8C -> $0008                SYNDIV3         EQU     $08
001C8C 0F9C8C -> $0004                SYNDIV2         EQU     $04
001C8C 0F9C8C -> $0002                SYNDIV1         EQU     $02
001C8C 0F9C8C -> $0001                SYNDIV0         EQU     $01
001C8C 0F9C8C -> $0035                REFDV           EQU     $0035
001C8C 0F9C8C -> $0080                REFFRQ1         EQU     $80
001C8C 0F9C8C -> $0040                REFFRQ0         EQU     $40
001C8C 0F9C8C -> $0008                REFDIV3         EQU     $08
001C8C 0F9C8C -> $0004                REFDIV2         EQU     $04
001C8C 0F9C8C -> $0002                REFDIV1         EQU     $02
001C8C 0F9C8C -> $0001                REFDIV0         EQU     $01
001C8C 0F9C8C -> $0036                POSTDIV         EQU     $0036
001C8C 0F9C8C -> $0010                POSTDIV4        EQU     $10
001C8C 0F9C8C -> $0008                POSTDIV3        EQU     $08
001C8C 0F9C8C -> $0004                POSTDIV2        EQU     $04
001C8C 0F9C8C -> $0002                POSTDIV1        EQU     $02
001C8C 0F9C8C -> $0001                POSTDIV0        EQU     $01
001C8C 0F9C8C -> $0037                CRGFLG          EQU     $0037
001C8C 0F9C8C -> $0080                RTIF            EQU     $80
001C8C 0F9C8C -> $0040                PORF            EQU     $40
001C8C 0F9C8C -> $0020                LVRF            EQU     $20
001C8C 0F9C8C -> $0010                LOCKIF          EQU     $10
001C8C 0F9C8C -> $0008                LOCK            EQU     $08
001C8C 0F9C8C -> $0004                ILAF            EQU     $04
001C8C 0F9C8C -> $0002                SCMIF           EQU     $02
001C8C 0F9C8C -> $0001                SCM             EQU     $01
001C8C 0F9C8C -> $0038                CRGINT          EQU     $0038
001C8C 0F9C8C -> $0080                RTIE            EQU     $80
001C8C 0F9C8C -> $0010                LOCKIE          EQU     $10
001C8C 0F9C8C -> $0002                SCMIE           EQU     $02
001C8C 0F9C8C -> $0039                CLKSEL          EQU     $0039
001C8C 0F9C8C -> $0080                PLLSEL          EQU     $80
001C8C 0F9C8C -> $0040                PSTP            EQU     $40
001C8C 0F9C8C -> $0020                XCLKS           EQU     $20
001C8C 0F9C8C -> $0008                PLLWAI          EQU     $08
001C8C 0F9C8C -> $0002                RTIWAI          EQU     $02
001C8C 0F9C8C -> $0001                COPWAI          EQU     $01
001C8C 0F9C8C -> $003A                PLLCTL          EQU     $003A
001C8C 0F9C8C -> $0080                CME             EQU     $80
001C8C 0F9C8C -> $0040                PLLON           EQU     $40
001C8C 0F9C8C -> $0020                FM1             EQU     $20
001C8C 0F9C8C -> $0010                FM0             EQU     $10
001C8C 0F9C8C -> $0008                FSTWKP          EQU     $08
001C8C 0F9C8C -> $0004                PRE             EQU     $04
001C8C 0F9C8C -> $0002                PCE             EQU     $02
001C8C 0F9C8C -> $0001                SCME            EQU     $01
001C8C 0F9C8C -> $003B                RTICTL          EQU     $003B
001C8C 0F9C8C -> $0080                RTDEC           EQU     $80
001C8C 0F9C8C -> $0040                RTR6            EQU     $40
001C8C 0F9C8C -> $0020                RTR5            EQU     $20
001C8C 0F9C8C -> $0010                RTR4            EQU     $10
001C8C 0F9C8C -> $0008                RTR3            EQU     $08
001C8C 0F9C8C -> $0004                RTR2            EQU     $04
001C8C 0F9C8C -> $0002                RTR1            EQU     $02
001C8C 0F9C8C -> $0001                RTR0            EQU     $01
001C8C 0F9C8C -> $003C                COPCTL          EQU     $003C
001C8C 0F9C8C -> $0080                WCOP            EQU     $80
001C8C 0F9C8C -> $0040                RSBCK           EQU     $40
001C8C 0F9C8C -> $0020                WRTMASK         EQU     $20
001C8C 0F9C8C -> $0004                CR2             EQU     $04
001C8C 0F9C8C -> $0002                CR1             EQU     $02
001C8C 0F9C8C -> $0001                CR0             EQU     $01
001C8C 0F9C8C -> $003D                FORBYP          EQU     $003D
001C8C 0F9C8C -> $003E                CTCTL           EQU     $003E
001C8C 0F9C8C -> $003F                ARMCOP          EQU     $003F
001C8C 0F9C8C -> $0040                ECT             EQU     $0040
001C8C 0F9C8C -> $0040                TIOS            EQU     $0040
001C8C 0F9C8C -> $0040                ECT_TIOS        EQU     $0040
001C8C 0F9C8C -> $0080                IOS7            EQU     $80
001C8C 0F9C8C -> $0040                IOS6            EQU     $40
001C8C 0F9C8C -> $0020                IOS5            EQU     $20
001C8C 0F9C8C -> $0010                IOS4            EQU     $10
001C8C 0F9C8C -> $0008                IOS3            EQU     $08
001C8C 0F9C8C -> $0004                IOS2            EQU     $04
001C8C 0F9C8C -> $0002                IOS1            EQU     $02
001C8C 0F9C8C -> $0001                IOS0            EQU     $01
001C8C 0F9C8C -> $0041                TCFORC          EQU     $0041
001C8C 0F9C8C -> $0041                ECT_TCFORC      EQU     $0041
001C8C 0F9C8C -> $0080                FOC7            EQU     $80
001C8C 0F9C8C -> $0040                FOC6            EQU     $40
001C8C 0F9C8C -> $0020                FOC5            EQU     $20
001C8C 0F9C8C -> $0010                FOC4            EQU     $10
001C8C 0F9C8C -> $0008                FOC3            EQU     $08
001C8C 0F9C8C -> $0004                FOC2            EQU     $04
001C8C 0F9C8C -> $0002                FOC1            EQU     $02
001C8C 0F9C8C -> $0001                FOC0            EQU     $01
001C8C 0F9C8C -> $0042                TOC7M           EQU     $0042
001C8C 0F9C8C -> $0042                ECT_TOC7M       EQU     $0042
001C8C 0F9C8C -> $0080                OC7M7           EQU     $80
001C8C 0F9C8C -> $0040                OC7M6           EQU     $40
001C8C 0F9C8C -> $0020                OC7M5           EQU     $20
001C8C 0F9C8C -> $0010                OC7M4           EQU     $10
001C8C 0F9C8C -> $0008                OC7M3           EQU     $08
001C8C 0F9C8C -> $0004                OC7M2           EQU     $04
001C8C 0F9C8C -> $0002                OC7M1           EQU     $02
001C8C 0F9C8C -> $0001                OC7M0           EQU     $01
001C8C 0F9C8C -> $0043                TOC7D           EQU     $0043
001C8C 0F9C8C -> $0043                ECT_TOC7D       EQU     $0043
001C8C 0F9C8C -> $0080                OC7D7           EQU     $80
001C8C 0F9C8C -> $0040                OC7D6           EQU     $40
001C8C 0F9C8C -> $0020                OC7D5           EQU     $20
001C8C 0F9C8C -> $0010                OC7D4           EQU     $10
001C8C 0F9C8C -> $0008                OC7D3           EQU     $08
001C8C 0F9C8C -> $0004                OC7D2           EQU     $04
001C8C 0F9C8C -> $0002                OC7D1           EQU     $02
001C8C 0F9C8C -> $0001                OC7D0           EQU     $01
001C8C 0F9C8C -> $0044                TCNT            EQU     $0044
001C8C 0F9C8C -> $0044                ECT_TCNT        EQU     $0044
001C8C 0F9C8C -> $0046                TSCR1           EQU     $0046
001C8C 0F9C8C -> $0046                ECT_TSCR1       EQU     $0046
001C8C 0F9C8C -> $0080                TEN             EQU     $80
001C8C 0F9C8C -> $0040                TSWAI           EQU     $40
001C8C 0F9C8C -> $0020                TSFRZ           EQU     $20
001C8C 0F9C8C -> $0010                TFFCA           EQU     $10
001C8C 0F9C8C -> $0047                TTOV            EQU     $0047
001C8C 0F9C8C -> $0047                ECT_TTOV        EQU     $0047
001C8C 0F9C8C -> $0080                TOV7            EQU     $80
001C8C 0F9C8C -> $0040                TOV6            EQU     $40
001C8C 0F9C8C -> $0020                TOV5            EQU     $20
001C8C 0F9C8C -> $0010                TOV4            EQU     $10
001C8C 0F9C8C -> $0008                TOV3            EQU     $08
001C8C 0F9C8C -> $0004                TOV2            EQU     $04
001C8C 0F9C8C -> $0002                TOV1            EQU     $02
001C8C 0F9C8C -> $0001                TOV0            EQU     $01
001C8C 0F9C8C -> $0048                TCTL1           EQU     $0048
001C8C 0F9C8C -> $0048                ECT_TCTL1       EQU     $0048
001C8C 0F9C8C -> $0080                OM7             EQU     $80
001C8C 0F9C8C -> $0040                OL7             EQU     $40
001C8C 0F9C8C -> $0020                OM6             EQU     $20
001C8C 0F9C8C -> $0010                OL6             EQU     $10
001C8C 0F9C8C -> $0008                OM5             EQU     $08
001C8C 0F9C8C -> $0004                OL5             EQU     $04
001C8C 0F9C8C -> $0002                OM4             EQU     $02
001C8C 0F9C8C -> $0001                OL4             EQU     $01
001C8C 0F9C8C -> $0049                TCTL2           EQU     $0049
001C8C 0F9C8C -> $0049                ECT_TCTL2       EQU     $0049
001C8C 0F9C8C -> $0080                OM3             EQU     $80
001C8C 0F9C8C -> $0040                OL3             EQU     $40
001C8C 0F9C8C -> $0020                OM2             EQU     $20
001C8C 0F9C8C -> $0010                OL2             EQU     $10
001C8C 0F9C8C -> $0008                OM1             EQU     $08
001C8C 0F9C8C -> $0004                OL1             EQU     $04
001C8C 0F9C8C -> $0002                OM0             EQU     $02
001C8C 0F9C8C -> $0001                OL0             EQU     $01
001C8C 0F9C8C -> $004A                TCTL3           EQU     $004A
001C8C 0F9C8C -> $004A                ECT_TCTL3       EQU     $004A
001C8C 0F9C8C -> $0080                EDG7B           EQU     $80
001C8C 0F9C8C -> $0040                EDG7A           EQU     $40
001C8C 0F9C8C -> $0020                EDG6B           EQU     $20
001C8C 0F9C8C -> $0010                EDG6A           EQU     $10
001C8C 0F9C8C -> $0008                EDG5B           EQU     $08
001C8C 0F9C8C -> $0004                EDG5A           EQU     $04
001C8C 0F9C8C -> $0002                EDG4B           EQU     $02
001C8C 0F9C8C -> $0001                EDG4A           EQU     $01
001C8C 0F9C8C -> $004B                TCTL4           EQU     $004B
001C8C 0F9C8C -> $004B                ECT_TCTL4       EQU     $004B
001C8C 0F9C8C -> $0080                EDG3B           EQU     $80
001C8C 0F9C8C -> $0040                EDG3A           EQU     $40
001C8C 0F9C8C -> $0020                EDG2B           EQU     $20
001C8C 0F9C8C -> $0010                EDG2A           EQU     $10
001C8C 0F9C8C -> $0008                EDG1B           EQU     $08
001C8C 0F9C8C -> $0004                EDG1A           EQU     $04
001C8C 0F9C8C -> $0002                EDG0B           EQU     $02
001C8C 0F9C8C -> $0001                EDG0A           EQU     $01
001C8C 0F9C8C -> $004C                TIE             EQU     $004C
001C8C 0F9C8C -> $004C                ECT_TIE         EQU     $004C
001C8C 0F9C8C -> $0080                C7I             EQU     $80
001C8C 0F9C8C -> $0040                C6I             EQU     $40
001C8C 0F9C8C -> $0020                C5I             EQU     $20
001C8C 0F9C8C -> $0010                C4I             EQU     $10
001C8C 0F9C8C -> $0008                C3I             EQU     $08
001C8C 0F9C8C -> $0004                C2I             EQU     $04
001C8C 0F9C8C -> $0002                C1I             EQU     $02
001C8C 0F9C8C -> $0001                C0I             EQU     $01
001C8C 0F9C8C -> $004D                TSCR2           EQU     $004D
001C8C 0F9C8C -> $004D                ECT_TSCR2       EQU     $004D
001C8C 0F9C8C -> $0080                TOI             EQU     $80
001C8C 0F9C8C -> $0008                TCRE            EQU     $08
001C8C 0F9C8C -> $0004                PR2             EQU     $04
001C8C 0F9C8C -> $0002                PR1             EQU     $02
001C8C 0F9C8C -> $0001                PR0             EQU     $01
001C8C 0F9C8C -> $004E                TFLG1           EQU     $004E
001C8C 0F9C8C -> $004E                ECT_TFLG1       EQU     $004E
001C8C 0F9C8C -> $0080                C7F             EQU     $80
001C8C 0F9C8C -> $0040                C6F             EQU     $40
001C8C 0F9C8C -> $0020                C5F             EQU     $20
001C8C 0F9C8C -> $0010                C4F             EQU     $10
001C8C 0F9C8C -> $0008                C3F             EQU     $08
001C8C 0F9C8C -> $0004                C2F             EQU     $04
001C8C 0F9C8C -> $0002                C1F             EQU     $02
001C8C 0F9C8C -> $0001                C0F             EQU     $01
001C8C 0F9C8C -> $004F                TFLG2           EQU     $004F
001C8C 0F9C8C -> $004F                ECT_TFLG2       EQU     $004F
001C8C 0F9C8C -> $0080                TOF             EQU     $80
001C8C 0F9C8C -> $0050                TC0             EQU     $0050
001C8C 0F9C8C -> $0050                ECT_TC0         EQU     $0050
001C8C 0F9C8C -> $0052                TC1             EQU     $0052
001C8C 0F9C8C -> $0052                ECT_TC1         EQU     $0052
001C8C 0F9C8C -> $0054                TC2             EQU     $0054
001C8C 0F9C8C -> $0056                ECT_TC3         EQU     $0056
001C8C 0F9C8C -> $0056                TC3             EQU     $0056
001C8C 0F9C8C -> $0058                ECT_TC4         EQU     $0058
001C8C 0F9C8C -> $0058                TC4             EQU     $0058
001C8C 0F9C8C -> $005A                ECT_TC5         EQU     $005A
001C8C 0F9C8C -> $005A                TC5             EQU     $005A
001C8C 0F9C8C -> $005C                ECT_TC6         EQU     $005C
001C8C 0F9C8C -> $005E                TC7             EQU     $005E
001C8C 0F9C8C -> $005E                ECT_TC7         EQU     $005E
001C8C 0F9C8C -> $0060                PACTL           EQU     $0060
001C8C 0F9C8C -> $0060                ECT_PACTL       EQU     $0060
001C8C 0F9C8C -> $0040                PAEN            EQU     $40
001C8C 0F9C8C -> $0020                PAMOD           EQU     $20
001C8C 0F9C8C -> $0010                PEDGE           EQU     $10
001C8C 0F9C8C -> $0008                CLK1            EQU     $08
001C8C 0F9C8C -> $0004                CLK0            EQU     $04
001C8C 0F9C8C -> $0002                PAOVI           EQU     $02
001C8C 0F9C8C -> $0001                PAI             EQU     $01
001C8C 0F9C8C -> $0061                PAFLG           EQU     $0061
001C8C 0F9C8C -> $0061                ECT_PAFLG       EQU     $0061
001C8C 0F9C8C -> $0002                PAOVF           EQU     $02
001C8C 0F9C8C -> $0001                PAIF            EQU     $01
001C8C 0F9C8C -> $0062                PACNT           EQU     $0062
001C8C 0F9C8C -> $0062                ECT_PACNT       EQU     $0062
001C8C 0F9C8C -> $0062                PACN3           EQU     $0062
001C8C 0F9C8C -> $0062                ECT_PACN3       EQU     $0062
001C8C 0F9C8C -> $0063                PACN2           EQU     $0063
001C8C 0F9C8C -> $0063                ECT_PACN2       EQU     $0063
001C8C 0F9C8C -> $0064                PACN1           EQU     $0064
001C8C 0F9C8C -> $0064                ECT_PACN1       EQU     $0064
001C8C 0F9C8C -> $0065                PACN0           EQU     $0065
001C8C 0F9C8C -> $0065                ECT_PACN0       EQU     $0065
001C8C 0F9C8C -> $0066                MCCTL           EQU     $0066
001C8C 0F9C8C -> $0066                ECT_MCCTL       EQU     $0066
001C8C 0F9C8C -> $0080                MCZI            EQU     $80
001C8C 0F9C8C -> $0040                MODMC           EQU     $40
001C8C 0F9C8C -> $0020                RDMCL           EQU     $20
001C8C 0F9C8C -> $0010                ICLAT           EQU     $10
001C8C 0F9C8C -> $0008                FLMC            EQU     $08
001C8C 0F9C8C -> $0004                MCEN            EQU     $04
001C8C 0F9C8C -> $0002                MCPR1           EQU     $02
001C8C 0F9C8C -> $0001                MCPR0           EQU     $01
001C8C 0F9C8C -> $0067                MCFLG           EQU     $0067
001C8C 0F9C8C -> $0067                ECT_MCFLG       EQU     $0067
001C8C 0F9C8C -> $0080                MCZF            EQU     $80
001C8C 0F9C8C -> $0008                POLF3           EQU     $08
001C8C 0F9C8C -> $0004                POLF2           EQU     $04
001C8C 0F9C8C -> $0002                POLF1           EQU     $02
001C8C 0F9C8C -> $0001                POLF0           EQU     $01
001C8C 0F9C8C -> $0068                ICPAR           EQU     $0068
001C8C 0F9C8C -> $0068                ECT_ICPAR       EQU     $0068
001C8C 0F9C8C -> $0008                PA3EN           EQU     $08
001C8C 0F9C8C -> $0004                PA2EN           EQU     $04
001C8C 0F9C8C -> $0002                PA1EN           EQU     $02
001C8C 0F9C8C -> $0001                PA0EN           EQU     $01
001C8C 0F9C8C -> $0069                DLYCT           EQU     $0069
001C8C 0F9C8C -> $0069                ECT_DLYCT       EQU     $0069
001C8C 0F9C8C -> $0080                DLY7            EQU     $80
001C8C 0F9C8C -> $0040                DLY6            EQU     $40
001C8C 0F9C8C -> $0020                DLY5            EQU     $20
001C8C 0F9C8C -> $0010                DLY4            EQU     $10
001C8C 0F9C8C -> $0008                DLY3            EQU     $08
001C8C 0F9C8C -> $0004                DLY2            EQU     $04
001C8C 0F9C8C -> $0002                DLY1            EQU     $02
001C8C 0F9C8C -> $0001                DLY0            EQU     $01
001C8C 0F9C8C -> $006A                ICOVW           EQU     $006A
001C8C 0F9C8C -> $006A                ECT_ICOVW       EQU     $006A
001C8C 0F9C8C -> $0080                NOVW7           EQU     $80
001C8C 0F9C8C -> $0040                NOVW6           EQU     $40
001C8C 0F9C8C -> $0020                NOVW5           EQU     $20
001C8C 0F9C8C -> $0010                NOVW4           EQU     $10
001C8C 0F9C8C -> $0008                NOVW3           EQU     $08
001C8C 0F9C8C -> $0004                NOVW2           EQU     $04
001C8C 0F9C8C -> $0002                NOVW1           EQU     $02
001C8C 0F9C8C -> $0001                NOVW0           EQU     $01
001C8C 0F9C8C -> $006B                ICSYS           EQU     $006B
001C8C 0F9C8C -> $006B                ECT_ICSYS       EQU     $006B
001C8C 0F9C8C -> $0080                SH37            EQU     $80
001C8C 0F9C8C -> $0040                SH26            EQU     $40
001C8C 0F9C8C -> $0020                SH15            EQU     $20
001C8C 0F9C8C -> $0010                SH04            EQU     $10
001C8C 0F9C8C -> $0008                TFMOD           EQU     $08
001C8C 0F9C8C -> $0004                PACMX           EQU     $04
001C8C 0F9C8C -> $0002                BUFEN           EQU     $02
001C8C 0F9C8C -> $0001                LATQ            EQU     $01
001C8C 0F9C8C -> $006C                OCPD            EQU     $006C
001C8C 0F9C8C -> $006C                ECT_OCPD        EQU     $006C
001C8C 0F9C8C -> $0080                OCPD7           EQU     $80
001C8C 0F9C8C -> $0040                OCPD6           EQU     $40
001C8C 0F9C8C -> $0020                OCPD5           EQU     $20
001C8C 0F9C8C -> $0010                OCPD4           EQU     $10
001C8C 0F9C8C -> $0008                OCPD3           EQU     $08
001C8C 0F9C8C -> $0004                OCPD2           EQU     $04
001C8C 0F9C8C -> $0002                OCPD1           EQU     $02
001C8C 0F9C8C -> $0001                OCPD0           EQU     $01
001C8C 0F9C8C -> $006E                PTPSR           EQU     $006E
001C8C 0F9C8C -> $006E                ECT_PTPSR       EQU     $006E
001C8C 0F9C8C -> $0080                PTPS7           EQU     $80
001C8C 0F9C8C -> $0040                PTPS6           EQU     $40
001C8C 0F9C8C -> $0020                PTPS5           EQU     $20
001C8C 0F9C8C -> $0010                PTPS4           EQU     $10
001C8C 0F9C8C -> $0008                PTPS3           EQU     $08
001C8C 0F9C8C -> $0004                PTPS2           EQU     $04
001C8C 0F9C8C -> $0002                PTPS1           EQU     $02
001C8C 0F9C8C -> $0001                PTPS0           EQU     $01
001C8C 0F9C8C -> $006F                PTMCPSR         EQU     $006F
001C8C 0F9C8C -> $006F                ECT_PTMCPSR             EQU     $006F
001C8C 0F9C8C -> $0001                PTMPS0          EQU     $01
001C8C 0F9C8C -> $0002                PTMPS1          EQU     $02
001C8C 0F9C8C -> $0004                PTMPS2          EQU     $04
001C8C 0F9C8C -> $0008                PTMPS3          EQU     $08
001C8C 0F9C8C -> $0010                PTMPS4          EQU     $10
001C8C 0F9C8C -> $0020                PTMPS5          EQU     $20
001C8C 0F9C8C -> $0040                PTMPS6          EQU     $40
001C8C 0F9C8C -> $0080                PTMPS7          EQU     $80
001C8C 0F9C8C -> $0070                PBCTL           EQU     $0070
001C8C 0F9C8C -> $0070                ECT_PBCTL       EQU     $0070
001C8C 0F9C8C -> $0040                PBEN            EQU     $40
001C8C 0F9C8C -> $0002                PBOVI           EQU     $02
001C8C 0F9C8C -> $0071                PBFLG           EQU     $00071
001C8C 0F9C8C -> $0071                ECT_PBFLG       EQU     $00071
001C8C 0F9C8C -> $0002                PBOVF           EQU     $02
001C8C 0F9C8C -> $0072                PA32H           EQU     $0072
001C8C 0F9C8C -> $0072                ECT_PA32H       EQU     $0072
001C8C 0F9C8C -> $0072                PA3H            EQU     $0072
001C8C 0F9C8C -> $0073                PA2H            EQU     $0073
001C8C 0F9C8C -> $0074                PA10H           EQU     $0074
001C8C 0F9C8C -> $0074                ECT_PA10H       EQU     $0074
001C8C 0F9C8C -> $0074                PA1H            EQU     $0074
001C8C 0F9C8C -> $0075                PA0H            EQU     $0075
001C8C 0F9C8C -> $0076                MCCNT           EQU     $0076
001C8C 0F9C8C -> $0076                ECT_MCCNT       EQU     $0076
001C8C 0F9C8C -> $0078                TC0H            EQU     $0078
001C8C 0F9C8C -> $0078                ECT_TC0H        EQU     $0078
001C8C 0F9C8C -> $007A                TC1H            EQU     $007A
001C8C 0F9C8C -> $007A                ECT_TC1H        EQU     $007A
001C8C 0F9C8C -> $007C                TC2H            EQU     $007C
001C8C 0F9C8C -> $007C                ECT_TC2H        EQU     $007C
001C8C 0F9C8C -> $007E                TC3H            EQU     $007E
001C8C 0F9C8C -> $007E                ECT_TC3H        EQU     $007E
001C8C 0F9C8C -> $0080                ATD1CTL0        EQU     $0080
001C8C 0F9C8C -> $0008                WRAP3           EQU     $08
001C8C 0F9C8C -> $0004                WRAP2           EQU     $04
001C8C 0F9C8C -> $0002                WRAP1           EQU     $02
001C8C 0F9C8C -> $0001                WRAP0           EQU     $01
001C8C 0F9C8C -> $0081                ATD1CTL1        EQU     $0081
001C8C 0F9C8C -> $0080                ETRIGSEL        EQU     $80
001C8C 0F9C8C -> $0040                SRES1           EQU     $40
001C8C 0F9C8C -> $0020                SRES0           EQU     $20
001C8C 0F9C8C -> $0010                DIS             EQU     $10
001C8C 0F9C8C -> $0008                ETRIGCH3        EQU     $08
001C8C 0F9C8C -> $0004                ETRIGCH2        EQU     $04
001C8C 0F9C8C -> $0002                ETRIGCH1        EQU     $02
001C8C 0F9C8C -> $0001                ETRIGCH0        EQU     $01
001C8C 0F9C8C -> $0082                ATD1CTL2        EQU     $0082
001C8C 0F9C8C -> $0040                AFFC            EQU     $40
001C8C 0F9C8C -> $0020                ICLKSTP         EQU     $20
001C8C 0F9C8C -> $0010                ETRIGLE         EQU     $10
001C8C 0F9C8C -> $0008                ETRIGP          EQU     $08
001C8C 0F9C8C -> $0004                ETRIGE          EQU     $04
001C8C 0F9C8C -> $0002                ASCIE           EQU     $02
001C8C 0F9C8C -> $0001                ASCIF           EQU     $01
001C8C 0F9C8C -> $0083                ATD1CTL3        EQU     $0083
001C8C 0F9C8C -> $0080                DJM             EQU     $80
001C8C 0F9C8C -> $0040                S8C             EQU     $40
001C8C 0F9C8C -> $0020                S4C             EQU     $20
001C8C 0F9C8C -> $0010                S2C             EQU     $10
001C8C 0F9C8C -> $0008                S1C             EQU     $08
001C8C 0F9C8C -> $0004                FIFO            EQU     $04
001C8C 0F9C8C -> $0002                FRZ1            EQU     $02
001C8C 0F9C8C -> $0001                FRZ0            EQU     $01
001C8C 0F9C8C -> $0084                ATD1CTL4        EQU     $0084
001C8C 0F9C8C -> $0080                SMP2            EQU     $80
001C8C 0F9C8C -> $0040                SMP1            EQU     $40
001C8C 0F9C8C -> $0020                SMP0            EQU     $20
001C8C 0F9C8C -> $0010                PRS4            EQU     $10
001C8C 0F9C8C -> $0008                PRS3            EQU     $08
001C8C 0F9C8C -> $0004                PRS2            EQU     $04
001C8C 0F9C8C -> $0002                PRS1            EQU     $02
001C8C 0F9C8C -> $0001                PRS0            EQU     $01
001C8C 0F9C8C -> $0085                ATD1CTL5        EQU     $0085
001C8C 0F9C8C -> $0040                SC              EQU     $40
001C8C 0F9C8C -> $0020                SCAN            EQU     $20
001C8C 0F9C8C -> $0010                MULT            EQU     $10
001C8C 0F9C8C -> $0008                CD              EQU     $08
001C8C 0F9C8C -> $0004                CC              EQU     $04
001C8C 0F9C8C -> $0002                CB              EQU     $02
001C8C 0F9C8C -> $0001                CA              EQU     $01
001C8C 0F9C8C -> $0086                ATD1STAT0       EQU     $0086
001C8C 0F9C8C -> $0080                SCF             EQU     $80
001C8C 0F9C8C -> $0020                ETORF           EQU     $20
001C8C 0F9C8C -> $0010                FIFOR           EQU     $10
001C8C 0F9C8C -> $0004                CC2             EQU     $04
001C8C 0F9C8C -> $0002                CC1             EQU     $02
001C8C 0F9C8C -> $0001                CC0             EQU     $01
001C8C 0F9C8C -> $0088                ATD1CMPEH       EQU     $0088
001C8C 0F9C8C -> $0080                CMPE15          EQU     $80
001C8C 0F9C8C -> $0040                CMPE14          EQU     $40
001C8C 0F9C8C -> $0020                CMPE13          EQU     $20
001C8C 0F9C8C -> $0010                CMPE12          EQU     $10
001C8C 0F9C8C -> $0008                CMPE11          EQU     $08
001C8C 0F9C8C -> $0004                CMPE10          EQU     $04
001C8C 0F9C8C -> $0002                CMPE9           EQU     $02
001C8C 0F9C8C -> $0001                CMPE8           EQU     $01
001C8C 0F9C8C -> $0089                ATD1CMPEL       EQU     $0089
001C8C 0F9C8C -> $0080                CMPE7           EQU     $80
001C8C 0F9C8C -> $0040                CMPE6           EQU     $40
001C8C 0F9C8C -> $0020                CMPE5           EQU     $20
001C8C 0F9C8C -> $0010                CMPE4           EQU     $10
001C8C 0F9C8C -> $0008                CMPE3           EQU     $08
001C8C 0F9C8C -> $0004                CMPE2           EQU     $04
001C8C 0F9C8C -> $0002                CMPE1           EQU     $02
001C8C 0F9C8C -> $0001                CMPE0           EQU     $01
001C8C 0F9C8C -> $008A                ATD1STAT2H      EQU     $008A
001C8C 0F9C8C -> $0080                CCF15           EQU     $80
001C8C 0F9C8C -> $0040                CCF14           EQU     $40
001C8C 0F9C8C -> $0020                CCF13           EQU     $20
001C8C 0F9C8C -> $0010                CCF12           EQU     $10
001C8C 0F9C8C -> $0008                CCF11           EQU     $08
001C8C 0F9C8C -> $0004                CCF10           EQU     $04
001C8C 0F9C8C -> $0002                CCF9            EQU     $02
001C8C 0F9C8C -> $0001                CCF8            EQU     $01
001C8C 0F9C8C -> $008B                ATD1STAT2L      EQU     $008B
001C8C 0F9C8C -> $0080                CCF7            EQU     $80
001C8C 0F9C8C -> $0040                CCF6            EQU     $40
001C8C 0F9C8C -> $0020                CCF5            EQU     $20
001C8C 0F9C8C -> $0010                CCF4            EQU     $10
001C8C 0F9C8C -> $0008                CCF3            EQU     $08
001C8C 0F9C8C -> $0004                CCF2            EQU     $04
001C8C 0F9C8C -> $0002                CCF1            EQU     $02
001C8C 0F9C8C -> $0001                CCF0            EQU     $01
001C8C 0F9C8C -> $008C                ATD1DIENH       EQU     $008C
001C8C 0F9C8C -> $0080                IEN15           EQU     $80
001C8C 0F9C8C -> $0040                IEN14           EQU     $40
001C8C 0F9C8C -> $0020                IEN13           EQU     $20
001C8C 0F9C8C -> $0010                IEN12           EQU     $10
001C8C 0F9C8C -> $0008                IEN11           EQU     $08
001C8C 0F9C8C -> $0004                IEN10           EQU     $04
001C8C 0F9C8C -> $0002                IEN9            EQU     $02
001C8C 0F9C8C -> $0001                IEN8            EQU     $01
001C8C 0F9C8C -> $008D                ATD1DIENL       EQU     $008D
001C8C 0F9C8C -> $0080                IEN7            EQU     $80
001C8C 0F9C8C -> $0040                IEN6            EQU     $40
001C8C 0F9C8C -> $0020                IEN5            EQU     $20
001C8C 0F9C8C -> $0010                IEN4            EQU     $10
001C8C 0F9C8C -> $0008                IEN3            EQU     $08
001C8C 0F9C8C -> $0004                IEN2            EQU     $04
001C8C 0F9C8C -> $0002                IEN1            EQU     $02
001C8C 0F9C8C -> $0001                IEN0            EQU     $01
001C8C 0F9C8C -> $008E                ATD1CMPHTH      EQU     $008E
001C8C 0F9C8C -> $0080                CMPHT15         EQU     $80
001C8C 0F9C8C -> $0040                CMPHT14         EQU     $40
001C8C 0F9C8C -> $0020                CMPHT13         EQU     $20
001C8C 0F9C8C -> $0010                CMPHT12         EQU     $10
001C8C 0F9C8C -> $0008                CMPHT11         EQU     $08
001C8C 0F9C8C -> $0004                CMPHT10         EQU     $04
001C8C 0F9C8C -> $0002                CMPHT9          EQU     $02
001C8C 0F9C8C -> $0001                CMPHT8          EQU     $01
001C8C 0F9C8C -> $008F                ATD1CMPHTL      EQU     $008F
001C8C 0F9C8C -> $0001                CMPHT0          EQU     $01
001C8C 0F9C8C -> $0002                CMPHT1          EQU     $02
001C8C 0F9C8C -> $0004                CMPHT2          EQU     $04
001C8C 0F9C8C -> $0008                CMPHT3          EQU     $08
001C8C 0F9C8C -> $0010                CMPHT4          EQU     $10
001C8C 0F9C8C -> $0020                CMPHT5          EQU     $20
001C8C 0F9C8C -> $0040                CMPHT6          EQU     $40
001C8C 0F9C8C -> $0080                CMPHT7          EQU     $80
001C8C 0F9C8C -> $0090                ATD1DR0         EQU     $0090
001C8C 0F9C8C -> $0090                ATD1DR0H        EQU     $0090
001C8C 0F9C8C -> $0091                ATD1DR0L        EQU     $0091
001C8C 0F9C8C -> $0092                ATD1DR1         EQU     $0092
001C8C 0F9C8C -> $0092                ATD1DR1H        EQU     $0092
001C8C 0F9C8C -> $0093                ATD1DR1L        EQU     $0093
001C8C 0F9C8C -> $0094                ATD1DR2         EQU     $0094
001C8C 0F9C8C -> $0094                ATD1DR2H        EQU     $0094
001C8C 0F9C8C -> $0095                ATD1DR2L        EQU     $0095
001C8C 0F9C8C -> $0096                ATD1DR3         EQU     $0096
001C8C 0F9C8C -> $0096                ATD1DR3H        EQU     $0096
001C8C 0F9C8C -> $0097                ATD1DR3L        EQU     $0097
001C8C 0F9C8C -> $0098                ATD1DR4         EQU     $0098
001C8C 0F9C8C -> $0098                ATD1DR4H        EQU     $0098
001C8C 0F9C8C -> $0099                ATD1DR4L        EQU     $0099
001C8C 0F9C8C -> $009A                ATD1DR5         EQU     $009A
001C8C 0F9C8C -> $009A                ATD1DR5H        EQU     $009A
001C8C 0F9C8C -> $009B                ATD1DR5L        EQU     $009B
001C8C 0F9C8C -> $009C                ATD1DR6         EQU     $009C
001C8C 0F9C8C -> $009C                ATD1DR6H        EQU     $009C
001C8C 0F9C8C -> $009D                ATD1DR6L        EQU     $009D
001C8C 0F9C8C -> $009E                ATD1DR7         EQU     $009E
001C8C 0F9C8C -> $009E                ATD1DR7H        EQU     $009E
001C8C 0F9C8C -> $009F                ATD1DR7L        EQU     $009F
001C8C 0F9C8C -> $00A0                ATD1DR8         EQU     $00A0
001C8C 0F9C8C -> $00A0                ATD1DR8H        EQU     $00A0
001C8C 0F9C8C -> $00A1                ATD1DR8L        EQU     $00A1
001C8C 0F9C8C -> $00A2                ATD1DR9         EQU     $00A2
001C8C 0F9C8C -> $00A2                ATD1DR9H        EQU     $00A2
001C8C 0F9C8C -> $00A3                ATD1DR9L        EQU     $00A3
001C8C 0F9C8C -> $00A3                ATD1DR10        EQU     $00A3
001C8C 0F9C8C -> $00A3                ATD1DR10H       EQU     $00A3
001C8C 0F9C8C -> $00A5                ATD1DR10L       EQU     $00A5
001C8C 0F9C8C -> $00A6                ATD1DR11        EQU     $00A6
001C8C 0F9C8C -> $00A6                ATD1DR11H       EQU     $00A6
001C8C 0F9C8C -> $00A7                ATD1DR11L       EQU     $00A7
001C8C 0F9C8C -> $00A8                ATD1DR12        EQU     $00A8
001C8C 0F9C8C -> $00A8                ATD1DR12H       EQU     $00A8
001C8C 0F9C8C -> $00A9                ATD1DR12L       EQU     $00A9
001C8C 0F9C8C -> $00AA                ATD1DR13        EQU     $00AA
001C8C 0F9C8C -> $00AA                ATD1DR13H       EQU     $00AA
001C8C 0F9C8C -> $00AB                ATD1DR13L       EQU     $00AB
001C8C 0F9C8C -> $00AC                ATD1DR14        EQU     $00AC
001C8C 0F9C8C -> $00AC                ATD1DR14H       EQU     $00AC
001C8C 0F9C8C -> $00AD                ATD1DR14L       EQU     $00AD
001C8C 0F9C8C -> $00AE                ATD1DR15        EQU     $00AE
001C8C 0F9C8C -> $00AE                ATD1DR15H       EQU     $00AE
001C8C 0F9C8C -> $00AF                ATD1DR15L       EQU     $00AF
001C8C 0F9C8C -> $00B0                I1BAD           EQU     $00B0
001C8C 0F9C8C -> $0080                ADR7            EQU     $80
001C8C 0F9C8C -> $0040                ADR6            EQU     $40
001C8C 0F9C8C -> $0020                ADR5            EQU     $20
001C8C 0F9C8C -> $0010                ADR4            EQU     $10
001C8C 0F9C8C -> $0008                ADR3            EQU     $08
001C8C 0F9C8C -> $0004                ADR2            EQU     $04
001C8C 0F9C8C -> $0002                ADR1            EQU     $02
001C8C 0F9C8C -> $00B1                I1BFD           EQU     $00B1
001C8C 0F9C8C -> $0080                IBC7            EQU     $80
001C8C 0F9C8C -> $0040                IBC6            EQU     $40
001C8C 0F9C8C -> $0020                IBC5            EQU     $20
001C8C 0F9C8C -> $0010                IBC4            EQU     $10
001C8C 0F9C8C -> $0008                IBC3            EQU     $08
001C8C 0F9C8C -> $0004                IBC2            EQU     $04
001C8C 0F9C8C -> $0002                IBC1            EQU     $02
001C8C 0F9C8C -> $0001                IBC0            EQU     $01
001C8C 0F9C8C -> $00B2                I1BCR           EQU     $00B2
001C8C 0F9C8C -> $0080                IBEN            EQU     $80
001C8C 0F9C8C -> $0040                IBIE            EQU     $40
001C8C 0F9C8C -> $0020                SL              EQU     $20
001C8C 0F9C8C -> $0010                RX              EQU     $10
001C8C 0F9C8C -> $0008                TXAK            EQU     $08
001C8C 0F9C8C -> $0004                RSTA            EQU     $04
001C8C 0F9C8C -> $0001                IBSWAI          EQU     $01
001C8C 0F9C8C -> $00B3                I1BSR           EQU     $00B3
001C8C 0F9C8C -> $0080                TCF             EQU     $80
001C8C 0F9C8C -> $0040                IAAS            EQU     $40
001C8C 0F9C8C -> $0020                IBB             EQU     $20
001C8C 0F9C8C -> $0001                RXAK            EQU     $01
001C8C 0F9C8C -> $0004                SRW             EQU     $04
001C8C 0F9C8C -> $0002                IBIF            EQU     $02
001C8C 0F9C8C -> $00B4                I1BDR           EQU     $00B4
001C8C 0F9C8C -> $00B5                I1BCR2          EQU     $00B5
001C8C 0F9C8C -> $0080                GCEN            EQU     $80
001C8C 0F9C8C -> $0040                ADTYPE          EQU     $40
001C8C 0F9C8C -> $0004                ADR2            EQU     $04
001C8C 0F9C8C -> $0002                ADR1            EQU     $02
001C8C 0F9C8C -> $0001                ADR0            EQU     $01
001C8C 0F9C8C -> $00B8                SCI2BDH         EQU     $00B8
001C8C 0F9C8C -> $0080                IREN            EQU     $80
001C8C 0F9C8C -> $0040                TNP1            EQU     $40
001C8C 0F9C8C -> $0020                TNP0            EQU     $20
001C8C 0F9C8C -> $0010                SBR12           EQU     $10
001C8C 0F9C8C -> $0008                SBR11           EQU     $08
001C8C 0F9C8C -> $0004                SBR10           EQU     $04
001C8C 0F9C8C -> $0002                SBR9            EQU     $02
001C8C 0F9C8C -> $0001                SBR8            EQU     $01
001C8C 0F9C8C -> $00B8                SCI2ASR1        EQU     $00B8
001C8C 0F9C8C -> $0080                RXEDGIF         EQU     $80
001C8C 0F9C8C -> $0004                BERRV           EQU     $04
001C8C 0F9C8C -> $0002                BERRIF          EQU     $02
001C8C 0F9C8C -> $0001                BKDIF           EQU     $01
001C8C 0F9C8C -> $00B9                SCI2BDL         EQU     $00B9
001C8C 0F9C8C -> $0080                SBR7            EQU     $80
001C8C 0F9C8C -> $0040                SBR6            EQU     $40
001C8C 0F9C8C -> $0020                SBR5            EQU     $20
001C8C 0F9C8C -> $0010                SBR4            EQU     $10
001C8C 0F9C8C -> $0008                SBR3            EQU     $08
001C8C 0F9C8C -> $0004                SBR2            EQU     $04
001C8C 0F9C8C -> $0002                SBR1            EQU     $02
001C8C 0F9C8C -> $0001                SBR0            EQU     $01
001C8C 0F9C8C -> $00B9                SCI2ACR1        EQU     $00B9
001C8C 0F9C8C -> $0080                RXEDGIE         EQU     $80
001C8C 0F9C8C -> $0002                BERRIE          EQU     $02
001C8C 0F9C8C -> $0001                BKDIE           EQU     $01
001C8C 0F9C8C -> $00BA                SCI2CR1         EQU     $00BA
001C8C 0F9C8C -> $0080                LOOPS           EQU     $80
001C8C 0F9C8C -> $0040                SCISWAI         EQU     $40
001C8C 0F9C8C -> $0020                RSRC            EQU     $20
001C8C 0F9C8C -> $0010                M               EQU     $10
001C8C 0F9C8C -> $0008                WAKE            EQU     $08
001C8C 0F9C8C -> $0004                ILT             EQU     $04
001C8C 0F9C8C -> $0002                PE              EQU     $02
001C8C 0F9C8C -> $0001                PT              EQU     $01
001C8C 0F9C8C -> $00BA                SCI2ACR2        EQU     $00BA
001C8C 0F9C8C -> $0004                BERRM1          EQU     $04
001C8C 0F9C8C -> $0002                BERRM0          EQU     $02
001C8C 0F9C8C -> $0001                BKDFE           EQU     $01
001C8C 0F9C8C -> $00BB                SCI2CR2         EQU     $00BB
001C8C 0F9C8C -> $0080                TXIE            EQU     $80
001C8C 0F9C8C -> $0040                TCIE            EQU     $40
001C8C 0F9C8C -> $0020                RIE             EQU     $20
001C8C 0F9C8C -> $0010                ILIE            EQU     $10
001C8C 0F9C8C -> $0008                TE              EQU     $08
001C8C 0F9C8C -> $0004                RE              EQU     $04
001C8C 0F9C8C -> $0002                RWU             EQU     $02
001C8C 0F9C8C -> $0001                SBK             EQU     $01
001C8C 0F9C8C -> $00BC                SCI2SR1         EQU     $00BC
001C8C 0F9C8C -> $0080                TDRE            EQU     $80
001C8C 0F9C8C -> $0040                TC              EQU     $40
001C8C 0F9C8C -> $0020                RDRFF           EQU     $20
001C8C 0F9C8C -> $0010                IDLE            EQU     $10
001C8C 0F9C8C -> $0008                OR              EQU     $08
001C8C 0F9C8C -> $0004                NF              EQU     $04
001C8C 0F9C8C -> $0002                FE              EQU     $02
001C8C 0F9C8C -> $0001                PF              EQU     $01
001C8C 0F9C8C -> $00BD                SCI2SR2         EQU     $00BD
001C8C 0F9C8C -> $0004                BRK13           EQU     $04
001C8C 0F9C8C -> $0002                TXDIR           EQU     $02
001C8C 0F9C8C -> $0001                RAF             EQU     $01
001C8C 0F9C8C -> $00BE                SCI2DRH         EQU     $00BE
001C8C 0F9C8C -> $0080                R8              EQU     $80
001C8C 0F9C8C -> $0040                T8              EQU     $40
001C8C 0F9C8C -> $00BF                SCI2DRL         EQU     $00BF
001C8C 0F9C8C -> $00C0                SCI3BDH         EQU     $00C0
001C8C 0F9C8C -> $00C0                SCI3ASR1        EQU     $00C0
001C8C 0F9C8C -> $00C1                SCI3BDL         EQU     $00C1
001C8C 0F9C8C -> $00C1                SCI3ACR1        EQU     $00C1
001C8C 0F9C8C -> $00C2                SCI3CR1         EQU     $00C2
001C8C 0F9C8C -> $00C2                SCI3ACR2        EQU     $00C2
001C8C 0F9C8C -> $00C3                SCI3CR2         EQU     $00C3
001C8C 0F9C8C -> $00C4                SCI3SR1         EQU     $00C4
001C8C 0F9C8C -> $00C5                SCI3SR2         EQU     $00C5
001C8C 0F9C8C -> $00C6                SCI3DRH         EQU     $00C6
001C8C 0F9C8C -> $00C7                SCI3DRL         EQU     $00C7
001C8C 0F9C8C -> $00C8                SCIBDH          EQU     $00C8
001C8C 0F9C8C -> $00C8                SCI0BDH         EQU     $00C8
001C8C 0F9C8C -> $00C9                SCI0ASR1        EQU     $00C9
001C8C 0F9C8C -> $00C9                SCIBDL          EQU     $00C9
001C8C 0F9C8C -> $00C9                SCI0BDL         EQU     $00C9
001C8C 0F9C8C -> $00C9                SCI0ACR1        EQU     $00C9
001C8C 0F9C8C -> $00CA                SCICR1          EQU     $00CA
001C8C 0F9C8C -> $00CA                SCI0CR1         EQU     $00CA
001C8C 0F9C8C -> $00CA                SCI0ACR2        EQU     $00CA
001C8C 0F9C8C -> $00CB                SCICR2          EQU     $00CB
001C8C 0F9C8C -> $00CB                SCI0CR2         EQU     $00CB
001C8C 0F9C8C -> $00CC                SCISR1          EQU     $00CC
001C8C 0F9C8C -> $00CC                SCI0SR1         EQU     $00CC
001C8C 0F9C8C -> $00CD                SCISR2          EQU     $00CD
001C8C 0F9C8C -> $00CD                SCI0SR2         EQU     $00CD
001C8C 0F9C8C -> $00CE                SCIDRH          EQU     $00CE
001C8C 0F9C8C -> $00CE                SCI0DRH         EQU     $00CE
001C8C 0F9C8C -> $00CF                SCIDRL          EQU     $00CF
001C8C 0F9C8C -> $00CF                SCI0DRL         EQU     $00CF
001C8C 0F9C8C -> $00D0                SCI1BDH         EQU     $00D0
001C8C 0F9C8C -> $00D0                SCI1ASR1        EQU     $00D0
001C8C 0F9C8C -> $00D1                SCI1BDL         EQU     $00D1
001C8C 0F9C8C -> $00D1                SCI1ACR1        EQU     $00D1
001C8C 0F9C8C -> $00D2                SCI1CR1         EQU     $00D2
001C8C 0F9C8C -> $00D2                SCI1ACR2        EQU     $00D2
001C8C 0F9C8C -> $00D3                SCI1CR2         EQU     $00D3
001C8C 0F9C8C -> $00D4                SCI1SR1         EQU     $00D4
001C8C 0F9C8C -> $00D5                SCI1SR2         EQU     $00D5
001C8C 0F9C8C -> $00D6                SCI1DRH         EQU     $00D6
001C8C 0F9C8C -> $00D7                SCI1DRL         EQU     $00D7
001C8C 0F9C8C -> $00D8                SPICR1          EQU     $00D8
001C8C 0F9C8C -> $00D8                SPI0CR1         EQU     $00D8
001C8C 0F9C8C -> $0080                SPIE            EQU     $80
001C8C 0F9C8C -> $0040                SPE             EQU     $40
001C8C 0F9C8C -> $0020                SPTIE           EQU     $20
001C8C 0F9C8C -> $0010                MSTR            EQU     $10
001C8C 0F9C8C -> $0008                CPOL            EQU     $08
001C8C 0F9C8C -> $0004                CPHA            EQU     $04
001C8C 0F9C8C -> $0002                SSOE            EQU     $02
001C8C 0F9C8C -> $0001                LSBFE           EQU     $01
001C8C 0F9C8C -> $00D9                SPICR2          EQU     $00D9
001C8C 0F9C8C -> $00D9                SPI0CR2         EQU     $00D9
001C8C 0F9C8C -> $0040                XFRW            EQU     $40
001C8C 0F9C8C -> $0010                MODFEN          EQU     $10
001C8C 0F9C8C -> $0008                BIDIROE         EQU     $08
001C8C 0F9C8C -> $0002                SPISWAI         EQU     $02
001C8C 0F9C8C -> $0001                SPC0            EQU     $01
001C8C 0F9C8C -> $00DA                SPIBR           EQU     $00DA
001C8C 0F9C8C -> $00DA                SPI0BR          EQU     $00DA
001C8C 0F9C8C -> $0040                SPPR2           EQU     $40
001C8C 0F9C8C -> $0020                SPPR1           EQU     $20
001C8C 0F9C8C -> $0010                SPPR0           EQU     $10
001C8C 0F9C8C -> $0004                SPR2            EQU     $04
001C8C 0F9C8C -> $0002                SPR1            EQU     $02
001C8C 0F9C8C -> $0001                SPR0            EQU     $01
001C8C 0F9C8C -> $00DB                SPISR           EQU     $00DB
001C8C 0F9C8C -> $00DB                SPI0SR          EQU     $00DB
001C8C 0F9C8C -> $0080                SPIF            EQU     $80
001C8C 0F9C8C -> $0020                SPTEF           EQU     $20
001C8C 0F9C8C -> $0010                MODF            EQU     $10
001C8C 0F9C8C -> $00DC                SPIDRH          EQU     $00DC
001C8C 0F9C8C -> $00DC                SPI0DRH         EQU     $00DC
001C8C 0F9C8C -> $00DD                SPIDRL          EQU     $00DD
001C8C 0F9C8C -> $00DD                SPI0DRL         EQU     $00DD
001C8C 0F9C8C -> $00E0                IBAD            EQU     $00E0
001C8C 0F9C8C -> $00E0                I0BAD           EQU     $00E0
001C8C 0F9C8C -> $00E1                IBFD            EQU     $00E1
001C8C 0F9C8C -> $00E1                I0BFD           EQU     $00E1
001C8C 0F9C8C -> $00E2                IBCR            EQU     $00E2
001C8C 0F9C8C -> $00E2                I0BCR           EQU     $00E2
001C8C 0F9C8C -> $00E3                IBSR            EQU     $00E3
001C8C 0F9C8C -> $00E3                I0BSR           EQU     $00E3
001C8C 0F9C8C -> $00E4                IBDR            EQU     $00E4
001C8C 0F9C8C -> $00E4                I0BDR           EQU     $00E4
001C8C 0F9C8C -> $00E5                IBCR2           EQU     $00E5
001C8C 0F9C8C -> $00E5                I0BCR2          EQU     $00E5
001C8C 0F9C8C -> $00F0                SPI1CR1         EQU     $00F0
001C8C 0F9C8C -> $00F1                SPI1CR2         EQU     $00F1
001C8C 0F9C8C -> $00F2                SPI1BR          EQU     $00F2
001C8C 0F9C8C -> $00F3                SPI1SR          EQU     $00F3
001C8C 0F9C8C -> $00F4                SPI1DRH         EQU     $00F4
001C8C 0F9C8C -> $00F5                SPI1DRL         EQU     $00F5
001C8C 0F9C8C -> $00F8                SPI2CR1         EQU     $00F8
001C8C 0F9C8C -> $00F9                SPI2CR2         EQU     $00F9
001C8C 0F9C8C -> $00FA                SPI2BR          EQU     $00FA
001C8C 0F9C8C -> $00FB                SPI2SR          EQU     $00FB
001C8C 0F9C8C -> $00FC                SPI2DRH         EQU     $00FC
001C8C 0F9C8C -> $00FD                SPI2DRL         EQU     $00FD
001C8C 0F9C8C -> $0100                FCLKDIV         EQU     $0100
001C8C 0F9C8C -> $0080                FDIVLD          EQU     $80
001C8C 0F9C8C -> $0040                FDIV6           EQU     $40
001C8C 0F9C8C -> $0020                FDIV5           EQU     $20
001C8C 0F9C8C -> $0010                FDIV4           EQU     $10
001C8C 0F9C8C -> $0008                FDIV3           EQU     $08
001C8C 0F9C8C -> $0004                FDIV2           EQU     $04
001C8C 0F9C8C -> $0002                FDIV1           EQU     $02
001C8C 0F9C8C -> $0001                FDIV0           EQU     $01
001C8C 0F9C8C -> $0101                FSEC            EQU     $0101
001C8C 0F9C8C -> $0080                KEYEN1          EQU     $80
001C8C 0F9C8C -> $0040                KEYEN2          EQU     $40
001C8C 0F9C8C -> $0020                RNV5            EQU     $20
001C8C 0F9C8C -> $0010                RNV4            EQU     $10
001C8C 0F9C8C -> $0008                RNV3            EQU     $08
001C8C 0F9C8C -> $0004                RNV2            EQU     $04
001C8C 0F9C8C -> $0002                SEC1            EQU     $02
001C8C 0F9C8C -> $0001                SEC0            EQU     $01
001C8C 0F9C8C -> $0102                FCCOBIX         EQU     $0102
001C8C 0F9C8C -> $0004                CCOBIX2         EQU     $04
001C8C 0F9C8C -> $0002                CCOBIX1         EQU     $02
001C8C 0F9C8C -> $0001                CCOBIX0         EQU     $01
001C8C 0F9C8C -> $0103                FECCRIX         EQU     $0103
001C8C 0F9C8C -> $0004                ECCRIX2         EQU     $04
001C8C 0F9C8C -> $0002                ECCRIX1         EQU     $02
001C8C 0F9C8C -> $0001                ECCRIX0         EQU     $01
001C8C 0F9C8C -> $0104                FCNFG           EQU     $0104
001C8C 0F9C8C -> $0080                CCIE            EQU     $80
001C8C 0F9C8C -> $0010                IGNSF           EQU     $10
001C8C 0F9C8C -> $0002                FDFD            EQU     $02
001C8C 0F9C8C -> $0001                FSFD            EQU     $01
001C8C 0F9C8C -> $0105                FERCNFG         EQU     $0105
001C8C 0F9C8C -> $0080                ERSERIE         EQU     $80
001C8C 0F9C8C -> $0040                PGMERIE         EQU     $40
001C8C 0F9C8C -> $0010                EPVIOLIE        EQU     $10
001C8C 0F9C8C -> $0008                ERSVIE1         EQU     $08
001C8C 0F9C8C -> $0004                ERSVIE0         EQU     $04
001C8C 0F9C8C -> $0002                DFDIE           EQU     $02
001C8C 0F9C8C -> $0001                SFDIE           EQU     $01
001C8C 0F9C8C -> $0106                FSTAT           EQU     $0106
001C8C 0F9C8C -> $0080                CCIF            EQU     $80
001C8C 0F9C8C -> $0020                ACCERR          EQU     $20
001C8C 0F9C8C -> $0010                FPVIOL          EQU     $10
001C8C 0F9C8C -> $0008                MGBUSY          EQU     $08
001C8C 0F9C8C -> $0002                MGSTAT1         EQU     $02
001C8C 0F9C8C -> $0001                MGSTAT0         EQU     $01
001C8C 0F9C8C -> $0107                FERSTAT         EQU     $0107
001C8C 0F9C8C -> $0080                ERSERIF         EQU     $80
001C8C 0F9C8C -> $0040                PGMERIF         EQU     $40
001C8C 0F9C8C -> $0010                EPVIOLIF        EQU     $10
001C8C 0F9C8C -> $0008                ERSVIF1         EQU     $08
001C8C 0F9C8C -> $0004                ERSVIF0         EQU     $04
001C8C 0F9C8C -> $0002                DFDIF           EQU     $02
001C8C 0F9C8C -> $0001                SFDIF           EQU     $01
001C8C 0F9C8C -> $0108                FPROT           EQU     $0108
001C8C 0F9C8C -> $0080                FPOPEN          EQU     $80
001C8C 0F9C8C -> $0040                RNV6            EQU     $40
001C8C 0F9C8C -> $0020                FPHDIS          EQU     $20
001C8C 0F9C8C -> $0010                FPHS1           EQU     $10
001C8C 0F9C8C -> $0008                FPHS0           EQU     $08
001C8C 0F9C8C -> $0004                FPLDIS          EQU     $04
001C8C 0F9C8C -> $0002                FPLS1           EQU     $02
001C8C 0F9C8C -> $0001                FPLS0           EQU     $01
001C8C 0F9C8C -> $0109                EPROT           EQU     $0109
001C8C 0F9C8C -> $0080                EPOPEN          EQU     $80
001C8C 0F9C8C -> $0040                RNV6            EQU     $40
001C8C 0F9C8C -> $0020                RNV5            EQU     $20
001C8C 0F9C8C -> $0010                RNV4            EQU     $10
001C8C 0F9C8C -> $0008                EPDIS           EQU     $08
001C8C 0F9C8C -> $0004                EPS2            EQU     $04
001C8C 0F9C8C -> $0002                EPS1            EQU     $02
001C8C 0F9C8C -> $0001                EPS0            EQU     $01
001C8C 0F9C8C -> $010A                FCCOB           EQU     $010A
001C8C 0F9C8C -> $010A                FCCOBHI         EQU     $010A
001C8C 0F9C8C -> $0080                CCOB15          EQU     $80
001C8C 0F9C8C -> $0040                CCOB14          EQU     $40
001C8C 0F9C8C -> $0020                CCOB13          EQU     $20
001C8C 0F9C8C -> $0010                CCOB12          EQU     $10
001C8C 0F9C8C -> $0008                CCOB11          EQU     $08
001C8C 0F9C8C -> $0004                CCOB10          EQU     $04
001C8C 0F9C8C -> $0002                CCOB9           EQU     $02
001C8C 0F9C8C -> $0001                CCOB8           EQU     $01
001C8C 0F9C8C -> $010B                FCCOBLO         EQU     $010B
001C8C 0F9C8C -> $0080                CCOB7           EQU     $80
001C8C 0F9C8C -> $0040                CCOB6           EQU     $40
001C8C 0F9C8C -> $0020                CCOB5           EQU     $20
001C8C 0F9C8C -> $0010                CCOB4           EQU     $10
001C8C 0F9C8C -> $0008                CCOB3           EQU     $08
001C8C 0F9C8C -> $0004                CCOB2           EQU     $04
001C8C 0F9C8C -> $0002                CCOB1           EQU     $02
001C8C 0F9C8C -> $0001                CCOB0           EQU     $01
001C8C 0F9C8C -> $010C                ETAGHI          EQU     $010C
001C8C 0F9C8C -> $010D                ETAGLO          EQU     $010D
001C8C 0F9C8C -> $010E                FECCRHI         EQU     $010E
001C8C 0F9C8C -> $010F                FECCRLO         EQU     $010F
001C8C 0F9C8C -> $0110                FOPT            EQU     $0110
001C8C 0F9C8C -> $0080                NV7             EQU     $80
001C8C 0F9C8C -> $0040                NV6             EQU     $40
001C8C 0F9C8C -> $0020                NV5             EQU     $20
001C8C 0F9C8C -> $0010                NV4             EQU     $10
001C8C 0F9C8C -> $0008                NV3             EQU     $08
001C8C 0F9C8C -> $0004                NV2             EQU     $04
001C8C 0F9C8C -> $0002                NV1             EQU     $02
001C8C 0F9C8C -> $0001                NV0             EQU     $01
001C8C 0F9C8C -> $0114                MPUFLG          EQU     $0114
001C8C 0F9C8C -> $0080                AEF             EQU     $80
001C8C 0F9C8C -> $0040                WPF             EQU     $40
001C8C 0F9C8C -> $0020                NEXF            EQU     $20
001C8C 0F9C8C -> $0001                SVSF            EQU     $01
001C8C 0F9C8C -> $0115                MPUASTAT0       EQU     $0115
001C8C 0F9C8C -> $0040                ADDR22          EQU     $40
001C8C 0F9C8C -> $0020                ADDR21          EQU     $20
001C8C 0F9C8C -> $0010                ADDR20          EQU     $10
001C8C 0F9C8C -> $0008                ADDR19          EQU     $08
001C8C 0F9C8C -> $0004                ADDR18          EQU     $04
001C8C 0F9C8C -> $0002                ADDR17          EQU     $02
001C8C 0F9C8C -> $0001                ADDR16          EQU     $01
001C8C 0F9C8C -> $0116                MPUASTAT1       EQU     $0116
001C8C 0F9C8C -> $0080                ADDR15          EQU     $80
001C8C 0F9C8C -> $0040                ADDR14          EQU     $40
001C8C 0F9C8C -> $0020                ADDR13          EQU     $20
001C8C 0F9C8C -> $0010                ADDR12          EQU     $10
001C8C 0F9C8C -> $0008                ADDR11          EQU     $08
001C8C 0F9C8C -> $0004                ADDR10          EQU     $04
001C8C 0F9C8C -> $0002                ADDR9           EQU     $02
001C8C 0F9C8C -> $0001                ADDR8           EQU     $01
001C8C 0F9C8C -> $0117                MPUASTAT2       EQU     $0117
001C8C 0F9C8C -> $0080                ADDR7           EQU     $80
001C8C 0F9C8C -> $0040                ADDR6           EQU     $40
001C8C 0F9C8C -> $0020                ADDR5           EQU     $20
001C8C 0F9C8C -> $0010                ADDR4           EQU     $10
001C8C 0F9C8C -> $0008                ADDR3           EQU     $08
001C8C 0F9C8C -> $0004                ADDR2           EQU     $04
001C8C 0F9C8C -> $0002                ADDR1           EQU     $02
001C8C 0F9C8C -> $0001                ADDR0           EQU     $01
001C8C 0F9C8C -> $0119                MPUSEL          EQU     $0119
001C8C 0F9C8C -> $0080                SVSEN           EQU     $80
001C8C 0F9C8C -> $0007                SEL             EQU     $07
001C8C 0F9C8C -> $011A                MPUDESC0        EQU     $011A
001C8C 0F9C8C -> $0080                MSTR0           EQU     $80
001C8C 0F9C8C -> $0040                MSTR1           EQU     $40
001C8C 0F9C8C -> $0020                MSTR2           EQU     $20
001C8C 0F9C8C -> $0010                MSTR3           EQU     $10
001C8C 0F9C8C -> $0008                LOW_ADDR22      EQU     $08
001C8C 0F9C8C -> $0004                LOW_ADDR21      EQU     $04
001C8C 0F9C8C -> $0002                LOW_ADDR20      EQU     $02
001C8C 0F9C8C -> $0001                LOW_ADDR19      EQU     $01
001C8C 0F9C8C -> $011B                MPUDESC1        EQU     $011B
001C8C 0F9C8C -> $0080                LOW_ADDR18      EQU     $80
001C8C 0F9C8C -> $0040                LOW_ADDR17      EQU     $40
001C8C 0F9C8C -> $0020                LOW_ADDR16      EQU     $20
001C8C 0F9C8C -> $0010                LOW_ADDR15      EQU     $10
001C8C 0F9C8C -> $0008                LOW_ADDR14      EQU     $08
001C8C 0F9C8C -> $0004                LOW_ADDR13      EQU     $04
001C8C 0F9C8C -> $0002                LOW_ADDR12      EQU     $02
001C8C 0F9C8C -> $0001                LOW_ADDR11      EQU     $01
001C8C 0F9C8C -> $011C                MPUDESC2        EQU     $011C
001C8C 0F9C8C -> $0080                LOW_ADDR10      EQU     $80
001C8C 0F9C8C -> $0040                LOW_ADDR9       EQU     $40
001C8C 0F9C8C -> $0020                LOW_ADDR8       EQU     $20
001C8C 0F9C8C -> $0010                LOW_ADDR7       EQU     $10
001C8C 0F9C8C -> $0008                LOW_ADDR6       EQU     $08
001C8C 0F9C8C -> $0004                LOW_ADDR5       EQU     $04
001C8C 0F9C8C -> $0002                LOW_ADDR4       EQU     $02
001C8C 0F9C8C -> $0001                LOW_ADDR3       EQU     $01
001C8C 0F9C8C -> $011D                MPUDESC3        EQU     $011D
001C8C 0F9C8C -> $0080                WP              EQU     $80
001C8C 0F9C8C -> $0040                NEX             EQU     $40
001C8C 0F9C8C -> $0008                HIGH_ADDR22     EQU     $08
001C8C 0F9C8C -> $0004                HIGH_ADDR21     EQU     $04
001C8C 0F9C8C -> $0002                HIGH_ADDR20     EQU     $02
001C8C 0F9C8C -> $0001                HIGH_ADDR19     EQU     $01
001C8C 0F9C8C -> $011E                MPUDESC4        EQU     $011E
001C8C 0F9C8C -> $0080                HIGH_ADDR18     EQU     $80
001C8C 0F9C8C -> $0040                HIGH_ADDR17     EQU     $40
001C8C 0F9C8C -> $0020                HIGH_ADDR16     EQU     $20
001C8C 0F9C8C -> $0010                HIGH_ADDR15     EQU     $10
001C8C 0F9C8C -> $0008                HIGH_ADDR14     EQU     $08
001C8C 0F9C8C -> $0004                HIGH_ADDR13     EQU     $04
001C8C 0F9C8C -> $0002                HIGH_ADDR12     EQU     $02
001C8C 0F9C8C -> $0001                HIGH_ADDR11     EQU     $01
001C8C 0F9C8C -> $011F                MPUDESC5        EQU     $011F
001C8C 0F9C8C -> $0080                HIGH_ADDR10     EQU     $80
001C8C 0F9C8C -> $0040                HIGH_ADDR9      EQU     $40
001C8C 0F9C8C -> $0020                HIGH_ADDR8      EQU     $20
001C8C 0F9C8C -> $0010                HIGH_ADDR7      EQU     $10
001C8C 0F9C8C -> $0008                HIGH_ADDR6      EQU     $08
001C8C 0F9C8C -> $0004                HIGH_ADDR5      EQU     $04
001C8C 0F9C8C -> $0002                HIGH_ADDR4      EQU     $02
001C8C 0F9C8C -> $0001                HIGH_ADDR3      EQU     $01
001C8C 0F9C8C -> $0121                IVBR            EQU     $0121
001C8C 0F9C8C -> $0126                XGPRIO          EQU     $0126
001C8C 0F9C8C -> $0007                XILVL           EQU     $07
001C8C 0F9C8C -> $0127                CFADDR          EQU     $0127
001C8C 0F9C8C -> $0128                CFDATA0         EQU     $0128
001C8C 0F9C8C -> $0129                CFDATA1         EQU     $0129
001C8C 0F9C8C -> $012A                CFDATA2         EQU     $012A
001C8C 0F9C8C -> $012B                CFDATA3         EQU     $012B
001C8C 0F9C8C -> $012C                CFDATA4         EQU     $012C
001C8C 0F9C8C -> $012D                CFDATA5         EQU     $012D
001C8C 0F9C8C -> $012E                CFDATA6         EQU     $012E
001C8C 0F9C8C -> $012F                CFDATA7         EQU     $012F
001C8C 0F9C8C -> $0080                RQST            EQU     $80
001C8C 0F9C8C -> $0007                PRIOLVL         EQU     $07
001C8C 0F9C8C -> $0130                SCI4BDH         EQU     $0130
001C8C 0F9C8C -> $0130                SCI4ASR1        EQU     $0130
001C8C 0F9C8C -> $0131                SCI4BDL         EQU     $0131
001C8C 0F9C8C -> $0131                SCI4ACR1        EQU     $0131
001C8C 0F9C8C -> $0132                SCI4CR1         EQU     $0132
001C8C 0F9C8C -> $0132                SCI4ACR2        EQU     $0132
001C8C 0F9C8C -> $0133                SCI4CR2         EQU     $0133
001C8C 0F9C8C -> $0134                SCI4SR1         EQU     $0134
001C8C 0F9C8C -> $0135                SCI4SR2         EQU     $0135
001C8C 0F9C8C -> $0136                SCI4DRH         EQU     $0136
001C8C 0F9C8C -> $0137                SCI4DRL         EQU     $0137
001C8C 0F9C8C -> $0138                SCI5BDH         EQU     $0138
001C8C 0F9C8C -> $0138                SCI5ASR1        EQU     $0138
001C8C 0F9C8C -> $0139                SCI5BDL         EQU     $0139
001C8C 0F9C8C -> $0139                SCI5ACR1        EQU     $0139
001C8C 0F9C8C -> $013A                SCI5CR1         EQU     $013A
001C8C 0F9C8C -> $013A                SCI5ACR2        EQU     $013A
001C8C 0F9C8C -> $013B                SCI5CR2         EQU     $013B
001C8C 0F9C8C -> $013C                SCI5SR1         EQU     $013C
001C8C 0F9C8C -> $013D                SCI5SR2         EQU     $013D
001C8C 0F9C8C -> $013E                SCI5DRH         EQU     $013E
001C8C 0F9C8C -> $013F                SCI5DRL         EQU     $013F
001C8C 0F9C8C -> $0140                CANCTL0         EQU     $0140
001C8C 0F9C8C -> $0140                CAN0CTL0        EQU     $0140
001C8C 0F9C8C -> $0080                RXFRM           EQU     $80
001C8C 0F9C8C -> $0040                RXACT           EQU     $40
001C8C 0F9C8C -> $0020                CSWAI           EQU     $20
001C8C 0F9C8C -> $0010                SYNCH           EQU     $10
001C8C 0F9C8C -> $0008                TIMEN           EQU     $08
001C8C 0F9C8C -> $0004                WUPE            EQU     $04
001C8C 0F9C8C -> $0002                SLPRQ           EQU     $02
001C8C 0F9C8C -> $0001                INITRQ          EQU     $01
001C8C 0F9C8C -> $0141                CANCTL1         EQU     $0141
001C8C 0F9C8C -> $0141                CAN0CTL1        EQU     $0141
001C8C 0F9C8C -> $0080                CANE            EQU     $80
001C8C 0F9C8C -> $0040                CLKSRC          EQU     $40
001C8C 0F9C8C -> $0020                LOOPB           EQU     $20
001C8C 0F9C8C -> $0010                LISTEN          EQU     $10
001C8C 0F9C8C -> $0004                WUPM            EQU     $04
001C8C 0F9C8C -> $0002                SLPAK           EQU     $02
001C8C 0F9C8C -> $0001                INITAK          EQU     $01
001C8C 0F9C8C -> $0142                CANBTR0         EQU     $0142
001C8C 0F9C8C -> $0142                CAN0BTR0        EQU     $0142
001C8C 0F9C8C -> $0080                SJW1            EQU     $80
001C8C 0F9C8C -> $0040                SJW0            EQU     $40
001C8C 0F9C8C -> $0020                BRP5            EQU     $20
001C8C 0F9C8C -> $0010                BRP4            EQU     $10
001C8C 0F9C8C -> $0008                BRP3            EQU     $08
001C8C 0F9C8C -> $0004                BRP2            EQU     $04
001C8C 0F9C8C -> $0002                BRP1            EQU     $02
001C8C 0F9C8C -> $0001                BRP0            EQU     $01
001C8C 0F9C8C -> $0143                CANBTR1         EQU     $0143
001C8C 0F9C8C -> $0143                CAN0BTR1        EQU     $0143
001C8C 0F9C8C -> $0080                SAMP            EQU     $80
001C8C 0F9C8C -> $0040                TSEG22          EQU     $40
001C8C 0F9C8C -> $0020                TSEG21          EQU     $20
001C8C 0F9C8C -> $0010                TSEG20          EQU     $10
001C8C 0F9C8C -> $0008                TSEG13          EQU     $08
001C8C 0F9C8C -> $0004                TSEG12          EQU     $04
001C8C 0F9C8C -> $0002                TSEG11          EQU     $02
001C8C 0F9C8C -> $0001                TESG10          EQU     $01
001C8C 0F9C8C -> $0144                CANRFLG         EQU     $0144
001C8C 0F9C8C -> $0144                CAN0RFLG        EQU     $0144
001C8C 0F9C8C -> $0080                WUPIF           EQU     $80
001C8C 0F9C8C -> $0040                CSCIF           EQU     $40
001C8C 0F9C8C -> $0020                RSTAT1          EQU     $20
001C8C 0F9C8C -> $0010                RSTAT0          EQU     $10
001C8C 0F9C8C -> $0008                TSTAT1          EQU     $08
001C8C 0F9C8C -> $0004                TSTAT0          EQU     $04
001C8C 0F9C8C -> $0002                OVRIF           EQU     $02
001C8C 0F9C8C -> $0001                RXF             EQU     $01
001C8C 0F9C8C -> $0145                CANRIER         EQU     $0145
001C8C 0F9C8C -> $0145                CAN0RIER        EQU     $0145
001C8C 0F9C8C -> $0080                WUPIE           EQU     $80
001C8C 0F9C8C -> $0040                CSCIE           EQU     $40
001C8C 0F9C8C -> $0020                RSTATE1         EQU     $20
001C8C 0F9C8C -> $0010                RSTATE0         EQU     $10
001C8C 0F9C8C -> $0008                TSTATE1         EQU     $08
001C8C 0F9C8C -> $0004                TSTATE0         EQU     $04
001C8C 0F9C8C -> $0002                OVRIE           EQU     $02
001C8C 0F9C8C -> $0001                RXFIE           EQU     $01
001C8C 0F9C8C -> $0146                CANTFLG         EQU     $0146
001C8C 0F9C8C -> $0146                CAN0TFLG        EQU     $0146
001C8C 0F9C8C -> $0004                TXE2            EQU     $04
001C8C 0F9C8C -> $0002                TXE1            EQU     $02
001C8C 0F9C8C -> $0001                TXE0            EQU     $01
001C8C 0F9C8C -> $0147                CANTIER         EQU     $0147
001C8C 0F9C8C -> $0147                CAN0TIER        EQU     $0147
001C8C 0F9C8C -> $0004                TXEIE2          EQU     $04
001C8C 0F9C8C -> $0002                TXEIE1          EQU     $02
001C8C 0F9C8C -> $0001                TXEIE0          EQU     $01
001C8C 0F9C8C -> $0148                CANTARQ         EQU     $0148
001C8C 0F9C8C -> $0148                CAN0TARQ        EQU     $0148
001C8C 0F9C8C -> $0004                ABTRQ2          EQU     $04
001C8C 0F9C8C -> $0002                ABTRQ1          EQU     $02
001C8C 0F9C8C -> $0001                ABTRQ0          EQU     $01
001C8C 0F9C8C -> $0149                CANTAAK         EQU     $0149
001C8C 0F9C8C -> $0149                CAN0TAAK        EQU     $0149
001C8C 0F9C8C -> $0004                ABTAK2          EQU     $04
001C8C 0F9C8C -> $0002                ABTAK1          EQU     $02
001C8C 0F9C8C -> $0001                ABTAK0          EQU     $01
001C8C 0F9C8C -> $014A                CANTBSEL        EQU     $014A
001C8C 0F9C8C -> $014A                CAN0TBSEL       EQU     $014A
001C8C 0F9C8C -> $0004                TX2             EQU     $04
001C8C 0F9C8C -> $0002                TX1             EQU     $02
001C8C 0F9C8C -> $0001                TX0             EQU     $01
001C8C 0F9C8C -> $014B                CANIDAC         EQU     $014B
001C8C 0F9C8C -> $014B                CAN0IDAC        EQU     $014B
001C8C 0F9C8C -> $0020                IDAM1           EQU     $20
001C8C 0F9C8C -> $0010                IDAM0           EQU     $10
001C8C 0F9C8C -> $0004                IDHIT2          EQU     $04
001C8C 0F9C8C -> $0002                IDHIT1          EQU     $02
001C8C 0F9C8C -> $0001                IDHIT0          EQU     $01
001C8C 0F9C8C -> $014D                CANMISC         EQU     $014D
001C8C 0F9C8C -> $014D                CAN0MISC        EQU     $014D
001C8C 0F9C8C -> $0001                BOHOLD          EQU     $01
001C8C 0F9C8C -> $014E                CANRXERR        EQU     $014E
001C8C 0F9C8C -> $014E                CAN0RXERR       EQU     $014E
001C8C 0F9C8C -> $014F                CANTXERR        EQU     $014F
001C8C 0F9C8C -> $014F                CAN0TXERR       EQU     $014F
001C8C 0F9C8C -> $0150                CANIDAR0        EQU     $0150
001C8C 0F9C8C -> $0150                CAN0IDAR0       EQU     $0150
001C8C 0F9C8C -> $0151                CANIDAR1        EQU     $0151
001C8C 0F9C8C -> $0151                CAN0IDAR1       EQU     $0151
001C8C 0F9C8C -> $0152                CANIDAR2        EQU     $0152
001C8C 0F9C8C -> $0152                CAN0IDAR2       EQU     $0152
001C8C 0F9C8C -> $0153                CANIDAR3        EQU     $0153
001C8C 0F9C8C -> $0153                CAN0IDAR3       EQU     $0153
001C8C 0F9C8C -> $0154                CANIDMR0        EQU     $0154
001C8C 0F9C8C -> $0154                CAN0IDMR0       EQU     $0154
001C8C 0F9C8C -> $0155                CANIDMR1        EQU     $0155
001C8C 0F9C8C -> $0155                CAN0IDMR1       EQU     $0155
001C8C 0F9C8C -> $0156                CANIDMR2        EQU     $0156
001C8C 0F9C8C -> $0156                CAN0IDMR2       EQU     $0156
001C8C 0F9C8C -> $0157                CANIDMR3        EQU     $0157
001C8C 0F9C8C -> $0157                CAN0IDMR3       EQU     $0157
001C8C 0F9C8C -> $0158                CANIDAR4        EQU     $0158
001C8C 0F9C8C -> $0158                CAN0IDAR4       EQU     $0158
001C8C 0F9C8C -> $0159                CANIDAR5        EQU     $0159
001C8C 0F9C8C -> $0159                CAN0IDAR5       EQU     $0159
001C8C 0F9C8C -> $015A                CANIDAR6        EQU     $015A
001C8C 0F9C8C -> $015A                CAN0IDAR6       EQU     $015A
001C8C 0F9C8C -> $015B                CANIDAR7        EQU     $015B
001C8C 0F9C8C -> $015B                CAN0IDAR7       EQU     $015B
001C8C 0F9C8C -> $015C                CANIDMR4        EQU     $015C
001C8C 0F9C8C -> $015C                CAN0IDMR4       EQU     $015C
001C8C 0F9C8C -> $015D                CANIDMR5        EQU     $015D
001C8C 0F9C8C -> $015D                CAN0IDMR5       EQU     $015D
001C8C 0F9C8C -> $015E                CANIDMR6        EQU     $015E
001C8C 0F9C8C -> $015E                CAN0IDMR6       EQU     $015E
001C8C 0F9C8C -> $015F                CANIDMR7        EQU     $015F
001C8C 0F9C8C -> $015F                CAN0IDMR7       EQU     $015F
001C8C 0F9C8C -> $0160                CANRXIDR0       EQU     $0160
001C8C 0F9C8C -> $0160                CAN0RXIDR0      EQU     $0160
001C8C 0F9C8C -> $0161                CANRXIDR1       EQU     $0161
001C8C 0F9C8C -> $0161                CAN0RXIDR1      EQU     $0161
001C8C 0F9C8C -> $0162                CANRXIDR2       EQU     $0162
001C8C 0F9C8C -> $0162                CAN0RXIDR2      EQU     $0162
001C8C 0F9C8C -> $0163                CANRXIDR3       EQU     $0163
001C8C 0F9C8C -> $0163                CAN0RXIDR3      EQU     $0163
001C8C 0F9C8C -> $0164                CANRXDSR0       EQU     $0164
001C8C 0F9C8C -> $0164                CAN0RXDSR0      EQU     $0164
001C8C 0F9C8C -> $0165                CANRXDSR1       EQU     $0165
001C8C 0F9C8C -> $0165                CAN0RXDSR1      EQU     $0165
001C8C 0F9C8C -> $0166                CANRXDSR2       EQU     $0166
001C8C 0F9C8C -> $0166                CAN0RXDSR2      EQU     $0166
001C8C 0F9C8C -> $0167                CANRXDSR3       EQU     $0167
001C8C 0F9C8C -> $0167                CAN0RXDSR3      EQU     $0167
001C8C 0F9C8C -> $0168                CANRXDSR4       EQU     $0168
001C8C 0F9C8C -> $0168                CAN0RXDSR4      EQU     $0168
001C8C 0F9C8C -> $0169                CANRXDSR5       EQU     $0169
001C8C 0F9C8C -> $0169                CAN0RXDSR5      EQU     $0169
001C8C 0F9C8C -> $016A                CANRXDSR6       EQU     $016A
001C8C 0F9C8C -> $016A                CAN0RXDSR6      EQU     $016A
001C8C 0F9C8C -> $016B                CANRXDSR7       EQU     $016B
001C8C 0F9C8C -> $016B                CAN0RXDSR7      EQU     $016B
001C8C 0F9C8C -> $016C                CANRXDLR        EQU     $016C
001C8C 0F9C8C -> $016C                CAN0RXDLR       EQU     $016C
001C8C 0F9C8C -> $016E                CANRTSRH        EQU     $016E
001C8C 0F9C8C -> $016E                CAN0RTSRH       EQU     $016E
001C8C 0F9C8C -> $016F                CANRTSRL        EQU     $016F
001C8C 0F9C8C -> $016F                CAN0RTSRL       EQU     $016F
001C8C 0F9C8C -> $0170                CANTXIDR0       EQU     $0170
001C8C 0F9C8C -> $0170                CAN0TXIDR0      EQU     $0170
001C8C 0F9C8C -> $0171                CANTXIDR1       EQU     $0171
001C8C 0F9C8C -> $0171                CAN0TXIDR1      EQU     $0171
001C8C 0F9C8C -> $0172                CANTXIDR2       EQU     $0172
001C8C 0F9C8C -> $0172                CAN0TXIDR2      EQU     $0172
001C8C 0F9C8C -> $0172                CANTXIDR2       EQU     $0172
001C8C 0F9C8C -> $0172                CAN0TXIDR2      EQU     $0172
001C8C 0F9C8C -> $0173                CANTXIDR3       EQU     $0173
001C8C 0F9C8C -> $0173                CAN0TXIDR3      EQU     $0173
001C8C 0F9C8C -> $0174                CANTXDSR0       EQU     $0174
001C8C 0F9C8C -> $0174                CAN0TXDSR0      EQU     $0174
001C8C 0F9C8C -> $0175                CANTXDSR1       EQU     $0175
001C8C 0F9C8C -> $0175                CAN0TXDSR1      EQU     $0175
001C8C 0F9C8C -> $0176                CANTXDSR2       EQU     $0176
001C8C 0F9C8C -> $0176                CAN0TXDSR2      EQU     $0176
001C8C 0F9C8C -> $0177                CANTXDSR3       EQU     $0177
001C8C 0F9C8C -> $0177                CAN0TXDSR3      EQU     $0177
001C8C 0F9C8C -> $0178                CANTXDSR4       EQU     $0178
001C8C 0F9C8C -> $0178                CAN0TXDSR4      EQU     $0178
001C8C 0F9C8C -> $0179                CANTXDSR5       EQU     $0179
001C8C 0F9C8C -> $0179                CAN0TXDSR5      EQU     $0179
001C8C 0F9C8C -> $017A                CANTXDSR6       EQU     $017A
001C8C 0F9C8C -> $017A                CAN0TXDSR6      EQU     $017A
001C8C 0F9C8C -> $017B                CANTXDSR7       EQU     $017B
001C8C 0F9C8C -> $017B                CAN0TXDSR7      EQU     $017B
001C8C 0F9C8C -> $017C                CANTXDLR        EQU     $017C
001C8C 0F9C8C -> $017C                CAN0TXDLR       EQU     $017C
001C8C 0F9C8C -> $017D                CANTXTBPR       EQU     $017D
001C8C 0F9C8C -> $017D                CAN0TXTBPR      EQU     $017D
001C8C 0F9C8C -> $017E                CANTXTSRH       EQU     $017E
001C8C 0F9C8C -> $017E                CAN0TXTSRH      EQU     $017E
001C8C 0F9C8C -> $017F                CANTXTSRL       EQU     $017F
001C8C 0F9C8C -> $017F                CAN0TXTSRL      EQU     $017F
001C8C 0F9C8C -> $0180                CAN1CTL0        EQU     $0180
001C8C 0F9C8C -> $0181                CAN1CTL1        EQU     $0181
001C8C 0F9C8C -> $0182                CAN1BTR0        EQU     $0182
001C8C 0F9C8C -> $0183                CAN1BTR1        EQU     $0183
001C8C 0F9C8C -> $0184                CAN1RFLG        EQU     $0184
001C8C 0F9C8C -> $0185                CAN1RIER        EQU     $0185
001C8C 0F9C8C -> $0186                CAN1TFLG        EQU     $0186
001C8C 0F9C8C -> $0187                CAN1TIER        EQU     $0187
001C8C 0F9C8C -> $0188                CAN1TARQ        EQU     $0188
001C8C 0F9C8C -> $0189                CAN1TAAK        EQU     $0189
001C8C 0F9C8C -> $018A                CAN1TBSEL       EQU     $018A
001C8C 0F9C8C -> $018B                CAN1IDAC        EQU     $018B
001C8C 0F9C8C -> $018D                CAN1MISC        EQU     $018D
001C8C 0F9C8C -> $018E                CAN1RXERR       EQU     $018E
001C8C 0F9C8C -> $018F                CAN1TXERR       EQU     $018F
001C8C 0F9C8C -> $0190                CAN1IDAR0       EQU     $0190
001C8C 0F9C8C -> $0191                CAN1IDAR1       EQU     $0191
001C8C 0F9C8C -> $0192                CAN1IDAR2       EQU     $0192
001C8C 0F9C8C -> $0193                CAN1IDAR3       EQU     $0193
001C8C 0F9C8C -> $0194                CAN1IDMR0       EQU     $0194
001C8C 0F9C8C -> $0195                CAN1IDMR1       EQU     $0195
001C8C 0F9C8C -> $0196                CAN1IDMR2       EQU     $0196
001C8C 0F9C8C -> $0197                CAN1IDMR3       EQU     $0197
001C8C 0F9C8C -> $0198                CAN1IDAR4       EQU     $0198
001C8C 0F9C8C -> $0199                CAN1IDAR5       EQU     $0199
001C8C 0F9C8C -> $019A                CAN1IDAR6       EQU     $019A
001C8C 0F9C8C -> $019B                CAN1IDAR7       EQU     $019B
001C8C 0F9C8C -> $019C                CAN1IDMR4       EQU     $019C
001C8C 0F9C8C -> $019D                CAN1IDMR5       EQU     $019D
001C8C 0F9C8C -> $019E                CAN1IDMR6       EQU     $019E
001C8C 0F9C8C -> $019F                CAN1IDMR7       EQU     $019F
001C8C 0F9C8C -> $01A0                CAN1RXIDR0      EQU     $01A0
001C8C 0F9C8C -> $01A1                CAN1RXIDR1      EQU     $01A1
001C8C 0F9C8C -> $01A2                CAN1RXIDR2      EQU     $01A2
001C8C 0F9C8C -> $01A3                CAN1RXIDR3      EQU     $01A3
001C8C 0F9C8C -> $01A4                CAN1RXDSR0      EQU     $01A4
001C8C 0F9C8C -> $01A5                CAN1RXDSR1      EQU     $01A5
001C8C 0F9C8C -> $01A6                CAN1RXDSR2      EQU     $01A6
001C8C 0F9C8C -> $01A7                CAN1RXDSR3      EQU     $01A7
001C8C 0F9C8C -> $01A8                CAN1RXDSR4      EQU     $01A8
001C8C 0F9C8C -> $01A9                CAN1RXDSR5      EQU     $01A9
001C8C 0F9C8C -> $01AA                CAN1RXDSR6      EQU     $01AA
001C8C 0F9C8C -> $01AB                CAN1RXDSR7      EQU     $01AB
001C8C 0F9C8C -> $01AC                CAN1RXDLR       EQU     $01AC
001C8C 0F9C8C -> $01AE                CAN1RTSRH       EQU     $01AE
001C8C 0F9C8C -> $01AF                CAN1RTSRL       EQU     $01AF
001C8C 0F9C8C -> $01B0                CAN1TXIDR0      EQU     $01B0
001C8C 0F9C8C -> $01B1                CAN1TXIDR1      EQU     $01B1
001C8C 0F9C8C -> $01B2                CAN1TXIDR2      EQU     $01B2
001C8C 0F9C8C -> $01B2                CAN1TXIDR2      EQU     $01B2
001C8C 0F9C8C -> $01B3                CAN1TXIDR3      EQU     $01B3
001C8C 0F9C8C -> $01B4                CAN1TXDSR0      EQU     $01B4
001C8C 0F9C8C -> $01B5                CAN1TXDSR1      EQU     $01B5
001C8C 0F9C8C -> $01B6                CAN1TXDSR2      EQU     $01B6
001C8C 0F9C8C -> $01B7                CAN1XDSR3       EQU     $01B7
001C8C 0F9C8C -> $01B7                CAN1TXDSR3      EQU     $01B7
001C8C 0F9C8C -> $01B8                CAN1TXDSR4      EQU     $01B8
001C8C 0F9C8C -> $01B9                CAN1TXDSR5      EQU     $01B9
001C8C 0F9C8C -> $01BA                CAN1TXDSR6      EQU     $01BA
001C8C 0F9C8C -> $01BB                CAN1TXDSR7      EQU     $01BB
001C8C 0F9C8C -> $01BC                CAN1TXDLR       EQU     $01BC
001C8C 0F9C8C -> $01BD                CAN1TXTBPR      EQU     $01BD
001C8C 0F9C8C -> $01BE                CAN1TXTSRH      EQU     $01BE
001C8C 0F9C8C -> $01BF                CAN1TXTSRL      EQU     $01BF
001C8C 0F9C8C -> $01C0                CAN2CTL0        EQU     $01C0
001C8C 0F9C8C -> $01C1                CAN2CTL1        EQU     $01C1
001C8C 0F9C8C -> $01C2                CAN2BTR0        EQU     $01C2
001C8C 0F9C8C -> $01C3                CAN2BTR1        EQU     $01C3
001C8C 0F9C8C -> $01C4                CAN2RFLG        EQU     $01C4
001C8C 0F9C8C -> $01C5                CAN2RIER        EQU     $01C5
001C8C 0F9C8C -> $01C6                CAN2TFLG        EQU     $01C6
001C8C 0F9C8C -> $01C7                CAN2TIER        EQU     $01C7
001C8C 0F9C8C -> $01C8                CAN2TARQ        EQU     $01C8
001C8C 0F9C8C -> $01C9                CAN2TAAK        EQU     $01C9
001C8C 0F9C8C -> $01CA                CAN2TBSEL       EQU     $01CA
001C8C 0F9C8C -> $01CB                CAN2IDAC        EQU     $01CB
001C8C 0F9C8C -> $01CD                CAN2MISC        EQU     $01CD
001C8C 0F9C8C -> $01CE                CAN2RXERR       EQU     $01CE
001C8C 0F9C8C -> $01CF                CAN2TXERR       EQU     $01CF
001C8C 0F9C8C -> $01D0                CAN2IDAR0       EQU     $01D0
001C8C 0F9C8C -> $01D1                CAN2IDAR1       EQU     $01D1
001C8C 0F9C8C -> $01D2                CAN2IDAR2       EQU     $01D2
001C8C 0F9C8C -> $01D3                CAN2IDAR3       EQU     $01D3
001C8C 0F9C8C -> $01D4                CAN2IDMR0       EQU     $01D4
001C8C 0F9C8C -> $01D5                CAN2IDMR1       EQU     $01D5
001C8C 0F9C8C -> $01D6                CAN2IDMR2       EQU     $01D6
001C8C 0F9C8C -> $01D7                CAN2IDMR3       EQU     $01D7
001C8C 0F9C8C -> $01D8                CAN2IDAR4       EQU     $01D8
001C8C 0F9C8C -> $01D9                CAN2IDAR5       EQU     $01D9
001C8C 0F9C8C -> $01DA                CAN2IDAR6       EQU     $01DA
001C8C 0F9C8C -> $01DB                CAN2IDAR7       EQU     $01DB
001C8C 0F9C8C -> $01DC                CAN2IDMR4       EQU     $01DC
001C8C 0F9C8C -> $01DD                CAN2IDMR5       EQU     $01DD
001C8C 0F9C8C -> $01DE                CAN2IDMR6       EQU     $01DE
001C8C 0F9C8C -> $01DF                CAN2IDMR7       EQU     $01DF
001C8C 0F9C8C -> $01E0                CAN2RXIDR0      EQU     $01E0
001C8C 0F9C8C -> $01E1                CAN2RXIDR1      EQU     $01E1
001C8C 0F9C8C -> $01E2                CAN2RXIDR2      EQU     $01E2
001C8C 0F9C8C -> $01E3                CAN2RXIDR3      EQU     $01E3
001C8C 0F9C8C -> $01E4                CAN2RXDSR0      EQU     $01E4
001C8C 0F9C8C -> $01E5                CAN2RXDSR1      EQU     $01E5
001C8C 0F9C8C -> $01E6                CAN2RXDSR2      EQU     $01E6
001C8C 0F9C8C -> $01E7                CAN2RXDSR3      EQU     $01E7
001C8C 0F9C8C -> $01E8                CAN2RXDSR4      EQU     $01E8
001C8C 0F9C8C -> $01E9                CAN2RXDSR5      EQU     $01E9
001C8C 0F9C8C -> $01EA                CAN2RXDSR6      EQU     $01EA
001C8C 0F9C8C -> $01EB                CAN2RXDSR7      EQU     $01EB
001C8C 0F9C8C -> $01EC                CAN2RXDLR       EQU     $01EC
001C8C 0F9C8C -> $01EE                CAN2RTSRH       EQU     $01EE
001C8C 0F9C8C -> $01EF                CAN2RTSRL       EQU     $01EF
001C8C 0F9C8C -> $01F0                CAN2TXIDR0      EQU     $01F0
001C8C 0F9C8C -> $01F1                CAN2TXIDR1      EQU     $01F1
001C8C 0F9C8C -> $01F2                CAN2TXIDR2      EQU     $01F2
001C8C 0F9C8C -> $01F2                CAN2TXIDR2      EQU     $01F2
001C8C 0F9C8C -> $01F3                CAN2TXIDR3      EQU     $01F3
001C8C 0F9C8C -> $01F4                CAN2TXDSR0      EQU     $01F4
001C8C 0F9C8C -> $01F5                CAN2TXDSR1      EQU     $01F5
001C8C 0F9C8C -> $01F6                CAN2TXDSR2      EQU     $01F6
001C8C 0F9C8C -> $01F7                CAN2XDSR3       EQU     $01F7
001C8C 0F9C8C -> $01F7                CAN2TXDSR3      EQU     $01F7
001C8C 0F9C8C -> $01F8                CAN2TXDSR4      EQU     $01F8
001C8C 0F9C8C -> $01F9                CAN2TXDSR5      EQU     $01F9
001C8C 0F9C8C -> $01FA                CAN2TXDSR6      EQU     $01FA
001C8C 0F9C8C -> $01FB                CAN2TXDSR7      EQU     $01FB
001C8C 0F9C8C -> $01FC                CAN2TXDLR       EQU     $01FC
001C8C 0F9C8C -> $01FD                CAN2TXTBPR      EQU     $01FD
001C8C 0F9C8C -> $01FE                CAN2TXTSRH      EQU     $01FE
001C8C 0F9C8C -> $01FF                CAN2TXTSRL      EQU     $01FF
001C8C 0F9C8C -> $0200                CAN3CTL0        EQU     $0200
001C8C 0F9C8C -> $0201                CAN3CTL1        EQU     $0201
001C8C 0F9C8C -> $0202                CAN3BTR0        EQU     $0202
001C8C 0F9C8C -> $0203                CAN3BTR1        EQU     $0203
001C8C 0F9C8C -> $0204                CAN3RFLG        EQU     $0204
001C8C 0F9C8C -> $0205                CAN3RIER        EQU     $0205
001C8C 0F9C8C -> $0206                CAN3TFLG        EQU     $0206
001C8C 0F9C8C -> $0207                CAN3TIER        EQU     $0207
001C8C 0F9C8C -> $0208                CAN3TARQ        EQU     $0208
001C8C 0F9C8C -> $0209                CAN3TAAK        EQU     $0209
001C8C 0F9C8C -> $020A                CAN3TBSEL       EQU     $020A
001C8C 0F9C8C -> $020B                CAN3IDAC        EQU     $020B
001C8C 0F9C8C -> $020D                CAN3MISC        EQU     $020D
001C8C 0F9C8C -> $020E                CAN3RXERR       EQU     $020E
001C8C 0F9C8C -> $020F                CAN3TXERR       EQU     $020F
001C8C 0F9C8C -> $0210                CAN3IDAR0       EQU     $0210
001C8C 0F9C8C -> $0211                CAN3IDAR1       EQU     $0211
001C8C 0F9C8C -> $0212                CAN3IDAR2       EQU     $0212
001C8C 0F9C8C -> $0213                CAN3IDAR3       EQU     $0213
001C8C 0F9C8C -> $0214                CAN3IDMR0       EQU     $0214
001C8C 0F9C8C -> $0215                CAN3IDMR1       EQU     $0215
001C8C 0F9C8C -> $0216                CAN3IDMR2       EQU     $0216
001C8C 0F9C8C -> $0217                CAN3IDMR3       EQU     $0217
001C8C 0F9C8C -> $0218                CAN3IDAR4       EQU     $0218
001C8C 0F9C8C -> $0219                CAN3IDAR5       EQU     $0219
001C8C 0F9C8C -> $021A                CAN3IDAR6       EQU     $021A
001C8C 0F9C8C -> $021B                CAN3IDAR7       EQU     $021B
001C8C 0F9C8C -> $021C                CAN3IDMR4       EQU     $021C
001C8C 0F9C8C -> $021D                CAN3IDMR5       EQU     $021D
001C8C 0F9C8C -> $021E                CAN3IDMR6       EQU     $021E
001C8C 0F9C8C -> $021F                CAN3IDMR7       EQU     $021F
001C8C 0F9C8C -> $0220                CAN3RXIDR0      EQU     $0220
001C8C 0F9C8C -> $0221                CAN3RXIDR1      EQU     $0221
001C8C 0F9C8C -> $0222                CAN3RXIDR2      EQU     $0222
001C8C 0F9C8C -> $0223                CAN3RXIDR3      EQU     $0223
001C8C 0F9C8C -> $0224                CAN3RXDSR0      EQU     $0224
001C8C 0F9C8C -> $0225                CAN3RXDSR1      EQU     $0225
001C8C 0F9C8C -> $0226                CAN3RXDSR2      EQU     $0226
001C8C 0F9C8C -> $0227                CAN3RXDSR3      EQU     $0227
001C8C 0F9C8C -> $0228                CAN3RXDSR4      EQU     $0228
001C8C 0F9C8C -> $0229                CAN3RXDSR5      EQU     $0229
001C8C 0F9C8C -> $022A                CAN3RXDSR6      EQU     $022A
001C8C 0F9C8C -> $022B                CAN3RXDSR7      EQU     $022B
001C8C 0F9C8C -> $022C                CAN3RXDLR       EQU     $022C
001C8C 0F9C8C -> $022E                CAN3RTSRH       EQU     $022E
001C8C 0F9C8C -> $022F                CAN3RTSRL       EQU     $022F
001C8C 0F9C8C -> $0230                CAN3TXIDR0      EQU     $0230
001C8C 0F9C8C -> $0231                CAN3TXIDR1      EQU     $0231
001C8C 0F9C8C -> $0232                CAN3TXIDR2      EQU     $0232
001C8C 0F9C8C -> $0232                CAN3TXIDR2      EQU     $0232
001C8C 0F9C8C -> $0233                CAN3TXIDR3      EQU     $0233
001C8C 0F9C8C -> $0234                CAN3TXDSR0      EQU     $0234
001C8C 0F9C8C -> $0235                CAN3TXDSR1      EQU     $0235
001C8C 0F9C8C -> $0236                CAN3TXDSR2      EQU     $0236
001C8C 0F9C8C -> $0237                CAN3XDSR3       EQU     $0237
001C8C 0F9C8C -> $0237                CAN3TXDSR3      EQU     $0237
001C8C 0F9C8C -> $0238                CAN3TXDSR4      EQU     $0238
001C8C 0F9C8C -> $0239                CAN3TXDSR5      EQU     $0239
001C8C 0F9C8C -> $023A                CAN3TXDSR6      EQU     $023A
001C8C 0F9C8C -> $023B                CAN3TXDSR7      EQU     $023B
001C8C 0F9C8C -> $023C                CAN3TXDLR       EQU     $023C
001C8C 0F9C8C -> $023D                CAN3TXTBPR      EQU     $023D
001C8C 0F9C8C -> $023E                CAN3TXTSRH      EQU     $023E
001C8C 0F9C8C -> $023F                CAN3TXTSRL      EQU     $023F
001C8C 0F9C8C -> $0240                PTT             EQU     $0240
001C8C 0F9C8C -> $0080                PTT7            EQU     $80
001C8C 0F9C8C -> $0040                PTT6            EQU     $40
001C8C 0F9C8C -> $0020                PTT5            EQU     $20
001C8C 0F9C8C -> $0010                PTT4            EQU     $10
001C8C 0F9C8C -> $0008                PTT3            EQU     $08
001C8C 0F9C8C -> $0004                PTT2            EQU     $04
001C8C 0F9C8C -> $0002                PTT1            EQU     $02
001C8C 0F9C8C -> $0001                PTT0            EQU     $01
001C8C 0F9C8C -> $0080                PT7             EQU     $80
001C8C 0F9C8C -> $0040                PT6             EQU     $40
001C8C 0F9C8C -> $0020                PT5             EQU     $20
001C8C 0F9C8C -> $0010                PT4             EQU     $10
001C8C 0F9C8C -> $0008                PT3             EQU     $08
001C8C 0F9C8C -> $0004                PT2             EQU     $04
001C8C 0F9C8C -> $0002                PT1             EQU     $02
001C8C 0F9C8C -> $0001                PT0             EQU     $01
001C8C 0F9C8C -> $0241                PTIT            EQU     $0241
001C8C 0F9C8C -> $0080                PTIT7           EQU     $80
001C8C 0F9C8C -> $0040                PTIT6           EQU     $40
001C8C 0F9C8C -> $0020                PTIT5           EQU     $20
001C8C 0F9C8C -> $0010                PTIT4           EQU     $10
001C8C 0F9C8C -> $0008                PTIT3           EQU     $08
001C8C 0F9C8C -> $0004                PTIT2           EQU     $04
001C8C 0F9C8C -> $0002                PTIT1           EQU     $02
001C8C 0F9C8C -> $0001                PTIT0           EQU     $01
001C8C 0F9C8C -> $0242                DDRT            EQU     $0242
001C8C 0F9C8C -> $0080                DDRT7           EQU     $80
001C8C 0F9C8C -> $0040                DDRT6           EQU     $40
001C8C 0F9C8C -> $0020                DDRT5           EQU     $20
001C8C 0F9C8C -> $0010                DDRT4           EQU     $10
001C8C 0F9C8C -> $0008                DDRT3           EQU     $08
001C8C 0F9C8C -> $0004                DDRT2           EQU     $04
001C8C 0F9C8C -> $0002                DDRT1           EQU     $02
001C8C 0F9C8C -> $0001                DDRT0           EQU     $01
001C8C 0F9C8C -> $0243                RDRT            EQU     $0243
001C8C 0F9C8C -> $0080                RDRT7           EQU     $80
001C8C 0F9C8C -> $0040                RDRT6           EQU     $40
001C8C 0F9C8C -> $0020                RDRT5           EQU     $20
001C8C 0F9C8C -> $0010                RDRT4           EQU     $10
001C8C 0F9C8C -> $0008                RDRT3           EQU     $08
001C8C 0F9C8C -> $0004                RDRT2           EQU     $04
001C8C 0F9C8C -> $0002                RDRT1           EQU     $02
001C8C 0F9C8C -> $0001                RDRT0           EQU     $01
001C8C 0F9C8C -> $0244                PERT            EQU     $0244
001C8C 0F9C8C -> $0080                PERT7           EQU     $80
001C8C 0F9C8C -> $0040                PERT6           EQU     $40
001C8C 0F9C8C -> $0020                PERT5           EQU     $20
001C8C 0F9C8C -> $0010                PERT4           EQU     $10
001C8C 0F9C8C -> $0008                PERT3           EQU     $08
001C8C 0F9C8C -> $0004                PERT2           EQU     $04
001C8C 0F9C8C -> $0002                PERT1           EQU     $02
001C8C 0F9C8C -> $0001                PERT0           EQU     $01
001C8C 0F9C8C -> $0245                PPST            EQU     $0245
001C8C 0F9C8C -> $0080                PPST7           EQU     $80
001C8C 0F9C8C -> $0040                PPST6           EQU     $40
001C8C 0F9C8C -> $0020                PPST5           EQU     $20
001C8C 0F9C8C -> $0010                PPST4           EQU     $10
001C8C 0F9C8C -> $0008                PPST3           EQU     $08
001C8C 0F9C8C -> $0004                PPST2           EQU     $04
001C8C 0F9C8C -> $0002                PPST1           EQU     $02
001C8C 0F9C8C -> $0001                PPST0           EQU     $01
001C8C 0F9C8C -> $0248                PTS             EQU     $0248
001C8C 0F9C8C -> $0080                PTS7            EQU     $80
001C8C 0F9C8C -> $0040                PTS6            EQU     $40
001C8C 0F9C8C -> $0020                PTS5            EQU     $20
001C8C 0F9C8C -> $0010                PTS4            EQU     $10
001C8C 0F9C8C -> $0008                PTS3            EQU     $08
001C8C 0F9C8C -> $0004                PTS2            EQU     $04
001C8C 0F9C8C -> $0002                PTS1            EQU     $02
001C8C 0F9C8C -> $0001                PTS0            EQU     $01
001C8C 0F9C8C -> $0080                PS7             EQU     $80
001C8C 0F9C8C -> $0040                PS6             EQU     $40
001C8C 0F9C8C -> $0020                PS5             EQU     $20
001C8C 0F9C8C -> $0010                PS4             EQU     $10
001C8C 0F9C8C -> $0008                PS3             EQU     $08
001C8C 0F9C8C -> $0004                PS2             EQU     $04
001C8C 0F9C8C -> $0002                PS1             EQU     $02
001C8C 0F9C8C -> $0001                PS0             EQU     $01
001C8C 0F9C8C -> $0249                PTIS            EQU     $0249
001C8C 0F9C8C -> $0080                PTIS7           EQU     $80
001C8C 0F9C8C -> $0040                PTIS6           EQU     $40
001C8C 0F9C8C -> $0020                PTIS5           EQU     $20
001C8C 0F9C8C -> $0010                PTIS4           EQU     $10
001C8C 0F9C8C -> $0008                PTIS3           EQU     $08
001C8C 0F9C8C -> $0004                PTIS2           EQU     $04
001C8C 0F9C8C -> $0002                PTIS1           EQU     $02
001C8C 0F9C8C -> $0001                PTIS0           EQU     $01
001C8C 0F9C8C -> $024A                DDRS            EQU     $024A
001C8C 0F9C8C -> $0080                DDRS7           EQU     $80
001C8C 0F9C8C -> $0040                DDRS6           EQU     $40
001C8C 0F9C8C -> $0020                DDRS5           EQU     $20
001C8C 0F9C8C -> $0010                DDRS4           EQU     $10
001C8C 0F9C8C -> $0008                DDRS3           EQU     $08
001C8C 0F9C8C -> $0004                DDRS2           EQU     $04
001C8C 0F9C8C -> $0002                DDRS1           EQU     $02
001C8C 0F9C8C -> $0001                DDRS0           EQU     $01
001C8C 0F9C8C -> $024B                RDRS            EQU     $024B
001C8C 0F9C8C -> $0080                RDRS7           EQU     $80
001C8C 0F9C8C -> $0040                RDRS6           EQU     $40
001C8C 0F9C8C -> $0020                RDRS5           EQU     $20
001C8C 0F9C8C -> $0010                RDRS4           EQU     $10
001C8C 0F9C8C -> $0008                RDRS3           EQU     $08
001C8C 0F9C8C -> $0004                RDRS2           EQU     $04
001C8C 0F9C8C -> $0002                RDRS1           EQU     $02
001C8C 0F9C8C -> $0001                RDRS0           EQU     $01
001C8C 0F9C8C -> $024C                PERS            EQU     $024C
001C8C 0F9C8C -> $0080                PERS7           EQU     $80
001C8C 0F9C8C -> $0040                PERS6           EQU     $40
001C8C 0F9C8C -> $0020                PERS5           EQU     $20
001C8C 0F9C8C -> $0010                PERS4           EQU     $10
001C8C 0F9C8C -> $0008                PERS3           EQU     $08
001C8C 0F9C8C -> $0004                PERS2           EQU     $04
001C8C 0F9C8C -> $0002                PERS1           EQU     $02
001C8C 0F9C8C -> $0001                PERS0           EQU     $01
001C8C 0F9C8C -> $024D                PPSS            EQU     $024D
001C8C 0F9C8C -> $0080                PPSS7           EQU     $80
001C8C 0F9C8C -> $0040                PPSS6           EQU     $40
001C8C 0F9C8C -> $0020                PPSS5           EQU     $20
001C8C 0F9C8C -> $0010                PPSS4           EQU     $10
001C8C 0F9C8C -> $0008                PPSS3           EQU     $08
001C8C 0F9C8C -> $0004                PPSS2           EQU     $04
001C8C 0F9C8C -> $0002                PPSS1           EQU     $02
001C8C 0F9C8C -> $0001                PPSS0           EQU     $01
001C8C 0F9C8C -> $024E                WOMS            EQU     $024E
001C8C 0F9C8C -> $0080                WOMS7           EQU     $80
001C8C 0F9C8C -> $0040                WOMS6           EQU     $40
001C8C 0F9C8C -> $0020                WOMS5           EQU     $20
001C8C 0F9C8C -> $0010                WOMS4           EQU     $10
001C8C 0F9C8C -> $0008                WOMS3           EQU     $08
001C8C 0F9C8C -> $0004                WOMS2           EQU     $04
001C8C 0F9C8C -> $0002                WOMS1           EQU     $02
001C8C 0F9C8C -> $0001                WOMS0           EQU     $01
001C8C 0F9C8C -> $0250                PTM             EQU     $0250
001C8C 0F9C8C -> $0080                PTM7            EQU     $80
001C8C 0F9C8C -> $0040                PTM6            EQU     $40
001C8C 0F9C8C -> $0020                PTM5            EQU     $20
001C8C 0F9C8C -> $0010                PTM4            EQU     $10
001C8C 0F9C8C -> $0008                PTM3            EQU     $08
001C8C 0F9C8C -> $0004                PTM2            EQU     $04
001C8C 0F9C8C -> $0002                PTM1            EQU     $02
001C8C 0F9C8C -> $0001                PTM0            EQU     $01
001C8C 0F9C8C -> $0080                PM7             EQU     $80
001C8C 0F9C8C -> $0040                PM6             EQU     $40
001C8C 0F9C8C -> $0020                PM5             EQU     $20
001C8C 0F9C8C -> $0010                PM4             EQU     $10
001C8C 0F9C8C -> $0008                PM3             EQU     $08
001C8C 0F9C8C -> $0004                PM2             EQU     $04
001C8C 0F9C8C -> $0002                PM1             EQU     $02
001C8C 0F9C8C -> $0001                PM0             EQU     $01
001C8C 0F9C8C -> $0251                PTIM            EQU     $0251
001C8C 0F9C8C -> $0080                PTIM7           EQU     $80
001C8C 0F9C8C -> $0040                PTIM6           EQU     $40
001C8C 0F9C8C -> $0020                PTIM5           EQU     $20
001C8C 0F9C8C -> $0010                PTIM4           EQU     $10
001C8C 0F9C8C -> $0008                PTIM3           EQU     $08
001C8C 0F9C8C -> $0004                PTIM2           EQU     $04
001C8C 0F9C8C -> $0002                PTIM1           EQU     $02
001C8C 0F9C8C -> $0001                PTIM0           EQU     $01
001C8C 0F9C8C -> $0252                DDRM            EQU     $0252
001C8C 0F9C8C -> $0080                DDRM7           EQU     $80
001C8C 0F9C8C -> $0040                DDRM6           EQU     $40
001C8C 0F9C8C -> $0020                DDRM5           EQU     $20
001C8C 0F9C8C -> $0010                DDRM4           EQU     $10
001C8C 0F9C8C -> $0008                DDRM3           EQU     $08
001C8C 0F9C8C -> $0004                DDRM2           EQU     $04
001C8C 0F9C8C -> $0002                DDRM1           EQU     $02
001C8C 0F9C8C -> $0001                DDRM0           EQU     $01
001C8C 0F9C8C -> $0253                RDRM            EQU     $0253
001C8C 0F9C8C -> $0080                RDRM7           EQU     $80
001C8C 0F9C8C -> $0040                RDRM6           EQU     $40
001C8C 0F9C8C -> $0020                RDRM5           EQU     $20
001C8C 0F9C8C -> $0010                RDRM4           EQU     $10
001C8C 0F9C8C -> $0008                RDRM3           EQU     $08
001C8C 0F9C8C -> $0004                RDRM2           EQU     $04
001C8C 0F9C8C -> $0002                RDRM1           EQU     $02
001C8C 0F9C8C -> $0001                RDRM0           EQU     $01
001C8C 0F9C8C -> $0254                PERM            EQU     $0254
001C8C 0F9C8C -> $0080                PERM7           EQU     $80
001C8C 0F9C8C -> $0040                PERM6           EQU     $40
001C8C 0F9C8C -> $0020                PERM5           EQU     $20
001C8C 0F9C8C -> $0010                PERM4           EQU     $10
001C8C 0F9C8C -> $0008                PERM3           EQU     $08
001C8C 0F9C8C -> $0004                PERM2           EQU     $04
001C8C 0F9C8C -> $0002                PERM1           EQU     $02
001C8C 0F9C8C -> $0001                PERM0           EQU     $01
001C8C 0F9C8C -> $0255                PPSM            EQU     $0255
001C8C 0F9C8C -> $0080                PPSM7           EQU     $80
001C8C 0F9C8C -> $0040                PPSM6           EQU     $40
001C8C 0F9C8C -> $0020                PPSM5           EQU     $20
001C8C 0F9C8C -> $0010                PPSM4           EQU     $10
001C8C 0F9C8C -> $0008                PPSM3           EQU     $08
001C8C 0F9C8C -> $0004                PPSM2           EQU     $04
001C8C 0F9C8C -> $0002                PPSM1           EQU     $02
001C8C 0F9C8C -> $0001                PPSM0           EQU     $01
001C8C 0F9C8C -> $0256                WOMM            EQU     $0256
001C8C 0F9C8C -> $0080                WOMM7           EQU     $80
001C8C 0F9C8C -> $0040                WOMM6           EQU     $40
001C8C 0F9C8C -> $0020                WOMM5           EQU     $20
001C8C 0F9C8C -> $0010                WOMM4           EQU     $10
001C8C 0F9C8C -> $0008                WOMM3           EQU     $08
001C8C 0F9C8C -> $0004                WOMM2           EQU     $04
001C8C 0F9C8C -> $0002                WOMM1           EQU     $02
001C8C 0F9C8C -> $0001                WOMM0           EQU     $01
001C8C 0F9C8C -> $0257                MODRR           EQU     $0257
001C8C 0F9C8C -> $0040                MODRR6          EQU     $40
001C8C 0F9C8C -> $0020                MODRR5          EQU     $20
001C8C 0F9C8C -> $0010                MODRR4          EQU     $10
001C8C 0F9C8C -> $0008                MODRR3          EQU     $08
001C8C 0F9C8C -> $0004                MODRR2          EQU     $04
001C8C 0F9C8C -> $0002                MODRR1          EQU     $02
001C8C 0F9C8C -> $0001                MODRR0          EQU     $01
001C8C 0F9C8C -> $0258                PTP             EQU     $0258
001C8C 0F9C8C -> $0080                PTP7            EQU     $80
001C8C 0F9C8C -> $0040                PTP6            EQU     $40
001C8C 0F9C8C -> $0020                PTP5            EQU     $20
001C8C 0F9C8C -> $0010                PTP4            EQU     $10
001C8C 0F9C8C -> $0008                PTP3            EQU     $08
001C8C 0F9C8C -> $0004                PTP2            EQU     $04
001C8C 0F9C8C -> $0002                PTP1            EQU     $02
001C8C 0F9C8C -> $0001                PTP0            EQU     $01
001C8C 0F9C8C -> $0080                PP7             EQU     $80
001C8C 0F9C8C -> $0040                PP6             EQU     $40
001C8C 0F9C8C -> $0020                PP5             EQU     $20
001C8C 0F9C8C -> $0010                PP4             EQU     $10
001C8C 0F9C8C -> $0008                PP3             EQU     $08
001C8C 0F9C8C -> $0004                PP2             EQU     $04
001C8C 0F9C8C -> $0002                PP1             EQU     $02
001C8C 0F9C8C -> $0001                PP0             EQU     $01
001C8C 0F9C8C -> $0259                PTIP            EQU     $0259
001C8C 0F9C8C -> $0080                PTIP7           EQU     $80
001C8C 0F9C8C -> $0040                PTIP6           EQU     $40
001C8C 0F9C8C -> $0020                PTIP5           EQU     $20
001C8C 0F9C8C -> $0010                PTIP4           EQU     $10
001C8C 0F9C8C -> $0008                PTIP3           EQU     $08
001C8C 0F9C8C -> $0004                PTIP2           EQU     $04
001C8C 0F9C8C -> $0002                PTIP1           EQU     $02
001C8C 0F9C8C -> $0001                PTIP0           EQU     $01
001C8C 0F9C8C -> $025A                DDRP            EQU     $025A
001C8C 0F9C8C -> $0080                DDRP7           EQU     $80
001C8C 0F9C8C -> $0040                DDRP6           EQU     $40
001C8C 0F9C8C -> $0020                DDRP5           EQU     $20
001C8C 0F9C8C -> $0010                DDRP4           EQU     $10
001C8C 0F9C8C -> $0008                DDRP3           EQU     $08
001C8C 0F9C8C -> $0004                DDRP2           EQU     $04
001C8C 0F9C8C -> $0002                DDRP1           EQU     $02
001C8C 0F9C8C -> $0001                DDRP0           EQU     $01
001C8C 0F9C8C -> $025B                RDRP            EQU     $025B
001C8C 0F9C8C -> $0080                RDRP7           EQU     $80
001C8C 0F9C8C -> $0040                RDRP6           EQU     $40
001C8C 0F9C8C -> $0020                RDRP5           EQU     $20
001C8C 0F9C8C -> $0010                RDRP4           EQU     $10
001C8C 0F9C8C -> $0008                RDRP3           EQU     $08
001C8C 0F9C8C -> $0004                RDRP2           EQU     $04
001C8C 0F9C8C -> $0002                RDRP1           EQU     $02
001C8C 0F9C8C -> $0001                RDRP0           EQU     $01
001C8C 0F9C8C -> $025C                PERP            EQU     $025C
001C8C 0F9C8C -> $0080                PERP7           EQU     $80
001C8C 0F9C8C -> $0040                PERP6           EQU     $40
001C8C 0F9C8C -> $0020                PERP5           EQU     $20
001C8C 0F9C8C -> $0010                PERP4           EQU     $10
001C8C 0F9C8C -> $0008                PERP3           EQU     $08
001C8C 0F9C8C -> $0004                PERP2           EQU     $04
001C8C 0F9C8C -> $0002                PERP1           EQU     $02
001C8C 0F9C8C -> $0001                PERP0           EQU     $01
001C8C 0F9C8C -> $025D                PPSP            EQU     $025D
001C8C 0F9C8C -> $0080                PPSP7           EQU     $80
001C8C 0F9C8C -> $0040                PPSP6           EQU     $40
001C8C 0F9C8C -> $0020                PPSP5           EQU     $20
001C8C 0F9C8C -> $0010                PPSP4           EQU     $10
001C8C 0F9C8C -> $0008                PPSP3           EQU     $08
001C8C 0F9C8C -> $0004                PPSP2           EQU     $04
001C8C 0F9C8C -> $0002                PPSP1           EQU     $02
001C8C 0F9C8C -> $0001                PPSP0           EQU     $01
001C8C 0F9C8C -> $025E                PIEP            EQU     $025E
001C8C 0F9C8C -> $0080                PIEP7           EQU     $80
001C8C 0F9C8C -> $0040                PIEP6           EQU     $40
001C8C 0F9C8C -> $0020                PIEP5           EQU     $20
001C8C 0F9C8C -> $0010                PIEP4           EQU     $10
001C8C 0F9C8C -> $0008                PIEP3           EQU     $08
001C8C 0F9C8C -> $0004                PIEP2           EQU     $04
001C8C 0F9C8C -> $0002                PIEP1           EQU     $02
001C8C 0F9C8C -> $0001                PIEP0           EQU     $01
001C8C 0F9C8C -> $025F                PIFP            EQU     $025F
001C8C 0F9C8C -> $0080                PIFP7           EQU     $80
001C8C 0F9C8C -> $0040                PIFP6           EQU     $40
001C8C 0F9C8C -> $0020                PIFP5           EQU     $20
001C8C 0F9C8C -> $0010                PIFP4           EQU     $10
001C8C 0F9C8C -> $0008                PIFP3           EQU     $08
001C8C 0F9C8C -> $0004                PIFP2           EQU     $04
001C8C 0F9C8C -> $0002                PIFP1           EQU     $02
001C8C 0F9C8C -> $0001                PIFP0           EQU     $01
001C8C 0F9C8C -> $0260                PTH             EQU     $0260
001C8C 0F9C8C -> $0080                PTH7            EQU     $80
001C8C 0F9C8C -> $0040                PTH6            EQU     $40
001C8C 0F9C8C -> $0020                PTH5            EQU     $20
001C8C 0F9C8C -> $0010                PTH4            EQU     $10
001C8C 0F9C8C -> $0008                PTH3            EQU     $08
001C8C 0F9C8C -> $0004                PTH2            EQU     $04
001C8C 0F9C8C -> $0002                PTH1            EQU     $02
001C8C 0F9C8C -> $0001                PTH0            EQU     $01
001C8C 0F9C8C -> $0080                PH7             EQU     $80
001C8C 0F9C8C -> $0040                PH6             EQU     $40
001C8C 0F9C8C -> $0020                PH5             EQU     $20
001C8C 0F9C8C -> $0010                PH4             EQU     $10
001C8C 0F9C8C -> $0008                PH3             EQU     $08
001C8C 0F9C8C -> $0004                PH2             EQU     $04
001C8C 0F9C8C -> $0002                PH1             EQU     $02
001C8C 0F9C8C -> $0001                PH0             EQU     $01
001C8C 0F9C8C -> $0261                PTIH            EQU     $0261
001C8C 0F9C8C -> $0080                PTIH7           EQU     $80
001C8C 0F9C8C -> $0040                PTIH6           EQU     $40
001C8C 0F9C8C -> $0020                PTIH5           EQU     $20
001C8C 0F9C8C -> $0010                PTIH4           EQU     $10
001C8C 0F9C8C -> $0008                PTIH3           EQU     $08
001C8C 0F9C8C -> $0004                PTIH2           EQU     $04
001C8C 0F9C8C -> $0002                PTIH1           EQU     $02
001C8C 0F9C8C -> $0001                PTIH0           EQU     $01
001C8C 0F9C8C -> $0262                DDRH            EQU     $0262
001C8C 0F9C8C -> $0080                DDRH7           EQU     $80
001C8C 0F9C8C -> $0040                DDRH6           EQU     $40
001C8C 0F9C8C -> $0020                DDRH5           EQU     $20
001C8C 0F9C8C -> $0010                DDRH4           EQU     $10
001C8C 0F9C8C -> $0008                DDRH3           EQU     $08
001C8C 0F9C8C -> $0004                DDRH2           EQU     $04
001C8C 0F9C8C -> $0002                DDRH1           EQU     $02
001C8C 0F9C8C -> $0001                DDRH0           EQU     $01
001C8C 0F9C8C -> $0263                RDRH            EQU     $0263
001C8C 0F9C8C -> $0080                RDRH7           EQU     $80
001C8C 0F9C8C -> $0040                RDRH6           EQU     $40
001C8C 0F9C8C -> $0020                RDRH5           EQU     $20
001C8C 0F9C8C -> $0010                RDRH4           EQU     $10
001C8C 0F9C8C -> $0008                RDRH3           EQU     $08
001C8C 0F9C8C -> $0004                RDRH2           EQU     $04
001C8C 0F9C8C -> $0002                RDRH1           EQU     $02
001C8C 0F9C8C -> $0001                RDRH0           EQU     $01
001C8C 0F9C8C -> $0264                PERH            EQU     $0264
001C8C 0F9C8C -> $0080                PERH7           EQU     $80
001C8C 0F9C8C -> $0040                PERH6           EQU     $40
001C8C 0F9C8C -> $0020                PERH5           EQU     $20
001C8C 0F9C8C -> $0010                PERH4           EQU     $10
001C8C 0F9C8C -> $0008                PERH3           EQU     $08
001C8C 0F9C8C -> $0004                PERH2           EQU     $04
001C8C 0F9C8C -> $0002                PERH1           EQU     $02
001C8C 0F9C8C -> $0001                PERH0           EQU     $01
001C8C 0F9C8C -> $0265                PPSH            EQU     $0265
001C8C 0F9C8C -> $0080                PPSH7           EQU     $80
001C8C 0F9C8C -> $0040                PPSH6           EQU     $40
001C8C 0F9C8C -> $0020                PPSH5           EQU     $20
001C8C 0F9C8C -> $0010                PPSH4           EQU     $10
001C8C 0F9C8C -> $0008                PPSH3           EQU     $08
001C8C 0F9C8C -> $0004                PPSH2           EQU     $04
001C8C 0F9C8C -> $0002                PPSH1           EQU     $02
001C8C 0F9C8C -> $0001                PPSH0           EQU     $01
001C8C 0F9C8C -> $0266                PIEH            EQU     $0266
001C8C 0F9C8C -> $0080                PIEH7           EQU     $80
001C8C 0F9C8C -> $0040                PIEH6           EQU     $40
001C8C 0F9C8C -> $0020                PIEH5           EQU     $20
001C8C 0F9C8C -> $0010                PIEH4           EQU     $10
001C8C 0F9C8C -> $0008                PIEH3           EQU     $08
001C8C 0F9C8C -> $0004                PIEH2           EQU     $04
001C8C 0F9C8C -> $0002                PIEH1           EQU     $02
001C8C 0F9C8C -> $0001                PIEH0           EQU     $01
001C8C 0F9C8C -> $0267                PIFH            EQU     $0267
001C8C 0F9C8C -> $0080                PIFH7           EQU     $80
001C8C 0F9C8C -> $0040                PIFH6           EQU     $40
001C8C 0F9C8C -> $0020                PIFH5           EQU     $20
001C8C 0F9C8C -> $0010                PIFH4           EQU     $10
001C8C 0F9C8C -> $0008                PIFH3           EQU     $08
001C8C 0F9C8C -> $0004                PIFH2           EQU     $04
001C8C 0F9C8C -> $0002                PIFH1           EQU     $02
001C8C 0F9C8C -> $0001                PIFH0           EQU     $01
001C8C 0F9C8C -> $0268                PTJ             EQU     $0268
001C8C 0F9C8C -> $0080                PTJ7            EQU     $80
001C8C 0F9C8C -> $0040                PTJ6            EQU     $40
001C8C 0F9C8C -> $0020                PTJ5            EQU     $20
001C8C 0F9C8C -> $0010                PTJ4            EQU     $10
001C8C 0F9C8C -> $0008                PTJ3            EQU     $08
001C8C 0F9C8C -> $0004                PTJ2            EQU     $04
001C8C 0F9C8C -> $0002                PTJ1            EQU     $02
001C8C 0F9C8C -> $0001                PTJ0            EQU     $01
001C8C 0F9C8C -> $0080                PJ7             EQU     $80
001C8C 0F9C8C -> $0040                PJ6             EQU     $40
001C8C 0F9C8C -> $0020                PJ5             EQU     $20
001C8C 0F9C8C -> $0010                PJ4             EQU     $10
001C8C 0F9C8C -> $0008                PJ3             EQU     $08
001C8C 0F9C8C -> $0004                PJ2             EQU     $04
001C8C 0F9C8C -> $0002                PJ1             EQU     $02
001C8C 0F9C8C -> $0001                PJ0             EQU     $01
001C8C 0F9C8C -> $0269                PTIJ            EQU     $0269
001C8C 0F9C8C -> $0080                PTIJ7           EQU     $80
001C8C 0F9C8C -> $0040                PTIJ6           EQU     $40
001C8C 0F9C8C -> $0020                PTIJ5           EQU     $20
001C8C 0F9C8C -> $0010                PTIJ4           EQU     $10
001C8C 0F9C8C -> $0008                PTIJ3           EQU     $08
001C8C 0F9C8C -> $0004                PTIJ2           EQU     $04
001C8C 0F9C8C -> $0002                PTIJ1           EQU     $02
001C8C 0F9C8C -> $0001                PTIJ0           EQU     $01
001C8C 0F9C8C -> $026A                DDRJ            EQU     $026A
001C8C 0F9C8C -> $0080                DDRJ7           EQU     $80
001C8C 0F9C8C -> $0040                DDRJ6           EQU     $40
001C8C 0F9C8C -> $0020                DDRJ5           EQU     $20
001C8C 0F9C8C -> $0010                DDRJ4           EQU     $10
001C8C 0F9C8C -> $0008                DDRJ3           EQU     $08
001C8C 0F9C8C -> $0004                DDRJ2           EQU     $04
001C8C 0F9C8C -> $0002                DDRJ1           EQU     $02
001C8C 0F9C8C -> $0001                DDRJ0           EQU     $01
001C8C 0F9C8C -> $026B                RDRJ            EQU     $026B
001C8C 0F9C8C -> $0080                RDRJ7           EQU     $80
001C8C 0F9C8C -> $0040                RDRJ6           EQU     $40
001C8C 0F9C8C -> $0020                RDRJ5           EQU     $20
001C8C 0F9C8C -> $0010                RDRJ4           EQU     $10
001C8C 0F9C8C -> $0008                RDRJ3           EQU     $08
001C8C 0F9C8C -> $0004                RDRJ2           EQU     $04
001C8C 0F9C8C -> $0002                RDRJ1           EQU     $02
001C8C 0F9C8C -> $0001                RDRJ0           EQU     $01
001C8C 0F9C8C -> $026C                PERJ            EQU     $026C
001C8C 0F9C8C -> $0080                PERJ7           EQU     $80
001C8C 0F9C8C -> $0040                PERJ6           EQU     $40
001C8C 0F9C8C -> $0020                PERJ5           EQU     $20
001C8C 0F9C8C -> $0010                PERJ4           EQU     $10
001C8C 0F9C8C -> $0008                PERJ3           EQU     $08
001C8C 0F9C8C -> $0004                PERJ2           EQU     $04
001C8C 0F9C8C -> $0002                PERJ1           EQU     $02
001C8C 0F9C8C -> $0001                PERJ0           EQU     $01
001C8C 0F9C8C -> $026D                PPSJ            EQU     $026D
001C8C 0F9C8C -> $0080                PPSJ7           EQU     $80
001C8C 0F9C8C -> $0040                PPSJ6           EQU     $40
001C8C 0F9C8C -> $0020                PPSJ5           EQU     $20
001C8C 0F9C8C -> $0010                PPSJ4           EQU     $10
001C8C 0F9C8C -> $0008                PPSJ3           EQU     $08
001C8C 0F9C8C -> $0004                PPSJ2           EQU     $04
001C8C 0F9C8C -> $0002                PPSJ1           EQU     $02
001C8C 0F9C8C -> $0001                PPSJ0           EQU     $01
001C8C 0F9C8C -> $026E                PIEJ            EQU     $026E
001C8C 0F9C8C -> $0080                PIEJ7           EQU     $80
001C8C 0F9C8C -> $0040                PIEJ6           EQU     $40
001C8C 0F9C8C -> $0020                PIEJ5           EQU     $20
001C8C 0F9C8C -> $0010                PIEJ4           EQU     $10
001C8C 0F9C8C -> $0008                PIEJ3           EQU     $08
001C8C 0F9C8C -> $0004                PIEJ2           EQU     $04
001C8C 0F9C8C -> $0002                PIEJ1           EQU     $02
001C8C 0F9C8C -> $0001                PIEJ0           EQU     $01
001C8C 0F9C8C -> $026F                PIFJ            EQU     $026F
001C8C 0F9C8C -> $0080                PIFJ7           EQU     $80
001C8C 0F9C8C -> $0040                PIFJ6           EQU     $40
001C8C 0F9C8C -> $0020                PIFJ5           EQU     $20
001C8C 0F9C8C -> $0010                PIFJ4           EQU     $10
001C8C 0F9C8C -> $0008                PIFJ3           EQU     $08
001C8C 0F9C8C -> $0004                PIFJ2           EQU     $04
001C8C 0F9C8C -> $0002                PIFJ1           EQU     $02
001C8C 0F9C8C -> $0001                PIFJ0           EQU     $01
001C8C 0F9C8C -> $0270                PT0AD0          EQU     $0270
001C8C 0F9C8C -> $0080                PT0AD07         EQU     $80
001C8C 0F9C8C -> $0040                PT0AD06         EQU     $40
001C8C 0F9C8C -> $0020                PT0AD05         EQU     $20
001C8C 0F9C8C -> $0010                PT0AD04         EQU     $10
001C8C 0F9C8C -> $0008                PT0AD03         EQU     $08
001C8C 0F9C8C -> $0004                PT0AD02         EQU     $04
001C8C 0F9C8C -> $0002                PT0AD01         EQU     $02
001C8C 0F9C8C -> $0001                PT0AD00         EQU     $01
001C8C 0F9C8C -> $0271                PT1AD0          EQU     $0271
001C8C 0F9C8C -> $0080                PT1AD07         EQU     $80
001C8C 0F9C8C -> $0040                PT1AD06         EQU     $40
001C8C 0F9C8C -> $0020                PT1AD05         EQU     $20
001C8C 0F9C8C -> $0010                PT1AD04         EQU     $10
001C8C 0F9C8C -> $0008                PT1AD03         EQU     $08
001C8C 0F9C8C -> $0004                PT1AD02         EQU     $04
001C8C 0F9C8C -> $0002                PT1AD01         EQU     $02
001C8C 0F9C8C -> $0001                PT1AD00         EQU     $01
001C8C 0F9C8C -> $0272                DDR0AD0         EQU     $0272
001C8C 0F9C8C -> $0080                DDR0AD07        EQU     $80
001C8C 0F9C8C -> $0040                DDR0AD06        EQU     $40
001C8C 0F9C8C -> $0020                DDR0AD05        EQU     $20
001C8C 0F9C8C -> $0010                DDR0AD04        EQU     $10
001C8C 0F9C8C -> $0008                DDR0AD03        EQU     $08
001C8C 0F9C8C -> $0004                DDR0AD02        EQU     $04
001C8C 0F9C8C -> $0002                DDR0AD01        EQU     $02
001C8C 0F9C8C -> $0001                DDR0AD00        EQU     $01
001C8C 0F9C8C -> $0273                DDR1AD0         EQU     $0273
001C8C 0F9C8C -> $0080                DDR1AD07        EQU     $80
001C8C 0F9C8C -> $0040                DDR1AD06        EQU     $40
001C8C 0F9C8C -> $0020                DDR1AD05        EQU     $20
001C8C 0F9C8C -> $0010                DDR1AD04        EQU     $10
001C8C 0F9C8C -> $0008                DDR1AD03        EQU     $08
001C8C 0F9C8C -> $0004                DDR1AD02        EQU     $04
001C8C 0F9C8C -> $0002                DDR1AD01        EQU     $02
001C8C 0F9C8C -> $0001                DDR1AD00        EQU     $01
001C8C 0F9C8C -> $0274                RDR0AD0         EQU     $0274
001C8C 0F9C8C -> $0080                RDR0AD07        EQU     $80
001C8C 0F9C8C -> $0040                RDR0AD06        EQU     $40
001C8C 0F9C8C -> $0020                RDR0AD05        EQU     $20
001C8C 0F9C8C -> $0010                RDR0AD04        EQU     $10
001C8C 0F9C8C -> $0008                RDR0AD03        EQU     $08
001C8C 0F9C8C -> $0004                RDR0AD02        EQU     $04
001C8C 0F9C8C -> $0002                RDR0AD01        EQU     $02
001C8C 0F9C8C -> $0001                RDR0AD00        EQU     $01
001C8C 0F9C8C -> $0275                RDR1AD0         EQU     $0275
001C8C 0F9C8C -> $0080                RDR1AD07        EQU     $80
001C8C 0F9C8C -> $0040                RDR1AD06        EQU     $40
001C8C 0F9C8C -> $0020                RDR1AD05        EQU     $20
001C8C 0F9C8C -> $0010                RDR1AD04        EQU     $10
001C8C 0F9C8C -> $0008                RDR1AD03        EQU     $08
001C8C 0F9C8C -> $0004                RDR1AD02        EQU     $04
001C8C 0F9C8C -> $0002                RDR1AD01        EQU     $02
001C8C 0F9C8C -> $0001                RDR1AD00        EQU     $01
001C8C 0F9C8C -> $0276                PER0AD0         EQU     $0276
001C8C 0F9C8C -> $0080                PER0AD07        EQU     $80
001C8C 0F9C8C -> $0040                PER0AD06        EQU     $40
001C8C 0F9C8C -> $0020                PER0AD05        EQU     $20
001C8C 0F9C8C -> $0010                PER0AD04        EQU     $10
001C8C 0F9C8C -> $0008                PER0AD03        EQU     $08
001C8C 0F9C8C -> $0004                PER0AD02        EQU     $04
001C8C 0F9C8C -> $0002                PER0AD01        EQU     $02
001C8C 0F9C8C -> $0001                PER0AD00        EQU     $01
001C8C 0F9C8C -> $0277                PER1AD0         EQU     $0277
001C8C 0F9C8C -> $0080                PER1AD07        EQU     $80
001C8C 0F9C8C -> $0040                PER1AD06        EQU     $40
001C8C 0F9C8C -> $0020                PER1AD05        EQU     $20
001C8C 0F9C8C -> $0010                PER1AD04        EQU     $10
001C8C 0F9C8C -> $0008                PER1AD03        EQU     $08
001C8C 0F9C8C -> $0004                PER1AD02        EQU     $04
001C8C 0F9C8C -> $0002                PER1AD01        EQU     $02
001C8C 0F9C8C -> $0001                PER1AD00        EQU     $01
001C8C 0F9C8C -> $0278                PT0AD1          EQU     $0278
001C8C 0F9C8C -> $0080                PT0AD17         EQU     $80
001C8C 0F9C8C -> $0040                PT0AD16         EQU     $40
001C8C 0F9C8C -> $0020                PT0AD15         EQU     $20
001C8C 0F9C8C -> $0010                PT0AD14         EQU     $10
001C8C 0F9C8C -> $0008                PT0AD13         EQU     $08
001C8C 0F9C8C -> $0004                PT0AD12         EQU     $04
001C8C 0F9C8C -> $0002                PT0AD11         EQU     $02
001C8C 0F9C8C -> $0001                PT0AD10         EQU     $01
001C8C 0F9C8C -> $0279                PT1AD1          EQU     $0279
001C8C 0F9C8C -> $0080                PT1AD17         EQU     $80
001C8C 0F9C8C -> $0040                PT1AD16         EQU     $40
001C8C 0F9C8C -> $0020                PT1AD15         EQU     $20
001C8C 0F9C8C -> $0010                PT1AD14         EQU     $10
001C8C 0F9C8C -> $0008                PT1AD13         EQU     $08
001C8C 0F9C8C -> $0004                PT1AD12         EQU     $04
001C8C 0F9C8C -> $0002                PT1AD11         EQU     $02
001C8C 0F9C8C -> $0001                PT1AD10         EQU     $01
001C8C 0F9C8C -> $027A                DDR0AD1         EQU     $027A
001C8C 0F9C8C -> $0080                DDR0AD17        EQU     $80
001C8C 0F9C8C -> $0040                DDR0AD16        EQU     $40
001C8C 0F9C8C -> $0020                DDR0AD15        EQU     $20
001C8C 0F9C8C -> $0010                DDR0AD14        EQU     $10
001C8C 0F9C8C -> $0008                DDR0AD13        EQU     $08
001C8C 0F9C8C -> $0004                DDR0AD12        EQU     $04
001C8C 0F9C8C -> $0002                DDR0AD11        EQU     $02
001C8C 0F9C8C -> $0001                DDR0AD10        EQU     $01
001C8C 0F9C8C -> $027B                DDR1AD1         EQU     $027B
001C8C 0F9C8C -> $0080                DDR1AD17        EQU     $80
001C8C 0F9C8C -> $0040                DDR1AD16        EQU     $40
001C8C 0F9C8C -> $0020                DDR1AD15        EQU     $20
001C8C 0F9C8C -> $0010                DDR1AD14        EQU     $10
001C8C 0F9C8C -> $0008                DDR1AD13        EQU     $08
001C8C 0F9C8C -> $0004                DDR1AD12        EQU     $04
001C8C 0F9C8C -> $0002                DDR1AD11        EQU     $02
001C8C 0F9C8C -> $0001                DDR1AD10        EQU     $01
001C8C 0F9C8C -> $027C                RDR0AD1         EQU     $027C
001C8C 0F9C8C -> $0080                RDR0AD17        EQU     $80
001C8C 0F9C8C -> $0040                RDR0AD16        EQU     $40
001C8C 0F9C8C -> $0020                RDR0AD15        EQU     $20
001C8C 0F9C8C -> $0010                RDR0AD14        EQU     $10
001C8C 0F9C8C -> $0008                RDR0AD13        EQU     $08
001C8C 0F9C8C -> $0004                RDR0AD12        EQU     $04
001C8C 0F9C8C -> $0002                RDR0AD11        EQU     $02
001C8C 0F9C8C -> $0001                RDR0AD10        EQU     $01
001C8C 0F9C8C -> $027D                RDR1AD1         EQU     $027D
001C8C 0F9C8C -> $0080                RDR1AD17        EQU     $80
001C8C 0F9C8C -> $0040                RDR1AD16        EQU     $40
001C8C 0F9C8C -> $0020                RDR1AD15        EQU     $20
001C8C 0F9C8C -> $0010                RDR1AD14        EQU     $10
001C8C 0F9C8C -> $0008                RDR1AD13        EQU     $08
001C8C 0F9C8C -> $0004                RDR1AD12        EQU     $04
001C8C 0F9C8C -> $0002                RDR1AD11        EQU     $02
001C8C 0F9C8C -> $0001                RDR1AD10        EQU     $01
001C8C 0F9C8C -> $027E                PER0AD1         EQU     $027E
001C8C 0F9C8C -> $0080                PER0AD17        EQU     $80
001C8C 0F9C8C -> $0040                PER0AD16        EQU     $40
001C8C 0F9C8C -> $0020                PER0AD15        EQU     $20
001C8C 0F9C8C -> $0010                PER0AD14        EQU     $10
001C8C 0F9C8C -> $0008                PER0AD13        EQU     $08
001C8C 0F9C8C -> $0004                PER0AD12        EQU     $04
001C8C 0F9C8C -> $0002                PER0AD11        EQU     $02
001C8C 0F9C8C -> $0001                PER0AD10        EQU     $01
001C8C 0F9C8C -> $027F                PER1AD1         EQU     $027F
001C8C 0F9C8C -> $0080                PER1AD17        EQU     $80
001C8C 0F9C8C -> $0040                PER1AD16        EQU     $40
001C8C 0F9C8C -> $0020                PER1AD15        EQU     $20
001C8C 0F9C8C -> $0010                PER1AD14        EQU     $10
001C8C 0F9C8C -> $0008                PER1AD13        EQU     $08
001C8C 0F9C8C -> $0004                PER1AD12        EQU     $04
001C8C 0F9C8C -> $0002                PER1AD11        EQU     $02
001C8C 0F9C8C -> $0001                PER1AD10        EQU     $01
001C8C 0F9C8C -> $0280                CAN4CTL0        EQU     $0280
001C8C 0F9C8C -> $0281                CAN4CTL1        EQU     $0281
001C8C 0F9C8C -> $0282                CAN4BTR0        EQU     $0282
001C8C 0F9C8C -> $0283                CAN4BTR1        EQU     $0283
001C8C 0F9C8C -> $0284                CAN4RFLG        EQU     $0284
001C8C 0F9C8C -> $0285                CAN4RIER        EQU     $0285
001C8C 0F9C8C -> $0286                CAN4TFLG        EQU     $0286
001C8C 0F9C8C -> $0287                CAN4TIER        EQU     $0287
001C8C 0F9C8C -> $0288                CAN4TARQ        EQU     $0288
001C8C 0F9C8C -> $0289                CAN4TAAK        EQU     $0289
001C8C 0F9C8C -> $028A                CAN4TBSEL       EQU     $028A
001C8C 0F9C8C -> $028B                CAN4IDAC        EQU     $028B
001C8C 0F9C8C -> $028D                CAN4MISC        EQU     $028D
001C8C 0F9C8C -> $028E                CAN4RXERR       EQU     $028E
001C8C 0F9C8C -> $028F                CAN4TXERR       EQU     $028F
001C8C 0F9C8C -> $0290                CAN4IDAR0       EQU     $0290
001C8C 0F9C8C -> $0291                CAN4IDAR1       EQU     $0291
001C8C 0F9C8C -> $0292                CAN4IDAR2       EQU     $0292
001C8C 0F9C8C -> $0293                CAN4IDAR3       EQU     $0293
001C8C 0F9C8C -> $0294                CAN4IDMR0       EQU     $0294
001C8C 0F9C8C -> $0295                CAN4IDMR1       EQU     $0295
001C8C 0F9C8C -> $0296                CAN4IDMR2       EQU     $0296
001C8C 0F9C8C -> $0297                CAN4IDMR3       EQU     $0297
001C8C 0F9C8C -> $0298                CAN4IDAR4       EQU     $0298
001C8C 0F9C8C -> $0299                CAN4IDAR5       EQU     $0299
001C8C 0F9C8C -> $029A                CAN4IDAR6       EQU     $029A
001C8C 0F9C8C -> $029B                CAN4IDAR7       EQU     $029B
001C8C 0F9C8C -> $029C                CAN4IDMR4       EQU     $029C
001C8C 0F9C8C -> $029D                CAN4IDMR5       EQU     $029D
001C8C 0F9C8C -> $029E                CAN4IDMR6       EQU     $029E
001C8C 0F9C8C -> $029F                CAN4IDMR7       EQU     $029F
001C8C 0F9C8C -> $02A0                CAN4RXIDR0      EQU     $02A0
001C8C 0F9C8C -> $02A1                CAN4RXIDR1      EQU     $02A1
001C8C 0F9C8C -> $02A2                CAN4RXIDR2      EQU     $02A2
001C8C 0F9C8C -> $02A3                CAN4RXIDR3      EQU     $02A3
001C8C 0F9C8C -> $02A4                CAN4RXDSR0      EQU     $02A4
001C8C 0F9C8C -> $02A5                CAN4RXDSR1      EQU     $02A5
001C8C 0F9C8C -> $02A6                CAN4RXDSR2      EQU     $02A6
001C8C 0F9C8C -> $02A7                CAN4RXDSR3      EQU     $02A7
001C8C 0F9C8C -> $02A8                CAN4RXDSR4      EQU     $02A8
001C8C 0F9C8C -> $02A9                CAN4RXDSR5      EQU     $02A9
001C8C 0F9C8C -> $02AA                CAN4RXDSR6      EQU     $02AA
001C8C 0F9C8C -> $02AB                CAN4RXDSR7      EQU     $02AB
001C8C 0F9C8C -> $02AC                CAN4RXDLR       EQU     $02AC
001C8C 0F9C8C -> $02AE                CAN4RTSRH       EQU     $02AE
001C8C 0F9C8C -> $02AF                CAN4RTSRL       EQU     $02AF
001C8C 0F9C8C -> $02B0                CAN4TXIDR0      EQU     $02B0
001C8C 0F9C8C -> $02B1                CAN4TXIDR1      EQU     $02B1
001C8C 0F9C8C -> $02B2                CAN4TXIDR2      EQU     $02B2
001C8C 0F9C8C -> $02B2                CAN4TXIDR2      EQU     $02B2
001C8C 0F9C8C -> $02B3                CAN4TXIDR3      EQU     $02B3
001C8C 0F9C8C -> $02B4                CAN4TXDSR0      EQU     $02B4
001C8C 0F9C8C -> $02B5                CAN4TXDSR1      EQU     $02B5
001C8C 0F9C8C -> $02B6                CAN4TXDSR2      EQU     $02B6
001C8C 0F9C8C -> $02B7                CAN4XDSR3       EQU     $02B7
001C8C 0F9C8C -> $02B7                CAN4TXDSR3      EQU     $02B7
001C8C 0F9C8C -> $02B8                CAN4TXDSR4      EQU     $02B8
001C8C 0F9C8C -> $02B9                CAN4TXDSR5      EQU     $02B9
001C8C 0F9C8C -> $02BA                CAN4TXDSR6      EQU     $02BA
001C8C 0F9C8C -> $02BB                CAN4TXDSR7      EQU     $02BB
001C8C 0F9C8C -> $02BC                CAN4TXDLR       EQU     $02BC
001C8C 0F9C8C -> $02BD                CAN4TXTBPR      EQU     $02BD
001C8C 0F9C8C -> $02BE                CAN4TXTSRH      EQU     $02BE
001C8C 0F9C8C -> $02BF                CAN4TXTSRL      EQU     $02BF
001C8C 0F9C8C -> $02C0                ATD0CTL0        EQU     $02C0
001C8C 0F9C8C -> $02C0                ATDCTL0         EQU     $02C0
001C8C 0F9C8C -> $02C1                ATD0CTL1        EQU     $02C1
001C8C 0F9C8C -> $02C1                ATDCTL1         EQU     $02C1
001C8C 0F9C8C -> $02C2                ATD0CTL2        EQU     $02C2
001C8C 0F9C8C -> $02C2                ATDCTL2         EQU     $02C2
001C8C 0F9C8C -> $02C3                ATD0CTL3        EQU     $02C3
001C8C 0F9C8C -> $02C3                ATDCTL3         EQU     $02C3
001C8C 0F9C8C -> $02C4                ATD0CTL4        EQU     $02C4
001C8C 0F9C8C -> $02C4                ATDCTL4         EQU     $02C4
001C8C 0F9C8C -> $02C5                ATD0CTL5        EQU     $02C5
001C8C 0F9C8C -> $02C5                ATDCTL5         EQU     $02C5
001C8C 0F9C8C -> $02C6                ATD0STAT0       EQU     $02C6
001C8C 0F9C8C -> $02C6                ATDSTAT0        EQU     $02C6
001C8C 0F9C8C -> $02C8                ATD0CMPEH       EQU     $02C8
001C8C 0F9C8C -> $02C8                ATDCMPEH        EQU     $02C8
001C8C 0F9C8C -> $02C9                ATD0CMPEL       EQU     $02C9
001C8C 0F9C8C -> $02C9                ATDCMPEL        EQU     $02C9
001C8C 0F9C8C -> $02CA                ATD0STAT2H      EQU     $02CA
001C8C 0F9C8C -> $02CA                ATDSTAT2H       EQU     $02CA
001C8C 0F9C8C -> $02CB                ATD0STAT2L      EQU     $02CB
001C8C 0F9C8C -> $02CB                ATDSTAT2L       EQU     $02CB
001C8C 0F9C8C -> $02CC                ATD0DIENH       EQU     $02CC
001C8C 0F9C8C -> $02CC                ATDDIENH        EQU     $02CC
001C8C 0F9C8C -> $02CD                ATD0DIENL       EQU     $02CD
001C8C 0F9C8C -> $02CD                ATDDIENL        EQU     $02CD
001C8C 0F9C8C -> $02CE                ATD0CMPHTH      EQU     $02CE
001C8C 0F9C8C -> $02CE                ATDCMPHTH       EQU     $02CE
001C8C 0F9C8C -> $02CF                ATD0CMPHTL      EQU     $02CF
001C8C 0F9C8C -> $02CF                ATDCMPHTL       EQU     $02CF
001C8C 0F9C8C -> $02D0                ATD0DR0         EQU     $02D0
001C8C 0F9C8C -> $02D0                ATDDR0          EQU     $02D0
001C8C 0F9C8C -> $02D0                ATD0DR0H        EQU     $02D0
001C8C 0F9C8C -> $02D1                ATD0DR0L        EQU     $02D1
001C8C 0F9C8C -> $02D2                ATD0DR1         EQU     $02D2
001C8C 0F9C8C -> $02D2                ATDDR1          EQU     $02D2
001C8C 0F9C8C -> $02D2                ATD0DR1H        EQU     $02D2
001C8C 0F9C8C -> $02D3                ATD0DR1L        EQU     $02D3
001C8C 0F9C8C -> $02D4                ATD0DR2         EQU     $02D4
001C8C 0F9C8C -> $02D4                ATDDR2          EQU     $02D4
001C8C 0F9C8C -> $02D4                ATD0DR2H        EQU     $02D4
001C8C 0F9C8C -> $02D5                ATD0DR2L        EQU     $02D5
001C8C 0F9C8C -> $02D6                ATD0DR3         EQU     $02D6
001C8C 0F9C8C -> $02D6                ATDDR3          EQU     $02D6
001C8C 0F9C8C -> $02D6                ATD0DR3H        EQU     $02D6
001C8C 0F9C8C -> $02D7                ATD0DR3L        EQU     $02D7
001C8C 0F9C8C -> $02D8                ATD0DR4         EQU     $02D8
001C8C 0F9C8C -> $02D8                ATDDR4          EQU     $02D8
001C8C 0F9C8C -> $02D8                ATD0DR4H        EQU     $02D8
001C8C 0F9C8C -> $02D9                ATD0DR4L        EQU     $02D9
001C8C 0F9C8C -> $02DA                ATD0DR5         EQU     $02DA
001C8C 0F9C8C -> $02DA                ATDDR5          EQU     $02DA
001C8C 0F9C8C -> $02DA                ATD0DR5H        EQU     $02DA
001C8C 0F9C8C -> $02DB                ATD0DR5L        EQU     $02DB
001C8C 0F9C8C -> $02DC                ATD0DR6         EQU     $02DC
001C8C 0F9C8C -> $02DC                ATDDR6          EQU     $02DC
001C8C 0F9C8C -> $02DC                ATD0DR6H        EQU     $02DC
001C8C 0F9C8C -> $02DD                ATD0DR6L        EQU     $02DD
001C8C 0F9C8C -> $02DE                ATD0DR7         EQU     $02DE
001C8C 0F9C8C -> $02DE                ATDDR7          EQU     $02DE
001C8C 0F9C8C -> $02DE                ATD0DR7H        EQU     $02DE
001C8C 0F9C8C -> $02DF                ATD0DR7L        EQU     $02DF
001C8C 0F9C8C -> $02E0                ATD0DR8         EQU     $02E0
001C8C 0F9C8C -> $02E0                ATDDR8          EQU     $02E0
001C8C 0F9C8C -> $02E0                ATD0DR8H        EQU     $02E0
001C8C 0F9C8C -> $02E1                ATD0DR8L        EQU     $02E1
001C8C 0F9C8C -> $02E2                ATD0DR9         EQU     $02E2
001C8C 0F9C8C -> $02E2                ATDDR9          EQU     $02E2
001C8C 0F9C8C -> $02E2                ATD0DR9H        EQU     $02E2
001C8C 0F9C8C -> $02E3                ATD0DR9L        EQU     $02E3
001C8C 0F9C8C -> $02E3                ATD0DR10        EQU     $02E3
001C8C 0F9C8C -> $02E3                ATDDR10         EQU     $02E3
001C8C 0F9C8C -> $02E3                ATD0DR10H       EQU     $02E3
001C8C 0F9C8C -> $02E5                ATD0DR10L       EQU     $02E5
001C8C 0F9C8C -> $02E6                ATD0DR11        EQU     $02E6
001C8C 0F9C8C -> $02E6                ATDDR11         EQU     $02E6
001C8C 0F9C8C -> $02E6                ATD0DR11H       EQU     $02E6
001C8C 0F9C8C -> $02E7                ATD0DR11L       EQU     $02E7
001C8C 0F9C8C -> $02E8                ATD0DR12        EQU     $02E8
001C8C 0F9C8C -> $02E8                ATDDR12         EQU     $02E8
001C8C 0F9C8C -> $02E8                ATD0DR12H       EQU     $02E8
001C8C 0F9C8C -> $02E9                ATD0DR12L       EQU     $02E9
001C8C 0F9C8C -> $02EA                ATD0DR13        EQU     $02EA
001C8C 0F9C8C -> $02EA                ATDDR13         EQU     $02EA
001C8C 0F9C8C -> $02EA                ATD0DR13H       EQU     $02EA
001C8C 0F9C8C -> $02EB                ATD0DR13L       EQU     $02EB
001C8C 0F9C8C -> $02EC                ATD0DR14        EQU     $02EC
001C8C 0F9C8C -> $02EC                ATDDR14         EQU     $02EC
001C8C 0F9C8C -> $02EC                ATD0DR14H       EQU     $02EC
001C8C 0F9C8C -> $02ED                ATD0DR14L       EQU     $02ED
001C8C 0F9C8C -> $02EE                ATD0DR15        EQU     $02EE
001C8C 0F9C8C -> $02EE                ATDDR15         EQU     $02EE
001C8C 0F9C8C -> $02EE                ATD0DR15H       EQU     $02EE
001C8C 0F9C8C -> $02EF                ATD0DR15L       EQU     $02EF
001C8C 0F9C8C -> $02F0                VREGHTCL        EQU     $02F0
001C8C 0F9C8C -> $0020                VSEL            EQU     $20
001C8C 0F9C8C -> $0010                VAE             EQU     $10
001C8C 0F9C8C -> $0008                HTEN            EQU     $08
001C8C 0F9C8C -> $0004                HTDS            EQU     $04
001C8C 0F9C8C -> $0002                HTIE            EQU     $02
001C8C 0F9C8C -> $0001                HTIF            EQU     $01
001C8C 0F9C8C -> $02F1                VREGCTRL        EQU     $02F1
001C8C 0F9C8C -> $0004                LVDS            EQU     $04
001C8C 0F9C8C -> $0002                LVIE            EQU     $02
001C8C 0F9C8C -> $0001                LVIF            EQU     $01
001C8C 0F9C8C -> $02F2                VREGAPICTL      EQU     $02F2
001C8C 0F9C8C -> $0080                APICLK          EQU     $80
001C8C 0F9C8C -> $0010                APIES           EQU     $10
001C8C 0F9C8C -> $0008                APIEA           EQU     $08
001C8C 0F9C8C -> $0004                APIFE           EQU     $04
001C8C 0F9C8C -> $0002                APIE            EQU     $02
001C8C 0F9C8C -> $0001                APIF            EQU     $01
001C8C 0F9C8C -> $02F3                VREGAPITR       EQU     $02F3
001C8C 0F9C8C -> $0080                APITR5          EQU     $80
001C8C 0F9C8C -> $0040                APITR4          EQU     $40
001C8C 0F9C8C -> $0020                APITR3          EQU     $20
001C8C 0F9C8C -> $0010                APITR2          EQU     $10
001C8C 0F9C8C -> $0008                APITR1          EQU     $08
001C8C 0F9C8C -> $0004                APITR0          EQU     $04
001C8C 0F9C8C -> $02F4                VREGAPIRH       EQU     $02F4
001C8C 0F9C8C -> $0080                APIR15          EQU     $80
001C8C 0F9C8C -> $0040                APIR14          EQU     $40
001C8C 0F9C8C -> $0020                APIR13          EQU     $20
001C8C 0F9C8C -> $0010                APIR12          EQU     $10
001C8C 0F9C8C -> $0008                APIR11          EQU     $08
001C8C 0F9C8C -> $0004                APIR10          EQU     $04
001C8C 0F9C8C -> $0002                APIR9           EQU     $02
001C8C 0F9C8C -> $0001                APIR8           EQU     $01
001C8C 0F9C8C -> $02F5                VREGAPIRL       EQU     $02F5
001C8C 0F9C8C -> $0080                APIR7           EQU     $80
001C8C 0F9C8C -> $0040                APIR6           EQU     $40
001C8C 0F9C8C -> $0020                APIR5           EQU     $20
001C8C 0F9C8C -> $0010                APIR4           EQU     $10
001C8C 0F9C8C -> $0008                APIR3           EQU     $08
001C8C 0F9C8C -> $0004                APIR2           EQU     $04
001C8C 0F9C8C -> $0002                APIR1           EQU     $02
001C8C 0F9C8C -> $0001                APIR0           EQU     $01
001C8C 0F9C8C -> $02F7                VREGHTTR        EQU     $02F7
001C8C 0F9C8C -> $0080                HTOEN           EQU     $80
001C8C 0F9C8C -> $000F                HTTR            EQU     $0F
001C8C 0F9C8C -> $0300                PWME            EQU     $0300
001C8C 0F9C8C -> $0080                PWME7           EQU     $80
001C8C 0F9C8C -> $0040                PWME6           EQU     $40
001C8C 0F9C8C -> $0020                PWME5           EQU     $20
001C8C 0F9C8C -> $0010                PWME4           EQU     $10
001C8C 0F9C8C -> $0008                PWME3           EQU     $08
001C8C 0F9C8C -> $0004                PWME2           EQU     $04
001C8C 0F9C8C -> $0002                PWME1           EQU     $02
001C8C 0F9C8C -> $0001                PWME0           EQU     $01
001C8C 0F9C8C -> $0301                PWMPOL          EQU     $0301
001C8C 0F9C8C -> $0080                PPOL7           EQU     $80
001C8C 0F9C8C -> $0040                PPOL6           EQU     $40
001C8C 0F9C8C -> $0020                PPOL5           EQU     $20
001C8C 0F9C8C -> $0010                PPOL4           EQU     $10
001C8C 0F9C8C -> $0008                PPOL3           EQU     $08
001C8C 0F9C8C -> $0004                PPOL2           EQU     $04
001C8C 0F9C8C -> $0002                PPOL1           EQU     $02
001C8C 0F9C8C -> $0001                PPOL0           EQU     $01
001C8C 0F9C8C -> $0302                PWMCLK          EQU     $0302
001C8C 0F9C8C -> $0080                PCLK7           EQU     $80
001C8C 0F9C8C -> $0040                PCLK6           EQU     $40
001C8C 0F9C8C -> $0020                PCLK5           EQU     $20
001C8C 0F9C8C -> $0010                PCLK4           EQU     $10
001C8C 0F9C8C -> $0008                PCLK3           EQU     $08
001C8C 0F9C8C -> $0004                PCLK2           EQU     $04
001C8C 0F9C8C -> $0002                PCLK1           EQU     $02
001C8C 0F9C8C -> $0001                PCLK0           EQU     $01
001C8C 0F9C8C -> $0303                PWMPRCLK        EQU     $0303
001C8C 0F9C8C -> $0040                PCKB2           EQU     $40
001C8C 0F9C8C -> $0020                PCKB1           EQU     $20
001C8C 0F9C8C -> $0010                PCKB0           EQU     $10
001C8C 0F9C8C -> $0004                PCKA2           EQU     $04
001C8C 0F9C8C -> $0002                PCKA1           EQU     $02
001C8C 0F9C8C -> $0001                PCKA0           EQU     $01
001C8C 0F9C8C -> $0304                PWMCAE          EQU     $0304
001C8C 0F9C8C -> $0080                CAE7            EQU     $80
001C8C 0F9C8C -> $0040                CAE6            EQU     $40
001C8C 0F9C8C -> $0020                CAE5            EQU     $20
001C8C 0F9C8C -> $0010                CAE4            EQU     $10
001C8C 0F9C8C -> $0008                CAE3            EQU     $08
001C8C 0F9C8C -> $0004                CAE2            EQU     $04
001C8C 0F9C8C -> $0002                CAE1            EQU     $02
001C8C 0F9C8C -> $0001                CAE0            EQU     $01
001C8C 0F9C8C -> $0305                PWMCTL          EQU     $0305
001C8C 0F9C8C -> $0080                CON67           EQU     $80
001C8C 0F9C8C -> $0040                CON45           EQU     $40
001C8C 0F9C8C -> $0020                CON23           EQU     $20
001C8C 0F9C8C -> $0010                CON01           EQU     $10
001C8C 0F9C8C -> $0008                PSWAI           EQU     $08
001C8C 0F9C8C -> $0004                PFRZ            EQU     $04
001C8C 0F9C8C -> $0306                PWMTST          EQU     $0306
001C8C 0F9C8C -> $0307                PWMPRSC         EQU     $0307
001C8C 0F9C8C -> $030A                PWMSCNTA        EQU     $030A
001C8C 0F9C8C -> $030B                PWMSCNTB        EQU     $030B
001C8C 0F9C8C -> $030C                PWMCNT0         EQU     $030C
001C8C 0F9C8C -> $030D                PWMCNT1         EQU     $030D
001C8C 0F9C8C -> $030E                PWMCNT2         EQU     $030E
001C8C 0F9C8C -> $030F                PWMCNT3         EQU     $030F
001C8C 0F9C8C -> $0310                PWMCNT4         EQU     $0310
001C8C 0F9C8C -> $0311                PWMCNT5         EQU     $0311
001C8C 0F9C8C -> $0312                PWMCNT6         EQU     $0312
001C8C 0F9C8C -> $0313                PWMCNT7         EQU     $0313
001C8C 0F9C8C -> $0314                PWMPER0         EQU     $0314
001C8C 0F9C8C -> $0315                PWMPER1         EQU     $0315
001C8C 0F9C8C -> $0316                PWMPER2         EQU     $0316
001C8C 0F9C8C -> $0317                PWMPER3         EQU     $0317
001C8C 0F9C8C -> $0318                PWMPER4         EQU     $0318
001C8C 0F9C8C -> $0319                PWMPER5         EQU     $0319
001C8C 0F9C8C -> $031A                PWMPER6         EQU     $031A
001C8C 0F9C8C -> $031B                PWMPER7         EQU     $031B
001C8C 0F9C8C -> $031C                PWMDTY0         EQU     $031C
001C8C 0F9C8C -> $031D                PWMDTY1         EQU     $031D
001C8C 0F9C8C -> $031E                PWMDTY2         EQU     $031E
001C8C 0F9C8C -> $031F                PWMDTY3         EQU     $031F
001C8C 0F9C8C -> $0320                PWMDTY4         EQU     $0320
001C8C 0F9C8C -> $0321                PWMDTY5         EQU     $0321
001C8C 0F9C8C -> $0322                PWMDTY6         EQU     $0322
001C8C 0F9C8C -> $0323                PWMDTY7         EQU     $0323
001C8C 0F9C8C -> $0324                PWMSDN          EQU     $0324
001C8C 0F9C8C -> $0080                PWMIF           EQU     $80
001C8C 0F9C8C -> $0040                PWMIE           EQU     $40
001C8C 0F9C8C -> $0020                PWMRSTRT        EQU     $20
001C8C 0F9C8C -> $0010                PWMLVL          EQU     $10
001C8C 0F9C8C -> $0004                PWM7IN          EQU     $04
001C8C 0F9C8C -> $0002                PWM7INL         EQU     $02
001C8C 0F9C8C -> $0001                PWM7ENA         EQU     $01
001C8C 0F9C8C -> $0330                SCI6BDH         EQU     $0330
001C8C 0F9C8C -> $0330                SCI6ASR1        EQU     $0330
001C8C 0F9C8C -> $0331                SCI6BDL         EQU     $0331
001C8C 0F9C8C -> $0331                SCI6ACR1        EQU     $0331
001C8C 0F9C8C -> $0332                SCI6CR1         EQU     $0332
001C8C 0F9C8C -> $0332                SCI6ACR2        EQU     $0332
001C8C 0F9C8C -> $0333                SCI6CR2         EQU     $0333
001C8C 0F9C8C -> $0334                SCI6SR1         EQU     $0334
001C8C 0F9C8C -> $0335                SCI6SR2         EQU     $0335
001C8C 0F9C8C -> $0336                SCI6DRH         EQU     $0336
001C8C 0F9C8C -> $0337                SCI6DRL         EQU     $0337
001C8C 0F9C8C -> $0338                SCI7BDH         EQU     $0338
001C8C 0F9C8C -> $0338                SCI7ASR1        EQU     $0338
001C8C 0F9C8C -> $0339                SCI7BDL         EQU     $0339
001C8C 0F9C8C -> $0339                SCI7ACR1        EQU     $0339
001C8C 0F9C8C -> $033A                SCI7CR1         EQU     $033A
001C8C 0F9C8C -> $033A                SCI7ACR2        EQU     $033A
001C8C 0F9C8C -> $033B                SCI7CR2         EQU     $033B
001C8C 0F9C8C -> $033C                SCI7SR1         EQU     $033C
001C8C 0F9C8C -> $335D                SCI7SR2         EQU     $0335D
001C8C 0F9C8C -> $033E                SCI7DRH         EQU     $033E
001C8C 0F9C8C -> $033F                SCI7DRL         EQU     $033F
001C8C 0F9C8C -> $0340                PITCFLMT        EQU     $0340
001C8C 0F9C8C -> $0080                PITE            EQU     $80
001C8C 0F9C8C -> $0040                PITSWAI         EQU     $40
001C8C 0F9C8C -> $0020                PITFRZ          EQU     $20
001C8C 0F9C8C -> $0002                PFLMT1          EQU     $02
001C8C 0F9C8C -> $0001                PFLMT0          EQU     $01
001C8C 0F9C8C -> $0341                PITFLT          EQU     $0341
001C8C 0F9C8C -> $0080                PFLT7           EQU     $80
001C8C 0F9C8C -> $0040                PFLT6           EQU     $40
001C8C 0F9C8C -> $0020                PFLT5           EQU     $20
001C8C 0F9C8C -> $0010                PFLT4           EQU     $10
001C8C 0F9C8C -> $0008                PFLT3           EQU     $08
001C8C 0F9C8C -> $0004                PFLT2           EQU     $04
001C8C 0F9C8C -> $0002                PFLT1           EQU     $02
001C8C 0F9C8C -> $0001                PFLT0           EQU     $01
001C8C 0F9C8C -> $0342                PITCE           EQU     $0342
001C8C 0F9C8C -> $0080                PCE7            EQU     $80
001C8C 0F9C8C -> $0040                PCE6            EQU     $40
001C8C 0F9C8C -> $0020                PCE5            EQU     $20
001C8C 0F9C8C -> $0010                PCE4            EQU     $10
001C8C 0F9C8C -> $0008                PCE3            EQU     $08
001C8C 0F9C8C -> $0004                PCE2            EQU     $04
001C8C 0F9C8C -> $0002                PCE1            EQU     $02
001C8C 0F9C8C -> $0001                PCE0            EQU     $01
001C8C 0F9C8C -> $0343                PITMUX          EQU     $0343
001C8C 0F9C8C -> $0080                PMUX7           EQU     $80
001C8C 0F9C8C -> $0040                PMUX6           EQU     $40
001C8C 0F9C8C -> $0020                PMUX5           EQU     $20
001C8C 0F9C8C -> $0010                PMUX4           EQU     $10
001C8C 0F9C8C -> $0008                PMUX3           EQU     $08
001C8C 0F9C8C -> $0004                PMUX2           EQU     $04
001C8C 0F9C8C -> $0002                PMUX1           EQU     $02
001C8C 0F9C8C -> $0001                PMUX0           EQU     $01
001C8C 0F9C8C -> $0344                PITINTE         EQU     $0344
001C8C 0F9C8C -> $0080                PINTE7          EQU     $80
001C8C 0F9C8C -> $0040                PINTE6          EQU     $40
001C8C 0F9C8C -> $0020                PINTE5          EQU     $20
001C8C 0F9C8C -> $0010                PINTE4          EQU     $10
001C8C 0F9C8C -> $0008                PINTE3          EQU     $08
001C8C 0F9C8C -> $0004                PINTE2          EQU     $04
001C8C 0F9C8C -> $0002                PINTE1          EQU     $02
001C8C 0F9C8C -> $0001                PINTE0          EQU     $01
001C8C 0F9C8C -> $0345                PITTF           EQU     $0345
001C8C 0F9C8C -> $0080                PTF7            EQU     $80
001C8C 0F9C8C -> $0040                PTF6            EQU     $40
001C8C 0F9C8C -> $0020                PTF5            EQU     $20
001C8C 0F9C8C -> $0010                PTF4            EQU     $10
001C8C 0F9C8C -> $0008                PTF3            EQU     $08
001C8C 0F9C8C -> $0004                PTF2            EQU     $04
001C8C 0F9C8C -> $0002                PTF1            EQU     $02
001C8C 0F9C8C -> $0001                PTF0            EQU     $01
001C8C 0F9C8C -> $0346                PITMTLD0        EQU     $0346
001C8C 0F9C8C -> $0080                PMTLD7          EQU     $80
001C8C 0F9C8C -> $0040                PMTLD6          EQU     $40
001C8C 0F9C8C -> $0020                PMTLD5          EQU     $20
001C8C 0F9C8C -> $0010                PMTLD4          EQU     $10
001C8C 0F9C8C -> $0008                PMTLD3          EQU     $08
001C8C 0F9C8C -> $0004                PMTLD2          EQU     $04
001C8C 0F9C8C -> $0002                PMTLD1          EQU     $02
001C8C 0F9C8C -> $0001                PMTLD0          EQU     $01
001C8C 0F9C8C -> $0347                PITMTLD1        EQU     $0347
001C8C 0F9C8C -> $0348                PITLD0          EQU     $0348
001C8C 0F9C8C -> $034A                PITCNT0         EQU     $034A
001C8C 0F9C8C -> $034C                PITLD1          EQU     $034C
001C8C 0F9C8C -> $034E                PITCNT1         EQU     $034E
001C8C 0F9C8C -> $0350                PITLD2          EQU     $0350
001C8C 0F9C8C -> $0352                PITCNT2         EQU     $0352
001C8C 0F9C8C -> $0354                PITLD3          EQU     $0354
001C8C 0F9C8C -> $0356                PITCNT3         EQU     $0356
001C8C 0F9C8C -> $0358                PITLD4          EQU     $0358
001C8C 0F9C8C -> $035A                PITCNT4         EQU     $035A
001C8C 0F9C8C -> $035C                PITLD5          EQU     $035C
001C8C 0F9C8C -> $035E                PITCNT5         EQU     $035E
001C8C 0F9C8C -> $0360                PITLD6          EQU     $0360
001C8C 0F9C8C -> $0362                PITCNT6         EQU     $0362
001C8C 0F9C8C -> $0364                PITLD7          EQU     $0364
001C8C 0F9C8C -> $0366                PITCNT7         EQU     $0366
001C8C 0F9C8C -> $0368                PTR             EQU     $0368
001C8C 0F9C8C -> $0080                PTR7            EQU     $80
001C8C 0F9C8C -> $0040                PTR6            EQU     $40
001C8C 0F9C8C -> $0020                PTR5            EQU     $20
001C8C 0F9C8C -> $0010                PTR4            EQU     $10
001C8C 0F9C8C -> $0008                PTR3            EQU     $08
001C8C 0F9C8C -> $0004                PTR2            EQU     $04
001C8C 0F9C8C -> $0002                PTR1            EQU     $02
001C8C 0F9C8C -> $0001                PTR0            EQU     $01
001C8C 0F9C8C -> $0369                PTIR            EQU     $0369
001C8C 0F9C8C -> $0080                PTIR7           EQU     $80
001C8C 0F9C8C -> $0040                PTIR6           EQU     $40
001C8C 0F9C8C -> $0020                PTIR5           EQU     $20
001C8C 0F9C8C -> $0010                PTIR4           EQU     $10
001C8C 0F9C8C -> $0008                PTIR3           EQU     $08
001C8C 0F9C8C -> $0004                PTIR2           EQU     $04
001C8C 0F9C8C -> $0002                PTIR1           EQU     $02
001C8C 0F9C8C -> $0001                PTIR0           EQU     $01
001C8C 0F9C8C -> $036A                DDRR            EQU     $036A
001C8C 0F9C8C -> $0080                DDRR7           EQU     $80
001C8C 0F9C8C -> $0040                DDRR6           EQU     $40
001C8C 0F9C8C -> $0020                DDRR5           EQU     $20
001C8C 0F9C8C -> $0010                DDRR4           EQU     $10
001C8C 0F9C8C -> $0008                DDRR3           EQU     $08
001C8C 0F9C8C -> $0004                DDRR2           EQU     $04
001C8C 0F9C8C -> $0002                DDRR1           EQU     $02
001C8C 0F9C8C -> $0001                DDRR0           EQU     $01
001C8C 0F9C8C -> $036B                RDRR            EQU     $036B
001C8C 0F9C8C -> $0080                RDRR7           EQU     $80
001C8C 0F9C8C -> $0040                RDRR6           EQU     $40
001C8C 0F9C8C -> $0020                RDRR5           EQU     $20
001C8C 0F9C8C -> $0010                RDRR4           EQU     $10
001C8C 0F9C8C -> $0008                RDRR3           EQU     $08
001C8C 0F9C8C -> $0004                RDRR2           EQU     $04
001C8C 0F9C8C -> $0002                RDRR1           EQU     $02
001C8C 0F9C8C -> $0001                RDRR0           EQU     $01
001C8C 0F9C8C -> $036C                PERR            EQU     $036C
001C8C 0F9C8C -> $0080                PERR7           EQU     $80
001C8C 0F9C8C -> $0040                PERR6           EQU     $40
001C8C 0F9C8C -> $0020                PERR5           EQU     $20
001C8C 0F9C8C -> $0010                PERR4           EQU     $10
001C8C 0F9C8C -> $0008                PERR3           EQU     $08
001C8C 0F9C8C -> $0004                PERR2           EQU     $04
001C8C 0F9C8C -> $0002                PERR1           EQU     $02
001C8C 0F9C8C -> $0001                PERR0           EQU     $01
001C8C 0F9C8C -> $036D                PPSR            EQU     $036D
001C8C 0F9C8C -> $0080                PPSR7           EQU     $80
001C8C 0F9C8C -> $0040                PPSR6           EQU     $40
001C8C 0F9C8C -> $0020                PPSR5           EQU     $20
001C8C 0F9C8C -> $0010                PPSR4           EQU     $10
001C8C 0F9C8C -> $0008                PPSR3           EQU     $08
001C8C 0F9C8C -> $0004                PPSR2           EQU     $04
001C8C 0F9C8C -> $0002                PPSR1           EQU     $02
001C8C 0F9C8C -> $0001                PPSR0           EQU     $01
001C8C 0F9C8C -> $036F                PTRRR           EQU     $036F
001C8C 0F9C8C -> $0080                PTRRR7          EQU     $80
001C8C 0F9C8C -> $0040                PTRRR6          EQU     $40
001C8C 0F9C8C -> $0020                PTRRR5          EQU     $20
001C8C 0F9C8C -> $0010                PTRRR4          EQU     $10
001C8C 0F9C8C -> $0008                PTRRR3          EQU     $08
001C8C 0F9C8C -> $0004                PTRRR2          EQU     $04
001C8C 0F9C8C -> $0002                PTRRR1          EQU     $02
001C8C 0F9C8C -> $0001                PTRRR0          EQU     $01
001C8C 0F9C8C -> $0370                PTL             EQU     $0370
001C8C 0F9C8C -> $0080                PTL7            EQU     $80
001C8C 0F9C8C -> $0040                PTL6            EQU     $40
001C8C 0F9C8C -> $0020                PTL5            EQU     $20
001C8C 0F9C8C -> $0010                PTL4            EQU     $10
001C8C 0F9C8C -> $0008                PTL3            EQU     $08
001C8C 0F9C8C -> $0004                PTL2            EQU     $04
001C8C 0F9C8C -> $0002                PTL1            EQU     $02
001C8C 0F9C8C -> $0001                PTL0            EQU     $01
001C8C 0F9C8C -> $0371                PTIL            EQU     $0371
001C8C 0F9C8C -> $0080                PTIL7           EQU     $80
001C8C 0F9C8C -> $0040                PTIL6           EQU     $40
001C8C 0F9C8C -> $0020                PTIL5           EQU     $20
001C8C 0F9C8C -> $0010                PTIL4           EQU     $10
001C8C 0F9C8C -> $0008                PTIL3           EQU     $08
001C8C 0F9C8C -> $0004                PTIL2           EQU     $04
001C8C 0F9C8C -> $0002                PTIL1           EQU     $02
001C8C 0F9C8C -> $0001                PTIL0           EQU     $01
001C8C 0F9C8C -> $0372                DDRL            EQU     $0372
001C8C 0F9C8C -> $0080                DDRL7           EQU     $80
001C8C 0F9C8C -> $0040                DDRL6           EQU     $40
001C8C 0F9C8C -> $0020                DDRL5           EQU     $20
001C8C 0F9C8C -> $0010                DDRL4           EQU     $10
001C8C 0F9C8C -> $0008                DDRL3           EQU     $08
001C8C 0F9C8C -> $0004                DDRL2           EQU     $04
001C8C 0F9C8C -> $0002                DDRL1           EQU     $02
001C8C 0F9C8C -> $0001                DDRL0           EQU     $01
001C8C 0F9C8C -> $0373                RDRL            EQU     $0373
001C8C 0F9C8C -> $0080                RDRL7           EQU     $80
001C8C 0F9C8C -> $0040                RDRL6           EQU     $40
001C8C 0F9C8C -> $0020                RDRL5           EQU     $20
001C8C 0F9C8C -> $0010                RDRL4           EQU     $10
001C8C 0F9C8C -> $0008                RDRL3           EQU     $08
001C8C 0F9C8C -> $0004                RDRL2           EQU     $04
001C8C 0F9C8C -> $0002                RDRL1           EQU     $02
001C8C 0F9C8C -> $0001                RDRL0           EQU     $01
001C8C 0F9C8C -> $0374                PERL            EQU     $0374
001C8C 0F9C8C -> $0080                PERL7           EQU     $80
001C8C 0F9C8C -> $0040                PERL6           EQU     $40
001C8C 0F9C8C -> $0020                PERL5           EQU     $20
001C8C 0F9C8C -> $0010                PERL4           EQU     $10
001C8C 0F9C8C -> $0008                PERL3           EQU     $08
001C8C 0F9C8C -> $0004                PERL2           EQU     $04
001C8C 0F9C8C -> $0002                PERL1           EQU     $02
001C8C 0F9C8C -> $0001                PERL0           EQU     $01
001C8C 0F9C8C -> $0375                PPSL            EQU     $0375
001C8C 0F9C8C -> $0080                PPSL7           EQU     $80
001C8C 0F9C8C -> $0040                PPSL6           EQU     $40
001C8C 0F9C8C -> $0020                PPSL5           EQU     $20
001C8C 0F9C8C -> $0010                PPSL4           EQU     $10
001C8C 0F9C8C -> $0008                PPSL3           EQU     $08
001C8C 0F9C8C -> $0004                PPSL2           EQU     $04
001C8C 0F9C8C -> $0002                PPSL1           EQU     $02
001C8C 0F9C8C -> $0001                PPSL0           EQU     $01
001C8C 0F9C8C -> $0376                WOML            EQU     $0376
001C8C 0F9C8C -> $0080                WOML7           EQU     $80
001C8C 0F9C8C -> $0040                WOML6           EQU     $40
001C8C 0F9C8C -> $0020                WOML5           EQU     $20
001C8C 0F9C8C -> $0010                WOML4           EQU     $10
001C8C 0F9C8C -> $0008                WOML3           EQU     $08
001C8C 0F9C8C -> $0004                WOML2           EQU     $04
001C8C 0F9C8C -> $0002                WOML1           EQU     $02
001C8C 0F9C8C -> $0001                WOML0           EQU     $01
001C8C 0F9C8C -> $0377                PTLRR           EQU     $0377
001C8C 0F9C8C -> $0080                PTLRR7          EQU     $80
001C8C 0F9C8C -> $0040                PTLRR6          EQU     $40
001C8C 0F9C8C -> $0020                PTLRR5          EQU     $20
001C8C 0F9C8C -> $0010                PTLRR4          EQU     $10
001C8C 0F9C8C -> $0378                PTF             EQU     $0378
001C8C 0F9C8C -> $0080                PTF7            EQU     $80
001C8C 0F9C8C -> $0040                PTF6            EQU     $40
001C8C 0F9C8C -> $0020                PTF5            EQU     $20
001C8C 0F9C8C -> $0010                PTF4            EQU     $10
001C8C 0F9C8C -> $0008                PTF3            EQU     $08
001C8C 0F9C8C -> $0004                PTF2            EQU     $04
001C8C 0F9C8C -> $0002                PTF1            EQU     $02
001C8C 0F9C8C -> $0001                PTF0            EQU     $01
001C8C 0F9C8C -> $0379                PTIF            EQU     $0379
001C8C 0F9C8C -> $0080                PTIF7           EQU     $80
001C8C 0F9C8C -> $0040                PTIF6           EQU     $40
001C8C 0F9C8C -> $0020                PTIF5           EQU     $20
001C8C 0F9C8C -> $0010                PTIF4           EQU     $10
001C8C 0F9C8C -> $0008                PTIF3           EQU     $08
001C8C 0F9C8C -> $0004                PTIF2           EQU     $04
001C8C 0F9C8C -> $0002                PTIF1           EQU     $02
001C8C 0F9C8C -> $0001                PTIF0           EQU     $01
001C8C 0F9C8C -> $037A                DDRF            EQU     $037A
001C8C 0F9C8C -> $0080                DDRF7           EQU     $80
001C8C 0F9C8C -> $0040                DDRF6           EQU     $40
001C8C 0F9C8C -> $0020                DDRF5           EQU     $20
001C8C 0F9C8C -> $0010                DDRF4           EQU     $10
001C8C 0F9C8C -> $0008                DDRF3           EQU     $08
001C8C 0F9C8C -> $0004                DDRF2           EQU     $04
001C8C 0F9C8C -> $0002                DDRF1           EQU     $02
001C8C 0F9C8C -> $0001                DDRF0           EQU     $01
001C8C 0F9C8C -> $037B                RDRF            EQU     $037B
001C8C 0F9C8C -> $0080                RDRF7           EQU     $80
001C8C 0F9C8C -> $0040                RDRF6           EQU     $40
001C8C 0F9C8C -> $0020                RDRF5           EQU     $20
001C8C 0F9C8C -> $0010                RDRF4           EQU     $10
001C8C 0F9C8C -> $0008                RDRF3           EQU     $08
001C8C 0F9C8C -> $0004                RDRF2           EQU     $04
001C8C 0F9C8C -> $0002                RDRF1           EQU     $02
001C8C 0F9C8C -> $0001                RDRF0           EQU     $01
001C8C 0F9C8C -> $037C                PERF            EQU     $037C
001C8C 0F9C8C -> $0080                PERF7           EQU     $80
001C8C 0F9C8C -> $0040                PERF6           EQU     $40
001C8C 0F9C8C -> $0020                PERF5           EQU     $20
001C8C 0F9C8C -> $0010                PERF4           EQU     $10
001C8C 0F9C8C -> $0008                PERF3           EQU     $08
001C8C 0F9C8C -> $0004                PERF2           EQU     $04
001C8C 0F9C8C -> $0002                PERF1           EQU     $02
001C8C 0F9C8C -> $0001                PERF0           EQU     $01
001C8C 0F9C8C -> $037D                PPSF            EQU     $037D
001C8C 0F9C8C -> $0080                PPSF7           EQU     $80
001C8C 0F9C8C -> $0040                PPSF6           EQU     $40
001C8C 0F9C8C -> $0020                PPSF5           EQU     $20
001C8C 0F9C8C -> $0010                PPSF4           EQU     $10
001C8C 0F9C8C -> $0008                PPSF3           EQU     $08
001C8C 0F9C8C -> $0004                PPSF2           EQU     $04
001C8C 0F9C8C -> $0002                PPSF1           EQU     $02
001C8C 0F9C8C -> $0001                PPSF0           EQU     $01
001C8C 0F9C8C -> $037F                PTFRR           EQU     $037F
001C8C 0F9C8C -> $0020                PTFRR5          EQU     $20
001C8C 0F9C8C -> $0010                PTFRR4          EQU     $10
001C8C 0F9C8C -> $0008                PTFRR3          EQU     $08
001C8C 0F9C8C -> $0004                PTFRR2          EQU     $04
001C8C 0F9C8C -> $0002                PTFRR1          EQU     $02
001C8C 0F9C8C -> $0001                PTFRR0          EQU     $01
001C8C 0F9C8C -> $0380                XGMCTL          EQU     $0380
001C8C 0F9C8C -> $8000                XGEM            EQU     $8000
001C8C 0F9C8C -> $4000                XGFRZM          EQU     $4000
001C8C 0F9C8C -> $2000                XGDBGM          EQU     $2000
001C8C 0F9C8C -> $1000                XGSSM           EQU     $1000
001C8C 0F9C8C -> $0800                XGFACTM         EQU     $0800
001C8C 0F9C8C -> $0200                XGSWEFM         EQU     $0200
001C8C 0F9C8C -> $0100                XGIEM           EQU     $0100
001C8C 0F9C8C -> $0080                XGE             EQU     $0080
001C8C 0F9C8C -> $0040                XGFRZ           EQU     $0040
001C8C 0F9C8C -> $0020                XGDBG           EQU     $0020
001C8C 0F9C8C -> $0010                XGSS            EQU     $0010
001C8C 0F9C8C -> $0008                XGFACT          EQU     $0008
001C8C 0F9C8C -> $0002                XGSWEF          EQU     $0002
001C8C 0F9C8C -> $0001                XGIE            EQU     $0001
001C8C 0F9C8C -> $0382                XGCHID          EQU     $0382
001C8C 0F9C8C -> $0383                XGCHPL          EQU     $0383
001C8C 0F9C8C -> $0385                XGISPSEL        EQU     $0385
001C8C 0F9C8C -> $0386                XGISP31         EQU     $0386
001C8C 0F9C8C -> $0386                XGISP74         EQU     $0386
001C8C 0F9C8C -> $0386                XGVBR           EQU     $0386
001C8C 0F9C8C -> $0388                XGIF_7F_78      EQU     $0388
001C8C 0F9C8C -> $0080                XGIF_7F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_7E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_7D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_7C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_7B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_7A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_79         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_78         EQU     $01
001C8C 0F9C8C -> $0389                XGIF_77_70      EQU     $0389
001C8C 0F9C8C -> $0080                XGIF_77         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_76         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_75         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_74         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_73         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_72         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_71         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_70         EQU     $01
001C8C 0F9C8C -> $038A                XGIF_6F_68      EQU     $038A
001C8C 0F9C8C -> $0080                XGIF_6F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_6E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_6D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_6C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_6B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_6A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_69         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_68         EQU     $01
001C8C 0F9C8C -> $038B                XGIF_67_60      EQU     $038B
001C8C 0F9C8C -> $0080                XGIF_67         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_66         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_65         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_64         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_63         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_62         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_61         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_60         EQU     $01
001C8C 0F9C8C -> $038C                XGIF_5F_58      EQU     $038C
001C8C 0F9C8C -> $0080                XGIF_5F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_5E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_5D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_5C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_5B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_5A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_59         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_58         EQU     $01
001C8C 0F9C8C -> $038D                XGIF_57_50      EQU     $038D
001C8C 0F9C8C -> $0080                XGIF_57         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_56         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_55         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_54         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_53         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_52         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_51         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_50         EQU     $01
001C8C 0F9C8C -> $038E                XGIF_4F_48      EQU     $038E
001C8C 0F9C8C -> $0080                XGIF_4F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_4E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_4D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_4C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_4B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_4A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_49         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_48         EQU     $01
001C8C 0F9C8C -> $038F                XGIF_47_40      EQU     $038F
001C8C 0F9C8C -> $0080                XGIF_47         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_46         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_45         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_44         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_43         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_42         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_41         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_40         EQU     $01
001C8C 0F9C8C -> $0390                XGIF_3F_38      EQU     $0390
001C8C 0F9C8C -> $0080                XGIF_3F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_3E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_3D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_3C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_3B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_3A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_39         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_38         EQU     $01
001C8C 0F9C8C -> $0391                XGIF_37_30      EQU     $0391
001C8C 0F9C8C -> $0080                XGIF_37         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_36         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_35         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_34         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_33         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_32         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_31         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_30         EQU     $01
001C8C 0F9C8C -> $0392                XGIF_2F_28      EQU     $0392
001C8C 0F9C8C -> $0080                XGIF_2F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_2E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_2D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_2C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_2B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_2A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_29         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_28         EQU     $01
001C8C 0F9C8C -> $0393                XGIF_27_20      EQU     $0393
001C8C 0F9C8C -> $0080                XGIF_27         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_26         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_25         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_24         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_23         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_22         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_21         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_20         EQU     $01
001C8C 0F9C8C -> $0394                XGIF_1F_18      EQU     $0394
001C8C 0F9C8C -> $0080                XGIF_1F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_1E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_1D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_1C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_1B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_1A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_19         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_18         EQU     $01
001C8C 0F9C8C -> $0395                XGIF_17_10      EQU     $0395
001C8C 0F9C8C -> $0080                XGIF_17         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_16         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_15         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_14         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_13         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_12         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_11         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_10         EQU     $01
001C8C 0F9C8C -> $0396                XGIF_0F_08      EQU     $0396
001C8C 0F9C8C -> $0080                XGIF_0F         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_0E         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_0D         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_0C         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_0B         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_0A         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_09         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_08         EQU     $01
001C8C 0F9C8C -> $0397                XGIF_07_00      EQU     $0397
001C8C 0F9C8C -> $0080                XGIF_07         EQU     $80
001C8C 0F9C8C -> $0040                XGIF_06         EQU     $40
001C8C 0F9C8C -> $0020                XGIF_05         EQU     $20
001C8C 0F9C8C -> $0010                XGIF_04         EQU     $10
001C8C 0F9C8C -> $0008                XGIF_03         EQU     $08
001C8C 0F9C8C -> $0004                XGIF_02         EQU     $04
001C8C 0F9C8C -> $0002                XGIF_01         EQU     $02
001C8C 0F9C8C -> $0001                XGIF_00         EQU     $01
001C8C 0F9C8C -> $0398                XGSWT           EQU     $0398
001C8C 0F9C8C -> $039A                XGSEM           EQU     $039A
001C8C 0F9C8C -> $039D                XGCCR           EQU     $039D
001C8C 0F9C8C -> $0008                XGN             EQU     $08
001C8C 0F9C8C -> $0004                XGZ             EQU     $04
001C8C 0F9C8C -> $0002                XGV             EQU     $02
001C8C 0F9C8C -> $0001                XGC             EQU     $01
001C8C 0F9C8C -> $039E                XGPC            EQU     $039E
001C8C 0F9C8C -> $03A2                XGR1            EQU     $03A2
001C8C 0F9C8C -> $03A4                XGR2            EQU     $03A4
001C8C 0F9C8C -> $03A6                XGR3            EQU     $03A6
001C8C 0F9C8C -> $03A8                XGR4            EQU     $03A8
001C8C 0F9C8C -> $03AA                XGR5            EQU     $03AA
001C8C 0F9C8C -> $03AC                XGR6            EQU     $03AC
001C8C 0F9C8C -> $03AE                XGR7            EQU     $03AE
001C8C 0F9C8C -> $03D0                TIM             EQU     $03D0
001C8C 0F9C8C -> $03D0                TIM_TIOS        EQU     $03D0
001C8C 0F9C8C -> $03D1                TIM_TCFORC      EQU     $03D1
001C8C 0F9C8C -> $03D2                TIM_TOC7M       EQU     $03D2
001C8C 0F9C8C -> $03D3                TIM_TOC7D       EQU     $03D3
001C8C 0F9C8C -> $03D4                TIM_TCNT        EQU     $03D4
001C8C 0F9C8C -> $03D6                TIM_TSCR1       EQU     $03D6
001C8C 0F9C8C -> $03D7                TIM_TTOV        EQU     $03D7
001C8C 0F9C8C -> $03D8                TIM_TCTL1       EQU     $03D8
001C8C 0F9C8C -> $03D9                TIM_TCTL2       EQU     $03D9
001C8C 0F9C8C -> $03DA                TIM_TCTL3       EQU     $03DA
001C8C 0F9C8C -> $03DB                TIM_TCTL4       EQU     $03DB
001C8C 0F9C8C -> $03DC                TIM_TIE         EQU     $03DC
001C8C 0F9C8C -> $03DD                TIM_TSCR2       EQU     $03DD
001C8C 0F9C8C -> $03DE                TIM_TFLG1       EQU     $03DE
001C8C 0F9C8C -> $03DF                TIM_TFLG2       EQU     $03DF
001C8C 0F9C8C -> $03E0                TIM_TC0         EQU     $03E0
001C8C 0F9C8C -> $0052                TIM_TC1         EQU     $0052
001C8C 0F9C8C -> $0054                TIM_TC2         EQU     $0054
001C8C 0F9C8C -> $0056                TIM_TC3         EQU     $0056
001C8C 0F9C8C -> $0058                TIM_TC4         EQU     $0058
001C8C 0F9C8C -> $005A                TIM_TC5         EQU     $005A
001C8C 0F9C8C -> $005C                TIM_TC6         EQU     $005C
001C8C 0F9C8C -> $005E                TIM_TC7         EQU     $005E
001C8C 0F9C8C -> $03F0                TIM_PACTL       EQU     $03F0
001C8C 0F9C8C -> $03F1                TIM_PAFLG       EQU     $03F1
001C8C 0F9C8C -> $03F2                TIM_PACNT       EQU     $03F2
001C8C 0F9C8C -> $03F2                TIM_PACN1       EQU     $03F2
001C8C 0F9C8C -> $03F2                TIM_PACNH       EQU     $03F2
001C8C 0F9C8C -> $03F3                TIM_PACN0       EQU     $03F3
001C8C 0F9C8C -> $03F3                TIM_PACNL       EQU     $03F3
001C8C 0F9C8C -> $03FC                TIM_OCPD        EQU     $03FC
001C8C 0F9C8C -> $03FE                TIM_PTPSR       EQU     $03FE
                                      ;NVM locations
001C8C 0F9C8C -> $FF00                BAKEY0          EQU     $FF00
001C8C 0F9C8C -> $FF02                BAKEY1          EQU     $FF02
001C8C 0F9C8C -> $FF04                BAKEY2          EQU     $FF04
001C8C 0F9C8C -> $FF06                BAKEY3          EQU     $FF06
001C8C 0F9C8C -> $FF0C                NVFPROT         EQU     $FF0C
001C8C 0F9C8C -> $0080                FPOPEN          EQU     $80
001C8C 0F9C8C -> $0040                RNV6            EQU     $40
001C8C 0F9C8C -> $0020                FPHDIS          EQU     $20
001C8C 0F9C8C -> $0010                FPHS1           EQU     $10
001C8C 0F9C8C -> $0008                FPHS0           EQU     $08
001C8C 0F9C8C -> $0004                FPLDIS          EQU     $04
001C8C 0F9C8C -> $0002                FPLS1           EQU     $02
001C8C 0F9C8C -> $0001                FPLS0           EQU     $01
001C8C 0F9C8C -> $FF0D                NVEPROT         EQU     $FF0D
001C8C 0F9C8C -> $0080                EPOPEN          EQU     $80
001C8C 0F9C8C -> $0040                RNV6            EQU     $40
001C8C 0F9C8C -> $0020                RNV5            EQU     $20
001C8C 0F9C8C -> $0010                RNV4            EQU     $10
001C8C 0F9C8C -> $0008                EPDIS           EQU     $08
001C8C 0F9C8C -> $0004                EPS2            EQU     $04
001C8C 0F9C8C -> $0002                EPS1            EQU     $02
001C8C 0F9C8C -> $0001                EPS0            EQU     $01
001C8C 0F9C8C -> $FF0E                NVFOPT          EQU     $FF0E
001C8C 0F9C8C -> $0080                NV7             EQU     $80
001C8C 0F9C8C -> $0040                NV6             EQU     $40
001C8C 0F9C8C -> $0020                NV5             EQU     $20
001C8C 0F9C8C -> $0010                NV4             EQU     $10
001C8C 0F9C8C -> $0008                NV3             EQU     $08
001C8C 0F9C8C -> $0004                NV2             EQU     $04
001C8C 0F9C8C -> $0002                NV1             EQU     $02
001C8C 0F9C8C -> $0001                NV0             EQU     $01
001C8C 0F9C8C -> $FF0F                NVFSEC          EQU     $FF0F
001C8C 0F9C8C -> $0080                KEYEN1          EQU     $80
001C8C 0F9C8C -> $0040                KEYEN0          EQU     $40
001C8C 0F9C8C -> $0020                RNV5            EQU     $20
001C8C 0F9C8C -> $0010                RNV4            EQU     $10
001C8C 0F9C8C -> $0008                RNV3            EQU     $08
001C8C 0F9C8C -> $0004                RNV2            EQU     $04
001C8C 0F9C8C -> $0002                SEC1            EQU     $02
001C8C 0F9C8C -> $0001                SEC0            EQU     $01
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                GPIO_VARS_END           EQU     *
001AF3 0F9AF3 -> $F9AF3               GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001310 0F9310                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
001310 0F9310 -> $1310                GPIO_CODE_END           EQU     *
001310 0F9310 -> $F9310               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                GPIO_TABS_END           EQU     *
001BA7 0F9BA7 -> $F9BA7               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Sizes:
001BA7 0F9BA7 -> $0800                MMAP_REG_SIZE           EQU      $0800  ;    2k
001BA7 0F9BA7 -> $1000                MMAP_EERAM_SIZE         EQU      $1000  ;    4k
001BA7 0F9BA7 -> $10000               MMAP_RAM_SIZE           EQU      $10000 ;   64k
001BA7 0F9BA7 -> $8000                MMAP_FLASH_SIZE         EQU      $8000  ; 1024k
                                      ;# Memory Locations
                                      ;Register space
001BA7 0F9BA7 -> $0000                MMAP_REG_START          EQU     $0000
001BA7 0F9BA7 -> $0800                MMAP_REG_END            EQU     $0800
001BA7 0F9BA7 -> $0000                MMAP_REG_START_LIN      EQU     MMAP_REG_START
001BA7 0F9BA7 -> $0800                MMAP_REG_END_LIN        EQU     MMAP_REG_END
                                      ;EEE RAM
001BA7 0F9BA7 -> $0800                MMAP_EERAM_WIN_START    EQU     $0800
001BA7 0F9BA7 -> $0C00                MMAP_EERAM_WIN_END      EQU     $0C00
001BA7 0F9BA7 -> $0C00                MMAP_EERAM_FF_START     EQU     $0C00
001BA7 0F9BA7 -> $1000                MMAP_EERAM_FF_END       EQU     $1000
001BA7 0F9BA7 -> $13FC00              MMAP_EERAM_FF_START_LIN EQU     $13_FC00
001BA7 0F9BA7 -> $140000              MMAP_EERAM_FF_END_LIN   EQU     $14_0000
                                      ;RAM
001BA7 0F9BA7 -> $1000                MMAP_RAM_WIN_START      EQU     $1000
001BA7 0F9BA7 -> $2000                MMAP_RAM_WIN_END        EQU     $2000
001BA7 0F9BA7 -> $1000                MMAP_RAM_F9_START       EQU     $1000
001BA7 0F9BA7 -> $2000                MMAP_RAM_F9_END         EQU     $2000
001BA7 0F9BA7 -> $F9000               MMAP_RAM_F9_START_LIN   EQU     $0F_9000
001BA7 0F9BA7 -> $FA000               MMAP_RAM_F9_END_LIN     EQU     $0F_A000
001BA7 0F9BA7 -> $2000                MMAP_RAM_FA_START       EQU     $2000
001BA7 0F9BA7 -> $3000                MMAP_RAM_FA_END         EQU     $3000
001BA7 0F9BA7 -> $FA000               MMAP_RAM_FA_START_LIN   EQU     $0F_A000
001BA7 0F9BA7 -> $FB000               MMAP_RAM_FA_END_LIN     EQU     $0F_B000
001BA7 0F9BA7 -> $3000                MMAP_RAM_FB_START       EQU     $3000
001BA7 0F9BA7 -> $4000                MMAP_RAM_FB_END         EQU     $4000
001BA7 0F9BA7 -> $FB000               MMAP_RAM_FB_START_LIN   EQU     $0F_B000
001BA7 0F9BA7 -> $FC000               MMAP_RAM_FB_END_LIN     EQU     $0F_C000
001BA7 0F9BA7 -> $4000                MMAP_RAM_FC_START       EQU     $4000
001BA7 0F9BA7 -> $5000                MMAP_RAM_FC_END         EQU     $5000
001BA7 0F9BA7 -> $FC000               MMAP_RAM_FC_START_LIN   EQU     $0F_C000
001BA7 0F9BA7 -> $FD000               MMAP_RAM_FC_END_LIN     EQU     $0F_D000
001BA7 0F9BA7 -> $5000                MMAP_RAM_FD_START       EQU     $5000
001BA7 0F9BA7 -> $6000                MMAP_RAM_FD_END         EQU     $6000
001BA7 0F9BA7 -> $FD000               MMAP_RAM_FD_START_LIN   EQU     $0F_D000
001BA7 0F9BA7 -> $FE000               MMAP_RAM_FD_END_LIN     EQU     $0F_E000
001BA7 0F9BA7 -> $6000                MMAP_RAM_FE_START       EQU     $6000
001BA7 0F9BA7 -> $7000                MMAP_RAM_FE_END         EQU     $7000
001BA7 0F9BA7 -> $FE000               MMAP_RAM_FE_START_LIN   EQU     $0F_E000
001BA7 0F9BA7 -> $FF000               MMAP_RAM_FE_END_LIN     EQU     $0F_F000
001BA7 0F9BA7 -> $7000                MMAP_RAM_FF_START       EQU     $7000
001BA7 0F9BA7 -> $8000                MMAP_RAM_FF_END         EQU     $8000
001BA7 0F9BA7 -> $FF000               MMAP_RAM_FF_START_LIN   EQU     $0F_F000
001BA7 0F9BA7 -> $100000              MMAP_RAM_FF_END_LIN     EQU     $10_0000
                                      ;Combined RAM
001BA7 0F9BA7 -> $0800                MMAP_RAM_START          EQU     MMAP_EERAM_WIN_START
001BA7 0F9BA7 -> $8000                MMAP_RAM_END            EQU     MMAP_RAM_FF_END
                                      ;Flash
001BA7 0F9BA7 -> $8000                MMAP_FLASHWIN_START     EQU     $8000
001BA7 0F9BA7 -> $C000                MMAP_FLASHWIN_END       EQU     $C000
001BA7 0F9BA7 -> $C000                MMAP_FLASH_FF_START     EQU     $C000
001BA7 0F9BA7 -> $10000               MMAP_FLASH_FF_END       EQU     $10000
001BA7 0F9BA7 -> $7FC000              MMAP_FLASH_FF_START_LIN EQU     $7F_C000
001BA7 0F9BA7 -> $800000              MMAP_FLASH_FF_END_LIN   EQU     $80_0000
                                      ;#MPU desccriptors
001BA7 0F9BA7 -> $0000                MMAP_D_REG_LOADDR       EQU     MMAP_REG_START_LIN      ;register space
001BA7 0F9BA7 -> $07FF                MMAP_D_REG_HIADDR       EQU     MMAP_REG_END_LIN-1
001BA7 0F9BA7 -> $0040                MMAP_D_REG_PROTECT      EQU     NEX                     ;read and write
001BA7 0F9BA7 -> $00C0                MMAP_D_REG_BYTE0        EQU            (MSTR0|MSTR1|(MMAP_D_REG_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_REG_BYTE1        EQU                        ((MMAP_D_REG_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_REG_BYTE2        EQU                        ((MMAP_D_REG_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $0040                MMAP_D_REG_BYTE3        EQU     (MMAP_D_REG_PROTECT|(MMAP_D_REG_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_REG_BYTE4        EQU                        ((MMAP_D_REG_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_REG_BYTE5        EQU                        ((MMAP_D_REG_HIADDR>>03))&$FF
001BA7 0F9BA7 -> $0800                MMAP_D_URAM_LOADDR      EQU     MMAP_REG_END_LIN        ;unimplemented RAM space
001BA7 0F9BA7 -> $EFFFF               MMAP_D_URAM_HIADDR      EQU     (MMAP_RAM_FF_END_LIN-MMAP_RAM_SIZE)-1
001BA7 0F9BA7 -> $00C0                MMAP_D_URAM_PROTECT     EQU     WP|NEX                  ;read only
001BA7 0F9BA7 -> $00C0                MMAP_D_URAM_BYTE0       EQU             (MSTR0|MSTR1|(MMAP_D_URAM_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $0001                MMAP_D_URAM_BYTE1       EQU                         ((MMAP_D_URAM_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_URAM_BYTE2       EQU                         ((MMAP_D_URAM_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $00C1                MMAP_D_URAM_BYTE3       EQU     (MMAP_D_URAM_PROTECT|(MMAP_D_URAM_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $00DF                MMAP_D_URAM_BYTE4       EQU                         ((MMAP_D_URAM_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_URAM_BYTE5       EQU                         ((MMAP_D_URAM_HIADDR>>03))&$FF
001BA7 0F9BA7 -> $F0000               MMAP_D_RAM_LOADDR       EQU     MMAP_RAM_FF_END_LIN-MMAP_RAM_SIZE;RAM
001BA7 0F9BA7 -> $FFFFF               MMAP_D_RAM_HIADDR       EQU     MMAP_RAM_FF_END_LIN-1
001BA7 0F9BA7 -> $0000                MMAP_D_RAM_PROTECT      EQU     0                       ;read, write, and execute
001BA7 0F9BA7 -> $00C1                MMAP_D_RAM_BYTE0        EQU             (MSTR0|MSTR1|(MMAP_D_RAM_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $00E0                MMAP_D_RAM_BYTE1        EQU                         ((MMAP_D_RAM_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_RAM_BYTE2        EQU                         ((MMAP_D_RAM_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $0001                MMAP_D_RAM_BYTE3        EQU      (MMAP_D_RAM_PROTECT|(MMAP_D_RAM_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_RAM_BYTE4        EQU                         ((MMAP_D_RAM_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_RAM_BYTE5        EQU                         ((MMAP_D_RAM_HIADDR>>03))&$FF
001BA7 0F9BA7 -> $100000              MMAP_D_UEERAM_LOADDR    EQU     MMAP_RAM_FF_END_LIN     ;unimplemented EERAM space
001BA7 0F9BA7 -> $13EFFF              MMAP_D_UEERAM_HIADDR    EQU     (MMAP_EERAM_FF_END_LIN-MMAP_EERAM_SIZE)-1
001BA7 0F9BA7 -> $00C0                MMAP_D_UEERAM_PROTECT   EQU     WP|NEX                  ;read only
001BA7 0F9BA7 -> $00C2                MMAP_D_UEERAM_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UEERAM_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_UEERAM_BYTE1     EQU                         ((MMAP_D_UEERAM_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_UEERAM_BYTE2     EQU                         ((MMAP_D_UEERAM_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $00C2                MMAP_D_UEERAM_BYTE3     EQU   (MMAP_D_UEERAM_PROTECT|(MMAP_D_UEERAM_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $007D                MMAP_D_UEERAM_BYTE4     EQU                         ((MMAP_D_UEERAM_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_UEERAM_BYTE5     EQU                         ((MMAP_D_UEERAM_HIADDR>>03))&$FF
001BA7 0F9BA7 -> $13F000              MMAP_D_EERAM_LOADDR     EQU     MMAP_EERAM_FF_END_LIN-MMAP_EERAM_SIZE;EERAM
001BA7 0F9BA7 -> $13FFFF              MMAP_D_EERAM_HIADDR     EQU     MMAP_EERAM_FF_END_LIN-1
001BA7 0F9BA7 -> $0000                MMAP_D_EERAM_PROTECT    EQU     0                       ;read, write and execute
001BA7 0F9BA7 -> $00C2                MMAP_D_EERAM_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_EERAM_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $007E                MMAP_D_EERAM_BYTE1      EQU                         ((MMAP_D_EERAM_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_EERAM_BYTE2      EQU                         ((MMAP_D_EERAM_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $0002                MMAP_D_EERAM_BYTE3      EQU    (MMAP_D_EERAM_PROTECT|(MMAP_D_EERAM_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $007F                MMAP_D_EERAM_BYTE4      EQU                         ((MMAP_D_EERAM_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_EERAM_BYTE5      EQU                         ((MMAP_D_EERAM_HIADDR>>03))&$FF
001BA7 0F9BA7 -> $140000              MMAP_D_UFLASH_LOADDR    EQU     MMAP_EERAM_FF_END_LIN   ;unimplemented flash space
001BA7 0F9BA7 -> $7F7FFF              MMAP_D_UFLASH_HIADDR    EQU     (MMAP_FLASH_FF_END_LIN-MMAP_FLASH_SIZE)-1
001BA7 0F9BA7 -> $00C0                MMAP_D_UFLASH_PROTECT   EQU     WP|NEX                  ;read only
001BA7 0F9BA7 -> $00C2                MMAP_D_UFLASH_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UFLASH_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $0080                MMAP_D_UFLASH_BYTE1     EQU                         ((MMAP_D_UFLASH_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_UFLASH_BYTE2     EQU                         ((MMAP_D_UFLASH_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $00CF                MMAP_D_UFLASH_BYTE3     EQU   (MMAP_D_UFLASH_PROTECT|(MMAP_D_UFLASH_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $00EF                MMAP_D_UFLASH_BYTE4     EQU                         ((MMAP_D_UFLASH_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_UFLASH_BYTE5     EQU                         ((MMAP_D_UFLASH_HIADDR>>03))&$FF
001BA7 0F9BA7 -> $7F8000              MMAP_D_FLASH_LOADDR     EQU     MMAP_FLASH_FF_END_LIN-MMAP_FLASH_SIZE;Flash
001BA7 0F9BA7 -> $7FFFFF              MMAP_D_FLASH_HIADDR     EQU     MMAP_FLASH_FF_END_LIN-1
001BA7 0F9BA7 -> $0080                MMAP_D_FLASH_PROTECT    EQU     WP                      ;read and execute
001BA7 0F9BA7 -> $00CF                MMAP_D_FLASH_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_FLASH_LOADDR>>19))&$FF
001BA7 0F9BA7 -> $00F0                MMAP_D_FLASH_BYTE1      EQU                         ((MMAP_D_FLASH_LOADDR>>11))&$FF
001BA7 0F9BA7 -> $0000                MMAP_D_FLASH_BYTE2      EQU                         ((MMAP_D_FLASH_LOADDR>>03))&$FF
001BA7 0F9BA7 -> $008F                MMAP_D_FLASH_BYTE3      EQU    (MMAP_D_FLASH_PROTECT|(MMAP_D_FLASH_HIADDR>>19))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_FLASH_BYTE4      EQU                         ((MMAP_D_FLASH_HIADDR>>11))&$FF
001BA7 0F9BA7 -> $00FF                MMAP_D_FLASH_BYTE5      EQU                         ((MMAP_D_FLASH_HIADDR>>03))&$FF
                                      ;# Vector table
001BA7 0F9BA7 -> $7F10                VECTAB_START            EQU     $7F10
001BA7 0F9BA7 -> $FFF10               VECTAB_START_LIN        EQU     $0F_FF10
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                MMAP_VARS_END           EQU     *
001AF3 0F9AF3 -> $F9AF3               MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001310 0F9310                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
001310 0F9310 -> $1310                MMAP_CODE_END           EQU     *
001310 0F9310 -> $F9310               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                MMAP_TABS_END           EQU     *
001BA7 0F9BA7 -> $F9BA7               MMAP_TABS_END_LIN       EQU     @
                                      ;Range checks
                                      ;------------
                                      ;General stack range check enable
001BA7 0F9BA7 -> $0001                SSTACK_CHECK_OFF        EQU     1               ;default is off
                                      ;Debug code
                                      ;----------
001BA7 0F9BA7 -> $0001                SSTACK_DEBUG_OFF        EQU     1               ;default is off
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Stack size
                                      ;----------
001BA7 0F9BA7 -> $6284                SSTACK_SIZE             EQU     (SSTACK_BOTTOM-SSTACK_TOP)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                SSTACK_VARS_END         EQU     *
001AF3 0F9AF3 -> $F9AF3               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Stack space                                                                 #
                                      ;###############################################################################
001C8C 0F9C8C                                                 ORG     SSTACK_TOP, SSTACK_TOP_LIN
                                                              ;Declare RAM space (to be recognized by the assembler)
001C8C 0F9C8C                                                 DS      SSTACK_BOTTOM-SSTACK_TOP
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001310 0F9310                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
001310 0F9310 -> $1310                SSTACK_CODE_END         EQU     *
001310 0F9310 -> $F9310               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                SSTACK_TABS_END         EQU     *
001BA7 0F9BA7 -> $F9BA7               SSTACK_TABS_END_LIN     EQU     @
                                      ;Range checks
                                      ;------------
                                      ;General stack range checkenable
001BA7 0F9BA7 -> $0001                ISTACK_CHECK_OFF        EQU     1               ;default is off
                                      ;Debug code
                                      ;----------
001BA7 0F9BA7 -> $0001                ISTACK_DEBUG_OFF        EQU     1               ;default is off
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Stack allocation
                                      ;----------------
001BA7 0F9BA7 -> $1C8C                ISTACK_TOP              EQU     SSTACK_TOP
001BA7 0F9BA7 -> $7F10                ISTACK_BOTTOM           EQU     SSTACK_BOTTOM
001BA7 0F9BA7 -> $6284                ISTACK_SIZE             EQU     SSTACK_SIZE
                                      ;S12 stack layout:
                                      ;        +----------------+
                                      ;        |      CCR       | SP+0
                                      ;        +----------------+
                                      ;        |       B        | SP+1
                                      ;        +----------------+
                                      ;        |       A        | SP+2
                                      ;        +----------------+
                                      ;        |       Xh       | SP+3
                                      ;        +----------------+
                                      ;        |       Xl       | SP+4
                                      ;        +----------------+
                                      ;        |       Yh       | SP+5
                                      ;        +----------------+
                                      ;        |       Yl       | SP+6
                                      ;        +----------------+
                                      ;        |      RTNh      | SP+7
                                      ;        +----------------+
                                      ;        |      RTNl      | SP+8
                                      ;        +----------------+
001BA7 0F9BA7 -> $0009                ISTACK_FRAME_SIZE       EQU     9
001BA7 0F9BA7 -> $0000                ISTACK_FRAME_CCR        EQU     0
001BA7 0F9BA7 -> $0001                ISTACK_FRAME_D          EQU     1
001BA7 0F9BA7 -> $0003                ISTACK_FRAME_X          EQU     3
001BA7 0F9BA7 -> $0005                ISTACK_FRAME_Y          EQU     5
001BA7 0F9BA7 -> $0007                ISTACK_FRAME_RTN        EQU     7
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                ISTACK_VARS_END         EQU     *
001AF3 0F9AF3 -> $F9AF3               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001310 0F9310                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
001310 0F9310 -> $1310                ISTACK_CODE_END         EQU     *
001310 0F9310 -> $F9310               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                ISTACK_TABS_END         EQU     *
001BA7 0F9BA7 -> $F9BA7               ISTACK_TABS_END_LIN     EQU     @
                                      ;#Reference clock divider
001BA7 0F9BA7 -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
001BA7 0F9BA7 -> $0004                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
001BA7 0F9BA7 -> $C480                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                CLOCK_VARS_END          EQU     *
001AF3 0F9AF3 -> $F9AF3               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001310 0F9310                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
001310 0F9310 -> $1310                CLOCK_ISR               EQU     *
001310 0F9310 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
001315 0F9315 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
00131A 0F931A MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00131A 0F931A 0B                                              RTI                                                      (ISTACK_RTI)
00131B 0F931B -> $131B                CLOCK_CODE_END          EQU     *
00131B 0F931B -> $F931B               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                CLOCK_TABS_END          EQU     *
001BA7 0F9BA7 -> $F9BA7               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
001BA7 0F9BA7 -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
001BA7 0F9BA7 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                COP_VARS_END            EQU     *
001AF3 0F9AF3 -> $F9AF3               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00131B 0F931B                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00131B 0F931B -> $131B                COP_CODE_END            EQU     *
00131B 0F931B -> $F931B               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                COP_TABS_END            EQU     *
001BA7 0F9BA7 -> $F9BA7               COP_TABS_END_LIN        EQU     @
                                      ;OCPD checks (only disable timer if all OCPD bits are set)
                                      ;---------------------------------------------------------
001BA7 0F9BA7 -> $0001                TIM_OCPD_CHECK_OFF      EQU     1               ;disable OCPD checks
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Timer frequency
                                      ;---------------
001BA7 0F9BA7 -> $17D7840             TIM_FREQ                EQU     CLOCK_BUS_FREQ/2        ;frequency in Hz
                                      ;Register offsets
                                      ;-----------------
001BA7 0F9BA7 -> $0000                TIOS_OFFSET             EQU     $0000
                                      ;TCFORC_OFFSET          EQU     $0001
                                      ;TOC7M_OFFSET           EQU     $0002
                                      ;TOC7D_OFFSET           EQU     $0003
001BA7 0F9BA7 -> $0004                TCNT_OFFSET             EQU     $0004
001BA7 0F9BA7 -> $0006                TSCR1_OFFSET            EQU     $0006
                                      ;TTOV_OFFSET            EQU     $0007
001BA7 0F9BA7 -> $0008                TCTL1_OFFSET            EQU     $0008
001BA7 0F9BA7 -> $0009                TCTL2_OFFSET            EQU     $0009
001BA7 0F9BA7 -> $000A                TCTL3_OFFSET            EQU     $000A
001BA7 0F9BA7 -> $000B                TCTL4_OFFSET            EQU     $000B
001BA7 0F9BA7 -> $000C                TIE_OFFSET              EQU     $000C
001BA7 0F9BA7 -> $000D                TSCR2_OFFSET            EQU     $000D
001BA7 0F9BA7 -> $000E                TFLG1_OFFSET            EQU     $000E
001BA7 0F9BA7 -> $000F                TFLG2_OFFSET            EQU     $000F
001BA7 0F9BA7 -> $0010                TC0_OFFSET              EQU     $0010
                                      ;TC1_OFFSET             EQU     $0012
                                      ;TC2_OFFSET             EQU     $0014
                                      ;TC3_OFFSET             EQU     $0016
                                      ;TC4_OFFSET             EQU     $0018
                                      ;TC5_OFFSET             EQU     $001A
                                      ;TC6_OFFSET             EQU     $001C
                                      ;TC7_OFFSET             EQU     $001E
                                      ;PACTL_OFFSET           EQU     $0020
                                      ;PAFLG_OFFSET           EQU     $0021
                                      ;PACNT_OFFSET           EQU     $0022
001BA7 0F9BA7 -> $002C                OCPD_OFFSET             EQU     $002C
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001AF3 0F9AF3 -> $1AF3                TIM_VARS_END            EQU     *
001AF3 0F9AF3 -> $F9AF3               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00131B 0F931B                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00131B 0F931B -> $131B                TIM_CODE_END            EQU     *
00131B 0F931B -> $F931B               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
001BA7 0F9BA7 -> $1BA7                TIM_TABS_END            EQU     *
001BA7 0F9BA7 -> $F9BA7               TIM_TABS_END_LIN        EQU     @
                                      ;Non-requrring sequences
001BA7 0F9BA7 -> $00C0                LED_NONREC_MASK         EQU     $C0             ;default is patterns 7 and 8
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Timer configuration
                                      ;#Timer enable
001BA7 0F9BA7 -> $0001                LED_TIM_ON              EQU     1
001BA7 0F9BA7 -> $0001                LED_TIM_ON              EQU     1
                                      ; TIOS
001BA7 0F9BA7 -> $0008                LED_TIOS_INIT           EQU     1<<LED_OC
                                      ;#Output compare register
001BA7 0F9BA7 -> $0056                LED_OC_TC               EQU     TC0+(2*LED_OC)
                                      ;#Timer intervall
                                      ;LED_OC_CNT_RST         EQU     (TIM_FREQ/4)>>17                ;1/4 sec
001BA7 0F9BA7 -> $002F                LED_OC_CNT_RST          EQU     TIM_FREQ>>19                    ;1/8 sec
                                      ;#Request masks
001BA7 0F9BA7 -> $00FE                LED_TIMED_REQS          EQU     $FE                             ;mask for timed requests
001BA7 0F9BA7 -> $00C0                LED_NONREC_REQS         EQU     $C0                             ;mask for non-recurring requests
                                      ;#Signal indexes
001BA7 0F9BA7 -> $0007                LED_SEQ_SHORT_PULSE     EQU     7
001BA7 0F9BA7 -> $0006                LED_SEQ_L0NG_PULSE      EQU     6
001BA7 0F9BA7 -> $0005                LED_SEQ_FAST_BLINK      EQU     5
001BA7 0F9BA7 -> $0004                LED_SEQ_SLOW_BLINK      EQU     4
001BA7 0F9BA7 -> $0003                LED_SEQ_SINGLE_GAP      EQU     3
001BA7 0F9BA7 -> $0002                LED_SEQ_DOUBLE_GAP      EQU     2
001BA7 0F9BA7 -> $0001                LED_SEQ_HEART_BEAT      EQU     1
001BA7 0F9BA7 -> $0000                LED_SEQ_ON              EQU     0
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 0F9AF3                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
                                      ;#Common variables
001AF3 0F9AF3                         LED_OC_CNT              DS      1                               ;OC event counter
001AF4 0F9AF4                         LED_SEQ_ITR             DS      1                               ;sequence iterator
                                      ;#LED status
001AF5 0F9AF5                         LED_C_REQ               DS      1                               ;signal requests
001AF6 0F9AF6                         LED_C_SEQ               DS      1                               ;signal selector
001AF7 0F9AF7                         LED_D_REQ               DS      1                               ;signal requests
001AF8 0F9AF8                         LED_D_SEQ               DS      1                               ;signal selector
001AF9 0F9AF9 -> $1AF9                LED_VARS_END            EQU     *
001AF9 0F9AF9 -> $F9AF9               LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00131B 0F931B                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
                                      ;#ISR
                                      ;----
00131B 0F931B -> $131B                LED_ISR                 EQU     *
                                                              ;Clear interrupt flag
00131B 0F931B MACRO                                           TIM_CLRIF LED_TIM, LED_OC               ;clear IF
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00131B 0F931B MACRO                                           TIM_MULT_CLRIF  LED_TIM, (1<<LED_OC)                     (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00131B 0F931B 18 0B 08 00 4E                                  MOVB    #1<<LED_OC, LED_TIM+TFLG1_OFFSET                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Check and adjust remaining time
001320 0F9320 FC 1A F3                                        LDD     LED_OC_CNT                      ;OC counter -> A, seq. iterator -> B
001323 0F9323 04 40 07                                        TBEQ    A, LED_ISR_1                    ;OC event count surpassed
001326 0F9326 04 00 04                                        DBEQ    A, LED_ISR_1                    ;OC event count reached
001329 0F9329 7A 1A F3                                        STAA    LED_OC_CNT                      ;update OC event count
00132C 0F932C MACRO                                           ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00132C 0F932C 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Advance sequence iterator iterator (0 in A, sequence iterator in B)
00132D 0F932D 18 0B 2F 1A F3          LED_ISR_1               MOVB    #LED_OC_CNT_RST, LED_OC_CNT     ;reset OC event count
001332 0F9332 54                                              LSRB                                    ;shift sequence iterator
001333 0F9333 26 61                                           BNE     LED_ISR_2                       ;update LEDs
                                                              ;Load sequence patterns (0 in A)
001335 0F9335 MACRO                                           LED_LOAD_SEQ    C                       ;load sequence for LED C
                                      ;#Helper functions                                                               (LED_LOAD_SEQ)
                                      ;#----------------                                                               (LED_LOAD_SEQ)
                                      ;#Load LED sequence                                                              (LED_LOAD_SEQ)
                                      ; args:   1: LED index (A..D)                                                    (LED_LOAD_SEQ)
                                      ;         A: accumulated requests                                                (LED_LOAD_SEQ)
                                      ; result: A: updated accumulated requests                                        (LED_LOAD_SEQ)
                                      ; SSTACK: none                                                                   (LED_LOAD_SEQ)
                                      ;         Y is preserved                                                         (LED_LOAD_SEQ)
001335 0F9335 BA 1A F5                                        ORAA    LED_C_REQ                      ;accumulate requests in A (LED_LOAD_SEQ)
001338 0F9338 F6 1A F5                                        LDAB    LED_C_REQ                      ;requests -> B    (LED_LOAD_SEQ)
00133B 0F933B 27 1D                                           BEQ     LED_LOAD_SEQ_4                  ;no requests (B==0) (LED_LOAD_SEQ)
00133D 0F933D 2A 09                                           BPL     LED_LOAD_SEQ_1                  ;no (non-recurring) short pulse requested (LED_LOAD_SEQ)
                                                              ;Short pulse (accumulated requests in A, requests in B)  (LED_LOAD_SEQ)
00133F 0F933F 1D 1A F5 80                                     BCLR    LED_C_REQ,#$80                 ;clear non-recurring short pulse request (LED_LOAD_SEQ)
001343 0F9343 F6 1B A7                                        LDAB    LED_SEQ_TAB_SHORT_PULSE         ;sequence pattern -> B (LED_LOAD_SEQ)
001346 0F9346 20 12                                           JOB     LED_LOAD_SEQ_4                  ;update sqeuence (LED_LOAD_SEQ)
                                                              ;Long pulse (accumulated requests in A, requests in B)   (LED_LOAD_SEQ)
001348 0F9348 CE 1B A8                LED_LOAD_SEQ_1          LDX     #LED_SEQ_TAB_L0NG_PULSE         ;sequence table pointer -> X (LED_LOAD_SEQ)
00134B 0F934B 58                                              LSLB                                    ;shift towards MSB (LED_LOAD_SEQ)
00134C 0F934C 2A 06                                           BPL     LED_LOAD_SEQ_2                  ;no (non-recurring) long pulse requested (LED_LOAD_SEQ)
00134E 0F934E 1D 1A F5 40                                     BCLR    LED_C_REQ,#$40                 ;clear non-recurring long pulse request (LED_LOAD_SEQ)
001352 0F9352 20 04                                           JOB     LED_LOAD_SEQ_3                  ;update sqeuence (LED_LOAD_SEQ)
                                                              ;Other patterns (accumulated requests in A, shifted requests in B) (LED_LOAD_SEQ)
001354 0F9354 08                      LED_LOAD_SEQ_2          INX                                     ;advance table pointer (LED_LOAD_SEQ)
001355 0F9355 58                                              LSLB                                    ;shift towards MSB (LED_LOAD_SEQ)
001356 0F9356 2A FC                                           BPL     LED_LOAD_SEQ_2                  ;check next sequence (LED_LOAD_SEQ)
001358 0F9358 E6 00                   LED_LOAD_SEQ_3          LDAB    0,X                             ;sequence pattern -> B (LED_LOAD_SEQ)
00135A 0F935A 7B 1A F6                LED_LOAD_SEQ_4          STAB    LED_C_SEQ                      ;sore new sequence (LED_LOAD_SEQ)
00135D 0F935D MACRO                                           LED_LOAD_SEQ    D                       ;load sequence for LED D
                                      ;#Helper functions                                                               (LED_LOAD_SEQ)
                                      ;#----------------                                                               (LED_LOAD_SEQ)
                                      ;#Load LED sequence                                                              (LED_LOAD_SEQ)
                                      ; args:   1: LED index (A..D)                                                    (LED_LOAD_SEQ)
                                      ;         A: accumulated requests                                                (LED_LOAD_SEQ)
                                      ; result: A: updated accumulated requests                                        (LED_LOAD_SEQ)
                                      ; SSTACK: none                                                                   (LED_LOAD_SEQ)
                                      ;         Y is preserved                                                         (LED_LOAD_SEQ)
00135D 0F935D BA 1A F7                                        ORAA    LED_D_REQ                      ;accumulate requests in A (LED_LOAD_SEQ)
001360 0F9360 F6 1A F7                                        LDAB    LED_D_REQ                      ;requests -> B    (LED_LOAD_SEQ)
001363 0F9363 27 1D                                           BEQ     LED_LOAD_SEQ_4                  ;no requests (B==0) (LED_LOAD_SEQ)
001365 0F9365 2A 09                                           BPL     LED_LOAD_SEQ_1                  ;no (non-recurring) short pulse requested (LED_LOAD_SEQ)
                                                              ;Short pulse (accumulated requests in A, requests in B)  (LED_LOAD_SEQ)
001367 0F9367 1D 1A F7 80                                     BCLR    LED_D_REQ,#$80                 ;clear non-recurring short pulse request (LED_LOAD_SEQ)
00136B 0F936B F6 1B A7                                        LDAB    LED_SEQ_TAB_SHORT_PULSE         ;sequence pattern -> B (LED_LOAD_SEQ)
00136E 0F936E 20 12                                           JOB     LED_LOAD_SEQ_4                  ;update sqeuence (LED_LOAD_SEQ)
                                                              ;Long pulse (accumulated requests in A, requests in B)   (LED_LOAD_SEQ)
001370 0F9370 CE 1B A8                LED_LOAD_SEQ_1          LDX     #LED_SEQ_TAB_L0NG_PULSE         ;sequence table pointer -> X (LED_LOAD_SEQ)
001373 0F9373 58                                              LSLB                                    ;shift towards MSB (LED_LOAD_SEQ)
001374 0F9374 2A 06                                           BPL     LED_LOAD_SEQ_2                  ;no (non-recurring) long pulse requested (LED_LOAD_SEQ)
001376 0F9376 1D 1A F7 40                                     BCLR    LED_D_REQ,#$40                 ;clear non-recurring long pulse request (LED_LOAD_SEQ)
00137A 0F937A 20 04                                           JOB     LED_LOAD_SEQ_3                  ;update sqeuence (LED_LOAD_SEQ)
                                                              ;Other patterns (accumulated requests in A, shifted requests in B) (LED_LOAD_SEQ)
00137C 0F937C 08                      LED_LOAD_SEQ_2          INX                                     ;advance table pointer (LED_LOAD_SEQ)
00137D 0F937D 58                                              LSLB                                    ;shift towards MSB (LED_LOAD_SEQ)
00137E 0F937E 2A FC                                           BPL     LED_LOAD_SEQ_2                  ;check next sequence (LED_LOAD_SEQ)
001380 0F9380 E6 00                   LED_LOAD_SEQ_3          LDAB    0,X                             ;sequence pattern -> B (LED_LOAD_SEQ)
001382 0F9382 7B 1A F8                LED_LOAD_SEQ_4          STAB    LED_D_SEQ                      ;sore new sequence (LED_LOAD_SEQ)
001385 0F9385 C6 80                                           LDAB    #$80
                                                              ;Check if timer is needed (ORed requests in A, sequence iterator in B)
001387 0F9387 85 FE                                           BITA    #LED_TIMED_REQS                 ;check if timer is still required
001389 0F9389 26 0B                                           BNE     LED_ISR_2                       ;timer is still required
00138B 0F938B MACRO                                           TIM_DIS LED_TIM, LED_OC                 ;disable timer
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS)
                                      ;       2: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
00138B 0F938B MACRO                                           TIM_MULT_DIS    LED_TIM, (1<<LED_OC)                     (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS/TIM_MULT_DIS)
                                      ;       2: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
00138B 0F938B 4D 4C 08                                        BCLR    LED_TIM+TIE_OFFSET, #1<<LED_OC                   (TIM_DIS/TIM_MULT_DIS)
00138E 0F938E 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
001390 0F9390 79 00 46                DISABLE                 CLR     LED_TIM+TSCR1_OFFSET                             (TIM_DIS/TIM_MULT_DIS)
001393 0F9393 -> $1393                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
001393 0F9393 79 1A F3                                        CLR     LED_OC_CNT                      ;clear OC event count
                                                              ;Update LEDs (sequence iterator in B)
001396 0F9396 7B 1A F4                LED_ISR_2               STAB    LED_SEQ_ITR                     ;update sequence iterator
001399 0F9399 MACRO                                           LED_UPDATE      C                       ;update LED C
                                      ;#Update LED according to its sequence pattern                                   (LED_UPDATE)
                                      ; args:   1: LED index (A..D)                                                    (LED_UPDATE)
                                      ;         B: sequence iterator                                                   (LED_UPDATE)
                                      ; result: none                                                                   (LED_UPDATE)
                                      ; SSTACK: none                                                                   (LED_UPDATE)
                                      ;         X, Y and D are preserved                                               (LED_UPDATE)
001399 0F9399 F5 1A F6                                        BITB    LED_C_SEQ                      ;check sequence pattern (LED_UPDATE)
00139C 0F939C 26 06                                           BNE     LED_UPDATE_1                    ;turn on LED     (LED_UPDATE)
00139E 0F939E MACRO                                           LED_OFF C                              ;turn off LED     (LED_UPDATE)
                                      ;#Turn off non-blinking LED                                                      (LED_UPDATE/LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (LED_UPDATE/LED_OFF)
                                      ; result: none                                                                   (LED_UPDATE/LED_OFF)
                                      ; SSTACK: none                                                                   (LED_UPDATE/LED_OFF)
                                      ;         X, Y and D are preserved                                               (LED_UPDATE/LED_OFF)
00139E 0F939E 1C 02 58 10                                     BSET    LED_C_PORT, #LED_C_PIN        ;set port pin      (LED_UPDATE/LED_OFF)
0013A2 0F93A2 20 04                                           JOB     DONE                            ;done            (LED_UPDATE)
0013A4 0F93A4 MACRO                   LED_UPDATE_1            LED_ON  C                              ;turn on LED      (LED_UPDATE)
                                      ;#User functions                                                                 (LED_UPDATE/LED_ON)
                                      ;#--------------                                                                 (LED_UPDATE/LED_ON)
                                      ;#Turn on non-blinking LED                                                       (LED_UPDATE/LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (LED_UPDATE/LED_ON)
                                      ; result: none                                                                   (LED_UPDATE/LED_ON)
                                      ; SSTACK: none                                                                   (LED_UPDATE/LED_ON)
                                      ;         X,Y and D are preserved                                                (LED_UPDATE/LED_ON)
0013A4 0F93A4 1D 02 58 10                                     BCLR    LED_C_PORT, #LED_C_PIN        ;clear port pin    (LED_UPDATE/LED_ON)
0013A8 0F93A8 -> $13A8                DONE                    EQU     *                               ;done            (LED_UPDATE)
0013A8 0F93A8 MACRO                                           LED_UPDATE      D                       ;update LED D
                                      ;#Update LED according to its sequence pattern                                   (LED_UPDATE)
                                      ; args:   1: LED index (A..D)                                                    (LED_UPDATE)
                                      ;         B: sequence iterator                                                   (LED_UPDATE)
                                      ; result: none                                                                   (LED_UPDATE)
                                      ; SSTACK: none                                                                   (LED_UPDATE)
                                      ;         X, Y and D are preserved                                               (LED_UPDATE)
0013A8 0F93A8 F5 1A F8                                        BITB    LED_D_SEQ                      ;check sequence pattern (LED_UPDATE)
0013AB 0F93AB 26 06                                           BNE     LED_UPDATE_1                    ;turn on LED     (LED_UPDATE)
0013AD 0F93AD MACRO                                           LED_OFF D                              ;turn off LED     (LED_UPDATE)
                                      ;#Turn off non-blinking LED                                                      (LED_UPDATE/LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (LED_UPDATE/LED_OFF)
                                      ; result: none                                                                   (LED_UPDATE/LED_OFF)
                                      ; SSTACK: none                                                                   (LED_UPDATE/LED_OFF)
                                      ;         X, Y and D are preserved                                               (LED_UPDATE/LED_OFF)
0013AD 0F93AD 1C 02 58 20                                     BSET    LED_D_PORT, #LED_D_PIN        ;set port pin      (LED_UPDATE/LED_OFF)
0013B1 0F93B1 20 04                                           JOB     DONE                            ;done            (LED_UPDATE)
0013B3 0F93B3 MACRO                   LED_UPDATE_1            LED_ON  D                              ;turn on LED      (LED_UPDATE)
                                      ;#User functions                                                                 (LED_UPDATE/LED_ON)
                                      ;#--------------                                                                 (LED_UPDATE/LED_ON)
                                      ;#Turn on non-blinking LED                                                       (LED_UPDATE/LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (LED_UPDATE/LED_ON)
                                      ; result: none                                                                   (LED_UPDATE/LED_ON)
                                      ; SSTACK: none                                                                   (LED_UPDATE/LED_ON)
                                      ;         X,Y and D are preserved                                                (LED_UPDATE/LED_ON)
0013B3 0F93B3 1D 02 58 20                                     BCLR    LED_D_PORT, #LED_D_PIN        ;clear port pin    (LED_UPDATE/LED_ON)
0013B7 0F93B7 -> $13B7                DONE                    EQU     *                               ;done            (LED_UPDATE)
0013B7 0F93B7 MACRO                                           ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0013B7 0F93B7 0B                                              RTI                                                      (ISTACK_RTI)
0013B8 0F93B8 -> $13B8                LED_CODE_END            EQU     *
0013B8 0F93B8 -> $F93B8               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BA7 0F9BA7                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
                                                              ;Pattern table
001BA7 0F9BA7 -> $1BA7                LED_SEQ_TAB             EQU     *
001BA7 0F9BA7 40                      LED_SEQ_TAB_SHORT_PULSE DB      %01000000       ;prio 7 ^
001BA8 0F9BA8 7E                      LED_SEQ_TAB_L0NG_PULSE  DB      %01111110       ;prio 6 |h
001BA9 0F9BA9 55                      LED_SEQ_TAB_FAST_BLINK  DB      %01010101       ;prio 5 |i
001BAA 0F9BAA 78                      LED_SEQ_TAB_SLOW_BLINK  DB      %01111000       ;prio 4 |g
001BAB 0F9BAB CF                      LED_SEQ_TAB_SINGLE_GAP  DB      %11001111       ;prio 3 |h
001BAC 0F9BAC B7                      LED_SEQ_TAB_DOUBLE_GAP  DB      %10110111       ;prio 2 |e
001BAD 0F9BAD 50                      LED_SEQ_TAB_HEART_BEAT  DB      %01010000       ;prio 1 |r
001BAE 0F9BAE FF                      LED_SEQ_TAB_ON          DB      %11111111       ;prio 0 |
001BAF 0F9BAF -> $1BAF                LED_TABS_END            EQU     *
001BAF 0F9BAF -> $F9BAF               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Voltage thresholds
                                      ;------------------
001BAF 0F9BAF -> $4CCC                TVMON_UPPER_THRESHOLD   EQU     (30*$FFFF)/(2*50) ;default 3.0V
001BAF 0F9BAF -> $0CCC                TVMON_LOWER_THRESHOLD   EQU      (5*$FFFF)/(2*50) ;default 0.5V
001BAF 0F9BAF -> $0040                TVMON_ATDCTL1_CONFIG    EQU      %01000000
001BAF 0F9BAF -> $0041                TVMON_ATDCTL2_CONFIG    EQU      %01000001
001BAF 0F9BAF -> $0013                TVMON_ATDCTL3_CONFIG    EQU      %00010011
001BAF 0F9BAF -> $00FF                TVMON_ATDCTL4_CONFIG    EQU     %11111111
001BAF 0F9BAF -> $002B                TVMON_ATDCTL5_CONFIG    EQU      %00101011
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2A 0F9B2A                                                 ORG     TVMON_VARS_START, TVMON_VARS_START_LIN
001B2A 0F9B2A -> $1B2A                TVMON_VARS_END          EQU     *
001B2A 0F9B2A -> $F9B2A               TVMON_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001766 0F9766                                                 ORG     TVMON_CODE_START, TVMON_CODE_START_LIN
001766 0F9766 -> $1766                TVMON_ISR               EQU     *
001766 0F9766 1E 02 CF 01 17                                  BRSET   ATDCMPHTH+$1, #$01, TVMON_ISR_1 ;target Vdd detected
                                                              ;Target Vdd missing
00176B 0F976B MACRO                                           TVMON_SIGNAL_LV                         ;flag missing target Vdd
                                      ;#TVMON                                                                          (TVMON_SIGNAL_LV)
                                      ;Signal low voltage level                                                        (TVMON_SIGNAL_LV)
00176B 0F976B MACRO                                           LED_OFF B               ;turn off green LED              (TVMON_SIGNAL_LV)
                                      ;#Turn off non-blinking LED                                                      (TVMON_SIGNAL_LV/LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (TVMON_SIGNAL_LV/LED_OFF)
                                      ; result: none                                                                   (TVMON_SIGNAL_LV/LED_OFF)
                                      ; SSTACK: none                                                                   (TVMON_SIGNAL_LV/LED_OFF)
                                      ;         X, Y and D are preserved                                               (TVMON_SIGNAL_LV/LED_OFF)
00176B 0F976B 1C 02 58 08                                     BSET    LED_B_PORT, #LED_B_PIN        ;set port pin      (TVMON_SIGNAL_LV/LED_OFF)
00176F 0F976F MACRO                                           LED_ON  A               ;turn on red LED                 (TVMON_SIGNAL_LV)
                                      ;#User functions                                                                 (TVMON_SIGNAL_LV/LED_ON)
                                      ;#--------------                                                                 (TVMON_SIGNAL_LV/LED_ON)
                                      ;#Turn on non-blinking LED                                                       (TVMON_SIGNAL_LV/LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (TVMON_SIGNAL_LV/LED_ON)
                                      ; result: none                                                                   (TVMON_SIGNAL_LV/LED_ON)
                                      ; SSTACK: none                                                                   (TVMON_SIGNAL_LV/LED_ON)
                                      ;         X,Y and D are preserved                                                (TVMON_SIGNAL_LV/LED_ON)
00176F 0F976F 1D 02 58 04                                     BCLR    LED_A_PORT, #LED_A_PIN        ;clear port pin    (TVMON_SIGNAL_LV/LED_ON)
001773 0F9773 1C 02 CF 01                                     BSET    ATDCMPHTL, #$01                 ;target Vdd must be higher than threshold
001777 0F9777 18 03 4C CC 02 D0                               MOVW    #TVMON_UPPER_THRESHOLD, ATDDR0  ;set upper threshold value
00177D 0F977D 79 02 50                                        CLR     PTM                             ;disable target interface
001780 0F9780 20 17                                           JOB     TVMON_ISR_2                     ;restart ADC conversion
                                                              ;Target Vdd detected
001782 0F9782 MACRO                   TVMON_ISR_1             TVMON_SIGNAL_HV                         ;flag detected target Vdd
                                      ;Signal high voltage level                                                       (TVMON_SIGNAL_HV)
001782 0F9782 MACRO                                           LED_OFF A               ;turn off red LED                (TVMON_SIGNAL_HV)
                                      ;#Turn off non-blinking LED                                                      (TVMON_SIGNAL_HV/LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (TVMON_SIGNAL_HV/LED_OFF)
                                      ; result: none                                                                   (TVMON_SIGNAL_HV/LED_OFF)
                                      ; SSTACK: none                                                                   (TVMON_SIGNAL_HV/LED_OFF)
                                      ;         X, Y and D are preserved                                               (TVMON_SIGNAL_HV/LED_OFF)
001782 0F9782 1C 02 58 04                                     BSET    LED_A_PORT, #LED_A_PIN        ;set port pin      (TVMON_SIGNAL_HV/LED_OFF)
001786 0F9786 MACRO                                           LED_ON  B               ;turn on green LED               (TVMON_SIGNAL_HV)
                                      ;#User functions                                                                 (TVMON_SIGNAL_HV/LED_ON)
                                      ;#--------------                                                                 (TVMON_SIGNAL_HV/LED_ON)
                                      ;#Turn on non-blinking LED                                                       (TVMON_SIGNAL_HV/LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (TVMON_SIGNAL_HV/LED_ON)
                                      ; result: none                                                                   (TVMON_SIGNAL_HV/LED_ON)
                                      ; SSTACK: none                                                                   (TVMON_SIGNAL_HV/LED_ON)
                                      ;         X,Y and D are preserved                                                (TVMON_SIGNAL_HV/LED_ON)
001786 0F9786 1D 02 58 08                                     BCLR    LED_B_PORT, #LED_B_PIN        ;clear port pin    (TVMON_SIGNAL_HV/LED_ON)
00178A 0F978A 1D 02 CF 01                                     BCLR    ATDCMPHTL, #$01                 ;target Vdd must be lower than threshold
00178E 0F978E 18 03 0C CC 02 D0                               MOVW    #TVMON_LOWER_THRESHOLD, ATDDR0  ;set lower threshold value
001794 0F9794 18 0B 80 02 50                                  MOVB    #PM7, PTM                       ;enable target interface
                                                              ;Restart ATD conversions
001799 0F9799 18 0B 2B 02 C5          TVMON_ISR_2             MOVB    #TVMON_ATDCTL5_CONFIG, ATDCTL5
                                                              ;Done
00179E 0F979E MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00179E 0F979E 0B                                              RTI                                                      (ISTACK_RTI)
00179F 0F979F -> $179F                TVMON_CODE_END          EQU     *
00179F 0F979F -> $F979F               TVMON_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BAF 0F9BAF                                                 ORG     TVMON_TABS_START, TVMON_TABS_START_LIN
001BAF 0F9BAF -> $1BAF                TVMON_TABS_END          EQU     *
001BAF 0F9BAF -> $F9BAF               TVMON_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2E 0F9B2E                                                 ORG     RANDOM_VARS_START, RANDOM_VARS_START_LIN
001B2E 0F9B2E                         RANDOM_LSFR             DS      2
001B30 0F9B30 -> $1B30                RANDOM_VARS_END         EQU     *
001B30 0F9B30 -> $F9B30               RANDOM_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001A68 0F9A68                                                 ORG     RANDOM_CODE_START, RANDOM_CODE_START_LIN
                                      ;#Generate next pseudo random value
                                      ; args:   none
                                      ; result: D: new pseudo-random value
                                      ; SSTACK: 2 bytes
                                      ;         X and Y are preserved
001A68 0F9A68 -> $1A68                RANDOM_NEXT             EQU     *
                                                              ;Accumulate tabs in LSFR high byte
001A68 0F9A68 87                                              CLRA                                            ;clear A
001A69 0F9A69 F6 1B 2E                                        LDAB    RANDOM_LSFR                             ;LSFR high byte -> B
                                                              ;1st tab - bit 15 ($00 in A, LSFR high byte in B)
001A6C 0F9A6C 58                                              LSLB                                            ;shift high byte
001A6D 0F9A6D 89 00                                           ADCA    #0                                      ;store 1st tab
001A6F 0F9A6F 7B 1B 2E                                        STAB    RANDOM_LSFR                             ;store new high byte
                                                              ;2nd tab - bit 13 (XORed tabs in A, LSFR high byte in B)
001A72 0F9A72 58                                              LSLB                                            ;shift high byte
001A73 0F9A73 58                                              LSLB                                            ;shift high byte
001A74 0F9A74 89 00                                           ADCA    #0                                      ;accumulate tabs
                                                              ;3rd tab - bit 12 (XORed tabs in A, LSFR high byte in B)
001A76 0F9A76 58                                              LSLB                                            ;shift high byte
001A77 0F9A77 89 00                                           ADCA    #0                                      ;accumulate tabs
                                                              ;4th tab - bit 10 (XORed tabs in A, LSFR high byte in B)
001A79 0F9A79 58                                              LSLB                                            ;shift high byte
001A7A 0F9A7A 58                                              LSLB                                            ;shift high byte
001A7B 0F9A7B 89 00                                           ADCA    #0                                      ;accumulate tabs
                                                              ;Calculate new LSFR value (XORed tabs in A)
001A7D 0F9A7D 44                                              LSRA                                            ;XORed tabs -> C-flag
001A7E 0F9A7E FC 1B 2E                                        LDD     RANDOM_LSFR                             ;LSFR -> D
001A81 0F9A81 55                                              ROLB                                            ;shift LSFR
001A82 0F9A82 45                                              ROLA                                            ; XORed tabs in LSB
001A83 0F9A83 7C 1B 2E                                        STD     RANDOM_LSFR                             ;update LSFR
                                                              ;Done (new LSFR value in D)
001A86 0F9A86 MACRO                                           SSTACK_PREPULL  2                               ;check stack
001A86 0F9A86 3D                                              RTS
001A87 0F9A87 -> $1A87                RANDOM_CODE_END         EQU     *
001A87 0F9A87 -> $F9A87               RANDOM_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C8C 0F9C8C                                                 ORG     RANDOM_TABS_START, RANDOM_TABS_START_LIN
001C8C 0F9C8C -> $1C8C                RANDOM_TABS_END         EQU     *
001C8C 0F9C8C -> $F9C8C               RANDOM_TABS_END_LIN     EQU     @
                                      ;Invert RXD/TXD
001C8C 0F9C8C -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;TIM configuration
                                      ;TIM instance for baud rate detection
                                      ;Input capture channel for baud rate detection
                                      ;TIM instance for baud rate detection, shutdown, and flow control
                                      ;Output compare channel for baud rate detection, shutdown, and flow control
                                      ;Past baud rate detection, the OC will always measure time periods of roughly 2 SCI frames
                                      ;TIM instance for the MUCts00510 workaround
001C8C 0F9C8C -> $0040                SCI_IRQBUG_TIM          EQU     TIOS            ;default is the TIM instance associated with TIOS
                                      ;Output compare channel for the MUCts00510 workaround
                                      ;Past baud rate detection, the OC will always measure time periods of roughly 2 SCI frames
001C8C 0F9C8C -> $0002                SCI_IRQBUG_OC           EQU     2               ;default is OC02
                                      ;Frame format
                                      ;------------
001C8C 0F9C8C                         SCI_FORMAT_8N1
                                      ;SCI V02.00 IRQ workaround (MUCts00510)
                                      ;--------------------------------------
                                      ;###############################################################################
                                      ;# Relevant for the folowing parts:                                            #
                                      ;#    MC9S12DP256 mask sets 0K79X, 1K79X, 2K79X, 0L58F                         #
                                      ;#    MC9S12H256  mask sets 0K78X, 1K78X, 2K78X                                #
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable workaround for MUCts00510
001C8C 0F9C8C -> $0001                SCI_IRQBUG_OFF          EQU     1               ;IRQ workaround disabled on newer SCIs
                                      ;#Buffer sizes
001C8C 0F9C8C -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
001C8C 0F9C8C -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
                                      ;#Baud rate
001C8C 0F9C8C -> $2580                SCI_BAUD                EQU     9600
                                      ;#Baud rate divider (SCIBD)
                                      ; SCI V5: SCIBD = bus clock / (16*baud rate)
                                      ;         25MHz:   9600 -> $A2
                                      ;                 14400 -> $6C
                                      ;                 19200 -> $51
                                      ;                 28800 -> $36
                                      ;                 38400 -> $28
                                      ;                 57600 -> $1B
                                      ;                 76800 -> $14
                                      ;                115200 -> $0D
                                      ;                153600 -> $0A
                                      ; SCI V6: SCIBD = bus clock / baud rate
                                      ;         25MHz:   9600 -> $A2C
                                      ;                 14400 -> $6C8
                                      ;                 19200 -> $516
                                      ;                 28800 -> $364
                                      ;                 38400 -> $28B
                                      ;                 57600 -> $1B2
                                      ;                 76800 -> $145
                                      ;                115200 -> $0D9
                                      ;                153600 -> $0A2
001C8C 0F9C8C -> $0146                SCI_BDIV                EQU     (CLOCK_BUS_FREQ/(16*SCI_BAUD))+(((2*CLOCK_BUS_FREQ)/(16*SCI_BAUD))&1)
                                      ;#Pulse range for faud rate detection
                                      ;max. baud rate:  153600 baud +10% = 168960 baud
                                      ;min. baud rate:  TIM_FREQ/$FFFF   ~   381 baud (TIM_FREQ=25MHz)
001C8C 0F9C8C -> $29400               SCI_BD_MAX_BAUD         EQU     168960                          ;highest baud rate
001C8C 0F9C8C -> $017D                SCI_BD_MIN_BAUD         EQU     TIM_FREQ/$FFFF                  ;lowest baud rate
001C8C 0F9C8C -> $0093                SCI_BD_MIN_PULSE        EQU     TIM_FREQ/SCI_BD_MAX_BAUD        ;shortest bit pulse
001C8C 0F9C8C -> $FFFF                SCI_BD_MAX_PULSE        EQU     $FFFF                           ;longest bit pulse
                                      ;#Frame format
001C8C 0F9C8C -> $0004                SCI_8N1                 EQU       ILT           ;8N1
001C8C 0F9C8C -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
001C8C 0F9C8C -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
001C8C 0F9C8C -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
001C8C 0F9C8C -> $0004                SCI_FORMAT              EQU     SCI_8N1
                                      ;#C0 characters
001C8C 0F9C8C -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
001C8C 0F9C8C -> $0003                SCI_C0_BREAK            EQU     $03             ;ctrl-c (terminate program execution)
001C8C 0F9C8C -> $0010                SCI_C0_DLE              EQU     $10             ;data link escape (treat next byte as data)
001C8C 0F9C8C -> $0011                SCI_C0_XON              EQU     $11             ;unblock transmission
001C8C 0F9C8C -> $0013                SCI_C0_XOFF             EQU     $13             ;block transmission
                                      ;SCI_C0_SUSPEND         EQU     $1A             ;ctrl-z (suspend program execution)
001C8C 0F9C8C -> $0018                SCI_C0_SUSPEND          EQU     $18             ;ctrl-x (suspend program execution)
001C8C 0F9C8C -> $001A                SCI_C0_US               EQU     $1A             ;last C0 character (unit separator)
001C8C 0F9C8C -> $007F                SCI_C0_DEL              EQU     $7F             ;DELETE
                                      ;#Buffer masks
001C8C 0F9C8C -> $0007                SCI_RXBUF_MASK          EQU     SCI_TXBUF_SIZE-1;mask for rolling over the RX buffer
001C8C 0F9C8C -> $0007                SCI_TXBUF_MASK          EQU     SCI_TXBUF_SIZE-1;mask for rolling over the TX buffer
                                      ;#Flow control thresholds
001C8C 0F9C8C -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
001C8C 0F9C8C -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
001C8C 0F9C8C -> $0080                SCI_FLG_PAUSE           EQU     $80             ;pause SCI traffic (to disable interrupts)
001C8C 0F9C8C -> $0040                SCI_FLG_TC_VALID        EQU     $40             ;timestamp is valid
001C8C 0F9C8C -> $0020                SCI_FLG_CTRL            EQU     $20             ;control character
001C8C 0F9C8C -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
001C8C 0F9C8C -> $0008                SCI_FLG_TX_XONXOFF      EQU     $08             ;send XON/XOFF symbol asap
001C8C 0F9C8C -> $0008                SCI_FLG_POLL_RTS        EQU     $08             ;poll RTS input
001C8C 0F9C8C -> $0004                SCI_FLG_RX_XOFF         EQU     $04             ;don't transmit (XOFF received)
001C8C 0F9C8C -> $0002                SCI_FLG_RX_ESC          EQU     $02             ;character is to be escaped
001C8C 0F9C8C -> $0001                SCI_FLG_TX_ESC          EQU     $01             ;character is to be escaped
                                      ;#Timer usage and configuration
001C8C 0F9C8C -> $0003                SCI_IC_TCTL34_INIT      EQU     3<<SCI_IC       ;capture any edge (baud rate detection)
001C8C 0F9C8C -> $0002                SCI_OC_TIOS_INIT        EQU     1<<SCI_OC       ;use OC
001C8C 0F9C8C -> $0004                SCI_IRQBUG_TIOS_INIT    EQU     1<<SCI_IRQBUG_OC;use OC
                                      ;#Timer channels
001C8C 0F9C8C -> $0050                SCI_IC_TC               EQU     SCI_IC_TIM+TC0_OFFSET+(2*SCI_IC)        ;IC capture register
001C8C 0F9C8C -> $0052                SCI_OC_TC               EQU     SCI_OC_TIM+TC0_OFFSET+(2*SCI_OC)        ;OC compare register
001C8C 0F9C8C -> $0044                SCI_OC_TCNT             EQU     SCI_OC_TIM+TCNT_OFFSET                  ;OC counter register
001C8C 0F9C8C -> $0054                SCI_IRQBUG_TC           EQU     SCI_IRQBUG_TIM+TC0_OFFSET+(2*SCI_IRQBUG_OC);OC counter register
001C8C 0F9C8C -> $0044                SCI_IRQBUG_TCNT         EQU     SCI_IRQBUG_TIM+TCNT_OFFSET              ;OC counter register
                                      ;#OC delays
001C8C 0F9C8C -> $0004                SCI_BD_DLY              EQU     $04             ;idle time before ending the baud rate detection
001C8C 0F9C8C -> $0004                SCI_PAUSE_DLY           EQU     $04             ;pause time before disableing the SCI
001C8C 0F9C8C -> $00FF                SCI_XONXOFF_DLY         EQU     $FF             ;XON/XOFF reminder intervall
                                      ;#C0 character handling
001C8C 0F9C8C -> $0001                SCI_HANDLE_C0           EQU     1               ;detect XON/XOFF symbols
001C8C 0F9C8C -> $0001                SCI_HANDLE_C0           EQU     1               ;detect BREAK symbol
001C8C 0F9C8C -> $0001                SCI_HANDLE_BREAK        EQU     1               ;detect BREAK symbol
001C8C 0F9C8C -> $0001                SCI_HANDLE_C0           EQU     1               ;detect SUSPEND symbol
001C8C 0F9C8C -> $0001                SCI_HANDLE_SUSPEND      EQU     1               ;detect SUSPEND symbol
                                      ;#RX error detection
001C8C 0F9C8C -> $0001                SCI_CHECK_RX_ERR        EQU     1               ;check for RX errors to ignore faulty C0 charakters
                                      ;Check for RX errors to start the error signal
001C8C 0F9C8C -> $0001                SCI_CHECK_RX_ERR        EQU     1               ;check for RX errors
                                      ;Check for RX errors to stop the error signal
001C8C 0F9C8C -> $0001                SCI_CHECK_RX_ERR        EQU     1               ;check for RX errors
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF9 0F9AF9                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001AF9 0F9AF9 -> $1AF9                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
001AF9 0F9AF9                                                 ALIGN   1
                                      ;#Receive buffer
001AFA 0F9AFA                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
001B1A 0F9B1A                         SCI_RXBUF_IN            DS      1               ;points to the next free space
001B1B 0F9B1B                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
001B1C 0F9B1C                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
001B24 0F9B24                         SCI_TXBUF_IN            DS      1               ;points to the next free space
001B25 0F9B25                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Flags
001B26 0F9B26                         SCI_FLGS                DS      1               ;status flags
                                      ;#OC event down counter
001B27 0F9B27                         SCI_OC_CNT              DS      1               ;down counter for OC events
                                      ;#Baud rate detection (only active before the RX buffer is used)
001B28 0F9B28 -> $1AFA                SCI_BD_LAST_TC          EQU     SCI_RXBUF+0     ;timer counter (share RX buffer)
001B28 0F9B28 -> $1AFC                SCI_BD_PULSE            EQU     SCI_RXBUF+2     ;shortest pulse (share RX buffer)
                                      ;#Baud rate -> checksum (~(SCI_SAVED_BDIV[15:8]+SCI_SAVED_BDIV[7:0])
001B28 0F9B28                         SCI_SAVED_BDIV          DS      2               ;value of the SCIBD register
001B2A 0F9B2A                         SCI_AUTO_LOC2           DS      ((~SCI_AUTO_LOC1)&1);2nd auto-place location
001B2A 0F9B2A -> $1AF9                SCI_SAVED_BDIV_CS       EQU     ((SCI_AUTO_LOC1&1)*SCI_AUTO_LOC1)+(((~SCI_AUTO_LOC1)&1)*SCI_AUTO_LOC2)
001B2A 0F9B2A -> $1B2A                SCI_VARS_END            EQU     *
001B2A 0F9B2A -> $F9B2A               SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0013B8 0F93B8                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0013B8 0F93B8 -> $13B8                SCI_TX_NB               EQU     *
                                                              ;Save registers (data in B)
0013B8 0F93B8 34                                              PSHX                                            ;save X
0013B9 0F93B9 36                                              PSHA                                            ;save A
0013BA 0F93BA 10 FE                                           CLC                                             ;signal failure by default
0013BC 0F93BC 39                                              PSHC                                            ;save CCR
                                                              ;Write data into the TX buffer (data in B)
0013BD 0F93BD CE 1B 1C                                        LDX     #SCI_TXBUF                              ;buffer pointer -> X
0013C0 0F93C0 B6 1B 24                                        LDAA    SCI_TXBUF_IN                            ;in -> A
0013C3 0F93C3 6B E4                                           STAB    A,X                                     ;store data in buffer
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in X)
0013C5 0F93C5 42                                              INCA                                            ;increment index
0013C6 0F93C6 84 07                                           ANDA    #SCI_TXBUF_MASK                         ;wrap index
0013C8 0F93C8 B1 1B 25                                        CMPA    SCI_TXBUF_OUT                           ;check if buffer is full
0013CB 0F93CB 27 0B                                           BEQ     SCI_TX_NB_1                             ;buffer is full
                                                              ;Update buffer
0013CD 0F93CD 7A 1B 24                                        STAA    SCI_TXBUF_IN                            ;update in
                                                              ;Enable interrupts
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts
0013D0 0F93D0 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts
                                                              ;Signal success
0013D5 0F93D5 0C 80 01                                        BSET    0,SP, #$01                              ;set C-flag
                                                              ;Restore registers
0013D8 0F93D8 MACRO                   SCI_TX_NB_1             SSTACK_PREPULL  6                               ;check SSTACK
0013D8 0F93D8 38                                              PULC                                            ;restore CCR (incl. result)
0013D9 0F93D9 32                                              PULA                                            ;restore A
0013DA 0F93DA 30                                              PULX                                            ;restore X
                                                              ;Done
0013DB 0F93DB 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 8 bytes
                                      ;         X, Y, and D are preserved
0013DC 0F93DC -> $13DC                SCI_TX_BL               EQU     *
0013DC 0F93DC MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 6
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0013DC 0F93DC 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0013DE 0F93DE 07 D8                                           JOBSR   SCI_TX_NB                                        (SCI_MAKE_BL)
0013E0 0F93E0 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0013E2 0F93E2 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0013E4 0F93E4 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0013E4 0F93E4 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0013E5 0F93E5 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0013E5 0F93E5 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0013E5 0F93E5 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0013EA 0F93EA 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0013EF 0F93EF 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0013F1 0F93F1 MACRO                                           SSTACK_PREPUSH  6                                        (SCI_MAKE_BL)
0013F1 0F93F1 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
0013F3 0F93F3 -> $13F3                SCI_TX_READY_NB         EQU     *
                                                              ;Save registers
0013F3 0F93F3 36                                              PSHA                                            ;sace A
0013F4 0F93F4 10 FE                                           CLC                                             ;default result: failure
0013F6 0F93F6 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check if there is room for this entry
0013F7 0F93F7 B6 1B 24                                        LDAA    SCI_TXBUF_IN                            ;in -> A
0013FA 0F93FA 42                                              INCA                                            ;increment in
0013FB 0F93FB 84 07                                           ANDA    #SCI_TXBUF_MASK                         ;wrap in
0013FD 0F93FD B1 1B 25                                        CMPA    SCI_TXBUF_OUT                           ;check for overflow
001400 0F9400 27 03                                           BEQ     SCI_TX_READY_NB_2                       ;buffer is full
                                                              ;Signal success
001402 0F9402 0C 80 01                SCI_TX_READY_NB_1       BSET    0,SP, #1                                ;set C-flag
                                                              ;Restore registers
001405 0F9405 MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4                               ;check SSTACK
001405 0F9405 38                                              PULC                                            ;restore CCR (incl. result)
001406 0F9406 32                                              PULA                                            ;restore A
                                                              ;Done
001407 0F9407 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
001408 0F9408 -> $1408                SCI_TX_READY_BL         EQU     *
001408 0F9408 MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001408 0F9408 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00140A 0F940A 07 E7                                           JOBSR   SCI_TX_READY_NB                                  (SCI_MAKE_BL)
00140C 0F940C 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00140E 0F940E 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001410 0F9410 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
001410 0F9410 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001411 0F9411 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001411 0F9411 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001411 0F9411 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001416 0F9416 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00141B 0F941B 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00141D 0F941D MACRO                                           SSTACK_PREPUSH  4                                        (SCI_MAKE_BL)
00141D 0F941D 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is no more data in the TX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and B are preserved
00141F 0F941F -> $141F                SCI_TX_DONE_NB          EQU     *
                                                              ;Save registers
00141F 0F941F 36                                              PSHA                                            ;sace A
001420 0F9420 10 FE                                           CLC                                             ;default result: failure
001422 0F9422 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check if TX queue is empty
001423 0F9423 B6 1B 24                                        LDAA    SCI_TXBUF_IN                            ;in -> A
001426 0F9426 B1 1B 25                                        CMPA    SCI_TXBUF_OUT                           ;check for overflow
001429 0F9429 27 D7                                           BEQ     SCI_TX_READY_NB_1                       ;signal success
00142B 0F942B 20 D8                                           JOB     SCI_TX_READY_NB_2                       ;signal failure
                                      ;#Wait until there is no more data in the TX queue
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y and B are preserved
00142D 0F942D -> $142D                SCI_TX_DONE_BL          EQU     *
00142D 0F942D MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00142D 0F942D 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00142F 0F942F 07 EE                                           JOBSR   SCI_TX_DONE_NB                                   (SCI_MAKE_BL)
001431 0F9431 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001433 0F9433 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001435 0F9435 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
001435 0F9435 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001436 0F9436 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001436 0F9436 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001436 0F9436 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00143B 0F943B 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001440 0F9440 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001442 0F9442 MACRO                                           SSTACK_PREPUSH  4                                        (SCI_MAKE_BL)
001442 0F9442 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X and Y are preserved
001444 0F9444 -> $1444                SCI_RX_NB               EQU     *
                                                              ;Save registers
001444 0F9444 34                                              PSHX                                            ;save X
001445 0F9445 10 FE                                           CLC                                             ;signal failure by default
001447 0F9447 39                                              PSHC                                            ;save CCR
                                                              ;Check if there is data in the RX queue
001448 0F9448 FC 1B 1A                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
00144B 0F944B 18 16                                           SBA                                             ;A=in-out
00144D 0F944D 27 23                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty (failure)
                                                              ;Signal success
00144F 0F944F 0C 80 01                                        BSET    0,SP, #$01                              ;set C-flag
                                                              ;Pull entry from the RX queue (in-out in A, out in B)
001452 0F9452 CE 1A FA                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
001455 0F9455 EE E5                                           LDX     B,X                                     ;flags:data -> X
001457 0F9457 CB 02                                           ADDB    #$02                                    ;increment out
001459 0F9459 C4 07                                           ANDB    #SCI_RXBUF_MASK                         ;wrap out
00145B 0F945B 7B 1B 1B                                        STAB    SCI_RXBUF_OUT                           ;update out
                                                              ;Check if more RX buffer is running empty (in-out in A, flags:data in X)
00145E 0F945E 84 07                                           ANDA    #SCI_RXBUF_MASK                         ;adjust RX data count
001460 0F9460 81 05                                           CMPA    #(SCI_RX_EMPTY_LEVEL+1)                 ;check flow control threshold
001462 0F9462 26 0E                                           BNE     SCI_RX_NB_2                             ;don't apply flow control
001464 0F9464 -> $1464                SCI_RX_NB_1             EQU     *
                                                              ;Apply flow control (flags:data in X)
001464 0F9464 1E 1B 26 80 09                                  BRSET   SCI_FLGS,SCI_FLG_PAUSE,SCI_RX_NB_2      ;pause request ongoing
001469 0F9469 MACRO                                           SCI_TX_XONXOFF                                  ;transmit XON
                                      ;#Send XON/XOFF symbol                                                           (SCI_TX_XONXOFF)
                                      ; args:   none                                                                   (SCI_TX_XONXOFF)
                                      ; result: none                                                                   (SCI_TX_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_TX_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_XONXOFF)
001469 0F9469 1C 1B 26 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_XONXOFF           ;request transmission of XON/XOFF (SCI_TX_XONXOFF)
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts (SCI_TX_XONXOFF)
00146D 0F946D 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_TX_XONXOFF)
                                                              ;Return result (flags:data in X)
001472 0F9472 B7 54                   SCI_RX_NB_2             TFR     X, D                                    ;flags:data -> D
                                                              ;Restore registers (flags:data in D)
001474 0F9474 MACRO                                           SSTACK_PREPULL  5                               ;check SSTACK
001474 0F9474 38                                              PULC                                            ;restore CCR (incl. result)
001475 0F9475 30                                              PULX                                            ;restore X
                                                              ;Done
001476 0F9476 3D                                              RTS
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ; SSTACK: 7 bytes
                                      ;         X and Y are preserved
001477 0F9477 -> $1477                SCI_RX_BL               EQU     *
001477 0F9477 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 5
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
001477 0F9477 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001479 0F9479 07 C9                                           JOBSR   SCI_RX_NB                                        (SCI_MAKE_BL)
00147B 0F947B 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00147D 0F947D 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00147F 0F947F MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
00147F 0F947F 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001480 0F9480 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001480 0F9480 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001480 0F9480 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001485 0F9485 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00148A 0F948A 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00148C 0F948C MACRO                                           SSTACK_PREPUSH  5                                        (SCI_MAKE_BL)
00148C 0F948C 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y and D are preserved
00148E 0F948E -> $148E                SCI_RX_READY_NB         EQU     *
                                                              ;Save registers
00148E 0F948E 3B                                              PSHD                                            ;save D
00148F 0F948F 10 FE                                           CLC                                             ;default result: failure
001491 0F9491 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check if there is data in the RX queue
001492 0F9492 FC 1B 1A                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
001495 0F9495 18 17                                           CBA                                             ;check is RX data is available
001497 0F9497 27 03                                           BEQ     SCI_RX_READY_NB_1                       ;buffer is empty
                                                              ;Signal success
001499 0F9499 0C 80 01                                        BSET    0,SP, #1                                ;set C-flag
                                                              ;Restore registers
00149C 0F949C MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  5                               ;check SSTACK
00149C 0F949C 38                                              PULC                                            ;restore CCR (incl. result)
00149D 0F949D 3A                                              PULD                                            ;restore D
                                                              ;Done
00149E 0F949E 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and D are preserved
00149F 0F949F -> $149F                SCI_RX_READY_BL         EQU     *
00149F 0F949F MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 5
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00149F 0F949F 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0014A1 0F94A1 07 FC                                           JOBSR   SCI_RX_READY_BL                                  (SCI_MAKE_BL)
0014A3 0F94A3 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0014A5 0F94A5 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0014A7 0F94A7 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0014A7 0F94A7 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0014A8 0F94A8 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0014A8 0F94A8 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014A8 0F94A8 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014AD 0F94AD 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014B2 0F94B2 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0014B4 0F94B4 MACRO                                           SSTACK_PREPUSH  5                                        (SCI_MAKE_BL)
0014B4 0F94B4 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Pause SCI communication (non-blocking)
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 3 bytes
                                      ;         X, Y, and D are preserved
0014B6 0F94B6 -> $14B6                SCI_PAUSE_NB            EQU     *
                                                              ;Save registers
0014B6 0F94B6 14 01                                           SEC                                             ;default result: success
0014B8 0F94B8 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check for pending pause request
0014B9 0F94B9 1E 1B 26 80 25                                  BRSET   SCI_FLGS,SCI_FLG_PAUSE,SCI_PAUSE_NB_1   ;pause already initiated
                                                              ;Set pause request
0014BE 0F94BE 1C 1B 26 80                                     BSET    SCI_FLGS,SCI_FLG_PAUSE                  ;flag pause request
                                                              ;Apply flow control
0014C2 0F94C2 MACRO                                           SCI_TX_XONXOFF                                  ;transmit XOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_TX_XONXOFF)
                                      ; args:   none                                                                   (SCI_TX_XONXOFF)
                                      ; result: none                                                                   (SCI_TX_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_TX_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_XONXOFF)
0014C2 0F94C2 1C 1B 26 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_XONXOFF           ;request transmission of XON/XOFF (SCI_TX_XONXOFF)
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts (SCI_TX_XONXOFF)
0014C6 0F94C6 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_TX_XONXOFF)
                                                              ;Set pause timeout
0014CB 0F94CB 18 0B 04 1B 27                                  MOVB    #SCI_PAUSE_DLY, SCI_OC_CNT              ;reset down counter
0014D0 0F94D0 18 04 00 44 00 52                               MOVW    SCI_OC_TCNT, SCI_OC_TC                  ;reset OC register
0014D6 0F94D6 MACRO                                           TIM_EN  SCI_OC_TIM, SCI_OC                      ;enable timer
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN)
                                      ;       2: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
0014D6 0F94D6 MACRO                                           TIM_MULT_EN     SCI_OC_TIM, (1<<SCI_OC)                  (TIM_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN/TIM_MULT_EN)
                                      ;       2: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
0014D6 0F94D6 18 0B 02 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET            ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
0014DB 0F94DB 4C 4C 02                                        BSET    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC              ;enable interrupts (TIM_EN/TIM_MULT_EN)
0014DE 0F94DE 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), SCI_OC_TIM+TSCR1_OFFSET   ;enable timer (TIM_EN/TIM_MULT_EN)
                                                              ;Check if pause sequence is complete (=RIE cleared)
0014E3 0F94E3 1F 1B 27 FF 03          SCI_PAUSE_NB_1          BRCLR   SCI_OC_CNT,#$FF,SCI_PAUSE_NB_2          ;pause sequence complete
                                                              ;Signal failure
0014E8 0F94E8 0D 80 01                                        BCLR    0,SP, #1                                ;clear C-flag
                                                              ;Restore registers
0014EB 0F94EB MACRO                   SCI_PAUSE_NB_2          SSTACK_PREPULL  3                               ;check SSTACK
0014EB 0F94EB 38                                              PULC                                            ;restore CCR (incl. result)
0014EC 0F94EC 3D                                              RTS                                             ;done
                                      ;#Pause SCI communication (blocking)
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
0014ED 0F94ED -> $14ED                SCI_PAUSE_BL            EQU     *
0014ED 0F94ED MACRO                                           SCI_MAKE_BL     SCI_PAUSE_NB, 3
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0014ED 0F94ED 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0014EF 0F94EF 07 C5                                           JOBSR   SCI_PAUSE_NB                                     (SCI_MAKE_BL)
0014F1 0F94F1 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0014F3 0F94F3 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0014F5 0F94F5 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0014F5 0F94F5 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0014F6 0F94F6 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0014F6 0F94F6 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014F6 0F94F6 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0014FB 0F94FB 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001500 0F9500 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001502 0F9502 MACRO                                           SSTACK_PREPUSH  3                                        (SCI_MAKE_BL)
001502 0F9502 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Resume SCI communication
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 2(4) bytes
                                      ;         X, Y, and D are preserved
001504 0F9504 -> $1504                SCI_RESUME              EQU     *
                                                              ;Clear pause request
001504 0F9504 1D 1B 26 80                                     BCLR    SCI_FLGS,SCI_FLG_PAUSE                  ;unflag pause request
                                                              ;Reenable RX traffic
001508 0F9508 FC 1B 1A                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
00150B 0F950B 18 16                                           SBA                                             ;A=in-out
00150D 0F950D 84 07                                           ANDA    #SCI_RXBUF_MASK                         ;adjust RX data count
00150F 0F950F 81 05                                           CMPA    #SCI_RX_EMPTY_LEVEL+1                   ;check flow control threshold
001511 0F9511 24 09                                           BHS     SCI_RESUME_1                            ;keep RX traffic blocked
001513 0F9513 MACRO                                           SCI_TX_XONXOFF                                  ;transmit XON/XOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_TX_XONXOFF)
                                      ; args:   none                                                                   (SCI_TX_XONXOFF)
                                      ; result: none                                                                   (SCI_TX_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_TX_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_XONXOFF)
001513 0F9513 1C 1B 26 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_XONXOFF           ;request transmission of XON/XOFF (SCI_TX_XONXOFF)
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts (SCI_TX_XONXOFF)
001517 0F9517 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_TX_XONXOFF)
                                                              ;Done
00151C 0F951C MACRO                   SCI_RESUME_1            SSTACK_PREPULL  2                               ;check SSTACK
00151C 0F951C 3D                                              RTS
                                      ;#Perform baud rate detection (non-blocking)
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and D are preserved
00151D 0F951D -> $151D                SCI_BAUD_DETECT_NB      EQU     *
                                                              ;Check for ongoing baud rate detection
00151D 0F951D MACRO                                           TIM_BREN SCI_IC_TIM,SCI_IC,SCI_BAUD_DETECT_NB_1 ;baud rate detection already running
                                      ;#Branch if channel is enabled                                                   (TIM_BREN)
                                      ; args: 1: start address of register space                                       (TIM_BREN)
                                      ;       2: channel number                                                        (TIM_BREN)
                                      ;       3: branch address                                                        (TIM_BREN)
                                      ; SSTACK: none                                                                   (TIM_BREN)
                                      ;         X, Y, and D are preserved                                              (TIM_BREN)
00151D 0F951D 4E 4C 01 2E                                     BRSET   SCI_IC_TIM+TIE_OFFSET, #(1<<SCI_IC), SCI_BAUD_DETECT_NB_1 (TIM_BREN)
                                                              ;Start baud rate detection
001521 0F9521 18 03 FF FF 1A FC                               MOVW    #$FFFF, SCI_BD_PULSE                    ;start with max. pulse length
001527 0F9527 1D 1B 26 40                                     BCLR    SCI_FLGS,#SCI_FLG_TC_VALID              ;no valid IC edge, yet
00152B 0F952B MACRO                                           SCI_BDSIG_START                                 ;signal baud rate detection
                                                              ;LED_SET        C, LED_SEQ_SINGLE_GAP;start single gap on red LED (SCI_BDSIG_START)
00152B 0F952B MACRO                                           LED_SET C, LED_SEQ_HEART_BEAT;start single gap on error LED (SCI_BDSIG_START)
                                      ;#Set blink pattern                                                              (SCI_BDSIG_START/LED_SET)
                                      ; args:   1: LED index (A..D)                                                    (SCI_BDSIG_START/LED_SET)
                                      ;         2: signal index (0..7)                                                 (SCI_BDSIG_START/LED_SET)
                                      ; result: none                                                                   (SCI_BDSIG_START/LED_SET)
                                      ; SSTACK: none                                                                   (SCI_BDSIG_START/LED_SET)
                                      ;         X, Y and D are preserved                                               (SCI_BDSIG_START/LED_SET)
00152B 0F952B 1C 1A F5 02                                     BSET    LED_C_REQ, #(1<<LED_SEQ_HEART_BEAT)            ;set request (SCI_BDSIG_START/LED_SET)
00152F 0F952F MACRO                                           TIM_CNT_EN      LED_TIM                 ;enable timer counter (SCI_BDSIG_START/LED_SET)
                                      ;#Enable the timer counter only                                                  (SCI_BDSIG_START/LED_SET/TIM_CNT_EN)
                                      ; args: 1: start address of register space                                       (SCI_BDSIG_START/LED_SET/TIM_CNT_EN)
                                      ; SSTACK: none                                                                   (SCI_BDSIG_START/LED_SET/TIM_CNT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_BDSIG_START/LED_SET/TIM_CNT_EN)
00152F 0F952F 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), LED_TIM+TSCR1_OFFSET   ;enable timer (SCI_BDSIG_START/LED_SET/TIM_CNT_EN)
001534 0F9534 MACRO                                           TIM_IE  LED_TIM, LED_OC                 ;enable interrupt (SCI_BDSIG_START/LED_SET)
                                      ;#Enable one timer interrupt                                                     (SCI_BDSIG_START/LED_SET/TIM_IE)
                                      ; args: 1: start address of register space                                       (SCI_BDSIG_START/LED_SET/TIM_IE)
                                      ;       2: channel number                                                        (SCI_BDSIG_START/LED_SET/TIM_IE)
                                      ; SSTACK: none                                                                   (SCI_BDSIG_START/LED_SET/TIM_IE)
                                      ;         X, Y, and D are preserved                                              (SCI_BDSIG_START/LED_SET/TIM_IE)
001534 0F9534 MACRO                                           TIM_MULT_IE     LED_TIM, (1<<LED_OC)                     (SCI_BDSIG_START/LED_SET/TIM_IE)
                                      ;#Enable multiple timer interrupts                                               (SCI_BDSIG_START/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ; args: 1: start address of register space                                       (SCI_BDSIG_START/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ;       2: channels  mask                                                        (SCI_BDSIG_START/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ; SSTACK: none                                                                   (SCI_BDSIG_START/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ;         X, Y, and D are preserved                                              (SCI_BDSIG_START/LED_SET/TIM_IE/TIM_MULT_IE)
001534 0F9534 4C 4C 08                                        BSET    LED_TIM+TIE_OFFSET, #1<<LED_OC              ;enable interrupts (SCI_BDSIG_START/LED_SET/TIM_IE/TIM_MULT_IE)
001537 0F9537 MACRO                                           TIM_DIS SCI_OC_TIM, SCI_OC                      ;stop OC interrupts
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS)
                                      ;       2: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
001537 0F9537 MACRO                                           TIM_MULT_DIS    SCI_OC_TIM, (1<<SCI_OC)                  (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS/TIM_MULT_DIS)
                                      ;       2: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
001537 0F9537 4D 4C 02                                        BCLR    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC                (TIM_DIS/TIM_MULT_DIS)
00153A 0F953A 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
00153C 0F953C 79 00 46                DISABLE                 CLR     SCI_OC_TIM+TSCR1_OFFSET                          (TIM_DIS/TIM_MULT_DIS)
00153F 0F953F -> $153F                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
00153F 0F953F 4D CB 04                                        BCLR    SCICR2,#RE                              ;disable SCI receiver
001542 0F9542 MACRO                                           TIM_EN  SCI_IC_TIM, SCI_IC                      ;start baud rate detection
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN)
                                      ;       2: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
001542 0F9542 MACRO                                           TIM_MULT_EN     SCI_IC_TIM, (1<<SCI_IC)                  (TIM_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN/TIM_MULT_EN)
                                      ;       2: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
001542 0F9542 18 0B 01 00 4E                                  MOVB    #1<<SCI_IC, SCI_IC_TIM+TFLG1_OFFSET            ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
001547 0F9547 4C 4C 01                                        BSET    SCI_IC_TIM+TIE_OFFSET, #1<<SCI_IC              ;enable interrupts (TIM_EN/TIM_MULT_EN)
00154A 0F954A 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), SCI_IC_TIM+TSCR1_OFFSET   ;enable timer (TIM_EN/TIM_MULT_EN)
                                                              ;Done
00154F 0F954F MACRO                   SCI_BAUD_DETECT_NB_1    SSTACK_PREPULL  2                               ;check SSTACK
00154F 0F954F 3D                                              RTS
                                      ;#Perform baud rate detection (blocking)
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
001550 0F9550 -> $1550                SCI_BAUD_DETECT_BL      EQU     *
                                                              ;Initiate baud rate detection
001550 0F9550 MACRO                                           SCI_BAUD_DETECT_NB                              ;start baud rate detection
                                      ;#Perform baud rate detection (non-blocking)                                     (SCI_BAUD_DETECT_NB)
                                      ; args:   none                                                                   (SCI_BAUD_DETECT_NB)
                                      ; result: C-flag: set if baud rate detection is already complete                 (SCI_BAUD_DETECT_NB)
                                      ; SSTACK: 2 bytes                                                                (SCI_BAUD_DETECT_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_BAUD_DETECT_NB)
001550 0F9550 MACRO                                           SSTACK_JOBSR    SCI_BAUD_DETECT_NB, 2                    (SCI_BAUD_DETECT_NB)
                                      ;#Check stack and call subroutine                                                (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
001550 0F9550 07 CB                                           JOBSR   SCI_BAUD_DETECT_NB                               (SCI_BAUD_DETECT_NB/SSTACK_JOBSR)
                                                              ;Wait until the baud rate detection is complete
001552 0F9552 14 10                   SCI_BAUD_DETECT_BL_1    SEI                                             ;disable interrupts
001554 0F9554 MACRO                                           TIM_BRDIS SCI_IC_TIM,SCI_IC,SCI_BAUD_DETECT_BL_2;baud rate detected
                                      ;#Branch if channel is disnabled                                                 (TIM_BRDIS)
                                      ; args: 1: start address of register space                                       (TIM_BRDIS)
                                      ;       2: channel number                                                        (TIM_BRDIS)
                                      ;       3: branch address                                                        (TIM_BRDIS)
                                      ; SSTACK: none                                                                   (TIM_BRDIS)
                                      ;         X, Y, and D are preserved                                              (TIM_BRDIS)
001554 0F9554 4F 4C 01 0E                                     BRCLR   SCI_IC_TIM+TIE_OFFSET, #(1<<SCI_IC), SCI_BAUD_DETECT_BL_2 (TIM_BRDIS)
001558 0F9558 MACRO                                           ISTACK_WAIT                                     ;wait for any event
                                      ;#Wait until any interrupt has been serviced                                     (ISTACK_WAIT)
                                      ; args:   none                                                                   (ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (ISTACK_WAIT)
001558 0F9558 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (ISTACK_WAIT)
                                      ;#Service COP                                                                    (ISTACK_WAIT/COP_SERVICE)
001558 0F9558 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (ISTACK_WAIT/COP_SERVICE)
00155D 0F955D 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (ISTACK_WAIT/COP_SERVICE)
001562 0F9562 10 EF                                           CLI                                                      (ISTACK_WAIT)
001564 0F9564 20 EC                                           JOB     SCI_BAUD_DETECT_BL_1                    ;check again
                                                              ;Done
001566 0F9566 10 EF                   SCI_BAUD_DETECT_BL_2    CLI                                             ;enable interrupts
001568 0F9568 MACRO                                           SSTACK_PREPULL  2                               ;check SSTACK
001568 0F9568 3D                                              RTS
                                      ;ISRs
                                      ;----
                                      ;#TIM IC ISR
                                      ;-----------
                                      ;  Baud rate detection: (sole purpose)
                                      ;    SCI_BD_PULSE must be set to $FFFF before enabling baud rate detection ->enabling SCI_IC.
                                      ;    SCI_IC serves as indicator that baud rate detection is active.
                                      ;    SCI_OC will be enabled after the first edge has been captured.
                                      ;    SCI_OC serves as indicator that pulse wiidth may be calculated.
                                      ;    A SCI_OC event ends baud rate detection
001569 0F9569 -> $1569                SCI_ISR_IC              EQU     *
                                                              ;########################################
                                                              ;# Baud Rate Detection                  #
                                                              ;########################################
                                                              ;Capture timestamp
001569 0F9569 DC 50                                           LDD     SCI_IC_TC                       ;current TC -> D
                                                              ;Clear interrupt flag (current TC in D)
00156B 0F956B MACRO                                           TIM_CLRIF SCI_IC_TIM, SCI_IC            ;clear interrupt flag
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
00156B 0F956B MACRO                                           TIM_MULT_CLRIF  SCI_IC_TIM, (1<<SCI_IC)                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
00156B 0F956B 18 0B 01 00 4E                                  MOVB    #1<<SCI_IC, SCI_IC_TIM+TFLG1_OFFSET              (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Calculate pulse length (current TC in D)
001570 0F9570 B7 45                                           TFR     D, X                            ;save current TC
001572 0F9572 1F 1B 26 40 09                                  BRCLR   SCI_FLGS,#SCI_FLG_TC_VALID,SCI_ISR_IC_1;previous TC is invalid
001577 0F9577 B3 1A FA                                        SUBD    SCI_BD_LAST_TC                  ;pulse width -> D
00157A 0F957A CD 1A FC                                        LDY     #SCI_BD_PULSE                   ;shortest pulse storage -> Y
00157D 0F957D 18 1F 40                                        EMINM   0,Y                             ;keep shortest
001580 0F9580 7E 1A FA                SCI_ISR_IC_1            STX     SCI_BD_LAST_TC                  ;update previous TC
001583 0F9583 1C 1B 26 40                                     BSET    SCI_FLGS,#SCI_FLG_TC_VALID      ;flag TC valid
                                                              ;(Re-)trigger SCI_OC (current TC in X)
001587 0F9587 5E 52                                           STX     SCI_OC_TC                       ;set timeout
001589 0F9589 MACRO                                           TIM_EN  SCI_OC_TIM, SCI_OC              ;enable SCI_OC
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN)
                                      ;       2: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
001589 0F9589 MACRO                                           TIM_MULT_EN     SCI_OC_TIM, (1<<SCI_OC)                  (TIM_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN/TIM_MULT_EN)
                                      ;       2: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
001589 0F9589 18 0B 02 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET            ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
00158E 0F958E 4C 4C 02                                        BSET    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC              ;enable interrupts (TIM_EN/TIM_MULT_EN)
001591 0F9591 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), SCI_OC_TIM+TSCR1_OFFSET   ;enable timer (TIM_EN/TIM_MULT_EN)
                                                              ;Done
001596 0F9596 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001596 0F9596 0B                                              RTI                                                      (ISTACK_RTI)
                                      ;#TIM OC ISR
                                      ;-----------
                                      ;  Baud rate detection:
                                      ;    Invalidate last IC edge at every OC event
                                      ;    Calcuate and set baud rate when delay is over
                                      ;      Restart baud rate detection if baud rate is invalid
                                      ;  Pause:
                                      ;    Disable SCI when delay is over
                                      ;  XON/XOFF flow control
                                      ;    Disable OC
                                      ;    Request XON/XOFF transmission
                                      ;  RTS polling
                                      ;    Disable OC
                                      ;    Run RX/TX ISR
001597 0F9597 -> $1597                SCI_ISR_OC              EQU     *
001597 0F9597                                                 //Clear interrupt flag
001597 0F9597 MACRO                                           TIM_CLRIF, SCI_OC_TIM, SCI_OC           ;clear IF
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001597 0F9597 MACRO                                           TIM_MULT_CLRIF  SCI_OC_TIM, (1<<SCI_OC)                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001597 0F9597 18 0B 02 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET              (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;########################################
                                                              ;# Baud Rate Detection                  #
                                                              ;# ===================                  #
                                                              ;# -check shortest pulse                #
                                                              ;# -set baud rate or restart detection  #
                                                              ;# -start sci if bau rate is valid      #
                                                              ;########################################
                                                              ;Check if baud rate detection is active
00159C 0F959C MACRO                   SCI_ISR_OC_BD           TIM_BRDIS SCI_IC_TIM, SCI_IC,SCI_ISR_OC_BD_3;baud rate detection not active
                                      ;#Branch if channel is disnabled                                                 (TIM_BRDIS)
                                      ; args: 1: start address of register space                                       (TIM_BRDIS)
                                      ;       2: channel number                                                        (TIM_BRDIS)
                                      ;       3: branch address                                                        (TIM_BRDIS)
                                      ; SSTACK: none                                                                   (TIM_BRDIS)
                                      ;         X, Y, and D are preserved                                              (TIM_BRDIS)
00159C 0F959C 4F 4C 01 44                                     BRCLR   SCI_IC_TIM+TIE_OFFSET, #(1<<SCI_IC), SCI_ISR_OC_BD_3 (TIM_BRDIS)
                                                              ;Check captured pulse is too short
0015A0 0F95A0 FC 1A FC                                        LDD     SCI_BD_PULSE                    ;pulse width -> D
0015A3 0F95A3 8C 00 93                                        CPD     #SCI_BD_MIN_PULSE               ;check if pulse is too short
0015A6 0F95A6 24 18                                           BHS     SCI_ISR_OC_BD_2                 ;pulse is long enough
                                                              ;Restart baud sate detection
0015A8 0F95A8 18 03 FF FF 1A FC                               MOVW    #$FFFF, SCI_BD_PULSE
0015AE 0F95AE MACRO                   SCI_ISR_OC_BD_1         TIM_DIS SCI_OC_TIM, SCI_OC              ;disable SCI_OC
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS)
                                      ;       2: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
0015AE 0F95AE MACRO                                           TIM_MULT_DIS    SCI_OC_TIM, (1<<SCI_OC)                  (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS/TIM_MULT_DIS)
                                      ;       2: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
0015AE 0F95AE 4D 4C 02                                        BCLR    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC                (TIM_DIS/TIM_MULT_DIS)
0015B1 0F95B1 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
0015B3 0F95B3 79 00 46                DISABLE                 CLR     SCI_OC_TIM+TSCR1_OFFSET                          (TIM_DIS/TIM_MULT_DIS)
0015B6 0F95B6 -> $15B6                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
0015B6 0F95B6 1D 1B 26 40                                     BCLR    SCI_FLGS,#SCI_FLG_TC_VALID      ;flag TC invalid
0015BA 0F95BA MACRO                                           TIM_CLRIF SCI_IC_TIM, SCI_IC            ;start with next edge
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0015BA 0F95BA MACRO                                           TIM_MULT_CLRIF  SCI_IC_TIM, (1<<SCI_IC)                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0015BA 0F95BA 18 0B 01 00 4E                                  MOVB    #1<<SCI_IC, SCI_IC_TIM+TFLG1_OFFSET              (TIM_CLRIF/TIM_MULT_CLRIF)
0015BF 0F95BF MACRO                                           ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0015BF 0F95BF 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Check captured pulse is too long (pulse length in D)
0015C0 0F95C0 8C FF FF                SCI_ISR_OC_BD_2         CPD     #SCI_BD_MAX_PULSE               ;check if pulse is too long
0015C3 0F95C3 22 E9                                           BHI     SCI_ISR_OC_BD_1                 ;pulse is still too long
                                                              ;Calculate baud rate divider (pulse length in D)
0015C5 0F95C5 MACRO                                           SCI_SET_BDIV                            ;determine baud rate divider
                                      ;#Calculate and set baud rate divider                                            (SCI_SET_BDIV)
                                      ; args:   D: shortest RX pulse                                                   (SCI_SET_BDIV)
                                      ; result: D: BDIF value                                                          (SCI_SET_BDIV)
                                      ; SSTACK: 0 bytes                                                                (SCI_SET_BDIV)
                                      ;         X and Y are preserved                                                  (SCI_SET_BDIV)
                                                              ;Calculate BDIV value                                    (SCI_SET_BDIV)
                                                              ;LSRD                                   ;half            (SCI_SET_BDIV)
                                                              ;LSRD                                   ;half            (SCI_SET_BDIV)
0015C5 0F95C5 49                                              LSRD                                    ;half            (SCI_SET_BDIV)
0015C6 0F95C6 49                                              LSRD                                    ;half            (SCI_SET_BDIV)
0015C7 0F95C7 49                                              LSRD                                    ;half            (SCI_SET_BDIV)
                                                              ;Store BDIV value (BDIV in D)                            (SCI_SET_BDIV)
0015C8 0F95C8 5C C8                                           STD     SCIBDH                          ;set baud rate divider (SCI_SET_BDIV)
0015CA 0F95CA 7C 1B 28                                        STD     SCI_SAVED_BDIV                  ;save baud rate  (SCI_SET_BDIV)
                                                              ;Store checksum (BDIV in D)                              (SCI_SET_BDIV)
0015CD 0F95CD 18 06                                           ABA                                     ;calculate checksum (SCI_SET_BDIV)
0015CF 0F95CF 41                                              COMA                                    ;                (SCI_SET_BDIV)
0015D0 0F95D0 7A 1A F9                                        STAA    SCI_SAVED_BDIV_CS               ;store checksum  (SCI_SET_BDIV)
0015D3 0F95D3 MACRO                                           SCI_BDSIG_STOP                          ;stop signaling baud rate detection
                                                              ;LED_CLR        C, LED_SEQ_SINGLE_GAP;stop single gap on red LED (SCI_BDSIG_STOP)
0015D3 0F95D3 MACRO                                           LED_CLR C, LED_SEQ_HEART_BEAT;stop single gap on error LED (SCI_BDSIG_STOP)
                                      ;#Set blink pattern                                                              (SCI_BDSIG_STOP/LED_CLR)
                                      ; args:   1: LED index (A..D)                                                    (SCI_BDSIG_STOP/LED_CLR)
                                      ;         2: signal index (0..7)                                                 (SCI_BDSIG_STOP/LED_CLR)
                                      ; result: none                                                                   (SCI_BDSIG_STOP/LED_CLR)
                                      ; SSTACK: none                                                                   (SCI_BDSIG_STOP/LED_CLR)
                                      ;         X, Y, and D are preserved                                              (SCI_BDSIG_STOP/LED_CLR)
0015D3 0F95D3 1D 1A F5 02                                     BCLR    LED_C_REQ, #(1<<LED_SEQ_HEART_BEAT)            ;clear request (SCI_BDSIG_STOP/LED_CLR)
0015D7 0F95D7 MACRO                                           TIM_DIS SCI_IC_TIM, SCI_IC              ;stop IC
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS)
                                      ;       2: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
0015D7 0F95D7 MACRO                                           TIM_MULT_DIS    SCI_IC_TIM, (1<<SCI_IC)                  (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS/TIM_MULT_DIS)
                                      ;       2: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
0015D7 0F95D7 4D 4C 01                                        BCLR    SCI_IC_TIM+TIE_OFFSET, #1<<SCI_IC                (TIM_DIS/TIM_MULT_DIS)
0015DA 0F95DA 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
0015DC 0F95DC 79 00 46                DISABLE                 CLR     SCI_IC_TIM+TSCR1_OFFSET                          (TIM_DIS/TIM_MULT_DIS)
0015DF 0F95DF -> $15DF                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
0015DF 0F95DF 4C CB 04                                        BSET    SCICR2,#RE                      ;enable SCI receiver
0015E2 0F95E2 20 17                                           JOB     SCI_ISR_OC_RX                   ;continue
                                                              ;Next
0015E4 0F95E4 -> $15E4                SCI_ISR_OC_BD_3         EQU     *
                                                              ;########################################
                                                              ;# Pause                                #
                                                              ;# =====                                #
                                                              ;# -disable SCI and timer when timeout  #
                                                              ;#  has been reached                    #
                                                              ;########################################
                                                              ;Check if pause is requested
0015E4 0F95E4 1F 1B 26 80 12          SCI_ISR_OC_PAUSE        BRCLR SCI_FLGS,SCI_FLG_PAUSE,SCI_ISR_OC_PAUSE_2;no pause requested
                                                              ;Check if pause length
0015E9 0F95E9 F7 1B 27                                        TST     SCI_OC_CNT                      ;check is pause timeout is over
0015EC 0F95EC 27 0D                                           BEQ     SCI_ISR_OC_RX                   ;pause timeout is over
0015EE 0F95EE 73 1B 27                                        DEC     SCI_OC_CNT                      ;decrement SCI_OC_CNT
                                                              ;Transmit frequent XOFFs during pause
0015F1 0F95F1 MACRO                                           SCI_TX_XONXOFF                          ;request XON/XOFF reminder
                                      ;#Send XON/XOFF symbol                                                           (SCI_TX_XONXOFF)
                                      ; args:   none                                                                   (SCI_TX_XONXOFF)
                                      ; result: none                                                                   (SCI_TX_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_TX_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_XONXOFF)
0015F1 0F95F1 1C 1B 26 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_XONXOFF           ;request transmission of XON/XOFF (SCI_TX_XONXOFF)
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts (SCI_TX_XONXOFF)
0015F5 0F95F5 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_TX_XONXOFF)
0015FA 0F95FA MACRO                   SCI_ISR_OC_PAUSE_1      ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0015FA 0F95FA 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Next
0015FB 0F95FB -> $15FB                SCI_ISR_OC_PAUSE_2      EQU     *
                                                              ;########################################
                                                              ;# Regular RX operation                 #
                                                              ;# ======                               #
                                                              ;# - send XON/XOFF reminder             #
                                                              ;#   or                                 #
                                                              ;# - disable timer                      #
                                                              ;########################################
0015FB 0F95FB -> $15FB                SCI_ISR_OC_RX           EQU     *
0015FB 0F95FB 73 1B 27                                        DEC     SCI_OC_CNT                      ;decrement counter
0015FE 0F95FE 26 09                                           BNE     SCI_ISR_OC_RX_1                 ;reminder not yet required
001600 0F9600 MACRO                                           SCI_TX_XONXOFF                          ;request XON/XOFF reminder
                                      ;#Send XON/XOFF symbol                                                           (SCI_TX_XONXOFF)
                                      ; args:   none                                                                   (SCI_TX_XONXOFF)
                                      ; result: none                                                                   (SCI_TX_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_TX_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_XONXOFF)
001600 0F9600 1C 1B 26 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_XONXOFF           ;request transmission of XON/XOFF (SCI_TX_XONXOFF)
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts (SCI_TX_XONXOFF)
001604 0F9604 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_TX_XONXOFF)
001609 0F9609 -> $1609                SCI_ISR_OC_RX_1         EQU     *                               ;done
001609 0F9609 MACRO                                           ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001609 0F9609 0B                                              RTI                                                      (ISTACK_RTI)
                                      ;#SCI TX ISR (status flags in A)
                                      ;-------------------------------
00160A 0F960A 85 80                   SCI_ISR_TX              BITA    #TDRE                                   ;check if SCI is ready for new TX data
00160C 0F960C 27 71                                           BEQ     <SCI_ISR_TX_5                           ;done for now
                                                              ;Check if an escape sequence is ongoing
00160E 0F960E 1E 1B 26 01 3A                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_1 ;Don't escape any XON/XOFF symbols
                                                              ;Check if XON/XOFF transmission is required
001613 0F9613 1F 1B 26 08 35                                  BRCLR   SCI_FLGS, #SCI_FLG_TX_XONXOFF, SCI_ISR_TX_1;XON/XOFF not requested
                                                              ;Clear XON/XOFF request
001618 0F9618 1D 1B 26 08                                     BCLR    SCI_FLGS, #SCI_FLG_TX_XONXOFF
                                                              ;Check for forced XOFF
00161C 0F961C 1E 1B 26 80 66                                  BRSET   SCI_FLGS, #SCI_FLG_PAUSE, SCI_ISR_TX_7  ;transmit XOFF
                                                              ;Trigger next XON/XOFF reminder
001621 0F9621 18 0B FF 1B 27                                  MOVB    #SCI_XONXOFF_DLY, SCI_OC_CNT            ;set OC event counter
001626 0F9626 18 04 00 44 00 52                               MOVW    SCI_OC_TCNT, SCI_OC_TC                  ;set OC register
00162C 0F962C MACRO                                           TIM_EN  SCI_OC_TIM, SCI_OC                      ;enable timer
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN)
                                      ;       2: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
00162C 0F962C MACRO                                           TIM_MULT_EN     SCI_OC_TIM, (1<<SCI_OC)                  (TIM_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN/TIM_MULT_EN)
                                      ;       2: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
00162C 0F962C 18 0B 02 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET            ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
001631 0F9631 4C 4C 02                                        BSET    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC              ;enable interrupts (TIM_EN/TIM_MULT_EN)
001634 0F9634 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), SCI_OC_TIM+TSCR1_OFFSET   ;enable timer (TIM_EN/TIM_MULT_EN)
                                                              ;Check RX queue
001639 0F9639 FC 1B 1A                                        LDD     SCI_RXBUF_IN                            ;in:out -> D
00163C 0F963C 18 16                                           SBA                                             ;in-out -> A
00163E 0F963E 84 07                                           ANDA    #SCI_RXBUF_MASK                         ;adjust entry count
                                                              ;Check XOFF theshold
001640 0F9640 81 10                                           CMPA    #SCI_RX_FULL_LEVEL                      ;check threshold
001642 0F9642 24 43                                           BHS     <SCI_ISR_TX_7                           ;transmit XOFF
                                                              ;Check XON theshold
001644 0F9644 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL                     ;check threshold
001646 0F9646 23 38                                           BLS     <SCI_ISR_TX_6                           ;transmit XON
                                                              ;Check XOFF status
001648 0F9648 1E 1B 26 04 28                                  BRSET   SCI_FLGS, #SCI_FLG_RX_XOFF, SCI_ISR_TX_3 ;stop transmitting
                                                              ;Check TX buffer
00164D 0F964D FC 1B 24                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
001650 0F9650 18 17                                           CBA
001652 0F9652 27 21                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
001654 0F9654 CD 1B 1C                                        LDY     #SCI_TXBUF
                                                              ;Check for DLE (in-index in A, out-index in B, buffer pointer in Y)
001657 0F9657 1D 1B 26 01                                     BCLR    SCI_FLGS, #SCI_FLG_TX_ESC
00165B 0F965B B7 45                                           TFR     D, X
00165D 0F965D E6 ED                                           LDAB    B,Y
00165F 0F965F C1 10                                           CMPB    #SCI_C0_DLE
001661 0F9661 26 04                                           BNE     <SCI_ISR_TX_2
001663 0F9663 1C 1B 26 01                                     BSET    SCI_FLGS, #SCI_FLG_TX_ESC
001667 0F9667 5B CF                   SCI_ISR_TX_2            STAB    SCIDRL
001669 0F9669 B7 54                                           TFR     X, D
                                                              ;Increment index (in-index in A, out-index in B, buffer pointer in Y)
00166B 0F966B 52                                              INCB
00166C 0F966C C4 07                                           ANDB    #SCI_TXBUF_MASK
00166E 0F966E 7B 1B 25                                        STAB    SCI_TXBUF_OUT
001671 0F9671 18 17                                           CBA
001673 0F9673 26 0A                                           BNE     <SCI_ISR_TX_5                           ;done
                                                              ;Stop transmitting
001675 0F9675 -> $1675                SCI_ISR_TX_3            EQU     *
001675 0F9675 1E 1B 26 08 05                                  BRSET   SCI_FLGS, #SCI_FLG_TX_XONXOFF, SCI_ISR_TX_5;consider pending XON/XOFF symbols
00167A 0F967A 18 0B 2C 00 CB          SCI_ISR_TX_4            MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
00167F 0F967F MACRO                   SCI_ISR_TX_5            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00167F 0F967F 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Transmit XON
001680 0F9680 18 0B 11 00 CF          SCI_ISR_TX_6            MOVB    #SCI_C0_XON, SCIDRL
001685 0F9685 20 F8                                           JOB     SCI_ISR_TX_5                            ;done
                                                              ;Transmit XOFF
001687 0F9687 18 0B 13 00 CF          SCI_ISR_TX_7            MOVB    #SCI_C0_XOFF, SCIDRL
00168C 0F968C 20 F1                                           JOB     SCI_ISR_TX_5                            ;done
                                      ;#SCI RX/TX ISR (SCI ISR)
                                      ;------------------------
00168E 0F968E -> $168E                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
00168E 0F968E 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
001690 0F9690 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
001692 0F9692 18 27 FF 74                                     BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#SCI RX ISR (status flags in A)
                                      ;-------------------------------
001696 0F9696 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
                                                              ;Drop data during baud rate detection (status flags in A, RX data in B)
                                                              ;TIM_BREN SCI_IC_TIM, SCI_IC, SCI_ISR_RX_7      ;drop data
001698 0F9698 MACRO                                           TIM_BREN SCI_IC_TIM, SCI_IC, SCI_ISR_TX_5       ;drop data
                                      ;#Branch if channel is enabled                                                   (TIM_BREN)
                                      ; args: 1: start address of register space                                       (TIM_BREN)
                                      ;       2: channel number                                                        (TIM_BREN)
                                      ;       3: branch address                                                        (TIM_BREN)
                                      ; SSTACK: none                                                                   (TIM_BREN)
                                      ;         X, Y, and D are preserved                                              (TIM_BREN)
001698 0F9698 4E 4C 01 E3                                     BRSET   SCI_IC_TIM+TIE_OFFSET, #(1<<SCI_IC), SCI_ISR_TX_5 (TIM_BREN)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
00169C 0F969C 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
00169E 0F969E 1F 1B 26 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
0016A3 0F96A3 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
0016A5 0F96A5 1D 1B 26 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
0016A9 0F96A9 -> $16A9                SCI_ISR_RX_1            EQU     *
                                                              ;Check for RX errors (status flags in A, RX data in B)
0016A9 0F96A9 85 1F                                           BITA    #(SCI_FLG_SWOR|OR|NF|FE|PF)             ;don't handle control characters with errors
0016AB 0F96AB 26 27                                           BNE     <SCI_ISR_RX_3                           ;queue data
0016AD 0F96AD MACRO                                           SCI_ERRSIG_STOP                                 ;release error signal
0016AD 0F96AD MACRO                                           LED_CLR C, LED_SEQ_FAST_BLINK;stop fast blink on error LED (SCI_ERRSIG_STOP)
                                      ;#Set blink pattern                                                              (SCI_ERRSIG_STOP/LED_CLR)
                                      ; args:   1: LED index (A..D)                                                    (SCI_ERRSIG_STOP/LED_CLR)
                                      ;         2: signal index (0..7)                                                 (SCI_ERRSIG_STOP/LED_CLR)
                                      ; result: none                                                                   (SCI_ERRSIG_STOP/LED_CLR)
                                      ; SSTACK: none                                                                   (SCI_ERRSIG_STOP/LED_CLR)
                                      ;         X, Y, and D are preserved                                              (SCI_ERRSIG_STOP/LED_CLR)
0016AD 0F96AD 1D 1A F5 20                                     BCLR    LED_C_REQ, #(1<<LED_SEQ_FAST_BLINK)            ;clear request (SCI_ERRSIG_STOP/LED_CLR)
                                                              ;Check character is escaped (status flags in A, RX data in B)
0016B1 0F96B1 1E 1B 26 02 1E                                  BRSET   SCI_FLGS,#SCI_FLG_RX_ESC,SCI_ISR_RX_3   ;charakter is escaped (skip detection)
                                                              ;Check for DEL charakter (status flags in A, RX data in B)
0016B6 0F96B6 C1 7F                                           CMPB    #SCI_C0_DEL                             ;check for DEL charakter
0016B8 0F96B8 27 18                                           BEQ     <SCI_ISR_RX_2                           ;flag control character
                                                              ;Check for C0 charakters (status flags in A, RX data in B)
0016BA 0F96BA C1 1A                                           CMPB    #SCI_C0_US                              ;check for C0 charakters
0016BC 0F96BC 22 16                                           BHI     <SCI_ISR_RX_3                           ;C1 character found
                                                              ;Process XOFF (status flags in A, RX data in B)
0016BE 0F96BE C1 13                                           CMPB    #SCI_C0_XOFF                            ;check for XOFF
0016C0 0F96C0 27 6F                                           BEQ     <SCI_ISR_RX_8                           ;handle XOFF
                                                              ;Process XOFF (status flags in A, RX data in B)
0016C2 0F96C2 C1 13                                           CMPB    #SCI_C0_XOFF                            ;check for XON
0016C4 0F96C4 27 71                                           BEQ     <SCI_ISR_RX_9                           ;handle XON
                                                              ;Process DLE (status flags in A, RX data in B)
0016C6 0F96C6 C1 10                                           CMPB    #SCI_C0_DLE                             ;check for DLE
0016C8 0F96C8 27 73                                           BEQ     <SCI_ISR_RX_10                          ;handle DLE
                                                              ;Process BREAK (status flags in A, RX data in B)
0016CA 0F96CA C1 03                                           CMPB    #SCI_C0_BREAK                           ;check for BREAK
0016CC 0F96CC 27 75                                           BEQ     <SCI_ISR_RX_11                          ;handle BREAK
                                                              ;Process SUSPEND (status flags in A, RX data in B)
0016CE 0F96CE C1 18                                           CMPB    #SCI_C0_SUSPEND                         ;check for SUSPEND
0016D0 0F96D0 27 7F                                           BEQ     SCI_ISR_RX_12                           ;handle SUSPEND
                                                              ;Handle other C0 characters (status flags in A, RX data in B)
0016D2 0F96D2 8A 20                   SCI_ISR_RX_2            ORAA    #SCI_FLG_CTRL                           ;flag control character
                                                              ;Place data into RX queue (status flags in A, RX data in B)
0016D4 0F96D4 -> $16D4                SCI_ISR_RX_3            EQU     *
0016D4 0F96D4 1D 1B 26 02                                     BCLR    SCI_FLGS, #SCI_FLG_RX_ESC               ;remove escape flag
0016D8 0F96D8 B7 46                                           TFR     D, Y                                    ;flags:data -> Y
0016DA 0F96DA CE 1A FA                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
0016DD 0F96DD FC 1B 1A                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
0016E0 0F96E0 6D E4                                           STY     A,X                                     ;store flags:data in buffer
0016E2 0F96E2 8B 02                                           ADDA    #2                                      ;advance in pointer
0016E4 0F96E4 84 07                                           ANDA    #SCI_RXBUF_MASK                         ;
0016E6 0F96E6 18 17                                           CBA                                             ;check for buffer overflow
0016E8 0F96E8 27 6D                                           BEQ     <SCI_ISR_RX_13                          ;buffer overflow
0016EA 0F96EA 7A 1B 1A                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
0016ED 0F96ED 18 16                                           SBA
0016EF 0F96EF 84 07                                           ANDA    #SCI_RXBUF_MASK
0016F1 0F96F1 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
0016F3 0F96F3 24 66                                           BHS     <SCI_ISR_RX_14                          ;buffer is getting full
                                                              ;Restart pause time-out (flags:data in Y)
0016F5 0F96F5 1F 1B 26 80 0D          SCI_ISR_RX_4            BRCLR   SCI_FLGS,#SCI_FLG_PAUSE,SCI_ISR_RX_5    ;no pause requested
0016FA 0F96FA 18 0B 04 1B 27                                  MOVB    #SCI_PAUSE_DLY, SCI_OC_CNT              ;reset down counter
0016FF 0F96FF 18 04 00 44 00 52                               MOVW    SCI_OC_TCNT, SCI_OC_TC                  ;reset OC register
001705 0F9705 20 0B                                           JOB     SCI_ISR_RX_6
                                                              ;Restart XON/XOFF reminder delay (flags:data in Y)
001707 0F9707 18 0B FF 1B 27          SCI_ISR_RX_5            MOVB    #SCI_XONXOFF_DLY, SCI_OC_CNT            ;reset down counter
00170C 0F970C 18 03 00 44 00 52                               MOVW    #SCI_OC_TCNT, SCI_OC_TC                 ;reset down counter
001712 0F9712 -> $1712                SCI_ISR_RX_6            EQU     *
001712 0F9712 18 04 00 44 00 52                               MOVW    SCI_OC_TCNT, SCI_OC_TC                  ;adjust OC
001718 0F9718 MACRO                                           TIM_CLRIF SCI_OC_TIM, SCI_OC                    ;clear interrupt flag
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001718 0F9718 MACRO                                           TIM_MULT_CLRIF  SCI_OC_TIM, (1<<SCI_OC)                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001718 0F9718 18 0B 02 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET              (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Done
00171D 0F971D -> $171D                SCI_ISR_RX_7            EQU     *                                       ;done
00171D 0F971D MACRO                                           RANDOM_SHIFT_TIM SCI_OC_TIM                     ;randomize on input
                                      ;#Shift the LSB from a timer counter into the LSFR                               (RANDOM_SHIFT_TIM)
                                      ; args:   1: start address of timer register space                               (RANDOM_SHIFT_TIM)
                                      ; result: D: new pseudo-random value                                             (RANDOM_SHIFT_TIM)
                                      ; SSTACK: 0 bytes                                                                (RANDOM_SHIFT_TIM)
                                      ;         X and Y are preserved                                                  (RANDOM_SHIFT_TIM)
00171D 0F971D 4F 46 80 0F                                     BRCLR   SCI_OC_TIM+TSCR1_OFFSET,#TEN,DONE               ;timer is not running (RANDOM_SHIFT_TIM)
001721 0F9721 D6 45                                           LDAB    SCI_OC_TIM+TCNT_OFFSET+1                        ;random byte -> B (RANDOM_SHIFT_TIM)
001723 0F9723 54                                              LSRB                                            ;random bit -> C-flag (RANDOM_SHIFT_TIM)
001724 0F9724 MACRO                                           RANDOM_SHIFT_C                                  ;shift in C-flag (RANDOM_SHIFT_TIM)
                                      ;#Shift the LSB from a timer counter into the LSFR                               (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
                                      ; args:   none                                                                   (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
                                      ; result: D: new pseudo-random value                                             (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
                                      ; SSTACK: 0 bytes                                                                (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
                                      ;         X and Y are preserved                                                  (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
001724 0F9724 FC 1B 2E                                        LDD     RANDOM_LSFR                             ;LSFR -> D (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
001727 0F9727 55                                              ROLB                                            ;shift in C-flag (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
001728 0F9728 45                                              ROLA                                            ;        (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
001729 0F9729 04 64 01                                        TBNE    D, UPDATE_LSFR                          ;check for zero LSFR (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
00172C 0F972C 52                                              INCB                                            ;LSFR must not be zero (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
00172D 0F972D 7C 1B 2E                UPDATE_LSFR             STD     RANDOM_LSFR                             ;update LSFR (RANDOM_SHIFT_TIM/RANDOM_SHIFT_C)
001730 0F9730 -> $1730                DONE                    EQU     *                                       ;done    (RANDOM_SHIFT_TIM)
001730 0F9730 MACRO                                           ISTACK_RTI                                      ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001730 0F9730 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Handle C0 characters (status flags in A, RX data in B)
                                                              ;XOFF
001731 0F9731 1C 1B 26 04             SCI_ISR_RX_8            BSET    SCI_FLGS,#SCI_FLG_RX_XOFF               ;stop transmissions
001735 0F9735 20 D0                                           JOB     SCI_ISR_RX_5                            ;delay XON/XOFF reminder
                                                              ;XON
001737 0F9737 1D 1B 26 04             SCI_ISR_RX_9            BCLR    SCI_FLGS,#SCI_FLG_RX_XOFF               ;resume transmissions
00173B 0F973B 20 CA                                           JOB     SCI_ISR_RX_5                            ;delay XON/XOFF reminder
                                                              ;DLE
00173D 0F973D 1C 1B 26 02             SCI_ISR_RX_10           BSET    SCI_FLGS,#SCI_FLG_RX_ESC                ;escape next RX char
001741 0F9741 20 B2                                           JOB     SCI_ISR_RX_4                            ;restart pause delay
                                                              ;BREAK
001743 0F9743 MACRO                   SCI_ISR_RX_11           SCI_BREAK_ACTION                                ;BREAK action
                                      ;Break handler                                                                   (SCI_BREAK_ACTION)
001743 0F9743 MACRO                                           LED_SET D, LED_SEQ_FAST_BLINK;start fast blink on busy LED (SCI_BREAK_ACTION)
                                      ;#Set blink pattern                                                              (SCI_BREAK_ACTION/LED_SET)
                                      ; args:   1: LED index (A..D)                                                    (SCI_BREAK_ACTION/LED_SET)
                                      ;         2: signal index (0..7)                                                 (SCI_BREAK_ACTION/LED_SET)
                                      ; result: none                                                                   (SCI_BREAK_ACTION/LED_SET)
                                      ; SSTACK: none                                                                   (SCI_BREAK_ACTION/LED_SET)
                                      ;         X, Y and D are preserved                                               (SCI_BREAK_ACTION/LED_SET)
001743 0F9743 1C 1A F7 20                                     BSET    LED_D_REQ, #(1<<LED_SEQ_FAST_BLINK)            ;set request (SCI_BREAK_ACTION/LED_SET)
001747 0F9747 MACRO                                           TIM_CNT_EN      LED_TIM                 ;enable timer counter (SCI_BREAK_ACTION/LED_SET)
                                      ;#Enable the timer counter only                                                  (SCI_BREAK_ACTION/LED_SET/TIM_CNT_EN)
                                      ; args: 1: start address of register space                                       (SCI_BREAK_ACTION/LED_SET/TIM_CNT_EN)
                                      ; SSTACK: none                                                                   (SCI_BREAK_ACTION/LED_SET/TIM_CNT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_BREAK_ACTION/LED_SET/TIM_CNT_EN)
001747 0F9747 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), LED_TIM+TSCR1_OFFSET   ;enable timer (SCI_BREAK_ACTION/LED_SET/TIM_CNT_EN)
00174C 0F974C MACRO                                           TIM_IE  LED_TIM, LED_OC                 ;enable interrupt (SCI_BREAK_ACTION/LED_SET)
                                      ;#Enable one timer interrupt                                                     (SCI_BREAK_ACTION/LED_SET/TIM_IE)
                                      ; args: 1: start address of register space                                       (SCI_BREAK_ACTION/LED_SET/TIM_IE)
                                      ;       2: channel number                                                        (SCI_BREAK_ACTION/LED_SET/TIM_IE)
                                      ; SSTACK: none                                                                   (SCI_BREAK_ACTION/LED_SET/TIM_IE)
                                      ;         X, Y, and D are preserved                                              (SCI_BREAK_ACTION/LED_SET/TIM_IE)
00174C 0F974C MACRO                                           TIM_MULT_IE     LED_TIM, (1<<LED_OC)                     (SCI_BREAK_ACTION/LED_SET/TIM_IE)
                                      ;#Enable multiple timer interrupts                                               (SCI_BREAK_ACTION/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ; args: 1: start address of register space                                       (SCI_BREAK_ACTION/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ;       2: channels  mask                                                        (SCI_BREAK_ACTION/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ; SSTACK: none                                                                   (SCI_BREAK_ACTION/LED_SET/TIM_IE/TIM_MULT_IE)
                                      ;         X, Y, and D are preserved                                              (SCI_BREAK_ACTION/LED_SET/TIM_IE/TIM_MULT_IE)
00174C 0F974C 4C 4C 08                                        BSET    LED_TIM+TIE_OFFSET, #1<<LED_OC              ;enable interrupts (SCI_BREAK_ACTION/LED_SET/TIM_IE/TIM_MULT_IE)
00174F 0F974F 20 CC                                           JOB     SCI_ISR_RX_7                            ;done
                                                              ;ISTACK_RTI                                     ;done
                                                              ;SUSPEND
001751 0F9751 MACRO                   SCI_ISR_RX_12           SCI_SUSPEND_ACTION                              ;SUSPEND action
                                      ;Suspend handler                                                                 (SCI_SUSPEND_ACTION)
001751 0F9751 MACRO                                           LED_CLR D, LED_SEQ_FAST_BLINK;stop fast blink on busy LED (SCI_SUSPEND_ACTION)
                                      ;#Set blink pattern                                                              (SCI_SUSPEND_ACTION/LED_CLR)
                                      ; args:   1: LED index (A..D)                                                    (SCI_SUSPEND_ACTION/LED_CLR)
                                      ;         2: signal index (0..7)                                                 (SCI_SUSPEND_ACTION/LED_CLR)
                                      ; result: none                                                                   (SCI_SUSPEND_ACTION/LED_CLR)
                                      ; SSTACK: none                                                                   (SCI_SUSPEND_ACTION/LED_CLR)
                                      ;         X, Y, and D are preserved                                              (SCI_SUSPEND_ACTION/LED_CLR)
001751 0F9751 1D 1A F7 20                                     BCLR    LED_D_REQ, #(1<<LED_SEQ_FAST_BLINK)            ;clear request (SCI_SUSPEND_ACTION/LED_CLR)
001755 0F9755 20 C6                                           JOB     SCI_ISR_RX_7                            ;done
                                                              ;ISTACK_RTI                                     ;done
                                                              ;Buffer overflow
001757 0F9757 1C 1B 26 10             SCI_ISR_RX_13           BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set SWOR bit (software overrun)
                                                              ;Apply flow control (flags:data in Y)
00175B 0F975B MACRO                   SCI_ISR_RX_14           SCI_TX_XONXOFF                                  ;signal XOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_TX_XONXOFF)
                                      ; args:   none                                                                   (SCI_TX_XONXOFF)
                                      ; result: none                                                                   (SCI_TX_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_TX_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_XONXOFF)
00175B 0F975B 1C 1B 26 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_XONXOFF           ;request transmission of XON/XOFF (SCI_TX_XONXOFF)
                                                              ;BSET   SCICR2,#TXIE                            ;enable TX interrupts (SCI_TX_XONXOFF)
00175F 0F975F 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_TX_XONXOFF)
001764 0F9764 20 8F                                           JOB     SCI_ISR_RX_4                            ;restart pause delay
001766 0F9766 -> $1766                SCI_CODE_END            EQU     *
001766 0F9766 -> $F9766               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BAF 0F9BAF                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
001BAF 0F9BAF -> $1BAF                SCI_TABS_END            EQU     *
001BAF 0F9BAF -> $F9BAF               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
001BAF 0F9BAF -> $0004                STRING_SYM_EOT          EQU     $04     ;EOT (ctrl-D)
001BAF 0F9BAF -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
001BAF 0F9BAF -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
001BAF 0F9BAF -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
001BAF 0F9BAF -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
001BAF 0F9BAF -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
001BAF 0F9BAF -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
001BAF 0F9BAF -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
001BAF 0F9BAF -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
001BAF 0F9BAF -> $0080                STRING_TERM             EQU     $80     ;MSB for string termination
                                      ;#Line break
001BAF 0F9BAF -> $000D                STRING_NL_1ST           EQU     STRING_SYM_CR
001BAF 0F9BAF -> $000A                STRING_NL_2ND           EQU     STRING_SYM_LF
001BAF 0F9BAF -> $0D0A                STRING_NL               EQU     ((STRING_NL_1ST<<8)|STRING_NL_2ND)
001BAF 0F9BAF -> $0002                STRING_NL_BYTE_COUNT    EQU     2
                                      ;#Empty string
001BAF 0F9BAF -> $0000                STRING_EMPTY            EQU     $0000
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2A 0F9B2A                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
001B2A 0F9B2A -> $1B2A                STRING_VARS_END         EQU     *
001B2A 0F9B2A -> $F9B2A               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00179F 0F979F                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X:      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
00179F 0F979F -> $179F                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
00179F 0F979F 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
0017A0 0F97A0 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
0017A2 0F97A2 2B 0A                                           BMI     STRING_PRINT_NB_3       ;last character
0017A4 0F97A4 16 13 B8                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0017A7 0F97A7 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
0017A9 0F97A9 09                      STRING_PRINT_NB_2       DEX
                                                              ;Restore registers (string pointer in X)
0017AA 0F97AA MACRO                                           SSTACK_PREPULL  3
0017AA 0F97AA 33                                              PULB
                                                              ;Signal failure (string pointer in X)
0017AB 0F97AB 10 FE                                           CLC
                                                              ;Done
0017AD 0F97AD 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
0017AE 0F97AE C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
0017B0 0F97B0 16 13 B8                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0017B3 0F97B3 24 F4                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
0017B5 0F97B5 MACRO                                           SSTACK_PREPULL  3
0017B5 0F97B5 33                                              PULB
                                                              ;Signal success (next string pointer in X)
0017B6 0F97B6 14 01                                           SEC
                                                              ;Done
0017B8 0F97B8 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
0017B9 0F97B9 -> $17B9                STRING_PRINT_BL         EQU     *
0017B9 0F97B9 MACRO                                           SCI_MAKE_BL     STRING_PRINT_NB, 10
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0017B9 0F97B9 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0017BB 0F97BB 07 E2                                           JOBSR   STRING_PRINT_NB                                  (SCI_MAKE_BL)
0017BD 0F97BD 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0017BF 0F97BF 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0017C1 0F97C1 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0017C1 0F97C1 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0017C2 0F97C2 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0017C2 0F97C2 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0017C2 0F97C2 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0017C7 0F97C7 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0017CC 0F97CC 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0017CE 0F97CE MACRO                                           SSTACK_PREPUSH  10                                       (SCI_MAKE_BL)
0017CE 0F97CE 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Print a number of filler characters - non-blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
0017D0 0F97D0 -> $17D0                STRING_FILL_NB          EQU     *
                                                              ;Print characters (requested spaces in A)
0017D0 0F97D0 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
0017D3 0F97D3 16 13 B8                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0017D6 0F97D6 24 06                                           BCC     STRING_FILL_NB_3        ;unsuccessful
0017D8 0F97D8 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
0017DB 0F97DB MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                                              ;Signal success (remaining spaces in A)
0017DB 0F97DB 14 01                                           SEC
                                                              ;Done
0017DD 0F97DD 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
0017DE 0F97DE MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                                              ;Signal failure (remaining spaces in A)
0017DE 0F97DE 10 FE                                           CLC
                                                              ;Done
0017E0 0F97E0 3D                                              RTS
                                      ;#Print a number of filler characters - blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
0017E1 0F97E1 -> $17E1                STRING_FILL_BL          EQU     *
0017E1 0F97E1 MACRO                                           SCI_MAKE_BL     STRING_FILL_NB, 7
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0017E1 0F97E1 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0017E3 0F97E3 07 EB                                           JOBSR   STRING_FILL_NB                                   (SCI_MAKE_BL)
0017E5 0F97E5 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0017E7 0F97E7 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0017E9 0F97E9 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0017E9 0F97E9 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0017EA 0F97EA MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0017EA 0F97EA MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0017EA 0F97EA 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0017EF 0F97EF 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0017F4 0F97F4 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0017F6 0F97F6 MACRO                                           SSTACK_PREPUSH  7                                        (SCI_MAKE_BL)
0017F6 0F97F6 20 E9                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
0017F8 0F97F8 -> $17F8                STRING_PRINTABLE        EQU     *
0017F8 0F97F8 C1 20                                           CMPB    #$20            ;" "
0017FA 0F97FA 25 04                                           BLO     STRING_PRINTABLE_1
0017FC 0F97FC C1 7E                                           CMPB    #$7E            ;"~"
0017FE 0F97FE 23 02                                           BLS     STRING_PRINTABLE_2
001800 0F9800 C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
001802 0F9802 MACRO                                           SSTACK_PREPULL  2
001802 0F9802 3D                      STRING_PRINTABLE_2      RTS
001803 0F9803 -> $1803                STRING_CODE_END         EQU     *
001803 0F9803 -> $F9803               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BAF 0F9BAF                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
                                      ;STRING_STR_EXCLAM_NL   DB      "!"     ;exclamation mark + new line
001BAF 0F9BAF MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001BAF 0F9BAF 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_TERM)
001BB0 0F9BB0 8A                                              DB      (STRING_NL_2ND|STRING_TERM)                      (STRING_NL_TERM)
001BB1 0F9BB1 -> $1BB1                STRING_TABS_END         EQU     *
001BB1 0F9BB1 -> $F9BB1               STRING_TABS_END_LIN     EQU     @
                                      ;Monitor low voltage reset
001BB1 0F9BB1 -> $0001                RESET_LVR_CHECK_ON      EQU     1               ;enable LVR check if LVRF flag exists
                                      ;Monitor illegal address reset
001BB1 0F9BB1 -> $0001                RESET_IAR_CHECK_ON      EQU     1               ;enable IAR check if ILAF flag exists
                                      ;Maximum error message length
001BB1 0F9BB1 -> $0040                RESET_MSG_LENGTH        EQU     64
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2A 0F9B2A                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
                                                              ;ALIGN  1
001B2A 0F9B2A                         RESET_MSG_REQ           DS      2               ;requested error message
001B2C 0F9B2C                         RESET_MSG_PTR           DS      2               ;validated error message
001B2E 0F9B2E -> $1B2E                RESET_VARS_END          EQU     *
001B2E 0F9B2E -> $F9B2E               RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001803 0F9803                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#Reset entry points
                                      ;--------------------
                                      ;Power-on and external reset
001803 0F9803 -> $1803                RESET_EXT_ENTRY         EQU     *
001803 0F9803 18 03 1B B1 1B 2A                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001809 0F9809 18 03 00 00 1B 2C                               MOVW    #$0000, RESET_MSG_PTR                   ;check reset flags
00180F 0F980F 06 10 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset
001812 0F9812 18 03 1B B1 1B 2A       RESET_CM_ENTRY          MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
001818 0F9818 18 03 1B C6 1B 2C                               MOVW    #RESET_MSG_CLKFAIL, RESET_MSG_PTR       ;set clock failure message
00181E 0F981E 06 10 00                                        JOB     START_OF_CODE
                                      ;COP and user reset
001821 0F9821 18 04 1B 2A 1B 2C       RESET_COP_ENTRY         MOVW    RESET_MSG_REQ, RESET_MSG_PTR            ;preserve error message
001827 0F9827 18 03 1B B1 1B 2A                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
00182D 0F982D 06 10 00                                        JOB     START_OF_CODE
                                      ;#Reset trigger
                                      ;--------------
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
                                      ;          System is reset and initialized
001830 0F9830 -> $1830                RESET_FATAL_X           EQU     *
001830 0F9830 7E 1B 2A                                        STX     RESET_MSG_REQ
                                                              ;Trigger COP
001833 0F9833 MACRO                   RESET_FATAL_X_1         COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
001833 0F9833 20 EC                                           JOB     RESET_COP_ENTRY                                  (COP_RESET)
001835 0F9835 -> $1835                RESET_CODE_END          EQU     *
001835 0F9835 -> $F9835               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BB1 0F9BB1                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Error messages
001BB1 0F9BB1 MACRO                   RESET_MSG_COP           RESET_MSG       "System inresponsive"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BB1 0F9BB1 53 79 73 74 65 6D 20 69 RESET_MSG               FCS     "System inresponsive"                            (RESET_MSG)
              6E 72 65 73 70 6F 6E 73 
              69 76 E5                
001BC4 0F9BC4 F6 4A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BC6 0F9BC6 MACRO                   RESET_MSG_CLKFAIL       RESET_MSG       "Clock failure"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BC6 0F9BC6 43 6C 6F 63 6B 20 66 61 RESET_MSG               FCS     "Clock failure"                                  (RESET_MSG)
              69 6C 75 72 E5          
001BD3 0F9BD3 D2 74                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BD5 0F9BD5 MACRO                   RESET_MSG_POWFAIL       RESET_MSG       "Power loss"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BD5 0F9BD5 50 6F 77 65 72 20 6C 6F RESET_MSG               FCS     "Power loss"                                     (RESET_MSG)
              73 F3                   
001BDF 0F9BDF A4 6E                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BE1 0F9BE1 MACRO                   RESET_MSG_ILLADDR       RESET_MSG       "Code runaway"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BE1 0F9BE1 43 6F 64 65 20 72 75 6E RESET_MSG               FCS     "Code runaway"                                   (RESET_MSG)
              61 77 61 F9             
001BED 0F9BED 04 22                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BEF 0F9BEF MACRO                   RESET_MSG_UNKNOWN       RESET_MSG       "Unknown cause"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
001BEF 0F9BEF 55 6E 6B 6E 6F 77 6E 20 RESET_MSG               FCS     "Unknown cause"                                  (RESET_MSG)
              63 61 75 73 E5          
001BFC 0F9BFC 5C A1                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
001BFE 0F9BFE -> $1BFE                RESET_TABS_END          EQU     *
001BFE 0F9BFE -> $F9BFE               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Maximum number conversion radix
                                      ;-------------------------------
                                      ;Enable blocking subroutines
001BFE 0F9BFE -> $0001                NUM_MAX_BASE_16         EQU     1                               ;default is 16
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
001BFE 0F9BFE -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
001BFE 0F9BFE -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
001BFE 0F9BFE -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2E 0F9B2E                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
001B2E 0F9B2E -> $1B2E                NUM_VARS_END            EQU     *
001B2E 0F9B2E -> $F9B2E               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001835 0F9835                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
001835 0F9835 -> $1835                NUM_REVERSE             EQU     *
                                      ;Stack layout:
001835 0F9835 -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
001835 0F9835 -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
001835 0F9835 -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
001835 0F9835 -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
001835 0F9835 -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
001835 0F9835 -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
001835 0F9835 -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
001835 0F9835 -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
001835 0F9835 -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
001835 0F9835 -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                              ;Setup stack (double value in Y:X, base in B)
001835 0F9835 87                                              CLRA
001836 0F9836 18 02 80 AA                                     MOVW    0,SP, 6,-SP             ;move return address to SP+10
00183A 0F983A 6C 86                                           STD     6,SP                    ;initialize reverse number
00183C 0F983C 18 00 84 00 00                                  MOVW    #$0000, 4,SP            ;reverse number = base
001841 0F9841 18 00 82 00 00                                  MOVW    #$0000, 2,SP
001846 0F9846 34                                              PSHX                            ;store X at SP+8
001847 0F9847 35                                              PSHY                            ;store Y at SP+6
001848 0F9848 3B                                              PSHD                            ;store count:base at SP+4
001849 0F9849 34                                              PSHX                            ;store double value at SP+0
00184A 0F984A 35                                              PSHY
                                                              ;Divide FHW by base
00184B 0F984B EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
00184D 0F984D 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
00184F 0F984F 87                                              CLRA                            ;base => D
001850 0F9850 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001852 0F9852 B7 D4                                           EXG     X, D
001854 0F9854 18 10                                           IDIV                            ;D / X => X,  D % X => D
001856 0F9856 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
001858 0F9858 B7 45                                           TFR     D, X                    ;remainder => X
00185A 0F985A 87                      NUM_REVERSE_2           CLRA                            ;base => D
00185B 0F985B E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00185D 0F985D ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
00185F 0F985F B7 D6                                           EXG     X, Y
001861 0F9861 B7 D4                                           EXG     X, D
001863 0F9863 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
001864 0F9864 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
001866 0F9866 E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
001869 0F9869 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
00186C 0F986C EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
00186E 0F986E C9 00                                           ADCB    #$00
001870 0F9870 89 00                                           ADCA    #$00
001872 0F9872 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001874 0F9874 EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
001876 0F9876 C9 00                                           ADCB    #$00
001878 0F9878 89 00                                           ADCA    #$00
00187A 0F987A 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
00187C 0F987C 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
00187E 0F987E EC 82                                           LDD     NUM_REVERSE_FLW,SP
001880 0F9880 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
001882 0F9882 EC 80                                           LDD     NUM_REVERSE_FHW,SP
001884 0F9884 27 2C                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
001886 0F9886 ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
001889 0F9889 87                                              CLRA
00188A 0F988A E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00188C 0F988C 13                                              EMUL                            ;Y * D => Y:D
00188D 0F988D 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
001890 0F9890 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
001892 0F9892 B7 C6                                           EXG     D, Y
001894 0F9894 6C 8E                                           STD     NUM_REVERSE_RMW,SP
001896 0F9896 87                                              CLRA
001897 0F9897 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
001899 0F9899 13                                              EMUL                            ;Y * D => Y:D
00189A 0F989A E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
00189C 0F989C 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00189E 0F989E B7 64                                           TFR     Y, D
0018A0 0F98A0 C9 00                                           ADCB    #$00
0018A2 0F98A2 89 00                                           ADCA    #$00
                                                              ;Multiply RHW by base (carry-over in D)
0018A4 0F98A4 ED 8C                                           LDY     NUM_REVERSE_RHW,SP
0018A6 0F98A6 6C 8C                                           STD     NUM_REVERSE_RHW,SP
0018A8 0F98A8 87                                              CLRA
0018A9 0F98A9 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
0018AB 0F98AB 13                                              EMUL                            ;Y * D => Y:D
0018AC 0F98AC E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
0018AE 0F98AE 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
0018B0 0F98B0 20 99                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
0018B2 0F98B2 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
0018B2 0F98B2 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
0018B4 0F98B4 3A                                              PULD                            ;
0018B5 0F98B5 31                                              PULY
0018B6 0F98B6 30                                              PULX
                                                              ;Done
0018B7 0F98B7 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes  (+6 arg bytes)
                                      ;         X, Y and D are preserved
0018B8 0F98B8 -> $18B8                NUM_REVPRINT_NB         EQU     *
                                      ;Stack layout:
0018B8 0F98B8 -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
0018B8 0F98B8 -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
0018B8 0F98B8 -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
0018B8 0F98B8 -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
0018B8 0F98B8 -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
0018B8 0F98B8 -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
0018B8 0F98B8 -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
0018B8 0F98B8 -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                              ;Setup stack (base in B)
0018B8 0F98B8 34                                              PSHX                                    ;store X at SP+8
0018B9 0F98B9 35                                              PSHY                                    ;store Y at SP+6
0018BA 0F98BA 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
0018BB 0F98BB MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
0018BB 0F98BB MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
0018BB 0F98BB 16 13 F3                                        JOBSR   SCI_TX_READY_NB                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
0018BE 0F98BE 18 24 00 3B                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
0018C2 0F98C2 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
0018C4 0F98C4 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
0018C6 0F98C6 B7 65                                           TFR     Y, X
0018C8 0F98C8 87                                              CLRA                            ;base => D
0018C9 0F98C9 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
0018CB 0F98CB B7 D4                                           EXG     X, D
0018CD 0F98CD 18 10                                           IDIV                            ;D / X => X,  D % X => D
0018CF 0F98CF 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
0018D1 0F98D1 B7 46                                           TFR     D, Y                    ;remainder => Y
0018D3 0F98D3 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
0018D4 0F98D4 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
0018D6 0F98D6 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
0018D8 0F98D8 B7 C5                                           EXG     D, X
0018DA 0F98DA 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
0018DB 0F98DB 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
0018DD 0F98DD B7 46                                           TFR     D, Y                    ;remainder => Y
0018DF 0F98DF EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
0018E1 0F98E1 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
0018E2 0F98E2 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
0018E4 0F98E4 CE 1B FE                                        LdX     #NUM_SYMTAB
0018E7 0F98E7 E6 E5                                           LDAB    B,X
0018E9 0F98E9 16 13 B8                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
0018EC 0F98EC 04 36 CC                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
0018EF 0F98EF EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
0018F1 0F98F1 26 C8                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
0018F3 0F98F3 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
0018F5 0F98F5 26 C4                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
0018F7 0F98F7 MACRO                                           SSTACK_PREPULL  14
0018F7 0F98F7 14 01                                           SEC
0018F9 0F98F9 3A                      NUM_REVPRINT_NB_3       PULD
0018FA 0F98FA 31                                              PULY
0018FB 0F98FB 30                                              PULX
                                                              ;Done
0018FC 0F98FC 3D                                              RTS
                                                              ;Printing incomplete
0018FD 0F98FD MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
0018FD 0F98FD 10 FE                                           CLC
0018FF 0F98FF 20 F8                                           JOB     NUM_REVPRINT_NB_3
                                      ;#Print a reverse number digit - blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: none
                                      ; SSTACK: 10 bytes  (+6 arg bytes)
                                      ;         X, Y and D are preserved
001901 0F9901 -> $1901                NUM_REVPRINT_BL         EQU     *
                                                              ;Shift blocking return address ungerneath reverse number
001901 0F9901 18 02 80 AE                                     MOVW    0,SP, 2,-SP             ;duplicate return address
001905 0F9905 18 02 84 82                                     MOVW    4,SP, 2,SP              ;shift RHW
001909 0F9909 18 02 86 84                                     MOVW    6,SP, 4,SP              ;shift RMW
00190D 0F990D 18 02 88 86                                     MOVW    8,SP, 6,SP              ;shift RLW
001911 0F9911 18 02 B1 86                                     MOVW    2,SP+, 6,SP             ;tug return address underneath
                                                              ;Disable interrupts
001915 0F9915 14 10                   NUM_REVPRINT_BL_1       SEI                             ;start of atomic sequence
                                                              ;Call non-blocking function
001917 0F9917 07 9F                                           JOBSR   NUM_REVPRINT_NB         ;(SSTACK: 8 bytes +6 arg bytes)
001919 0F9919 25 0E                                           BCS     NUM_REVPRINT_BL_2       ;printing successful
                                                              ;Wait for next interrupt
00191B 0F991B MACRO                                           ISTACK_WAIT                     ;wait for any interrupt
                                      ;#Wait until any interrupt has been serviced                                     (ISTACK_WAIT)
                                      ; args:   none                                                                   (ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (ISTACK_WAIT)
00191B 0F991B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (ISTACK_WAIT)
                                      ;#Service COP                                                                    (ISTACK_WAIT/COP_SERVICE)
00191B 0F991B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (ISTACK_WAIT/COP_SERVICE)
001920 0F9920 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (ISTACK_WAIT/COP_SERVICE)
001925 0F9925 10 EF                                           CLI                                                      (ISTACK_WAIT)
                                                              ;Try again
001927 0F9927 MACRO                                           SSTACK_PREPUSH  8               ;check stack
001927 0F9927 20 EC                                           JOB     NUM_REVPRINT_BL_1       ;try again
                                                              ;Function successful
001929 0F9929 10 EF                   NUM_REVPRINT_BL_2       CLI                             ;end of atomic sequence
                                                              ;Done
00192B 0F992B MACRO                                           SSTACK_PREPULL  8               ;check stack
00192B 0F992B 1B 86                                           LEAS    6,SP                    ;clean up stack
00192D 0F992D 3D                                              RTS
00192E 0F992E -> $192E                NUM_CODE_END            EQU     *
00192E 0F992E -> $F992E               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001BFE 0F9BFE                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
001BFE 0F9BFE 30                      NUM_SYMTAB              DB      "0"     ; 0
001BFF 0F9BFF 31                                              DB      "1"     ; 1
001C00 0F9C00 32                                              DB      "2"     ; 2
001C01 0F9C01 33                                              DB      "3"     ; 3
001C02 0F9C02 34                                              DB      "4"     ; 4
001C03 0F9C03 35                                              DB      "5"     ; 5
001C04 0F9C04 36                                              DB      "6"     ; 6
001C05 0F9C05 37                                              DB      "7"     ; 7
001C06 0F9C06 38                                              DB      "8"     ; 8
001C07 0F9C07 39                                              DB      "9"     ; 9
001C08 0F9C08 41                                              DB      "A"     ;10
001C09 0F9C09 42                                              DB      "B"     ;11
001C0A 0F9C0A 43                                              DB      "C"     ;12
001C0B 0F9C0B 44                                              DB      "D"     ;13
001C0C 0F9C0C 45                                              DB      "E"     ;14
001C0D 0F9C0D 46                                              DB      "F"     ;15
001C0E 0F9C0E -> $1C0E                NUM_SYMTAB_END          EQU     *
001C0E 0F9C0E -> $1C0E                NUM_TABS_END            EQU     *
001C0E 0F9C0E -> $F9C0E               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Prescaler value
                                      ;---------------
001C0E 0F9C0E -> $002F                NVM_FDIV_VAL            EQU     ((95*CLOCK_BUS_FREQ)/100000000) ;FTMRG clock divider
                                      ;NVM pages
                                      ;---------
001C0E 0F9C0E -> $00FE                NVM_FIRST_PAGE          EQU     ($100-(MMAP_FLASH_SIZE/$4000))  ;first NVM page
001C0E 0F9C0E -> $00FE                NVM_LAST_PAGE           EQU     $FE                             ;last NVM page
001C0E 0F9C0E -> $0001                NVM_PROT_FD_ON          EQU     1                               ;protect page $F
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Program/erase sizes
                                      ;--------------------
001C0E 0F9C0E -> $0008                NVM_PHRASE_SIZE         EQU     8       ;bytes
001C0E 0F9C0E -> $0400                NVM_SECTOR_SIZE         EQU     1024    ;bytes
                                      ;Validation byte (must be !=$FF on a valid page)
                                      ;-----------------------------------------------
001C0E 0F9C0E -> $BFFF                NVM_VAL_BYTE            EQU     $BFFF           ;address of the validation byte
001C0E 0F9C0E -> $BFF8                NVM_VAL_PHRASE          EQU     $BFF8           ;phrase containing the validation byte
                                      ;Valid page window
                                      ;-----------------
001C0E 0F9C0E -> $8000                NVM_PAGE_WIN_START      EQU     $8000           ;address of the validation byte
001C0E 0F9C0E -> $BFF8                NVM_PAGE_WIN_END        EQU     $BFF8           ;phrase containing the validation byte
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2E 0F9B2E                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
001B2E 0F9B2E -> $1B2E                NVM_VARS_END            EQU     *
001B2E 0F9B2E -> $F9B2E               NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00192E 0F992E                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
                                      ;#User interface
                                      ;---------------
                                      ;#Erase NVM data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 27 bytes
                                      ;         All registers are preserved
00192E 0F992E -> $192E                NVM_ERASE               EQU     *
                                                              ;Save registers
00192E 0F992E 34                                              PSHX                                    ;save X
00192F 0F992F 35                                              PSHY                                    ;save Y
                                                              ;Halt any external communication
001930 0F9930 MACRO                                           NVM_HALT_COM
                                      ;Halt external communication while NVM is not accesible                          (NVM_HALT_COM)
                                      ;------------------------------------------------------                          (NVM_HALT_COM)
001930 0F9930 MACRO                                           SCI_PAUSE_BL            ;halt SCI communication (SSTACK: 2 bytes) (NVM_HALT_COM)
                                      ;#Pause SCI communication (blocking)                                             (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ; args:   none                                                                   (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ; result: none                                                                   (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ; SSTACK: 5 bytes                                                                (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ;         X, Y, and D are preserved                                              (NVM_HALT_COM/SCI_PAUSE_BL)
001930 0F9930 MACRO                                           SSTACK_JOBSR    SCI_PAUSE_BL, 5                          (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ;#Check stack and call subroutine                                                (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
001930 0F9930 16 14 ED                                        JOBSR   SCI_PAUSE_BL                                     (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                                              ;Check if any empty pages are left
001933 0F9933 MACRO                                           NVM_CHECK_LAST_PPAGE NVM_ERASE_4        ;erase all pages
                                      ;#Memory map operations                                                          (NVM_CHECK_LAST_PPAGE)
                                      ;----------------------                                                          (NVM_CHECK_LAST_PPAGE)
                                      ;#Check if last PPAGE is selected                                                (NVM_CHECK_LAST_PPAGE)
                                      ; args:   1:     branch if no more pages are available                           (NVM_CHECK_LAST_PPAGE)
                                      ;         PPAGE: current page                                                    (NVM_CHECK_LAST_PPAGE)
                                      ; result: none                                                                   (NVM_CHECK_LAST_PPAGE)
                                      ; SSTACK: none                                                                   (NVM_CHECK_LAST_PPAGE)
                                      ;         All registers are preserved                                            (NVM_CHECK_LAST_PPAGE)
001933 0F9933 4E 15 0E 21                                     BRSET   PPAGE, $0E, NVM_ERASE_4 ;last PPAGE already reached (NVM_CHECK_LAST_PPAGE)
                                                              ;Invalidate current page
001937 0F9937 CE BF F8                                        LDX     #NVM_VAL_PHRASE                 ;target pointer
00193A 0F993A CD 1C 17                                        LDY     #NVM_VAL_PHRASE_PATTERN         ;source pointer
00193D 0F993D MACRO                                           NVM_PROGRAM_PHRASE                      ;(SSTACK: 21 bytes)
                                      ;#Program a 4-byte phrase                                                        (NVM_PROGRAM_PHRASE)
                                      ; args:   X:     target pointer (phrase aligned)                                 (NVM_PROGRAM_PHRASE)
                                      ;         Y:     source pointer                                                  (NVM_PROGRAM_PHRASE)
                                      ;         PPAGE: current page                                                    (NVM_PROGRAM_PHRASE)
                                      ; result: X:     target pointer incremented by 8                                 (NVM_PROGRAM_PHRASE)
                                      ;         Y:     source pointer incremented by 8                                 (NVM_PROGRAM_PHRASE)
                                      ;         C-flag: set if successful                                              (NVM_PROGRAM_PHRASE)
                                      ; SSTACK: 21 bytes                                                               (NVM_PROGRAM_PHRASE)
                                      ;         D is preserved                                                         (NVM_PROGRAM_PHRASE)
00193D 0F993D MACRO                                           SSTACK_JOBSR    NVM_PROGRAM_PHRASE, 21                   (NVM_PROGRAM_PHRASE)
                                      ;#Check stack and call subroutine                                                (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
00193D 0F993D 07 58                                           JOBSR   NVM_PROGRAM_PHRASE                               (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
00193F 0F993F 24 2F                                           BCC     NVM_ERASE_6                     ;failure
001941 0F9941 MACRO                                           NVM_NEXT_PPAGE                          ;select next PPAGE
                                      ;#Switch to next PPAGE                                                           (NVM_NEXT_PPAGE)
                                      ; args:   PPAGE: current page                                                    (NVM_NEXT_PPAGE)
                                      ; result: PPAGE: next page                                                       (NVM_NEXT_PPAGE)
                                      ; SSTACK: none                                                                   (NVM_NEXT_PPAGE)
                                      ;         All registers are preserved                                            (NVM_NEXT_PPAGE)
001941 0F9941 72 00 15                INC_PPAGE               INC     PPAGE                                            (NVM_NEXT_PPAGE)
001944 0F9944 4E 15 0D F9                                     BRSET   PPAGE, $0D, INC_PPAGE                            (NVM_NEXT_PPAGE)
                                                              ;Success
001948 0F9948 MACRO                   NVM_ERASE_1             NVM_RESUME_COM                          ;resume communication
001948 0F9948 MACRO                                           SCI_RESUME              ;resume SCI communication (SSTACK: 4) (NVM_RESUME_COM)
                                      ;#Resume SCI communication                                                       (NVM_RESUME_COM/SCI_RESUME)
                                      ; args:   none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; result: none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; SSTACK: 2(4) bytes                                                             (NVM_RESUME_COM/SCI_RESUME)
                                      ;         X, Y, and D are preserved                                              (NVM_RESUME_COM/SCI_RESUME)
001948 0F9948 MACRO                                           SSTACK_JOBSR    SCI_RESUME, 2                            (NVM_RESUME_COM/SCI_RESUME)
                                      ;#Check stack and call subroutine                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
001948 0F9948 16 15 04                                        JOBSR   SCI_RESUME                                       (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
00194B 0F994B MACRO                                           SSTACK_PREPULL  6                       ;check stack
00194B 0F994B 14 01                                           SEC                                     ;flag success
00194D 0F994D 31                      NVM_ERASE_2             PULY                                    ;restore Y
00194E 0F994E 30                                              PULX                                    ;restore X
00194F 0F994F 3D                                              RTS
                                                              ;Select 1st PPAGE
001950 0F9950 18 0C 00 FE 00 15       NVM_ERASE_3             MOVB    NVM_FIRST_PAGE, PPAGE           ;set first PPAGE
001956 0F9956 20 F0                                           JOB     NVM_ERASE_1                     ;success
                                                              ;Erase all NVM pages
001958 0F9958 18 0C 00 FE 00 15       NVM_ERASE_4             MOVB    NVM_FIRST_PAGE, PPAGE           ;start with first PPAGE
00195E 0F995E MACRO                   NVM_ERASE_5             NVM_ERASE_PAGE                          ;(SSTACK: 19 bytes)
                                      ;#Erase page                                                                     (NVM_ERASE_PAGE)
                                      ; args:   PPAGE:  current page                                                   (NVM_ERASE_PAGE)
                                      ; result: C-flag: set if successful                                              (NVM_ERASE_PAGE)
                                      ; SSTACK: 19 bytes                                                               (NVM_ERASE_PAGE)
                                      ;         X, Y, and D are preserved                                              (NVM_ERASE_PAGE)
00195E 0F995E MACRO                                           SSTACK_JOBSR    NVM_ERASE_PAGE, 19                       (NVM_ERASE_PAGE)
                                      ;#Check stack and call subroutine                                                (NVM_ERASE_PAGE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_ERASE_PAGE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_ERASE_PAGE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_ERASE_PAGE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_ERASE_PAGE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_ERASE_PAGE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_ERASE_PAGE/SSTACK_JOBSR)
00195E 0F995E 16 1A 26                                        JOBSR   NVM_ERASE_PAGE                                   (NVM_ERASE_PAGE/SSTACK_JOBSR)
001961 0F9961 24 0D                                           BCC            NVM_ERASE_6              ;failure
001963 0F9963 MACRO                                           NVM_CHECK_LAST_PPAGE NVM_ERASE_3        ;select 1st PPAGE
                                      ;#Memory map operations                                                          (NVM_CHECK_LAST_PPAGE)
                                      ;----------------------                                                          (NVM_CHECK_LAST_PPAGE)
                                      ;#Check if last PPAGE is selected                                                (NVM_CHECK_LAST_PPAGE)
                                      ; args:   1:     branch if no more pages are available                           (NVM_CHECK_LAST_PPAGE)
                                      ;         PPAGE: current page                                                    (NVM_CHECK_LAST_PPAGE)
                                      ; result: none                                                                   (NVM_CHECK_LAST_PPAGE)
                                      ; SSTACK: none                                                                   (NVM_CHECK_LAST_PPAGE)
                                      ;         All registers are preserved                                            (NVM_CHECK_LAST_PPAGE)
001963 0F9963 4E 15 0E E9                                     BRSET   PPAGE, $0E, NVM_ERASE_3 ;last PPAGE already reached (NVM_CHECK_LAST_PPAGE)
001967 0F9967 MACRO                                           NVM_NEXT_PPAGE                          ;select next PPAGE
                                      ;#Switch to next PPAGE                                                           (NVM_NEXT_PPAGE)
                                      ; args:   PPAGE: current page                                                    (NVM_NEXT_PPAGE)
                                      ; result: PPAGE: next page                                                       (NVM_NEXT_PPAGE)
                                      ; SSTACK: none                                                                   (NVM_NEXT_PPAGE)
                                      ;         All registers are preserved                                            (NVM_NEXT_PPAGE)
001967 0F9967 72 00 15                INC_PPAGE               INC     PPAGE                                            (NVM_NEXT_PPAGE)
00196A 0F996A 4E 15 0D F9                                     BRSET   PPAGE, $0D, INC_PPAGE                            (NVM_NEXT_PPAGE)
00196E 0F996E 20 EE                                           JOB     NVM_ERASE_5                     ;erase next pages
                                                              ;Failure
001970 0F9970 MACRO                   NVM_ERASE_6             NVM_RESUME_COM                          ;resume communication
001970 0F9970 MACRO                                           SCI_RESUME              ;resume SCI communication (SSTACK: 4) (NVM_RESUME_COM)
                                      ;#Resume SCI communication                                                       (NVM_RESUME_COM/SCI_RESUME)
                                      ; args:   none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; result: none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; SSTACK: 2(4) bytes                                                             (NVM_RESUME_COM/SCI_RESUME)
                                      ;         X, Y, and D are preserved                                              (NVM_RESUME_COM/SCI_RESUME)
001970 0F9970 MACRO                                           SSTACK_JOBSR    SCI_RESUME, 2                            (NVM_RESUME_COM/SCI_RESUME)
                                      ;#Check stack and call subroutine                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
001970 0F9970 16 15 04                                        JOBSR   SCI_RESUME                                       (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
001973 0F9973 MACRO                                           SSTACK_PREPULL  6                       ;check stack
001973 0F9973 10 FE                                           CLC                                     ;flag failure
001975 0F9975 20 D6                                           JOB     NVM_ERASE_2                     ;done
                                      ;#Copy data to NVM
                                      ; args:   X: destination address in page window (phrase aligned)
                                      ;         Y: source address in RAM
                                      ;         D: number of bytes to copy (multiple of phrase size)
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 29 bytes
                                      ;         All registers are preserved
001977 0F9977 -> $1977                NVM_PROGRAM             EQU     *
                                                              ;Save registers (dst addr in X, src addr in Y, byte count in D)
001977 0F9977 34                                              PSHX                                    ;save X
001978 0F9978 35                                              PSHY                                    ;save Y
001979 0F9979 3B                                              PSHD                                    ;save D
                                                              ;Halt any external communication (dst addr in X, src addr in Y, byte count in D)
00197A 0F997A MACRO                                           NVM_HALT_COM
                                      ;Halt external communication while NVM is not accesible                          (NVM_HALT_COM)
                                      ;------------------------------------------------------                          (NVM_HALT_COM)
00197A 0F997A MACRO                                           SCI_PAUSE_BL            ;halt SCI communication (SSTACK: 2 bytes) (NVM_HALT_COM)
                                      ;#Pause SCI communication (blocking)                                             (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ; args:   none                                                                   (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ; result: none                                                                   (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ; SSTACK: 5 bytes                                                                (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ;         X, Y, and D are preserved                                              (NVM_HALT_COM/SCI_PAUSE_BL)
00197A 0F997A MACRO                                           SSTACK_JOBSR    SCI_PAUSE_BL, 5                          (NVM_HALT_COM/SCI_PAUSE_BL)
                                      ;#Check stack and call subroutine                                                (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
00197A 0F997A 16 14 ED                                        JOBSR   SCI_PAUSE_BL                                     (NVM_HALT_COM/SCI_PAUSE_BL/SSTACK_JOBSR)
                                                              ;Program phrases (dst addr in X, src addr in Y, byte count in D)
00197D 0F997D 49                                              LSRD                                    ;byte count/8 -> phrase count
00197E 0F997E 49                                              LSRD                                    ;
00197F 0F997F 49                                              LSRD                                    ;
001980 0F9980 MACRO                   NVM_PROGRAM_1           NVM_PROGRAM_PHRASE                      ;program phrase (SSTACK: 21 bytes)
                                      ;#Program a 4-byte phrase                                                        (NVM_PROGRAM_PHRASE)
                                      ; args:   X:     target pointer (phrase aligned)                                 (NVM_PROGRAM_PHRASE)
                                      ;         Y:     source pointer                                                  (NVM_PROGRAM_PHRASE)
                                      ;         PPAGE: current page                                                    (NVM_PROGRAM_PHRASE)
                                      ; result: X:     target pointer incremented by 8                                 (NVM_PROGRAM_PHRASE)
                                      ;         Y:     source pointer incremented by 8                                 (NVM_PROGRAM_PHRASE)
                                      ;         C-flag: set if successful                                              (NVM_PROGRAM_PHRASE)
                                      ; SSTACK: 21 bytes                                                               (NVM_PROGRAM_PHRASE)
                                      ;         D is preserved                                                         (NVM_PROGRAM_PHRASE)
001980 0F9980 MACRO                                           SSTACK_JOBSR    NVM_PROGRAM_PHRASE, 21                   (NVM_PROGRAM_PHRASE)
                                      ;#Check stack and call subroutine                                                (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
001980 0F9980 07 15                                           JOBSR   NVM_PROGRAM_PHRASE                               (NVM_PROGRAM_PHRASE/SSTACK_JOBSR)
001982 0F9982 24 0C                                           BCC     NVM_PROGRAM_3                   ;failure
001984 0F9984 04 34 F9                                        DBNE    D, NVM_PROGRAM_1                ;program next phrase
                                                              ;Success
001987 0F9987 MACRO                                           NVM_RESUME_COM                          ;resume communication
001987 0F9987 MACRO                                           SCI_RESUME              ;resume SCI communication (SSTACK: 4) (NVM_RESUME_COM)
                                      ;#Resume SCI communication                                                       (NVM_RESUME_COM/SCI_RESUME)
                                      ; args:   none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; result: none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; SSTACK: 2(4) bytes                                                             (NVM_RESUME_COM/SCI_RESUME)
                                      ;         X, Y, and D are preserved                                              (NVM_RESUME_COM/SCI_RESUME)
001987 0F9987 MACRO                                           SSTACK_JOBSR    SCI_RESUME, 2                            (NVM_RESUME_COM/SCI_RESUME)
                                      ;#Check stack and call subroutine                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
001987 0F9987 16 15 04                                        JOBSR   SCI_RESUME                                       (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
00198A 0F998A MACRO                                           SSTACK_PREPULL  6                       ;check stack
00198A 0F998A 14 01                                           SEC                                     ;flag success
00198C 0F998C 3A                      NVM_PROGRAM_2           PULD                                    ;restore D
00198D 0F998D 31                                              PULY                                    ;restore Y
00198E 0F998E 30                                              PULX                                    ;restore X
00198F 0F998F 3D                                              RTS
                                                              ;Failure
001990 0F9990 MACRO                   NVM_PROGRAM_3           NVM_RESUME_COM                          ;resume communication
001990 0F9990 MACRO                                           SCI_RESUME              ;resume SCI communication (SSTACK: 4) (NVM_RESUME_COM)
                                      ;#Resume SCI communication                                                       (NVM_RESUME_COM/SCI_RESUME)
                                      ; args:   none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; result: none                                                                   (NVM_RESUME_COM/SCI_RESUME)
                                      ; SSTACK: 2(4) bytes                                                             (NVM_RESUME_COM/SCI_RESUME)
                                      ;         X, Y, and D are preserved                                              (NVM_RESUME_COM/SCI_RESUME)
001990 0F9990 MACRO                                           SSTACK_JOBSR    SCI_RESUME, 2                            (NVM_RESUME_COM/SCI_RESUME)
                                      ;#Check stack and call subroutine                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
001990 0F9990 16 15 04                                        JOBSR   SCI_RESUME                                       (NVM_RESUME_COM/SCI_RESUME/SSTACK_JOBSR)
001993 0F9993 MACRO                                           SSTACK_PREPULL  8                       ;check stack
001993 0F9993 10 FE                                           CLC                                     ;flag failure
001995 0F9995 20 F5                                           JOB     NVM_PROGRAM_2                   ;done
                                      ;#NVM opperations
                                      ;----------------
                                      ;#Program a 4-byte phrase
                                      ; args:   X:      target pointer (phrase aligned)
                                      ;         Y:      source pointer
                                      ;         PPAGE:  current page
                                      ; result: X:      target pointer incremented by 8
                                      ;         Y:      source pointer incremented by 8
                                      ;         C-flag: set if successful
                                      ; SSTACK: 21 bytes
                                      ;         D is preserved
001997 0F9997 -> $1997                NVM_PROGRAM_PHRASE      EQU     *
                                                              ;Save registers (target address in X, source address in Y)
001997 0F9997 34                                              PSHX                                    ;save X
001998 0F9998 3B                                              PSHD                                    ;save D
                                                              ;Perform safety checks (target address in X, source address in Y)
001999 0F9999 MACRO                                           NVM_CHECK_PAGE_PROT         NVM_PROGRAM_PHRASE_3
                                      ;#NVM opperations                                                                (NVM_CHECK_PAGE_PROT)
                                      ;----------------                                                                (NVM_CHECK_PAGE_PROT)
                                      ;#Check for page protection                                                      (NVM_CHECK_PAGE_PROT)
                                      ; args:   1:      branch address if PPAGE is set to protected page               (NVM_CHECK_PAGE_PROT)
                                      ;         PPAGE:  current page                                                   (NVM_CHECK_PAGE_PROT)
                                      ; result: none                                                                   (NVM_CHECK_PAGE_PROT)
                                      ; SSTACK: none                                                                   (NVM_CHECK_PAGE_PROT)
                                      ;         All registers are preserved                                            (NVM_CHECK_PAGE_PROT)
001999 0F9999 4E 15 FD 53                                     BRSET   PPAGE, #$FD, NVM_PROGRAM_PHRASE_3                 ;page FD or page FF (NVM_CHECK_PAGE_PROT)
00199D 0F999D MACRO                                           NVM_CHECK_PHRASE_RANGE   X, NVM_PROGRAM_PHRASE_3
                                      ;#Check if a phrase is within the page window                                    (NVM_CHECK_PHRASE_RANGE)
                                      ; args:   1:     X or Y (pointing to the beginning of the phrase)                (NVM_CHECK_PHRASE_RANGE)
                                      ;         2:     branch address if phrase is not erased                          (NVM_CHECK_PHRASE_RANGE)
                                      ; result: none                                                                   (NVM_CHECK_PHRASE_RANGE)
                                      ; SSTACK: none                                                                   (NVM_CHECK_PHRASE_RANGE)
                                      ;         X and Y registers are preserved                                        (NVM_CHECK_PHRASE_RANGE)
00199D 0F999D 8E 80 00                                        CPX    #NVM_PAGE_WIN_START             ;check upper boundary (NVM_CHECK_PHRASE_RANGE)
0019A0 0F99A0 25 4E                                           BLO     NVM_PROGRAM_PHRASE_3                              ;range exceeded (NVM_CHECK_PHRASE_RANGE)
0019A2 0F99A2 8E BF F8                                        CPX    #NVM_PAGE_WIN_END               ;check lower boundary (NVM_CHECK_PHRASE_RANGE)
0019A5 0F99A5 22 49                                           BHI     NVM_PROGRAM_PHRASE_3                              ;range exceeded (NVM_CHECK_PHRASE_RANGE)
0019A7 0F99A7 MACRO                                           NVM_CHECK_PHRASE_ALIGNED X, NVM_PROGRAM_PHRASE_3
                                      ;#Check if a phrase is aligned                                                   (NVM_CHECK_PHRASE_ALIGNED)
                                      ; args:   1:     X or Y (pointing to the beginning of the phrase)                (NVM_CHECK_PHRASE_ALIGNED)
                                      ;         2:     branch address if phrase is not aligned                         (NVM_CHECK_PHRASE_ALIGNED)
                                      ; result: none                                                                   (NVM_CHECK_PHRASE_ALIGNED)
                                      ; SSTACK: none                                                                   (NVM_CHECK_PHRASE_ALIGNED)
                                      ;         X and Y registers are preserved                                        (NVM_CHECK_PHRASE_ALIGNED)
0019A7 0F99A7 B7 50                                           TFR     X, A                                             (NVM_CHECK_PHRASE_ALIGNED)
0019A9 0F99A9 85 07                                           BITA    #(NVM_PHRASE_SIZE-1)                             (NVM_CHECK_PHRASE_ALIGNED)
0019AB 0F99AB 26 43                                           BNE     NVM_PROGRAM_PHRASE_3                             (NVM_CHECK_PHRASE_ALIGNED)
0019AD 0F99AD MACRO                                           NVM_CHECK_PHRASE_ERASED  X, NVM_PROGRAM_PHRASE_3
                                      ;#Check if a phrase is erased                                                    (NVM_CHECK_PHRASE_ERASED)
                                      ; args:   1:     X or Y (pointing to the beginning of the phrase)                (NVM_CHECK_PHRASE_ERASED)
                                      ;         2:     branch address if phrase is not erased                          (NVM_CHECK_PHRASE_ERASED)
                                      ;         PPAGE: current page                                                    (NVM_CHECK_PHRASE_ERASED)
                                      ; result: none                                                                   (NVM_CHECK_PHRASE_ERASED)
                                      ; SSTACK: none                                                                   (NVM_CHECK_PHRASE_ERASED)
                                      ;         X and Y registers are preserved                                        (NVM_CHECK_PHRASE_ERASED)
0019AD 0F99AD CC FF 08                                        LDD #(NVM_PHRASE_SIZE|$FF00)                             (NVM_CHECK_PHRASE_ERASED)
0019B0 0F99B0 A4 E5                   LOOP                    ANDA    B,X                                              (NVM_CHECK_PHRASE_ERASED)
0019B2 0F99B2 04 11 FB                                        DBEQ    B, LOOP                                          (NVM_CHECK_PHRASE_ERASED)
0019B5 0F99B5 04 21 38                                        DBNE    B, NVM_PROGRAM_PHRASE_3                          (NVM_CHECK_PHRASE_ERASED)
                                                              ;Set CCOB  (target address in X, source address in Y)
                                                              ;1st CCOB word
0019B8 0F99B8 79 01 02                                        CLR     FCCOBIX                         ;CCOBIX=$00
0019BB 0F99BB 18 03 00 06 01 0A                               MOVW    #$06, FCCOBHI                   ;program P-flash
0019C1 0F99C1 96 15                                           LDAA    PPAGE                           ;PPAGE    -> A
0019C3 0F99C3 C7                                              CLRB                                    ;PPAGE:00 -> D
0019C4 0F99C4 49                                              LSRD                                    ;align address
0019C5 0F99C5 49                                              LSRD                                    ;align address
0019C6 0F99C6 7A 01 0B                                        STAA    FCCOBLO                         ;store global address[17:16]
                                                              ;2nd CCOB word
0019C9 0F99C9 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$001
0019CC 0F99CC 18 0F                                           TBA                                     ;B -> A
0019CE 0F99CE C7                                              CLRB                                    ;store global address[15:16]
0019CF 0F99CF B7 C5                                           EXG     D, X                            ;target addr -> D
0019D1 0F99D1 84 3F                                           ANDA    #$3F                            ;clear bits 15 and 14
0019D3 0F99D3 1A E6                                           LEAX    D,X                             ;assemble global address
0019D5 0F99D5 7E 01 0A                                        STX     FCCOBHI                         ;store global address[15:0]
                                                              ;3rd to 6th CCOB word
0019D8 0F99D8 86 04                                           LDAA    #4                              ;copy 4 words
0019DA 0F99DA 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$002
0019DD 0F99DD 18 05 71 01 0A          NVM_PROGRAM_PHRASE_1    MOVW    2,Y+, FCCOBHI                   ;store data
0019E2 0F99E2 04 30 F8                                        DBNE    A, NVM_PROGRAM_PHRASE_1         ;more data to store
                                                              ;Execute command (incremented source address in Y)
0019E5 0F99E5 MACRO                                           NVM_EXEC_CMD                            ;(SSTACK: 15 bytes)
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
0019E5 0F99E5 MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
0019E5 0F99E5 07 14                                           JOBSR   NVM_EXEC_CMD                                     (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Check result (incremented source address in Y)
0019E7 0F99E7 1F 01 06 33 08                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_PROGRAM_PHRASE_4
                                                              ;Failure (incremented source address in Y)
0019EC 0F99EC MACRO                   NVM_PROGRAM_PHRASE_2    SSTACK_PREPULL  6                       ;check stack
0019EC 0F99EC 10 FE                                           CLC                                     ;flag failure
0019EE 0F99EE 20 06                                           JOB     NVM_PROGRAM_PHRASE_5            ;restore registers
                                                              ;Failure (source address in Y)
0019F0 0F99F0 19 48                   NVM_PROGRAM_PHRASE_3    LEAY    NVM_PHRASE_SIZE,Y               ;increment Y by phrase size
0019F2 0F99F2 20 F8                                           JOB     NVM_PROGRAM_PHRASE_2            ;failure
                                                              ;Success (incremented source address in Y)
0019F4 0F99F4 MACRO                   NVM_PROGRAM_PHRASE_4    SSTACK_PREPULL  6                       ;check stack
0019F4 0F99F4 14 01                                           SEC                                     ;flag success
0019F6 0F99F6 3A                      NVM_PROGRAM_PHRASE_5    PULD                                    ;restore D
0019F7 0F99F7 30                                              PULX                                    ;restore X
0019F8 0F99F8 1A 08                                           LEAX    NVM_PHRASE_SIZE,X               ;increment X by phrase size
0019FA 0F99FA 3D                                              RTS
                                      ;#Execute NVM command from RAM
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 15 bytes
                                      ;         All registers are preserved
0019FB 0F99FB -> $19FB                NVM_EXEC_CMD            EQU     *
                                                              ;Push RAM code onto the stack
                                                              ;18 0B FF 01 07   MOVB  #$FF, FSTAT     ;clear CCIF
                                                              ;1F 01 07 80 FB   BRCLR FSTAT, #CCIF, * ;wait until CCIF is set
                                                              ;06 xx xx         JMP     $xxxx
0019FB 0F99FB 18 00 AE 1A 21                                  MOVW    #NVM_EXEC_CMD_1, 2,-SP
001A00 0F9A00 18 00 AE FB 06                                  MOVW    #$FB06,          2,-SP
001A05 0F9A05 18 00 AE 07 08                                  MOVW    #$0708,          2,-SP
001A0A 0F9A0A 18 00 AE 1F 01                                  MOVW    #$1F01,          2,-SP
001A0F 0F9A0F 18 00 AE 01 07                                  MOVW    #$0107,          2,-SP
001A14 0F9A14 18 00 AE 0B FF                                  MOVW    #$0BFF,          2,-SP
001A19 0F9A19 18 08 AF 18                                     MOVB    #$18,            1,-SP
                                                              ;Invoke command
001A1D 0F9A1D 14 10                                           SEI
001A1F 0F9A1F 05 80                                           JMP     0,SP
001A21 0F9A21 10 EF                   NVM_EXEC_CMD_1          CLI
                                                              ;Done
001A23 0F9A23 MACRO                                           SSTACK_PREPULL  15
001A23 0F9A23 1B 93                                           LEAS    -13,SP
001A25 0F9A25 3D                                              RTS
                                      ;#Erase page
                                      ; args:   PPAGE:  current page
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 19 bytes
                                      ;         All registers are preserved
001A26 0F9A26 -> $1A26                NVM_ERASE_PAGE          EQU     *
                                                              ;Save registers
001A26 0F9A26 3B                                              PSHD                                    ;save D
                                                              ;Perform safety checks
001A27 0F9A27 MACRO                                           NVM_CHECK_PAGE_PROT         NVM_ERASE_PAGE_3
                                      ;#NVM opperations                                                                (NVM_CHECK_PAGE_PROT)
                                      ;----------------                                                                (NVM_CHECK_PAGE_PROT)
                                      ;#Check for page protection                                                      (NVM_CHECK_PAGE_PROT)
                                      ; args:   1:      branch address if PPAGE is set to protected page               (NVM_CHECK_PAGE_PROT)
                                      ;         PPAGE:  current page                                                   (NVM_CHECK_PAGE_PROT)
                                      ; result: none                                                                   (NVM_CHECK_PAGE_PROT)
                                      ; SSTACK: none                                                                   (NVM_CHECK_PAGE_PROT)
                                      ;         All registers are preserved                                            (NVM_CHECK_PAGE_PROT)
001A27 0F9A27 4E 15 FD 21                                     BRSET   PPAGE, #$FD, NVM_ERASE_PAGE_3                 ;page FD or page FF (NVM_CHECK_PAGE_PROT)
                                                              ;Set CCOB  (target address in X, source address in Y)
                                                              ;1st CCOB word
001A2B 0F9A2B 79 01 02                                        CLR     FCCOBIX                         ;CCOBIX=$00
001A2E 0F9A2E 18 03 00 0A 01 0A                               MOVW    #$0A, FCCOBHI                   ;erase P-flash sector
001A34 0F9A34 96 15                                           LDAA    PPAGE                           ;PPAGE    -> A
001A36 0F9A36 C7                                              CLRB                                    ;PPAGE:00 -> D
001A37 0F9A37 49                                              LSRD                                    ;align address
001A38 0F9A38 49                                              LSRD                                    ;align address
001A39 0F9A39 7A 01 0B                                        STAA    FCCOBLO                         ;store global address[17:16]
                                                              ;2nd CCOB word
001A3C 0F9A3C 72 01 02                                        INC     FCCOBIX                         ;CCOBIX=$001
001A3F 0F9A3F 7B 01 0A                                        STAB    FCCOBHI                         ;store global address[15:16]
001A42 0F9A42 79 01 0B                                        CLR     FCCOBLO                         ;first sector
                                                              ;Execute command
001A45 0F9A45 MACRO                   NVM_ERASE_PAGE_2        NVM_EXEC_CMD                            ;(SSTACK: 15 bytes)
                                      ;#Execute NVM command from RAM                                                   (NVM_EXEC_CMD)
                                      ; args:   none                                                                   (NVM_EXEC_CMD)
                                      ; result: none                                                                   (NVM_EXEC_CMD)
                                      ; SSTACK: 15 bytes                                                               (NVM_EXEC_CMD)
                                      ;         X, Y, and D are preserved                                              (NVM_EXEC_CMD)
001A45 0F9A45 MACRO                                           SSTACK_JOBSR    NVM_EXEC_CMD, 15                         (NVM_EXEC_CMD)
                                      ;#Check stack and call subroutine                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_EXEC_CMD/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_EXEC_CMD/SSTACK_JOBSR)
001A45 0F9A45 07 B4                                           JOBSR   NVM_EXEC_CMD                                     (NVM_EXEC_CMD/SSTACK_JOBSR)
                                                              ;Check result (incremented source address in Y)
001A47 0F9A47 1F 01 06 33 04                                  BRCLR   FSTAT, #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0), NVM_ERASE_PAGE_5
                                                              ;Failure
001A4C 0F9A4C MACRO                   NVM_ERASE_PAGE_3        SSTACK_PREPULL  4                       ;check stack
001A4C 0F9A4C 10 FE                                           CLC                                     ;flag failure
001A4E 0F9A4E 3A                      NVM_ERASE_PAGE_4        PULD                                    ;restore D
001A4F 0F9A4F 3D                                              RTS
                                                              ;Switch to next sector
001A50 0F9A50 FC 01 0A                NVM_ERASE_PAGE_5        LDD     FCCOBHI
001A53 0F9A53 C3 04 00                                        ADDD    #NVM_SECTOR_SIZE
001A56 0F9A56 7C 01 0A                                        STD     FCCOBHI
001A59 0F9A59 8C C0 00                                        CPD     #$C000
001A5C 0F9A5C 25 E7                                           BLO     NVM_ERASE_PAGE_2
                                                              ;Success
001A5E 0F9A5E MACRO                                           SSTACK_PREPULL  4                       ;check stack
001A5E 0F9A5E 14 01                                           SEC                                     ;flag success
001A60 0F9A60 20 EC                                           JOB     NVM_ERASE_PAGE_4
                                      ;#ECC double fault
001A62 0F9A62 -> $1A62                NVM_ISR_ECCERR          EQU     *
001A62 0F9A62 MACRO                                           RESET_FATAL     NVM_STR_ECCERR
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
001A62 0F9A62 CE 1C 0E                                        LDX     #NVM_STR_ECCERR                                  (RESET_FATAL)
001A65 0F9A65 06 18 30                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
001A68 0F9A68 -> $1A68                NVM_CODE_END            EQU     *
001A68 0F9A68 -> $F9A68               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C0E 0F9C0E                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
001C0E 0F9C0E 45 43 43 20 65 72 72 6F NVM_STR_ECCERR          FCS     "ECC error"
              F2                      
001C17 0F9C17 FF FF FF FF FF FF FF 00 NVM_VAL_PHRASE_PATTERN  DB      $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
001C1F 0F9C1F -> $1C1F                NVM_TABS_END            EQU     *
001C1F 0F9C1F -> $F9C1F               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Timer configuration
                                      ; TIOS
001C1F 0F9C1F -> $0004                DELAY_TIOS_INIT         EQU     1<<DELAY_OC
                                      ;#Output compare register
001C1F 0F9C1F -> $0054                DELAY_OC_TC             EQU     DELAY_TIM+TC0_OFFSET+(2*DELAY_OC);OC compare register
                                      ;#Shortest OC period (8 bus cycles)
001C1F 0F9C1F -> $0010                DELAY_MIN_TC            EQU     8*(CLOCK_BUS_FREQ/TIM_FREQ)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B30 0F9B30                                                 ORG     DELAY_VARS_START, DELAY_VARS_START_LIN
001B30 0F9B30                         DELAY_REM_TIME          DS      2               ;counts remaining timer intervalls
001B32 0F9B32 -> $1B32                DELAY_VARS_END          EQU     *
001B32 0F9B32 -> $F9B32               DELAY_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001A87 0F9A87                                                 ORG     DELAY_CODE_START, DELAY_CODE_START_LIN
                                      ;#Start a delay of a given time (or longer)
                                      ; args:   D: delay in ms
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
001A87 0F9A87 -> $1A87                DELAY_INDUCE            EQU     *
                                                              ;Save registers (ms delay in D)
001A87 0F9A87 35                                              PSHY                                    ;save Y
001A88 0F9A88 3B                                              PSHD                                    ;save D
                                                              ;Calculate tc delay (ms delay in D)
001A89 0F9A89 CD 61 A8                                        LDY     #(TIM_FREQ/1000)                ;TIM freq in kHz -> Y
001A8C 0F9A8C 13                                              EMUL                                    ;D * Y -> Y:D
                                                              ;Adjust tc delay if LSW is to short (tc delay in Y:D)
001A8D 0F9A8D B7 C6                                           EXG     D, Y                            ;tc delay ->D:Y
001A8F 0F9A8F 8D 00 10                                        CPY     #DELAY_MIN_TC                   ;check for min. timer delay
001A92 0F9A92 C2 00                                           SBCB    #0                              ;subtract one
001A94 0F9A94 82 00                                           SBCA    #0                              ; timer intervall
001A96 0F9A96 25 1A                                           BCS     DELAY_INDUCE_1          ;do nothing
001A98 0F9A98 B7 C6                                           EXG     D, Y                            ;adjusted tc delay ->Y:D
                                                              ;Set up timer (adjusted tc delay in Y:D)
001A9A 0F9A9A 14 10                                           SEI                                     ;start of atomic sequence
001A9C 0F9A9C 7D 1B 30                                        STY     DELAY_REM_TIME                  ;set remainig time counter
001A9F 0F9A9F MACRO                                           TIM_EN          DELAY_TIM, DELAY_OC     ;enable timer
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN)
                                      ;       2: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
001A9F 0F9A9F MACRO                                           TIM_MULT_EN     DELAY_TIM, (1<<DELAY_OC)                 (TIM_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN/TIM_MULT_EN)
                                      ;       2: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
001A9F 0F9A9F 18 0B 04 00 4E                                  MOVB    #1<<DELAY_OC, DELAY_TIM+TFLG1_OFFSET            ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
001AA4 0F9AA4 4C 4C 04                                        BSET    DELAY_TIM+TIE_OFFSET, #1<<DELAY_OC              ;enable interrupts (TIM_EN/TIM_MULT_EN)
001AA7 0F9AA7 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), DELAY_TIM+TSCR1_OFFSET   ;enable timer (TIM_EN/TIM_MULT_EN)
001AAC 0F9AAC MACRO                                           TIM_SET_DLY_D   DELAY_TIM, DELAY_OC     ;RPO PWO OPwP
                                      ;#Setup timer delay                                                              (TIM_SET_DLY_D)
                                      ; args: 1: start address of register space                                       (TIM_SET_DLY_D)
                                      ;       2: channel number                                                        (TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (TIM_SET_DLY_D)
001AAC 0F9AAC D3 44                                           ADDD    DELAY_TIM+TCNT_OFFSET                  ;RPO      (TIM_SET_DLY_D)
001AAE 0F9AAE 5C 54                                           STD     (DELAY_TIM+TC0_OFFSET+(2*DELAY_OC))          ;PWO (TIM_SET_DLY_D)
001AB0 0F9AB0 10 EF                                           CLI                                     ;end of atomic sequence
                                                              ;Restore registers (ms delay in D)
001AB2 0F9AB2 MACRO                   DELAY_INDUCE_1  SSTACK_PREPULL  6                       ;check SSTACK
001AB2 0F9AB2 3A                                              PULD                                    ;restore D
001AB3 0F9AB3 31                                              PULY                                    ;restore Y
001AB4 0F9AB4 3D                                              RTS                                     ;done
                                      ;#Wait until delay is over - non-blocking
                                      ; args:   none
                                      ; result: C-flag: set if successful (delay over)
                                      ; SSTACK: 0 bytes
                                      ;         X, Y, and D are preserved
001AB5 0F9AB5 -> $1AB5                DELAY_WAIT_NB           EQU     *
001AB5 0F9AB5 10 FE                                           CLC                                     ;flag failure by default
001AB7 0F9AB7 MACRO                                           TIM_BREN DELAY_TIM,DELAY_OC,DELAY_WAIT_NB_1;delau still ongoing
                                      ;#Branch if channel is enabled                                                   (TIM_BREN)
                                      ; args: 1: start address of register space                                       (TIM_BREN)
                                      ;       2: channel number                                                        (TIM_BREN)
                                      ;       3: branch address                                                        (TIM_BREN)
                                      ; SSTACK: none                                                                   (TIM_BREN)
                                      ;         X, Y, and D are preserved                                              (TIM_BREN)
001AB7 0F9AB7 4E 4C 04 02                                     BRSET   DELAY_TIM+TIE_OFFSET, #(1<<DELAY_OC), DELAY_WAIT_NB_1 (TIM_BREN)
001ABB 0F9ABB 14 01                                           SEC                                     ;flag success
001ABD 0F9ABD 3D                      DELAY_WAIT_NB_1         RTS                                     ;done
                                      ;#Wait until delay is over - blocking
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and D are preserved
001ABE 0F9ABE -> $1ABE                DELAY_WAIT_BL           EQU     *
001ABE 0F9ABE MACRO                                           DELAY_MAKE_BL   DELAY_WAIT_NB, 0
                                      ;#Helper functions                                                               (DELAY_MAKE_BL)
                                      ;#----------------                                                               (DELAY_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DELAY_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DELAY_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DELAY_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DELAY_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DELAY_MAKE_BL)
                                                              ;Disable interrupts                                      (DELAY_MAKE_BL)
001ABE 0F9ABE 14 10                   LOOP                    SEI                                                      (DELAY_MAKE_BL)
                                                              ;Call non-blocking function                              (DELAY_MAKE_BL)
001AC0 0F9AC0                                                 //SSTACK_PREPUSH        0                                (DELAY_MAKE_BL)
001AC0 0F9AC0 07 F3                                           JOBSR   DELAY_WAIT_NB                                    (DELAY_MAKE_BL)
001AC2 0F9AC2 24 03                                           BCC     WAIT            ;function unsuccessful           (DELAY_MAKE_BL)
                                                              ;Enable interrupts                                       (DELAY_MAKE_BL)
001AC4 0F9AC4 10 EF                                           CLI                                                      (DELAY_MAKE_BL)
                                                              ;Done                                                    (DELAY_MAKE_BL)
001AC6 0F9AC6 MACRO                                           SSTACK_PREPULL  2                                        (DELAY_MAKE_BL)
001AC6 0F9AC6 3D                                              RTS                                                      (DELAY_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DELAY_MAKE_BL)
001AC7 0F9AC7 MACRO                   WAIT                    ISTACK_WAIT                                              (DELAY_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DELAY_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DELAY_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (DELAY_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DELAY_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DELAY_MAKE_BL/ISTACK_WAIT)
001AC7 0F9AC7 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (DELAY_MAKE_BL/ISTACK_WAIT)
                                      ;#Service COP                                                                    (DELAY_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001AC7 0F9AC7 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (DELAY_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001ACC 0F9ACC 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (DELAY_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
001AD1 0F9AD1 10 EF                                           CLI                                                      (DELAY_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DELAY_MAKE_BL)
001AD3 0F9AD3 MACRO                                           SSTACK_PREPUSH  0                                        (DELAY_MAKE_BL)
001AD3 0F9AD3 20 E9                                           JOB     LOOP                                             (DELAY_MAKE_BL)
                                      ;#Millisecond delay - blocking
                                      ; args:   D: delay in ms
                                      ; result: none
                                      ; SSTACK: 8 bytes
                                      ;         X, Y, and D are preserved
001AD5 0F9AD5 -> $1AD5                DELAY_MS_BL             EQU     *
001AD5 0F9AD5 MACRO                                           DELAY_INDUCE                            ;initiate delay
                                      ;#User functions                                                                 (DELAY_INDUCE)
                                      ;#--------------                                                                 (DELAY_INDUCE)
                                      ;#Start a delay of a given time (or longer)                                      (DELAY_INDUCE)
                                      ; args:   D: delay in ms                                                         (DELAY_INDUCE)
                                      ; result: none                                                                   (DELAY_INDUCE)
                                      ; SSTACK: 6 bytes                                                                (DELAY_INDUCE)
                                      ;         X, Y, and D are preserved                                              (DELAY_INDUCE)
001AD5 0F9AD5 MACRO                                           SSTACK_JOBSR    DELAY_INDUCE, 6                          (DELAY_INDUCE)
                                      ;#Check stack and call subroutine                                                (DELAY_INDUCE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DELAY_INDUCE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DELAY_INDUCE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DELAY_INDUCE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DELAY_INDUCE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DELAY_INDUCE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DELAY_INDUCE/SSTACK_JOBSR)
001AD5 0F9AD5 07 B0                                           JOBSR   DELAY_INDUCE                                     (DELAY_INDUCE/SSTACK_JOBSR)
001AD7 0F9AD7 MACRO                                           DELAY_WAIT_BL                           ;wait
                                      ;#Wait until delay is over - blocking                                            (DELAY_WAIT_BL)
                                      ; args:   none                                                                   (DELAY_WAIT_BL)
                                      ; result: none                                                                   (DELAY_WAIT_BL)
                                      ; SSTACK: 2 bytes                                                                (DELAY_WAIT_BL)
                                      ;         X, Y, and D are preserved                                              (DELAY_WAIT_BL)
001AD7 0F9AD7 MACRO                                           SSTACK_JOBSR    DELAY_WAIT_BL, 2                         (DELAY_WAIT_BL)
                                      ;#Check stack and call subroutine                                                (DELAY_WAIT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DELAY_WAIT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DELAY_WAIT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DELAY_WAIT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DELAY_WAIT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DELAY_WAIT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DELAY_WAIT_BL/SSTACK_JOBSR)
001AD7 0F9AD7 07 E5                                           JOBSR   DELAY_WAIT_BL                                    (DELAY_WAIT_BL/SSTACK_JOBSR)
001AD9 0F9AD9 3D                                              RTS                                     ;done
                                      ;#ISR
                                      ;----
001ADA 0F9ADA -> $1ADA                DELAY_ISR               EQU     *
                                                              ;Clear interrupt flag
001ADA 0F9ADA MACRO                                           TIM_CLRIF DELAY_TIM, DELAY_OC           ;clear interrupt flag
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
001ADA 0F9ADA MACRO                                           TIM_MULT_CLRIF  DELAY_TIM, (1<<DELAY_OC)                 (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
001ADA 0F9ADA 18 0B 04 00 4E                                  MOVB    #1<<DELAY_OC, DELAY_TIM+TFLG1_OFFSET             (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;Adjust remaining time
001ADF 0F9ADF FE 1B 30                                        LDX     DELAY_REM_TIME                  ;remaining time -> X
001AE2 0F9AE2 27 05                                           BEQ     DELAY_ISR_1                     ;delay is over
001AE4 0F9AE4 09                                              DEX                                     ;decrement remaining time
001AE5 0F9AE5 7E 1B 30                                        STX     DELAY_REM_TIME                  ;update remaining time
001AE8 0F9AE8 MACRO                                           ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001AE8 0F9AE8 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Delay is over
001AE9 0F9AE9 MACRO                   DELAY_ISR_1             TIM_DIS DELAY_TIM, DELAY_OC             ;disable timer
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS)
                                      ;       2: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
001AE9 0F9AE9 MACRO                                           TIM_MULT_DIS    DELAY_TIM, (1<<DELAY_OC)                 (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS/TIM_MULT_DIS)
                                      ;       2: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
001AE9 0F9AE9 4D 4C 04                                        BCLR    DELAY_TIM+TIE_OFFSET, #1<<DELAY_OC               (TIM_DIS/TIM_MULT_DIS)
001AEC 0F9AEC 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
001AEE 0F9AEE 79 00 46                DISABLE                 CLR     DELAY_TIM+TSCR1_OFFSET                           (TIM_DIS/TIM_MULT_DIS)
001AF1 0F9AF1 -> $1AF1                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
001AF1 0F9AF1 MACRO                                           ISTACK_RTI                              ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001AF1 0F9AF1 0B                                              RTI                                                      (ISTACK_RTI)
001AF2 0F9AF2 -> $1AF2                DELAY_CODE_END          EQU     *
001AF2 0F9AF2 -> $F9AF2               DELAY_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C8C 0F9C8C                                                 ORG     DELAY_TABS_START, DELAY_TABS_START_LIN
001C8C 0F9C8C -> $1C8C                DELAY_TABS_END          EQU     *
001C8C 0F9C8C -> $F9C8C               DELAY_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001B2E 0F9B2E                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001B2E 0F9B2E -> $1B2E                VECTAB_VARS_END         EQU     *
001B2E 0F9B2E -> $F9B2E               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001A68 0F9A68                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
001A68 0F9A68 -> $1A68                VECTAB_CODE_END         EQU     *
001A68 0F9A68 -> $F9A68               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001C1F 0F9C1F                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
001C1F 0F9C1F 00                      ISR_SPURIOUS            BGND                            ;vector base + $10
001C20 0F9C20 00                      ISR_SYS                 BGND                            ;vector base + $12
001C21 0F9C21 00                      ISR_MPU                 BGND                            ;vector base + $14
001C22 0F9C22 00                      ISR_XGSWE               BGND                            ;vector base + $16
001C23 0F9C23 00                      ISR_RES18               BGND                            ;vector base + $18
001C24 0F9C24 00                      ISR_RES1A               BGND                            ;vector base + $1A
001C25 0F9C25 00                      ISR_RES1C               BGND                            ;vector base + $1C
001C26 0F9C26 00                      ISR_RES1E               BGND                            ;vector base + $1E
001C27 0F9C27 00                      ISR_RES20               BGND                            ;vector base + $20
001C28 0F9C28 00                      ISR_RES22               BGND                            ;vector base + $22
001C29 0F9C29 00                      ISR_RES24               BGND                            ;vector base + $24
001C2A 0F9C2A 00                      ISR_RES26               BGND                            ;vector base + $26
001C2B 0F9C2B 00                      ISR_RES28               BGND                            ;vector base + $28
001C2C 0F9C2C 00                      ISR_RES2A               BGND                            ;vector base + $2A
001C2D 0F9C2D 00                      ISR_RES2C               BGND                            ;vector base + $2C
001C2E 0F9C2E 00                      ISR_RES2E               BGND                            ;vector base + $2E
001C2F 0F9C2F 00                      ISR_RES30               BGND                            ;vector base + $30
001C30 0F9C30 00                      ISR_RES32               BGND                            ;vector base + $32
001C31 0F9C31 00                      ISR_RES34               BGND                            ;vector base + $34
001C32 0F9C32 00                      ISR_RES36               BGND                            ;vector base + $36
001C33 0F9C33 00                      ISR_RES38               BGND                            ;vector base + $38
001C34 0F9C34 00                      ISR_RES3A               BGND                            ;vector base + $3A
001C35 0F9C35 00                      ISR_ATD1COMP            BGND                            ;vector base + $3C
001C36 0F9C36 -> $1766                ISR_ATD0COMP            EQU     TVMON_ISR
001C36 0F9C36 00                      ISR_TIM_PAIE            BGND                            ;vector base + $40
001C37 0F9C37 00                      ISR_TIM_PAOV            BGND                            ;vector base + $42
001C38 0F9C38 00                      ISR_TIM_TOV             BGND                            ;vector base + $44
001C39 0F9C39 00                      ISR_TIM_TC7             BGND                            ;vector base + $46
001C3A 0F9C3A 00                      ISR_TIM_TC6             BGND                            ;vector base + $48
001C3B 0F9C3B 00                      ISR_TIM_TC5             BGND                            ;vector base + $4A
001C3C 0F9C3C 00                      ISR_TIM_TC4             BGND                            ;vector base + $4C
001C3D 0F9C3D 00                      ISR_TIM_TC3             BGND                            ;vector base + $4E
001C3E 0F9C3E 00                      ISR_TIM_TC2             BGND                            ;vector base + $50
001C3F 0F9C3F 00                      ISR_TIM_TC1             BGND                            ;vector base + $52
001C40 0F9C40 00                      ISR_TIM_TC0             BGND                            ;vector base + $54
001C41 0F9C41 00                      ISR_SCI7                BGND                            ;vector base + $56
001C42 0F9C42 00                      ISR_PITCH7              BGND                            ;vector base + $58
001C43 0F9C43 00                      ISR_PITCH6              BGND                            ;vector base + $5A
001C44 0F9C44 00                      ISR_PITCH5              BGND                            ;vector base + $5C
001C45 0F9C45 00                      ISR_PITCH4              BGND                            ;vector base + $5E
001C46 0F9C46 00                      ISR_RES60               BGND                            ;vector base + $60
001C47 0F9C47 00                      ISR_RES62               BGND                            ;vector base + $62
001C48 0F9C48 00                      ISR_XGSWT7              BGND                            ;vector base + $64
001C49 0F9C49 00                      ISR_XGSWT6              BGND                            ;vector base + $66
001C4A 0F9C4A 00                      ISR_XGSWT5              BGND                            ;vector base + $68
001C4B 0F9C4B 00                      ISR_XGSWT4              BGND                            ;vector base + $6A
001C4C 0F9C4C 00                      ISR_XGSWT3              BGND                            ;vector base + $6C
001C4D 0F9C4D 00                      ISR_XGSWT2              BGND                            ;vector base + $6E
001C4E 0F9C4E 00                      ISR_XGSWT1              BGND                            ;vector base + $70
001C4F 0F9C4F 00                      ISR_XGSWT0              BGND                            ;vector base + $72
001C50 0F9C50 00                      ISR_PITCH3              BGND                            ;vector base + $74
001C51 0F9C51 00                      ISR_PITCH2              BGND                            ;vector base + $76
001C52 0F9C52 00                      ISR_PITCH1              BGND                            ;vector base + $78
001C53 0F9C53 00                      ISR_PITCH0              BGND                            ;vector base + $7A
001C54 0F9C54 00                      ISR_HT                  BGND                            ;vector base + $7C
001C55 0F9C55 00                      ISR_API                 BGND                            ;vector base + $7E
001C56 0F9C56 00                      ISR_LVI                 BGND                            ;vector base + $80
001C57 0F9C57 00                      ISR_IIC1                BGND                            ;vector base + $82
001C58 0F9C58 00                      ISR_SCI5                BGND                            ;vector base + $84
001C59 0F9C59 00                      ISR_SCI4                BGND                            ;vector base + $86
001C5A 0F9C5A 00                      ISR_SCI3                BGND                            ;vector base + $88
001C5B 0F9C5B 00                      ISR_SCI2                BGND                            ;vector base + $8A
001C5C 0F9C5C 00                      ISR_PWMSDN              BGND                            ;vector base + $8C
001C5D 0F9C5D 00                      ISR_PORTP               BGND                            ;vector base + $8E
001C5E 0F9C5E 00                      ISR_CAN4TX              BGND                            ;vector base + $90
001C5F 0F9C5F 00                      ISR_CAN4RX              BGND                            ;vector base + $92
001C60 0F9C60 00                      ISR_CAN4ERR             BGND                            ;vector base + $94
001C61 0F9C61 00                      ISR_CAN4WUP             BGND                            ;vector base + $96
001C62 0F9C62 00                      ISR_CAN3TX              BGND                            ;vector base + $98
001C63 0F9C63 00                      ISR_CAN3RX              BGND                            ;vector base + $9A
001C64 0F9C64 00                      ISR_CAN3ERR             BGND                            ;vector base + $9C
001C65 0F9C65 00                      ISR_CAN3WUP             BGND                            ;vector base + $9E
001C66 0F9C66 00                      ISR_CAN2TX              BGND                            ;vector base + $A0
001C67 0F9C67 00                      ISR_CAN2RX              BGND                            ;vector base + $A2
001C68 0F9C68 00                      ISR_CAN2ERR             BGND                            ;vector base + $A4
001C69 0F9C69 00                      ISR_CAN2WUP             BGND                            ;vector base + $A6
001C6A 0F9C6A 00                      ISR_CAN1TX              BGND                            ;vector base + $A8
001C6B 0F9C6B 00                      ISR_CAN1RX              BGND                            ;vector base + $AA
001C6C 0F9C6C 00                      ISR_CAN1ERR             BGND                            ;vector base + $AC
001C6D 0F9C6D 00                      ISR_CAN1WUP             BGND                            ;vector base + $AE
001C6E 0F9C6E 00                      ISR_CAN0TX              BGND                            ;vector base + $A0
001C6F 0F9C6F 00                      ISR_CAN0RX              BGND                            ;vector base + $B2
001C70 0F9C70 00                      ISR_CAN0ERR             BGND                            ;vector base + $B4
001C71 0F9C71 00                      ISR_CAN0WUP             BGND                            ;vector base + $B6
001C72 0F9C72 00                      ISR_FLASH               BGND                            ;vector base + $B8
001C73 0F9C73 -> $1A62                ISR_FLASHFLT            EQU     NVM_ISR_ECCERR
001C73 0F9C73 00                      ISR_SPI2                BGND                            ;vector base + $BC
001C74 0F9C74 00                      ISR_SPI1                BGND                            ;vector base + $BE
001C75 0F9C75 00                      ISR_IIC0                BGND                            ;vector base + $C0
001C76 0F9C76 00                      ISR_SCI6                BGND                            ;vector base + $C2
001C77 0F9C77 00                      ISR_SCM                 BGND                            ;vector base + $C4
001C78 0F9C78 -> $1310                ISR_PLLLOCK             EQU     CLOCK_ISR
001C78 0F9C78 00                      ISR_ECT_PBOV            BGND                            ;vector base + $C8
001C79 0F9C79 00                      ISR_ECT_MODCNT          BGND                            ;vector base + $CA
001C7A 0F9C7A 00                      ISR_PORTH               BGND                            ;vector base + $CC
001C7B 0F9C7B 00                      ISR_PORTJ               BGND                            ;vector base + $CC
001C7C 0F9C7C 00                      ISR_ATD1                BGND                            ;vector base + $D0
001C7D 0F9C7D 00                      ISR_ATD0                BGND                            ;vector base + $D2
001C7E 0F9C7E 00                      ISR_SCI1                BGND                            ;vector base + $D4
001C7F 0F9C7F -> $168E                ISR_SCI0                EQU     SCI_ISR_RXTX
001C7F 0F9C7F 00                      ISR_SPI0                BGND                            ;vector base + $D8
001C80 0F9C80 00                      ISR_ECT_PAIE            BGND                            ;vector base + $DA
001C81 0F9C81 00                      ISR_ECT_PAOV            BGND                            ;vector base + $DC
001C82 0F9C82 00                      ISR_ECT_TOV             BGND                            ;vector base + $DE
001C83 0F9C83 00                      ISR_ECT_TC7             BGND                            ;vector base + $E0
001C84 0F9C84 00                      ISR_ECT_TC6             BGND                            ;vector base + $E2
001C85 0F9C85 00                      ISR_ECT_TC5             BGND                            ;vector base + $E4
001C86 0F9C86 00                      ISR_ECT_TC4             BGND                            ;vector base + $E6
001C87 0F9C87 -> $131B                ISR_ECT_TC3             EQU     LED_ISR
001C87 0F9C87 -> $1ADA                ISR_ECT_TC2             EQU     DELAY_ISR
001C87 0F9C87 -> $1597                ISR_ECT_TC1             EQU     SCI_ISR_OC
001C87 0F9C87 -> $1569                ISR_ECT_TC0             EQU     SCI_ISR_IC
001C87 0F9C87 00                      ISR_RTI                 BGND                            ;vector base + $F0
001C88 0F9C88 00                      ISR_IRQ                 BGND                            ;vector base + $F2
001C89 0F9C89 00                      ISR_XIRQ                BGND                            ;vector base + $F4
001C8A 0F9C8A 00                      ISR_SWI                 BGND                            ;vector base + $F6
001C8B 0F9C8B 00                      ISR_TRAP                BGND                            ;vector base + $F8
                                      ;#Code entry points
                                      ;#-----------------
001C8C 0F9C8C -> $1000                RES_COP                 EQU     RES_EXT
001C8C 0F9C8C -> $1000                RES_CM                  EQU     RES_EXT
001C8C 0F9C8C -> $1000                RES_EXT                 EQU     START_OF_CODE
001C8C 0F9C8C -> $1C8C                VECTAB_TABS_END         EQU     *
001C8C 0F9C8C -> $F9C8C               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12XEP100 Vector Table                                                      #
                                      ;###############################################################################
007F10 0FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN
007F10 0FFF10 1C 1F                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $10
007F12 0FFF12 1C 20                   VEC_SYS                 DW      ISR_SYS                 ;vector base + $12
007F14 0FFF14 1C 21                   VEC_MPU                 DW      ISR_MPU                 ;vector base + $14
007F16 0FFF16 1C 22                   VEC_XGSWE               DW      ISR_XGSWE               ;vector base + $16
007F18 0FFF18 1C 23                   VEC_RES18               DW      ISR_RES18               ;vector base + $18
007F1A 0FFF1A 1C 24                   VEC_RES1A               DW      ISR_RES1A               ;vector base + $1A
007F1C 0FFF1C 1C 25                   VEC_RES1C               DW      ISR_RES1C               ;vector base + $1C
007F1E 0FFF1E 1C 26                   VEC_RES1E               DW      ISR_RES1E               ;vector base + $1E
007F20 0FFF20 1C 27                   VEC_RES20               DW      ISR_RES20               ;vector base + $20
007F22 0FFF22 1C 28                   VEC_RES22               DW      ISR_RES22               ;vector base + $22
007F24 0FFF24 1C 29                   VEC_RES24               DW      ISR_RES24               ;vector base + $24
007F26 0FFF26 1C 2A                   VEC_RES26               DW      ISR_RES26               ;vector base + $26
007F28 0FFF28 1C 2B                   VEC_RES28               DW      ISR_RES28               ;vector base + $28
007F2A 0FFF2A 1C 2C                   VEC_RES2A               DW      ISR_RES2A               ;vector base + $2A
007F2C 0FFF2C 1C 2D                   VEC_RES2C               DW      ISR_RES2C               ;vector base + $2C
007F2E 0FFF2E 1C 2E                   VEC_RES2E               DW      ISR_RES2E               ;vector base + $2E
007F30 0FFF30 1C 2F                   VEC_RES30               DW      ISR_RES30               ;vector base + $30
007F32 0FFF32 1C 30                   VEC_RES32               DW      ISR_RES32               ;vector base + $32
007F34 0FFF34 1C 31                   VEC_RES34               DW      ISR_RES34               ;vector base + $34
007F36 0FFF36 1C 32                   VEC_RES36               DW      ISR_RES36               ;vector base + $36
007F38 0FFF38 1C 33                   VEC_RES38               DW      ISR_RES38               ;vector base + $38
007F3A 0FFF3A 1C 34                   VEC_RES3A               DW      ISR_RES3A               ;vector base + $3A
007F3C 0FFF3C 1C 35                   VEC_ATD1COMP            DW      ISR_ATD1COMP            ;vector base + $3C
007F3E 0FFF3E 17 66                   VEC_ATD0COMP            DW      ISR_ATD0COMP            ;vector base + $3E
007F40 0FFF40 1C 36                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $40
007F42 0FFF42 1C 37                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $42
007F44 0FFF44 1C 38                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $44
007F46 0FFF46 1C 39                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $46
007F48 0FFF48 1C 3A                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $48
007F4A 0FFF4A 1C 3B                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $4A
007F4C 0FFF4C 1C 3C                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $4C
007F4E 0FFF4E 1C 3D                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $4E
007F50 0FFF50 1C 3E                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $50
007F52 0FFF52 1C 3F                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $52
007F54 0FFF54 1C 40                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $54
007F56 0FFF56 1C 41                   VEC_SCI7                DW      ISR_SCI7                ;vector base + $56
007F58 0FFF58 1C 42                   VEC_PITCH7              DW      ISR_PITCH7              ;vector base + $58
007F5A 0FFF5A 1C 43                   VEC_PITCH6              DW      ISR_PITCH6              ;vector base + $5A
007F5C 0FFF5C 1C 44                   VEC_PITCH5              DW      ISR_PITCH5              ;vector base + $5C
007F5E 0FFF5E 1C 45                   VEC_PITCH4              DW      ISR_PITCH4              ;vector base + $5E
007F60 0FFF60 1C 46                   VEC_RES60               DW      ISR_RES60               ;vector base + $60
007F62 0FFF62 1C 47                   VEC_RES62               DW      ISR_RES62               ;vector base + $62
007F64 0FFF64 1C 48                   VEC_XGSWT7              DW      ISR_XGSWT7              ;vector base + $64
007F66 0FFF66 1C 49                   VEC_XGSWT6              DW      ISR_XGSWT6              ;vector base + $66
007F68 0FFF68 1C 4A                   VEC_XGSWT5              DW      ISR_XGSWT5              ;vector base + $68
007F6A 0FFF6A 1C 4B                   VEC_XGSWT4              DW      ISR_XGSWT4              ;vector base + $6A
007F6C 0FFF6C 1C 4C                   VEC_XGSWT3              DW      ISR_XGSWT3              ;vector base + $6C
007F6E 0FFF6E 1C 4D                   VEC_XGSWT2              DW      ISR_XGSWT2              ;vector base + $6E
007F70 0FFF70 1C 4E                   VEC_XGSWT1              DW      ISR_XGSWT1              ;vector base + $70
007F72 0FFF72 1C 4F                   VEC_XGSWT0              DW      ISR_XGSWT0              ;vector base + $72
007F74 0FFF74 1C 50                   VEC_PITCH3              DW      ISR_PITCH3              ;vector base + $74
007F76 0FFF76 1C 51                   VEC_PITCH2              DW      ISR_PITCH2              ;vector base + $76
007F78 0FFF78 1C 52                   VEC_PITCH1              DW      ISR_PITCH1              ;vector base + $78
007F7A 0FFF7A 1C 53                   VEC_PITCH0              DW      ISR_PITCH0              ;vector base + $7A
007F7C 0FFF7C 1C 54                   VEC_HT                  DW      ISR_HT                  ;vector base + $7C
007F7E 0FFF7E 1C 55                   VEC_API                 DW      ISR_API                 ;vector base + $7E
007F80 0FFF80 1C 56                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $80
007F82 0FFF82 1C 57                   VEC_IIC1                DW      ISR_IIC1                ;vector base + $82
007F84 0FFF84 1C 58                   VEC_SCI5                DW      ISR_SCI5                ;vector base + $84
007F86 0FFF86 1C 59                   VEC_SCI4                DW      ISR_SCI4                ;vector base + $86
007F88 0FFF88 1C 5A                   VEC_SCI3                DW      ISR_SCI3                ;vector base + $88
007F8A 0FFF8A 1C 5B                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $8A
007F8C 0FFF8C 1C 5C                   VEC_PWMSDN              DW      ISR_PWMSDN              ;vector base + $8C
007F8E 0FFF8E 1C 5D                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
007F90 0FFF90 1C 5E                   VEC_CAN4TX              DW      ISR_CAN4TX              ;vector base + $90
007F92 0FFF92 1C 5F                   VEC_CAN4RX              DW      ISR_CAN4RX              ;vector base + $92
007F94 0FFF94 1C 60                   VEC_CAN4ERR             DW      ISR_CAN4ERR             ;vector base + $94
007F96 0FFF96 1C 61                   VEC_CAN4WUP             DW      ISR_CAN4WUP             ;vector base + $96
007F98 0FFF98 1C 62                   VEC_CAN3TX              DW      ISR_CAN3TX              ;vector base + $98
007F9A 0FFF9A 1C 63                   VEC_CAN3RX              DW      ISR_CAN3RX              ;vector base + $9A
007F9C 0FFF9C 1C 64                   VEC_CAN3ERR             DW      ISR_CAN3ERR             ;vector base + $9C
007F9E 0FFF9E 1C 65                   VEC_CAN3WUP             DW      ISR_CAN3WUP             ;vector base + $9E
007FA0 0FFFA0 1C 66                   VEC_CAN2TX              DW      ISR_CAN2TX              ;vector base + $A0
007FA2 0FFFA2 1C 67                   VEC_CAN2RX              DW      ISR_CAN2RX              ;vector base + $A2
007FA4 0FFFA4 1C 68                   VEC_CAN2ERR             DW      ISR_CAN2ERR             ;vector base + $A4
007FA6 0FFFA6 1C 69                   VEC_CAN2WUP             DW      ISR_CAN2WUP             ;vector base + $A6
007FA8 0FFFA8 1C 6A                   VEC_CAN1TX              DW      ISR_CAN1TX              ;vector base + $A8
007FAA 0FFFAA 1C 6B                   VEC_CAN1RX              DW      ISR_CAN1RX              ;vector base + $AA
007FAC 0FFFAC 1C 6C                   VEC_CAN1ERR             DW      ISR_CAN1ERR             ;vector base + $AC
007FAE 0FFFAE 1C 6D                   VEC_CAN1WUP             DW      ISR_CAN1WUP             ;vector base + $AE
007FB0 0FFFB0 1C 6E                   VEC_CAN0TX              DW      ISR_CAN0TX              ;vector base + $A0
007FB2 0FFFB2 1C 6F                   VEC_CAN0RX              DW      ISR_CAN0RX              ;vector base + $B2
007FB4 0FFFB4 1C 70                   VEC_CAN0ERR             DW      ISR_CAN0ERR             ;vector base + $B4
007FB6 0FFFB6 1C 71                   VEC_CAN0WUP             DW      ISR_CAN0WUP             ;vector base + $B6
007FB8 0FFFB8 1C 72                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
007FBA 0FFFBA 1A 62                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
007FBC 0FFFBC 1C 73                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
007FBE 0FFFBE 1C 74                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
007FC0 0FFFC0 1C 75                   VEC_IIC0                DW      ISR_IIC0                ;vector base + $C0
007FC2 0FFFC2 1C 76                   VEC_SCI6                DW      ISR_SCI6                ;vector base + $C2
007FC4 0FFFC4 1C 77                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
007FC6 0FFFC6 13 10                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
007FC8 0FFFC8 1C 78                   VEC_ECT_PBOV            DW      ISR_ECT_PBOV            ;vector base + $C8
007FCA 0FFFCA 1C 79                   VEC_ECT_MODCNT          DW      ISR_ECT_MODCNT          ;vector base + $CA
007FCC 0FFFCC 1C 7A                   VEC_PORTH               DW      ISR_PORTH               ;vector base + $CC
007FCE 0FFFCE 1C 7B                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CE
007FD0 0FFFD0 1C 7C                   VEC_ATD1                DW      ISR_ATD1                ;vector base + $D0
007FD2 0FFFD2 1C 7D                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
007FD4 0FFFD4 1C 7E                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
007FD6 0FFFD6 16 8E                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
007FD8 0FFFD8 1C 7F                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
007FDA 0FFFDA 1C 80                   VEC_ECT_PAIE            DW      ISR_ECT_PAIE            ;vector base + $DA
007FDC 0FFFDC 1C 81                   VEC_ECT_PAOV            DW      ISR_ECT_PAOV            ;vector base + $DC
007FDE 0FFFDE 1C 82                   VEC_ECT_TOV             DW      ISR_ECT_TOV             ;vector base + $DE
007FE0 0FFFE0 1C 83                   VEC_ECT_TC7             DW      ISR_ECT_TC7             ;vector base + $E0
007FE2 0FFFE2 1C 84                   VEC_ECT_TC6             DW      ISR_ECT_TC6             ;vector base + $E2
007FE4 0FFFE4 1C 85                   VEC_ECT_TC5             DW      ISR_ECT_TC5             ;vector base + $E4
007FE6 0FFFE6 1C 86                   VEC_ECT_TC4             DW      ISR_ECT_TC4             ;vector base + $E6
007FE8 0FFFE8 13 1B                   VEC_ECT_TC3             DW      ISR_ECT_TC3             ;vector base + $E8
007FEA 0FFFEA 1A DA                   VEC_ECT_TC2             DW      ISR_ECT_TC2             ;vector base + $EA
007FEC 0FFFEC 15 97                   VEC_ECT_TC1             DW      ISR_ECT_TC1             ;vector base + $EC
007FEE 0FFFEE 15 69                   VEC_ECT_TC0             DW      ISR_ECT_TC0             ;vector base + $EE
007FF0 0FFFF0 1C 87                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
007FF2 0FFFF2 1C 88                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
007FF4 0FFFF4 1C 89                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
007FF6 0FFFF6 1C 8A                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
007FF8 0FFFF8 1C 8B                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
007FFA 0FFFFA 10 00                   VEC_RESET_COP           DW      RES_COP                 ;vector base + $FA
007FFC 0FFFFC 10 00                   VEC_RESET_CM            DW      RES_CM                  ;vector base + $FC
007FFE 0FFFFE 10 00                   VEC_RESET_EXT           DW      RES_EXT                 ;vector base + $FE
