                                      ;###############################################################################
                                      ;# S12CBase - Demo (S12DP256-Mini-EVB)                                              #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
??????        -> $0001                CLOCK_CRG               EQU     1               ;CRG
                                      ;CLOCK_OSC_FREQ         EQU      8000000        ; 8 MHz
                                      ;CLOCK_OSC_FREQ         EQU     16000000        ;16 MHz
                                      ;# Memory map:
??????        -> $0001                MMAP_RAM                EQU     1               ;use RAM memory map
                                      ;# Interrupt stack
??????        -> $0001                ISTACK_LEVELS           EQU     1               ;interrupt nesting not guaranteed
??????        -> $0001                ISTACK_DEBUG            EQU     1               ;don't enter wait mode
                                      ;# Subroutine stack
??????        -> $001B                SSTACK_DEPTH            EQU     27              ;no interrupt nesting
                                      ;SSTACK_DEBUG           EQU     1               ;debug behavior
                                      ;# COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;# RESET
??????        -> $D9E5                RESET_WELCOME           EQU     DEMO_WELCOME    ;welcome message
                                      ;# Vector table
??????        -> $0001                VECTAB_DEBUG            EQU     1               ;multiple dummy ISRs
                                      ;# SCI
??????        -> $0001                SCI_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;# NUM
??????        -> $0001                NUM_BLOCKING_ON         EQU     1               ;enable blocking subroutines
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
00D000 0FD000                                                 ORG     MMAP_RAM_START
                                      ;Code
00D000 0FD000 -> $D000                START_OF_CODE           EQU     *
00D000 0FD000 -> $D000                DEMO_CODE_START         EQU     *
00D000 0FD000 -> $FD000               DEMO_CODE_START_LIN     EQU     @
00D000 0FD000 -> $D3C3                BASE_CODE_START         EQU     DEMO_CODE_END
00D000 0FD000 -> $FD3C3               BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Variables
00D000 0FD000 -> $D98B                DEMO_VARS_START         EQU     BASE_CODE_END
00D000 0FD000 -> $FD98B               DEMO_VARS_START_LIN     EQU     BASE_CODE_END_LIN
00D000 0FD000 -> $D98B                BASE_VARS_START         EQU     DEMO_VARS_END
00D000 0FD000 -> $FD98B               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
                                      ;Tables
00D000 0FD000 -> $D9E5                DEMO_TABS_START         EQU     BASE_VARS_END
00D000 0FD000 -> $FD9E5               DEMO_TABS_START_LIN     EQU     BASE_VARS_END_LIN
00D000 0FD000 -> $DA5C                BASE_TABS_START         EQU     DEMO_TABS_END
00D000 0FD000 -> $FDA5C               BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (S12DP256-Mini-EVB)                                  #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 20, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
00D000 0FD000 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
00D000 0FD000 -> $3D0900              CLOCK_OSC_FREQ          EQU      4000000        ;4 MHz
00D000 0FD000 -> $17D7840             CLOCK_BUS_FREQ          EQU     25000000        ;25 MHz
00D000 0FD000 -> $F4240               CLOCK_REF_FREQ          EQU      1000000        ;1,000 MHz
                                      ;# SCI
00D000 0FD000 -> $0001                SCI_FC_XONXOFF          EQU     1               ;XON/XOFF flow control
00D000 0FD000 -> $0001                SCI_BD_OFF              EQU     1               ;no baud rate detection
00D000 0FD000 -> $0001                SCI_ERRSIG_OFF          EQU     1               ;don't signal errors
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
00D98B 0FD98B -> $D98B                GPIO_VARS_START         EQU     *
00D98B 0FD98B -> $FD98B               GPIO_VARS_START_LIN     EQU     @
00D98B 0FD98B -> $D98B                MMAP_VARS_START         EQU     GPIO_VARS_END
00D98B 0FD98B -> $FD98B               MMAP_VARS_START_LIN     EQU     GPIO_VARS_END_LIN
00D98B 0FD98B -> $D98B                SSTACK_VARS_START       EQU     MMAP_VARS_END
00D98B 0FD98B -> $FD98B               SSTACK_VARS_START_LIN   EQU     MMAP_VARS_END_LIN
00D98B 0FD98B -> $D98B                ISTACK_VARS_START       EQU     SSTACK_VARS_END
00D98B 0FD98B -> $FD98B               ISTACK_VARS_START_LIN   EQU     SSTACK_VARS_END_LIN
00D98B 0FD98B -> $D9AF                CLOCK_VARS_START        EQU     ISTACK_VARS_END
00D98B 0FD98B -> $FD9AF               CLOCK_VARS_START_LIN    EQU     ISTACK_VARS_END_LIN
00D98B 0FD98B -> $D9AF                COP_VARS_START          EQU     CLOCK_VARS_END
00D98B 0FD98B -> $FD9AF               COP_VARS_START_LIN      EQU     CLOCK_VARS_END_LIN
00D98B 0FD98B -> $D9AF                TIM_VARS_START          EQU     COP_VARS_END
00D98B 0FD98B -> $FD9AF               TIM_VARS_START_LIN      EQU     COP_VARS_END_LIN
00D98B 0FD98B -> $D9AF                SCI_VARS_START          EQU     TIM_VARS_END
00D98B 0FD98B -> $FD9AF               SCI_VARS_START_LIN      EQU     TIM_VARS_END_LIN
00D98B 0FD98B -> $D9E1                STRING_VARS_START       EQU     SCI_VARS_END
00D98B 0FD98B -> $FD9E1               STRING_VARS_START_LIN   EQU     SCI_VARS_END_LIN
00D98B 0FD98B -> $D9E1                RESET_VARS_START        EQU     STRING_VARS_END
00D98B 0FD98B -> $FD9E1               RESET_VARS_START_LIN    EQU     STRING_VARS_END_LIN
00D98B 0FD98B -> $D9E5                NUM_VARS_START          EQU     RESET_VARS_END
00D98B 0FD98B -> $FD9E5               NUM_VARS_START_LIN      EQU     RESET_VARS_END_LIN
00D98B 0FD98B -> $D9E5                NVM_VARS_START          EQU     NUM_VARS_END
00D98B 0FD98B -> $FD9E5               NVM_VARS_START_LIN      EQU     NUM_VARS_END_LIN
00D98B 0FD98B -> $D9E5                VECTAB_VARS_START       EQU     NVM_VARS_END
00D98B 0FD98B -> $FD9E5               VECTAB_VARS_START_LIN   EQU     NVM_VARS_END_LIN
00D98B 0FD98B -> $D9E5                BASE_VARS_END           EQU     VECTAB_VARS_START
00D98B 0FD98B -> $FD9E5               BASE_VARS_END_LIN       EQU     VECTAB_VARS_START_LIN
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3C3 0FD3C3                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
00D3C3 0FD3C3 -> $D3C3                GPIO_CODE_START         EQU     *
00D3C3 0FD3C3 -> $FD3C3               GPIO_CODE_START_LIN     EQU     @
00D3C3 0FD3C3 -> $D3C3                MMAP_CODE_START         EQU     GPIO_CODE_END
00D3C3 0FD3C3 -> $FD3C3               MMAP_CODE_START_LIN     EQU     GPIO_CODE_END_LIN
00D3C3 0FD3C3 -> $D3C3                SSTACK_CODE_START       EQU     MMAP_CODE_END
00D3C3 0FD3C3 -> $FD3C3               SSTACK_CODE_START_LIN   EQU     MMAP_CODE_END_LIN
00D3C3 0FD3C3 -> $D3CF                ISTACK_CODE_START       EQU     SSTACK_CODE_END
00D3C3 0FD3C3 -> $FD3CF               ISTACK_CODE_START_LIN   EQU     SSTACK_CODE_END_LIN
00D3C3 0FD3C3 -> $D3CF                CLOCK_CODE_START        EQU     ISTACK_CODE_END
00D3C3 0FD3C3 -> $FD3CF               CLOCK_CODE_START_LIN    EQU     ISTACK_CODE_END_LIN
00D3C3 0FD3C3 -> $D3E6                COP_CODE_START          EQU     CLOCK_CODE_END
00D3C3 0FD3C3 -> $FD3E6               COP_CODE_START_LIN      EQU     CLOCK_CODE_END_LIN
00D3C3 0FD3C3 -> $D3E6                TIM_CODE_START          EQU     COP_CODE_END
00D3C3 0FD3C3 -> $FD3E6               TIM_CODE_START_LIN      EQU     COP_CODE_END_LIN
00D3C3 0FD3C3 -> $D3E6                SCI_CODE_START          EQU     TIM_CODE_END
00D3C3 0FD3C3 -> $FD3E6               SCI_CODE_START_LIN      EQU     TIM_CODE_END_LIN
00D3C3 0FD3C3 -> $D7C8                STRING_CODE_START       EQU     SCI_CODE_END
00D3C3 0FD3C3 -> $FD7C8               STRING_CODE_START_LIN   EQU     SCI_CODE_END_LIN
00D3C3 0FD3C3 -> $D82C                RESET_CODE_START        EQU     STRING_CODE_END
00D3C3 0FD3C3 -> $FD82C               RESET_CODE_START_LIN    EQU     STRING_CODE_END_LIN
00D3C3 0FD3C3 -> $D88B                NUM_CODE_START          EQU     RESET_CODE_END
00D3C3 0FD3C3 -> $FD88B               NUM_CODE_START_LIN      EQU     RESET_CODE_END_LIN
00D3C3 0FD3C3 -> $D98B                NVM_CODE_START          EQU     NUM_CODE_END
00D3C3 0FD3C3 -> $FD98B               NVM_CODE_START_LIN      EQU     NUM_CODE_END_LIN
00D3C3 0FD3C3 -> $D98B                VECTAB_CODE_START       EQU     NVM_CODE_END
00D3C3 0FD3C3 -> $FD98B               VECTAB_CODE_START_LIN   EQU     NVM_CODE_END_LIN
00D3C3 0FD3C3 -> $D98B                BASE_CODE_END           EQU     VECTAB_CODE_START
00D3C3 0FD3C3 -> $FD98B               BASE_CODE_END_LIN       EQU     VECTAB_CODE_START_LIN
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA5C 0FDA5C                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
00DA5C 0FDA5C -> $DA5C                GPIO_TABS_START         EQU     *
00DA5C 0FDA5C -> $FDA5C               GPIO_TABS_START_LIN     EQU     @
00DA5C 0FDA5C -> $DA5C                MMAP_TABS_START         EQU     GPIO_TABS_END
00DA5C 0FDA5C -> $FDA5C               MMAP_TABS_START_LIN     EQU     GPIO_TABS_END_LIN
00DA5C 0FDA5C -> $DA5C                SSTACK_TABS_START       EQU     MMAP_TABS_END
00DA5C 0FDA5C -> $FDA5C               SSTACK_TABS_START_LIN   EQU     MMAP_TABS_END_LIN
00DA5C 0FDA5C -> $DA8F                ISTACK_TABS_START       EQU     SSTACK_TABS_END
00DA5C 0FDA5C -> $FDA8F               ISTACK_TABS_START_LIN   EQU     SSTACK_TABS_END_LIN
00DA5C 0FDA5C -> $DA8F                CLOCK_TABS_START        EQU     ISTACK_TABS_END
00DA5C 0FDA5C -> $FDA8F               CLOCK_TABS_START_LIN    EQU     ISTACK_TABS_END_LIN
00DA5C 0FDA5C -> $DA8F                COP_TABS_START          EQU     CLOCK_TABS_END
00DA5C 0FDA5C -> $FDA8F               COP_TABS_START_LIN      EQU     CLOCK_TABS_END_LIN
00DA5C 0FDA5C -> $DA8F                TIM_TABS_START          EQU     COP_TABS_END
00DA5C 0FDA5C -> $FDA8F               TIM_TABS_START_LIN      EQU     COP_TABS_END_LIN
00DA5C 0FDA5C -> $DA8F                SCI_TABS_START          EQU     TIM_TABS_END
00DA5C 0FDA5C -> $FDA8F               SCI_TABS_START_LIN      EQU     TIM_TABS_END_LIN
00DA5C 0FDA5C -> $DAA0                STRING_TABS_START       EQU     SCI_TABS_END
00DA5C 0FDA5C -> $FDAA0               STRING_TABS_START_LIN   EQU     SCI_TABS_END_LIN
00DA5C 0FDA5C -> $DAA3                RESET_TABS_START        EQU     STRING_TABS_END
00DA5C 0FDA5C -> $FDAA3               RESET_TABS_START_LIN    EQU     STRING_TABS_END_LIN
00DA5C 0FDA5C -> $DAE2                NUM_TABS_START          EQU     RESET_TABS_END
00DA5C 0FDA5C -> $FDAE2               NUM_TABS_START_LIN      EQU     RESET_TABS_END_LIN
00DA5C 0FDA5C -> $DAF3                NVM_TABS_START          EQU     NUM_TABS_END
00DA5C 0FDA5C -> $FDAF3               NVM_TABS_START_LIN      EQU     NUM_TABS_END_LIN
00DA5C 0FDA5C -> $DAF3                VECTAB_TABS_START       EQU     NVM_TABS_END
00DA5C 0FDA5C -> $FDAF3               VECTAB_TABS_START_LIN   EQU     NVM_TABS_END_LIN
00DA5C 0FDA5C -> $DAF3                BASE_TABS_END           EQU     VECTAB_TABS_START
00DA5C 0FDA5C -> $FDAF3               BASE_TABS_END_LIN       EQU     VECTAB_TABS_START_LIN
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (S12DP256-Mini-EVB)                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12C128.                     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 15, 2011                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;##################################
                                      ;# S12XEP100 Register Definitions #
                                      ;##################################
00DA5C 0FDA5C -> $0000                PORTA           EQU     $0000
00DA5C 0FDA5C -> $0080                PTA7            EQU     $80
00DA5C 0FDA5C -> $0040                PTA6            EQU     $40
00DA5C 0FDA5C -> $0020                PTA5            EQU     $20
00DA5C 0FDA5C -> $0010                PTA4            EQU     $10
00DA5C 0FDA5C -> $0008                PTA3            EQU     $08
00DA5C 0FDA5C -> $0004                PTA2            EQU     $04
00DA5C 0FDA5C -> $0002                PTA1            EQU     $02
00DA5C 0FDA5C -> $0001                PTA0            EQU     $01
00DA5C 0FDA5C -> $0080                PA7             EQU     $80
00DA5C 0FDA5C -> $0040                PA6             EQU     $40
00DA5C 0FDA5C -> $0020                PA5             EQU     $20
00DA5C 0FDA5C -> $0010                PA4             EQU     $10
00DA5C 0FDA5C -> $0008                PA3             EQU     $08
00DA5C 0FDA5C -> $0004                PA2             EQU     $04
00DA5C 0FDA5C -> $0002                PA1             EQU     $02
00DA5C 0FDA5C -> $0001                PA0             EQU     $01
00DA5C 0FDA5C -> $0001                PORTB           EQU     $0001
00DA5C 0FDA5C -> $0080                PTB7            EQU     $80
00DA5C 0FDA5C -> $0040                PTB6            EQU     $40
00DA5C 0FDA5C -> $0020                PTB5            EQU     $20
00DA5C 0FDA5C -> $0010                PTB4            EQU     $10
00DA5C 0FDA5C -> $0008                PTB3            EQU     $08
00DA5C 0FDA5C -> $0004                PTB2            EQU     $04
00DA5C 0FDA5C -> $0002                PTB1            EQU     $02
00DA5C 0FDA5C -> $0001                PTB0            EQU     $01
00DA5C 0FDA5C -> $0080                PB7             EQU     $80
00DA5C 0FDA5C -> $0040                PB6             EQU     $40
00DA5C 0FDA5C -> $0020                PB5             EQU     $20
00DA5C 0FDA5C -> $0010                PB4             EQU     $10
00DA5C 0FDA5C -> $0008                PB3             EQU     $08
00DA5C 0FDA5C -> $0004                PB2             EQU     $04
00DA5C 0FDA5C -> $0002                PB1             EQU     $02
00DA5C 0FDA5C -> $0001                PB0             EQU     $01
00DA5C 0FDA5C -> $0002                DDRA            EQU     $0002
00DA5C 0FDA5C -> $0080                DDRA7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRA6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRA5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRA4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRA3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRA2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRA1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRA0           EQU     $01
00DA5C 0FDA5C -> $0003                DDRB            EQU     $0003
00DA5C 0FDA5C -> $0080                DDRB7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRB6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRB5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRB4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRB3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRB2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRB1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRB0           EQU     $01
                                      ;$0004 to $0007 reserved
00DA5C 0FDA5C -> $0008                PORTE           EQU     $0008
00DA5C 0FDA5C -> $0080                PTE7            EQU     $80
00DA5C 0FDA5C -> $0040                PTE6            EQU     $40
00DA5C 0FDA5C -> $0020                PTE5            EQU     $20
00DA5C 0FDA5C -> $0010                PTE4            EQU     $10
00DA5C 0FDA5C -> $0008                PTE3            EQU     $08
00DA5C 0FDA5C -> $0004                PTE2            EQU     $04
00DA5C 0FDA5C -> $0002                PTE1            EQU     $02
00DA5C 0FDA5C -> $0001                PTE0            EQU     $01
00DA5C 0FDA5C -> $0080                PE7             EQU     $80
00DA5C 0FDA5C -> $0040                PE6             EQU     $40
00DA5C 0FDA5C -> $0020                PE5             EQU     $20
00DA5C 0FDA5C -> $0010                PE4             EQU     $10
00DA5C 0FDA5C -> $0008                PE3             EQU     $08
00DA5C 0FDA5C -> $0004                PE2             EQU     $04
00DA5C 0FDA5C -> $0002                PE1             EQU     $02
00DA5C 0FDA5C -> $0001                PE0             EQU     $01
00DA5C 0FDA5C -> $0009                DDRE            EQU     $0009
00DA5C 0FDA5C -> $0080                DDRE7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRE6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRE5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRE4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRE3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRE2           EQU     $04
00DA5C 0FDA5C -> $000A                PEAR            EQU     $000A
00DA5C 0FDA5C -> $0080                NOACCE          EQU     $80
00DA5C 0FDA5C -> $0020                PIPOE           EQU     $20
00DA5C 0FDA5C -> $0010                NECLK           EQU     $10
00DA5C 0FDA5C -> $0008                LSTRE           EQU     $08
00DA5C 0FDA5C -> $0004                RDWE            EQU     $04
00DA5C 0FDA5C -> $000B                MODE            EQU     $000B
00DA5C 0FDA5C -> $0080                MODC            EQU     $80
00DA5C 0FDA5C -> $0040                MODB            EQU     $40
00DA5C 0FDA5C -> $0020                MODA            EQU     $20
00DA5C 0FDA5C -> $0008                IVIS            EQU     $08
00DA5C 0FDA5C -> $0002                EMK             EQU     $02
00DA5C 0FDA5C -> $0001                EME             EQU     $01
00DA5C 0FDA5C -> $000C                PUCR            EQU     $000C
00DA5C 0FDA5C -> $0080                PUPKE           EQU     $80
00DA5C 0FDA5C -> $0010                PUPEE           EQU     $10
00DA5C 0FDA5C -> $0002                PUPBE           EQU     $02
00DA5C 0FDA5C -> $0001                PUPAE           EQU     $01
00DA5C 0FDA5C -> $000D                RDRIV           EQU     $000D
00DA5C 0FDA5C -> $0080                RDPK            EQU     $80
00DA5C 0FDA5C -> $0010                RDPE            EQU     $10
00DA5C 0FDA5C -> $0002                RDPB            EQU     $02
00DA5C 0FDA5C -> $0001                RDPA            EQU     $01
00DA5C 0FDA5C -> $000E                EBICTL          EQU     $000E
00DA5C 0FDA5C -> $0001                ESTR            EQU     $01
                                      ;$000F reserved
00DA5C 0FDA5C -> $0010                INITRM          EQU     $0010
00DA5C 0FDA5C -> $0080                RAM15           EQU     $80
00DA5C 0FDA5C -> $0040                RAM14           EQU     $40
00DA5C 0FDA5C -> $0020                RAM13           EQU     $20
00DA5C 0FDA5C -> $0010                RAM12           EQU     $10
00DA5C 0FDA5C -> $0008                RAM11           EQU     $08
00DA5C 0FDA5C -> $0001                RAMHAL          EQU     $01
00DA5C 0FDA5C -> $0011                INITRG          EQU     $0011
00DA5C 0FDA5C -> $0040                REG14           EQU     $40
00DA5C 0FDA5C -> $0020                REG13           EQU     $20
00DA5C 0FDA5C -> $0010                REG12           EQU     $10
00DA5C 0FDA5C -> $0008                REG11           EQU     $08
00DA5C 0FDA5C -> $0012                INITEE          EQU     $0012
00DA5C 0FDA5C -> $0080                EE15            EQU     $80
00DA5C 0FDA5C -> $0040                EE14            EQU     $40
00DA5C 0FDA5C -> $0020                EE13            EQU     $20
00DA5C 0FDA5C -> $0010                EE12            EQU     $10
00DA5C 0FDA5C -> $0001                EEON            EQU     $01
00DA5C 0FDA5C -> $0013                MISC            EQU     $0013
00DA5C 0FDA5C -> $0008                EXSTR1          EQU     $08
00DA5C 0FDA5C -> $0004                EXSTR0          EQU     $04
00DA5C 0FDA5C -> $0002                ROMHM           EQU     $02
00DA5C 0FDA5C -> $0001                ROMON           EQU     $01
00DA5C 0FDA5C -> $0014                MTST0           EQU     $0014
00DA5C 0FDA5C -> $0015                ITCR            EQU     $0015
00DA5C 0FDA5C -> $0010                WRINT           EQU     $10
00DA5C 0FDA5C -> $0008                ADR3            EQU     $08
00DA5C 0FDA5C -> $0004                ADR2            EQU     $04
00DA5C 0FDA5C -> $0002                ADR1            EQU     $02
00DA5C 0FDA5C -> $0001                ADR0            EQU     $01
00DA5C 0FDA5C -> $0016                ITEST           EQU     $0016
00DA5C 0FDA5C -> $0080                INTE            EQU     $80
00DA5C 0FDA5C -> $0040                INTC            EQU     $40
00DA5C 0FDA5C -> $0020                INTA            EQU     $20
00DA5C 0FDA5C -> $0010                INT8            EQU     $10
00DA5C 0FDA5C -> $0008                INT6            EQU     $08
00DA5C 0FDA5C -> $0004                INT4            EQU     $04
00DA5C 0FDA5C -> $0002                INT2            EQU     $02
00DA5C 0FDA5C -> $0001                INT0            EQU     $01
00DA5C 0FDA5C -> $0017                MTST1           EQU     $0017
                                      ;$0018 to $0019 reserved
00DA5C 0FDA5C -> $001A                PARTIDH         EQU     $001A
00DA5C 0FDA5C -> $0080                ID15            EQU     $80
00DA5C 0FDA5C -> $0040                ID14            EQU     $40
00DA5C 0FDA5C -> $0020                ID13            EQU     $20
00DA5C 0FDA5C -> $0010                ID12            EQU     $10
00DA5C 0FDA5C -> $0008                ID11            EQU     $08
00DA5C 0FDA5C -> $0004                ID10            EQU     $04
00DA5C 0FDA5C -> $0002                ID9             EQU     $02
00DA5C 0FDA5C -> $0001                ID8             EQU     $01
00DA5C 0FDA5C -> $001B                PARTIDL         EQU     $001B
00DA5C 0FDA5C -> $0080                ID7             EQU     $80
00DA5C 0FDA5C -> $0040                ID6             EQU     $40
00DA5C 0FDA5C -> $0020                ID5             EQU     $20
00DA5C 0FDA5C -> $0010                ID4             EQU     $10
00DA5C 0FDA5C -> $0008                ID3             EQU     $08
00DA5C 0FDA5C -> $0004                ID2             EQU     $04
00DA5C 0FDA5C -> $0002                ID1             EQU     $02
00DA5C 0FDA5C -> $0001                ID0             EQU     $01
00DA5C 0FDA5C -> $001C                MEMSIZ0         EQU     $001C
00DA5C 0FDA5C -> $0080                REG_SW0         EQU     $80
00DA5C 0FDA5C -> $0020                EEP_SW1         EQU     $20
00DA5C 0FDA5C -> $0010                EEP_SW0         EQU     $10
00DA5C 0FDA5C -> $0004                RAM_SW2         EQU     $04
00DA5C 0FDA5C -> $0002                RAM_SW1         EQU     $02
00DA5C 0FDA5C -> $0001                RAM_SW0         EQU     $01
00DA5C 0FDA5C -> $001D                MEMSIZ1         EQU     $001D
00DA5C 0FDA5C -> $0080                ROM_SW1         EQU     $80
00DA5C 0FDA5C -> $0040                ROM_SW0         EQU     $40
00DA5C 0FDA5C -> $0002                PAG_SW1         EQU     $02
00DA5C 0FDA5C -> $0001                PAG_SW0         EQU     $01
00DA5C 0FDA5C -> $001E                INTCR           EQU     $001E
00DA5C 0FDA5C -> $0080                IRQE            EQU     $80
00DA5C 0FDA5C -> $0040                IRQEN           EQU     $40
00DA5C 0FDA5C -> $001F                HPRIO           EQU     $001F
00DA5C 0FDA5C -> $0080                PSEL7           EQU     $80
00DA5C 0FDA5C -> $0040                PSEL6           EQU     $40
00DA5C 0FDA5C -> $0020                PSEL5           EQU     $20
00DA5C 0FDA5C -> $0010                PSEL4           EQU     $10
00DA5C 0FDA5C -> $0008                PSEL3           EQU     $08
00DA5C 0FDA5C -> $0004                PSEL2           EQU     $04
00DA5C 0FDA5C -> $0002                PSEL1           EQU     $02
                                      ;$0020 to 0027 reserved
00DA5C 0FDA5C -> $0028                DBGC2           EQU     $0028
00DA5C 0FDA5C -> $0028                BKPCT0          EQU     $0028
00DA5C 0FDA5C -> $0080                BKABEN          EQU     $80
00DA5C 0FDA5C -> $0040                FULL            EQU     $40
00DA5C 0FDA5C -> $0020                BDM             EQU     $20
00DA5C 0FDA5C -> $0010                TAGAB           EQU     $10
00DA5C 0FDA5C -> $0008                BKCEN           EQU     $08
00DA5C 0FDA5C -> $0004                TAGC            EQU     $04
00DA5C 0FDA5C -> $0002                RWCEN           EQU     $02
00DA5C 0FDA5C -> $0001                RWC             EQU     $01
00DA5C 0FDA5C -> $0029                DBGC3           EQU     $0029
00DA5C 0FDA5C -> $0029                BKPCT1          EQU     $0029
00DA5C 0FDA5C -> $0080                BKAMBH          EQU     $80
00DA5C 0FDA5C -> $0040                BKAMBL          EQU     $40
00DA5C 0FDA5C -> $0020                BKBMBH          EQU     $20
00DA5C 0FDA5C -> $0010                BKBMBL          EQU     $10
00DA5C 0FDA5C -> $0008                RWAEN           EQU     $08
00DA5C 0FDA5C -> $0004                RWA             EQU     $04
00DA5C 0FDA5C -> $0002                RWBEN           EQU     $02
00DA5C 0FDA5C -> $0001                RWB             EQU     $01
00DA5C 0FDA5C -> $002A                DBGCAX          EQU     $002A
00DA5C 0FDA5C -> $002A                BKP0X           EQU     $002A
00DA5C 0FDA5C -> $002B                DBGCAH          EQU     $002B
00DA5C 0FDA5C -> $002C                DBGCAL          EQU     $002C
00DA5C 0FDA5C -> $002B                BKP0H           EQU     $002B
00DA5C 0FDA5C -> $002C                BKP0L           EQU     $002C
00DA5C 0FDA5C -> $002D                DBGCBX          EQU     $002D
00DA5C 0FDA5C -> $002E                DBGCBH          EQU     $002E
00DA5C 0FDA5C -> $002F                DBGCBL          EQU     $002F
00DA5C 0FDA5C -> $002E                BKP1H           EQU     $002E
00DA5C 0FDA5C -> $002F                BKP1L           EQU     $002F
00DA5C 0FDA5C -> $0030                PPAGE           EQU     $0030
00DA5C 0FDA5C -> $0020                PIX5            EQU     $20
00DA5C 0FDA5C -> $0010                PIX4            EQU     $10
00DA5C 0FDA5C -> $0008                PIX3            EQU     $08
00DA5C 0FDA5C -> $0004                PIX2            EQU     $04
00DA5C 0FDA5C -> $0002                PIX1            EQU     $02
00DA5C 0FDA5C -> $0001                PIX0            EQU     $01
                                      ;$0031 reserved
00DA5C 0FDA5C -> $0032                PORTK           EQU     $0032
00DA5C 0FDA5C -> $0080                PTK7            EQU     $80
00DA5C 0FDA5C -> $0040                PTK6            EQU     $40
00DA5C 0FDA5C -> $0020                PTK5            EQU     $20
00DA5C 0FDA5C -> $0010                PTK4            EQU     $10
00DA5C 0FDA5C -> $0008                PTK3            EQU     $08
00DA5C 0FDA5C -> $0004                PTK2            EQU     $04
00DA5C 0FDA5C -> $0002                PTK1            EQU     $02
00DA5C 0FDA5C -> $0001                PTK0            EQU     $01
00DA5C 0FDA5C -> $0080                PK7             EQU     $80
00DA5C 0FDA5C -> $0040                PK6             EQU     $40
00DA5C 0FDA5C -> $0020                PK5             EQU     $20
00DA5C 0FDA5C -> $0010                PK4             EQU     $10
00DA5C 0FDA5C -> $0008                PK3             EQU     $08
00DA5C 0FDA5C -> $0004                PK2             EQU     $04
00DA5C 0FDA5C -> $0002                PK1             EQU     $02
00DA5C 0FDA5C -> $0001                PK0             EQU     $01
00DA5C 0FDA5C -> $0033                DDRK            EQU     $0033
00DA5C 0FDA5C -> $0080                DDRK7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRK6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRK5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRK4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRK3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRK2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRK1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRK0           EQU     $01
00DA5C 0FDA5C -> $0034                SYNR            EQU     $0034
00DA5C 0FDA5C -> $0020                SYN5            EQU     $20
00DA5C 0FDA5C -> $0010                SYN4            EQU     $10
00DA5C 0FDA5C -> $0008                SYN3            EQU     $08
00DA5C 0FDA5C -> $0004                SYN2            EQU     $04
00DA5C 0FDA5C -> $0002                SYN1            EQU     $02
00DA5C 0FDA5C -> $0001                SYN0            EQU     $01
00DA5C 0FDA5C -> $0035                REFDV           EQU     $0035
00DA5C 0FDA5C -> $0008                REFDV3          EQU     $08
00DA5C 0FDA5C -> $0004                REFDV2          EQU     $04
00DA5C 0FDA5C -> $0002                REFDV1          EQU     $02
00DA5C 0FDA5C -> $0001                REFDV0          EQU     $01
00DA5C 0FDA5C -> $0036                CTFLG           EQU     $0036
00DA5C 0FDA5C -> $0080                TOUT7           EQU     $80
00DA5C 0FDA5C -> $0040                TOUT6           EQU     $40
00DA5C 0FDA5C -> $0020                TOUT5           EQU     $20
00DA5C 0FDA5C -> $0010                TOUT4           EQU     $10
00DA5C 0FDA5C -> $0008                TOUT3           EQU     $08
00DA5C 0FDA5C -> $0004                TOUT2           EQU     $04
00DA5C 0FDA5C -> $0002                TOUT1           EQU     $02
00DA5C 0FDA5C -> $0001                TOUT0           EQU     $01
00DA5C 0FDA5C -> $0037                CRGFLG          EQU     $0037
00DA5C 0FDA5C -> $0080                RTIF            EQU     $80
00DA5C 0FDA5C -> $0040                PORF            EQU     $40
00DA5C 0FDA5C -> $0020                LVRF            EQU     $20
00DA5C 0FDA5C -> $0010                LOCKIF          EQU     $10
00DA5C 0FDA5C -> $0008                LOCK            EQU     $08
00DA5C 0FDA5C -> $0004                TRACK           EQU     $04
00DA5C 0FDA5C -> $0002                SCMIF           EQU     $02
00DA5C 0FDA5C -> $0001                SCM             EQU     $01
00DA5C 0FDA5C -> $0038                CRGINT          EQU     $0038
00DA5C 0FDA5C -> $0080                RTIE            EQU     $80
00DA5C 0FDA5C -> $0010                LOCKIE          EQU     $10
00DA5C 0FDA5C -> $0002                SCMIE           EQU     $02
00DA5C 0FDA5C -> $0039                CLKSEL          EQU     $0039
00DA5C 0FDA5C -> $0080                PLLSEL          EQU     $80
00DA5C 0FDA5C -> $0040                PSTP            EQU     $40
00DA5C 0FDA5C -> $0020                SYSWAI          EQU     $20
00DA5C 0FDA5C -> $0010                ROAWAI          EQU     $10
00DA5C 0FDA5C -> $0008                PLLWAI          EQU     $08
00DA5C 0FDA5C -> $0004                CWAI            EQU     $04
00DA5C 0FDA5C -> $0002                RTIWAI          EQU     $02
00DA5C 0FDA5C -> $0001                COPWAI          EQU     $01
00DA5C 0FDA5C -> $003A                PLLCTL          EQU     $003A
00DA5C 0FDA5C -> $0080                CME             EQU     $80
00DA5C 0FDA5C -> $0040                PLLON           EQU     $40
00DA5C 0FDA5C -> $0020                AUTO            EQU     $20
00DA5C 0FDA5C -> $0010                ACQ             EQU     $10
00DA5C 0FDA5C -> $0004                PRE             EQU     $04
00DA5C 0FDA5C -> $0002                PCE             EQU     $02
00DA5C 0FDA5C -> $0001                SCME            EQU     $01
00DA5C 0FDA5C -> $003B                RTICTL          EQU     $003B
00DA5C 0FDA5C -> $0040                RTR6            EQU     $40
00DA5C 0FDA5C -> $0020                RTR5            EQU     $20
00DA5C 0FDA5C -> $0010                RTR4            EQU     $10
00DA5C 0FDA5C -> $0008                RTR3            EQU     $08
00DA5C 0FDA5C -> $0004                RTR2            EQU     $04
00DA5C 0FDA5C -> $0002                RTR1            EQU     $02
00DA5C 0FDA5C -> $0001                RTR0            EQU     $01
00DA5C 0FDA5C -> $003C                COPCTL          EQU     $003C
00DA5C 0FDA5C -> $0080                WCOP            EQU     $80
00DA5C 0FDA5C -> $0040                RSBCK           EQU     $40
00DA5C 0FDA5C -> $0004                CR2             EQU     $04
00DA5C 0FDA5C -> $0002                CR1             EQU     $02
00DA5C 0FDA5C -> $0001                CR0             EQU     $01
00DA5C 0FDA5C -> $003D                FORBYP          EQU     $003D
00DA5C 0FDA5C -> $0080                RTIBYP          EQU     $80
00DA5C 0FDA5C -> $0040                COPBYP          EQU     $40
00DA5C 0FDA5C -> $0010                PLLBYP          EQU     $10
00DA5C 0FDA5C -> $0002                FCM             EQU     $02
00DA5C 0FDA5C -> $003E                CTCTL           EQU     $003E
00DA5C 0FDA5C -> $003F                ARMCOP          EQU     $003F
00DA5C 0FDA5C -> $0040                TIOS            EQU     $0040
00DA5C 0FDA5C -> $0040                ECT_TIOS        EQU     $0040
00DA5C 0FDA5C -> $0080                IOS7            EQU     $80
00DA5C 0FDA5C -> $0040                IOS6            EQU     $40
00DA5C 0FDA5C -> $0020                IOS5            EQU     $20
00DA5C 0FDA5C -> $0010                IOS4            EQU     $10
00DA5C 0FDA5C -> $0008                IOS3            EQU     $08
00DA5C 0FDA5C -> $0004                IOS2            EQU     $04
00DA5C 0FDA5C -> $0002                IOS1            EQU     $02
00DA5C 0FDA5C -> $0001                IOS0            EQU     $01
00DA5C 0FDA5C -> $0041                TCFORC          EQU     $0041
00DA5C 0FDA5C -> $0041                ECT_TCFORC      EQU     $0041
00DA5C 0FDA5C -> $0080                FOC7            EQU     $80
00DA5C 0FDA5C -> $0040                FOC6            EQU     $40
00DA5C 0FDA5C -> $0020                FOC5            EQU     $20
00DA5C 0FDA5C -> $0010                FOC4            EQU     $10
00DA5C 0FDA5C -> $0008                FOC3            EQU     $08
00DA5C 0FDA5C -> $0004                FOC2            EQU     $04
00DA5C 0FDA5C -> $0002                FOC1            EQU     $02
00DA5C 0FDA5C -> $0001                FOC0            EQU     $01
00DA5C 0FDA5C -> $0042                TOC7M           EQU     $0042
00DA5C 0FDA5C -> $0042                ECT_TOC7M       EQU     $0042
00DA5C 0FDA5C -> $0080                OC7M7           EQU     $80
00DA5C 0FDA5C -> $0040                OC7M6           EQU     $40
00DA5C 0FDA5C -> $0020                OC7M5           EQU     $20
00DA5C 0FDA5C -> $0010                OC7M4           EQU     $10
00DA5C 0FDA5C -> $0008                OC7M3           EQU     $08
00DA5C 0FDA5C -> $0004                OC7M2           EQU     $04
00DA5C 0FDA5C -> $0002                OC7M1           EQU     $02
00DA5C 0FDA5C -> $0001                OC7M0           EQU     $01
00DA5C 0FDA5C -> $0043                TOC7D           EQU     $0043
00DA5C 0FDA5C -> $0043                ECT_TOC7D       EQU     $0043
00DA5C 0FDA5C -> $0080                OC7D7           EQU     $80
00DA5C 0FDA5C -> $0040                OC7D6           EQU     $40
00DA5C 0FDA5C -> $0020                OC7D5           EQU     $20
00DA5C 0FDA5C -> $0010                OC7D4           EQU     $10
00DA5C 0FDA5C -> $0008                OC7D3           EQU     $08
00DA5C 0FDA5C -> $0004                OC7D2           EQU     $04
00DA5C 0FDA5C -> $0002                OC7D1           EQU     $02
00DA5C 0FDA5C -> $0001                OC7D0           EQU     $01
00DA5C 0FDA5C -> $0044                TCNT            EQU     $0044
00DA5C 0FDA5C -> $0044                ECT_TCNT        EQU     $0044
00DA5C 0FDA5C -> $0046                TSCR1           EQU     $0046
00DA5C 0FDA5C -> $0046                ECT_TSCR1       EQU     $0046
00DA5C 0FDA5C -> $0080                TEN             EQU     $80
00DA5C 0FDA5C -> $0040                TSWAI           EQU     $40
00DA5C 0FDA5C -> $0020                TSFRZ           EQU     $20
00DA5C 0FDA5C -> $0010                TFFCA           EQU     $10
00DA5C 0FDA5C -> $0047                TTOV            EQU     $0047
00DA5C 0FDA5C -> $0047                ECT_TTOV        EQU     $0047
00DA5C 0FDA5C -> $0080                TOV7            EQU     $80
00DA5C 0FDA5C -> $0040                TOV6            EQU     $40
00DA5C 0FDA5C -> $0020                TOV5            EQU     $20
00DA5C 0FDA5C -> $0010                TOV4            EQU     $10
00DA5C 0FDA5C -> $0008                TOV3            EQU     $08
00DA5C 0FDA5C -> $0004                TOV2            EQU     $04
00DA5C 0FDA5C -> $0002                TOV1            EQU     $02
00DA5C 0FDA5C -> $0001                TOV0            EQU     $01
00DA5C 0FDA5C -> $0048                TCTL1           EQU     $0048
00DA5C 0FDA5C -> $0048                ECT_TCTL1       EQU     $0048
00DA5C 0FDA5C -> $0080                OM7             EQU     $80
00DA5C 0FDA5C -> $0040                OL7             EQU     $40
00DA5C 0FDA5C -> $0020                OM6             EQU     $20
00DA5C 0FDA5C -> $0010                OL6             EQU     $10
00DA5C 0FDA5C -> $0008                OM5             EQU     $08
00DA5C 0FDA5C -> $0004                OL5             EQU     $04
00DA5C 0FDA5C -> $0002                OM4             EQU     $02
00DA5C 0FDA5C -> $0001                OL4             EQU     $01
00DA5C 0FDA5C -> $0049                TCTL2           EQU     $0049
00DA5C 0FDA5C -> $0049                ECT_TCTL2       EQU     $0049
00DA5C 0FDA5C -> $0080                OM3             EQU     $80
00DA5C 0FDA5C -> $0040                OL3             EQU     $40
00DA5C 0FDA5C -> $0020                OM2             EQU     $20
00DA5C 0FDA5C -> $0010                OL2             EQU     $10
00DA5C 0FDA5C -> $0008                OM1             EQU     $08
00DA5C 0FDA5C -> $0004                OL1             EQU     $04
00DA5C 0FDA5C -> $0002                OM0             EQU     $02
00DA5C 0FDA5C -> $0001                OL0             EQU     $01
00DA5C 0FDA5C -> $004A                TCTL3           EQU     $004A
00DA5C 0FDA5C -> $004A                ECT_TCTL3       EQU     $004A
00DA5C 0FDA5C -> $0080                EDG7B           EQU     $80
00DA5C 0FDA5C -> $0040                EDG7A           EQU     $40
00DA5C 0FDA5C -> $0020                EDG6B           EQU     $20
00DA5C 0FDA5C -> $0010                EDG6A           EQU     $10
00DA5C 0FDA5C -> $0008                EDG5B           EQU     $08
00DA5C 0FDA5C -> $0004                EDG5A           EQU     $04
00DA5C 0FDA5C -> $0002                EDG4B           EQU     $02
00DA5C 0FDA5C -> $0001                EDG4A           EQU     $01
00DA5C 0FDA5C -> $004B                TCTL4           EQU     $004B
00DA5C 0FDA5C -> $004B                ECT_TCTL4       EQU     $004B
00DA5C 0FDA5C -> $0080                EDG3B           EQU     $80
00DA5C 0FDA5C -> $0040                EDG3A           EQU     $40
00DA5C 0FDA5C -> $0020                EDG2B           EQU     $20
00DA5C 0FDA5C -> $0010                EDG2A           EQU     $10
00DA5C 0FDA5C -> $0008                EDG1B           EQU     $08
00DA5C 0FDA5C -> $0004                EDG1A           EQU     $04
00DA5C 0FDA5C -> $0002                EDG0B           EQU     $02
00DA5C 0FDA5C -> $0001                EDG0A           EQU     $01
00DA5C 0FDA5C -> $004C                TIE             EQU     $004C
00DA5C 0FDA5C -> $004C                ECT_TIE         EQU     $004C
00DA5C 0FDA5C -> $0080                C7I             EQU     $80
00DA5C 0FDA5C -> $0040                C6I             EQU     $40
00DA5C 0FDA5C -> $0020                C5I             EQU     $20
00DA5C 0FDA5C -> $0010                C4I             EQU     $10
00DA5C 0FDA5C -> $0008                C3I             EQU     $08
00DA5C 0FDA5C -> $0004                C2I             EQU     $04
00DA5C 0FDA5C -> $0002                C1I             EQU     $02
00DA5C 0FDA5C -> $0001                C0I             EQU     $01
00DA5C 0FDA5C -> $004D                TSCR2           EQU     $004D
00DA5C 0FDA5C -> $004D                ECT_TSCR2       EQU     $004D
00DA5C 0FDA5C -> $0080                TOI             EQU     $80
00DA5C 0FDA5C -> $0008                TCRE            EQU     $08
00DA5C 0FDA5C -> $0004                PR2             EQU     $04
00DA5C 0FDA5C -> $0002                PR1             EQU     $02
00DA5C 0FDA5C -> $0001                PR0             EQU     $01
00DA5C 0FDA5C -> $004E                TFLG1           EQU     $004E
00DA5C 0FDA5C -> $004E                ECT_TFLG1       EQU     $004E
00DA5C 0FDA5C -> $0080                C7F             EQU     $80
00DA5C 0FDA5C -> $0040                C6F             EQU     $40
00DA5C 0FDA5C -> $0020                C5F             EQU     $20
00DA5C 0FDA5C -> $0010                C4F             EQU     $10
00DA5C 0FDA5C -> $0008                C3F             EQU     $08
00DA5C 0FDA5C -> $0004                C2F             EQU     $04
00DA5C 0FDA5C -> $0002                C1F             EQU     $02
00DA5C 0FDA5C -> $0001                C0F             EQU     $01
00DA5C 0FDA5C -> $004F                TFLG2           EQU     $004F
00DA5C 0FDA5C -> $004F                ECT_TFLG2       EQU     $004F
00DA5C 0FDA5C -> $0080                TOF             EQU     $80
00DA5C 0FDA5C -> $0050                TC0             EQU     $0050
00DA5C 0FDA5C -> $0050                ECT_TC0         EQU     $0050
00DA5C 0FDA5C -> $0052                TC1             EQU     $0052
00DA5C 0FDA5C -> $0052                ECT_TC1         EQU     $0052
00DA5C 0FDA5C -> $0054                TC2             EQU     $0054
00DA5C 0FDA5C -> $0056                ECT_TC3         EQU     $0056
00DA5C 0FDA5C -> $0056                TC3             EQU     $0056
00DA5C 0FDA5C -> $0058                ECT_TC4         EQU     $0058
00DA5C 0FDA5C -> $0058                TC4             EQU     $0058
00DA5C 0FDA5C -> $005A                ECT_TC5         EQU     $005A
00DA5C 0FDA5C -> $005A                TC5             EQU     $005A
00DA5C 0FDA5C -> $005C                ECT_TC6         EQU     $005C
00DA5C 0FDA5C -> $005E                TC7             EQU     $005E
00DA5C 0FDA5C -> $005E                ECT_TC7         EQU     $005E
00DA5C 0FDA5C -> $0060                PACTL           EQU     $0060
00DA5C 0FDA5C -> $0060                ECT_PACTL       EQU     $0060
00DA5C 0FDA5C -> $0040                PAEN            EQU     $40
00DA5C 0FDA5C -> $0020                PAMOD           EQU     $20
00DA5C 0FDA5C -> $0010                PEDGE           EQU     $10
00DA5C 0FDA5C -> $0008                CLK1            EQU     $08
00DA5C 0FDA5C -> $0004                CLK0            EQU     $04
00DA5C 0FDA5C -> $0002                PAOVI           EQU     $02
00DA5C 0FDA5C -> $0001                PAI             EQU     $01
00DA5C 0FDA5C -> $0061                PAFLG           EQU     $0061
00DA5C 0FDA5C -> $0061                ECT_PAFLG       EQU     $0061
00DA5C 0FDA5C -> $0002                PAOVF           EQU     $02
00DA5C 0FDA5C -> $0001                PAIF            EQU     $01
00DA5C 0FDA5C -> $0062                PACNT           EQU     $0062
00DA5C 0FDA5C -> $0062                ECT_PACNT       EQU     $0062
00DA5C 0FDA5C -> $0062                PACN3           EQU     $0062
00DA5C 0FDA5C -> $0062                ECT_PACN3       EQU     $0062
00DA5C 0FDA5C -> $0063                PACN2           EQU     $0063
00DA5C 0FDA5C -> $0063                ECT_PACN2       EQU     $0063
00DA5C 0FDA5C -> $0064                PACN1           EQU     $0064
00DA5C 0FDA5C -> $0064                ECT_PACN1       EQU     $0064
00DA5C 0FDA5C -> $0065                PACN0           EQU     $0065
00DA5C 0FDA5C -> $0065                ECT_PACN0       EQU     $0065
00DA5C 0FDA5C -> $0066                MCCTL           EQU     $0066
00DA5C 0FDA5C -> $0066                ECT_MCCTL       EQU     $0066
00DA5C 0FDA5C -> $0080                MCZI            EQU     $80
00DA5C 0FDA5C -> $0040                MODMC           EQU     $40
00DA5C 0FDA5C -> $0020                RDMCL           EQU     $20
00DA5C 0FDA5C -> $0010                ICLAT           EQU     $10
00DA5C 0FDA5C -> $0008                FLMC            EQU     $08
00DA5C 0FDA5C -> $0004                MCEN            EQU     $04
00DA5C 0FDA5C -> $0002                MCPR1           EQU     $02
00DA5C 0FDA5C -> $0001                MCPR0           EQU     $01
00DA5C 0FDA5C -> $0067                MCFLG           EQU     $0067
00DA5C 0FDA5C -> $0067                ECT_MCFLG       EQU     $0067
00DA5C 0FDA5C -> $0080                MCZF            EQU     $80
00DA5C 0FDA5C -> $0008                POLF3           EQU     $08
00DA5C 0FDA5C -> $0004                POLF2           EQU     $04
00DA5C 0FDA5C -> $0002                POLF1           EQU     $02
00DA5C 0FDA5C -> $0001                POLF0           EQU     $01
00DA5C 0FDA5C -> $0068                ICPAR           EQU     $0068
00DA5C 0FDA5C -> $0068                ECT_ICPAR       EQU     $0068
00DA5C 0FDA5C -> $0008                PA3EN           EQU     $08
00DA5C 0FDA5C -> $0004                PA2EN           EQU     $04
00DA5C 0FDA5C -> $0002                PA1EN           EQU     $02
00DA5C 0FDA5C -> $0001                PA0EN           EQU     $01
00DA5C 0FDA5C -> $0069                DLYCT           EQU     $0069
00DA5C 0FDA5C -> $0069                ECT_DLYCT       EQU     $0069
00DA5C 0FDA5C -> $0080                DLY7            EQU     $80
00DA5C 0FDA5C -> $0040                DLY6            EQU     $40
00DA5C 0FDA5C -> $0020                DLY5            EQU     $20
00DA5C 0FDA5C -> $0010                DLY4            EQU     $10
00DA5C 0FDA5C -> $0008                DLY3            EQU     $08
00DA5C 0FDA5C -> $0004                DLY2            EQU     $04
00DA5C 0FDA5C -> $0002                DLY1            EQU     $02
00DA5C 0FDA5C -> $0001                DLY0            EQU     $01
00DA5C 0FDA5C -> $006A                ICOVW           EQU     $006A
00DA5C 0FDA5C -> $006A                ECT_ICOVW       EQU     $006A
00DA5C 0FDA5C -> $0080                NOVW7           EQU     $80
00DA5C 0FDA5C -> $0040                NOVW6           EQU     $40
00DA5C 0FDA5C -> $0020                NOVW5           EQU     $20
00DA5C 0FDA5C -> $0010                NOVW4           EQU     $10
00DA5C 0FDA5C -> $0008                NOVW3           EQU     $08
00DA5C 0FDA5C -> $0004                NOVW2           EQU     $04
00DA5C 0FDA5C -> $0002                NOVW1           EQU     $02
00DA5C 0FDA5C -> $0001                NOVW0           EQU     $01
00DA5C 0FDA5C -> $006B                ICSYS           EQU     $006B
00DA5C 0FDA5C -> $006B                ECT_ICSYS       EQU     $006B
00DA5C 0FDA5C -> $0080                SH37            EQU     $80
00DA5C 0FDA5C -> $0040                SH26            EQU     $40
00DA5C 0FDA5C -> $0020                SH15            EQU     $20
00DA5C 0FDA5C -> $0010                SH04            EQU     $10
00DA5C 0FDA5C -> $0008                TFMOD           EQU     $08
00DA5C 0FDA5C -> $0004                PACMX           EQU     $04
00DA5C 0FDA5C -> $0002                BUFEN           EQU     $02
00DA5C 0FDA5C -> $0001                LATQ            EQU     $01
                                      ;$006C to $006F reserved
00DA5C 0FDA5C -> $0070                PBCTL           EQU     $0070
00DA5C 0FDA5C -> $0070                ECT_PBCTL       EQU     $0070
00DA5C 0FDA5C -> $0040                PBEN            EQU     $40
00DA5C 0FDA5C -> $0002                PBOVI           EQU     $02
00DA5C 0FDA5C -> $0071                PBFLG           EQU     $00071
00DA5C 0FDA5C -> $0071                ECT_PBFLG       EQU     $00071
00DA5C 0FDA5C -> $0002                PBOVF           EQU     $02
00DA5C 0FDA5C -> $0072                PA32H           EQU     $0072
00DA5C 0FDA5C -> $0072                ECT_PA32H       EQU     $0072
00DA5C 0FDA5C -> $0072                PA3H            EQU     $0072
00DA5C 0FDA5C -> $0073                PA2H            EQU     $0073
00DA5C 0FDA5C -> $0074                PA10H           EQU     $0074
00DA5C 0FDA5C -> $0074                ECT_PA10H       EQU     $0074
00DA5C 0FDA5C -> $0074                PA1H            EQU     $0074
00DA5C 0FDA5C -> $0075                PA0H            EQU     $0075
00DA5C 0FDA5C -> $0076                MCCNT           EQU     $0076
00DA5C 0FDA5C -> $0076                ECT_MCCNT       EQU     $0076
00DA5C 0FDA5C -> $0078                TC0H            EQU     $0078
00DA5C 0FDA5C -> $0078                ECT_TC0H        EQU     $0078
00DA5C 0FDA5C -> $007A                TC1H            EQU     $007A
00DA5C 0FDA5C -> $007A                ECT_TC1H        EQU     $007A
00DA5C 0FDA5C -> $007C                TC2H            EQU     $007C
00DA5C 0FDA5C -> $007C                ECT_TC2H        EQU     $007C
00DA5C 0FDA5C -> $007E                TC3H            EQU     $007E
00DA5C 0FDA5C -> $007E                ECT_TC3H        EQU     $007E
00DA5C 0FDA5C -> $0080                ATDCTL0         EQU     $0080
00DA5C 0FDA5C -> $0080                ATD0CTL0        EQU     $0080
00DA5C 0FDA5C -> $0081                ATDCTL1         EQU     $0081
00DA5C 0FDA5C -> $0081                ATD0CTL1        EQU     $0081
00DA5C 0FDA5C -> $0082                ATDCTL2         EQU     $0082
00DA5C 0FDA5C -> $0082                ATD0CTL2        EQU     $0082
00DA5C 0FDA5C -> $0080                ADPU            EQU     $80
00DA5C 0FDA5C -> $0040                AFFC            EQU     $40
00DA5C 0FDA5C -> $0020                AWAI            EQU     $20
00DA5C 0FDA5C -> $0010                ETRIGLE         EQU     $10
00DA5C 0FDA5C -> $0008                ETRIGP          EQU     $08
00DA5C 0FDA5C -> $0004                ETRIG           EQU     $04
00DA5C 0FDA5C -> $0002                ASCIE           EQU     $02
00DA5C 0FDA5C -> $0001                ASCIF           EQU     $01
00DA5C 0FDA5C -> $0083                ATDCTL3         EQU     $0083
00DA5C 0FDA5C -> $0083                ATD0CTL3        EQU     $0083
00DA5C 0FDA5C -> $0040                S8C             EQU     $40
00DA5C 0FDA5C -> $0020                S4C             EQU     $20
00DA5C 0FDA5C -> $0010                S2C             EQU     $10
00DA5C 0FDA5C -> $0008                S1C             EQU     $08
00DA5C 0FDA5C -> $0004                FIFO            EQU     $04
00DA5C 0FDA5C -> $0002                FRZ1            EQU     $02
00DA5C 0FDA5C -> $0001                FRZ0            EQU     $01
00DA5C 0FDA5C -> $0084                ATDCTL4         EQU     $0084
00DA5C 0FDA5C -> $0084                ATD0CTL4        EQU     $0084
00DA5C 0FDA5C -> $0080                SRES8           EQU     $80
00DA5C 0FDA5C -> $0040                SMP1            EQU     $40
00DA5C 0FDA5C -> $0020                SMP0            EQU     $20
00DA5C 0FDA5C -> $0010                PRS4            EQU     $10
00DA5C 0FDA5C -> $0008                PRS3            EQU     $08
00DA5C 0FDA5C -> $0004                PRS2            EQU     $04
00DA5C 0FDA5C -> $0002                PRS1            EQU     $02
00DA5C 0FDA5C -> $0001                PRS0            EQU     $01
00DA5C 0FDA5C -> $0085                ATDCTL5         EQU     $0085
00DA5C 0FDA5C -> $0085                ATD0CTL5        EQU     $0085
00DA5C 0FDA5C -> $0080                DJM             EQU     $80
00DA5C 0FDA5C -> $0040                DSGN            EQU     $40
00DA5C 0FDA5C -> $0020                SCAN            EQU     $20
00DA5C 0FDA5C -> $0010                MULT            EQU     $10
00DA5C 0FDA5C -> $0004                CC              EQU     $04
00DA5C 0FDA5C -> $0002                CB              EQU     $02
00DA5C 0FDA5C -> $0001                CA              EQU     $01
00DA5C 0FDA5C -> $0086                ATDSTAT0        EQU     $0086
00DA5C 0FDA5C -> $0086                ATD0STAT0       EQU     $0086
00DA5C 0FDA5C -> $0080                SCF             EQU     $80
00DA5C 0FDA5C -> $0020                ETORF           EQU     $20
00DA5C 0FDA5C -> $0010                FIFOR           EQU     $10
00DA5C 0FDA5C -> $0004                CC2             EQU     $04
00DA5C 0FDA5C -> $0002                CC1             EQU     $02
00DA5C 0FDA5C -> $0001                CC0             EQU     $01
                                      ;$0087 reserved
00DA5C 0FDA5C -> $0088                ATDTEST0        EQU     $0088
00DA5C 0FDA5C -> $0088                ATD0TEST0       EQU     $0088
00DA5C 0FDA5C -> $0080                SAR9            EQU     $80
00DA5C 0FDA5C -> $0040                SAR8            EQU     $40
00DA5C 0FDA5C -> $0020                SAR7            EQU     $20
00DA5C 0FDA5C -> $0010                SAR6            EQU     $10
00DA5C 0FDA5C -> $0008                SAR5            EQU     $08
00DA5C 0FDA5C -> $0004                SAR4            EQU     $04
00DA5C 0FDA5C -> $0002                SAR3            EQU     $02
00DA5C 0FDA5C -> $0001                SAR2            EQU     $01
00DA5C 0FDA5C -> $0089                ATDTEST1        EQU     $0089
00DA5C 0FDA5C -> $0089                ATD0TEST1       EQU     $0089
00DA5C 0FDA5C -> $0080                SAR1            EQU     $80
00DA5C 0FDA5C -> $0040                SAR0            EQU     $40
00DA5C 0FDA5C -> $0004                RST             EQU     $04
00DA5C 0FDA5C -> $0001                SC              EQU     $01
                                      ;$008a reserved
00DA5C 0FDA5C -> $008B                ATDSTAT1        EQU     $008B
00DA5C 0FDA5C -> $008B                ATD0STAT1       EQU     $008B
00DA5C 0FDA5C -> $0080                CCF7            EQU     $80
00DA5C 0FDA5C -> $0040                CCF6            EQU     $40
00DA5C 0FDA5C -> $0020                CCF5            EQU     $20
00DA5C 0FDA5C -> $0010                CCF4            EQU     $10
00DA5C 0FDA5C -> $0008                CCF3            EQU     $08
00DA5C 0FDA5C -> $0004                CCF2            EQU     $04
00DA5C 0FDA5C -> $0002                CCF1            EQU     $02
00DA5C 0FDA5C -> $0001                CCF0            EQU     $01
                                      ;$008c reserved
00DA5C 0FDA5C -> $008D                ATDDIEN         EQU     $008D
00DA5C 0FDA5C -> $008D                ATD0DIEN        EQU     $008D
                                      ;$008E reserved
00DA5C 0FDA5C -> $008F                PORTAD0         EQU     $008F
00DA5C 0FDA5C -> $0080                PTAD07          EQU     $80
00DA5C 0FDA5C -> $0040                PTAD06          EQU     $40
00DA5C 0FDA5C -> $0020                PTAD05          EQU     $20
00DA5C 0FDA5C -> $0010                PTAD04          EQU     $10
00DA5C 0FDA5C -> $0008                PTAD03          EQU     $08
00DA5C 0FDA5C -> $0004                PTAD02          EQU     $04
00DA5C 0FDA5C -> $0002                PTAD01          EQU     $02
00DA5C 0FDA5C -> $0001                PTAD00          EQU     $01
00DA5C 0FDA5C -> $0090                ATDDR0H         EQU     $0090
00DA5C 0FDA5C -> $0090                ATD0DR0H        EQU     $0090
00DA5C 0FDA5C -> $0091                ATDDR0L         EQU     $0091
00DA5C 0FDA5C -> $0091                ATD0DR0L        EQU     $0091
00DA5C 0FDA5C -> $0092                ATDDR1H         EQU     $0092
00DA5C 0FDA5C -> $0092                ATD0DR1H        EQU     $0092
00DA5C 0FDA5C -> $0093                ATDDR1L         EQU     $0093
00DA5C 0FDA5C -> $0093                ATD0DR1L        EQU     $0093
00DA5C 0FDA5C -> $0094                ATDDR2H         EQU     $0094
00DA5C 0FDA5C -> $0094                ATD0DR2H        EQU     $0094
00DA5C 0FDA5C -> $0095                ATDDR2L         EQU     $0095
00DA5C 0FDA5C -> $0095                ATD0DR2L        EQU     $0095
00DA5C 0FDA5C -> $0096                ATDDR3H         EQU     $0096
00DA5C 0FDA5C -> $0096                ATD0DR3H        EQU     $0096
00DA5C 0FDA5C -> $0097                ATDDR3L         EQU     $0097
00DA5C 0FDA5C -> $0097                ATD0DR3L        EQU     $0097
00DA5C 0FDA5C -> $0098                ATDDR4H         EQU     $0098
00DA5C 0FDA5C -> $0098                ATD0DR4H        EQU     $0098
00DA5C 0FDA5C -> $0099                ATDDR4L         EQU     $0099
00DA5C 0FDA5C -> $0099                ATD0DR4L        EQU     $0099
00DA5C 0FDA5C -> $009A                ATDDR5H         EQU     $009A
00DA5C 0FDA5C -> $009A                ATD0DR5H        EQU     $009A
00DA5C 0FDA5C -> $009B                ATDDR5L         EQU     $009B
00DA5C 0FDA5C -> $009B                ATD0DR5L        EQU     $009B
00DA5C 0FDA5C -> $009C                ATDDR6H         EQU     $009C
00DA5C 0FDA5C -> $009C                ATD0DR6H        EQU     $009C
00DA5C 0FDA5C -> $009D                ATDDR6L         EQU     $009D
00DA5C 0FDA5C -> $009D                ATD0DR6L        EQU     $009D
00DA5C 0FDA5C -> $009E                ATDDR7H         EQU     $009E
00DA5C 0FDA5C -> $009E                ATD0DR7H        EQU     $009E
00DA5C 0FDA5C -> $009F                ATDDR7L         EQU     $009F
00DA5C 0FDA5C -> $009F                ATD0DR7L        EQU     $009F
00DA5C 0FDA5C -> $00A0                PWME            EQU     $00A0
00DA5C 0FDA5C -> $0080                PWME7           EQU     $80
00DA5C 0FDA5C -> $0040                PWME6           EQU     $40
00DA5C 0FDA5C -> $0020                PWME5           EQU     $20
00DA5C 0FDA5C -> $0010                PWME4           EQU     $10
00DA5C 0FDA5C -> $0008                PWME3           EQU     $08
00DA5C 0FDA5C -> $0004                PWME2           EQU     $04
00DA5C 0FDA5C -> $0002                PWME1           EQU     $02
00DA5C 0FDA5C -> $0001                PWME0           EQU     $01
00DA5C 0FDA5C -> $00A1                PWMPOL          EQU     $00A1
00DA5C 0FDA5C -> $0080                PPOL7           EQU     $80
00DA5C 0FDA5C -> $0040                PPOL6           EQU     $40
00DA5C 0FDA5C -> $0020                PPOL5           EQU     $20
00DA5C 0FDA5C -> $0010                PPOL4           EQU     $10
00DA5C 0FDA5C -> $0008                PPOL3           EQU     $08
00DA5C 0FDA5C -> $0004                PPOL2           EQU     $04
00DA5C 0FDA5C -> $0002                PPOL1           EQU     $02
00DA5C 0FDA5C -> $0001                PPOL0           EQU     $01
00DA5C 0FDA5C -> $00A2                PWMCLK          EQU     $00A2
00DA5C 0FDA5C -> $0080                PCLK7           EQU     $80
00DA5C 0FDA5C -> $0040                PCLK6           EQU     $40
00DA5C 0FDA5C -> $0020                PCLK5           EQU     $20
00DA5C 0FDA5C -> $0010                PCLK4           EQU     $10
00DA5C 0FDA5C -> $0008                PCLK3           EQU     $08
00DA5C 0FDA5C -> $0004                PCLK2           EQU     $04
00DA5C 0FDA5C -> $0002                PCLK1           EQU     $02
00DA5C 0FDA5C -> $0001                PCLK0           EQU     $01
00DA5C 0FDA5C -> $00A3                PWMPRCLK        EQU     $00A3
00DA5C 0FDA5C -> $0040                PCKB2           EQU     $40
00DA5C 0FDA5C -> $0020                PCKB1           EQU     $20
00DA5C 0FDA5C -> $0010                PCKB0           EQU     $10
00DA5C 0FDA5C -> $0004                PCKA2           EQU     $04
00DA5C 0FDA5C -> $0002                PCKA1           EQU     $02
00DA5C 0FDA5C -> $0001                PCKA0           EQU     $01
00DA5C 0FDA5C -> $00A4                PWMCAE          EQU     $00A4
00DA5C 0FDA5C -> $0080                CAE7            EQU     $80
00DA5C 0FDA5C -> $0040                CAE6            EQU     $40
00DA5C 0FDA5C -> $0020                CAE5            EQU     $20
00DA5C 0FDA5C -> $0010                CAE4            EQU     $10
00DA5C 0FDA5C -> $0008                CAE3            EQU     $08
00DA5C 0FDA5C -> $0004                CAE2            EQU     $04
00DA5C 0FDA5C -> $0002                CAE1            EQU     $02
00DA5C 0FDA5C -> $0001                CAE0            EQU     $01
00DA5C 0FDA5C -> $00A5                PWMCTL          EQU     $00A5
00DA5C 0FDA5C -> $0080                CON67           EQU     $80
00DA5C 0FDA5C -> $0040                CON45           EQU     $40
00DA5C 0FDA5C -> $0020                CON23           EQU     $20
00DA5C 0FDA5C -> $0010                CON01           EQU     $10
00DA5C 0FDA5C -> $0008                PSWAI           EQU     $08
00DA5C 0FDA5C -> $0004                PFRZ            EQU     $04
00DA5C 0FDA5C -> $00A6                PWMTST          EQU     $00A6
00DA5C 0FDA5C -> $00A7                PWMPRSC         EQU     $00A7
00DA5C 0FDA5C -> $00A8                PWMSCLA         EQU     $00A8
00DA5C 0FDA5C -> $00A9                PWMSCLB         EQU     $00A9
00DA5C 0FDA5C -> $00AA                PWMSCNTA        EQU     $00AA
00DA5C 0FDA5C -> $00AB                PWMSCNTB        EQU     $00AB
00DA5C 0FDA5C -> $00AC                PWMCNT0         EQU     $00AC
00DA5C 0FDA5C -> $00AD                PWMCNT1         EQU     $00AD
00DA5C 0FDA5C -> $00AE                PWMCNT2         EQU     $00AE
00DA5C 0FDA5C -> $00AF                PWMCNT3         EQU     $00AF
00DA5C 0FDA5C -> $00B0                PWMCNT4         EQU     $00B0
00DA5C 0FDA5C -> $00B1                PWMCNT5         EQU     $00B1
00DA5C 0FDA5C -> $00B2                PWMCNT6         EQU     $00B2
00DA5C 0FDA5C -> $00B3                PWMCNT7         EQU     $00B3
00DA5C 0FDA5C -> $00B4                PWMPER0         EQU     $00B4
00DA5C 0FDA5C -> $00B5                PWMPER1         EQU     $00B5
00DA5C 0FDA5C -> $00B6                PWMPER2         EQU     $00B6
00DA5C 0FDA5C -> $00B7                PWMPER3         EQU     $00B7
00DA5C 0FDA5C -> $00B8                PWMPER4         EQU     $00B8
00DA5C 0FDA5C -> $00B9                PWMPER5         EQU     $00B9
00DA5C 0FDA5C -> $00BA                PWMPER6         EQU     $00BA
00DA5C 0FDA5C -> $00BB                PWMPER7         EQU     $00BB
00DA5C 0FDA5C -> $00BC                PWMDTY0         EQU     $00BC
00DA5C 0FDA5C -> $00BD                PWMDTY1         EQU     $00BD
00DA5C 0FDA5C -> $00BE                PWMDTY2         EQU     $00BE
00DA5C 0FDA5C -> $00CF                PWMDTY3         EQU     $00CF
00DA5C 0FDA5C -> $00C0                PWMDTY4         EQU     $00C0
00DA5C 0FDA5C -> $00C1                PWMDTY5         EQU     $00C1
00DA5C 0FDA5C -> $00C2                PWMDTY6         EQU     $00C2
00DA5C 0FDA5C -> $00C3                PWMDTY7         EQU     $00C3
                                      ;$00C3 to $00C7 reserved
00DA5C 0FDA5C -> $00C8                SCIBDH          EQU     $00C8
00DA5C 0FDA5C -> $00C8                SCI0BDH         EQU     $00C8
00DA5C 0FDA5C -> $0080                IREN            EQU     $80
00DA5C 0FDA5C -> $0040                TNP1            EQU     $40
00DA5C 0FDA5C -> $0020                TNP0            EQU     $20
00DA5C 0FDA5C -> $0010                SBR12           EQU     $10
00DA5C 0FDA5C -> $0008                SBR11           EQU     $08
00DA5C 0FDA5C -> $0004                SBR10           EQU     $04
00DA5C 0FDA5C -> $0002                SBR9            EQU     $02
00DA5C 0FDA5C -> $0001                SBR8            EQU     $01
00DA5C 0FDA5C -> $00C9                SCIBDL          EQU     $00C9
00DA5C 0FDA5C -> $00C9                SCI0BDL         EQU     $00C9
00DA5C 0FDA5C -> $0080                SBR7            EQU     $80
00DA5C 0FDA5C -> $0040                SBR6            EQU     $40
00DA5C 0FDA5C -> $0020                SBR5            EQU     $20
00DA5C 0FDA5C -> $0010                SBR4            EQU     $10
00DA5C 0FDA5C -> $0008                SBR3            EQU     $08
00DA5C 0FDA5C -> $0004                SBR2            EQU     $04
00DA5C 0FDA5C -> $0002                SBR1            EQU     $02
00DA5C 0FDA5C -> $0001                SBR0            EQU     $01
00DA5C 0FDA5C -> $00CA                SCICR1          EQU     $00CA
00DA5C 0FDA5C -> $00CA                SCI0CR1         EQU     $00CA
00DA5C 0FDA5C -> $0080                LOOPS           EQU     $80
00DA5C 0FDA5C -> $0040                SCISWAI         EQU     $40
00DA5C 0FDA5C -> $0020                RSRC            EQU     $20
00DA5C 0FDA5C -> $0010                M               EQU     $10
00DA5C 0FDA5C -> $0008                WAKE            EQU     $08
00DA5C 0FDA5C -> $0004                ILT             EQU     $04
00DA5C 0FDA5C -> $0002                PE              EQU     $02
00DA5C 0FDA5C -> $0001                PT              EQU     $01
00DA5C 0FDA5C -> $00CB                SCICR2          EQU     $00CB
00DA5C 0FDA5C -> $00CB                SCI0CR2         EQU     $00CB
00DA5C 0FDA5C -> $0080                TXIE            EQU     $80
00DA5C 0FDA5C -> $0040                TCIE            EQU     $40
00DA5C 0FDA5C -> $0020                RIE             EQU     $20
00DA5C 0FDA5C -> $0010                ILIE            EQU     $10
00DA5C 0FDA5C -> $0008                TE              EQU     $08
00DA5C 0FDA5C -> $0004                RE              EQU     $04
00DA5C 0FDA5C -> $0002                RWU             EQU     $02
00DA5C 0FDA5C -> $0001                SBK             EQU     $01
00DA5C 0FDA5C -> $00CC                SCISR1          EQU     $00CC
00DA5C 0FDA5C -> $00CC                SCI0SR1         EQU     $00CC
00DA5C 0FDA5C -> $0080                TDRE            EQU     $80
00DA5C 0FDA5C -> $0040                TC              EQU     $40
00DA5C 0FDA5C -> $0020                RDRFF           EQU     $20
00DA5C 0FDA5C -> $0010                IDLE            EQU     $10
00DA5C 0FDA5C -> $0008                OR              EQU     $08
00DA5C 0FDA5C -> $0004                NF              EQU     $04
00DA5C 0FDA5C -> $0002                FE              EQU     $02
00DA5C 0FDA5C -> $0001                PF              EQU     $01
00DA5C 0FDA5C -> $00CD                SCISR2          EQU     $00CD
00DA5C 0FDA5C -> $00CD                SCI0SR2         EQU     $00CD
00DA5C 0FDA5C -> $0004                BRK13           EQU     $04
00DA5C 0FDA5C -> $0002                TXDIR           EQU     $02
00DA5C 0FDA5C -> $0001                RAF             EQU     $01
00DA5C 0FDA5C -> $00CE                SCIDRH          EQU     $00CE
00DA5C 0FDA5C -> $00CE                SCI0DRH         EQU     $00CE
00DA5C 0FDA5C -> $0080                R8              EQU     $80
00DA5C 0FDA5C -> $0040                T8              EQU     $40
00DA5C 0FDA5C -> $00CF                SCIDRL          EQU     $00CF
00DA5C 0FDA5C -> $00CF                SCI0DRL         EQU     $00CF
00DA5C 0FDA5C -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
00DA5C 0FDA5C -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
00DA5C 0FDA5C -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
00DA5C 0FDA5C -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
00DA5C 0FDA5C -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
00DA5C 0FDA5C -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
00DA5C 0FDA5C -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
00DA5C 0FDA5C -> $00D7                SCI1DRL         EQU     $00D7
00DA5C 0FDA5C -> $00DA                SPIBR           EQU     $00DA
00DA5C 0FDA5C -> $00DA                SPI0BR          EQU     $00DA
00DA5C 0FDA5C -> $0040                SPPR2           EQU     $40
00DA5C 0FDA5C -> $0020                SPPR1           EQU     $20
00DA5C 0FDA5C -> $0010                SPPR0           EQU     $10
00DA5C 0FDA5C -> $0004                SPR2            EQU     $04
00DA5C 0FDA5C -> $0002                SPR1            EQU     $02
00DA5C 0FDA5C -> $0001                SPR0            EQU     $01
00DA5C 0FDA5C -> $00DB                SPISR           EQU     $00DB
00DA5C 0FDA5C -> $00DB                SPI0SR          EQU     $00DB
00DA5C 0FDA5C -> $0080                SPIF            EQU     $80
00DA5C 0FDA5C -> $0020                SPTEF           EQU     $20
00DA5C 0FDA5C -> $0010                MODF            EQU     $10
00DA5C 0FDA5C -> $00DC                SPIDRH          EQU     $00DC
00DA5C 0FDA5C -> $00DC                SPI0DRH         EQU     $00DC
00DA5C 0FDA5C -> $00DD                SPIDRL          EQU     $00DD
00DA5C 0FDA5C -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00DF reserved
00DA5C 0FDA5C -> $00E0                IBAD            EQU     $00E0
00DA5C 0FDA5C -> $00E0                I0BAD           EQU     $00E0
00DA5C 0FDA5C -> $0080                ADR7            EQU     $80
00DA5C 0FDA5C -> $0040                ADR6            EQU     $40
00DA5C 0FDA5C -> $0020                ADR5            EQU     $20
00DA5C 0FDA5C -> $0010                ADR4            EQU     $10
00DA5C 0FDA5C -> $0008                ADR3            EQU     $08
00DA5C 0FDA5C -> $0004                ADR2            EQU     $04
00DA5C 0FDA5C -> $0002                ADR1            EQU     $02
00DA5C 0FDA5C -> $00E1                IBFD            EQU     $00E1
00DA5C 0FDA5C -> $00E1                I0BFD           EQU     $00E1
00DA5C 0FDA5C -> $0080                IBC7            EQU     $80
00DA5C 0FDA5C -> $0040                IBC6            EQU     $40
00DA5C 0FDA5C -> $0020                IBC5            EQU     $20
00DA5C 0FDA5C -> $0010                IBC4            EQU     $10
00DA5C 0FDA5C -> $0008                IBC3            EQU     $08
00DA5C 0FDA5C -> $0004                IBC2            EQU     $04
00DA5C 0FDA5C -> $0002                IBC1            EQU     $02
00DA5C 0FDA5C -> $0001                IBC0            EQU     $01
00DA5C 0FDA5C -> $00E2                IBCR            EQU     $00E2
00DA5C 0FDA5C -> $00E2                I0BCR           EQU     $00E2
00DA5C 0FDA5C -> $0080                IBEN            EQU     $80
00DA5C 0FDA5C -> $0040                IBIE            EQU     $40
00DA5C 0FDA5C -> $0020                SL              EQU     $20
00DA5C 0FDA5C -> $0010                RX              EQU     $10
00DA5C 0FDA5C -> $0008                TXAK            EQU     $08
00DA5C 0FDA5C -> $0004                RSTA            EQU     $04
00DA5C 0FDA5C -> $0001                IBSWAI          EQU     $01
00DA5C 0FDA5C -> $00E3                IBSR            EQU     $00E3
00DA5C 0FDA5C -> $00E3                I0BSR           EQU     $00E3
00DA5C 0FDA5C -> $0080                TCF             EQU     $80
00DA5C 0FDA5C -> $0040                IAAS            EQU     $40
00DA5C 0FDA5C -> $0020                IBB             EQU     $20
00DA5C 0FDA5C -> $0001                RXAK            EQU     $01
00DA5C 0FDA5C -> $0004                SRW             EQU     $04
00DA5C 0FDA5C -> $0002                IBIF            EQU     $02
00DA5C 0FDA5C -> $00E4                IBDR            EQU     $00E4
00DA5C 0FDA5C -> $00E4                I0BDR           EQU     $00E4
00DA5C 0FDA5C -> $00E5                IBCR2           EQU     $00E5
00DA5C 0FDA5C -> $00E5                I0BCR2          EQU     $00E5
00DA5C 0FDA5C -> $0080                GCEN            EQU     $80
00DA5C 0FDA5C -> $0040                ADTYPE          EQU     $40
00DA5C 0FDA5C -> $0004                ADR2            EQU     $04
00DA5C 0FDA5C -> $0002                ADR1            EQU     $02
00DA5C 0FDA5C -> $0001                ADR0            EQU     $01
                                      ;$00E6 to $00E7 reserved
00DA5C 0FDA5C -> $00E8                DLCBCR1         EQU     $00E8
00DA5C 0FDA5C -> $0080                IMSG            EQU     $80
00DA5C 0FDA5C -> $0040                CLKS            EQU     $40
00DA5C 0FDA5C -> $0002                IE              EQU     $02
00DA5C 0FDA5C -> $0001                WCM             EQU     $01
00DA5C 0FDA5C -> $00E9                DLCBSVR         EQU     $00E9
00DA5C 0FDA5C -> $0020                I3              EQU     $20
00DA5C 0FDA5C -> $0010                I2              EQU     $10
00DA5C 0FDA5C -> $0008                I1              EQU     $08
00DA5C 0FDA5C -> $0004                I0              EQU     $04
00DA5C 0FDA5C -> $00EA                DLCBCR2         EQU     $00EA
00DA5C 0FDA5C -> $0080                SMRST           EQU     $80
00DA5C 0FDA5C -> $0040                DLOOP           EQU     $40
00DA5C 0FDA5C -> $0020                RX4XE           EQU     $20
00DA5C 0FDA5C -> $0010                NBFS            EQU     $10
00DA5C 0FDA5C -> $0008                TEOD            EQU     $08
00DA5C 0FDA5C -> $0004                TSIFR           EQU     $04
00DA5C 0FDA5C -> $0002                TMIFR1          EQU     $02
00DA5C 0FDA5C -> $0001                TMIFR0          EQU     $01
00DA5C 0FDA5C -> $00EB                DLCBDR          EQU     $00EB
00DA5C 0FDA5C -> $00EC                DLCBARD         EQU     $00EC
00DA5C 0FDA5C -> $0040                RXPOL           EQU     $40
00DA5C 0FDA5C -> $0008                BO3             EQU     $08
00DA5C 0FDA5C -> $0004                BO2             EQU     $04
00DA5C 0FDA5C -> $0002                BO1             EQU     $02
00DA5C 0FDA5C -> $0001                BO0             EQU     $01
00DA5C 0FDA5C -> $00ED                DLCBRSR         EQU     $00ED
00DA5C 0FDA5C -> $0020                R5              EQU     $20
00DA5C 0FDA5C -> $0010                R4              EQU     $10
00DA5C 0FDA5C -> $0008                R3              EQU     $08
00DA5C 0FDA5C -> $0004                R2              EQU     $04
00DA5C 0FDA5C -> $0002                R1              EQU     $02
00DA5C 0FDA5C -> $0001                R0              EQU     $01
00DA5C 0FDA5C -> $00EE                DLCSCR          EQU     $00EE
00DA5C 0FDA5C -> $0010                BDLCE           EQU     $10
00DA5C 0FDA5C -> $00EF                DLCSTAT         EQU     $00EF
00DA5C 0FDA5C -> $0001                BDLCIDLE        EQU     $01
00DA5C 0FDA5C -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
00DA5C 0FDA5C -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
00DA5C 0FDA5C -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
00DA5C 0FDA5C -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
00DA5C 0FDA5C -> $00F4                SPI1DRH         EQU     $00F4
00DA5C 0FDA5C -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
00DA5C 0FDA5C -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
00DA5C 0FDA5C -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
00DA5C 0FDA5C -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
00DA5C 0FDA5C -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
00DA5C 0FDA5C -> $00FC                SPI2DRH         EQU     $00FC
00DA5C 0FDA5C -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
00DA5C 0FDA5C -> $0100                FCLKDIV         EQU     $0100
00DA5C 0FDA5C -> $0080                FDIVLD          EQU     $80
00DA5C 0FDA5C -> $0040                FDIV8           EQU     $40
00DA5C 0FDA5C -> $0020                FDIV5           EQU     $20
00DA5C 0FDA5C -> $0010                FDIV4           EQU     $10
00DA5C 0FDA5C -> $0008                FDIV3           EQU     $08
00DA5C 0FDA5C -> $0004                FDIV2           EQU     $04
00DA5C 0FDA5C -> $0002                FDIV1           EQU     $02
00DA5C 0FDA5C -> $0001                FDIV0           EQU     $01
00DA5C 0FDA5C -> $0101                FSEC            EQU     $0101
00DA5C 0FDA5C -> $0080                KEYEN           EQU     $80
00DA5C 0FDA5C -> $0040                NV6             EQU     $40
00DA5C 0FDA5C -> $0020                NV5             EQU     $20
00DA5C 0FDA5C -> $0010                NV4             EQU     $10
00DA5C 0FDA5C -> $0008                NV3             EQU     $08
00DA5C 0FDA5C -> $0004                NV2             EQU     $04
00DA5C 0FDA5C -> $0002                SEC01           EQU     $02
00DA5C 0FDA5C -> $0001                SEC00           EQU     $01
00DA5C 0FDA5C -> $0102                FTSTMOD         EQU     $0102
00DA5C 0FDA5C -> $0080                BIST            EQU     $80
00DA5C 0FDA5C -> $0040                HOLD            EQU     $40
00DA5C 0FDA5C -> $0020                INVOKE          EQU     $20
00DA5C 0FDA5C -> $0010                WRALL           EQU     $10
00DA5C 0FDA5C -> $0001                DIRECT          EQU     $01
00DA5C 0FDA5C -> $0103                FCNFG           EQU     $0103
00DA5C 0FDA5C -> $0080                CBEIE           EQU     $80
00DA5C 0FDA5C -> $0040                CCIE            EQU     $40
00DA5C 0FDA5C -> $0020                KEYACC          EQU     $20
00DA5C 0FDA5C -> $0002                BKSEL1          EQU     $02
00DA5C 0FDA5C -> $0001                BKSEL0          EQU     $01
00DA5C 0FDA5C -> $0104                FPROT           EQU     $0104
00DA5C 0FDA5C -> $0080                FPOPEN          EQU     $80
00DA5C 0FDA5C -> $0020                FPHDIS          EQU     $20
00DA5C 0FDA5C -> $0010                FPHS1           EQU     $10
00DA5C 0FDA5C -> $0008                FPHS0           EQU     $08
00DA5C 0FDA5C -> $0004                FPLDIS          EQU     $04
00DA5C 0FDA5C -> $0002                FPLS1           EQU     $02
00DA5C 0FDA5C -> $0001                FPLS0           EQU     $01
00DA5C 0FDA5C -> $0105                FSTAT           EQU     $0105
00DA5C 0FDA5C -> $0080                CBEIF           EQU     $80
00DA5C 0FDA5C -> $0040                CCIF            EQU     $40
00DA5C 0FDA5C -> $0020                PVIOL           EQU     $20
00DA5C 0FDA5C -> $0010                ACCERR          EQU     $10
00DA5C 0FDA5C -> $0004                BLANK           EQU     $04
00DA5C 0FDA5C -> $0106                FCMD            EQU     $0106
00DA5C 0FDA5C -> $0040                ERASE           EQU     $40
00DA5C 0FDA5C -> $0020                PROG            EQU     $20
00DA5C 0FDA5C -> $0004                ERVR            EQU     $04
00DA5C 0FDA5C -> $0001                MASS            EQU     $01
00DA5C 0FDA5C -> $0107                FCTL            EQU     $0107
00DA5C 0FDA5C -> $0080                TTMR            EQU     $80
00DA5C 0FDA5C -> $0020                IFREN           EQU     $20
00DA5C 0FDA5C -> $0010                NVSTR           EQU     $10
00DA5C 0FDA5C -> $0008                XE              EQU     $08
00DA5C 0FDA5C -> $0004                YE              EQU     $04
00DA5C 0FDA5C -> $0002                SE              EQU     $02
00DA5C 0FDA5C -> $0001                OE              EQU     $01
00DA5C 0FDA5C -> $0108                FADDRHI         EQU     $0108
00DA5C 0FDA5C -> $0109                FADDRLO         EQU     $0109
00DA5C 0FDA5C -> $010A                FDATAHI         EQU     $010A
00DA5C 0FDA5C -> $010B                FDATALO         EQU     $010B
                                      ;$010C to $010F reserved
00DA5C 0FDA5C -> $0110                ECLKDIV         EQU     $0110
00DA5C 0FDA5C -> $0080                EDIVLD          EQU     $80
00DA5C 0FDA5C -> $0040                EDIV8           EQU     $40
00DA5C 0FDA5C -> $0020                EDIV5           EQU     $20
00DA5C 0FDA5C -> $0010                EDIV4           EQU     $10
00DA5C 0FDA5C -> $0008                EDIV3           EQU     $08
00DA5C 0FDA5C -> $0004                EDIV2           EQU     $04
00DA5C 0FDA5C -> $0002                EDIV1           EQU     $02
00DA5C 0FDA5C -> $0001                EDIV0           EQU     $01
                                      ;$0111 to $0112 reserved
00DA5C 0FDA5C -> $0113                ECNFG           EQU     $0113
                                      ;CBEIE          EQU     $80
                                      ;CCIE           EQU     $40
00DA5C 0FDA5C -> $0114                EPROT           EQU     $0114
00DA5C 0FDA5C -> $0080                EPOPEN          EQU     $80
00DA5C 0FDA5C -> $0040                NV6             EQU     $40
00DA5C 0FDA5C -> $0020                NV5             EQU     $20
00DA5C 0FDA5C -> $0010                NV4             EQU     $10
00DA5C 0FDA5C -> $0008                EPLDIS          EQU     $08
00DA5C 0FDA5C -> $0004                EP2             EQU     $04
00DA5C 0FDA5C -> $0002                EP1             EQU     $02
00DA5C 0FDA5C -> $0001                EP0             EQU     $01
00DA5C 0FDA5C -> $0115                ESTAT           EQU     $0115
                                      ;CBEIF          EQU     $80
                                      ;CCIF           EQU     $40
                                      ;PVIOL          EQU     $20
                                      ;ACCERR         EQU     $10
                                      ;BLANK          EQU     $04
00DA5C 0FDA5C -> $0116                ECMD            EQU     $0116
                                      ;ERASE          EQU     $40
                                      ;PROG           EQU     $20
                                      ;ERVR           EQU     $04
                                      ;MASS           EQU     $01
00DA5C 0FDA5C -> $0118                EADDRHI         EQU     $0118
00DA5C 0FDA5C -> $0119                EADDRLO         EQU     $0119
00DA5C 0FDA5C -> $011A                EDATAHI         EQU     $011A
00DA5C 0FDA5C -> $011B                EDATALO         EQU     $011B
                                      ;$011C to $011F reserved
00DA5C 0FDA5C -> $0120                ATD1CTL0        EQU     $0120
00DA5C 0FDA5C -> $0121                ATD1CTL1        EQU     $0121
00DA5C 0FDA5C -> $0122                ATD1CTL2        EQU     $0122
                                      ;ADPU           EQU     $80
                                      ;AFFC           EQU     $40
                                      ;AWAI           EQU     $20
                                      ;ETRIGLE        EQU     $10
                                      ;ETRIGP         EQU     $08
                                      ;ETRIG          EQU     $04
                                      ;ASCIE          EQU     $02
                                      ;ASCIF          EQU     $01
00DA5C 0FDA5C -> $0123                ATD1CTL3        EQU     $0123
                                      ;S8C            EQU     $40
                                      ;S4C            EQU     $20
                                      ;S2C            EQU     $10
                                      ;S1C            EQU     $08
                                      ;FIFO           EQU     $04
                                      ;FRZ1           EQU     $02
                                      ;FRZ0           EQU     $01
00DA5C 0FDA5C -> $0124                ATD1CTL4        EQU     $0124
                                      ;SRES8          EQU     $80
                                      ;SMP1           EQU     $40
                                      ;SMP0           EQU     $20
                                      ;PRS4           EQU     $10
                                      ;PRS3           EQU     $08
                                      ;PRS2           EQU     $04
                                      ;PRS1           EQU     $02
                                      ;PRS0           EQU     $01
00DA5C 0FDA5C -> $0125                ATD1CTL5        EQU     $0125
                                      ;DJM            EQU     $80
                                      ;DSGN           EQU     $40
                                      ;SCAN           EQU     $20
                                      ;MULT           EQU     $10
                                      ;CC             EQU     $04
                                      ;CB             EQU     $02
                                      ;CA             EQU     $01
00DA5C 0FDA5C -> $0126                ATD1STAT0       EQU     $0126
                                      ;SCF            EQU     $80
                                      ;ETORF          EQU     $20
                                      ;FIFOR          EQU     $10
                                      ;CC2            EQU     $04
                                      ;CC1            EQU     $02
                                      ;CC0            EQU     $01
                                      ;$0126 reserved
00DA5C 0FDA5C -> $0128                ATD1TEST0       EQU     $0128
                                      ;SAR9           EQU     $80
                                      ;SAR8           EQU     $40
                                      ;SAR7           EQU     $20
                                      ;SAR6           EQU     $10
                                      ;SAR5           EQU     $08
                                      ;SAR4           EQU     $04
                                      ;SAR3           EQU     $02
                                      ;SAR2           EQU     $01
00DA5C 0FDA5C -> $0129                ATD1TEST1       EQU     $0129
                                      ;SAR1           EQU     $80
                                      ;SAR0           EQU     $40
                                      ;RST            EQU     $04
                                      ;SC             EQU     $01
                                      ;$012a reserved
00DA5C 0FDA5C -> $012B                ATD1STAT1       EQU     $012B
                                      ;CCF7           EQU     $80
                                      ;CCF6           EQU     $40
                                      ;CCF5           EQU     $20
                                      ;CCF4           EQU     $10
                                      ;CCF3           EQU     $08
                                      ;CCF2           EQU     $04
                                      ;CCF1           EQU     $02
                                      ;CCF0           EQU     $01
                                      ;$012C reserved
00DA5C 0FDA5C -> $012D                ATD1DIEN        EQU     $012D
                                      ;$012E reserved
00DA5C 0FDA5C -> $012F                PORTAD1         EQU     $012F
00DA5C 0FDA5C -> $0080                PTAD17          EQU     $80
00DA5C 0FDA5C -> $0040                PTAD16          EQU     $40
00DA5C 0FDA5C -> $0020                PTAD15          EQU     $20
00DA5C 0FDA5C -> $0010                PTAD14          EQU     $10
00DA5C 0FDA5C -> $0008                PTAD13          EQU     $08
00DA5C 0FDA5C -> $0004                PTAD12          EQU     $04
00DA5C 0FDA5C -> $0002                PTAD11          EQU     $02
00DA5C 0FDA5C -> $0001                PTAD10          EQU     $01
00DA5C 0FDA5C -> $0130                ATD1DR0H        EQU     $0130
00DA5C 0FDA5C -> $0131                ATD1DR0L        EQU     $0131
00DA5C 0FDA5C -> $0132                ATD1DR1H        EQU     $0132
00DA5C 0FDA5C -> $0133                ATD1DR1L        EQU     $0133
00DA5C 0FDA5C -> $0134                ATD1DR2H        EQU     $0134
00DA5C 0FDA5C -> $0135                ATD1DR2L        EQU     $0135
00DA5C 0FDA5C -> $0136                ATD1DR3H        EQU     $0136
00DA5C 0FDA5C -> $0137                ATD1DR3L        EQU     $0137
00DA5C 0FDA5C -> $0138                ATD1DR4H        EQU     $0138
00DA5C 0FDA5C -> $0139                ATD1DR4L        EQU     $0139
00DA5C 0FDA5C -> $013A                ATD1DR5H        EQU     $013A
00DA5C 0FDA5C -> $013B                ATD1DR5L        EQU     $013B
00DA5C 0FDA5C -> $013C                ATD1DR6H        EQU     $013C
00DA5C 0FDA5C -> $013D                ATD1DR6L        EQU     $013D
00DA5C 0FDA5C -> $013E                ATD1DR7H        EQU     $013E
00DA5C 0FDA5C -> $013F                ATD1DR7L        EQU     $013F
00DA5C 0FDA5C -> $0140                CANCTL0         EQU     $0140
00DA5C 0FDA5C -> $0140                CAN0CTL0                EQU     $0140
00DA5C 0FDA5C -> $0080                RXFRM           EQU     $80
00DA5C 0FDA5C -> $0040                RXACT           EQU     $40
00DA5C 0FDA5C -> $0020                CSWAI           EQU     $20
00DA5C 0FDA5C -> $0010                SYNCH           EQU     $10
00DA5C 0FDA5C -> $0008                TIMEN           EQU     $08 ;RENAMED
00DA5C 0FDA5C -> $0004                WUPE            EQU     $04
00DA5C 0FDA5C -> $0002                SLPRQ           EQU     $02
00DA5C 0FDA5C -> $0001                INITRQ          EQU     $01
00DA5C 0FDA5C -> $0141                CANCTL1         EQU     $0141
00DA5C 0FDA5C -> $0141                CAN0CTL1        EQU     $0141
00DA5C 0FDA5C -> $0080                CANE            EQU     $80
00DA5C 0FDA5C -> $0040                CLKSRC          EQU     $40
00DA5C 0FDA5C -> $0020                LOOPB           EQU     $20
00DA5C 0FDA5C -> $0010                LISTEN          EQU     $10
00DA5C 0FDA5C -> $0004                WUPM            EQU     $04
00DA5C 0FDA5C -> $0002                SLPAK           EQU     $02
00DA5C 0FDA5C -> $0001                INITAK          EQU     $01
00DA5C 0FDA5C -> $0142                CANBTR0         EQU     $0142
00DA5C 0FDA5C -> $0142                CAN0BTR0        EQU     $0142
00DA5C 0FDA5C -> $0080                SJW1            EQU     $80
00DA5C 0FDA5C -> $0040                SJW0            EQU     $40
00DA5C 0FDA5C -> $0020                BRP5            EQU     $20
00DA5C 0FDA5C -> $0010                BRP4            EQU     $10
00DA5C 0FDA5C -> $0008                BRP3            EQU     $08
00DA5C 0FDA5C -> $0004                BRP2            EQU     $04
00DA5C 0FDA5C -> $0002                BRP1            EQU     $02
00DA5C 0FDA5C -> $0001                BRP0            EQU     $01
00DA5C 0FDA5C -> $0143                CANBTR1         EQU     $0143
00DA5C 0FDA5C -> $0143                CAN0BTR1        EQU     $0143
00DA5C 0FDA5C -> $0080                SAMP            EQU     $80
00DA5C 0FDA5C -> $0040                TSEG22          EQU     $40
00DA5C 0FDA5C -> $0020                TSEG21          EQU     $20
00DA5C 0FDA5C -> $0010                TSEG20          EQU     $10
00DA5C 0FDA5C -> $0008                TSEG13          EQU     $08
00DA5C 0FDA5C -> $0004                TSEG12          EQU     $04
00DA5C 0FDA5C -> $0002                TSEG11          EQU     $02
00DA5C 0FDA5C -> $0001                TESG10          EQU     $01
00DA5C 0FDA5C -> $0144                CANRFLG         EQU     $0144
00DA5C 0FDA5C -> $0144                CAN0RFLG        EQU     $0144
00DA5C 0FDA5C -> $0080                WUPIF           EQU     $80
00DA5C 0FDA5C -> $0040                CSCIF           EQU     $40
00DA5C 0FDA5C -> $0020                RSTAT1          EQU     $20
00DA5C 0FDA5C -> $0010                RSTAT0          EQU     $10
00DA5C 0FDA5C -> $0008                TSTAT1          EQU     $08
00DA5C 0FDA5C -> $0004                TSTAT0          EQU     $04
00DA5C 0FDA5C -> $0002                OVRIF           EQU     $02
00DA5C 0FDA5C -> $0001                RXF             EQU     $01
00DA5C 0FDA5C -> $0145                CANRIER         EQU     $0145
00DA5C 0FDA5C -> $0145                CAN0RIER        EQU     $0145
00DA5C 0FDA5C -> $0080                WUPIE           EQU     $80
00DA5C 0FDA5C -> $0040                CSCIE           EQU     $40
00DA5C 0FDA5C -> $0020                RSTATE1         EQU     $20
00DA5C 0FDA5C -> $0010                RSTATE0         EQU     $10
00DA5C 0FDA5C -> $0008                TSTATE1         EQU     $08
00DA5C 0FDA5C -> $0004                TSTATE0         EQU     $04
00DA5C 0FDA5C -> $0002                OVRIE           EQU     $02
00DA5C 0FDA5C -> $0001                RXFIE           EQU     $01
00DA5C 0FDA5C -> $0146                CANTFLG         EQU     $0146
00DA5C 0FDA5C -> $0146                CAN0TFLG        EQU     $0146
00DA5C 0FDA5C -> $0004                TXE2            EQU     $04
00DA5C 0FDA5C -> $0002                TXE1            EQU     $02
00DA5C 0FDA5C -> $0001                TXE0            EQU     $01
00DA5C 0FDA5C -> $0147                CANTIER         EQU     $0147
00DA5C 0FDA5C -> $0147                CAN0TIER        EQU     $0147
00DA5C 0FDA5C -> $0004                TXEIE2          EQU     $04
00DA5C 0FDA5C -> $0002                TXEIE1          EQU     $02
00DA5C 0FDA5C -> $0001                TXEIE0          EQU     $01
00DA5C 0FDA5C -> $0148                CANTARQ         EQU     $0148
00DA5C 0FDA5C -> $0148                CAN0TARQ        EQU     $0148
00DA5C 0FDA5C -> $0004                ABTRQ2          EQU     $04
00DA5C 0FDA5C -> $0002                ABTRQ1          EQU     $02
00DA5C 0FDA5C -> $0001                ABTRQ0          EQU     $01
00DA5C 0FDA5C -> $0149                CANTAAK         EQU     $0149
00DA5C 0FDA5C -> $0149                CAN0TAAK        EQU     $0149
00DA5C 0FDA5C -> $0004                ABTAK2          EQU     $04
00DA5C 0FDA5C -> $0002                ABTAK1          EQU     $02
00DA5C 0FDA5C -> $0001                ABTAK0          EQU     $01
00DA5C 0FDA5C -> $014A                CANTBSEL        EQU     $014A
00DA5C 0FDA5C -> $014A                CAN0TBSEL       EQU     $014A
00DA5C 0FDA5C -> $0004                TX2             EQU     $04
00DA5C 0FDA5C -> $0002                TX1             EQU     $02
00DA5C 0FDA5C -> $0001                TX0             EQU     $01
00DA5C 0FDA5C -> $014B                CANIDAC         EQU     $014B
00DA5C 0FDA5C -> $014B                CAN0IDAC        EQU     $014B
00DA5C 0FDA5C -> $0020                IDAM1           EQU     $20
00DA5C 0FDA5C -> $0010                IDAM0           EQU     $10
00DA5C 0FDA5C -> $0004                IDHIT2          EQU     $04
00DA5C 0FDA5C -> $0002                IDHIT1          EQU     $02
00DA5C 0FDA5C -> $0001                IDHIT0          EQU     $01
                                      ; $14c and $14d reserved
00DA5C 0FDA5C -> $014E                CANRXERR        EQU     $014E
00DA5C 0FDA5C -> $014E                CAN0RXERR       EQU     $014E
00DA5C 0FDA5C -> $014F                CANTXERR        EQU     $014F
00DA5C 0FDA5C -> $014F                CAN0TXERR       EQU     $014F
00DA5C 0FDA5C -> $0150                CANIDAR0        EQU     $0150
00DA5C 0FDA5C -> $0150                CAN0IDAR0       EQU     $0150
00DA5C 0FDA5C -> $0151                CANIDAR1        EQU     $0151
00DA5C 0FDA5C -> $0151                CAN0IDAR1       EQU     $0151
00DA5C 0FDA5C -> $0152                CANIDAR2        EQU     $0152
00DA5C 0FDA5C -> $0152                CAN0IDAR2       EQU     $0152
00DA5C 0FDA5C -> $0153                CANIDAR3        EQU     $0153
00DA5C 0FDA5C -> $0153                CAN0IDAR3       EQU     $0153
00DA5C 0FDA5C -> $0154                CANIDMR0        EQU     $0154
00DA5C 0FDA5C -> $0154                CAN0IDMR0       EQU     $0154
00DA5C 0FDA5C -> $0155                CANIDMR1        EQU     $0155
00DA5C 0FDA5C -> $0155                CAN0IDMR1       EQU     $0155
00DA5C 0FDA5C -> $0156                CANIDMR2        EQU     $0156
00DA5C 0FDA5C -> $0156                CAN0IDMR2       EQU     $0156
00DA5C 0FDA5C -> $0157                CANIDMR3        EQU     $0157
00DA5C 0FDA5C -> $0157                CAN0IDMR3       EQU     $0157
00DA5C 0FDA5C -> $0158                CANIDAR4        EQU     $0158
00DA5C 0FDA5C -> $0158                CAN0IDAR4       EQU     $0158
00DA5C 0FDA5C -> $0159                CANIDAR5        EQU     $0159
00DA5C 0FDA5C -> $0159                CAN0IDAR5       EQU     $0159
00DA5C 0FDA5C -> $015A                CANIDAR6        EQU     $015A
00DA5C 0FDA5C -> $015A                CAN0IDAR6       EQU     $015A
00DA5C 0FDA5C -> $015B                CANIDAR7        EQU     $015B
00DA5C 0FDA5C -> $015B                CAN0IDAR7       EQU     $015B
00DA5C 0FDA5C -> $015C                CANIDMR4        EQU     $015C
00DA5C 0FDA5C -> $015C                CAN0IDMR4       EQU     $015C
00DA5C 0FDA5C -> $015D                CANIDMR5        EQU     $015D
00DA5C 0FDA5C -> $015D                CAN0IDMR5       EQU     $015D
00DA5C 0FDA5C -> $015E                CANIDMR6        EQU     $015E
00DA5C 0FDA5C -> $015E                CAN0IDMR6       EQU     $015E
00DA5C 0FDA5C -> $015F                CANIDMR7        EQU     $015F
00DA5C 0FDA5C -> $015F                CAN0IDMR7       EQU     $015F
00DA5C 0FDA5C -> $0160                CANRXIDR0       EQU     $0160
00DA5C 0FDA5C -> $0160                CAN0RXIDR0      EQU     $0160
00DA5C 0FDA5C -> $0161                CANRXIDR1       EQU     $0161
00DA5C 0FDA5C -> $0161                CAN0RXIDR1      EQU     $0161
00DA5C 0FDA5C -> $0162                CANRXIDR2       EQU     $0162
00DA5C 0FDA5C -> $0162                CAN0RXIDR2      EQU     $0162
00DA5C 0FDA5C -> $0163                CANRXIDR3       EQU     $0163
00DA5C 0FDA5C -> $0163                CAN0RXIDR3      EQU     $0163
00DA5C 0FDA5C -> $0164                CANRXDSR0       EQU     $0164
00DA5C 0FDA5C -> $0164                CAN0RXDSR0      EQU     $0164
00DA5C 0FDA5C -> $0165                CANRXDSR1       EQU     $0165
00DA5C 0FDA5C -> $0165                CAN0RXDSR1      EQU     $0165
00DA5C 0FDA5C -> $0166                CANRXDSR2       EQU     $0166
00DA5C 0FDA5C -> $0166                CAN0RXDSR2      EQU     $0166
00DA5C 0FDA5C -> $0167                CANRXDSR3       EQU     $0167
00DA5C 0FDA5C -> $0167                CAN0RXDSR3      EQU     $0167
00DA5C 0FDA5C -> $0168                CANRXDSR4       EQU     $0168
00DA5C 0FDA5C -> $0168                CAN0RXDSR4      EQU     $0168
00DA5C 0FDA5C -> $0169                CANRXDSR5       EQU     $0169
00DA5C 0FDA5C -> $0169                CAN0RXDSR5      EQU     $0169
00DA5C 0FDA5C -> $016A                CANRXDSR6       EQU     $016A
00DA5C 0FDA5C -> $016A                CAN0RXDSR6      EQU     $016A
00DA5C 0FDA5C -> $016B                CANRXDSR7       EQU     $016B
00DA5C 0FDA5C -> $016B                CAN0RXDSR7      EQU     $016B
00DA5C 0FDA5C -> $016C                CANRXDLR        EQU     $016C
00DA5C 0FDA5C -> $016C                CAN0RXDLR       EQU     $016C
                                      ;$016D reserved
00DA5C 0FDA5C -> $016E                CANRTSRH        EQU     $016E
00DA5C 0FDA5C -> $016E                CAN0RTSRH       EQU     $016E
00DA5C 0FDA5C -> $016F                CANRTSRL        EQU     $016F
00DA5C 0FDA5C -> $016F                CAN0RTSRL       EQU     $016F
00DA5C 0FDA5C -> $0170                CANTXIDR0       EQU     $0170
00DA5C 0FDA5C -> $0170                CAN0TXIDR0      EQU     $0170
00DA5C 0FDA5C -> $0171                CANTXIDR1       EQU     $0171
00DA5C 0FDA5C -> $0171                CAN0TXIDR1      EQU     $0171
00DA5C 0FDA5C -> $0172                CANTXIDR2       EQU     $0172
00DA5C 0FDA5C -> $0172                CAN0TXIDR2      EQU     $0172
00DA5C 0FDA5C -> $0173                CANTXIDR3       EQU     $0173
00DA5C 0FDA5C -> $0173                CAN0TXIDR3      EQU     $0173
00DA5C 0FDA5C -> $0174                CANTXDSR0       EQU     $0174
00DA5C 0FDA5C -> $0174                CAN0TXDSR0      EQU     $0174
00DA5C 0FDA5C -> $0175                CANTXDSR1       EQU     $0175
00DA5C 0FDA5C -> $0175                CAN0TXDSR1      EQU     $0175
00DA5C 0FDA5C -> $0176                CANTXDSR2       EQU     $0176
00DA5C 0FDA5C -> $0176                CAN0TXDSR2      EQU     $0176
00DA5C 0FDA5C -> $0177                CANTXDSR3       EQU     $0177
00DA5C 0FDA5C -> $0177                CAN0TXDSR3      EQU     $0177
00DA5C 0FDA5C -> $0178                CANTXDSR4       EQU     $0178
00DA5C 0FDA5C -> $0178                CAN0TXDSR4      EQU     $0178
00DA5C 0FDA5C -> $0179                CANTXDSR5       EQU     $0179
00DA5C 0FDA5C -> $0179                CAN0TXDSR5      EQU     $0179
00DA5C 0FDA5C -> $017A                CANTXDSR6       EQU     $017A
00DA5C 0FDA5C -> $017A                CAN0TXDSR6      EQU     $017A
00DA5C 0FDA5C -> $017B                CANTXDSR7       EQU     $017B
00DA5C 0FDA5C -> $017B                CAN0TXDSR7      EQU     $017B
00DA5C 0FDA5C -> $017C                CANTXDLR        EQU     $017C
00DA5C 0FDA5C -> $017C                CAN0TXDLR       EQU     $017C
00DA5C 0FDA5C -> $017D                CANTXTBPR       EQU     $017D
00DA5C 0FDA5C -> $017D                CAN0TXTBPR      EQU     $017D
00DA5C 0FDA5C -> $017E                CANTXTSRH       EQU     $017E
00DA5C 0FDA5C -> $017E                CAN0TXTSRH      EQU     $017E
00DA5C 0FDA5C -> $017F                CANTXTSRL       EQU     $017F
00DA5C 0FDA5C -> $017F                CAN0TXTSRL      EQU     $017F
00DA5C 0FDA5C -> $0180                CAN1CTL0        EQU     $0180
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08 ;RENAMED
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
00DA5C 0FDA5C -> $0181                CAN1CTL1        EQU     $0181
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
00DA5C 0FDA5C -> $0182                CAN1BTR0        EQU     $0182
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
00DA5C 0FDA5C -> $0183                CAN1BTR1        EQU     $0183
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
00DA5C 0FDA5C -> $0184                CAN1RFLG        EQU     $0184
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
00DA5C 0FDA5C -> $0185                CAN1RIER        EQU     $0185
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
00DA5C 0FDA5C -> $0186                CAN1TFLG        EQU     $0186
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
00DA5C 0FDA5C -> $0187                CAN1TIER        EQU     $0187
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
00DA5C 0FDA5C -> $0188                CAN1TARQ        EQU     $0188
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
00DA5C 0FDA5C -> $0189                CAN1TAAK        EQU     $0189
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
00DA5C 0FDA5C -> $018A                CAN1TBSEL       EQU     $018A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
00DA5C 0FDA5C -> $018B                CAN1IDAC        EQU     $018B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ; $18c and $18d reserved
00DA5C 0FDA5C -> $018E                CAN1RXERR       EQU     $018E
00DA5C 0FDA5C -> $018F                CAN1TXERR       EQU     $018F
00DA5C 0FDA5C -> $0190                CAN1IDAR0       EQU     $0190
00DA5C 0FDA5C -> $0191                CAN1IDAR1       EQU     $0191
00DA5C 0FDA5C -> $0192                CAN1IDAR2       EQU     $0192
00DA5C 0FDA5C -> $0193                CAN1IDAR3       EQU     $0193
00DA5C 0FDA5C -> $0194                CAN1IDMR0       EQU     $0194
00DA5C 0FDA5C -> $0195                CAN1IDMR1       EQU     $0195
00DA5C 0FDA5C -> $0196                CAN1IDMR2       EQU     $0196
00DA5C 0FDA5C -> $0197                CAN1IDMR3       EQU     $0197
00DA5C 0FDA5C -> $0198                CAN1IDAR4       EQU     $0198
00DA5C 0FDA5C -> $0199                CAN1IDAR5       EQU     $0199
00DA5C 0FDA5C -> $019A                CAN1IDAR6       EQU     $019A
00DA5C 0FDA5C -> $019B                CAN1IDAR7       EQU     $019B
00DA5C 0FDA5C -> $019C                CAN1IDMR4       EQU     $019C
00DA5C 0FDA5C -> $019D                CAN1IDMR5       EQU     $019D
00DA5C 0FDA5C -> $019E                CAN1IDMR6       EQU     $019E
00DA5C 0FDA5C -> $019F                CAN1IDMR7       EQU     $019F
00DA5C 0FDA5C -> $01A0                CAN1RXIDR0      EQU     $01A0
00DA5C 0FDA5C -> $01A1                CAN1RXIDR1      EQU     $01A1
00DA5C 0FDA5C -> $01A2                CAN1RXIDR2      EQU     $01A2
00DA5C 0FDA5C -> $01A3                CAN1RXIDR3      EQU     $01A3
00DA5C 0FDA5C -> $01A4                CAN1RXDSR0      EQU     $01A4
00DA5C 0FDA5C -> $01A5                CAN1RXDSR1      EQU     $01A5
00DA5C 0FDA5C -> $01A6                CAN1RXDSR2      EQU     $01A6
00DA5C 0FDA5C -> $01A7                CAN1RXDSR3      EQU     $01A7
00DA5C 0FDA5C -> $01A8                CAN1RXDSR4      EQU     $01A8
00DA5C 0FDA5C -> $01A9                CAN1RXDSR5      EQU     $01A9
00DA5C 0FDA5C -> $01AA                CAN1RXDSR6      EQU     $01AA
00DA5C 0FDA5C -> $01AB                CAN1RXDSR7      EQU     $01AB
00DA5C 0FDA5C -> $01AC                CAN1RXDLR       EQU     $01AC
                                      ;$01AD reserved
00DA5C 0FDA5C -> $01AE                CAN1RTSRH       EQU     $01AE
00DA5C 0FDA5C -> $01AF                CAN1RTSRL       EQU     $01AF
00DA5C 0FDA5C -> $01B0                CAN1TXIDR0      EQU     $01B0
00DA5C 0FDA5C -> $01B1                CAN1TXIDR1      EQU     $01B1
00DA5C 0FDA5C -> $01B2                CAN1TXIDR2      EQU     $01B2
00DA5C 0FDA5C -> $01B3                CAN1TXIDR3      EQU     $01B3
00DA5C 0FDA5C -> $01B4                CAN1TXDSR0      EQU     $01B4
00DA5C 0FDA5C -> $01B5                CAN1TXDSR1      EQU     $01B5
00DA5C 0FDA5C -> $01B6                CAN1TXDSR2      EQU     $01B6
00DA5C 0FDA5C -> $01B7                CAN1TXDSR3      EQU     $01B7
00DA5C 0FDA5C -> $01B8                CAN1TXDSR4      EQU     $01B8
00DA5C 0FDA5C -> $01B9                CAN1TXDSR5      EQU     $01B9
00DA5C 0FDA5C -> $01BA                CAN1TXDSR6      EQU     $01BA
00DA5C 0FDA5C -> $01BB                CAN1TXDSR7      EQU     $01BB
00DA5C 0FDA5C -> $01BC                CAN1TXDLR       EQU     $01BC
00DA5C 0FDA5C -> $01BD                CAN1TXTBPR      EQU     $01BD
00DA5C 0FDA5C -> $01BE                CAN1TXTSRH      EQU     $01BE
00DA5C 0FDA5C -> $01BF                CAN1TXTSRL      EQU     $01BF
00DA5C 0FDA5C -> $01C0                CAN2CTL0        EQU     $01C0
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
00DA5C 0FDA5C -> $01C1                CAN2CTL1        EQU     $01C1
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
00DA5C 0FDA5C -> $01C2                CAN2BTR0        EQU     $01C2
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
00DA5C 0FDA5C -> $01C3                CAN2BTR1        EQU     $01C3
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
00DA5C 0FDA5C -> $01C4                CAN2RFLG        EQU     $01C4
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
00DA5C 0FDA5C -> $01C5                CAN2RIER        EQU     $01C5
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
00DA5C 0FDA5C -> $01C6                CAN2TFLG        EQU     $01C6
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
00DA5C 0FDA5C -> $01C7                CAN2TIER        EQU     $01C7
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
00DA5C 0FDA5C -> $01C8                CAN2TARQ        EQU     $01C8
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
00DA5C 0FDA5C -> $01C9                CAN2TAAK        EQU     $01C9
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
00DA5C 0FDA5C -> $01CA                CAN2TBSEL       EQU     $01CA
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
00DA5C 0FDA5C -> $01CB                CAN2IDAC        EQU     $01CB
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$01CC  reserved
00DA5C 0FDA5C -> $01CD                CAN2MISC        EQU     $01CD
                                      ;BOHOLD         EQU     $01
00DA5C 0FDA5C -> $01CE                CAN2RXERR       EQU     $01CE
00DA5C 0FDA5C -> $01CF                CAN2TXERR       EQU     $01CF
00DA5C 0FDA5C -> $01D0                CAN2IDAR0       EQU     $01D0
00DA5C 0FDA5C -> $01D1                CAN2IDAR1       EQU     $01D1
00DA5C 0FDA5C -> $01D2                CAN2IDAR2       EQU     $01D2
00DA5C 0FDA5C -> $01D3                CAN2IDAR3       EQU     $01D3
00DA5C 0FDA5C -> $01D4                CAN2IDMR0       EQU     $01D4
00DA5C 0FDA5C -> $01D5                CAN2IDMR1       EQU     $01D5
00DA5C 0FDA5C -> $01D6                CAN2IDMR2       EQU     $01D6
00DA5C 0FDA5C -> $01D7                CAN2IDMR3       EQU     $01D7
00DA5C 0FDA5C -> $01D8                CAN2IDAR4       EQU     $01D8
00DA5C 0FDA5C -> $01D9                CAN2IDAR5       EQU     $01D9
00DA5C 0FDA5C -> $01DA                CAN2IDAR6       EQU     $01DA
00DA5C 0FDA5C -> $01DB                CAN2IDAR7       EQU     $01DB
00DA5C 0FDA5C -> $01DC                CAN2IDMR4       EQU     $01DC
00DA5C 0FDA5C -> $01DD                CAN2IDMR5       EQU     $01DD
00DA5C 0FDA5C -> $01DE                CAN2IDMR6       EQU     $01DE
00DA5C 0FDA5C -> $01DF                CAN2IDMR7       EQU     $01DF
00DA5C 0FDA5C -> $01E0                CAN2RXIDR0      EQU     $01E0
00DA5C 0FDA5C -> $01E1                CAN2RXIDR1      EQU     $01E1
00DA5C 0FDA5C -> $01E2                CAN2RXIDR2      EQU     $01E2
00DA5C 0FDA5C -> $01E3                CAN2RXIDR3      EQU     $01E3
00DA5C 0FDA5C -> $01E4                CAN2RXDSR0      EQU     $01E4
00DA5C 0FDA5C -> $01E5                CAN2RXDSR1      EQU     $01E5
00DA5C 0FDA5C -> $01E6                CAN2RXDSR2      EQU     $01E6
00DA5C 0FDA5C -> $01E7                CAN2RXDSR3      EQU     $01E7
00DA5C 0FDA5C -> $01E8                CAN2RXDSR4      EQU     $01E8
00DA5C 0FDA5C -> $01E9                CAN2RXDSR5      EQU     $01E9
00DA5C 0FDA5C -> $01EA                CAN2RXDSR6      EQU     $01EA
00DA5C 0FDA5C -> $01EB                CAN2RXDSR7      EQU     $01EB
00DA5C 0FDA5C -> $01EC                CAN2RXDLR       EQU     $01EC
                                      ;$01ED reserved
00DA5C 0FDA5C -> $01EE                CAN2RTSRH       EQU     $01EE
00DA5C 0FDA5C -> $01EF                CAN2RTSRL       EQU     $01EF
00DA5C 0FDA5C -> $01F0                CAN2TXIDR0      EQU     $01F0
00DA5C 0FDA5C -> $01F1                CAN2TXIDR1      EQU     $01F1
00DA5C 0FDA5C -> $01F2                CAN2TXIDR2      EQU     $01F2
00DA5C 0FDA5C -> $01F2                CAN2TXIDR2      EQU     $01F2
00DA5C 0FDA5C -> $01F3                CAN2TXIDR3      EQU     $01F3
00DA5C 0FDA5C -> $01F4                CAN2TXDSR0      EQU     $01F4
00DA5C 0FDA5C -> $01F5                CAN2TXDSR1      EQU     $01F5
00DA5C 0FDA5C -> $01F6                CAN2TXDSR2      EQU     $01F6
00DA5C 0FDA5C -> $01F7                CAN2XDSR3       EQU     $01F7
00DA5C 0FDA5C -> $01F7                CAN2TXDSR3      EQU     $01F7
00DA5C 0FDA5C -> $01F8                CAN2TXDSR4      EQU     $01F8
00DA5C 0FDA5C -> $01F9                CAN2TXDSR5      EQU     $01F9
00DA5C 0FDA5C -> $01FA                CAN2TXDSR6      EQU     $01FA
00DA5C 0FDA5C -> $01FB                CAN2TXDSR7      EQU     $01FB
00DA5C 0FDA5C -> $01FC                CAN2TXDLR       EQU     $01FC
00DA5C 0FDA5C -> $01FD                CAN2TXTBPR      EQU     $01FD
00DA5C 0FDA5C -> $01FE                CAN2TXTSRH      EQU     $01FE
00DA5C 0FDA5C -> $01FF                CAN2TXTSRL      EQU     $01FF
00DA5C 0FDA5C -> $0200                CAN3CTL0        EQU     $0200
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
00DA5C 0FDA5C -> $0201                CAN3CTL1        EQU     $0201
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
00DA5C 0FDA5C -> $0202                CAN3BTR0        EQU     $0202
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
00DA5C 0FDA5C -> $0203                CAN3BTR1        EQU     $0203
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
00DA5C 0FDA5C -> $0204                CAN3RFLG        EQU     $0204
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
00DA5C 0FDA5C -> $0205                CAN3RIER        EQU     $0205
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
00DA5C 0FDA5C -> $0206                CAN3TFLG        EQU     $0206
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
00DA5C 0FDA5C -> $0207                CAN3TIER        EQU     $0207
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
00DA5C 0FDA5C -> $0208                CAN3TARQ        EQU     $0208
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
00DA5C 0FDA5C -> $0209                CAN3TAAK        EQU     $0209
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
00DA5C 0FDA5C -> $020A                CAN3TBSEL       EQU     $020A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
00DA5C 0FDA5C -> $020B                CAN3IDAC        EQU     $020B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$020C  reserved
00DA5C 0FDA5C -> $020D                CAN3MISC        EQU     $020D
                                      ;BOHOLD         EQU     $01
00DA5C 0FDA5C -> $020E                CAN3RXERR       EQU     $020E
00DA5C 0FDA5C -> $020F                CAN3TXERR       EQU     $020F
00DA5C 0FDA5C -> $0210                CAN3IDAR0       EQU     $0210
00DA5C 0FDA5C -> $0211                CAN3IDAR1       EQU     $0211
00DA5C 0FDA5C -> $0212                CAN3IDAR2       EQU     $0212
00DA5C 0FDA5C -> $0213                CAN3IDAR3       EQU     $0213
00DA5C 0FDA5C -> $0214                CAN3IDMR0       EQU     $0214
00DA5C 0FDA5C -> $0215                CAN3IDMR1       EQU     $0215
00DA5C 0FDA5C -> $0216                CAN3IDMR2       EQU     $0216
00DA5C 0FDA5C -> $0217                CAN3IDMR3       EQU     $0217
00DA5C 0FDA5C -> $0218                CAN3IDAR4       EQU     $0218
00DA5C 0FDA5C -> $0219                CAN3IDAR5       EQU     $0219
00DA5C 0FDA5C -> $021A                CAN3IDAR6       EQU     $021A
00DA5C 0FDA5C -> $021B                CAN3IDAR7       EQU     $021B
00DA5C 0FDA5C -> $021C                CAN3IDMR4       EQU     $021C
00DA5C 0FDA5C -> $021D                CAN3IDMR5       EQU     $021D
00DA5C 0FDA5C -> $021E                CAN3IDMR6       EQU     $021E
00DA5C 0FDA5C -> $021F                CAN3IDMR7       EQU     $021F
00DA5C 0FDA5C -> $0220                CAN3RXIDR0      EQU     $0220
00DA5C 0FDA5C -> $0221                CAN3RXIDR1      EQU     $0221
00DA5C 0FDA5C -> $0222                CAN3RXIDR2      EQU     $0222
00DA5C 0FDA5C -> $0223                CAN3RXIDR3      EQU     $0223
00DA5C 0FDA5C -> $0224                CAN3RXDSR0      EQU     $0224
00DA5C 0FDA5C -> $0225                CAN3RXDSR1      EQU     $0225
00DA5C 0FDA5C -> $0226                CAN3RXDSR2      EQU     $0226
00DA5C 0FDA5C -> $0227                CAN3RXDSR3      EQU     $0227
00DA5C 0FDA5C -> $0228                CAN3RXDSR4      EQU     $0228
00DA5C 0FDA5C -> $0229                CAN3RXDSR5      EQU     $0229
00DA5C 0FDA5C -> $022A                CAN3RXDSR6      EQU     $022A
00DA5C 0FDA5C -> $022B                CAN3RXDSR7      EQU     $022B
00DA5C 0FDA5C -> $022C                CAN3RXDLR       EQU     $022C
                                      ;$022D reserved
00DA5C 0FDA5C -> $022E                CAN3RTSRH       EQU     $022E
00DA5C 0FDA5C -> $022F                CAN3RTSRL       EQU     $022F
00DA5C 0FDA5C -> $0230                CAN3TXIDR0      EQU     $0230
00DA5C 0FDA5C -> $0231                CAN3TXIDR1      EQU     $0231
00DA5C 0FDA5C -> $0232                CAN3TXIDR2      EQU     $0232
00DA5C 0FDA5C -> $0232                CAN3TXIDR2      EQU     $0232
00DA5C 0FDA5C -> $0233                CAN3TXIDR3      EQU     $0233
00DA5C 0FDA5C -> $0234                CAN3TXDSR0      EQU     $0234
00DA5C 0FDA5C -> $0235                CAN3TXDSR1      EQU     $0235
00DA5C 0FDA5C -> $0236                CAN3TXDSR2      EQU     $0236
00DA5C 0FDA5C -> $0237                CAN3XDSR3       EQU     $0237
00DA5C 0FDA5C -> $0237                CAN3TXDSR3      EQU     $0237
00DA5C 0FDA5C -> $0238                CAN3TXDSR4      EQU     $0238
00DA5C 0FDA5C -> $0239                CAN3TXDSR5      EQU     $0239
00DA5C 0FDA5C -> $023A                CAN3TXDSR6      EQU     $023A
00DA5C 0FDA5C -> $023B                CAN3TXDSR7      EQU     $023B
00DA5C 0FDA5C -> $023C                CAN3TXDLR       EQU     $023C
00DA5C 0FDA5C -> $023D                CAN3TXTBPR      EQU     $023D
00DA5C 0FDA5C -> $023E                CAN3TXTSRH      EQU     $023E
00DA5C 0FDA5C -> $023F                CAN3TXTSRL      EQU     $023F
00DA5C 0FDA5C -> $0240                PTT             EQU     $0240
00DA5C 0FDA5C -> $0080                PTT7            EQU     $80
00DA5C 0FDA5C -> $0040                PTT6            EQU     $40
00DA5C 0FDA5C -> $0020                PTT5            EQU     $20
00DA5C 0FDA5C -> $0010                PTT4            EQU     $10
00DA5C 0FDA5C -> $0008                PTT3            EQU     $08
00DA5C 0FDA5C -> $0004                PTT2            EQU     $04
00DA5C 0FDA5C -> $0002                PTT1            EQU     $02
00DA5C 0FDA5C -> $0001                PTT0            EQU     $01
00DA5C 0FDA5C -> $0080                PT7             EQU     $80
00DA5C 0FDA5C -> $0040                PT6             EQU     $40
00DA5C 0FDA5C -> $0020                PT5             EQU     $20
00DA5C 0FDA5C -> $0010                PT4             EQU     $10
00DA5C 0FDA5C -> $0008                PT3             EQU     $08
00DA5C 0FDA5C -> $0004                PT2             EQU     $04
00DA5C 0FDA5C -> $0002                PT1             EQU     $02
00DA5C 0FDA5C -> $0001                PT0             EQU     $01
00DA5C 0FDA5C -> $0241                PTIT            EQU     $0241
00DA5C 0FDA5C -> $0080                PTIT7           EQU     $80
00DA5C 0FDA5C -> $0040                PTIT6           EQU     $40
00DA5C 0FDA5C -> $0020                PTIT5           EQU     $20
00DA5C 0FDA5C -> $0010                PTIT4           EQU     $10
00DA5C 0FDA5C -> $0008                PTIT3           EQU     $08
00DA5C 0FDA5C -> $0004                PTIT2           EQU     $04
00DA5C 0FDA5C -> $0002                PTIT1           EQU     $02
00DA5C 0FDA5C -> $0001                PTIT0           EQU     $01
00DA5C 0FDA5C -> $0242                DDRT            EQU     $0242
00DA5C 0FDA5C -> $0080                DDRT7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRT6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRT5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRT4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRT3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRT2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRT1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRT0           EQU     $01
00DA5C 0FDA5C -> $0243                RDRT            EQU     $0243
00DA5C 0FDA5C -> $0080                RDRT7           EQU     $80
00DA5C 0FDA5C -> $0040                RDRT6           EQU     $40
00DA5C 0FDA5C -> $0020                RDRT5           EQU     $20
00DA5C 0FDA5C -> $0010                RDRT4           EQU     $10
00DA5C 0FDA5C -> $0008                RDRT3           EQU     $08
00DA5C 0FDA5C -> $0004                RDRT2           EQU     $04
00DA5C 0FDA5C -> $0002                RDRT1           EQU     $02
00DA5C 0FDA5C -> $0001                RDRT0           EQU     $01
00DA5C 0FDA5C -> $0244                PERT            EQU     $0244
00DA5C 0FDA5C -> $0080                PERT7           EQU     $80
00DA5C 0FDA5C -> $0040                PERT6           EQU     $40
00DA5C 0FDA5C -> $0020                PERT5           EQU     $20
00DA5C 0FDA5C -> $0010                PERT4           EQU     $10
00DA5C 0FDA5C -> $0008                PERT3           EQU     $08
00DA5C 0FDA5C -> $0004                PERT2           EQU     $04
00DA5C 0FDA5C -> $0002                PERT1           EQU     $02
00DA5C 0FDA5C -> $0001                PERT0           EQU     $01
00DA5C 0FDA5C -> $0245                PPST            EQU     $0245
00DA5C 0FDA5C -> $0080                PPST7           EQU     $80
00DA5C 0FDA5C -> $0040                PPST6           EQU     $40
00DA5C 0FDA5C -> $0020                PPST5           EQU     $20
00DA5C 0FDA5C -> $0010                PPST4           EQU     $10
00DA5C 0FDA5C -> $0008                PPST3           EQU     $08
00DA5C 0FDA5C -> $0004                PPST2           EQU     $04
00DA5C 0FDA5C -> $0002                PPST1           EQU     $02
00DA5C 0FDA5C -> $0001                PPST0           EQU     $01
                                      ;$0246 to $0247 reserved
00DA5C 0FDA5C -> $0248                PTS             EQU     $0248
00DA5C 0FDA5C -> $0080                PTS7            EQU     $80
00DA5C 0FDA5C -> $0040                PTS6            EQU     $40
00DA5C 0FDA5C -> $0020                PTS5            EQU     $20
00DA5C 0FDA5C -> $0010                PTS4            EQU     $10
00DA5C 0FDA5C -> $0008                PTS3            EQU     $08
00DA5C 0FDA5C -> $0004                PTS2            EQU     $04
00DA5C 0FDA5C -> $0002                PTS1            EQU     $02
00DA5C 0FDA5C -> $0001                PTS0            EQU     $01
00DA5C 0FDA5C -> $0080                PS7             EQU     $80
00DA5C 0FDA5C -> $0040                PS6             EQU     $40
00DA5C 0FDA5C -> $0020                PS5             EQU     $20
00DA5C 0FDA5C -> $0010                PS4             EQU     $10
00DA5C 0FDA5C -> $0008                PS3             EQU     $08
00DA5C 0FDA5C -> $0004                PS2             EQU     $04
00DA5C 0FDA5C -> $0002                PS1             EQU     $02
00DA5C 0FDA5C -> $0001                PS0             EQU     $01
00DA5C 0FDA5C -> $0249                PTIS            EQU     $0249
00DA5C 0FDA5C -> $0080                PTIS7           EQU     $80
00DA5C 0FDA5C -> $0040                PTIS6           EQU     $40
00DA5C 0FDA5C -> $0020                PTIS5           EQU     $20
00DA5C 0FDA5C -> $0010                PTIS4           EQU     $10
00DA5C 0FDA5C -> $0008                PTIS3           EQU     $08
00DA5C 0FDA5C -> $0004                PTIS2           EQU     $04
00DA5C 0FDA5C -> $0002                PTIS1           EQU     $02
00DA5C 0FDA5C -> $0001                PTIS0           EQU     $01
00DA5C 0FDA5C -> $024A                DDRS            EQU     $024A
00DA5C 0FDA5C -> $0080                DDRS7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRS6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRS5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRS4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRS3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRS2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRS1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRS0           EQU     $01
00DA5C 0FDA5C -> $024B                RDRS            EQU     $024B
00DA5C 0FDA5C -> $0080                RDRS7           EQU     $80
00DA5C 0FDA5C -> $0040                RDRS6           EQU     $40
00DA5C 0FDA5C -> $0020                RDRS5           EQU     $20
00DA5C 0FDA5C -> $0010                RDRS4           EQU     $10
00DA5C 0FDA5C -> $0008                RDRS3           EQU     $08
00DA5C 0FDA5C -> $0004                RDRS2           EQU     $04
00DA5C 0FDA5C -> $0002                RDRS1           EQU     $02
00DA5C 0FDA5C -> $0001                RDRS0           EQU     $01
00DA5C 0FDA5C -> $024C                PERS            EQU     $024C
00DA5C 0FDA5C -> $0080                PERS7           EQU     $80
00DA5C 0FDA5C -> $0040                PERS6           EQU     $40
00DA5C 0FDA5C -> $0020                PERS5           EQU     $20
00DA5C 0FDA5C -> $0010                PERS4           EQU     $10
00DA5C 0FDA5C -> $0008                PERS3           EQU     $08
00DA5C 0FDA5C -> $0004                PERS2           EQU     $04
00DA5C 0FDA5C -> $0002                PERS1           EQU     $02
00DA5C 0FDA5C -> $0001                PERS0           EQU     $01
00DA5C 0FDA5C -> $024D                PPSS            EQU     $024D
00DA5C 0FDA5C -> $0080                PPSS7           EQU     $80
00DA5C 0FDA5C -> $0040                PPSS6           EQU     $40
00DA5C 0FDA5C -> $0020                PPSS5           EQU     $20
00DA5C 0FDA5C -> $0010                PPSS4           EQU     $10
00DA5C 0FDA5C -> $0008                PPSS3           EQU     $08
00DA5C 0FDA5C -> $0004                PPSS2           EQU     $04
00DA5C 0FDA5C -> $0002                PPSS1           EQU     $02
00DA5C 0FDA5C -> $0001                PPSS0           EQU     $01
00DA5C 0FDA5C -> $024E                WOMS            EQU     $024E
00DA5C 0FDA5C -> $0080                WOMS7           EQU     $80
00DA5C 0FDA5C -> $0040                WOMS6           EQU     $40
00DA5C 0FDA5C -> $0020                WOMS5           EQU     $20
00DA5C 0FDA5C -> $0010                WOMS4           EQU     $10
00DA5C 0FDA5C -> $0008                WOMS3           EQU     $08
00DA5C 0FDA5C -> $0004                WOMS2           EQU     $04
00DA5C 0FDA5C -> $0002                WOMS1           EQU     $02
00DA5C 0FDA5C -> $0001                WOMS0           EQU     $01
                                      ;$024F reserved
00DA5C 0FDA5C -> $0250                PTM             EQU     $0250
00DA5C 0FDA5C -> $0080                PTM7            EQU     $80
00DA5C 0FDA5C -> $0040                PTM6            EQU     $40
00DA5C 0FDA5C -> $0020                PTM5            EQU     $20
00DA5C 0FDA5C -> $0010                PTM4            EQU     $10
00DA5C 0FDA5C -> $0008                PTM3            EQU     $08
00DA5C 0FDA5C -> $0004                PTM2            EQU     $04
00DA5C 0FDA5C -> $0002                PTM1            EQU     $02
00DA5C 0FDA5C -> $0001                PTM0            EQU     $01
00DA5C 0FDA5C -> $0080                PM7             EQU     $80
00DA5C 0FDA5C -> $0040                PM6             EQU     $40
00DA5C 0FDA5C -> $0020                PM5             EQU     $20
00DA5C 0FDA5C -> $0010                PM4             EQU     $10
00DA5C 0FDA5C -> $0008                PM3             EQU     $08
00DA5C 0FDA5C -> $0004                PM2             EQU     $04
00DA5C 0FDA5C -> $0002                PM1             EQU     $02
00DA5C 0FDA5C -> $0001                PM0             EQU     $01
00DA5C 0FDA5C -> $0251                PTIM            EQU     $0251
00DA5C 0FDA5C -> $0080                PTIM7           EQU     $80
00DA5C 0FDA5C -> $0040                PTIM6           EQU     $40
00DA5C 0FDA5C -> $0020                PTIM5           EQU     $20
00DA5C 0FDA5C -> $0010                PTIM4           EQU     $10
00DA5C 0FDA5C -> $0008                PTIM3           EQU     $08
00DA5C 0FDA5C -> $0004                PTIM2           EQU     $04
00DA5C 0FDA5C -> $0002                PTIM1           EQU     $02
00DA5C 0FDA5C -> $0001                PTIM0           EQU     $01
00DA5C 0FDA5C -> $0252                DDRM            EQU     $0252
00DA5C 0FDA5C -> $0080                DDRM7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRM6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRM5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRM4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRM3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRM2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRM1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRM0           EQU     $01
00DA5C 0FDA5C -> $0253                RDRM            EQU     $0253
00DA5C 0FDA5C -> $0080                RDRM7           EQU     $80
00DA5C 0FDA5C -> $0040                RDRM6           EQU     $40
00DA5C 0FDA5C -> $0020                RDRM5           EQU     $20
00DA5C 0FDA5C -> $0010                RDRM4           EQU     $10
00DA5C 0FDA5C -> $0008                RDRM3           EQU     $08
00DA5C 0FDA5C -> $0004                RDRM2           EQU     $04
00DA5C 0FDA5C -> $0002                RDRM1           EQU     $02
00DA5C 0FDA5C -> $0001                RDRM0           EQU     $01
00DA5C 0FDA5C -> $0254                PERM            EQU     $0254
00DA5C 0FDA5C -> $0080                PERM7           EQU     $80
00DA5C 0FDA5C -> $0040                PERM6           EQU     $40
00DA5C 0FDA5C -> $0020                PERM5           EQU     $20
00DA5C 0FDA5C -> $0010                PERM4           EQU     $10
00DA5C 0FDA5C -> $0008                PERM3           EQU     $08
00DA5C 0FDA5C -> $0004                PERM2           EQU     $04
00DA5C 0FDA5C -> $0002                PERM1           EQU     $02
00DA5C 0FDA5C -> $0001                PERM0           EQU     $01
00DA5C 0FDA5C -> $0255                PPSM            EQU     $0255
00DA5C 0FDA5C -> $0080                PPSM7           EQU     $80
00DA5C 0FDA5C -> $0040                PPSM6           EQU     $40
00DA5C 0FDA5C -> $0020                PPSM5           EQU     $20
00DA5C 0FDA5C -> $0010                PPSM4           EQU     $10
00DA5C 0FDA5C -> $0008                PPSM3           EQU     $08
00DA5C 0FDA5C -> $0004                PPSM2           EQU     $04
00DA5C 0FDA5C -> $0002                PPSM1           EQU     $02
00DA5C 0FDA5C -> $0001                PPSM0           EQU     $01
00DA5C 0FDA5C -> $0256                WOMM            EQU     $0256
00DA5C 0FDA5C -> $0080                WOMM7           EQU     $80
00DA5C 0FDA5C -> $0040                WOMM6           EQU     $40
00DA5C 0FDA5C -> $0020                WOMM5           EQU     $20
00DA5C 0FDA5C -> $0010                WOMM4           EQU     $10
00DA5C 0FDA5C -> $0008                WOMM3           EQU     $08
00DA5C 0FDA5C -> $0004                WOMM2           EQU     $04
00DA5C 0FDA5C -> $0002                WOMM1           EQU     $02
00DA5C 0FDA5C -> $0001                WOMM0           EQU     $01
00DA5C 0FDA5C -> $0257                MODRR           EQU     $0257
00DA5C 0FDA5C -> $0040                MODRR6          EQU     $40
00DA5C 0FDA5C -> $0020                MODRR5          EQU     $20
00DA5C 0FDA5C -> $0010                MODRR4          EQU     $10
00DA5C 0FDA5C -> $0008                MODRR3          EQU     $08
00DA5C 0FDA5C -> $0004                MODRR2          EQU     $04
00DA5C 0FDA5C -> $0002                MODRR1          EQU     $02
00DA5C 0FDA5C -> $0001                MODRR0          EQU     $01
00DA5C 0FDA5C -> $0258                PTP             EQU     $0258
00DA5C 0FDA5C -> $0080                PTP7            EQU     $80
00DA5C 0FDA5C -> $0040                PTP6            EQU     $40
00DA5C 0FDA5C -> $0020                PTP5            EQU     $20
00DA5C 0FDA5C -> $0010                PTP4            EQU     $10
00DA5C 0FDA5C -> $0008                PTP3            EQU     $08
00DA5C 0FDA5C -> $0004                PTP2            EQU     $04
00DA5C 0FDA5C -> $0002                PTP1            EQU     $02
00DA5C 0FDA5C -> $0001                PTP0            EQU     $01
00DA5C 0FDA5C -> $0080                PP7             EQU     $80
00DA5C 0FDA5C -> $0040                PP6             EQU     $40
00DA5C 0FDA5C -> $0020                PP5             EQU     $20
00DA5C 0FDA5C -> $0010                PP4             EQU     $10
00DA5C 0FDA5C -> $0008                PP3             EQU     $08
00DA5C 0FDA5C -> $0004                PP2             EQU     $04
00DA5C 0FDA5C -> $0002                PP1             EQU     $02
00DA5C 0FDA5C -> $0001                PP0             EQU     $01
00DA5C 0FDA5C -> $0259                PTIP            EQU     $0259
00DA5C 0FDA5C -> $0080                PTIP7           EQU     $80
00DA5C 0FDA5C -> $0040                PTIP6           EQU     $40
00DA5C 0FDA5C -> $0020                PTIP5           EQU     $20
00DA5C 0FDA5C -> $0010                PTIP4           EQU     $10
00DA5C 0FDA5C -> $0008                PTIP3           EQU     $08
00DA5C 0FDA5C -> $0004                PTIP2           EQU     $04
00DA5C 0FDA5C -> $0002                PTIP1           EQU     $02
00DA5C 0FDA5C -> $0001                PTIP0           EQU     $01
00DA5C 0FDA5C -> $025A                DDRP            EQU     $025A
00DA5C 0FDA5C -> $0080                DDRP7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRP6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRP5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRP4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRP3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRP2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRP1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRP0           EQU     $01
00DA5C 0FDA5C -> $025B                RDRP            EQU     $025B
00DA5C 0FDA5C -> $0080                RDRP7           EQU     $80
00DA5C 0FDA5C -> $0040                RDRP6           EQU     $40
00DA5C 0FDA5C -> $0020                RDRP5           EQU     $20
00DA5C 0FDA5C -> $0010                RDRP4           EQU     $10
00DA5C 0FDA5C -> $0008                RDRP3           EQU     $08
00DA5C 0FDA5C -> $0004                RDRP2           EQU     $04
00DA5C 0FDA5C -> $0002                RDRP1           EQU     $02
00DA5C 0FDA5C -> $0001                RDRP0           EQU     $01
00DA5C 0FDA5C -> $025C                PERP            EQU     $025C
00DA5C 0FDA5C -> $0080                PERP7           EQU     $80
00DA5C 0FDA5C -> $0040                PERP6           EQU     $40
00DA5C 0FDA5C -> $0020                PERP5           EQU     $20
00DA5C 0FDA5C -> $0010                PERP4           EQU     $10
00DA5C 0FDA5C -> $0008                PERP3           EQU     $08
00DA5C 0FDA5C -> $0004                PERP2           EQU     $04
00DA5C 0FDA5C -> $0002                PERP1           EQU     $02
00DA5C 0FDA5C -> $0001                PERP0           EQU     $01
00DA5C 0FDA5C -> $025D                PPSP            EQU     $025D
00DA5C 0FDA5C -> $0080                PPSP7           EQU     $80
00DA5C 0FDA5C -> $0040                PPSP6           EQU     $40
00DA5C 0FDA5C -> $0020                PPSP5           EQU     $20
00DA5C 0FDA5C -> $0010                PPSP4           EQU     $10
00DA5C 0FDA5C -> $0008                PPSP3           EQU     $08
00DA5C 0FDA5C -> $0004                PPSP2           EQU     $04
00DA5C 0FDA5C -> $0002                PPSP1           EQU     $02
00DA5C 0FDA5C -> $0001                PPSP0           EQU     $01
00DA5C 0FDA5C -> $025E                PIEP            EQU     $025E
00DA5C 0FDA5C -> $0080                PIEP7           EQU     $80
00DA5C 0FDA5C -> $0040                PIEP6           EQU     $40
00DA5C 0FDA5C -> $0020                PIEP5           EQU     $20
00DA5C 0FDA5C -> $0010                PIEP4           EQU     $10
00DA5C 0FDA5C -> $0008                PIEP3           EQU     $08
00DA5C 0FDA5C -> $0004                PIEP2           EQU     $04
00DA5C 0FDA5C -> $0002                PIEP1           EQU     $02
00DA5C 0FDA5C -> $0001                PIEP0           EQU     $01
00DA5C 0FDA5C -> $025F                PIFP            EQU     $025F
00DA5C 0FDA5C -> $0080                PIFP7           EQU     $80
00DA5C 0FDA5C -> $0040                PIFP6           EQU     $40
00DA5C 0FDA5C -> $0020                PIFP5           EQU     $20
00DA5C 0FDA5C -> $0010                PIFP4           EQU     $10
00DA5C 0FDA5C -> $0008                PIFP3           EQU     $08
00DA5C 0FDA5C -> $0004                PIFP2           EQU     $04
00DA5C 0FDA5C -> $0002                PIFP1           EQU     $02
00DA5C 0FDA5C -> $0001                PIFP0           EQU     $01
00DA5C 0FDA5C -> $0260                PTH             EQU     $0260
00DA5C 0FDA5C -> $0080                PTH7            EQU     $80
00DA5C 0FDA5C -> $0040                PTH6            EQU     $40
00DA5C 0FDA5C -> $0020                PTH5            EQU     $20
00DA5C 0FDA5C -> $0010                PTH4            EQU     $10
00DA5C 0FDA5C -> $0008                PTH3            EQU     $08
00DA5C 0FDA5C -> $0004                PTH2            EQU     $04
00DA5C 0FDA5C -> $0002                PTH1            EQU     $02
00DA5C 0FDA5C -> $0001                PTH0            EQU     $01
00DA5C 0FDA5C -> $0080                PH7             EQU     $80
00DA5C 0FDA5C -> $0040                PH6             EQU     $40
00DA5C 0FDA5C -> $0020                PH5             EQU     $20
00DA5C 0FDA5C -> $0010                PH4             EQU     $10
00DA5C 0FDA5C -> $0008                PH3             EQU     $08
00DA5C 0FDA5C -> $0004                PH2             EQU     $04
00DA5C 0FDA5C -> $0002                PH1             EQU     $02
00DA5C 0FDA5C -> $0001                PH0             EQU     $01
00DA5C 0FDA5C -> $0261                PTIH            EQU     $0261
00DA5C 0FDA5C -> $0080                PTIH7           EQU     $80
00DA5C 0FDA5C -> $0040                PTIH6           EQU     $40
00DA5C 0FDA5C -> $0020                PTIH5           EQU     $20
00DA5C 0FDA5C -> $0010                PTIH4           EQU     $10
00DA5C 0FDA5C -> $0008                PTIH3           EQU     $08
00DA5C 0FDA5C -> $0004                PTIH2           EQU     $04
00DA5C 0FDA5C -> $0002                PTIH1           EQU     $02
00DA5C 0FDA5C -> $0001                PTIH0           EQU     $01
00DA5C 0FDA5C -> $0262                DDRH            EQU     $0262
00DA5C 0FDA5C -> $0080                DDRH7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRH6           EQU     $40
00DA5C 0FDA5C -> $0020                DDRH5           EQU     $20
00DA5C 0FDA5C -> $0010                DDRH4           EQU     $10
00DA5C 0FDA5C -> $0008                DDRH3           EQU     $08
00DA5C 0FDA5C -> $0004                DDRH2           EQU     $04
00DA5C 0FDA5C -> $0002                DDRH1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRH0           EQU     $01
00DA5C 0FDA5C -> $0263                RDRH            EQU     $0263
00DA5C 0FDA5C -> $0080                RDRH7           EQU     $80
00DA5C 0FDA5C -> $0040                RDRH6           EQU     $40
00DA5C 0FDA5C -> $0020                RDRH5           EQU     $20
00DA5C 0FDA5C -> $0010                RDRH4           EQU     $10
00DA5C 0FDA5C -> $0008                RDRH3           EQU     $08
00DA5C 0FDA5C -> $0004                RDRH2           EQU     $04
00DA5C 0FDA5C -> $0002                RDRH1           EQU     $02
00DA5C 0FDA5C -> $0001                RDRH0           EQU     $01
00DA5C 0FDA5C -> $0264                PERH            EQU     $0264
00DA5C 0FDA5C -> $0080                PERH7           EQU     $80
00DA5C 0FDA5C -> $0040                PERH6           EQU     $40
00DA5C 0FDA5C -> $0020                PERH5           EQU     $20
00DA5C 0FDA5C -> $0010                PERH4           EQU     $10
00DA5C 0FDA5C -> $0008                PERH3           EQU     $08
00DA5C 0FDA5C -> $0004                PERH2           EQU     $04
00DA5C 0FDA5C -> $0002                PERH1           EQU     $02
00DA5C 0FDA5C -> $0001                PERH0           EQU     $01
00DA5C 0FDA5C -> $0265                PPSH            EQU     $0265
00DA5C 0FDA5C -> $0080                PPSH7           EQU     $80
00DA5C 0FDA5C -> $0040                PPSH6           EQU     $40
00DA5C 0FDA5C -> $0020                PPSH5           EQU     $20
00DA5C 0FDA5C -> $0010                PPSH4           EQU     $10
00DA5C 0FDA5C -> $0008                PPSH3           EQU     $08
00DA5C 0FDA5C -> $0004                PPSH2           EQU     $04
00DA5C 0FDA5C -> $0002                PPSH1           EQU     $02
00DA5C 0FDA5C -> $0001                PPSH0           EQU     $01
00DA5C 0FDA5C -> $0266                PIEH            EQU     $0266
00DA5C 0FDA5C -> $0080                PIEH7           EQU     $80
00DA5C 0FDA5C -> $0040                PIEH6           EQU     $40
00DA5C 0FDA5C -> $0020                PIEH5           EQU     $20
00DA5C 0FDA5C -> $0010                PIEH4           EQU     $10
00DA5C 0FDA5C -> $0008                PIEH3           EQU     $08
00DA5C 0FDA5C -> $0004                PIEH2           EQU     $04
00DA5C 0FDA5C -> $0002                PIEH1           EQU     $02
00DA5C 0FDA5C -> $0001                PIEH0           EQU     $01
00DA5C 0FDA5C -> $0267                PIFH            EQU     $0267
00DA5C 0FDA5C -> $0080                PIFH7           EQU     $80
00DA5C 0FDA5C -> $0040                PIFH6           EQU     $40
00DA5C 0FDA5C -> $0020                PIFH5           EQU     $20
00DA5C 0FDA5C -> $0010                PIFH4           EQU     $10
00DA5C 0FDA5C -> $0008                PIFH3           EQU     $08
00DA5C 0FDA5C -> $0004                PIFH2           EQU     $04
00DA5C 0FDA5C -> $0002                PIFH1           EQU     $02
00DA5C 0FDA5C -> $0001                PIFH0           EQU     $01
00DA5C 0FDA5C -> $0268                PTJ             EQU     $0268
00DA5C 0FDA5C -> $0080                PTJ7            EQU     $80
00DA5C 0FDA5C -> $0040                PTJ6            EQU     $40
00DA5C 0FDA5C -> $0002                PTJ1            EQU     $02
00DA5C 0FDA5C -> $0001                PTJ0            EQU     $01
00DA5C 0FDA5C -> $0080                PJ7             EQU     $80
00DA5C 0FDA5C -> $0040                PJ6             EQU     $40
00DA5C 0FDA5C -> $0002                PJ1             EQU     $02
00DA5C 0FDA5C -> $0001                PJ0             EQU     $01
00DA5C 0FDA5C -> $0269                PTIJ            EQU     $0269
00DA5C 0FDA5C -> $0080                PTIJ7           EQU     $80
00DA5C 0FDA5C -> $0040                PTIJ6           EQU     $40
00DA5C 0FDA5C -> $0002                PTIJ1           EQU     $02
00DA5C 0FDA5C -> $0001                PTIJ0           EQU     $01
00DA5C 0FDA5C -> $026A                DDRJ            EQU     $026A
00DA5C 0FDA5C -> $0080                DDRJ7           EQU     $80
00DA5C 0FDA5C -> $0040                DDRJ6           EQU     $40
00DA5C 0FDA5C -> $0002                DDRJ1           EQU     $02
00DA5C 0FDA5C -> $0001                DDRJ0           EQU     $01
00DA5C 0FDA5C -> $026B                RDRJ            EQU     $026B
00DA5C 0FDA5C -> $0080                RDRJ7           EQU     $80
00DA5C 0FDA5C -> $0040                RDRJ6           EQU     $40
00DA5C 0FDA5C -> $0002                RDRJ1           EQU     $02
00DA5C 0FDA5C -> $0001                RDRJ0           EQU     $01
00DA5C 0FDA5C -> $026C                PERJ            EQU     $026C
00DA5C 0FDA5C -> $0080                PERJ7           EQU     $80
00DA5C 0FDA5C -> $0040                PERJ6           EQU     $40
00DA5C 0FDA5C -> $0002                PERJ1           EQU     $02
00DA5C 0FDA5C -> $0001                PERJ0           EQU     $01
00DA5C 0FDA5C -> $026D                PPSJ            EQU     $026D
00DA5C 0FDA5C -> $0080                PPSJ7           EQU     $80
00DA5C 0FDA5C -> $0040                PPSJ6           EQU     $40
00DA5C 0FDA5C -> $0002                PPSJ1           EQU     $02
00DA5C 0FDA5C -> $0001                PPSJ0           EQU     $01
00DA5C 0FDA5C -> $026E                PIEJ            EQU     $026E
00DA5C 0FDA5C -> $0080                PIEJ7           EQU     $80
00DA5C 0FDA5C -> $0040                PIEJ6           EQU     $40
00DA5C 0FDA5C -> $0002                PIEJ1           EQU     $02
00DA5C 0FDA5C -> $0001                PIEJ0           EQU     $01
00DA5C 0FDA5C -> $026F                PIFJ            EQU     $026F
00DA5C 0FDA5C -> $0080                PIFJ7           EQU     $80
00DA5C 0FDA5C -> $0040                PIFJ6           EQU     $40
00DA5C 0FDA5C -> $0002                PIFJ1           EQU     $02
00DA5C 0FDA5C -> $0001                PIFJ0           EQU     $01
                                      ;$0270 to $027F reserved
00DA5C 0FDA5C -> $0280                CAN4CTL0        EQU     $0280
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
00DA5C 0FDA5C -> $0281                CAN4CTL1        EQU     $0281
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
00DA5C 0FDA5C -> $0282                CAN4BTR0        EQU     $0282
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
00DA5C 0FDA5C -> $0283                CAN4BTR1        EQU     $0283
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
00DA5C 0FDA5C -> $0284                CAN4RFLG        EQU     $0284
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
00DA5C 0FDA5C -> $0285                CAN4RIER        EQU     $0285
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
00DA5C 0FDA5C -> $0286                CAN4TFLG        EQU     $0286
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
00DA5C 0FDA5C -> $0287                CAN4TIER        EQU     $0287
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
00DA5C 0FDA5C -> $0288                CAN4TARQ        EQU     $0288
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
00DA5C 0FDA5C -> $0289                CAN4TAAK        EQU     $0289
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
00DA5C 0FDA5C -> $028A                CAN4TBSEL       EQU     $028A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
00DA5C 0FDA5C -> $028B                CAN4IDAC        EQU     $028B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$028C  reserved
00DA5C 0FDA5C -> $028D                CAN4MISC        EQU     $028D
                                      ;BOHOLD         EQU     $01
00DA5C 0FDA5C -> $028E                CAN4RXERR       EQU     $028E
00DA5C 0FDA5C -> $028F                CAN4TXERR       EQU     $028F
00DA5C 0FDA5C -> $0290                CAN4IDAR0       EQU     $0290
00DA5C 0FDA5C -> $0291                CAN4IDAR1       EQU     $0291
00DA5C 0FDA5C -> $0292                CAN4IDAR2       EQU     $0292
00DA5C 0FDA5C -> $0293                CAN4IDAR3       EQU     $0293
00DA5C 0FDA5C -> $0294                CAN4IDMR0       EQU     $0294
00DA5C 0FDA5C -> $0295                CAN4IDMR1       EQU     $0295
00DA5C 0FDA5C -> $0296                CAN4IDMR2       EQU     $0296
00DA5C 0FDA5C -> $0297                CAN4IDMR3       EQU     $0297
00DA5C 0FDA5C -> $0298                CAN4IDAR4       EQU     $0298
00DA5C 0FDA5C -> $0299                CAN4IDAR5       EQU     $0299
00DA5C 0FDA5C -> $029A                CAN4IDAR6       EQU     $029A
00DA5C 0FDA5C -> $029B                CAN4IDAR7       EQU     $029B
00DA5C 0FDA5C -> $029C                CAN4IDMR4       EQU     $029C
00DA5C 0FDA5C -> $029D                CAN4IDMR5       EQU     $029D
00DA5C 0FDA5C -> $029E                CAN4IDMR6       EQU     $029E
00DA5C 0FDA5C -> $029F                CAN4IDMR7       EQU     $029F
00DA5C 0FDA5C -> $02A0                CAN4RXIDR0      EQU     $02A0
00DA5C 0FDA5C -> $02A1                CAN4RXIDR1      EQU     $02A1
00DA5C 0FDA5C -> $02A2                CAN4RXIDR2      EQU     $02A2
00DA5C 0FDA5C -> $02A3                CAN4RXIDR3      EQU     $02A3
00DA5C 0FDA5C -> $02A4                CAN4RXDSR0      EQU     $02A4
00DA5C 0FDA5C -> $02A5                CAN4RXDSR1      EQU     $02A5
00DA5C 0FDA5C -> $02A6                CAN4RXDSR2      EQU     $02A6
00DA5C 0FDA5C -> $02A7                CAN4RXDSR3      EQU     $02A7
00DA5C 0FDA5C -> $02A8                CAN4RXDSR4      EQU     $02A8
00DA5C 0FDA5C -> $02A9                CAN4RXDSR5      EQU     $02A9
00DA5C 0FDA5C -> $02AA                CAN4RXDSR6      EQU     $02AA
00DA5C 0FDA5C -> $02AB                CAN4RXDSR7      EQU     $02AB
00DA5C 0FDA5C -> $02AC                CAN4RXDLR       EQU     $02AC
                                      ;$02AD reserved
00DA5C 0FDA5C -> $02AE                CAN4RTSRH       EQU     $02AE
00DA5C 0FDA5C -> $02AF                CAN4RTSRL       EQU     $02AF
00DA5C 0FDA5C -> $02B0                CAN4TXIDR0      EQU     $02B0
00DA5C 0FDA5C -> $02B1                CAN4TXIDR1      EQU     $02B1
00DA5C 0FDA5C -> $02B2                CAN4TXIDR2      EQU     $02B2
00DA5C 0FDA5C -> $02B2                CAN4TXIDR2      EQU     $02B2
00DA5C 0FDA5C -> $02B3                CAN4TXIDR3      EQU     $02B3
00DA5C 0FDA5C -> $02B4                CAN4TXDSR0      EQU     $02B4
00DA5C 0FDA5C -> $02B5                CAN4TXDSR1      EQU     $02B5
00DA5C 0FDA5C -> $02B6                CAN4TXDSR2      EQU     $02B6
00DA5C 0FDA5C -> $02B7                CAN4XDSR3       EQU     $02B7
00DA5C 0FDA5C -> $02B7                CAN4TXDSR3      EQU     $02B7
00DA5C 0FDA5C -> $02B8                CAN4TXDSR4      EQU     $02B8
00DA5C 0FDA5C -> $02B9                CAN4TXDSR5      EQU     $02B9
00DA5C 0FDA5C -> $02BA                CAN4TXDSR6      EQU     $02BA
00DA5C 0FDA5C -> $02BB                CAN4TXDSR7      EQU     $02BB
00DA5C 0FDA5C -> $02BC                CAN4TXDLR       EQU     $02BC
00DA5C 0FDA5C -> $02BD                CAN4TXTBPR      EQU     $02BD
00DA5C 0FDA5C -> $02BE                CAN4TXTSRH      EQU     $02BE
00DA5C 0FDA5C -> $02BF                CAN4TXTSRL      EQU     $02BF
                                      ;$02C0 to $03FF reserved
                                      ;NVM locations
00DA5C 0FDA5C -> $FF00                BAKEY0          EQU     $FF00
00DA5C 0FDA5C -> $FF02                BAKEY1          EQU     $FF02
00DA5C 0FDA5C -> $FF04                BAKEY2          EQU     $FF04
00DA5C 0FDA5C -> $FF06                BAKEY3          EQU     $FF06
00DA5C 0FDA5C -> $FF0C                NVFPROT         EQU     $FF0C
00DA5C 0FDA5C -> $0080                FPOPEN          EQU     $80
00DA5C 0FDA5C -> $0040                RNV6            EQU     $40
00DA5C 0FDA5C -> $0020                FPHDIS          EQU     $20
00DA5C 0FDA5C -> $0010                FPHS1           EQU     $10
00DA5C 0FDA5C -> $0008                FPHS0           EQU     $08
00DA5C 0FDA5C -> $0004                FPLDIS          EQU     $04
00DA5C 0FDA5C -> $0002                FPLS1           EQU     $02
00DA5C 0FDA5C -> $0001                FPLS0           EQU     $01
00DA5C 0FDA5C -> $FF0D                NVEPROT         EQU     $FF0D
00DA5C 0FDA5C -> $0080                EPOPEN          EQU     $80
00DA5C 0FDA5C -> $0040                RNV6            EQU     $40
00DA5C 0FDA5C -> $0020                RNV5            EQU     $20
00DA5C 0FDA5C -> $0010                RNV4            EQU     $10
00DA5C 0FDA5C -> $0008                EPDIS           EQU     $08
00DA5C 0FDA5C -> $0004                EPS2            EQU     $04
00DA5C 0FDA5C -> $0002                EPS1            EQU     $02
00DA5C 0FDA5C -> $0001                EPS0            EQU     $01
00DA5C 0FDA5C -> $FF0E                NVFOPT          EQU     $FF0E
00DA5C 0FDA5C -> $0080                NV7             EQU     $80
00DA5C 0FDA5C -> $0040                NV6             EQU     $40
00DA5C 0FDA5C -> $0020                NV5             EQU     $20
00DA5C 0FDA5C -> $0010                NV4             EQU     $10
00DA5C 0FDA5C -> $0008                NV3             EQU     $08
00DA5C 0FDA5C -> $0004                NV2             EQU     $04
00DA5C 0FDA5C -> $0002                NV1             EQU     $02
00DA5C 0FDA5C -> $0001                NV0             EQU     $01
00DA5C 0FDA5C -> $FF0F                NVFSEC          EQU     $FF0F
00DA5C 0FDA5C -> $0080                KEYEN1          EQU     $80
00DA5C 0FDA5C -> $0040                KEYEN0          EQU     $40
00DA5C 0FDA5C -> $0020                RNV5            EQU     $20
00DA5C 0FDA5C -> $0010                RNV4            EQU     $10
00DA5C 0FDA5C -> $0008                RNV3            EQU     $08
00DA5C 0FDA5C -> $0004                RNV2            EQU     $04
00DA5C 0FDA5C -> $0002                SEC1            EQU     $02
00DA5C 0FDA5C -> $0001                SEC0            EQU     $01
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (S12DP256-Mini-EVB)                          #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports. The OpenBDM firmware      #
                                      ;#    assumes the following I/O pin configuration of the S12C128 MCU:          #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD00 - DBUG1                      (input        no pull  )             #
                                      ;#     PAD01 - DBUG2                      (input        no pull  )             #
                                      ;#     PAD02 - unused                     (analog       no pull  )             #
                                      ;#     PAD03 - unused                     (analog       no pull  )             #
                                      ;#     PAD04 - unused                     (analog       no pull  )             #
                                      ;#     PAD05 - unused                     (analog       no pull  )             #
                                      ;#     PAD06 - unused                     (analog       no pull  )             #
                                      ;#     PAD07 - unused                     (analog       no pull  )             #
                                      ;#     PAD08 - unused                     (analog       no pull  )             #
                                      ;#     PAD09 - unused                     (analog       no pull  )             #
                                      ;#     PAD10 - unused                     (analog       no pull  )             #
                                      ;#     PAD11 - unused                     (analog       no pull  )             #
                                      ;#     PAD12 - unused                     (analog       no pull  )             #
                                      ;#     PAD13 - unused                     (analog       no pull  )             #
                                      ;#     PAD14 - unused                     (analog       no pull  )             #
                                      ;#     PAD15 - unused                     (analog       no pull  )             #
                                      ;#     PAD16 - unused                     (analog       no pull  )             #
                                      ;#     PAD17 - unused                     (analog       no pull  )             #
                                      ;#     PAD18 - unused                     (analog       no pull  )             #
                                      ;#     PAD19 - unused                     (analog       no pull  )             #
                                      ;#     PAD20 - unused                     (analog       no pull  )             #
                                      ;#     PAD21 - unused                     (analog       no pull  )             #
                                      ;#     PAD22 - unused                     (analog       no pull  )             #
                                      ;#     PAD23 - unused                     (analog       no pull  )             #
                                      ;#     PAD24 - unused                     (analog       no pull  )             #
                                      ;#     PAD25 - unused                     (analog       no pull  )             #
                                      ;#     PAD26 - unused                     (analog       no pull  )             #
                                      ;#     PAD27 - unused                     (analog       no pull  )             #
                                      ;#     PAD28 - unused                     (analog       no pull  )             #
                                      ;#     PAD29 - unused                     (analog       no pull  )             #
                                      ;#     PAD30 - unused                     (analog       no pull  )             #
                                      ;#     PAD30 - unused                     (analog       no pull  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - unused                       (input        pull-up  )             #
                                      ;#     PA1 - unused                       (input        pull-up  )             #
                                      ;#     PA2 - unused                       (input        pull-up  )             #
                                      ;#     PA3 - unused                       (input        pull-up  )             #
                                      ;#     PA4 - unused                       (input        pull-up  )             #
                                      ;#     PA5 - unused                       (input        pull-up  )             #
                                      ;#     PA6 - unused                       (input        pull-up  )             #
                                      ;#     PA7 - unused                       (input        pull-up  )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - unused                       (input        pull-up  )             #
                                      ;#     PB1 - unused                       (input        pull-up  )             #
                                      ;#     PB2 - unused                       (input        pull-up  )             #
                                      ;#     PB3 - unused                       (input        pull-up  )             #
                                      ;#     PB4 - unused                       (input        pull-up  )             #
                                      ;#     PB5 - unused                       (input        pull-up  )             #
                                      ;#     PB6 - unused                       (input        pull-up  )             #
                                      ;#     PB7 - unused                       (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - /XIRQ                        (input        pull-up  )             #
                                      ;#     PE1 - /IRQ                         (input        pull-up  )             #
                                      ;#     PE2 - unused                       (input        pull-up  )             #
                                      ;#     PE3 - unused                       (input        pull-up  )             #
                                      ;#     PE4 - unused                       (input        pull-up  )             #
                                      ;#     PE5 - MODA                         (input        pull-up  )             #
                                      ;#     PE6 - MODB                         (input        pull-up  )             #
                                      ;#     PE7 - XCLKS                        (input        pull-up  )             #
                                      ;#    Port H:                                                                  #
                                      ;#     PH0 - unused                       (input        pull-up  )             #
                                      ;#     PH1 - unused                       (input        pull-up  )             #
                                      ;#     PH2 - unused                       (input        pull-up  )             #
                                      ;#     PH3 - unused                       (input        pull-up  )             #
                                      ;#     PH4 - unused                       (input        pull-up  )             #
                                      ;#     PH5 - unused                       (input        pull-up  )             #
                                      ;#     PH6 - unused                       (input        pull-up  )             #
                                      ;#     PH7 - unused                       (input        pull-up  )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - unused                       (input        pull-up  )             #
                                      ;#     PJ1 - unused                       (input        pull-up  )             #
                                      ;#     PJ6 - unused                       (input        pull-up  )             #
                                      ;#     PJ7 - unused                       (input        pull-up  )             #
                                      ;#    Port K:                                                                  #
                                      ;#     PK0 - unused                       (input        pull-up  )             #
                                      ;#     PK1 - unused                       (input        pull-up  )             #
                                      ;#     PK2 - unused                       (input        pull-up  )             #
                                      ;#     PK3 - unused                       (input        pull-up  )             #
                                      ;#     PK4 - unused                       (input        pull-up  )             #
                                      ;#     PK5 - unused                       (input        pull-up  )             #
                                      ;#     PK7 - unused                       (input        pull-up  )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - unused                       (input        pull-up  )             #
                                      ;#     PM1 - unused                       (input        pull-up  )             #
                                      ;#     PM2 - unused                       (input        pull-up  )             #
                                      ;#     PM3 - unused                       (input        pull-up  )             #
                                      ;#     PM4 - unused                       (input        pull-up  )             #
                                      ;#     PM5 - unused                       (input        pull-up  )             #
                                      ;#     PM6 - unused                       (input        pull-up  )             #
                                      ;#     PM7 - unused                       (input        pull-up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - unused                       (output       pull-up  )             #
                                      ;#     PP1 - unused                       (output       pull-up  )             #
                                      ;#     PP2 - unused                       (output       pull-up  )             #
                                      ;#     PP3 - unused                       (output       pull-up  )             #
                                      ;#     PP4 - unused                       (output       pull-up  )             #
                                      ;#     PP5 - unused                       (output       pull-up  )             #
                                      ;#     PP6 - unused                       (output       pull-up  )             #
                                      ;#     PP7 - unused                       (output       pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI0 RX                      (input        no pull  )             #
                                      ;#     PS1 - SCI0 TX                      (output       high     )             #
                                      ;#     PS2 - SCI1 RX                      (input        no pull  )             #
                                      ;#     PS3 - SCI1 TX                      (output       high     )             #
                                      ;#     PS4 - unused                       (input        pull-up  )             #
                                      ;#     PS5 - unused                       (input        pull-up  )             #
                                      ;#     PS6 - unused                       (input        pull-up  )             #
                                      ;#     PS7 - unused                       (input        pull-up  )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - unused                       (input        pull-up  )             #
                                      ;#     PT1 - unused                       (input        pull-up  )             #
                                      ;#     PT2 - unused                       (input        pull-up  )             #
                                      ;#     PT3 - unused                       (input        pull-up  )             #
                                      ;#     PT4 - unused                       (input        pull-up  )             #
                                      ;#     PT5 - unused                       (input        pull-up  )             #
                                      ;#     PT6 - Target BKGD                  (input/output pull-up  )             #
                                      ;#     PT7 - Target RESET                 (input/output pull-up  )             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 15, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
00D98B 0FD98B -> $D98B                GPIO_VARS_END           EQU     *
00D98B 0FD98B -> $FD98B               GPIO_VARS_END_LIN       EQU     @
                                                      ;CLR    PPST
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3C3 0FD3C3                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
00D3C3 0FD3C3 -> $D3C3                GPIO_CODE_END           EQU     *
00D3C3 0FD3C3 -> $FD3C3               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA5C 0FDA5C                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
00DA5C 0FDA5C -> $DA5C                GPIO_TABS_END           EQU     *
00DA5C 0FDA5C -> $FDA5C               GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (S12DP256-Mini-EVB)                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module module performs all the necessary steps to initialize the    #
                                      ;#    device after each reset.                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 9, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Updated memory mapping                                               #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                   S12DP256
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;       FLASH->+ +-------------+ $4000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |  Tables     |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $EF80
                                      ;              | |  Vectors    |
                                      ;              | +-------------+ $F000
                                      ;              | | BootLoader  |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                   S12DP256
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0400
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $D000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $FF80
                                      ;              | |  Vectors    |
                                      ;              + +-------------+
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;RAM or flash
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory sizes
00DA5C 0FDA5C -> $0400                MMAP_REG_SIZE           EQU     $0400           ;  1K
00DA5C 0FDA5C -> $3000                MMAP_RAM_SIZE           EQU     $3000           ; 12K
00DA5C 0FDA5C -> $40000               MMAP_FLASH_SIZE         EQU     $40000          ;256K
                                      ;# Memory Locations
00DA5C 0FDA5C -> $0000                MMAP_REG_START          EQU     $0000
00DA5C 0FDA5C -> $0400                MMAP_REG_END            EQU     MMAP_REG_START+MMAP_REG_SIZE
00DA5C 0FDA5C -> $0000                MMAP_INITRG_VAL         EQU     MMAP_REG_START>>8
00DA5C 0FDA5C -> $10000               MMAP_RAM_END            EQU     $10000
00DA5C 0FDA5C -> $D000                MMAP_RAM_START          EQU     MMAP_RAM_END-MMAP_RAM_SIZE
00DA5C 0FDA5C -> $00C1                MMAP_INITRM_VAL         EQU     ((MMAP_RAM_START>>8)&$C0)|RAMHAL
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
00D98B 0FD98B -> $D98B                MMAP_VARS_END           EQU     *
00D98B 0FD98B -> $FD98B               MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3C3 0FD3C3                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
00D3C3 0FD3C3 -> $D3C3                MMAP_CODE_END           EQU     *
00D3C3 0FD3C3 -> $FD3C3               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA5C 0FDA5C                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
00DA5C 0FDA5C -> $DA5C                MMAP_TABS_END           EQU     *
00DA5C 0FDA5C -> $FDA5C               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00DA5C 0FDA5C -> $D994                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
00DA5C 0FDA5C -> $D9AF                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
00D98B 0FD98B -> $D98B                SSTACK_VARS_END         EQU     *
00D98B 0FD98B -> $FD98B               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3C3 0FD3C3                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
00D3C3 0FD3C3 -> $D3C3                SSTACK_OF               EQU     *
00D3C3 0FD3C3 MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
00D3C3 0FD3C3 CE DA 5C                                        LDX     #\1                                              (RESET_FATAL)
00D3C6 0FD3C6 MACRO                                           RESET_FATAL_X                                            (RESET_FATAL)
                                      ;#Perform a reset due to a fatal error (error code in X)                         (RESET_FATAL/RESET_FATAL_X)
                                      ; args: X: message pointer                                                       (RESET_FATAL/RESET_FATAL_X)
                                                              ;BGND                                                    (RESET_FATAL/RESET_FATAL_X)
00D3C6 0FD3C6 06 D8 45                                        JOB     RESET_FATAL                                      (RESET_FATAL/RESET_FATAL_X)
                                      ;#Handle stack underflows
00D3C9 0FD3C9 -> $D3C9                SSTACK_UF               EQU     *
00D3C9 0FD3C9 MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
00D3C9 0FD3C9 CE DA 75                                        LDX     #\1                                              (RESET_FATAL)
00D3CC 0FD3CC MACRO                                           RESET_FATAL_X                                            (RESET_FATAL)
                                      ;#Perform a reset due to a fatal error (error code in X)                         (RESET_FATAL/RESET_FATAL_X)
                                      ; args: X: message pointer                                                       (RESET_FATAL/RESET_FATAL_X)
                                                              ;BGND                                                    (RESET_FATAL/RESET_FATAL_X)
00D3CC 0FD3CC 06 D8 45                                        JOB     RESET_FATAL                                      (RESET_FATAL/RESET_FATAL_X)
00D3CF 0FD3CF -> $D3CF                SSTACK_CODE_END         EQU     *
00D3CF 0FD3CF -> $FD3CF               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA5C 0FDA5C                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
00DA5C 0FDA5C 53 75 62 72 6F 75 74 69 SSTACK_MSG_OF           FCS     "Subroutine stack overflow"
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
00DA75 0FDA75 53 75 62 72 6F 75 74 69 SSTACK_MSG_UF           FCS     "Subroutine stack underflow"
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
00DA8F 0FDA8F -> $DA8F                SSTACK_TABS_END         EQU     *
00DA8F 0FDA8F -> $FDA8F               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    ERROR  - Error Handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
                                      ;CPU
00DA8F 0FDA8F -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00DA8F 0FDA8F -> $0040                ISTACK_CCR              EQU     %0100_0000
00DA8F 0FDA8F -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
00D98B 0FD98B -> $D98B                ISTACK_TOP              EQU     *
00D98B 0FD98B                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
00D994 0FD994                                                 DS      SSTACK_DEPTH
00D9AF 0FD9AF -> $D9AF                ISTACK_BOTTOM           EQU     *
00D9AF 0FD9AF -> $D9AF                ISTACK_VARS_END         EQU     *
00D9AF 0FD9AF -> $FD9AF               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3CF 0FD3CF                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
00D3CF 0FD3CF -> $D3CF                ISTACK_CODE_END         EQU     *
00D3CF 0FD3CF -> $FD3CF               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA8F 0FDA8F                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
00DA8F 0FDA8F -> $DA8F                ISTACK_TABS_END         EQU     *
00DA8F 0FDA8F -> $FDA8F               ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
00DA8F 0FDA8F -> $0000                CLOCK_VCOFRQ            EQU     $0              ;0=[ 32MHz.. 48MHz],
                                                                                      ;1=[>48MHz.. 80MHz],
                                                                                      ;3=[>80MHz..120MHZ]
                                      ;#Reference clock frequency
00DA8F 0FDA8F -> $0000                CLOCK_REFFRQ            EQU     $0              ;0=[  1MHz.. 2MHz],
                                                                                      ;1=[> 2MHz.. 6MHz],
                                                                                      ;2=[> 6MHz..12MHz],
                                                                                      ;3=[>12MHz..]
                                      ;#Reference clock divider
00DA8F 0FDA8F -> $0003                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
00DA8F 0FDA8F -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
00DA8F 0FDA8F -> $1803                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9AF 0FD9AF                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
00D9AF 0FD9AF -> $D9AF                CLOCK_VARS_END          EQU     *
00D9AF 0FD9AF -> $FD9AF               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3CF 0FD3CF                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
00D3CF 0FD3CF -> $D3CF                CLOCK_ISR               EQU     *
00D3CF 0FD3CF 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
00D3D4 0FD3D4 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
00D3D9 0FD3D9 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00D3D9 0FD3D9 8F D9 8B                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00D3DC 0FD3DC 25 06                                           BLO     OF                                               (ISTACK_RTI)
00D3DE 0FD3DE 8F D9 A6                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00D3E1 0FD3E1 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00D3E3 0FD3E3 0B                                              RTI                                                      (ISTACK_RTI)
00D3E4 0FD3E4 00                      OF                      BGND                                                     (ISTACK_RTI)
00D3E5 0FD3E5 00                      UF                      BGND                                                     (ISTACK_RTI)
00D3E6 0FD3E6 -> $D3E6                CLOCK_CODE_END          EQU     *
00D3E6 0FD3E6 -> $FD3E6               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA8F 0FDA8F                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
00DA8F 0FDA8F -> $DA8F                CLOCK_TABS_END          EQU     *
00DA8F 0FDA8F -> $FDA8F               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
00DA8F 0FDA8F -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
00DA8F 0FDA8F -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9AF 0FD9AF                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
00D9AF 0FD9AF -> $D9AF                COP_VARS_END            EQU     *
00D9AF 0FD9AF -> $FD9AF               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3E6 0FD3E6                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
00D3E6 0FD3E6 -> $D3E6                COP_CODE_END            EQU     *
00D3E6 0FD3E6 -> $FD3E6               COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA8F 0FDA8F                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
00DA8F 0FDA8F -> $DA8F                COP_TABS_END            EQU     *
00DA8F 0FDA8F -> $FDA8F               COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     unasigned                                                     #
                                      ;#      IC5:     BDM (capture posedges on BKGD pin)                            #
                                      ;#      IC6/OC5: BDM (capture negedges on BKGD pin/toggle BKGD pin)            #
                                      ;#      OC7:     BDM (toggle BKGD pin/timeouts)                                #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
00DA8F 0FDA8F -> $0001                TIM_DIV2_OFF            EQU     1       ;default no clock divider
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
00DA8F 0FDA8F -> $000F                TIM_SCI                 EQU     $0F     ;all channels
00DA8F 0FDA8F -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
00DA8F 0FDA8F -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
00DA8F 0FDA8F -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
00DA8F 0FDA8F -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
00DA8F 0FDA8F -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
00DA8F 0FDA8F -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
00DA8F 0FDA8F -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
00DA8F 0FDA8F -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9AF 0FD9AF                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
00D9AF 0FD9AF -> $D9AF                TIM_VARS_END            EQU     *
00D9AF 0FD9AF -> $FD9AF               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3E6 0FD3E6                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00D3E6 0FD3E6 -> $D3E6                TIM_CODE_END            EQU     *
00D3E6 0FD3E6 -> $FD3E6               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA8F 0FDA8F                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
00DA8F 0FDA8F -> $DA8F                TIM_TABS_END            EQU     *
00DA8F 0FDA8F -> $FDA8F               TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;#    LED    - LED driver                                                      #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - The bus clock must be set to 24.576MHz                                 #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - changed selection of detectable baud rates                           #
                                      ;#      - stop baud rate detection when receiving a corret character           #
                                      ;#      - stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
00DA8F 0FDA8F -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF reminder intervall
00DA8F 0FDA8F -> $0EE6                SCI_XONXOFF_REMINDER    EQU     (10*CLOCK_BUS_FREQ)/65536
                                      ;RTS/CTS pins
                                      ;Delay counter
                                      ;-------------
00DA8F 0FDA8F -> $0003                SCI_DLY_OC              EQU     $3              ;default is OC3
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character
                                      ;Detect SUSPEND character
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;ECT or TIM (SCI_BD_ECT or SCI_BD_TIM)
00DA8F 0FDA8F -> $0001                SCI_BD_TIM              EQU     1               ;default is TIM
                                      ;Input capture channels
00DA8F 0FDA8F -> $0000                SCI_BD_ICPE             EQU     $0              ;default is IC0
00DA8F 0FDA8F -> $0001                SCI_BD_ICNE             EQU     $1              ;default is IC1
00DA8F 0FDA8F -> $0000                SCI_BD_IC               EQU     $0              ;default is IC0
                                      ;Output compare channels
00DA8F 0FDA8F -> $0002                SCI_BD_OC               EQU     $2              ;default is OC2
                                      ;Log captured BD pulse length
00DA8F 0FDA8F -> $0001                SCI_BD_LOG_OFF          EQU     1               ;default is SCI_BD_LOG_OFF
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Enable error signaling (if enabled, macros SCI_ERRSIG_ON and SCI_ERRSIG_OFF must be defined)
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;.MC9S12DP25625 SCI IRQ workaround (MUCts00510)
                                      ;----------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
00DA8F 0FDA8F -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
00DA8F 0FDA8F -> $0516                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
00DA8F 0FDA8F -> $028B                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
00DA8F 0FDA8F -> $0146                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
00DA8F 0FDA8F -> $00D9                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
00DA8F 0FDA8F -> $00A3                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
00DA8F 0FDA8F -> $006D                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
00DA8F 0FDA8F -> $0051                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
00DA8F 0FDA8F -> $0036                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
00DA8F 0FDA8F -> $0029                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
00DA8F 0FDA8F -> $001B                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
00DA8F 0FDA8F -> $0014                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
00DA8F 0FDA8F -> $000E                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
00DA8F 0FDA8F -> $000A                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
00DA8F 0FDA8F -> $00A3                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
00DA8F 0FDA8F -> $1999                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
00DA8F 0FDA8F -> $0004                SCI_8N1                 EQU       ILT           ;8N1
00DA8F 0FDA8F -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
00DA8F 0FDA8F -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
00DA8F 0FDA8F -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
00DA8F 0FDA8F -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
00DA8F 0FDA8F -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
00DA8F 0FDA8F -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
00DA8F 0FDA8F -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
00DA8F 0FDA8F -> $0013                SCI_XOFF                EQU     $13             ;block transmission
00DA8F 0FDA8F -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
00DA8F 0FDA8F -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
00DA8F 0FDA8F -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
00DA8F 0FDA8F -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
00DA8F 0FDA8F -> $0007                SCI_TXBUF_MASK          EQU     $07             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
00DA8F 0FDA8F -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
00DA8F 0FDA8F -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
00DA8F 0FDA8F -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
00DA8F 0FDA8F -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
00DA8F 0FDA8F -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
00DA8F 0FDA8F -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
00DA8F 0FDA8F -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
00DA8F 0FDA8F -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Timer setup
00DA8F 0FDA8F -> $0000                SCI_BD_TIOS_VAL         EQU     0
00DA8F 0FDA8F -> $0001                SCI_SET_TIOS            EQU     1
00DA8F 0FDA8F -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
                                      ;#Baud rate detection
00DA8F 0FDA8F -> $0008                SCI_BD_RECOVCNT_INIT    EQU     8
00DA8F 0FDA8F -> $00FF                SCI_BD_LIST_INIT        EQU     $FF
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9AF 0FD9AF                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
00D9AF 0FD9AF -> $D9AF                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
00D9B0 0FD9B0                                                 ALIGN   1
                                      ;#Receive buffer
00D9B0 0FD9B0                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
00D9D0 0FD9D0                         SCI_RXBUF_IN            DS      1               ;points to the next free space
00D9D1 0FD9D1                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
00D9D2 0FD9D2                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
00D9DA 0FD9DA                         SCI_TXBUF_IN            DS      1               ;points to the next free space
00D9DB 0FD9DB                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
00D9DC 0FD9DC                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
00D9DE 0FD9DE -> $D9DE                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
00D9DF 0FD9DF                                                 UNALIGN 1
                                      ;#Flags
00D9DF 0FD9DF -> $D9AF                SCI_FLGS                EQU     ((SCI_VARS_START&1)*SCI_AUTO_LOC1)+((~SCI_VARS_START&1)*SCI_AUTO_LOC2)
00D9DF 0FD9DF                                                 UNALIGN (~SCI_AUTO_LOC1&1)
                                      ;#XON/XOFF reminder count
00D9DF 0FD9DF                         SCI_XONXOFF_REMCNT      DS      2               ;counter for XON/XOFF reminder
                                      ;#Baud rate detection registers
                                      ;#BD log buffer
00D9E1 0FD9E1 -> $D9E1                SCI_VARS_END            EQU     *
00D9E1 0FD9E1 -> $FD9E1               SCI_VARS_END_LIN        EQU     @
                                      ;Clear BD pulse log
                                      ; args:   none
                                      ; SSTACK: none
                                      ;         X, and Y are preserved
                                      ;Log BD pulse length
                                      ; args: X: pulse length
                                      ;       Y: search tree pointer
                                      ; SSTACK: none
                                      ;         X, and Y are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D3E6 0FD3E6                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
00D3E6 0FD3E6 -> $D3E6                SCI_TX_NB               EQU     *
                                                              ;Save registers (data in B)
00D3E6 0FD3E6 35                                              PSHY
00D3E7 0FD3E7 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
00D3E8 0FD3E8 CD D9 D2                                        LDY     #SCI_TXBUF
00D3EB 0FD3EB B6 D9 DA                                        LDAA    SCI_TXBUF_IN
00D3EE 0FD3EE 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
00D3F0 0FD3F0 42                                              INCA                                            ;increment index
00D3F1 0FD3F1 84 07                                           ANDA    #SCI_TXBUF_MASK
00D3F3 0FD3F3 B1 D9 DB                                        CMPA    SCI_TXBUF_OUT
00D3F6 0FD3F6 27 17                                           BEQ     SCI_TX_NB_1                             ;buffer is full
                                                              ;Update buffer
00D3F8 0FD3F8 7A D9 DA                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
00D3FB 0FD3FB 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
00D400 0FD400 MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D400 0FD400 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D403 0FD403 25 BE                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D405 0FD405 8F D9 AA                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D408 0FD408 22 BF                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D40A 0FD40A -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D40A 0FD40A -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D40A 0FD40A 32                                              PULA
00D40B 0FD40B 31                                              PULY
                                                              ;Signal success
00D40C 0FD40C 14 01                                           SEC
                                                              ;Done
00D40E 0FD40E 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
00D40F 0FD40F MACRO                   SCI_TX_NB_1             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D40F 0FD40F 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D412 0FD412 25 AF                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D414 0FD414 8F D9 AA                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D417 0FD417 22 B0                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D419 0FD419 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D419 0FD419 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D419 0FD419 32                                              PULA
00D41A 0FD41A 31                                              PULY
                                                              ;Signal failure
00D41B 0FD41B 10 FE                                           CLC
                                                              ;Done
00D41D 0FD41D 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
00D41E 0FD41E -> $D41E                SCI_TX_BL               EQU     *
00D41E 0FD41E MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00D41E 0FD41E 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00D420 0FD420                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00D420 0FD420 07 C4                                           JOBSR   \1                                               (SCI_MAKE_BL)
00D422 0FD422 24 0D                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00D424 0FD424 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00D426 0FD426 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00D426 0FD426 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D429 0FD429 25 98                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D42B 0FD42B 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D42E 0FD42E 22 99                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D430 0FD430 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D430 0FD430 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D430 0FD430 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00D431 0FD431 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00D431 0FD431 8F D9 94                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00D434 0FD434 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00D436 0FD436 8F D9 AF                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00D439 0FD439 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00D43B 0FD43B MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D43B 0FD43B 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D440 0FD440 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D445 0FD445 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00D447 0FD447 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00D449 0FD449 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D44A 0FD44A 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D44B 0FD44B -> $D44B                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00D44B 0FD44B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00D44B 0FD44B 8F D9 99                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D44E 0FD44E 18 25 FF 71                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D452 0FD452 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D455 0FD455 18 22 FF 70                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D459 0FD459 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D459 0FD459 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D459 0FD459 20 C3                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissionsare complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00D45B 0FD45B -> $D45B                SCI_TX_DONE_NB          EQU     *
                                                              ;Save registers
00D45B 0FD45B 3B                                              PSHD
                                                              ;Check TX queue
00D45C 0FD45C FC D9 DA                                        LDD     SCI_TXBUF_IN
00D45F 0FD45F 18 17                                           CBA
00D461 0FD461 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
00D463 0FD463 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2 ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
00D467 0FD467 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D467 0FD467 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D46A 0FD46A 18 25 FF 55                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D46E 0FD46E 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D471 0FD471 18 22 FF 54                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D475 0FD475 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D475 0FD475 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D475 0FD475 3A                                              PULD
                                                              ;Signal failure
00D476 0FD476 10 FE                                           CLC
                                                              ;Done
00D478 0FD478 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
00D479 0FD479 MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D479 0FD479 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D47C 0FD47C 18 25 FF 43                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D480 0FD480 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D483 0FD483 18 22 FF 42                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D487 0FD487 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D487 0FD487 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D487 0FD487 3A                                              PULD
                                                              ;Signal failure
00D488 0FD488 14 01                                           SEC
                                                              ;Done
00D48A 0FD48A 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00D48B 0FD48B -> $D48B                SCI_TX_DONE_BL          EQU     *
00D48B 0FD48B MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00D48B 0FD48B 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00D48D 0FD48D                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00D48D 0FD48D 07 CC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00D48F 0FD48F 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00D491 0FD491 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00D493 0FD493 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00D493 0FD493 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D496 0FD496 18 25 FF 29                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D49A 0FD49A 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D49D 0FD49D 18 22 FF 28                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D4A1 0FD4A1 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D4A1 0FD4A1 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D4A1 0FD4A1 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00D4A2 0FD4A2 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00D4A2 0FD4A2 8F D9 94                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00D4A5 0FD4A5 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00D4A7 0FD4A7 8F D9 AF                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00D4AA 0FD4AA 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00D4AC 0FD4AC MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D4AC 0FD4AC 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D4B1 0FD4B1 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D4B6 0FD4B6 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00D4B8 0FD4B8 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00D4BA 0FD4BA 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D4BB 0FD4BB 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D4BC 0FD4BC -> $D4BC                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00D4BC 0FD4BC MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4BC 0FD4BC 8F D9 98                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4BF 0FD4BF 18 25 FF 00                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4C3 0FD4C3 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4C6 0FD4C6 18 22 FE FF                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4CA 0FD4CA -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4CA 0FD4CA -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D4CA 0FD4CA 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00D4CC 0FD4CC -> $D4CC                SCI_TX_READY_NB         EQU     *
                                                              ;Save registers
00D4CC 0FD4CC 3B                                              PSHD
                                                              ;Check if there is room for this entry
00D4CD 0FD4CD FC D9 DA                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
00D4D0 0FD4D0 42                                              INCA
00D4D1 0FD4D1 84 07                                           ANDA    #SCI_TXBUF_MASK
00D4D3 0FD4D3 B1 D9 DB                                        CMPA    SCI_TXBUF_OUT
00D4D6 0FD4D6 27 12                                           BEQ     SCI_TX_READY_NB_1                               ;buffer is full
                                                              ;Restore registers
00D4D8 0FD4D8 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D4D8 0FD4D8 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D4DB 0FD4DB 18 25 FE E4                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D4DF 0FD4DF 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D4E2 0FD4E2 18 22 FE E3                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D4E6 0FD4E6 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D4E6 0FD4E6 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D4E6 0FD4E6 3A                                              PULD
                                                              ;Done
00D4E7 0FD4E7 14 01                                           SEC
00D4E9 0FD4E9 3D                                              RTS
                                                              ;TX buffer is full
00D4EA 0FD4EA MACRO                   SCI_TX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D4EA 0FD4EA 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D4ED 0FD4ED 18 25 FE D2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D4F1 0FD4F1 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D4F4 0FD4F4 18 22 FE D1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D4F8 0FD4F8 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D4F8 0FD4F8 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D4F8 0FD4F8 3A                                              PULD
                                                              ;Done
00D4F9 0FD4F9 10 FE                                           CLC
00D4FB 0FD4FB 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00D4FC 0FD4FC -> $D4FC                SCI_TX_READY_BL         EQU     *
00D4FC 0FD4FC MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00D4FC 0FD4FC 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00D4FE 0FD4FE                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00D4FE 0FD4FE 07 CC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00D500 0FD500 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00D502 0FD502 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00D504 0FD504 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00D504 0FD504 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D507 0FD507 18 25 FE B8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D50B 0FD50B 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D50E 0FD50E 18 22 FE B7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D512 0FD512 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D512 0FD512 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D512 0FD512 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00D513 0FD513 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00D513 0FD513 8F D9 94                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00D516 0FD516 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00D518 0FD518 8F D9 AF                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00D51B 0FD51B 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00D51D 0FD51D MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D51D 0FD51D 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D522 0FD522 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D527 0FD527 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00D529 0FD529 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00D52B 0FD52B 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D52C 0FD52C 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D52D 0FD52D -> $D52D                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00D52D 0FD52D MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00D52D 0FD52D 8F D9 98                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D530 0FD530 18 25 FE 8F                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D534 0FD534 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D537 0FD537 18 22 FE 8E                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D53B 0FD53B -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D53B 0FD53B -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D53B 0FD53B 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
00D53D 0FD53D -> $D53D                SCI_RX_NB               EQU     *
                                                              ;Save registers
00D53D 0FD53D 34                                              PSHX
                                                              ;Check if there is data in the RX queue
00D53E 0FD53E FC D9 D0                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
00D541 0FD541 18 16                                           SBA                                             ;A=in-out
00D543 0FD543 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
00D545 0FD545 84 1F                                           ANDA    #SCI_RXBUF_MASK
00D547 0FD547 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
00D549 0FD549 27 32                                           BEQ     SCI_RX_NB_3                             ;unblock flow control
                                                              ;Pull entry from the RX queue (out-index in B)
00D54B 0FD54B CE D9 B0                SCI_RX_NB_1             LDX     #SCI_RXBUF
00D54E 0FD54E EE E5                                           LDX     B,X
00D550 0FD550 CB 02                                           ADDB    #$02                                    ;increment out pointer
00D552 0FD552 C4 1F                                           ANDB    #SCI_RXBUF_MASK
00D554 0FD554 7B D9 D1                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
00D557 0FD557 B7 54                                           TFR     X, D
                                                              ;Restore registers
00D559 0FD559 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D559 0FD559 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D55C 0FD55C 18 25 FE 63                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D560 0FD560 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D563 0FD563 18 22 FE 62                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D567 0FD567 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D567 0FD567 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D567 0FD567 30                                              PULX
                                                              ;Done
00D568 0FD568 14 01                                           SEC
00D56A 0FD56A 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
00D56B 0FD56B MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D56B 0FD56B 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D56E 0FD56E 18 25 FE 51                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D572 0FD572 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D575 0FD575 18 22 FE 50                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D579 0FD579 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D579 0FD579 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D579 0FD579 30                                              PULX
                                                              ;Done
00D57A 0FD57A 10 FE                                           CLC
00D57C 0FD57C 3D                                              RTS
                                                              ;Unblock flow control (out-index in B, CCR in X)
00D57D 0FD57D -> $D57D                SCI_RX_NB_3             EQU     *
00D57D 0FD57D MACRO                                           SCI_ASSERT_CTS
00D57D 0FD57D MACRO                                           SCI_SEND_XONXOFF
                                      ;#Assert CTS (allow incoming data)                                               (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
00D57D 0FD57D 1C D9 AF 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
00D581 0FD581 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
00D586 0FD586 20 C3                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
00D588 0FD588 -> $D588                SCI_RX_BL               EQU     *
00D588 0FD588 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00D588 0FD588 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00D58A 0FD58A                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00D58A 0FD58A 07 B1                                           JOBSR   \1                                               (SCI_MAKE_BL)
00D58C 0FD58C 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00D58E 0FD58E 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00D590 0FD590 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00D590 0FD590 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D593 0FD593 18 25 FE 2C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D597 0FD597 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D59A 0FD59A 18 22 FE 2B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D59E 0FD59E -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D59E 0FD59E -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D59E 0FD59E 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00D59F 0FD59F MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00D59F 0FD59F 8F D9 94                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00D5A2 0FD5A2 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00D5A4 0FD5A4 8F D9 AF                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00D5A7 0FD5A7 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00D5A9 0FD5A9 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D5A9 0FD5A9 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D5AE 0FD5AE 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D5B3 0FD5B3 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00D5B5 0FD5B5 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00D5B7 0FD5B7 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D5B8 0FD5B8 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D5B9 0FD5B9 -> $D5B9                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00D5B9 0FD5B9 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5B9 0FD5B9 8F D9 98                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5BC 0FD5BC 18 25 FE 03                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5C0 0FD5C0 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5C3 0FD5C3 18 22 FE 02                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5C7 0FD5C7 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5C7 0FD5C7 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D5C7 0FD5C7 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00D5C9 0FD5C9 -> $D5C9                SCI_RX_READY_NB         EQU     *
                                                              ;Save registers
00D5C9 0FD5C9 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
00D5CA 0FD5CA FC D9 D0                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
00D5CD 0FD5CD 18 17                                           CBA
00D5CF 0FD5CF 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
00D5D1 0FD5D1 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D5D1 0FD5D1 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D5D4 0FD5D4 18 25 FD EB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D5D8 0FD5D8 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D5DB 0FD5DB 18 22 FD EA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D5DF 0FD5DF -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D5DF 0FD5DF -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D5DF 0FD5DF 3A                                              PULD
                                                              ;Done
00D5E0 0FD5E0 14 01                                           SEC
00D5E2 0FD5E2 3D                                              RTS
                                                              ;RX buffer is empty
00D5E3 0FD5E3 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D5E3 0FD5E3 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D5E6 0FD5E6 18 25 FD D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D5EA 0FD5EA 8F D9 AB                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D5ED 0FD5ED 18 22 FD D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D5F1 0FD5F1 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D5F1 0FD5F1 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D5F1 0FD5F1 3A                                              PULD
                                                              ;Done
00D5F2 0FD5F2 10 FE                                           CLC
00D5F4 0FD5F4 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
00D5F5 0FD5F5 -> $D5F5                SCI_RX_READY_BL         EQU     *
00D5F5 0FD5F5 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00D5F5 0FD5F5 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00D5F7 0FD5F7                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00D5F7 0FD5F7 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
00D5F9 0FD5F9 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
00D5FB 0FD5FB 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00D5FD 0FD5FD MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00D5FD 0FD5FD 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D600 0FD600 18 25 FD BF                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D604 0FD604 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D607 0FD607 18 22 FD BE                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL)
00D60B 0FD60B -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D60B 0FD60B -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL)
00D60B 0FD60B 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
00D60C 0FD60C MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
00D60C 0FD60C 8F D9 94                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00D60F 0FD60F 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00D611 0FD611 8F D9 AF                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00D614 0FD614 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00D616 0FD616 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D616 0FD616 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D61B 0FD61B 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00D620 0FD620 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00D622 0FD622 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00D624 0FD624 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D625 0FD625 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00D626 0FD626 -> $D626                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00D626 0FD626 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00D626 0FD626 8F D9 98                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D629 0FD629 18 25 FD 96                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D62D 0FD62D 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D630 0FD630 18 22 FD 95                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH)
00D634 0FD634 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D634 0FD634 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH)
00D634 0FD634 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00D636 0FD636 -> $D636                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
00D636 0FD636 35                                              PSHY                                    ;push Y onto the SSTACK
00D637 0FD637 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
00D638 0FD638 5C C8                                           STD     SCIBDH                          ;set baud rate
00D63A 0FD63A CD 19 99                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
00D63D 0FD63D 13                                              EMUL                                    ;D*Y -> Y:D
00D63E 0FD63E 7C D9 DC                                        STD     SCI_BVAL
                                                              ;Clear input buffer
00D641 0FD641 18 03 00 00 D9 D0                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
00D647 0FD647 MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D647 0FD647 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D64A 0FD64A 18 25 FD 75                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D64E 0FD64E 8F D9 A9                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D651 0FD651 18 22 FD 74                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D655 0FD655 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D655 0FD655 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D655 0FD655 3A                                              PULD                                    ;pull D from the SSTACK
00D656 0FD656 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
00D657 0FD657 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTL polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
00D658 0FD658 -> $D658                SCI_ISR_DELAY           EQU     *
00D658 0FD658 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Check XON/XOFF reminder count (retrigger request in C-flag)
00D65A 0FD65A FC D9 DF                                        LDD     SCI_XONXOFF_REMCNT
00D65D 0FD65D 27 13                                           BEQ     SCI_ISR_DELAY_5                                         ;XON/XOFF reminder disabled
00D65F 0FD65F 04 24 0B                                        DBNE    D, SCI_ISR_DELAY_3                                      ;don't send XON/XOFF yet
00D662 0FD662 1C D9 AF 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF                         ;request XON/XOFF reminder
00D666 0FD666 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;invoke RXTX ISR
00D66B 0FD66B 20 02                                           JOB     SCI_ISR_DELAY_4
00D66D 0FD66D -> $D66D                SCI_ISR_DELAY_3         EQU     *
00D66D 0FD66D 14 01                                           SEC                                                             ;retrigger
00D66F 0FD66F 7C D9 DF                SCI_ISR_DELAY_4         STD     SCI_XONXOFF_REMCNT
00D672 0FD672 -> $D672                SCI_ISR_DELAY_5         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
00D672 0FD672 24 1E                                           BCC     SCI_ISR_DELAY_7
00D674 0FD674 MACRO                                           SCI_RESET_DELAY
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
00D674 0FD674 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
00D674 0FD674 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00D674 0FD674 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00D679 0FD679 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
00D67B 0FD67B 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
00D67E 0FD67E B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
00D680 0FD680 C7                                              CLRB                                                     (SCI_RESET_DELAY)
00D681 0FD681 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
00D681 0FD681 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
00D683 0FD683 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
00D685 0FD685 -> $D685                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
00D685 0FD685 MACRO                   SCI_ISR_DELAY_6         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00D685 0FD685 8F D9 8B                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00D688 0FD688 25 06                                           BLO     OF                                               (ISTACK_RTI)
00D68A 0FD68A 8F D9 A6                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00D68D 0FD68D 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00D68F 0FD68F 0B                                              RTI                                                      (ISTACK_RTI)
00D690 0FD690 00                      OF                      BGND                                                     (ISTACK_RTI)
00D691 0FD691 00                      UF                      BGND                                                     (ISTACK_RTI)
00D692 0FD692 MACRO                   SCI_ISR_DELAY_7         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
00D692 0FD692 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
00D692 0FD692 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00D692 0FD692 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00D695 0FD695 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00D697 0FD697 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00D69A 0FD69A -> $D69A                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
00D69A 0FD69A -> $D69A                                        EQU     *                                                (SCI_STOP_DELAY)
00D69A 0FD69A 20 E9                                           JOB     SCI_ISR_DELAY_6
                                                              ;#Transmit ISR (status flags in A)
00D69C 0FD69C -> $D69C                SCI_ISR_TX              EQU     *
00D69C 0FD69C 85 80                                           BITA    #TDRE                                   ;check if SCI is ready for new TX data
00D69E 0FD69E 27 54                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Don't escape any XON/XOFF symbol
00D6A0 0FD6A0 1E D9 AF 02 1D                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_1 ;Don't escape any XON/XOFF symbols
                                                              ;Transmit XON/XOFF symbols
00D6A5 0FD6A5 1F D9 AF 80 18                                  BRCLR   SCI_FLGS, #SCI_FLG_SEND_XONXOFF, SCI_ISR_TX_1 ;XON/XOFF not requested
                                                              ;Clear XON/XOFF request
00D6AA 0FD6AA 1D D9 AF 80                                     BCLR    SCI_FLGS, #SCI_FLG_SEND_XONXOFF
                                                              ;Check RX queue
00D6AE 0FD6AE FC D9 D0                                        LDD     SCI_RXBUF_IN
00D6B1 0FD6B1 18 16                                           SBA
00D6B3 0FD6B3 84 1F                                           ANDA    #SCI_RXBUF_MASK
                                                              ;Check XOFF theshold
00D6B5 0FD6B5 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00D6B7 0FD6B7 24 4F                                           BHS     <SCI_ISR_TX_6                           ;transmit XOFF
                                                              ;Check XON theshold
00D6B9 0FD6B9 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
00D6BB 0FD6BB 23 44                                           BLS     <SCI_ISR_TX_5                           ;transmit XON
                                                              ;Check XOFF status
00D6BD 0FD6BD 1E D9 AF 08 28                                  BRSET   SCI_FLGS, #SCI_FLG_TX_BLOCKED, SCI_ISR_TX_3 ;stop transmitting
                                                              ;Check TX buffer
00D6C2 0FD6C2 FC D9 DA                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
00D6C5 0FD6C5 18 17                                           CBA
00D6C7 0FD6C7 27 21                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
00D6C9 0FD6C9 CD D9 D2                                        LDY     #SCI_TXBUF
                                                              ;Check for DLE
00D6CC 0FD6CC 1D D9 AF 02                                     BCLR    SCI_FLGS, #SCI_FLG_TX_ESC
00D6D0 0FD6D0 B7 45                                           TFR     D, X
00D6D2 0FD6D2 E6 ED                                           LDAB    B,Y
00D6D4 0FD6D4 C1 10                                           CMPB    #SCI_DLE
00D6D6 0FD6D6 26 04                                           BNE     SCI_ISR_TX_2
00D6D8 0FD6D8 1C D9 AF 02                                     BSET    SCI_FLGS, #SCI_FLG_TX_ESC
00D6DC 0FD6DC 5B CF                   SCI_ISR_TX_2            STAB    SCIDRL
00D6DE 0FD6DE B7 54                                           TFR     X, D
                                                              ;Increment index
00D6E0 0FD6E0 52                                              INCB
00D6E1 0FD6E1 C4 07                                           ANDB    #SCI_TXBUF_MASK
00D6E3 0FD6E3 7B D9 DB                                        STAB    SCI_TXBUF_OUT
00D6E6 0FD6E6 18 17                                           CBA
00D6E8 0FD6E8 26 0A                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
00D6EA 0FD6EA -> $D6EA                SCI_ISR_TX_3            EQU     *
00D6EA 0FD6EA 1E D9 AF 02 05                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_4 ;consider pending XON/XOFF symbols
00D6EF 0FD6EF 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
00D6F4 0FD6F4 MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00D6F4 0FD6F4 8F D9 8B                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00D6F7 0FD6F7 25 06                                           BLO     OF                                               (ISTACK_RTI)
00D6F9 0FD6F9 8F D9 A6                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00D6FC 0FD6FC 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00D6FE 0FD6FE 0B                                              RTI                                                      (ISTACK_RTI)
00D6FF 0FD6FF 00                      OF                      BGND                                                     (ISTACK_RTI)
00D700 0FD700 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Transmit XON
00D701 0FD701 18 0B 11 00 CF          SCI_ISR_TX_5            MOVB    #SCI_XON, SCIDRL
00D706 0FD706 20 05                                           JOB     SCI_ISR_TX_7                            ;schedule reminder
                                                              ;Transmit XOFF
00D708 0FD708 18 0B 13 00 CF          SCI_ISR_TX_6            MOVB    #SCI_XOFF, SCIDRL
                                                              ;Schedule reminder
00D70D 0FD70D 18 03 0E E6 D9 DF       SCI_ISR_TX_7            MOVW    #SCI_XONXOFF_REMINDER, SCI_XONXOFF_REMCNT
00D713 0FD713 MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (approx. 2 SCI frames)                                             (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
00D713 0FD713 4E 4C 08 1E                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
00D717 0FD717 MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY)
                                      ;#ReSET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY)
00D717 0FD717 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
00D717 0FD717 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00D717 0FD717 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
00D71C 0FD71C DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_RESET_DELAY)
00D71E 0FD71E 04 60 07                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_RESET_DELAY)
00D721 0FD721 B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_RESET_DELAY)
00D723 0FD723 C7                                              CLRB                                                     (SCI_START_DELAY/SCI_RESET_DELAY)
00D724 0FD724 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00D724 0FD724 D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00D726 0FD726 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
00D728 0FD728 -> $D728                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_RESET_DELAY)
00D728 0FD728 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN)
00D728 0FD728 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/TIM_EN)
                                      ;############################################################################### (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;# Macros                                                                      # (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;############################################################################### (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Initialization                                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%1_0_0_1_1_1_0_0, TIOS         ;default setup   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  0=input capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  1=output compare (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;CFORC                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;OC7M                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_1_0_0_0_0_0_0, TOC7D        ;default setup   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TCNT                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no OC      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=toggle     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=clear      (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=set        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;B B B   S S S S               ;  00=no capture (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;D D D   C C C C               ;  01=posedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;M M M   I I I I               ;  10=negedge    (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;T N P   T B B B               ;  11=any edge   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;O E E   O D D D                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00D728 0FD728 18 0B 08 00 4E                                  MOVB    #\1, TFLG1              ;clear interrupt flags   (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00D72D 0FD72D 4C 4C 08                                        BSET    TIE, #\1                ;enable interrupts       (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00D730 0FD730 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1     ;enable timer            (SCI_START_DELAY/TIM_EN/TIM_MULT_EN)
00D735 0FD735 -> $D735                DONE                    EQU     *                                                (SCI_START_DELAY)
00D735 0FD735 20 BD                                           JOB     SCI_ISR_TX_4                            ;done
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
00D737 0FD737 -> $D737                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
00D737 0FD737 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
00D739 0FD739 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
00D73B 0FD73B 18 27 FF 5D                                     BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
00D73F 0FD73F D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
00D741 0FD741 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
00D743 0FD743 1F D9 AF 10 06                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
00D748 0FD748 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
00D74A 0FD74A 1D D9 AF 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
00D74E 0FD74E -> $D74E                SCI_ISR_RX_1            EQU     *
                                                              ;Check for RX errors (status flags in A, RX data in B)
00D74E 0FD74E 85 07                                           BITA    #(NF|FE|PF)                             ;check for: noise, frame errors, parity errors
00D750 0FD750 26 42                                           BNE     <SCI_ISR_RX_8                           ;RX error detected (skip special caracter detection)
                                                              ;No RX error detected (status flags in A, RX data in B)
00D752 0FD752 MACRO                                           SCI_ERRSIG_OFF                                  ;clear error signal immediately if there is no baud rate detection
                                      ;                       DEC     SCI_BD_RECOVCNT                         ;decrement recovery count if >$00
                                      ;                       BCS     <SCI_ISR_RX_2                           ;keep recovery count at $00
                                      ;                       BNE     <SCI_ISR_RX_3                           ;baud rate detection is ongoing
                                      ;                       ;Auto-recover from baud rate detection (status flags in A, RX data in B)
                                      ;                       SCI_ERRSIG_OFF                                  ;clear error signal
                                      ;                       SCI_STOP_BD                                     ;disable baud rate detection
                                      ;SCI_ISR_RX_2           EQU     *-6
                                                              ;Check for control characters (status flags in A, RX data in B)
00D752 0FD752 -> $D752                SCI_ISR_RX_3            EQU     *
00D752 0FD752 1E D9 AF 04 04                                  BRSET   SCI_FLGS, #SCI_FLG_RX_ESC, SCI_ISR_RX_4 ;charakter is escaped (skip detection)
00D757 0FD757 C1 13                                           CMPB    #SCI_XOFF
00D759 0FD759 2F 4A                                           BLE     <SCI_ISR_RX_11                          ;determine control signal
00D75B 0FD75B 1D D9 AF 04             SCI_ISR_RX_4            BCLR    SCI_FLGS, #SCI_FLG_RX_ESC               ;clear escape marker
                                                              ;Place data into RX queue (status flags in A, RX data in B)
00D75F 0FD75F B7 46                   SCI_ISR_RX_5            TFR     D, Y                                    ;flags:data -> Y
00D761 0FD761 CE D9 B0                                        LDX     #SCI_RXBUF
00D764 0FD764 FC D9 D0                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00D767 0FD767 6D E4                                           STY     A,X
00D769 0FD769 8B 02                                           ADDA    #2
00D76B 0FD76B 84 1F                                           ANDA    #SCI_RXBUF_MASK
00D76D 0FD76D 18 17                                           CBA
00D76F 0FD76F 27 23                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
00D771 0FD771 7A D9 D0                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check flow control threshold (in:out in D)
00D774 0FD774 18 16                                           SBA
00D776 0FD776 84 1F                                           ANDA    #SCI_RXBUF_MASK
00D778 0FD778 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
00D77A 0FD77A 24 1E                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
00D77C 0FD77C -> $D77C                SCI_ISR_RX_6            EQU     *
                                                              ;Delay reminder in case it is running
00D77C 0FD77C FC D9 DF                                        LDD     SCI_XONXOFF_REMCNT
00D77F 0FD77F 27 06                                           BEQ     SCI_ISR_RX_7                            ;done
00D781 0FD781 18 03 0E E6 D9 DF                               MOVW    #SCI_XONXOFF_REMINDER, SCI_XONXOFF_REMCNT
00D787 0FD787 -> $D787                SCI_ISR_RX_7            EQU     *
                                                              ;Done
00D787 0FD787 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00D787 0FD787 8F D9 8B                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00D78A 0FD78A 25 06                                           BLO     OF                                               (ISTACK_RTI)
00D78C 0FD78C 8F D9 A6                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00D78F 0FD78F 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00D791 0FD791 0B                                              RTI                                                      (ISTACK_RTI)
00D792 0FD792 00                      OF                      BGND                                                     (ISTACK_RTI)
00D793 0FD793 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;RX error detected (status flags in A, RX data in B)
00D794 0FD794 MACRO                   SCI_ISR_RX_8            SCI_ERRSIG_ON
00D794 0FD794 MACRO                                           SCI_START_BD
                                                              ;Buffer overflow
00D794 0FD794 1C D9 AF 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
00D798 0FD798 20 E2                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;RX buffer is getting full
00D79A 0FD79A MACRO                   SCI_ISR_RX_10           SCI_DEASSERT_CTS
00D79A 0FD79A MACRO                                           SCI_SEND_XONXOFF
                                      ;#Assert CTS (allow incoming data)                                               (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
00D79A 0FD79A 1C D9 AF 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
00D79E 0FD79E 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
00D7A3 0FD7A3 20 D7                                           JOB     SCI_ISR_RX_6                            ;done
                                                              ;Determine control signal (status flags in A, RX data in B)
00D7A5 0FD7A5 -> $D7A5                SCI_ISR_RX_11           EQU     *
                                                              ;Check for XON/XOFF (status flags in A, RX data in B)
00D7A5 0FD7A5 C1 13                                           CMPB    #SCI_XOFF
00D7A7 0FD7A7 26 06                                           BNE     <SCI_ISR_RX_12                          ;determine control signal
00D7A9 0FD7A9 1C D9 AF 08                                     BSET    SCI_FLGS, #SCI_FLG_TX_BLOCKED
00D7AD 0FD7AD 20 CD                                           JOB     SCI_ISR_RX_6                            ;done
00D7AF 0FD7AF C1 11                   SCI_ISR_RX_12           CMPB    #SCI_XON
00D7B1 0FD7B1 26 0B                                           BNE     <SCI_ISR_RX_13                          ;determine control signal
00D7B3 0FD7B3 1D D9 AF 08                                     BCLR    SCI_FLGS, #SCI_FLG_TX_BLOCKED           ;clear TX block
00D7B7 0FD7B7 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupt
00D7BC 0FD7BC 20 BE                                           JOB     SCI_ISR_RX_6                            ;done
00D7BE 0FD7BE -> $D7BE                SCI_ISR_RX_13           EQU     *
00D7BE 0FD7BE C1 10                                           CMPB    #SCI_DLE
00D7C0 0FD7C0 26 04                                           BNE     <SCI_ISR_RX_16                          ;done
00D7C2 0FD7C2 1C D9 AF 04                                     BSET    SCI_FLGS, #SCI_FLG_RX_ESC                       ;set escape marker
00D7C6 0FD7C6 20 B4                   SCI_ISR_RX_16           JOB     SCI_ISR_RX_6                            ;done
00D7C8 0FD7C8 -> $D7C8                SCI_CODE_END            EQU     *
00D7C8 0FD7C8 -> $FD7C8               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DA8F 0FDA8F                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
00DA90 0FDA90                                                 ALIGN   1
                                                              ;List of prescaler values
00DA90 0FDA90 -> $DA90                SCI_BTAB                EQU     *
00DA90 0FDA90 01 46                                           DW      SCI_4800
00DA92 0FDA92 00 D9                                           DW      SCI_7200
00DA94 0FDA94 00 A3                                           DW      SCI_9600
00DA96 0FDA96 00 6D                                           DW      SCI_14400
00DA98 0FDA98 00 51                                           DW      SCI_19200
00DA9A 0FDA9A 00 36                                           DW      SCI_28800
00DA9C 0FDA9C 00 29                                           DW      SCI_38400
00DA9E 0FDA9E 00 1B                                           DW      SCI_57600
00DAA0 0FDAA0 -> $DAA0                SCI_BTAB_END            EQU     *
00DAA0 0FDAA0 -> $DAA0                SCI_TABS_END            EQU     *
00DAA0 0FDAA0 -> $FDAA0               SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB  - print a string (non-blocking)                         #
                                      ;#    STRING_PRINT_BL  - print a string (blocking)                             #
                                      ;#    STRING_FILL_NB   - print a number of filler characters (non-blocking)    #
                                      ;#    STRING_FILL_BL   - print a number of filler characters (blocking)        #
                                      ;#    STRING_UPPER_B   - convert a character to upper case                     #
                                      ;#    STRING_LOWER_B   - convert a character to lower case                     #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
00DAA0 0FDAA0 -> $0001                STRING_BLOCKING_OFF     EQU     1       ;blocking functions disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
00DAA0 0FDAA0 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
00DAA0 0FDAA0 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
00DAA0 0FDAA0 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
00DAA0 0FDAA0 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
00DAA0 0FDAA0 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
00DAA0 0FDAA0 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
00DAA0 0FDAA0 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
00DAA0 0FDAA0 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
00DAA0 0FDAA0 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9E1 0FD9E1                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
00D9E1 0FD9E1 -> $D9E1                STRING_VARS_END         EQU     *
00D9E1 0FD9E1 -> $FD9E1               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D7C8 0FD7C8                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
00D7C8 0FD7C8 -> $D7C8                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
00D7C8 0FD7C8 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
00D7C9 0FD7C9 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
00D7CB 0FD7CB 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
00D7CD 0FD7CD 16 D3 E6                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00D7D0 0FD7D0 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
00D7D2 0FD7D2 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
00D7D4 0FD7D4 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D7D4 0FD7D4 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D7D7 0FD7D7 18 25 FB E8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D7DB 0FD7DB 8F D9 AC                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D7DE 0FD7DE 18 22 FB E7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D7E2 0FD7E2 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D7E2 0FD7E2 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D7E2 0FD7E2 33                                              PULB
                                                              ;Signal failure (string pointer in X)
00D7E3 0FD7E3 10 FE                                           CLC
                                                              ;Done
00D7E5 0FD7E5 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
00D7E6 0FD7E6 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
00D7E8 0FD7E8 16 D3 E6                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00D7EB 0FD7EB 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
00D7ED 0FD7ED MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D7ED 0FD7ED 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D7F0 0FD7F0 18 25 FB CF                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D7F4 0FD7F4 8F D9 AC                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D7F7 0FD7F7 18 22 FB CE                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D7FB 0FD7FB -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D7FB 0FD7FB -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D7FB 0FD7FB 33                                              PULB
                                                              ;Signal success (next string pointer in X)
00D7FC 0FD7FC 14 01                                           SEC
                                                              ;Done
00D7FE 0FD7FE 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
                                      ;#Print a number of filler characters - non-blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
00D7FF 0FD7FF -> $D7FF                STRING_FILL_NB  EQU     *
                                                              ;Print characters (requested spaces in A)
00D7FF 0FD7FF 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
00D802 0FD802 16 D3 E6                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
00D805 0FD805 24 14                                           BCC     STRING_FILL_NB_3        ;unsuccessful
00D807 0FD807 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
00D80A 0FD80A MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D80A 0FD80A 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D80D 0FD80D 18 25 FB B2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D811 0FD811 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D814 0FD814 18 22 FB B1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D818 0FD818 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D818 0FD818 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
                                                              ;Signal success (remaining spaces in A)
00D818 0FD818 14 01                                           SEC
                                                              ;Done
00D81A 0FD81A 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
00D81B 0FD81B MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D81B 0FD81B 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D81E 0FD81E 18 25 FB A1                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D822 0FD822 8F D9 AD                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D825 0FD825 18 22 FB A0                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D829 0FD829 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D829 0FD829 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
                                                              ;Signal failure (remaining spaces in A)
00D829 0FD829 10 FE                                           CLC
                                                              ;Done
00D82B 0FD82B 3D                                              RTS
                                      ;#Print a number of filler characters - blocking
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
00D82C 0FD82C -> $D82C                STRING_CODE_END         EQU     *
00D82C 0FD82C -> $FD82C               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DAA0 0FDAA0                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
00DAA0 0FDAA0 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
00DAA1 0FDAA1 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00DAA1 0FDAA1 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00DAA2 0FDAA2 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
00DAA3 0FDAA3 -> $DAA3                STRING_TABS_END         EQU     *
00DAA3 0FDAA3 -> $FDAA3               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING - String printing routines                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    COP    - Watchdog handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Error detection
                                      ;---------------
                                      ;COP detection
00DAA3 0FDAA3 -> $0001                RESET_COP_ON            EQU     1               ;default is RESET_COP_ON
                                      ;Clock failure detection
00DAA3 0FDAA3 -> $0001                RESET_CLKFAIL_ON        EQU     1               ;default is RESET_CLKFAIL_ON
                                      ;Power failure detection
00DAA3 0FDAA3 -> $0001                RESET_POWFAIL_ON        EQU     1               ;default is RESET_POWFAIL_ON
                                      ;Code runaway detection
00DAA3 0FDAA3 -> $0001                RESET_CODERUN_OFF       EQU     1               ;default is RESET_CODERUN_OFF
                                      ;Welcome message
                                      ;---------------
                                      ;RESET_WELCOME  FCS     "Hello, this is S12CBase!"
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Flags
00DAA3 0FDAA3 -> $0040                RESET_FLG_POR           EQU     $40             ;power on     (PORF)
00DAA3 0FDAA3 -> $0020                RESET_FLG_POWFAIL       EQU     $20             ;power loss   (LVRF)
00DAA3 0FDAA3 -> $0004                RESET_FLG_CODERUN       EQU     $04             ;code runaway (ILAF)
00DAA3 0FDAA3 -> $0002                RESET_FLG_COP           EQU     $02             ;watchdog timeout
00DAA3 0FDAA3 -> $0001                RESET_FLG_CLKFAIL       EQU     $01             ;clock faiure
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9E1 0FD9E1                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
00D9E1 0FD9E1 -> $D9E1                RESET_AUTO_LOC1         EQU     *               ;1st auto-place location
00D9E2 0FD9E2                                                 ALIGN   1
00D9E2 0FD9E2                         RESET_MSG               DS      2               ;error message to be displayed
00D9E4 0FD9E4                         RESET_MSG_CHKSUM        DS      1               ;checksum for the errormessage
00D9E5 0FD9E5 -> $D9E5                RESET_AUTO_LOC2         EQU     *               ;2nd auto-place location
00D9E5 0FD9E5 -> $D9E1                RESET_FLGS              EQU     ((RESET_VARS_START&1)*RESET_AUTO_LOC1)+((~(RESET_VARS_START)&1)*RESET_AUTO_LOC2)
00D9E5 0FD9E5                                                 DS      (~(RESET_VARS_START)&1)
00D9E5 0FD9E5 -> $D9E5                RESET_VARS_END          EQU     *
00D9E5 0FD9E5 -> $FD9E5               RESET_VARS_END_LIN      EQU     @
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;         C-flag: set if message is valid
                                      ;         none of the registers are preserved
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D82C 0FD82C                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#COP reset entry point
                                      ;----------------------
00D82C 0FD82C -> $D82C                RESET_COP_ENTRY         EQU     *
                                                              ;Capture COP
00D82C 0FD82C 18 0B 02 D9 E1                                  MOVB    #RESET_FLG_COP, RESET_FLGS
00D831 0FD831 06 D0 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset entry point
                                      ;--------------------------------
00D834 0FD834 -> $D834                RESET_CM_ENTRY          EQU     *
                                                              ;Capture clock failure
00D834 0FD834 18 0B 01 D9 E1                                  MOVB    #RESET_FLG_CLKFAIL, RESET_FLGS
00D839 0FD839 06 D0 00                                        JOB     START_OF_CODE
                                      ;#External reset entry point
                                      ;---------------------------
00D83C 0FD83C -> $D83C                RESET_EXT_ENTRY         EQU     *
                                                              ;Capture CRG/CPMU flags
00D83C 0FD83C 18 0C 00 37 D9 E1                               MOVB    CRGFLG, RESET_FLGS
00D842 0FD842 06 D0 00                                        JOB     START_OF_CODE
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
00D845 0FD845 -> $D845                RESET_FATAL             EQU     *
00D845 0FD845 7E D9 E2                                        STX     RESET_MSG
00D848 0FD848 FD D8 75                                        LDY     RESET_FATAL_1
                                      ;#Calculate the checksum of the custom error message
                                      ; args:   X:      error message
                                      ;         Y:      return address
                                      ; result: A:      checksum
                                      ;;        C-flag: set if message is valid
                                      ;         none of the registers are preserved
00D84B 0FD84B -> $D84B                RESET_CALC_CHECKSUM     EQU     *
                                                              ;Initialize checksum generation
00D84B 0FD84B 87                                              CLRA
                                                              ;Get next character
00D84C 0FD84C E6 30                   RESET_CALC_CHECKSUM_1   LDAB    1,X+
00D84E 0FD84E 2B 0F                                           BMI     RESET_CALC_CHECKSUM_2   ;last charcter reached
00D850 0FD850 C1 20                                           CMPB    #STRING_SYM_SPACE
00D852 0FD852 25 1D                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
00D854 0FD854 C1 7E                                           CMPB    #STRING_SYM_TILDE
00D856 0FD856 22 19                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
00D858 0FD858 18 06                                           ABA
00D85A 0FD85A 45                                              ROLA
00D85B 0FD85B 89 00                                           ADCA    #$00
00D85D 0FD85D 20 ED                                           JOB     RESET_CALC_CHECKSUM_1
                                                              ;Last charcter reached
00D85F 0FD85F C1 A0                   RESET_CALC_CHECKSUM_2   CMPB    #(STRING_SYM_SPACE|$80)
00D861 0FD861 25 0E                                           BLO     <RESET_CALC_CHECKSUM_3  ;message is invalid
00D863 0FD863 C1 7E                                           CMPB    #(STRING_SYM_TILDE|80)
00D865 0FD865 22 0A                                           BHI     <RESET_CALC_CHECKSUM_3  ;message is invalid
                                                              ;Message is valid
00D867 0FD867 18 06                                           ABA
00D869 0FD869 45                                              ROLA
00D86A 0FD86A 89 00                                           ADCA    #$00
00D86C 0FD86C 41                                              COMA
00D86D 0FD86D 14 01                                           SEC
00D86F 0FD86F 05 40                                           JMP     0,Y
                                                              ;Message is invalid
00D871 0FD871 10 FE                   RESET_CALC_CHECKSUM_3   CLC
00D873 0FD873 05 40                                           JMP     0,Y
                                      ;#Perform a reset due to a fatal error...continued
                                                              ;Check if message is valid (checksum in A, valid/invalid in C-flag)
00D875 0FD875 24 05                   RESET_FATAL_1           BCC     RESET_FATAL_3           ;clear message
00D877 0FD877 7A D9 E4                                        STAA    RESET_MSG_CHKSUM
                                                              ;Trigger COP
00D87A 0FD87A MACRO                   RESET_FATAL_2           COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
00D87A 0FD87A 20 B0                                           JOB     RESET_COP_ENTRY                                  (COP_RESET)
                                                              ;Clear message
00D87C 0FD87C 87                      RESET_FATAL_3           CLRA
00D87D 0FD87D C7                                              CLRB
00D87E 0FD87E 7C D9 E2                                        STD     RESET_MSG
00D881 0FD881 7A D9 E4                                        STAA    RESET_MSG_CHKSUM
00D884 0FD884 20 F4                                           JOB     RESET_FATAL_2           ;trigger COP
                                      ;#Trigger a fatal error if a reset accurs
00D886 0FD886 -> $D886                RESET_ISR_FATAL         EQU     *
00D886 0FD886 MACRO                                           RESET_FATAL     RESET_STR_ILLIRQ
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
00D886 0FD886 CE DA D1                                        LDX     #\1                                              (RESET_FATAL)
00D889 0FD889 MACRO                                           RESET_FATAL_X                                            (RESET_FATAL)
                                      ;#Perform a reset due to a fatal error (error code in X)                         (RESET_FATAL/RESET_FATAL_X)
                                      ; args: X: message pointer                                                       (RESET_FATAL/RESET_FATAL_X)
                                                              ;BGND                                                    (RESET_FATAL/RESET_FATAL_X)
00D889 0FD889 20 BA                                           JOB     RESET_FATAL                                      (RESET_FATAL/RESET_FATAL_X)
00D88B 0FD88B -> $D88B                RESET_CODE_END          EQU     *
00D88B 0FD88B -> $FD88B               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DAA3 0FDAA3                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Welcome string
                                      ;#Error indicator
00DAA3 0FDAA3 46 61 74 61 6C 21 A0    RESET_STR_FATAL         FCS     "Fatal! "
                                      ;#Error messages
00DAAA 0FDAAA 57 61 74 63 68 64 6F 67 RESET_STR_COP           FCS     "Watchdog timeout"
              20 74 69 6D 65 6F 75 F4 
00DABA 0FDABA 43 6C 6F 63 6B 20 66 61 RESET_STR_CLKFAIL       FCS     "Clock failure"
              69 6C 75 72 E5          
00DAC7 0FDAC7 50 6F 77 65 72 20 6C 6F RESET_STR_POWFAIL       FCS     "Power loss"
              73 F3                   
00DAD1 0FDAD1 49 6C 6C 65 67 61 6C 20 RESET_STR_ILLIRQ        FCS     "Illegal interrupt"
              69 6E 74 65 72 72 75 70 
              F4                      
00DAE2 0FDAE2 -> $DAE2                RESET_TABS_END          EQU     *
00DAE2 0FDAE2 -> $FDAE2               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
00DAE2 0FDAE2 -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
00DAE2 0FDAE2 -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
00DAE2 0FDAE2 -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9E5 0FD9E5                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
00D9E5 0FD9E5 -> $D9E5                NUM_VARS_END            EQU     *
00D9E5 0FD9E5 -> $FD9E5               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D88B 0FD88B                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
00D88B 0FD88B -> $D88B                NUM_REVERSE             EQU     *
                                      ;Stack layout:
00D88B 0FD88B -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
00D88B 0FD88B -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
00D88B 0FD88B -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
00D88B 0FD88B -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
00D88B 0FD88B -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
00D88B 0FD88B -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
00D88B 0FD88B -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
00D88B 0FD88B -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
00D88B 0FD88B -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
00D88B 0FD88B -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
00D88B 0FD88B 87                                              CLRA
00D88C 0FD88C 18 02 80 AA                                     MOVW    0,SP, 6,-SP     ;move return address to SP+10
00D890 0FD890 6C 86                                           STD     6,SP            ;initialize reverse number
00D892 0FD892 18 00 84 00 00                                  MOVW    #$0000, 4,SP    ;  reverse number = base
00D897 0FD897 18 00 82 00 00                                  MOVW    #$0000, 2,SP
00D89C 0FD89C 34                                              PSHX                    ;store X at SP+8
00D89D 0FD89D 35                                              PSHY                    ;store Y at SP+6
00D89E 0FD89E 3B                                              PSHD                    ;store count:base at SP+4
00D89F 0FD89F 34                                              PSHX                    ;store double value at SP+0
00D8A0 0FD8A0 35                                              PSHY
                                                              ;Divide FHW by base
00D8A1 0FD8A1 EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
00D8A3 0FD8A3 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
00D8A5 0FD8A5 87                                              CLRA                            ;base => D
00D8A6 0FD8A6 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00D8A8 0FD8A8 B7 D4                                           EXG     X, D
00D8AA 0FD8AA 18 10                                           IDIV                            ;D / X => X,  D % X => D
00D8AC 0FD8AC 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
00D8AE 0FD8AE B7 45                                           TFR     D, X                    ;remainder => X
00D8B0 0FD8B0 87                      NUM_REVERSE_2           CLRA                            ;base => D
00D8B1 0FD8B1 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00D8B3 0FD8B3 ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
00D8B5 0FD8B5 B7 D6                                           EXG     X, Y
00D8B7 0FD8B7 B7 D4                                           EXG     X, D
00D8B9 0FD8B9 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00D8BA 0FD8BA 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
00D8BC 0FD8BC E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
00D8BF 0FD8BF 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
00D8C2 0FD8C2 EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
00D8C4 0FD8C4 C9 00                                           ADCB    #$00
00D8C6 0FD8C6 89 00                                           ADCA    #$00
00D8C8 0FD8C8 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00D8CA 0FD8CA EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
00D8CC 0FD8CC C9 00                                           ADCB    #$00
00D8CE 0FD8CE 89 00                                           ADCA    #$00
00D8D0 0FD8D0 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
00D8D2 0FD8D2 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
00D8D4 0FD8D4 EC 82                                           LDD     NUM_REVERSE_FLW,SP
00D8D6 0FD8D6 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
00D8D8 0FD8D8 EC 80                                           LDD     NUM_REVERSE_FHW,SP
00D8DA 0FD8DA 27 28                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
00D8DC 0FD8DC ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
00D8DF 0FD8DF 87                                              CLRA
00D8E0 0FD8E0 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00D8E2 0FD8E2 13                                              EMUL                            ;Y * D => Y:D
00D8E3 0FD8E3 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
00D8E6 0FD8E6 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
00D8E8 0FD8E8 B7 C6                                           EXG     D, Y
00D8EA 0FD8EA 6C 8E                                           STD     NUM_REVERSE_RMW,SP
00D8EC 0FD8EC 87                                              CLRA
00D8ED 0FD8ED E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00D8EF 0FD8EF 13                                              EMUL                            ;Y * D => Y:D
00D8F0 0FD8F0 E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
00D8F2 0FD8F2 6C 8E                                           STD     NUM_REVERSE_RMW,SP
                                                              ;Multiply RHW by base (carry-over in Y)
00D8F4 0FD8F4 EC 8C                                           LDD     NUM_REVERSE_RHW,SP
00D8F6 0FD8F6 B7 C6                                           EXG     D, Y
00D8F8 0FD8F8 6C 8C                                           STD     NUM_REVERSE_RHW,SP
00D8FA 0FD8FA 87                                              CLRA
00D8FB 0FD8FB E6 85                                           LDAB    NUM_REVERSE_BASE,SP
00D8FD 0FD8FD 13                                              EMUL                            ;Y * D => Y:D
00D8FE 0FD8FE E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
00D900 0FD900 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
00D902 0FD902 20 9D                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
00D904 0FD904 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D904 0FD904 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D907 0FD907 18 25 FA B8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D90B 0FD90B 8F D9 9D                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D90E 0FD90E 18 22 FA B7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D912 0FD912 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D912 0FD912 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D912 0FD912 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
00D914 0FD914 3A                                              PULD                            ;
00D915 0FD915 31                                              PULY
00D916 0FD916 30                                              PULX
                                                              ;Done
00D917 0FD917 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
00D918 0FD918 -> $D918                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
00D918 0FD918 -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
00D918 0FD918 -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
00D918 0FD918 -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
00D918 0FD918 -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
00D918 0FD918 -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
00D918 0FD918 -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
00D918 0FD918 -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
00D918 0FD918 -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
00D918 0FD918 34                                              PSHX                                    ;store X at SP+8
00D919 0FD919 35                                              PSHY                                    ;store Y at SP+6
00D91A 0FD91A 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
00D91B 0FD91B MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
00D91B 0FD91B MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
00D91B 0FD91B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D91B 0FD91B 8F D9 98                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D91E 0FD91E 18 25 FA A1                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D922 0FD922 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D925 0FD925 18 22 FA A0                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D929 0FD929 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D929 0FD929 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
00D929 0FD929 16 D4 CC                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
00D92C 0FD92C 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
00D930 0FD930 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
00D932 0FD932 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
00D934 0FD934 B7 65                                           TFR     Y, X
00D936 0FD936 87                                              CLRA                            ;base => D
00D937 0FD937 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
00D939 0FD939 B7 D4                                           EXG     X, D
00D93B 0FD93B 18 10                                           IDIV                            ;D / X => X,  D % X => D
00D93D 0FD93D 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
00D93F 0FD93F B7 46                                           TFR     D, Y                    ;remainder => Y
00D941 0FD941 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
00D942 0FD942 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
00D944 0FD944 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
00D946 0FD946 B7 C5                                           EXG     D, X
00D948 0FD948 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00D949 0FD949 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
00D94B 0FD94B B7 46                                           TFR     D, Y                    ;remainder => Y
00D94D 0FD94D EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
00D94F 0FD94F 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
00D950 0FD950 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
00D952 0FD952 CE DA E2                                        LdX     #NUM_SYMTAB
00D955 0FD955 E6 E5                                           LDAB    B,X
00D957 0FD957 16 D3 E6                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
00D95A 0FD95A 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
00D95D 0FD95D EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
00D95F 0FD95F 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
00D961 0FD961 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
00D963 0FD963 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
00D965 0FD965 MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D965 0FD965 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D968 0FD968 18 25 FA 57                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D96C 0FD96C 8F D9 A1                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D96F 0FD96F 18 22 FA 56                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D973 0FD973 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D973 0FD973 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D973 0FD973 14 01                                           SEC
00D975 0FD975 3A                      NUM_REVPRINT_NB_3       PULD
00D976 0FD976 31                                              PULY
00D977 0FD977 30                                              PULX
                                                              ;Done
00D978 0FD978 3D                                              RTS
                                                              ;Printing incomplete
00D979 0FD979 MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00D979 0FD979 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D97C 0FD97C 18 25 FA 43                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D980 0FD980 8F D9 A1                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (SSTACK_PREPULL)
00D983 0FD983 18 22 FA 42                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL)
00D987 0FD987 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL)
00D987 0FD987 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL)
00D987 0FD987 10 FE                                           CLC
00D989 0FD989 20 EA                                           JOB     NUM_REVPRINT_NB_3
00D98B 0FD98B -> $D98B                NUM_CODE_END            EQU     *
00D98B 0FD98B -> $FD98B               NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DAE2 0FDAE2                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
00DAE2 0FDAE2 30                      NUM_SYMTAB              DB      "0"
00DAE3 0FDAE3 31                                              DB      "1"
00DAE4 0FDAE4 32                                              DB      "2"
00DAE5 0FDAE5 33                                              DB      "3"
00DAE6 0FDAE6 34                                              DB      "4"
00DAE7 0FDAE7 35                                              DB      "5"
00DAE8 0FDAE8 36                                              DB      "6"
00DAE9 0FDAE9 37                                              DB      "7"
00DAEA 0FDAEA 38                                              DB      "8"
00DAEB 0FDAEB 39                                              DB      "9"
00DAEC 0FDAEC 41                                              DB      "A"
00DAED 0FDAED 42                                              DB      "B"
00DAEE 0FDAEE 43                                              DB      "C"
00DAEF 0FDAEF 44                                              DB      "D"
00DAF0 0FDAF0 45                                              DB      "E"
00DAF1 0FDAF1 46                                              DB      "F"
00DAF2 0FDAF2 F2                      NUM_SYMTAB_END  DB      *
00DAF3 0FDAF3 -> $DAF3                NUM_TABS_END            EQU     *
00DAF3 0FDAF3 -> $FDAF3               NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NVM - Non-Volatile Memory Driver (S12DP256-Mini-EVB)             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families                                                                 #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module erase and programing routines for the on-chip NVMs.          #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9E5 0FD9E5                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
00D9E5 0FD9E5 -> $D9E5                NVM_VARS_END            EQU     *
00D9E5 0FD9E5 -> $FD9E5               NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
00D98B 0FD98B -> $D98B                NVM_CODE_END            EQU     *
00D98B 0FD98B -> $FD98B               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DAF3 0FDAF3                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
00DAF3 0FDAF3 -> $DAF3                NVM_TABS_END            EQU     *
00DAF3 0FDAF3 -> $FDAF3               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (S12DP256-Mini-EVB)                        #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Error handler                                                   #
                                      ;#    CLOCK  - Clock handler                                                   #
                                      ;#    SCI    - UART driver                                                     #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 15, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Restructured table                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
00DAF3 0FDAF3 -> $FF80                VECTAB_START            EQU     $FF80
00DAF3 0FDAF3 -> $FFF80               VECTAB_START_LIN        EQU     $FFF80
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D9E5 0FD9E5                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
00D9E5 0FD9E5 -> $D9E5                VECTAB_VARS_END         EQU     *
00D9E5 0FD9E5 -> $FD9E5               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;#Initialization
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
00D98B 0FD98B -> $D98B                VECTAB_CODE_END         EQU     *
00D98B 0FD98B -> $FD98B               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00DAF3 0FDAF3                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
00DAF3 0FDAF3 00                      ISR_RES80               BGND                            ;vector base + $80
00DAF4 0FDAF4 00                      ISR_RES82               BGND                            ;vector base + $82
00DAF5 0FDAF5 00                      ISR_RES84               BGND                            ;vector base + $84
00DAF6 0FDAF6 00                      ISR_RES86               BGND                            ;vector base + $86
00DAF7 0FDAF7 00                      ISR_RES88               BGND                            ;vector base + $88
00DAF8 0FDAF8 00                      ISR_RES8A               BGND                            ;vector base + $8A
00DAF9 0FDAF9 00                      ISR_PWMSDN              BGND                            ;vector base + $8C
00DAFA 0FDAFA 00                      ISR_PORTP               BGND                            ;vector base + $8E
00DAFB 0FDAFB 00                      ISR_CAN4TX              BGND                            ;vector base + $90
00DAFC 0FDAFC 00                      ISR_CAN4RX              BGND                            ;vector base + $92
00DAFD 0FDAFD 00                      ISR_CAN4ERR             BGND                            ;vector base + $94
00DAFE 0FDAFE 00                      ISR_CAN4WUP             BGND                            ;vector base + $96
00DAFF 0FDAFF 00                      ISR_CAN3TX              BGND                            ;vector base + $98
00DB00 0FDB00 00                      ISR_CAN3RX              BGND                            ;vector base + $9A
00DB01 0FDB01 00                      ISR_CAN3ERR             BGND                            ;vector base + $9C
00DB02 0FDB02 00                      ISR_CAN3WUP             BGND                            ;vector base + $9E
00DB03 0FDB03 00                      ISR_CAN2TX              BGND                            ;vector base + $A0
00DB04 0FDB04 00                      ISR_CAN2RX              BGND                            ;vector base + $A2
00DB05 0FDB05 00                      ISR_CAN2ERR             BGND                            ;vector base + $A4
00DB06 0FDB06 00                      ISR_CAN2WUP             BGND                            ;vector base + $A6
00DB07 0FDB07 00                      ISR_CAN1TX              BGND                            ;vector base + $A8
00DB08 0FDB08 00                      ISR_CAN1RX              BGND                            ;vector base + $AA
00DB09 0FDB09 00                      ISR_CAN1ERR             BGND                            ;vector base + $AC
00DB0A 0FDB0A 00                      ISR_CAN1WUP             BGND                            ;vector base + $AE
00DB0B 0FDB0B 00                      ISR_CAN0TX              BGND                            ;vector base + $A0
00DB0C 0FDB0C 00                      ISR_CAN0RX              BGND                            ;vector base + $B2
00DB0D 0FDB0D 00                      ISR_CAN0ERR             BGND                            ;vector base + $B4
00DB0E 0FDB0E 00                      ISR_CAN0WUP             BGND                            ;vector base + $B6
00DB0F 0FDB0F 00                      ISR_FLASH               BGND                            ;vector base + $B8
00DB10 0FDB10 00                      ISR_EEPROM              BGND                            ;vector base + $BA
00DB11 0FDB11 00                      ISR_SPI2                BGND                            ;vector base + $BC
00DB12 0FDB12 00                      ISR_SPI1                BGND                            ;vector base + $BE
00DB13 0FDB13 00                      ISR_IIC0                BGND                            ;vector base + $C0
00DB14 0FDB14 00                      ISR_BDLC                BGND                            ;vector base + $C2
00DB15 0FDB15 00                      ISR_SCM                 BGND                            ;vector base + $C4
00DB16 0FDB16 -> $D3CF                ISR_PLLLOCK             EQU     CLOCK_ISR
00DB16 0FDB16 00                      ISR_ECT_PBOV            BGND                            ;vector base + $C8
00DB17 0FDB17 00                      ISR_ECT_MODCNT          BGND                            ;vector base + $CA
00DB18 0FDB18 00                      ISR_PORTH               BGND                            ;vector base + $CC
00DB19 0FDB19 00                      ISR_PORTJ               BGND                            ;vector base + $CC
00DB1A 0FDB1A 00                      ISR_ATD1                BGND                            ;vector base + $D0
00DB1B 0FDB1B 00                      ISR_ATD0                BGND                            ;vector base + $D2
00DB1C 0FDB1C 00                      ISR_SCI1                BGND                            ;vector base + $D4
00DB1D 0FDB1D -> $D737                ISR_SCI0                EQU     SCI_ISR_RXTX
00DB1D 0FDB1D 00                      ISR_SPI0                BGND                            ;vector base + $D8
00DB1E 0FDB1E 00                      ISR_ECT_PAIE            BGND                            ;vector base + $DA
00DB1F 0FDB1F 00                      ISR_ECT_PAOV            BGND                            ;vector base + $DC
00DB20 0FDB20 00                      ISR_ECT_TOV             BGND                            ;vector base + $DE
00DB21 0FDB21 00                      ISR_ECT_TC7             BGND                            ;vector base + $E0
00DB22 0FDB22 00                      ISR_ECT_TC6             BGND                            ;vector base + $E2
00DB23 0FDB23 00                      ISR_ECT_TC5             BGND                            ;vector base + $E4
00DB24 0FDB24 00                      ISR_ECT_TC4             BGND                            ;vector base + $E6
00DB25 0FDB25 -> $D658                ISR_ECT_TC3             EQU     SCI_ISR_DELAY
00DB25 0FDB25 00                      ISR_ECT_TC2             BGND                            ;vector base + $EA
00DB26 0FDB26 00                      ISR_ECT_TC1             BGND                            ;vector base + $EC
00DB27 0FDB27 00                      ISR_ECT_TC0             BGND
00DB28 0FDB28 00                      ISR_RTI                 BGND                            ;vector base + $F0
00DB29 0FDB29 00                      ISR_IRQ                 BGND                            ;vector base + $F2
00DB2A 0FDB2A 00                      ISR_XIRQ                BGND                            ;vector base + $F4
00DB2B 0FDB2B -> $D737                ISR_SWI                 EQU     SCI_ISR_RXTX
00DB2B 0FDB2B 00                      ISR_TRAP                BGND                            ;vector base + $F8
                                      ;#Code entry points
                                      ;#-----------------
00DB2C 0FDB2C -> $D000                RES_COP                 EQU     RES_EXT
00DB2C 0FDB2C -> $D000                RES_CM                  EQU     RES_EXT
00DB2C 0FDB2C -> $D000                RES_EXT                 EQU     START_OF_CODE
00DB2C 0FDB2C -> $DB2C                VECTAB_TABS_END         EQU     *
00DB2C 0FDB2C -> $FDB2C               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12DP256 Vector Table                                                       #
                                      ;###############################################################################
00FF80 0FFF80                                                 ORG     VECTAB_START, VECTAB_START_LIN
00FF80 0FFF80 DA F3                   VEC_RES80               DW      ISR_RES80               ;vector base + $80
00FF82 0FFF82 DA F4                   VEC_RES82               DW      ISR_RES82               ;vector base + $82
00FF84 0FFF84 DA F5                   VEC_RES84               DW      ISR_RES84               ;vector base + $84
00FF86 0FFF86 DA F6                   VEC_RES86               DW      ISR_RES86               ;vector base + $86
00FF88 0FFF88 DA F7                   VEC_RES88               DW      ISR_RES88               ;vector base + $88
00FF8A 0FFF8A DA F8                   VEC_RES8A               DW      ISR_RES8A               ;vector base + $8A
00FF8C 0FFF8C DA F9                   VEC_PWMSDN              DW      ISR_PWMSDN              ;vector base + $8C
00FF8E 0FFF8E DA FA                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
00FF90 0FFF90 DA FB                   VEC_CAN4TX              DW      ISR_CAN4TX              ;vector base + $90
00FF92 0FFF92 DA FC                   VEC_CAN4RX              DW      ISR_CAN4RX              ;vector base + $92
00FF94 0FFF94 DA FD                   VEC_CAN4ERR             DW      ISR_CAN4ERR             ;vector base + $94
00FF96 0FFF96 DA FE                   VEC_CAN4WUP             DW      ISR_CAN4WUP             ;vector base + $96
00FF98 0FFF98 DA FF                   VEC_CAN3TX              DW      ISR_CAN3TX              ;vector base + $98
00FF9A 0FFF9A DB 00                   VEC_CAN3RX              DW      ISR_CAN3RX              ;vector base + $9A
00FF9C 0FFF9C DB 01                   VEC_CAN3ERR             DW      ISR_CAN3ERR             ;vector base + $9C
00FF9E 0FFF9E DB 02                   VEC_CAN3WUP             DW      ISR_CAN3WUP             ;vector base + $9E
00FFA0 0FFFA0 DB 03                   VEC_CAN2TX              DW      ISR_CAN2TX              ;vector base + $A0
00FFA2 0FFFA2 DB 04                   VEC_CAN2RX              DW      ISR_CAN2RX              ;vector base + $A2
00FFA4 0FFFA4 DB 05                   VEC_CAN2ERR             DW      ISR_CAN2ERR             ;vector base + $A4
00FFA6 0FFFA6 DB 06                   VEC_CAN2WUP             DW      ISR_CAN2WUP             ;vector base + $A6
00FFA8 0FFFA8 DB 07                   VEC_CAN1TX              DW      ISR_CAN1TX              ;vector base + $A8
00FFAA 0FFFAA DB 08                   VEC_CAN1RX              DW      ISR_CAN1RX              ;vector base + $AA
00FFAC 0FFFAC DB 09                   VEC_CAN1ERR             DW      ISR_CAN1ERR             ;vector base + $AC
00FFAE 0FFFAE DB 0A                   VEC_CAN1WUP             DW      ISR_CAN1WUP             ;vector base + $AE
00FFB0 0FFFB0 DB 0B                   VEC_CAN0TX              DW      ISR_CAN0TX              ;vector base + $A0
00FFB2 0FFFB2 DB 0C                   VEC_CAN0RX              DW      ISR_CAN0RX              ;vector base + $B2
00FFB4 0FFFB4 DB 0D                   VEC_CAN0ERR             DW      ISR_CAN0ERR             ;vector base + $B4
00FFB6 0FFFB6 DB 0E                   VEC_CAN0WUP             DW      ISR_CAN0WUP             ;vector base + $B6
00FFB8 0FFFB8 DB 0F                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
00FFBA 0FFFBA DB 10                   VEC_EEPROM              DW      ISR_EEPROM              ;vector base + $BA
00FFBC 0FFFBC DB 11                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
00FFBE 0FFFBE DB 12                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
00FFC0 0FFFC0 DB 13                   VEC_IIC0                DW      ISR_IIC0                ;vector base + $C0
00FFC2 0FFFC2 DB 14                   VEC_BDLC                DW      ISR_BDLC                ;vector base + $C2
00FFC4 0FFFC4 DB 15                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
00FFC6 0FFFC6 D3 CF                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
00FFC8 0FFFC8 DB 16                   VEC_ECT_PBOV            DW      ISR_ECT_PBOV            ;vector base + $C8
00FFCA 0FFFCA DB 17                   VEC_ECT_MODCNT          DW      ISR_ECT_MODCNT          ;vector base + $CA
00FFCC 0FFFCC DB 18                   VEC_PORTH               DW      ISR_PORTH               ;vector base + $CC
00FFCE 0FFFCE DB 19                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CE
00FFD0 0FFFD0 DB 1A                   VEC_ATD1                DW      ISR_ATD1                ;vector base + $D0
00FFD2 0FFFD2 DB 1B                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
00FFD4 0FFFD4 DB 1C                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
00FFD6 0FFFD6 D7 37                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
00FFD8 0FFFD8 DB 1D                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
00FFDA 0FFFDA DB 1E                   VEC_ECT_PAIE            DW      ISR_ECT_PAIE            ;vector base + $DA
00FFDC 0FFFDC DB 1F                   VEC_ECT_PAOV            DW      ISR_ECT_PAOV            ;vector base + $DC
00FFDE 0FFFDE DB 20                   VEC_ECT_TOV             DW      ISR_ECT_TOV             ;vector base + $DE
00FFE0 0FFFE0 DB 21                   VEC_ECT_TC7             DW      ISR_ECT_TC7             ;vector base + $E0
00FFE2 0FFFE2 DB 22                   VEC_ECT_TC6             DW      ISR_ECT_TC6             ;vector base + $E2
00FFE4 0FFFE4 DB 23                   VEC_ECT_TC5             DW      ISR_ECT_TC5             ;vector base + $E4
00FFE6 0FFFE6 DB 24                   VEC_ECT_TC4             DW      ISR_ECT_TC4             ;vector base + $E6
00FFE8 0FFFE8 D6 58                   VEC_ECT_TC3             DW      ISR_ECT_TC3             ;vector base + $E8
00FFEA 0FFFEA DB 25                   VEC_ECT_TC2             DW      ISR_ECT_TC2             ;vector base + $EA
00FFEC 0FFFEC DB 26                   VEC_ECT_TC1             DW      ISR_ECT_TC1             ;vector base + $EC
00FFEE 0FFFEE DB 27                   VEC_ECT_TC0             DW      ISR_ECT_TC0             ;vector base + $EE
00FFF0 0FFFF0 DB 28                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
00FFF2 0FFFF2 DB 29                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
00FFF4 0FFFF4 DB 2A                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
00FFF6 0FFFF6 D7 37                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
00FFF8 0FFFF8 DB 2B                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
00FFFA 0FFFFA D0 00                   VEC_RESET_COP           DW      RES_COP                 ;vector base + $FA
00FFFC 0FFFFC D0 00                   VEC_RESET_CM            DW      RES_CM                  ;vector base + $FC
00FFFE 0FFFFE D0 00                   VEC_RESET_EXT           DW      RES_EXT                 ;vector base + $FE
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00D98B 0FD98B                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
00D98B 0FD98B -> $D98B                DEMO_VARS_END           EQU     *
00D98B 0FD98B -> $FD98B               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00D000 0FD000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
00D000 0FD000 MACRO                                           BASE_INIT
                                      ;############################################################################### (BASE_INIT)
                                      ;# Macros                                                                      # (BASE_INIT)
                                      ;############################################################################### (BASE_INIT)
                                      ;#Initialization                                                                 (BASE_INIT)
00D000 0FD000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
00D000 0FD000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
00D002 0FD002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
00D004 0FD004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
00D006 0FD006 18 0B C0 01 2D                          MOVB    #$C0, ATD1DIEN  ;switch unused pins to analog            (BASE_INIT/GPIO_INIT)
00D00B 0FD00B 18 0B 00 00 8D                          MOVB    #$00, ATD0DIEN                                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A & B                                                     (BASE_INIT/GPIO_INIT)
00D010 0FD010 18 03 93 93 00 0C                       MOVW    #(((PUPKE|PUPEE|PUPBE|PUPAE)<<8)|RDPK|RDPE|RDPB|RDPA), PUCR ;enable pull-ups and reduced drive (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRA                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PORTE                                              (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, DDRE                                               (BASE_INIT/GPIO_INIT)
00D016 0FD016 79 00 1E                                CLR     INTCR           ;disable IRQ                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port H                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRH                                                     (BASE_INIT/GPIO_INIT)
00D019 0FD019 18 0B FF 02 64                          MOVB    #$FF, PERH                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSH                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRJ                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FC, PERJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSJ                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port K                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRK                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRM                                                     (BASE_INIT/GPIO_INIT)
00D01E 0FD01E 18 0B FF 02 54                          MOVB    #$FF, PERM                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSM                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRP                                                     (BASE_INIT/GPIO_INIT)
00D023 0FD023 18 0B FF 02 5C                          MOVB    #$FF, PERP                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSP                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
00D028 0FD028 18 0B 0A 02 48                          MOVB    #$0A, PTS                                                (BASE_INIT/GPIO_INIT)
00D02D 0FD02D 18 0B 0A 02 4A                          MOVB    #$0A, DDRS                                               (BASE_INIT/GPIO_INIT)
00D032 0FD032 18 03 00 F0 02 4C                       MOVW    #$F0, PERS                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSS                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRT                                                     (BASE_INIT/GPIO_INIT)
                                                      ;CLR    RDRT                                                     (BASE_INIT/GPIO_INIT)
00D038 0FD038 18 0B FF 02 44                          MOVB    #$FF, PERT                                               (BASE_INIT/GPIO_INIT)
00D03D 0FD03D MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup and lock RAM and register space                   (BASE_INIT/MMAP_INIT)
00D03D 0FD03D 18 03 C1 00 00 10                               MOVW    #((MMAP_INITRM_VAL<<8)|MMAP_INITRG_VAL), INITRM  (BASE_INIT/MMAP_INIT)
00D043 0FD043 MACRO                                           VECTAB_INIT                                              (BASE_INIT)
00D043 0FD043 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
00D043 0FD043 CF D9 AF                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
00D046 0FD046 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
00D048 0FD048 MACRO                                           SSTACK_INIT                                              (BASE_INIT)
00D048 0FD048 MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
00D048 0FD048 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
00D04D 0FD04D 18 03 18 03 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
00D053 0FD053 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
00D059 0FD059 MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00D059 0FD059 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
00D05E 0FD05E MACRO                                           TIM_INIT                                                 (BASE_INIT)
00D05E 0FD05E MACRO                                           STRING_INIT                                              (BASE_INIT)
00D05E 0FD05E MACRO                                           NUM_INIT                                                 (BASE_INIT)
00D05E 0FD05E MACRO                                           NVM_INIT                                                 (BASE_INIT)
00D05E 0FD05E MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                                              ;MOVW   #(((RTIE|LOCKIE)<<8)|CWAI|COPWAI), CRGINT        (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ;CRG configuration: (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; real-time interrupt enabled           (RTIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL lock interrupt enabled            (LOCKIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no self-clock mode interrupt          (~SCMIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no pseudo-stop                        (~PSTP) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; system/bus clock in wait mode         (~SYSWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no reduced oscillator amplitude       (~ROAWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL in wait mode                      (~PLLWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; core/CPU clock stops in wait mode     (CWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; RTI keeps running in wait mode        (~RTIWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; COP stops in wait mode                (COPWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;BSET   PLLCTL, #(CME|PLLON|AUTO)                       ; clock monitor enabled                 (CME) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL enabled                           (PLLON) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; automatic bandwith control            (AUTO) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00D05E 0FD05E 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00D060 0FD060 4E 39 80 1C                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00D064 0FD064 MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D064 0FD064 8F D9 94                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D067 0FD067 25 13                                           BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D069 0FD069 8F D9 AF                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D06C 0FD06C 22 0F                                           BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D06E 0FD06E MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00D06E 0FD06E 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00D073 0FD073 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
00D078 0FD078 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D07A 0FD07A 20 02                                           JOB     DONE                                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D07C 0FD07C 00                      OF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D07D 0FD07D 00                      UF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D07E 0FD07E -> $D07E                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00D07E 0FD07E 20 DE                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00D080 0FD080 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
00D082 0FD082 MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_INIT)
00D082 0FD082 CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_INIT)
00D085 0FD085 7C D9 DA                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_INIT)
00D088 0FD088 7C D9 D0                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_INIT)
00D08B 0FD08B 18 0B 80 D9 AF                                  MOVB    #SCI_FLG_SEND_XONXOFF,  SCI_FLGS        ;request transmission of XON/XOFF (BASE_INIT/SCI_INIT)
                                                              ;Initialize baud rate detection                          (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
00D090 0FD090 4C 40 08                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
00D093 0FD093 FC D9 DC                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
00D096 0FD096 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
00D098 0FD098 CE 19 99                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
00D09B 0FD09B 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
00D09D 0FD09D 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
00D0A0 0FD0A0 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
00D0A2 0FD0A2 CD DA 90                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
00D0A5 0FD0A5 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
00D0A7 0FD0A7 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
00D0A9 0FD0A9 8D DA A0                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
00D0AC 0FD0AC 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
00D0AE 0FD0AE CE 00 A3                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
00D0B1 0FD0B1 18 03 4C 6B D9 DC                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
00D0B7 0FD0B7 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format and enable transmission                (BASE_INIT/SCI_INIT)
00D0B9 0FD0B9 18 03 04 AC 00 CA                               MOVW    #((SCI_8N1<<8)|TXIE|RIE|TE|RE), SCICR1  ;8N1 (transmit XON) (BASE_INIT/SCI_INIT)
                                                              ;Initialize CTS                                          (BASE_INIT/SCI_INIT)
00D0BF 0FD0BF MACRO                                           SCI_ASSERT_CTS                                           (BASE_INIT/SCI_INIT)
00D0BF 0FD0BF MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Check for POR                                           (BASE_INIT/RESET_INIT)
00D0BF 0FD0BF B6 D9 E1                                        LDAA    RESET_FLGS                                       (BASE_INIT/RESET_INIT)
00D0C2 0FD0C2 85 40                                           BITA    #RESET_FLG_POR                                   (BASE_INIT/RESET_INIT)
00D0C4 0FD0C4 26 53                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Check for power failure (flags in A)                    (BASE_INIT/RESET_INIT)
00D0C6 0FD0C6 CD DA C7                                        LDY     #RESET_STR_POWFAIL                               (BASE_INIT/RESET_INIT)
00D0C9 0FD0C9 85 20                                           BITA    #RESET_FLG_POWFAIL                               (BASE_INIT/RESET_INIT)
00D0CB 0FD0CB 26 21                                           BNE     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Check for clock failure (flags in A)                    (BASE_INIT/RESET_INIT)
00D0CD 0FD0CD CD DA BA                                        LDY     #RESET_STR_CLKFAIL                               (BASE_INIT/RESET_INIT)
00D0D0 0FD0D0 85 01                                           BITA    #RESET_FLG_CLKFAIL                               (BASE_INIT/RESET_INIT)
00D0D2 0FD0D2 26 1A                                           BNE     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Check for code runaway (flags in A)                     (BASE_INIT/RESET_INIT)
                                                              ;Check for COP reset (flags in A)                        (BASE_INIT/RESET_INIT)
00D0D4 0FD0D4 85 02                                           BITA    #RESET_FLG_COP                                   (BASE_INIT/RESET_INIT)
00D0D6 0FD0D6 27 41                                           BEQ     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
                                                              ;Check custom error                                      (BASE_INIT/RESET_INIT)
00D0D8 0FD0D8 FE D9 E2                                        LDX     RESET_MSG                                        (BASE_INIT/RESET_INIT)
00D0DB 0FD0DB CD D0 E1                                        LDY     #RESET_INIT_1                                    (BASE_INIT/RESET_INIT)
00D0DE 0FD0DE 06 D8 4B                                        JOB     RESET_CALC_CHECKSUM                              (BASE_INIT/RESET_INIT)
00D0E1 0FD0E1 -> $D0E1                RESET_INIT_1            EQU     *                                                (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (checksum in A, valid/invalid in C) (BASE_INIT/RESET_INIT)
00D0E1 0FD0E1 FD DA AA                                        LDY     RESET_STR_COP                                    (BASE_INIT/RESET_INIT)
00D0E4 0FD0E4 24 08                                           BCC     <RESET_INIT_2            ;print error message    (BASE_INIT/RESET_INIT)
                                                              ;Verify checksum (checksum in A)                         (BASE_INIT/RESET_INIT)
00D0E6 0FD0E6 B1 D9 E4                                        CMPA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
00D0E9 0FD0E9 26 2E                                           BNE     <RESET_INIT_3            ;print welcome message  (BASE_INIT/RESET_INIT)
00D0EB 0FD0EB FD D9 E2                                        LDY     RESET_MSG                                        (BASE_INIT/RESET_INIT)
                                                              ;Print error message (error message in Y)                (BASE_INIT/RESET_INIT)
00D0EE 0FD0EE CE DA A3                RESET_INIT_2            LDX     #RESET_STR_FATAL                                 (BASE_INIT/RESET_INIT)
00D0F1 0FD0F1 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
00D0F1 0FD0F1 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D0F1 0FD0F1                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D0F1 0FD0F1 MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D0F1 0FD0F1 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D0F1 0FD0F1 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0F1 0FD0F1 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0F4 0FD0F4 18 25 02 CB                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0F8 0FD0F8 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0FB 0FD0FB 18 22 02 CA                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0FF 0FD0FF -> $D3C9                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0FF 0FD0FF -> $D3C3                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D0FF 0FD0FF 16 D4 FC                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D102 0FD102 MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D102 0FD102 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D102 0FD102 8F D9 9C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D105 0FD105 18 25 02 BA                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D109 0FD109 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D10C 0FD10C 18 22 02 B9                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D110 0FD110 -> $D3C9                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D110 0FD110 -> $D3C3                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D110 0FD110 16 D7 C8                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D113 0FD113 24 DC                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D115 0FD115 B7 65                                           TFR     Y, X                                             (BASE_INIT/RESET_INIT)
00D117 0FD117 20 03                                           JOB     RESET_INIT_4                                     (BASE_INIT/RESET_INIT)
                                                              ;Print welcome message                                   (BASE_INIT/RESET_INIT)
00D119 0FD119 CE D9 E5                RESET_INIT_3            LDX     #RESET_WELCOME                                   (BASE_INIT/RESET_INIT)
00D11C 0FD11C MACRO                   RESET_INIT_4            STRING_PRINT_BL                                          (BASE_INIT/RESET_INIT)
                                      ;#Basic print function - blocking                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
00D11C 0FD11C MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D11C 0FD11C                         LOOP                    ;Wait until TX buffer accepts new data                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D11C 0FD11C MACRO                                           SCI_TX_READY_BL                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D11C 0FD11C MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D11C 0FD11C MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D11C 0FD11C 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D11F 0FD11F 18 25 02 A0                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D123 0FD123 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D126 0FD126 18 22 02 9F                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D12A 0FD12A -> $D3C9                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D12A 0FD12A -> $D3C3                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D12A 0FD12A 16 D4 FC                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
00D12D 0FD12D MACRO                                           SSTACK_JOBSR    \1, \2                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D12D 0FD12D MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D12D 0FD12D 8F D9 9C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D130 0FD130 18 25 02 8F                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D134 0FD134 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D137 0FD137 18 22 02 8E                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D13B 0FD13B -> $D3C9                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D13B 0FD13B -> $D3C3                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D13B 0FD13B 16 D7 C8                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D13E 0FD13E 24 DC                                           BCC     LOOP            ;function unsuccessful           (BASE_INIT/RESET_INIT/STRING_PRINT_BL/STRING_CALL_BL)
                                                              ;Print exlamation mark and new line                      (BASE_INIT/RESET_INIT)
                                                              ;LDX    #STRING_STR_EXCLAM_NL                            (BASE_INIT/RESET_INIT)
                                                              ;STRING_PRINT_BL                                         (BASE_INIT/RESET_INIT)
                                                              ;Remove custom error message                             (BASE_INIT/RESET_INIT)
00D140 0FD140 DC 00                                           LDD     $0000                                            (BASE_INIT/RESET_INIT)
00D142 0FD142 7C D9 E2                                        STD     RESET_MSG                                        (BASE_INIT/RESET_INIT)
00D145 0FD145 7A D9 E4                                        STAA    RESET_MSG_CHKSUM                                 (BASE_INIT/RESET_INIT)
                                                              ;Wait until message has been transmitted                 (BASE_INIT/RESET_INIT)
00D148 0FD148 MACRO                                           SCI_TX_DONE_BL                                           (BASE_INIT/RESET_INIT)
                                      ;#Wait until all pending data is sent                                            (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; args:   none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; result: A: number of entries left in TX queue                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ; SSTACK: 6 bytes                                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
00D148 0FD148 MACRO                                           SSTACK_JOBSR    SCI_TX_DONE_BL, 6                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
00D148 0FD148 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D148 0FD148 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D14B 0FD14B 18 25 02 74                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D14F 0FD14F 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D152 0FD152 18 22 02 73                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D156 0FD156 -> $D3C9                UF                      EQU     SSTACK_UF                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D156 0FD156 -> $D3C3                OF                      EQU     SSTACK_OF                                        (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D156 0FD156 16 D4 8B                                        JOBSR   \1                                               (BASE_INIT/RESET_INIT/SCI_TX_DONE_BL/SSTACK_JOBSR)
                                      ;Application code
00D159 0FD159 MACRO                   DEMO_LOOP               SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00D159 0FD159 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00D159 0FD159 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D159 0FD159 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D15C 0FD15C 18 25 02 63                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D160 0FD160 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D163 0FD163 18 22 02 62                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D167 0FD167 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D167 0FD167 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D167 0FD167 16 D5 88                                        JOBSR   \1                                               (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors
00D16A 0FD16A 04 70 EC                                        TBNE    A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
00D16D 0FD16D B7 45                                           TFR     D, X
00D16F 0FD16F 86 04                                           LDAA    #4
00D171 0FD171 C6 20                                           LDAB    #" "
00D173 0FD173 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00D173 0FD173 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00D173 0FD173                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00D173 0FD173 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D173 0FD173 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D173 0FD173 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D173 0FD173 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D176 0FD176 18 25 02 49                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D17A 0FD17A 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D17D 0FD17D 18 22 02 48                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D181 0FD181 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D181 0FD181 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D181 0FD181 16 D4 FC                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00D184 0FD184 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D184 0FD184 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D184 0FD184 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D187 0FD187 18 25 02 38                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D18B 0FD18B 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D18E 0FD18E 18 22 02 37                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D192 0FD192 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D192 0FD192 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D192 0FD192 16 D7 FF                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D195 0FD195 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00D197 0FD197 B7 54                                           TFR     X, D
00D199 0FD199 87                                              CLRA
00D19A 0FD19A MACRO                                           STRING_MAKE_PRINTABLE_B
                                      ;#Make ASCII character printable                                                 (STRING_MAKE_PRINTABLE_B)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_MAKE_PRINTABLE_B)
                                      ; result: B: printable ASCII character or "."                                    (STRING_MAKE_PRINTABLE_B)
                                      ; SSTACK: none                                                                   (STRING_MAKE_PRINTABLE_B)
                                      ;         X, Y, and A are preserved                                              (STRING_MAKE_PRINTABLE_B)
00D19A 0FD19A C1 20                                           CMPB    #$20            ;" "                             (STRING_MAKE_PRINTABLE_B)
00D19C 0FD19C 25 04                                           BLO     ADJUST                                           (STRING_MAKE_PRINTABLE_B)
00D19E 0FD19E C1 7E                                           CMPB    #$7E            ;"~"                             (STRING_MAKE_PRINTABLE_B)
00D1A0 0FD1A0 23 02                                           BLS     DONE                                             (STRING_MAKE_PRINTABLE_B)
00D1A2 0FD1A2 C6 2E                   ADJUST                  LDAB    #$2E            ;"."                             (STRING_MAKE_PRINTABLE_B)
00D1A4 0FD1A4 -> $D1A4                DONE                    EQU     *                                                (STRING_MAKE_PRINTABLE_B)
00D1A4 0FD1A4 MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
00D1A4 0FD1A4 MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 7                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
00D1A4 0FD1A4 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SSTACK_JOBSR)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1A4 0FD1A4 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1A7 0FD1A7 18 25 02 18                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1AB 0FD1AB 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1AE 0FD1AE 18 22 02 17                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1B2 0FD1B2 -> $D3C9                UF                      EQU     SSTACK_UF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1B2 0FD1B2 -> $D3C3                OF                      EQU     SSTACK_OF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1B2 0FD1B2 16 D4 1E                                        JOBSR   \1                                               (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
00D1B5 0FD1B5 CD 00 00                                        LDY     #$0000
00D1B8 0FD1B8 C6 10                                           LDAB    #16
00D1BA 0FD1BA MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00D1BA 0FD1BA MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00D1BA 0FD1BA MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1BA 0FD1BA 8F D9 A6                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1BD 0FD1BD 18 25 02 02                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1C1 0FD1C1 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1C4 0FD1C4 18 22 02 01                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1C8 0FD1C8 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1C8 0FD1C8 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1C8 0FD1C8 16 D8 8B                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00D1CB 0FD1CB B7 76                                           TFR     SP, Y
00D1CD 0FD1CD 40                                              NEGA
00D1CE 0FD1CE 8B 05                                           ADDA    #5
00D1D0 0FD1D0 C6 20                                           LDAB    #" "
00D1D2 0FD1D2 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00D1D2 0FD1D2 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00D1D2 0FD1D2                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00D1D2 0FD1D2 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D1D2 0FD1D2 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D1D2 0FD1D2 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1D2 0FD1D2 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1D5 0FD1D5 18 25 01 EA                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1D9 0FD1D9 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1DC 0FD1DC 18 22 01 E9                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1E0 0FD1E0 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1E0 0FD1E0 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1E0 0FD1E0 16 D4 FC                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00D1E3 0FD1E3 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D1E3 0FD1E3 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1E3 0FD1E3 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1E6 0FD1E6 18 25 01 D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1EA 0FD1EA 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1ED 0FD1ED 18 22 01 D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1F1 0FD1F1 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1F1 0FD1F1 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1F1 0FD1F1 16 D7 FF                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D1F4 0FD1F4 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00D1F6 0FD1F6 C6 10                                           LDAB    #16
00D1F8 0FD1F8 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00D1F8 0FD1F8 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00D1F8 0FD1F8                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00D1F8 0FD1F8 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00D1F8 0FD1F8 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D1F8 0FD1F8 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1F8 0FD1F8 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1FB 0FD1FB 18 25 01 C4                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D1FF 0FD1FF 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D202 0FD202 18 22 01 C3                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D206 0FD206 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D206 0FD206 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D206 0FD206 16 D4 FC                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00D209 0FD209 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D209 0FD209 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D209 0FD209 8F D9 A7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D20C 0FD20C 18 25 01 B3                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D210 0FD210 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D213 0FD213 18 22 01 B2                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D217 0FD217 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D217 0FD217 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D217 0FD217 16 D9 18                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D21A 0FD21A 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00D21C 0FD21C MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00D21C 0FD21C MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D21C 0FD21C 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D21F 0FD21F 18 25 01 A0                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D223 0FD223 8F D9 A9                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D226 0FD226 18 22 01 9F                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D22A 0FD22A -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D22A 0FD22A -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D22A 0FD22A 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
00D22C 0FD22C CD 00 00                                        LDY     #$0000
00D22F 0FD22F C6 0A                                           LDAB    #10
00D231 0FD231 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00D231 0FD231 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00D231 0FD231 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D231 0FD231 8F D9 A6                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D234 0FD234 18 25 01 8B                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D238 0FD238 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D23B 0FD23B 18 22 01 8A                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D23F 0FD23F -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D23F 0FD23F -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D23F 0FD23F 16 D8 8B                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00D242 0FD242 B7 76                                           TFR     SP, Y
00D244 0FD244 40                                              NEGA
00D245 0FD245 8B 05                                           ADDA    #5
00D247 0FD247 C6 20                                           LDAB    #" "
00D249 0FD249 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00D249 0FD249 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00D249 0FD249                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00D249 0FD249 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D249 0FD249 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D249 0FD249 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D249 0FD249 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D24C 0FD24C 18 25 01 73                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D250 0FD250 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D253 0FD253 18 22 01 72                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D257 0FD257 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D257 0FD257 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D257 0FD257 16 D4 FC                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00D25A 0FD25A MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D25A 0FD25A MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D25A 0FD25A 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D25D 0FD25D 18 25 01 62                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D261 0FD261 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D264 0FD264 18 22 01 61                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D268 0FD268 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D268 0FD268 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D268 0FD268 16 D7 FF                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D26B 0FD26B 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00D26D 0FD26D C6 0A                                           LDAB    #10
00D26F 0FD26F MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00D26F 0FD26F MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00D26F 0FD26F                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00D26F 0FD26F MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00D26F 0FD26F MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D26F 0FD26F MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D26F 0FD26F 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D272 0FD272 18 25 01 4D                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D276 0FD276 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D279 0FD279 18 22 01 4C                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D27D 0FD27D -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D27D 0FD27D -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D27D 0FD27D 16 D4 FC                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00D280 0FD280 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D280 0FD280 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D280 0FD280 8F D9 A7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D283 0FD283 18 25 01 3C                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D287 0FD287 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D28A 0FD28A 18 22 01 3B                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D28E 0FD28E -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D28E 0FD28E -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D28E 0FD28E 16 D9 18                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D291 0FD291 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00D293 0FD293 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00D293 0FD293 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D293 0FD293 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D296 0FD296 18 25 01 29                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D29A 0FD29A 8F D9 A9                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D29D 0FD29D 18 22 01 28                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D2A1 0FD2A1 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D2A1 0FD2A1 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D2A1 0FD2A1 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
00D2A3 0FD2A3 CD 00 00                                        LDY     #$0000
00D2A6 0FD2A6 C6 08                                           LDAB    #8
00D2A8 0FD2A8 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00D2A8 0FD2A8 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00D2A8 0FD2A8 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2A8 0FD2A8 8F D9 A6                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2AB 0FD2AB 18 25 01 14                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2AF 0FD2AF 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2B2 0FD2B2 18 22 01 13                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2B6 0FD2B6 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2B6 0FD2B6 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2B6 0FD2B6 16 D8 8B                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00D2B9 0FD2B9 B7 76                                           TFR     SP, Y
00D2BB 0FD2BB 40                                              NEGA
00D2BC 0FD2BC 8B 05                                           ADDA    #5
00D2BE 0FD2BE C6 20                                           LDAB    #" "
00D2C0 0FD2C0 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00D2C0 0FD2C0 MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00D2C0 0FD2C0                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00D2C0 0FD2C0 MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D2C0 0FD2C0 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D2C0 0FD2C0 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2C0 0FD2C0 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2C3 0FD2C3 18 25 00 FC                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2C7 0FD2C7 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2CA 0FD2CA 18 22 00 FB                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2CE 0FD2CE -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2CE 0FD2CE -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2CE 0FD2CE 16 D4 FC                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00D2D1 0FD2D1 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D2D1 0FD2D1 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2D1 0FD2D1 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2D4 0FD2D4 18 25 00 EB                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2D8 0FD2D8 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2DB 0FD2DB 18 22 00 EA                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2DF 0FD2DF -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2DF 0FD2DF -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2DF 0FD2DF 16 D7 FF                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D2E2 0FD2E2 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00D2E4 0FD2E4 C6 08                                           LDAB    #8
00D2E6 0FD2E6 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00D2E6 0FD2E6 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00D2E6 0FD2E6                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00D2E6 0FD2E6 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00D2E6 0FD2E6 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D2E6 0FD2E6 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2E6 0FD2E6 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2E9 0FD2E9 18 25 00 D6                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2ED 0FD2ED 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2F0 0FD2F0 18 22 00 D5                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2F4 0FD2F4 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2F4 0FD2F4 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2F4 0FD2F4 16 D4 FC                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00D2F7 0FD2F7 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D2F7 0FD2F7 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2F7 0FD2F7 8F D9 A7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2FA 0FD2FA 18 25 00 C5                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D2FE 0FD2FE 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D301 0FD301 18 22 00 C4                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D305 0FD305 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D305 0FD305 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D305 0FD305 16 D9 18                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D308 0FD308 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00D30A 0FD30A MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00D30A 0FD30A MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D30A 0FD30A 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D30D 0FD30D 18 25 00 B2                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D311 0FD311 8F D9 A9                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D314 0FD314 18 22 00 B1                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D318 0FD318 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D318 0FD318 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D318 0FD318 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
00D31A 0FD31A 86 02                                           LDAA    #2
00D31C 0FD31C C6 20                                           LDAB    #" "
00D31E 0FD31E MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00D31E 0FD31E MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00D31E 0FD31E                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00D31E 0FD31E MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D31E 0FD31E MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D31E 0FD31E MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D31E 0FD31E 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D321 0FD321 18 25 00 9E                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D325 0FD325 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D328 0FD328 18 22 00 9D                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D32C 0FD32C -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D32C 0FD32C -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D32C 0FD32C 16 D4 FC                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00D32F 0FD32F MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D32F 0FD32F MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D32F 0FD32F 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D332 0FD332 18 25 00 8D                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D336 0FD336 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D339 0FD339 18 22 00 8C                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D33D 0FD33D -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D33D 0FD33D -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D33D 0FD33D 16 D7 FF                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D340 0FD340 24 DC                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00D342 0FD342 CD 00 00                                        LDY     #$0000
00D345 0FD345 C6 02                                           LDAB    #2
00D347 0FD347 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00D347 0FD347 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00D347 0FD347 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D347 0FD347 8F D9 A6                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D34A 0FD34A 25 77                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D34C 0FD34C 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D34F 0FD34F 22 78                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D351 0FD351 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D351 0FD351 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00D351 0FD351 16 D8 8B                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00D354 0FD354 B7 76                                           TFR     SP, Y
00D356 0FD356 40                                              NEGA
00D357 0FD357 8B 08                                           ADDA    #8
00D359 0FD359 C6 30                                           LDAB    #"0"
00D35B 0FD35B MACRO                                           STRING_fill_BL
                                      ;#Print a number of filler characters - blocking                                 (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00D35B 0FD35B MACRO                                           STRING_CALL_BL  STRING_FILL_NB, 7                        (STRING_FILL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_FILL_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_FILL_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_FILL_BL/STRING_CALL_BL)
00D35B 0FD35B                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_FILL_BL/STRING_CALL_BL)
00D35B 0FD35B MACRO                                           SCI_TX_READY_BL                                          (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D35B 0FD35B MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D35B 0FD35B MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D35B 0FD35B 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D35E 0FD35E 25 63                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D360 0FD360 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D363 0FD363 22 64                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D365 0FD365 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D365 0FD365 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D365 0FD365 16 D4 FC                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_FILL_BL/STRING_CALL_BL)
00D368 0FD368 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_FILL_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D368 0FD368 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D368 0FD368 8F D9 9B                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D36B 0FD36B 25 56                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D36D 0FD36D 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D370 0FD370 22 57                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D372 0FD372 -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D372 0FD372 -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D372 0FD372 16 D7 FF                                        JOBSR   \1                                               (STRING_FILL_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D375 0FD375 24 E4                                           BCC     LOOP            ;function unsuccessful           (STRING_FILL_BL/STRING_CALL_BL)
00D377 0FD377 C6 02                                           LDAB    #2
00D379 0FD379 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
00D379 0FD379 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
00D379 0FD379                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
00D379 0FD379 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
00D379 0FD379 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D379 0FD379 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D379 0FD379 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D37C 0FD37C 25 45                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D37E 0FD37E 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D381 0FD381 22 46                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D383 0FD383 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D383 0FD383 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D383 0FD383 16 D4 FC                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
00D386 0FD386 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D386 0FD386 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D386 0FD386 8F D9 A7                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D389 0FD389 25 38                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D38B 0FD38B 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D38E 0FD38E 22 39                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D390 0FD390 -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D390 0FD390 -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D390 0FD390 16 D9 18                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00D393 0FD393 24 E4                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
00D395 0FD395 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_CLEAN_REVERSE)
00D395 0FD395 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   required stack content (bytes)                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D395 0FD395 8F D9 94                                        CPS     #SSTACK_TOP             ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D398 0FD398 25 29                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D39A 0FD39A 8F D9 A9                                        CPS     #SSTACK_BOTTOM-\1       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D39D 0FD39D 22 2A                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D39F 0FD39F -> $D3C9                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D39F 0FD39F -> $D3C3                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
00D39F 0FD39F 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print new line
00D3A1 0FD3A1 CE DA A1                                        LDX     #STRING_STR_NL
00D3A4 0FD3A4 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00D3A4 0FD3A4 MACRO                                           STRING_CALL_BL  STRING_PRINT_NB, 8                       (STRING_PRINT_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; args:   1: non-blocking function                                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_PRINT_BL/STRING_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_PRINT_BL/STRING_CALL_BL)
00D3A4 0FD3A4                         LOOP                    ;Wait until TX buffer accepts new data                   (STRING_PRINT_BL/STRING_CALL_BL)
00D3A4 0FD3A4 MACRO                                           SCI_TX_READY_BL                                          (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
00D3A4 0FD3A4 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
00D3A4 0FD3A4 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3A4 0FD3A4 8F D9 9A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3A7 0FD3A7 25 1A                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3A9 0FD3A9 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3AC 0FD3AC 22 1B                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3AE 0FD3AE -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3AE 0FD3AE -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3AE 0FD3AE 16 D4 FC                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (STRING_PRINT_BL/STRING_CALL_BL)
00D3B1 0FD3B1 MACRO                                           SSTACK_JOBSR    \1, \2                                   (STRING_PRINT_BL/STRING_CALL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D3B1 0FD3B1 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3B1 0FD3B1 8F D9 9C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3B4 0FD3B4 25 0D                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3B6 0FD3B6 8F D9 AF                                        CPS     #SSTACK_BOTTOM          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3B9 0FD3B9 22 0E                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3BB 0FD3BB -> $D3C9                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3BB 0FD3BB -> $D3C3                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00D3BB 0FD3BB 16 D7 C8                                        JOBSR   \1                                               (STRING_PRINT_BL/STRING_CALL_BL/SSTACK_JOBSR)
00D3BE 0FD3BE 24 E4                                           BCC     LOOP            ;function unsuccessful           (STRING_PRINT_BL/STRING_CALL_BL)
00D3C0 0FD3C0 06 D1 59                                        JOB     DEMO_LOOP
                                                              ;ALIGN 1                ;
00D3C3 0FD3C3 -> $D3C3                DEMO_CODE_END           EQU     *
00D3C3 0FD3C3 -> $FD3C3               DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# TABLES                                                                      #
                                      ;###############################################################################
00D9E5 0FD9E5                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
00D9E5 0FD9E5 54 68 69 73 20 69 73 20 DEMO_WELCOME            FCC     "This is the S12CBase Demo for the S12DP256-Mini-EVB"
              74 68 65 20 53 31 32 43 
              42 61 73 65 20 44 65 6D 
              6F 20 66 6F 72 20 74 68 
              65 20 53 31 32 44 50 32 
              35 36 2D 4D 69 6E 69 2D 
              45 56 42                
00DA18 0FDA18 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00DA18 0FDA18 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00DA19 0FDA19 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00DA1A 0FDA1A MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00DA1A 0FDA1A 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00DA1B 0FDA1B 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00DA1C 0FDA1C 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
00DA3A 0FDA3A MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00DA3A 0FDA3A 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
00DA3B 0FDA3B 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
00DA3C 0FDA3C 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
00DA5A 0FDA5A MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
00DA5A 0FDA5A 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
00DA5B 0FDA5B 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
00DA5C 0FDA5C -> $DA5C                DEMO_TABS_END           EQU     *
00DA5C 0FDA5C -> $FDA5C               DEMO_TABS_END_LIN       EQU     @
